
FRA262STUIII.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ed80  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000b104  0801ef20  0801ef20  0002ef20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802a024  0802a024  00040250  2**0
                  CONTENTS
  4 .ARM          00000008  0802a024  0802a024  0003a024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802a02c  0802a02c  00040250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0802a02c  0802a02c  0003a02c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802a034  0802a034  0003a034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  20000000  0802a038  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b0  20000250  0802a288  00040250  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000800  0802a288  00040800  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040250  2**0
                  CONTENTS, READONLY
 12 .debug_info   00105243  00000000  00000000  00040280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002da4  00000000  00000000  001454c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004a30  00000000  00000000  00148268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004980  00000000  00000000  0014cc98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cb84  00000000  00000000  00151618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022317  00000000  00000000  0016e19c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0047856f  00000000  00000000  001904b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00608a22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0001646c  00000000  00000000  00608a74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000250 	.word	0x20000250
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801ef08 	.word	0x0801ef08

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000254 	.word	0x20000254
 80001dc:	0801ef08 	.word	0x0801ef08

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f06:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f0a:	eef0 7ae7 	vabs.f32	s15, s15
 8000f0e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f26:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f2a:	f01c f8ed 	bl	801d108 <sqrtf>
 8000f2e:	eef0 7a40 	vmov.f32	s15, s0
 8000f32:	eeb0 0a67 	vmov.f32	s0, s15
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <_ZN5Eigen8internal5all_tC1Ev>:

//--------------------------------------------------------------------------------
// Handling of all
//--------------------------------------------------------------------------------

struct all_t { all_t() {} };
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
	...

08000f6c <HAL_UARTEx_RxEventCallback>:
/* USER CODE BEGIN 0 */

///////////////////// [UART UI Base System] /////////////////////

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	460b      	mov	r3, r1
 8000f76:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a4a      	ldr	r2, [pc, #296]	; (80010a8 <HAL_UARTEx_RxEventCallback+0x13c>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	f040 808d 	bne.w	800109e <HAL_UARTEx_RxEventCallback+0x132>
	{
		oldPos_uart = newPos_uart;  // Update the last position before copying new data
 8000f84:	4b49      	ldr	r3, [pc, #292]	; (80010ac <HAL_UARTEx_RxEventCallback+0x140>)
 8000f86:	881a      	ldrh	r2, [r3, #0]
 8000f88:	4b49      	ldr	r3, [pc, #292]	; (80010b0 <HAL_UARTEx_RxEventCallback+0x144>)
 8000f8a:	801a      	strh	r2, [r3, #0]
		datasize_uart = Size;
 8000f8c:	4a49      	ldr	r2, [pc, #292]	; (80010b4 <HAL_UARTEx_RxEventCallback+0x148>)
 8000f8e:	887b      	ldrh	r3, [r7, #2]
 8000f90:	8013      	strh	r3, [r2, #0]
		// If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		// This is to maintain the circular buffer
		// The old data in the main buffer will be overlapped

		if (oldPos_uart+Size > MainBuf_SIZE)  // If the current position + new data size is greater than the main buffer
 8000f92:	4b47      	ldr	r3, [pc, #284]	; (80010b0 <HAL_UARTEx_RxEventCallback+0x144>)
 8000f94:	881b      	ldrh	r3, [r3, #0]
 8000f96:	461a      	mov	r2, r3
 8000f98:	887b      	ldrh	r3, [r7, #2]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	2b20      	cmp	r3, #32
 8000f9e:	dd14      	ble.n	8000fca <HAL_UARTEx_RxEventCallback+0x5e>
		{
			oldPos_uart = 0;  // point to the start of the buffer
 8000fa0:	4b43      	ldr	r3, [pc, #268]	; (80010b0 <HAL_UARTEx_RxEventCallback+0x144>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)MainBuf + oldPos_uart, RxBuf, Size);
 8000fa6:	4b42      	ldr	r3, [pc, #264]	; (80010b0 <HAL_UARTEx_RxEventCallback+0x144>)
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	461a      	mov	r2, r3
 8000fac:	4b42      	ldr	r3, [pc, #264]	; (80010b8 <HAL_UARTEx_RxEventCallback+0x14c>)
 8000fae:	4413      	add	r3, r2
 8000fb0:	887a      	ldrh	r2, [r7, #2]
 8000fb2:	4942      	ldr	r1, [pc, #264]	; (80010bc <HAL_UARTEx_RxEventCallback+0x150>)
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f01c ffcf 	bl	801df58 <memcpy>
			newPos_uart = Size + oldPos_uart;
 8000fba:	4b3d      	ldr	r3, [pc, #244]	; (80010b0 <HAL_UARTEx_RxEventCallback+0x144>)
 8000fbc:	881a      	ldrh	r2, [r3, #0]
 8000fbe:	887b      	ldrh	r3, [r7, #2]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	4b39      	ldr	r3, [pc, #228]	; (80010ac <HAL_UARTEx_RxEventCallback+0x140>)
 8000fc6:	801a      	strh	r2, [r3, #0]
 8000fc8:	e010      	b.n	8000fec <HAL_UARTEx_RxEventCallback+0x80>
		}
		else
		{
			memcpy ((uint8_t *)MainBuf + oldPos_uart, RxBuf, Size);
 8000fca:	4b39      	ldr	r3, [pc, #228]	; (80010b0 <HAL_UARTEx_RxEventCallback+0x144>)
 8000fcc:	881b      	ldrh	r3, [r3, #0]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	4b39      	ldr	r3, [pc, #228]	; (80010b8 <HAL_UARTEx_RxEventCallback+0x14c>)
 8000fd2:	4413      	add	r3, r2
 8000fd4:	887a      	ldrh	r2, [r7, #2]
 8000fd6:	4939      	ldr	r1, [pc, #228]	; (80010bc <HAL_UARTEx_RxEventCallback+0x150>)
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f01c ffbd 	bl	801df58 <memcpy>
			newPos_uart = Size + oldPos_uart;
 8000fde:	4b34      	ldr	r3, [pc, #208]	; (80010b0 <HAL_UARTEx_RxEventCallback+0x144>)
 8000fe0:	881a      	ldrh	r2, [r3, #0]
 8000fe2:	887b      	ldrh	r3, [r7, #2]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	4b30      	ldr	r3, [pc, #192]	; (80010ac <HAL_UARTEx_RxEventCallback+0x140>)
 8000fea:	801a      	strh	r2, [r3, #0]
		}
		StartM = MainBuf[newPos_uart - datasize_uart]; // 0b1001xxxx for check start & mode
 8000fec:	4b2f      	ldr	r3, [pc, #188]	; (80010ac <HAL_UARTEx_RxEventCallback+0x140>)
 8000fee:	881b      	ldrh	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b30      	ldr	r3, [pc, #192]	; (80010b4 <HAL_UARTEx_RxEventCallback+0x148>)
 8000ff4:	881b      	ldrh	r3, [r3, #0]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	4a2f      	ldr	r2, [pc, #188]	; (80010b8 <HAL_UARTEx_RxEventCallback+0x14c>)
 8000ffa:	5cd2      	ldrb	r2, [r2, r3]
 8000ffc:	4b30      	ldr	r3, [pc, #192]	; (80010c0 <HAL_UARTEx_RxEventCallback+0x154>)
 8000ffe:	701a      	strb	r2, [r3, #0]
		chkStart = StartM >> 4; // for check "start" or nor
 8001000:	4b2f      	ldr	r3, [pc, #188]	; (80010c0 <HAL_UARTEx_RxEventCallback+0x154>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	091b      	lsrs	r3, r3, #4
 8001006:	b2da      	uxtb	r2, r3
 8001008:	4b2e      	ldr	r3, [pc, #184]	; (80010c4 <HAL_UARTEx_RxEventCallback+0x158>)
 800100a:	701a      	strb	r2, [r3, #0]
		NameM = (StartM & 15); // Check mode
 800100c:	4b2c      	ldr	r3, [pc, #176]	; (80010c0 <HAL_UARTEx_RxEventCallback+0x154>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	f003 030f 	and.w	r3, r3, #15
 8001014:	b2da      	uxtb	r2, r3
 8001016:	4b2c      	ldr	r3, [pc, #176]	; (80010c8 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001018:	701a      	strb	r2, [r3, #0]
		if (chkStart == 9){ // 0b1001
 800101a:	4b2a      	ldr	r3, [pc, #168]	; (80010c4 <HAL_UARTEx_RxEventCallback+0x158>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b09      	cmp	r3, #9
 8001020:	d10a      	bne.n	8001038 <HAL_UARTEx_RxEventCallback+0xcc>
			if (NameM >= 1 && NameM <= 14){ // 15 work state or not
 8001022:	4b29      	ldr	r3, [pc, #164]	; (80010c8 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d02c      	beq.n	8001084 <HAL_UARTEx_RxEventCallback+0x118>
 800102a:	4b27      	ldr	r3, [pc, #156]	; (80010c8 <HAL_UARTEx_RxEventCallback+0x15c>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b0e      	cmp	r3, #14
 8001030:	d828      	bhi.n	8001084 <HAL_UARTEx_RxEventCallback+0x118>
				All_mode_UARTUI();
 8001032:	f000 f851 	bl	80010d8 <_Z15All_mode_UARTUIv>
 8001036:	e025      	b.n	8001084 <HAL_UARTEx_RxEventCallback+0x118>
			}
		}
		else if (StartM == 88) {
 8001038:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <HAL_UARTEx_RxEventCallback+0x154>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b58      	cmp	r3, #88	; 0x58
 800103e:	d121      	bne.n	8001084 <HAL_UARTEx_RxEventCallback+0x118>
			StartM = MainBuf[newPos_uart-2];
 8001040:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <HAL_UARTEx_RxEventCallback+0x140>)
 8001042:	881b      	ldrh	r3, [r3, #0]
 8001044:	3b02      	subs	r3, #2
 8001046:	4a1c      	ldr	r2, [pc, #112]	; (80010b8 <HAL_UARTEx_RxEventCallback+0x14c>)
 8001048:	5cd2      	ldrb	r2, [r2, r3]
 800104a:	4b1d      	ldr	r3, [pc, #116]	; (80010c0 <HAL_UARTEx_RxEventCallback+0x154>)
 800104c:	701a      	strb	r2, [r3, #0]
		    chkStart = StartM >> 4;
 800104e:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <HAL_UARTEx_RxEventCallback+0x154>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	091b      	lsrs	r3, r3, #4
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <HAL_UARTEx_RxEventCallback+0x158>)
 8001058:	701a      	strb	r2, [r3, #0]
		    NameM = (StartM & 15);
 800105a:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <HAL_UARTEx_RxEventCallback+0x154>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	f003 030f 	and.w	r3, r3, #15
 8001062:	b2da      	uxtb	r2, r3
 8001064:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001066:	701a      	strb	r2, [r3, #0]
		    if (chkStart == 9){
 8001068:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <HAL_UARTEx_RxEventCallback+0x158>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b09      	cmp	r3, #9
 800106e:	d109      	bne.n	8001084 <HAL_UARTEx_RxEventCallback+0x118>
		    	if (NameM >= 1 && NameM <= 14){
 8001070:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d005      	beq.n	8001084 <HAL_UARTEx_RxEventCallback+0x118>
 8001078:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <HAL_UARTEx_RxEventCallback+0x15c>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b0e      	cmp	r3, #14
 800107e:	d801      	bhi.n	8001084 <HAL_UARTEx_RxEventCallback+0x118>
		    		All_mode_UARTUI();
 8001080:	f000 f82a 	bl	80010d8 <_Z15All_mode_UARTUIv>
		        }
		    }
		}

		// start the DMA again
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) RxBuf, RxBuf_SIZE);
 8001084:	2220      	movs	r2, #32
 8001086:	490d      	ldr	r1, [pc, #52]	; (80010bc <HAL_UARTEx_RxEventCallback+0x150>)
 8001088:	4810      	ldr	r0, [pc, #64]	; (80010cc <HAL_UARTEx_RxEventCallback+0x160>)
 800108a:	f01a fe78 	bl	801bd7e <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800108e:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <HAL_UARTEx_RxEventCallback+0x164>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <HAL_UARTEx_RxEventCallback+0x164>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f022 0208 	bic.w	r2, r2, #8
 800109c:	601a      	str	r2, [r3, #0]

	} //huart USART2
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40004400 	.word	0x40004400
 80010ac:	20000792 	.word	0x20000792
 80010b0:	20000790 	.word	0x20000790
 80010b4:	200007d0 	.word	0x200007d0
 80010b8:	20000770 	.word	0x20000770
 80010bc:	20000750 	.word	0x20000750
 80010c0:	200007d4 	.word	0x200007d4
 80010c4:	200007d2 	.word	0x200007d2
 80010c8:	200007d3 	.word	0x200007d3
 80010cc:	200003f4 	.word	0x200003f4
 80010d0:	20000438 	.word	0x20000438
 80010d4:	00000000 	.word	0x00000000

080010d8 <_Z15All_mode_UARTUIv>:

void All_mode_UARTUI()
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af00      	add	r7, sp, #0
	int yur;
	int zur;
	int kur; // counter

	// NameM => 15 mode
		switch (NameM){
 80010de:	4ba8      	ldr	r3, [pc, #672]	; (8001380 <_Z15All_mode_UARTUIv+0x2a8>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	3b01      	subs	r3, #1
 80010e4:	2b0d      	cmp	r3, #13
 80010e6:	f200 83fe 	bhi.w	80018e6 <_Z15All_mode_UARTUIv+0x80e>
 80010ea:	a201      	add	r2, pc, #4	; (adr r2, 80010f0 <_Z15All_mode_UARTUIv+0x18>)
 80010ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f0:	08001129 	.word	0x08001129
 80010f4:	08001189 	.word	0x08001189
 80010f8:	080011c3 	.word	0x080011c3
 80010fc:	0800120d 	.word	0x0800120d
 8001100:	080012c9 	.word	0x080012c9
 8001104:	080013d5 	.word	0x080013d5
 8001108:	0800145f 	.word	0x0800145f
 800110c:	080015c3 	.word	0x080015c3
 8001110:	080015fd 	.word	0x080015fd
 8001114:	08001699 	.word	0x08001699
 8001118:	08001735 	.word	0x08001735
 800111c:	080017f7 	.word	0x080017f7
 8001120:	0800182f 	.word	0x0800182f
 8001124:	08001879 	.word	0x08001879
		////==============[Test Command]===========
			case 1: // 10010001 01000000 00000000 00101110
				chksum = MainBuf[newPos_uart-1];
 8001128:	4b96      	ldr	r3, [pc, #600]	; (8001384 <_Z15All_mode_UARTUIv+0x2ac>)
 800112a:	881b      	ldrh	r3, [r3, #0]
 800112c:	3b01      	subs	r3, #1
 800112e:	4a96      	ldr	r2, [pc, #600]	; (8001388 <_Z15All_mode_UARTUIv+0x2b0>)
 8001130:	5cd2      	ldrb	r2, [r2, r3]
 8001132:	4b96      	ldr	r3, [pc, #600]	; (800138c <_Z15All_mode_UARTUIv+0x2b4>)
 8001134:	701a      	strb	r2, [r3, #0]
				dataF2 = MainBuf[newPos_uart-2];
 8001136:	4b93      	ldr	r3, [pc, #588]	; (8001384 <_Z15All_mode_UARTUIv+0x2ac>)
 8001138:	881b      	ldrh	r3, [r3, #0]
 800113a:	3b02      	subs	r3, #2
 800113c:	4a92      	ldr	r2, [pc, #584]	; (8001388 <_Z15All_mode_UARTUIv+0x2b0>)
 800113e:	5cd2      	ldrb	r2, [r2, r3]
 8001140:	4b93      	ldr	r3, [pc, #588]	; (8001390 <_Z15All_mode_UARTUIv+0x2b8>)
 8001142:	701a      	strb	r2, [r3, #0]
				dataF1 = MainBuf[newPos_uart-3];
 8001144:	4b8f      	ldr	r3, [pc, #572]	; (8001384 <_Z15All_mode_UARTUIv+0x2ac>)
 8001146:	881b      	ldrh	r3, [r3, #0]
 8001148:	3b03      	subs	r3, #3
 800114a:	4a8f      	ldr	r2, [pc, #572]	; (8001388 <_Z15All_mode_UARTUIv+0x2b0>)
 800114c:	5cd2      	ldrb	r2, [r2, r3]
 800114e:	4b91      	ldr	r3, [pc, #580]	; (8001394 <_Z15All_mode_UARTUIv+0x2bc>)
 8001150:	701a      	strb	r2, [r3, #0]
				chksum2 = ~(StartM + dataF1 + dataF2);
 8001152:	4b91      	ldr	r3, [pc, #580]	; (8001398 <_Z15All_mode_UARTUIv+0x2c0>)
 8001154:	781a      	ldrb	r2, [r3, #0]
 8001156:	4b8f      	ldr	r3, [pc, #572]	; (8001394 <_Z15All_mode_UARTUIv+0x2bc>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	4413      	add	r3, r2
 800115c:	b2da      	uxtb	r2, r3
 800115e:	4b8c      	ldr	r3, [pc, #560]	; (8001390 <_Z15All_mode_UARTUIv+0x2b8>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	4413      	add	r3, r2
 8001164:	b2db      	uxtb	r3, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4b8c      	ldr	r3, [pc, #560]	; (800139c <_Z15All_mode_UARTUIv+0x2c4>)
 800116c:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 800116e:	4b87      	ldr	r3, [pc, #540]	; (800138c <_Z15All_mode_UARTUIv+0x2b4>)
 8001170:	781a      	ldrb	r2, [r3, #0]
 8001172:	4b8a      	ldr	r3, [pc, #552]	; (800139c <_Z15All_mode_UARTUIv+0x2c4>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	429a      	cmp	r2, r3
 8001178:	f040 839a 	bne.w	80018b0 <_Z15All_mode_UARTUIv+0x7d8>
					M_state = 1;
 800117c:	4b88      	ldr	r3, [pc, #544]	; (80013a0 <_Z15All_mode_UARTUIv+0x2c8>)
 800117e:	2201      	movs	r2, #1
 8001180:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 8001182:	f000 fbe3 	bl	800194c <_Z7xu_Uartv>
				}
				break;
 8001186:	e393      	b.n	80018b0 <_Z15All_mode_UARTUIv+0x7d8>
		////==============[Connect MCU]===========
			case 2: //10010010 01101101
				chksum = MainBuf[newPos_uart-1];
 8001188:	4b7e      	ldr	r3, [pc, #504]	; (8001384 <_Z15All_mode_UARTUIv+0x2ac>)
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	3b01      	subs	r3, #1
 800118e:	4a7e      	ldr	r2, [pc, #504]	; (8001388 <_Z15All_mode_UARTUIv+0x2b0>)
 8001190:	5cd2      	ldrb	r2, [r2, r3]
 8001192:	4b7e      	ldr	r3, [pc, #504]	; (800138c <_Z15All_mode_UARTUIv+0x2b4>)
 8001194:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8001196:	4b80      	ldr	r3, [pc, #512]	; (8001398 <_Z15All_mode_UARTUIv+0x2c0>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	43db      	mvns	r3, r3
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4b81      	ldr	r3, [pc, #516]	; (80013a4 <_Z15All_mode_UARTUIv+0x2cc>)
 80011a0:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 80011a2:	4b7a      	ldr	r3, [pc, #488]	; (800138c <_Z15All_mode_UARTUIv+0x2b4>)
 80011a4:	781a      	ldrb	r2, [r3, #0]
 80011a6:	4b7f      	ldr	r3, [pc, #508]	; (80013a4 <_Z15All_mode_UARTUIv+0x2cc>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	f040 8382 	bne.w	80018b4 <_Z15All_mode_UARTUIv+0x7dc>
					M_state = 2;
 80011b0:	4b7b      	ldr	r3, [pc, #492]	; (80013a0 <_Z15All_mode_UARTUIv+0x2c8>)
 80011b2:	2202      	movs	r2, #2
 80011b4:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);

					// check efft
					flag_efftActi = 1;
 80011b6:	4b7c      	ldr	r3, [pc, #496]	; (80013a8 <_Z15All_mode_UARTUIv+0x2d0>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	701a      	strb	r2, [r3, #0]

					xu_Uart();
 80011bc:	f000 fbc6 	bl	800194c <_Z7xu_Uartv>
				}
				break;
 80011c0:	e378      	b.n	80018b4 <_Z15All_mode_UARTUIv+0x7dc>
		////==============[Disconnect MCU]===========
			case 3: //10010011 01101100
					chksum = MainBuf[newPos_uart-1];
 80011c2:	4b70      	ldr	r3, [pc, #448]	; (8001384 <_Z15All_mode_UARTUIv+0x2ac>)
 80011c4:	881b      	ldrh	r3, [r3, #0]
 80011c6:	3b01      	subs	r3, #1
 80011c8:	4a6f      	ldr	r2, [pc, #444]	; (8001388 <_Z15All_mode_UARTUIv+0x2b0>)
 80011ca:	5cd2      	ldrb	r2, [r2, r3]
 80011cc:	4b6f      	ldr	r3, [pc, #444]	; (800138c <_Z15All_mode_UARTUIv+0x2b4>)
 80011ce:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 80011d0:	4b71      	ldr	r3, [pc, #452]	; (8001398 <_Z15All_mode_UARTUIv+0x2c0>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	43db      	mvns	r3, r3
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	4b72      	ldr	r3, [pc, #456]	; (80013a4 <_Z15All_mode_UARTUIv+0x2cc>)
 80011da:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 80011dc:	4b6b      	ldr	r3, [pc, #428]	; (800138c <_Z15All_mode_UARTUIv+0x2b4>)
 80011de:	781a      	ldrb	r2, [r3, #0]
 80011e0:	4b70      	ldr	r3, [pc, #448]	; (80013a4 <_Z15All_mode_UARTUIv+0x2cc>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	f040 8367 	bne.w	80018b8 <_Z15All_mode_UARTUIv+0x7e0>
					M_state = 3;
 80011ea:	4b6d      	ldr	r3, [pc, #436]	; (80013a0 <_Z15All_mode_UARTUIv+0x2c8>)
 80011ec:	2203      	movs	r2, #3
 80011ee:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);

					ResetParam();
 80011f0:	f001 fe8c 	bl	8002f0c <_Z10ResetParamv>
					grandState = Ready;
 80011f4:	4b6d      	ldr	r3, [pc, #436]	; (80013ac <_Z15All_mode_UARTUIv+0x2d4>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_f_ack2, 2, 100);
 80011fa:	2364      	movs	r3, #100	; 0x64
 80011fc:	2202      	movs	r2, #2
 80011fe:	496c      	ldr	r1, [pc, #432]	; (80013b0 <_Z15All_mode_UARTUIv+0x2d8>)
 8001200:	486c      	ldr	r0, [pc, #432]	; (80013b4 <_Z15All_mode_UARTUIv+0x2dc>)
 8001202:	f01a fd2a 	bl	801bc5a <HAL_UART_Transmit>

					xu_Uart();
 8001206:	f000 fba1 	bl	800194c <_Z7xu_Uartv>

				}
				break;
 800120a:	e355      	b.n	80018b8 <_Z15All_mode_UARTUIv+0x7e0>
		////==============[Angular Velo Set]===========
			case 4:
					chksum = MainBuf[newPos_uart-1];
 800120c:	4b5d      	ldr	r3, [pc, #372]	; (8001384 <_Z15All_mode_UARTUIv+0x2ac>)
 800120e:	881b      	ldrh	r3, [r3, #0]
 8001210:	3b01      	subs	r3, #1
 8001212:	4a5d      	ldr	r2, [pc, #372]	; (8001388 <_Z15All_mode_UARTUIv+0x2b0>)
 8001214:	5cd2      	ldrb	r2, [r2, r3]
 8001216:	4b5d      	ldr	r3, [pc, #372]	; (800138c <_Z15All_mode_UARTUIv+0x2b4>)
 8001218:	701a      	strb	r2, [r3, #0]
					dataF2 = MainBuf[newPos_uart-2];
 800121a:	4b5a      	ldr	r3, [pc, #360]	; (8001384 <_Z15All_mode_UARTUIv+0x2ac>)
 800121c:	881b      	ldrh	r3, [r3, #0]
 800121e:	3b02      	subs	r3, #2
 8001220:	4a59      	ldr	r2, [pc, #356]	; (8001388 <_Z15All_mode_UARTUIv+0x2b0>)
 8001222:	5cd2      	ldrb	r2, [r2, r3]
 8001224:	4b5a      	ldr	r3, [pc, #360]	; (8001390 <_Z15All_mode_UARTUIv+0x2b8>)
 8001226:	701a      	strb	r2, [r3, #0]
					dataF1 = MainBuf[newPos_uart-3];
 8001228:	4b56      	ldr	r3, [pc, #344]	; (8001384 <_Z15All_mode_UARTUIv+0x2ac>)
 800122a:	881b      	ldrh	r3, [r3, #0]
 800122c:	3b03      	subs	r3, #3
 800122e:	4a56      	ldr	r2, [pc, #344]	; (8001388 <_Z15All_mode_UARTUIv+0x2b0>)
 8001230:	5cd2      	ldrb	r2, [r2, r3]
 8001232:	4b58      	ldr	r3, [pc, #352]	; (8001394 <_Z15All_mode_UARTUIv+0x2bc>)
 8001234:	701a      	strb	r2, [r3, #0]
					Set_AngVelo[0] = dataF1;
 8001236:	4b57      	ldr	r3, [pc, #348]	; (8001394 <_Z15All_mode_UARTUIv+0x2bc>)
 8001238:	781a      	ldrb	r2, [r3, #0]
 800123a:	4b5f      	ldr	r3, [pc, #380]	; (80013b8 <_Z15All_mode_UARTUIv+0x2e0>)
 800123c:	701a      	strb	r2, [r3, #0]
					Set_AngVelo[1] = dataF2;
 800123e:	4b54      	ldr	r3, [pc, #336]	; (8001390 <_Z15All_mode_UARTUIv+0x2b8>)
 8001240:	781a      	ldrb	r2, [r3, #0]
 8001242:	4b5d      	ldr	r3, [pc, #372]	; (80013b8 <_Z15All_mode_UARTUIv+0x2e0>)
 8001244:	705a      	strb	r2, [r3, #1]
					chksum2 = ~(StartM + dataF1 + dataF2);
 8001246:	4b54      	ldr	r3, [pc, #336]	; (8001398 <_Z15All_mode_UARTUIv+0x2c0>)
 8001248:	781a      	ldrb	r2, [r3, #0]
 800124a:	4b52      	ldr	r3, [pc, #328]	; (8001394 <_Z15All_mode_UARTUIv+0x2bc>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	4413      	add	r3, r2
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4b4f      	ldr	r3, [pc, #316]	; (8001390 <_Z15All_mode_UARTUIv+0x2b8>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	4413      	add	r3, r2
 8001258:	b2db      	uxtb	r3, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	b2da      	uxtb	r2, r3
 800125e:	4b4f      	ldr	r3, [pc, #316]	; (800139c <_Z15All_mode_UARTUIv+0x2c4>)
 8001260:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 8001262:	4b4a      	ldr	r3, [pc, #296]	; (800138c <_Z15All_mode_UARTUIv+0x2b4>)
 8001264:	781a      	ldrb	r2, [r3, #0]
 8001266:	4b4d      	ldr	r3, [pc, #308]	; (800139c <_Z15All_mode_UARTUIv+0x2c4>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	429a      	cmp	r2, r3
 800126c:	f040 8326 	bne.w	80018bc <_Z15All_mode_UARTUIv+0x7e4>
					M_state = 4;
 8001270:	4b4b      	ldr	r3, [pc, #300]	; (80013a0 <_Z15All_mode_UARTUIv+0x2c8>)
 8001272:	2204      	movs	r2, #4
 8001274:	701a      	strb	r2, [r3, #0]
					DataProtocol_SetVelo = Set_AngVelo[1];
 8001276:	4b50      	ldr	r3, [pc, #320]	; (80013b8 <_Z15All_mode_UARTUIv+0x2e0>)
 8001278:	785b      	ldrb	r3, [r3, #1]
 800127a:	ee07 3a90 	vmov	s15, r3
 800127e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001282:	4b4e      	ldr	r3, [pc, #312]	; (80013bc <_Z15All_mode_UARTUIv+0x2e4>)
 8001284:	edc3 7a00 	vstr	s15, [r3]
					//////// RPM to Rad/s => 2PI/60
					Velocity =((DataProtocol_SetVelo * 10)/255) * (2 * M_PI / 60);
 8001288:	4b4c      	ldr	r3, [pc, #304]	; (80013bc <_Z15All_mode_UARTUIv+0x2e4>)
 800128a:	edd3 7a00 	vldr	s15, [r3]
 800128e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001292:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001296:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80013c0 <_Z15All_mode_UARTUIv+0x2e8>
 800129a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800129e:	ee16 0a90 	vmov	r0, s13
 80012a2:	f7ff f951 	bl	8000548 <__aeabi_f2d>
 80012a6:	a332      	add	r3, pc, #200	; (adr r3, 8001370 <_Z15All_mode_UARTUIv+0x298>)
 80012a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ac:	f7ff f9a4 	bl	80005f8 <__aeabi_dmul>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4610      	mov	r0, r2
 80012b6:	4619      	mov	r1, r3
 80012b8:	f7ff fc4e 	bl	8000b58 <__aeabi_d2f>
 80012bc:	4603      	mov	r3, r0
 80012be:	4a41      	ldr	r2, [pc, #260]	; (80013c4 <_Z15All_mode_UARTUIv+0x2ec>)
 80012c0:	6013      	str	r3, [r2, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 80012c2:	f000 fb43 	bl	800194c <_Z7xu_Uartv>
				}
				break;
 80012c6:	e2f9      	b.n	80018bc <_Z15All_mode_UARTUIv+0x7e4>
		////==============[Angular Position Set]===========
			case 5:
					chksum = MainBuf[newPos_uart-1];
 80012c8:	4b2e      	ldr	r3, [pc, #184]	; (8001384 <_Z15All_mode_UARTUIv+0x2ac>)
 80012ca:	881b      	ldrh	r3, [r3, #0]
 80012cc:	3b01      	subs	r3, #1
 80012ce:	4a2e      	ldr	r2, [pc, #184]	; (8001388 <_Z15All_mode_UARTUIv+0x2b0>)
 80012d0:	5cd2      	ldrb	r2, [r2, r3]
 80012d2:	4b2e      	ldr	r3, [pc, #184]	; (800138c <_Z15All_mode_UARTUIv+0x2b4>)
 80012d4:	701a      	strb	r2, [r3, #0]
					dataF2 = MainBuf[newPos_uart-2];
 80012d6:	4b2b      	ldr	r3, [pc, #172]	; (8001384 <_Z15All_mode_UARTUIv+0x2ac>)
 80012d8:	881b      	ldrh	r3, [r3, #0]
 80012da:	3b02      	subs	r3, #2
 80012dc:	4a2a      	ldr	r2, [pc, #168]	; (8001388 <_Z15All_mode_UARTUIv+0x2b0>)
 80012de:	5cd2      	ldrb	r2, [r2, r3]
 80012e0:	4b2b      	ldr	r3, [pc, #172]	; (8001390 <_Z15All_mode_UARTUIv+0x2b8>)
 80012e2:	701a      	strb	r2, [r3, #0]
					dataF1 = MainBuf[newPos_uart-3];
 80012e4:	4b27      	ldr	r3, [pc, #156]	; (8001384 <_Z15All_mode_UARTUIv+0x2ac>)
 80012e6:	881b      	ldrh	r3, [r3, #0]
 80012e8:	3b03      	subs	r3, #3
 80012ea:	4a27      	ldr	r2, [pc, #156]	; (8001388 <_Z15All_mode_UARTUIv+0x2b0>)
 80012ec:	5cd2      	ldrb	r2, [r2, r3]
 80012ee:	4b29      	ldr	r3, [pc, #164]	; (8001394 <_Z15All_mode_UARTUIv+0x2bc>)
 80012f0:	701a      	strb	r2, [r3, #0]
					Set_AngPosi[0] = dataF1;
 80012f2:	4b28      	ldr	r3, [pc, #160]	; (8001394 <_Z15All_mode_UARTUIv+0x2bc>)
 80012f4:	781a      	ldrb	r2, [r3, #0]
 80012f6:	4b34      	ldr	r3, [pc, #208]	; (80013c8 <_Z15All_mode_UARTUIv+0x2f0>)
 80012f8:	701a      	strb	r2, [r3, #0]
					Set_AngPosi[1] = dataF2;
 80012fa:	4b25      	ldr	r3, [pc, #148]	; (8001390 <_Z15All_mode_UARTUIv+0x2b8>)
 80012fc:	781a      	ldrb	r2, [r3, #0]
 80012fe:	4b32      	ldr	r3, [pc, #200]	; (80013c8 <_Z15All_mode_UARTUIv+0x2f0>)
 8001300:	705a      	strb	r2, [r3, #1]
					chksum2 = ~(StartM + dataF1 + dataF2);
 8001302:	4b25      	ldr	r3, [pc, #148]	; (8001398 <_Z15All_mode_UARTUIv+0x2c0>)
 8001304:	781a      	ldrb	r2, [r3, #0]
 8001306:	4b23      	ldr	r3, [pc, #140]	; (8001394 <_Z15All_mode_UARTUIv+0x2bc>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	4413      	add	r3, r2
 800130c:	b2da      	uxtb	r2, r3
 800130e:	4b20      	ldr	r3, [pc, #128]	; (8001390 <_Z15All_mode_UARTUIv+0x2b8>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	4413      	add	r3, r2
 8001314:	b2db      	uxtb	r3, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	b2da      	uxtb	r2, r3
 800131a:	4b20      	ldr	r3, [pc, #128]	; (800139c <_Z15All_mode_UARTUIv+0x2c4>)
 800131c:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 800131e:	4b1b      	ldr	r3, [pc, #108]	; (800138c <_Z15All_mode_UARTUIv+0x2b4>)
 8001320:	781a      	ldrb	r2, [r3, #0]
 8001322:	4b1e      	ldr	r3, [pc, #120]	; (800139c <_Z15All_mode_UARTUIv+0x2c4>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	429a      	cmp	r2, r3
 8001328:	f040 82ca 	bne.w	80018c0 <_Z15All_mode_UARTUIv+0x7e8>
					M_state = 5;
 800132c:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <_Z15All_mode_UARTUIv+0x2c8>)
 800132e:	2205      	movs	r2, #5
 8001330:	701a      	strb	r2, [r3, #0]

					DataProtocol_SetAngPosi = (Set_AngPosi[0]*256) + Set_AngPosi[1];
 8001332:	4b25      	ldr	r3, [pc, #148]	; (80013c8 <_Z15All_mode_UARTUIv+0x2f0>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	021b      	lsls	r3, r3, #8
 8001338:	4a23      	ldr	r2, [pc, #140]	; (80013c8 <_Z15All_mode_UARTUIv+0x2f0>)
 800133a:	7852      	ldrb	r2, [r2, #1]
 800133c:	4413      	add	r3, r2
 800133e:	4a23      	ldr	r2, [pc, #140]	; (80013cc <_Z15All_mode_UARTUIv+0x2f4>)
 8001340:	6013      	str	r3, [r2, #0]
					//positionlog[0] = (DataProtocol_SetAngPosi / (3.14 * 10000) * 180);
					positionlog[0] = (float)(DataProtocol_SetAngPosi / 10000.0);
 8001342:	4b22      	ldr	r3, [pc, #136]	; (80013cc <_Z15All_mode_UARTUIv+0x2f4>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff f8ec 	bl	8000524 <__aeabi_i2d>
 800134c:	a30a      	add	r3, pc, #40	; (adr r3, 8001378 <_Z15All_mode_UARTUIv+0x2a0>)
 800134e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001352:	f7ff fa7b 	bl	800084c <__aeabi_ddiv>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4610      	mov	r0, r2
 800135c:	4619      	mov	r1, r3
 800135e:	f7ff fbfb 	bl	8000b58 <__aeabi_d2f>
 8001362:	4603      	mov	r3, r0
 8001364:	4a1a      	ldr	r2, [pc, #104]	; (80013d0 <_Z15All_mode_UARTUIv+0x2f8>)
 8001366:	6013      	str	r3, [r2, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 8001368:	f000 faf0 	bl	800194c <_Z7xu_Uartv>
				}
				break;
 800136c:	e2a8      	b.n	80018c0 <_Z15All_mode_UARTUIv+0x7e8>
 800136e:	bf00      	nop
 8001370:	f37bebd5 	.word	0xf37bebd5
 8001374:	3fbacee9 	.word	0x3fbacee9
 8001378:	00000000 	.word	0x00000000
 800137c:	40c38800 	.word	0x40c38800
 8001380:	200007d3 	.word	0x200007d3
 8001384:	20000792 	.word	0x20000792
 8001388:	20000770 	.word	0x20000770
 800138c:	200007d5 	.word	0x200007d5
 8001390:	200007da 	.word	0x200007da
 8001394:	200007d9 	.word	0x200007d9
 8001398:	200007d4 	.word	0x200007d4
 800139c:	200007d7 	.word	0x200007d7
 80013a0:	200007db 	.word	0x200007db
 80013a4:	200007d6 	.word	0x200007d6
 80013a8:	2000073b 	.word	0x2000073b
 80013ac:	200004fc 	.word	0x200004fc
 80013b0:	200001b4 	.word	0x200001b4
 80013b4:	200003f4 	.word	0x200003f4
 80013b8:	2000079c 	.word	0x2000079c
 80013bc:	200007a0 	.word	0x200007a0
 80013c0:	437f0000 	.word	0x437f0000
 80013c4:	20000588 	.word	0x20000588
 80013c8:	200007a4 	.word	0x200007a4
 80013cc:	200007a8 	.word	0x200007a8
 80013d0:	20000144 	.word	0x20000144
		////==============[Goal 1 station]===========
			case 6:
					chksum = MainBuf[newPos_uart-1];
 80013d4:	4b99      	ldr	r3, [pc, #612]	; (800163c <_Z15All_mode_UARTUIv+0x564>)
 80013d6:	881b      	ldrh	r3, [r3, #0]
 80013d8:	3b01      	subs	r3, #1
 80013da:	4a99      	ldr	r2, [pc, #612]	; (8001640 <_Z15All_mode_UARTUIv+0x568>)
 80013dc:	5cd2      	ldrb	r2, [r2, r3]
 80013de:	4b99      	ldr	r3, [pc, #612]	; (8001644 <_Z15All_mode_UARTUIv+0x56c>)
 80013e0:	701a      	strb	r2, [r3, #0]
					dataF2 = MainBuf[newPos_uart-2];
 80013e2:	4b96      	ldr	r3, [pc, #600]	; (800163c <_Z15All_mode_UARTUIv+0x564>)
 80013e4:	881b      	ldrh	r3, [r3, #0]
 80013e6:	3b02      	subs	r3, #2
 80013e8:	4a95      	ldr	r2, [pc, #596]	; (8001640 <_Z15All_mode_UARTUIv+0x568>)
 80013ea:	5cd2      	ldrb	r2, [r2, r3]
 80013ec:	4b96      	ldr	r3, [pc, #600]	; (8001648 <_Z15All_mode_UARTUIv+0x570>)
 80013ee:	701a      	strb	r2, [r3, #0]
					dataF1 = MainBuf[newPos_uart-3];
 80013f0:	4b92      	ldr	r3, [pc, #584]	; (800163c <_Z15All_mode_UARTUIv+0x564>)
 80013f2:	881b      	ldrh	r3, [r3, #0]
 80013f4:	3b03      	subs	r3, #3
 80013f6:	4a92      	ldr	r2, [pc, #584]	; (8001640 <_Z15All_mode_UARTUIv+0x568>)
 80013f8:	5cd2      	ldrb	r2, [r2, r3]
 80013fa:	4b94      	ldr	r3, [pc, #592]	; (800164c <_Z15All_mode_UARTUIv+0x574>)
 80013fc:	701a      	strb	r2, [r3, #0]
					Set_Goal_1Sta[0] = dataF1;
 80013fe:	4b93      	ldr	r3, [pc, #588]	; (800164c <_Z15All_mode_UARTUIv+0x574>)
 8001400:	781a      	ldrb	r2, [r3, #0]
 8001402:	4b93      	ldr	r3, [pc, #588]	; (8001650 <_Z15All_mode_UARTUIv+0x578>)
 8001404:	701a      	strb	r2, [r3, #0]
					Set_Goal_1Sta[1] = dataF2;
 8001406:	4b90      	ldr	r3, [pc, #576]	; (8001648 <_Z15All_mode_UARTUIv+0x570>)
 8001408:	781a      	ldrb	r2, [r3, #0]
 800140a:	4b91      	ldr	r3, [pc, #580]	; (8001650 <_Z15All_mode_UARTUIv+0x578>)
 800140c:	705a      	strb	r2, [r3, #1]
					chksum2 = ~(StartM + dataF1 + dataF2);
 800140e:	4b91      	ldr	r3, [pc, #580]	; (8001654 <_Z15All_mode_UARTUIv+0x57c>)
 8001410:	781a      	ldrb	r2, [r3, #0]
 8001412:	4b8e      	ldr	r3, [pc, #568]	; (800164c <_Z15All_mode_UARTUIv+0x574>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	4413      	add	r3, r2
 8001418:	b2da      	uxtb	r2, r3
 800141a:	4b8b      	ldr	r3, [pc, #556]	; (8001648 <_Z15All_mode_UARTUIv+0x570>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	4413      	add	r3, r2
 8001420:	b2db      	uxtb	r3, r3
 8001422:	43db      	mvns	r3, r3
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4b8c      	ldr	r3, [pc, #560]	; (8001658 <_Z15All_mode_UARTUIv+0x580>)
 8001428:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 800142a:	4b86      	ldr	r3, [pc, #536]	; (8001644 <_Z15All_mode_UARTUIv+0x56c>)
 800142c:	781a      	ldrb	r2, [r3, #0]
 800142e:	4b8a      	ldr	r3, [pc, #552]	; (8001658 <_Z15All_mode_UARTUIv+0x580>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	429a      	cmp	r2, r3
 8001434:	f040 8246 	bne.w	80018c4 <_Z15All_mode_UARTUIv+0x7ec>
					M_state = 6;
 8001438:	4b88      	ldr	r3, [pc, #544]	; (800165c <_Z15All_mode_UARTUIv+0x584>)
 800143a:	2206      	movs	r2, #6
 800143c:	701a      	strb	r2, [r3, #0]

					///////// Load 1 station Data /////////////
					positionlog[0] = PosDataSet[Set_Goal_1Sta[1]];
 800143e:	4b84      	ldr	r3, [pc, #528]	; (8001650 <_Z15All_mode_UARTUIv+0x578>)
 8001440:	785b      	ldrb	r3, [r3, #1]
 8001442:	4a87      	ldr	r2, [pc, #540]	; (8001660 <_Z15All_mode_UARTUIv+0x588>)
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a86      	ldr	r2, [pc, #536]	; (8001664 <_Z15All_mode_UARTUIv+0x58c>)
 800144c:	6013      	str	r3, [r2, #0]
					Set1_Sta = Set_Goal_1Sta[1];
 800144e:	4b80      	ldr	r3, [pc, #512]	; (8001650 <_Z15All_mode_UARTUIv+0x578>)
 8001450:	785b      	ldrb	r3, [r3, #1]
 8001452:	461a      	mov	r2, r3
 8001454:	4b84      	ldr	r3, [pc, #528]	; (8001668 <_Z15All_mode_UARTUIv+0x590>)
 8001456:	601a      	str	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);

					xu_Uart();
 8001458:	f000 fa78 	bl	800194c <_Z7xu_Uartv>
				}
				break;
 800145c:	e232      	b.n	80018c4 <_Z15All_mode_UARTUIv+0x7ec>
		////==============[Goal n station]===========
			case 7:
				Nstation = MainBuf[(newPos_uart - datasize_uart)+1];
 800145e:	4b77      	ldr	r3, [pc, #476]	; (800163c <_Z15All_mode_UARTUIv+0x564>)
 8001460:	881b      	ldrh	r3, [r3, #0]
 8001462:	461a      	mov	r2, r3
 8001464:	4b81      	ldr	r3, [pc, #516]	; (800166c <_Z15All_mode_UARTUIv+0x594>)
 8001466:	881b      	ldrh	r3, [r3, #0]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	3301      	adds	r3, #1
 800146c:	4a74      	ldr	r2, [pc, #464]	; (8001640 <_Z15All_mode_UARTUIv+0x568>)
 800146e:	5cd2      	ldrb	r2, [r2, r3]
 8001470:	4b7f      	ldr	r3, [pc, #508]	; (8001670 <_Z15All_mode_UARTUIv+0x598>)
 8001472:	701a      	strb	r2, [r3, #0]
				yur = Nstation;
 8001474:	4b7e      	ldr	r3, [pc, #504]	; (8001670 <_Z15All_mode_UARTUIv+0x598>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	60fb      	str	r3, [r7, #12]
				zur = ( yur / 2 ) + yur % 2;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	0fda      	lsrs	r2, r3, #31
 800147e:	4413      	add	r3, r2
 8001480:	105b      	asrs	r3, r3, #1
 8001482:	461a      	mov	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2b00      	cmp	r3, #0
 8001488:	f003 0301 	and.w	r3, r3, #1
 800148c:	bfb8      	it	lt
 800148e:	425b      	neglt	r3, r3
 8001490:	4413      	add	r3, r2
 8001492:	60bb      	str	r3, [r7, #8]
				kur = 0; // counter
 8001494:	2300      	movs	r3, #0
 8001496:	61fb      	str	r3, [r7, #28]

				for(int i = 0; i < zur; i++ ){
 8001498:	2300      	movs	r3, #0
 800149a:	61bb      	str	r3, [r7, #24]
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	da1e      	bge.n	80014e2 <_Z15All_mode_UARTUIv+0x40a>
					dataFSum += MainBuf[oldPos_uart + (i+2)];
 80014a4:	4b73      	ldr	r3, [pc, #460]	; (8001674 <_Z15All_mode_UARTUIv+0x59c>)
 80014a6:	881b      	ldrh	r3, [r3, #0]
 80014a8:	461a      	mov	r2, r3
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	3302      	adds	r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	4a63      	ldr	r2, [pc, #396]	; (8001640 <_Z15All_mode_UARTUIv+0x568>)
 80014b2:	5cd2      	ldrb	r2, [r2, r3]
 80014b4:	4b70      	ldr	r3, [pc, #448]	; (8001678 <_Z15All_mode_UARTUIv+0x5a0>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	4413      	add	r3, r2
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	4b6e      	ldr	r3, [pc, #440]	; (8001678 <_Z15All_mode_UARTUIv+0x5a0>)
 80014be:	701a      	strb	r2, [r3, #0]
					Goal_nSta[i] = MainBuf[oldPos_uart + (i+2)];
 80014c0:	4b6c      	ldr	r3, [pc, #432]	; (8001674 <_Z15All_mode_UARTUIv+0x59c>)
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	461a      	mov	r2, r3
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	3302      	adds	r3, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	4a5c      	ldr	r2, [pc, #368]	; (8001640 <_Z15All_mode_UARTUIv+0x568>)
 80014ce:	5cd1      	ldrb	r1, [r2, r3]
 80014d0:	4a6a      	ldr	r2, [pc, #424]	; (800167c <_Z15All_mode_UARTUIv+0x5a4>)
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	4413      	add	r3, r2
 80014d6:	460a      	mov	r2, r1
 80014d8:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < zur; i++ ){
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	3301      	adds	r3, #1
 80014de:	61bb      	str	r3, [r7, #24]
 80014e0:	e7dc      	b.n	800149c <_Z15All_mode_UARTUIv+0x3c4>
				}
				for(int x = 1; x < Nstation+1; x++){
 80014e2:	2301      	movs	r3, #1
 80014e4:	617b      	str	r3, [r7, #20]
 80014e6:	4b62      	ldr	r3, [pc, #392]	; (8001670 <_Z15All_mode_UARTUIv+0x598>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	461a      	mov	r2, r3
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	4293      	cmp	r3, r2
 80014f0:	dc29      	bgt.n	8001546 <_Z15All_mode_UARTUIv+0x46e>
                    if(x % 2 == 1){
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	bfb8      	it	lt
 80014fc:	425b      	neglt	r3, r3
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d10b      	bne.n	800151a <_Z15All_mode_UARTUIv+0x442>
                        Set_Goal_nSta[x-1] = (Goal_nSta[kur] % 16);
 8001502:	4a5e      	ldr	r2, [pc, #376]	; (800167c <_Z15All_mode_UARTUIv+0x5a4>)
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	4413      	add	r3, r2
 8001508:	781a      	ldrb	r2, [r3, #0]
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	3b01      	subs	r3, #1
 800150e:	f002 020f 	and.w	r2, r2, #15
 8001512:	b2d1      	uxtb	r1, r2
 8001514:	4a5a      	ldr	r2, [pc, #360]	; (8001680 <_Z15All_mode_UARTUIv+0x5a8>)
 8001516:	54d1      	strb	r1, [r2, r3]
 8001518:	e011      	b.n	800153e <_Z15All_mode_UARTUIv+0x466>
                    }else if(x % 2 == 0){
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	2b00      	cmp	r3, #0
 8001522:	d10c      	bne.n	800153e <_Z15All_mode_UARTUIv+0x466>
                        Set_Goal_nSta[x-1] = (Goal_nSta[kur] / 16);
 8001524:	4a55      	ldr	r2, [pc, #340]	; (800167c <_Z15All_mode_UARTUIv+0x5a4>)
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	4413      	add	r3, r2
 800152a:	781a      	ldrb	r2, [r3, #0]
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	3b01      	subs	r3, #1
 8001530:	0912      	lsrs	r2, r2, #4
 8001532:	b2d1      	uxtb	r1, r2
 8001534:	4a52      	ldr	r2, [pc, #328]	; (8001680 <_Z15All_mode_UARTUIv+0x5a8>)
 8001536:	54d1      	strb	r1, [r2, r3]
                        kur++;
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	3301      	adds	r3, #1
 800153c:	61fb      	str	r3, [r7, #28]
				for(int x = 1; x < Nstation+1; x++){
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	3301      	adds	r3, #1
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	e7cf      	b.n	80014e6 <_Z15All_mode_UARTUIv+0x40e>
                    }
                }

				chksum = MainBuf[newPos_uart-1];
 8001546:	4b3d      	ldr	r3, [pc, #244]	; (800163c <_Z15All_mode_UARTUIv+0x564>)
 8001548:	881b      	ldrh	r3, [r3, #0]
 800154a:	3b01      	subs	r3, #1
 800154c:	4a3c      	ldr	r2, [pc, #240]	; (8001640 <_Z15All_mode_UARTUIv+0x568>)
 800154e:	5cd2      	ldrb	r2, [r2, r3]
 8001550:	4b3c      	ldr	r3, [pc, #240]	; (8001644 <_Z15All_mode_UARTUIv+0x56c>)
 8001552:	701a      	strb	r2, [r3, #0]
				chksum3 = ~(StartM + Nstation + dataFSum);
 8001554:	4b3f      	ldr	r3, [pc, #252]	; (8001654 <_Z15All_mode_UARTUIv+0x57c>)
 8001556:	781a      	ldrb	r2, [r3, #0]
 8001558:	4b45      	ldr	r3, [pc, #276]	; (8001670 <_Z15All_mode_UARTUIv+0x598>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	4413      	add	r3, r2
 800155e:	b2da      	uxtb	r2, r3
 8001560:	4b45      	ldr	r3, [pc, #276]	; (8001678 <_Z15All_mode_UARTUIv+0x5a0>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	4413      	add	r3, r2
 8001566:	b2db      	uxtb	r3, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	b2da      	uxtb	r2, r3
 800156c:	4b45      	ldr	r3, [pc, #276]	; (8001684 <_Z15All_mode_UARTUIv+0x5ac>)
 800156e:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum3){
 8001570:	4b34      	ldr	r3, [pc, #208]	; (8001644 <_Z15All_mode_UARTUIv+0x56c>)
 8001572:	781a      	ldrb	r2, [r3, #0]
 8001574:	4b43      	ldr	r3, [pc, #268]	; (8001684 <_Z15All_mode_UARTUIv+0x5ac>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	429a      	cmp	r2, r3
 800157a:	f040 81a5 	bne.w	80018c8 <_Z15All_mode_UARTUIv+0x7f0>
					M_state = 7;
 800157e:	4b37      	ldr	r3, [pc, #220]	; (800165c <_Z15All_mode_UARTUIv+0x584>)
 8001580:	2207      	movs	r2, #7
 8001582:	701a      	strb	r2, [r3, #0]

					/////////// Load n station-> positionlog  //////////
					//for(int j = 0; j <= len(PosDataSet); j++){
					for(int j = 0; j <= Nstation; j++){
 8001584:	2300      	movs	r3, #0
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	4b39      	ldr	r3, [pc, #228]	; (8001670 <_Z15All_mode_UARTUIv+0x598>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	461a      	mov	r2, r3
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	4293      	cmp	r3, r2
 8001592:	dc10      	bgt.n	80015b6 <_Z15All_mode_UARTUIv+0x4de>
						positionlog[j] = PosDataSet[Set_Goal_nSta[j]];
 8001594:	4a3a      	ldr	r2, [pc, #232]	; (8001680 <_Z15All_mode_UARTUIv+0x5a8>)
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	4413      	add	r3, r2
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	4a30      	ldr	r2, [pc, #192]	; (8001660 <_Z15All_mode_UARTUIv+0x588>)
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	4413      	add	r3, r2
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	492f      	ldr	r1, [pc, #188]	; (8001664 <_Z15All_mode_UARTUIv+0x58c>)
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	440b      	add	r3, r1
 80015ac:	601a      	str	r2, [r3, #0]
					for(int j = 0; j <= Nstation; j++){
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	3301      	adds	r3, #1
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	e7e8      	b.n	8001588 <_Z15All_mode_UARTUIv+0x4b0>
						//Set_Goal_nSta -> raw index from UART
					}

					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					dataFSum = 0;
 80015b6:	4b30      	ldr	r3, [pc, #192]	; (8001678 <_Z15All_mode_UARTUIv+0x5a0>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	701a      	strb	r2, [r3, #0]
					xu_Uart();
 80015bc:	f000 f9c6 	bl	800194c <_Z7xu_Uartv>
				}
				break;
 80015c0:	e182      	b.n	80018c8 <_Z15All_mode_UARTUIv+0x7f0>
		////==============[RUN Go to Goal station Order to Work]===========
			case 8: //10011000 01100111
				chksum = MainBuf[newPos_uart-1];
 80015c2:	4b1e      	ldr	r3, [pc, #120]	; (800163c <_Z15All_mode_UARTUIv+0x564>)
 80015c4:	881b      	ldrh	r3, [r3, #0]
 80015c6:	3b01      	subs	r3, #1
 80015c8:	4a1d      	ldr	r2, [pc, #116]	; (8001640 <_Z15All_mode_UARTUIv+0x568>)
 80015ca:	5cd2      	ldrb	r2, [r2, r3]
 80015cc:	4b1d      	ldr	r3, [pc, #116]	; (8001644 <_Z15All_mode_UARTUIv+0x56c>)
 80015ce:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 80015d0:	4b20      	ldr	r3, [pc, #128]	; (8001654 <_Z15All_mode_UARTUIv+0x57c>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	43db      	mvns	r3, r3
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	4b2b      	ldr	r3, [pc, #172]	; (8001688 <_Z15All_mode_UARTUIv+0x5b0>)
 80015da:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 80015dc:	4b19      	ldr	r3, [pc, #100]	; (8001644 <_Z15All_mode_UARTUIv+0x56c>)
 80015de:	781a      	ldrb	r2, [r3, #0]
 80015e0:	4b29      	ldr	r3, [pc, #164]	; (8001688 <_Z15All_mode_UARTUIv+0x5b0>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	f040 8171 	bne.w	80018cc <_Z15All_mode_UARTUIv+0x7f4>
					M_state = 8;
 80015ea:	4b1c      	ldr	r3, [pc, #112]	; (800165c <_Z15All_mode_UARTUIv+0x584>)
 80015ec:	2208      	movs	r2, #8
 80015ee:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 80015f0:	f000 f9ac 	bl	800194c <_Z7xu_Uartv>

		///////// Order to Work !!! ///
					grandState = work;
 80015f4:	4b25      	ldr	r3, [pc, #148]	; (800168c <_Z15All_mode_UARTUIv+0x5b4>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	701a      	strb	r2, [r3, #0]
					//if(grandState == Ready){grandState = work;}
					//HAL_UART_Transmit(&huart2, (uint8_t*)temp_f_ack2, 2 ,1000);
				}
				break;
 80015fa:	e167      	b.n	80018cc <_Z15All_mode_UARTUIv+0x7f4>
		////==============[Request Current station]===========
			case 9: //10011001 01100110
				chksum = MainBuf[newPos_uart-1];
 80015fc:	4b0f      	ldr	r3, [pc, #60]	; (800163c <_Z15All_mode_UARTUIv+0x564>)
 80015fe:	881b      	ldrh	r3, [r3, #0]
 8001600:	3b01      	subs	r3, #1
 8001602:	4a0f      	ldr	r2, [pc, #60]	; (8001640 <_Z15All_mode_UARTUIv+0x568>)
 8001604:	5cd2      	ldrb	r2, [r2, r3]
 8001606:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <_Z15All_mode_UARTUIv+0x56c>)
 8001608:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 800160a:	4b12      	ldr	r3, [pc, #72]	; (8001654 <_Z15All_mode_UARTUIv+0x57c>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	43db      	mvns	r3, r3
 8001610:	b2da      	uxtb	r2, r3
 8001612:	4b1d      	ldr	r3, [pc, #116]	; (8001688 <_Z15All_mode_UARTUIv+0x5b0>)
 8001614:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8001616:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <_Z15All_mode_UARTUIv+0x56c>)
 8001618:	781a      	ldrb	r2, [r3, #0]
 800161a:	4b1b      	ldr	r3, [pc, #108]	; (8001688 <_Z15All_mode_UARTUIv+0x5b0>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	429a      	cmp	r2, r3
 8001620:	f040 8156 	bne.w	80018d0 <_Z15All_mode_UARTUIv+0x7f8>
					M_state = 9;
 8001624:	4b0d      	ldr	r3, [pc, #52]	; (800165c <_Z15All_mode_UARTUIv+0x584>)
 8001626:	2209      	movs	r2, #9
 8001628:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 800162a:	f000 f98f 	bl	800194c <_Z7xu_Uartv>
					//Req_sta[1] = 0;
					//Req_sta[2] = x;
					//Req_sta[3] = ~(Req_sta[0] + Req_sta[1] + Req_sta[2]);
					HAL_UART_Transmit(&huart2, (uint8_t*)Req_sta, 4 ,100);
 800162e:	2364      	movs	r3, #100	; 0x64
 8001630:	2204      	movs	r2, #4
 8001632:	4917      	ldr	r1, [pc, #92]	; (8001690 <_Z15All_mode_UARTUIv+0x5b8>)
 8001634:	4817      	ldr	r0, [pc, #92]	; (8001694 <_Z15All_mode_UARTUIv+0x5bc>)
 8001636:	f01a fb10 	bl	801bc5a <HAL_UART_Transmit>
				}
				break;
 800163a:	e149      	b.n	80018d0 <_Z15All_mode_UARTUIv+0x7f8>
 800163c:	20000792 	.word	0x20000792
 8001640:	20000770 	.word	0x20000770
 8001644:	200007d5 	.word	0x200007d5
 8001648:	200007da 	.word	0x200007da
 800164c:	200007d9 	.word	0x200007d9
 8001650:	200007ac 	.word	0x200007ac
 8001654:	200007d4 	.word	0x200007d4
 8001658:	200007d7 	.word	0x200007d7
 800165c:	200007db 	.word	0x200007db
 8001660:	20000518 	.word	0x20000518
 8001664:	20000144 	.word	0x20000144
 8001668:	200007cc 	.word	0x200007cc
 800166c:	200007d0 	.word	0x200007d0
 8001670:	200007dc 	.word	0x200007dc
 8001674:	20000790 	.word	0x20000790
 8001678:	200007dd 	.word	0x200007dd
 800167c:	200007b0 	.word	0x200007b0
 8001680:	200007b8 	.word	0x200007b8
 8001684:	200007d8 	.word	0x200007d8
 8001688:	200007d6 	.word	0x200007d6
 800168c:	200004fc 	.word	0x200004fc
 8001690:	200001b8 	.word	0x200001b8
 8001694:	200003f4 	.word	0x200003f4
		////==============[Request Angular Position]===========
			case 10: //10011010 01100101
				chksum = MainBuf[newPos_uart-1];
 8001698:	4b97      	ldr	r3, [pc, #604]	; (80018f8 <_Z15All_mode_UARTUIv+0x820>)
 800169a:	881b      	ldrh	r3, [r3, #0]
 800169c:	3b01      	subs	r3, #1
 800169e:	4a97      	ldr	r2, [pc, #604]	; (80018fc <_Z15All_mode_UARTUIv+0x824>)
 80016a0:	5cd2      	ldrb	r2, [r2, r3]
 80016a2:	4b97      	ldr	r3, [pc, #604]	; (8001900 <_Z15All_mode_UARTUIv+0x828>)
 80016a4:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 80016a6:	4b97      	ldr	r3, [pc, #604]	; (8001904 <_Z15All_mode_UARTUIv+0x82c>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	43db      	mvns	r3, r3
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	4b96      	ldr	r3, [pc, #600]	; (8001908 <_Z15All_mode_UARTUIv+0x830>)
 80016b0:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 80016b2:	4b93      	ldr	r3, [pc, #588]	; (8001900 <_Z15All_mode_UARTUIv+0x828>)
 80016b4:	781a      	ldrb	r2, [r3, #0]
 80016b6:	4b94      	ldr	r3, [pc, #592]	; (8001908 <_Z15All_mode_UARTUIv+0x830>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	f040 810a 	bne.w	80018d4 <_Z15All_mode_UARTUIv+0x7fc>
					M_state = 10;
 80016c0:	4b92      	ldr	r3, [pc, #584]	; (800190c <_Z15All_mode_UARTUIv+0x834>)
 80016c2:	220a      	movs	r2, #10
 80016c4:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 80016c6:	f000 f941 	bl	800194c <_Z7xu_Uartv>
					DataProtocol_AngPosi = (CurrentEn * 10000); //KalP
 80016ca:	4b91      	ldr	r3, [pc, #580]	; (8001910 <_Z15All_mode_UARTUIv+0x838>)
 80016cc:	edd3 7a00 	vldr	s15, [r3]
 80016d0:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8001914 <_Z15All_mode_UARTUIv+0x83c>
 80016d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016dc:	ee17 2a90 	vmov	r2, s15
 80016e0:	4b8d      	ldr	r3, [pc, #564]	; (8001918 <_Z15All_mode_UARTUIv+0x840>)
 80016e2:	601a      	str	r2, [r3, #0]
					Req_AngPosi[1] = (DataProtocol_AngPosi / 256);
 80016e4:	4b8c      	ldr	r3, [pc, #560]	; (8001918 <_Z15All_mode_UARTUIv+0x840>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	da00      	bge.n	80016ee <_Z15All_mode_UARTUIv+0x616>
 80016ec:	33ff      	adds	r3, #255	; 0xff
 80016ee:	121b      	asrs	r3, r3, #8
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	4b8a      	ldr	r3, [pc, #552]	; (800191c <_Z15All_mode_UARTUIv+0x844>)
 80016f4:	705a      	strb	r2, [r3, #1]
					Req_AngPosi[2] = (DataProtocol_AngPosi % 256);
 80016f6:	4b88      	ldr	r3, [pc, #544]	; (8001918 <_Z15All_mode_UARTUIv+0x840>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	425a      	negs	r2, r3
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	b2d2      	uxtb	r2, r2
 8001700:	bf58      	it	pl
 8001702:	4253      	negpl	r3, r2
 8001704:	b2da      	uxtb	r2, r3
 8001706:	4b85      	ldr	r3, [pc, #532]	; (800191c <_Z15All_mode_UARTUIv+0x844>)
 8001708:	709a      	strb	r2, [r3, #2]
					Req_AngPosi[3] = ~(Req_AngPosi[0] + Req_AngPosi[1] + Req_AngPosi[2]);
 800170a:	4b84      	ldr	r3, [pc, #528]	; (800191c <_Z15All_mode_UARTUIv+0x844>)
 800170c:	781a      	ldrb	r2, [r3, #0]
 800170e:	4b83      	ldr	r3, [pc, #524]	; (800191c <_Z15All_mode_UARTUIv+0x844>)
 8001710:	785b      	ldrb	r3, [r3, #1]
 8001712:	4413      	add	r3, r2
 8001714:	b2da      	uxtb	r2, r3
 8001716:	4b81      	ldr	r3, [pc, #516]	; (800191c <_Z15All_mode_UARTUIv+0x844>)
 8001718:	789b      	ldrb	r3, [r3, #2]
 800171a:	4413      	add	r3, r2
 800171c:	b2db      	uxtb	r3, r3
 800171e:	43db      	mvns	r3, r3
 8001720:	b2da      	uxtb	r2, r3
 8001722:	4b7e      	ldr	r3, [pc, #504]	; (800191c <_Z15All_mode_UARTUIv+0x844>)
 8001724:	70da      	strb	r2, [r3, #3]
					HAL_UART_Transmit(&huart2, (uint8_t*)Req_AngPosi, 4 ,100);
 8001726:	2364      	movs	r3, #100	; 0x64
 8001728:	2204      	movs	r2, #4
 800172a:	497c      	ldr	r1, [pc, #496]	; (800191c <_Z15All_mode_UARTUIv+0x844>)
 800172c:	487c      	ldr	r0, [pc, #496]	; (8001920 <_Z15All_mode_UARTUIv+0x848>)
 800172e:	f01a fa94 	bl	801bc5a <HAL_UART_Transmit>
				}
				break;
 8001732:	e0cf      	b.n	80018d4 <_Z15All_mode_UARTUIv+0x7fc>
		////==============[Request MAX Angular velo]===========
			case 11: //10011011 01100100
				chksum = MainBuf[newPos_uart-1];
 8001734:	4b70      	ldr	r3, [pc, #448]	; (80018f8 <_Z15All_mode_UARTUIv+0x820>)
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	3b01      	subs	r3, #1
 800173a:	4a70      	ldr	r2, [pc, #448]	; (80018fc <_Z15All_mode_UARTUIv+0x824>)
 800173c:	5cd2      	ldrb	r2, [r2, r3]
 800173e:	4b70      	ldr	r3, [pc, #448]	; (8001900 <_Z15All_mode_UARTUIv+0x828>)
 8001740:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8001742:	4b70      	ldr	r3, [pc, #448]	; (8001904 <_Z15All_mode_UARTUIv+0x82c>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	43db      	mvns	r3, r3
 8001748:	b2da      	uxtb	r2, r3
 800174a:	4b6f      	ldr	r3, [pc, #444]	; (8001908 <_Z15All_mode_UARTUIv+0x830>)
 800174c:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 800174e:	4b6c      	ldr	r3, [pc, #432]	; (8001900 <_Z15All_mode_UARTUIv+0x828>)
 8001750:	781a      	ldrb	r2, [r3, #0]
 8001752:	4b6d      	ldr	r3, [pc, #436]	; (8001908 <_Z15All_mode_UARTUIv+0x830>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	429a      	cmp	r2, r3
 8001758:	f040 80be 	bne.w	80018d8 <_Z15All_mode_UARTUIv+0x800>
					M_state = 11;
 800175c:	4b6b      	ldr	r3, [pc, #428]	; (800190c <_Z15All_mode_UARTUIv+0x834>)
 800175e:	220b      	movs	r2, #11
 8001760:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 8001762:	f000 f8f3 	bl	800194c <_Z7xu_Uartv>
					DataProtocol_Velo = (KalV/(2 * 3.14)) * 60;
 8001766:	4b6f      	ldr	r3, [pc, #444]	; (8001924 <_Z15All_mode_UARTUIv+0x84c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f7fe feec 	bl	8000548 <__aeabi_f2d>
 8001770:	a35f      	add	r3, pc, #380	; (adr r3, 80018f0 <_Z15All_mode_UARTUIv+0x818>)
 8001772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001776:	f7ff f869 	bl	800084c <__aeabi_ddiv>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4610      	mov	r0, r2
 8001780:	4619      	mov	r1, r3
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	4b68      	ldr	r3, [pc, #416]	; (8001928 <_Z15All_mode_UARTUIv+0x850>)
 8001788:	f7fe ff36 	bl	80005f8 <__aeabi_dmul>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4610      	mov	r0, r2
 8001792:	4619      	mov	r1, r3
 8001794:	f7ff f9e0 	bl	8000b58 <__aeabi_d2f>
 8001798:	4603      	mov	r3, r0
 800179a:	4a64      	ldr	r2, [pc, #400]	; (800192c <_Z15All_mode_UARTUIv+0x854>)
 800179c:	6013      	str	r3, [r2, #0]
					Req_MaxVelo[1] = 0;
 800179e:	4b64      	ldr	r3, [pc, #400]	; (8001930 <_Z15All_mode_UARTUIv+0x858>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	705a      	strb	r2, [r3, #1]
					Req_MaxVelo[2] = (DataProtocol_Velo * 255) / 10;
 80017a4:	4b61      	ldr	r3, [pc, #388]	; (800192c <_Z15All_mode_UARTUIv+0x854>)
 80017a6:	edd3 7a00 	vldr	s15, [r3]
 80017aa:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8001934 <_Z15All_mode_UARTUIv+0x85c>
 80017ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017b2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80017b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017be:	edc7 7a01 	vstr	s15, [r7, #4]
 80017c2:	793b      	ldrb	r3, [r7, #4]
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	4b5a      	ldr	r3, [pc, #360]	; (8001930 <_Z15All_mode_UARTUIv+0x858>)
 80017c8:	709a      	strb	r2, [r3, #2]
					Req_MaxVelo[3] = ~(Req_MaxVelo[0] + Req_MaxVelo[1] + Req_MaxVelo[2]);
 80017ca:	4b59      	ldr	r3, [pc, #356]	; (8001930 <_Z15All_mode_UARTUIv+0x858>)
 80017cc:	781a      	ldrb	r2, [r3, #0]
 80017ce:	4b58      	ldr	r3, [pc, #352]	; (8001930 <_Z15All_mode_UARTUIv+0x858>)
 80017d0:	785b      	ldrb	r3, [r3, #1]
 80017d2:	4413      	add	r3, r2
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	4b56      	ldr	r3, [pc, #344]	; (8001930 <_Z15All_mode_UARTUIv+0x858>)
 80017d8:	789b      	ldrb	r3, [r3, #2]
 80017da:	4413      	add	r3, r2
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	43db      	mvns	r3, r3
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	4b53      	ldr	r3, [pc, #332]	; (8001930 <_Z15All_mode_UARTUIv+0x858>)
 80017e4:	70da      	strb	r2, [r3, #3]
					HAL_UART_Transmit(&huart2, (uint8_t*)Req_MaxVelo, 4 ,1000);
 80017e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ea:	2204      	movs	r2, #4
 80017ec:	4950      	ldr	r1, [pc, #320]	; (8001930 <_Z15All_mode_UARTUIv+0x858>)
 80017ee:	484c      	ldr	r0, [pc, #304]	; (8001920 <_Z15All_mode_UARTUIv+0x848>)
 80017f0:	f01a fa33 	bl	801bc5a <HAL_UART_Transmit>
				}
				break;
 80017f4:	e070      	b.n	80018d8 <_Z15All_mode_UARTUIv+0x800>
		////==============[Enable end effector]================
			case 12: //// 12  10011100 01100011
				chksum = MainBuf[newPos_uart-1];
 80017f6:	4b40      	ldr	r3, [pc, #256]	; (80018f8 <_Z15All_mode_UARTUIv+0x820>)
 80017f8:	881b      	ldrh	r3, [r3, #0]
 80017fa:	3b01      	subs	r3, #1
 80017fc:	4a3f      	ldr	r2, [pc, #252]	; (80018fc <_Z15All_mode_UARTUIv+0x824>)
 80017fe:	5cd2      	ldrb	r2, [r2, r3]
 8001800:	4b3f      	ldr	r3, [pc, #252]	; (8001900 <_Z15All_mode_UARTUIv+0x828>)
 8001802:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8001804:	4b3f      	ldr	r3, [pc, #252]	; (8001904 <_Z15All_mode_UARTUIv+0x82c>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	43db      	mvns	r3, r3
 800180a:	b2da      	uxtb	r2, r3
 800180c:	4b3e      	ldr	r3, [pc, #248]	; (8001908 <_Z15All_mode_UARTUIv+0x830>)
 800180e:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8001810:	4b3b      	ldr	r3, [pc, #236]	; (8001900 <_Z15All_mode_UARTUIv+0x828>)
 8001812:	781a      	ldrb	r2, [r3, #0]
 8001814:	4b3c      	ldr	r3, [pc, #240]	; (8001908 <_Z15All_mode_UARTUIv+0x830>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	429a      	cmp	r2, r3
 800181a:	d15f      	bne.n	80018dc <_Z15All_mode_UARTUIv+0x804>
					M_state = 12;
 800181c:	4b3b      	ldr	r3, [pc, #236]	; (800190c <_Z15All_mode_UARTUIv+0x834>)
 800181e:	220c      	movs	r2, #12
 8001820:	701a      	strb	r2, [r3, #0]

					flag_efftDis = 0;
 8001822:	4b45      	ldr	r3, [pc, #276]	; (8001938 <_Z15All_mode_UARTUIv+0x860>)
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]

					//flag_efftActi = 1;

					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 8001828:	f000 f890 	bl	800194c <_Z7xu_Uartv>
				}
				break;
 800182c:	e056      	b.n	80018dc <_Z15All_mode_UARTUIv+0x804>
		////==============[Disable end effector]================
			case 13: // 13 10011101 01100010
				chksum = MainBuf[newPos_uart-1];
 800182e:	4b32      	ldr	r3, [pc, #200]	; (80018f8 <_Z15All_mode_UARTUIv+0x820>)
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	3b01      	subs	r3, #1
 8001834:	4a31      	ldr	r2, [pc, #196]	; (80018fc <_Z15All_mode_UARTUIv+0x824>)
 8001836:	5cd2      	ldrb	r2, [r2, r3]
 8001838:	4b31      	ldr	r3, [pc, #196]	; (8001900 <_Z15All_mode_UARTUIv+0x828>)
 800183a:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 800183c:	4b31      	ldr	r3, [pc, #196]	; (8001904 <_Z15All_mode_UARTUIv+0x82c>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	43db      	mvns	r3, r3
 8001842:	b2da      	uxtb	r2, r3
 8001844:	4b30      	ldr	r3, [pc, #192]	; (8001908 <_Z15All_mode_UARTUIv+0x830>)
 8001846:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8001848:	4b2d      	ldr	r3, [pc, #180]	; (8001900 <_Z15All_mode_UARTUIv+0x828>)
 800184a:	781a      	ldrb	r2, [r3, #0]
 800184c:	4b2e      	ldr	r3, [pc, #184]	; (8001908 <_Z15All_mode_UARTUIv+0x830>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	429a      	cmp	r2, r3
 8001852:	d145      	bne.n	80018e0 <_Z15All_mode_UARTUIv+0x808>
					M_state = 13;
 8001854:	4b2d      	ldr	r3, [pc, #180]	; (800190c <_Z15All_mode_UARTUIv+0x834>)
 8001856:	220d      	movs	r2, #13
 8001858:	701a      	strb	r2, [r3, #0]
					//// End Effector Kill
					trig_efftRead = 0;
 800185a:	4b38      	ldr	r3, [pc, #224]	; (800193c <_Z15All_mode_UARTUIv+0x864>)
 800185c:	2200      	movs	r2, #0
 800185e:	701a      	strb	r2, [r3, #0]
					flag_efftRead = 0;
 8001860:	4b37      	ldr	r3, [pc, #220]	; (8001940 <_Z15All_mode_UARTUIv+0x868>)
 8001862:	2200      	movs	r2, #0
 8001864:	701a      	strb	r2, [r3, #0]
					flag_efftActi = 0;
 8001866:	4b37      	ldr	r3, [pc, #220]	; (8001944 <_Z15All_mode_UARTUIv+0x86c>)
 8001868:	2200      	movs	r2, #0
 800186a:	701a      	strb	r2, [r3, #0]
					flag_efftDis = 1;
 800186c:	4b32      	ldr	r3, [pc, #200]	; (8001938 <_Z15All_mode_UARTUIv+0x860>)
 800186e:	2201      	movs	r2, #1
 8001870:	701a      	strb	r2, [r3, #0]

					xu_Uart();
 8001872:	f000 f86b 	bl	800194c <_Z7xu_Uartv>
				}
				break;
 8001876:	e033      	b.n	80018e0 <_Z15All_mode_UARTUIv+0x808>
		////==============[Set Home Zero]================
			case 14: //10011110 01100001
				chksum = MainBuf[newPos_uart-1];
 8001878:	4b1f      	ldr	r3, [pc, #124]	; (80018f8 <_Z15All_mode_UARTUIv+0x820>)
 800187a:	881b      	ldrh	r3, [r3, #0]
 800187c:	3b01      	subs	r3, #1
 800187e:	4a1f      	ldr	r2, [pc, #124]	; (80018fc <_Z15All_mode_UARTUIv+0x824>)
 8001880:	5cd2      	ldrb	r2, [r2, r3]
 8001882:	4b1f      	ldr	r3, [pc, #124]	; (8001900 <_Z15All_mode_UARTUIv+0x828>)
 8001884:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8001886:	4b1f      	ldr	r3, [pc, #124]	; (8001904 <_Z15All_mode_UARTUIv+0x82c>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	43db      	mvns	r3, r3
 800188c:	b2da      	uxtb	r2, r3
 800188e:	4b1e      	ldr	r3, [pc, #120]	; (8001908 <_Z15All_mode_UARTUIv+0x830>)
 8001890:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8001892:	4b1b      	ldr	r3, [pc, #108]	; (8001900 <_Z15All_mode_UARTUIv+0x828>)
 8001894:	781a      	ldrb	r2, [r3, #0]
 8001896:	4b1c      	ldr	r3, [pc, #112]	; (8001908 <_Z15All_mode_UARTUIv+0x830>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	429a      	cmp	r2, r3
 800189c:	d122      	bne.n	80018e4 <_Z15All_mode_UARTUIv+0x80c>
					M_state = 14;
 800189e:	4b1b      	ldr	r3, [pc, #108]	; (800190c <_Z15All_mode_UARTUIv+0x834>)
 80018a0:	220e      	movs	r2, #14
 80018a2:	701a      	strb	r2, [r3, #0]
					//act as set zero interrupt
//					position_order = 0;
//					positionlog[position_order] = 0.0;
//					Velocity = 7.0;
					grandState = SetZeroBf;
 80018a4:	4b28      	ldr	r3, [pc, #160]	; (8001948 <_Z15All_mode_UARTUIv+0x870>)
 80018a6:	2206      	movs	r2, #6
 80018a8:	701a      	strb	r2, [r3, #0]

					xu_Uart();
 80018aa:	f000 f84f 	bl	800194c <_Z7xu_Uartv>
				}
				break;
 80018ae:	e019      	b.n	80018e4 <_Z15All_mode_UARTUIv+0x80c>
				break;
 80018b0:	bf00      	nop
 80018b2:	e018      	b.n	80018e6 <_Z15All_mode_UARTUIv+0x80e>
				break;
 80018b4:	bf00      	nop
 80018b6:	e016      	b.n	80018e6 <_Z15All_mode_UARTUIv+0x80e>
				break;
 80018b8:	bf00      	nop
 80018ba:	e014      	b.n	80018e6 <_Z15All_mode_UARTUIv+0x80e>
				break;
 80018bc:	bf00      	nop
 80018be:	e012      	b.n	80018e6 <_Z15All_mode_UARTUIv+0x80e>
				break;
 80018c0:	bf00      	nop
 80018c2:	e010      	b.n	80018e6 <_Z15All_mode_UARTUIv+0x80e>
				break;
 80018c4:	bf00      	nop
 80018c6:	e00e      	b.n	80018e6 <_Z15All_mode_UARTUIv+0x80e>
				break;
 80018c8:	bf00      	nop
 80018ca:	e00c      	b.n	80018e6 <_Z15All_mode_UARTUIv+0x80e>
				break;
 80018cc:	bf00      	nop
 80018ce:	e00a      	b.n	80018e6 <_Z15All_mode_UARTUIv+0x80e>
				break;
 80018d0:	bf00      	nop
 80018d2:	e008      	b.n	80018e6 <_Z15All_mode_UARTUIv+0x80e>
				break;
 80018d4:	bf00      	nop
 80018d6:	e006      	b.n	80018e6 <_Z15All_mode_UARTUIv+0x80e>
				break;
 80018d8:	bf00      	nop
 80018da:	e004      	b.n	80018e6 <_Z15All_mode_UARTUIv+0x80e>
				break;
 80018dc:	bf00      	nop
 80018de:	e002      	b.n	80018e6 <_Z15All_mode_UARTUIv+0x80e>
				break;
 80018e0:	bf00      	nop
 80018e2:	e000      	b.n	80018e6 <_Z15All_mode_UARTUIv+0x80e>
				break;
 80018e4:	bf00      	nop
			}
}
 80018e6:	bf00      	nop
 80018e8:	3720      	adds	r7, #32
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	51eb851f 	.word	0x51eb851f
 80018f4:	40191eb8 	.word	0x40191eb8
 80018f8:	20000792 	.word	0x20000792
 80018fc:	20000770 	.word	0x20000770
 8001900:	200007d5 	.word	0x200007d5
 8001904:	200007d4 	.word	0x200007d4
 8001908:	200007d6 	.word	0x200007d6
 800190c:	200007db 	.word	0x200007db
 8001910:	200006e4 	.word	0x200006e4
 8001914:	461c4000 	.word	0x461c4000
 8001918:	20000794 	.word	0x20000794
 800191c:	200001bc 	.word	0x200001bc
 8001920:	200003f4 	.word	0x200003f4
 8001924:	200006c8 	.word	0x200006c8
 8001928:	404e0000 	.word	0x404e0000
 800192c:	20000798 	.word	0x20000798
 8001930:	200001c0 	.word	0x200001c0
 8001934:	437f0000 	.word	0x437f0000
 8001938:	200001ac 	.word	0x200001ac
 800193c:	2000073d 	.word	0x2000073d
 8001940:	2000073c 	.word	0x2000073c
 8001944:	2000073b 	.word	0x2000073b
 8001948:	200004fc 	.word	0x200004fc

0800194c <_Z7xu_Uartv>:

void xu_Uart(){
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
	//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
	HAL_UART_Transmit(&huart2, (uint8_t*)temp_s_ack1, 2 , 200); //Xu
 8001950:	23c8      	movs	r3, #200	; 0xc8
 8001952:	2202      	movs	r2, #2
 8001954:	4902      	ldr	r1, [pc, #8]	; (8001960 <_Z7xu_Uartv+0x14>)
 8001956:	4803      	ldr	r0, [pc, #12]	; (8001964 <_Z7xu_Uartv+0x18>)
 8001958:	f01a f97f 	bl	801bc5a <HAL_UART_Transmit>
}
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}
 8001960:	200001b0 	.word	0x200001b0
 8001964:	200003f4 	.word	0x200003f4

08001968 <_Z7fn_Uartv>:

void fn_Uart(){
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, (uint8_t*)temp_f_ack2, 2, 100);
 800196c:	2364      	movs	r3, #100	; 0x64
 800196e:	2202      	movs	r2, #2
 8001970:	4902      	ldr	r1, [pc, #8]	; (800197c <_Z7fn_Uartv+0x14>)
 8001972:	4803      	ldr	r0, [pc, #12]	; (8001980 <_Z7fn_Uartv+0x18>)
 8001974:	f01a f971 	bl	801bc5a <HAL_UART_Transmit>
}
 8001978:	bf00      	nop
 800197a:	bd80      	pop	{r7, pc}
 800197c:	200001b4 	.word	0x200001b4
 8001980:	200003f4 	.word	0x200003f4

08001984 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8001984:	b5b0      	push	{r4, r5, r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
      return pow(__type(__x), __type(__y));
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f7fe fdc8 	bl	8000524 <__aeabi_i2d>
 8001994:	4604      	mov	r4, r0
 8001996:	460d      	mov	r5, r1
 8001998:	6838      	ldr	r0, [r7, #0]
 800199a:	f7fe fdc3 	bl	8000524 <__aeabi_i2d>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	ec43 2b11 	vmov	d1, r2, r3
 80019a6:	ec45 4b10 	vmov	d0, r4, r5
 80019aa:	f01b fb3d 	bl	801d028 <pow>
 80019ae:	eeb0 7a40 	vmov.f32	s14, s0
 80019b2:	eef0 7a60 	vmov.f32	s15, s1
    }
 80019b6:	eeb0 0a47 	vmov.f32	s0, s14
 80019ba:	eef0 0a67 	vmov.f32	s1, s15
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bdb0      	pop	{r4, r5, r7, pc}

080019c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019c8:	b0f2      	sub	sp, #456	; 0x1c8
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	/////assign  Matrix  element value  //////////
		A << 1 ,   Dt    ,   (Dt*Dt)/2 ,
 80019cc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80019d0:	f5a3 72c2 	sub.w	r2, r3, #388	; 0x184
 80019d4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80019de:	f5a3 70ca 	sub.w	r0, r3, #404	; 0x194
 80019e2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80019e6:	461a      	mov	r2, r3
 80019e8:	49ed      	ldr	r1, [pc, #948]	; (8001da0 <main+0x3dc>)
 80019ea:	f002 fcb2 	bl	8004352 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>
 80019ee:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80019f2:	f5a3 72c0 	sub.w	r2, r3, #384	; 0x180
 80019f6:	4beb      	ldr	r3, [pc, #940]	; (8001da4 <main+0x3e0>)
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80019fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a02:	4611      	mov	r1, r2
 8001a04:	4618      	mov	r0, r3
 8001a06:	f002 fcbf 	bl	8004388 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001a0a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001a0e:	f5a3 72be 	sub.w	r2, r3, #380	; 0x17c
 8001a12:	4be5      	ldr	r3, [pc, #916]	; (8001da8 <main+0x3e4>)
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f002 fcb4 	bl	8004388 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		     0 ,    1    ,      Dt    ,
 8001a20:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001a24:	f5a3 72bc 	sub.w	r2, r3, #376	; 0x178
 8001a28:	f04f 0300 	mov.w	r3, #0
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a32:	4619      	mov	r1, r3
 8001a34:	f002 fca8 	bl	8004388 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001a38:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001a3c:	f5a3 72ba 	sub.w	r2, r3, #372	; 0x174
 8001a40:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	f002 fc9c 	bl	8004388 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001a50:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001a54:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 8001a58:	4bd2      	ldr	r3, [pc, #840]	; (8001da4 <main+0x3e0>)
 8001a5a:	6013      	str	r3, [r2, #0]
 8001a5c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a60:	4619      	mov	r1, r3
 8001a62:	f002 fc91 	bl	8004388 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
			 0 ,    0    ,      1     ;
 8001a66:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001a6a:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 8001a6e:	f04f 0300 	mov.w	r3, #0
 8001a72:	6013      	str	r3, [r2, #0]
 8001a74:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f002 fc85 	bl	8004388 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001a7e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001a82:	f5a3 72b4 	sub.w	r2, r3, #360	; 0x168
 8001a86:	f04f 0300 	mov.w	r3, #0
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001a90:	4619      	mov	r1, r3
 8001a92:	f002 fc79 	bl	8004388 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001a96:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001a9a:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 8001a9e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001aa2:	6013      	str	r3, [r2, #0]
 8001aa4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f002 fc6d 	bl	8004388 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		A << 1 ,   Dt    ,   (Dt*Dt)/2 ,
 8001aae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f002 fc5c 	bl	8004370 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>

		X << 0 ,    0    ,      0     ;
 8001ab8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001abc:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 8001ac0:	f04f 0300 	mov.w	r3, #0
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001aca:	f5a3 70b0 	sub.w	r0, r3, #352	; 0x160
 8001ace:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	49b5      	ldr	r1, [pc, #724]	; (8001dac <main+0x3e8>)
 8001ad6:	f002 fcc7 	bl	8004468 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>
 8001ada:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001ade:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 8001ae2:	f04f 0300 	mov.w	r3, #0
 8001ae6:	6013      	str	r3, [r2, #0]
 8001ae8:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8001aec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001af0:	4611      	mov	r1, r2
 8001af2:	4618      	mov	r0, r3
 8001af4:	f002 fcd4 	bl	80044a0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001af8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001afc:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8001b00:	f04f 0300 	mov.w	r3, #0
 8001b04:	6013      	str	r3, [r2, #0]
 8001b06:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	f002 fcc8 	bl	80044a0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001b10:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001b14:	4618      	mov	r0, r3
 8001b16:	f002 fcb6 	bl	8004486 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>

		X1 << 0 ,    0    ,      0     ;
 8001b1a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001b1e:	f5a3 729a 	sub.w	r2, r3, #308	; 0x134
 8001b22:	f04f 0300 	mov.w	r3, #0
 8001b26:	6013      	str	r3, [r2, #0]
 8001b28:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001b2c:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
 8001b30:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b34:	461a      	mov	r2, r3
 8001b36:	499e      	ldr	r1, [pc, #632]	; (8001db0 <main+0x3ec>)
 8001b38:	f002 fc96 	bl	8004468 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>
 8001b3c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001b40:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 8001b44:	f04f 0300 	mov.w	r3, #0
 8001b48:	6013      	str	r3, [r2, #0]
 8001b4a:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001b4e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001b52:	4611      	mov	r1, r2
 8001b54:	4618      	mov	r0, r3
 8001b56:	f002 fca3 	bl	80044a0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001b5a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001b5e:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 8001b62:	f04f 0300 	mov.w	r3, #0
 8001b66:	6013      	str	r3, [r2, #0]
 8001b68:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f002 fc97 	bl	80044a0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001b72:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001b76:	4618      	mov	r0, r3
 8001b78:	f002 fc85 	bl	8004486 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>


		P << 0.000001 , 			0 	 , 			0     ,
 8001b7c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001b80:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 8001b84:	4b8b      	ldr	r3, [pc, #556]	; (8001db4 <main+0x3f0>)
 8001b86:	6013      	str	r3, [r2, #0]
 8001b88:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001b8c:	f5a3 7094 	sub.w	r0, r3, #296	; 0x128
 8001b90:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001b94:	461a      	mov	r2, r3
 8001b96:	4988      	ldr	r1, [pc, #544]	; (8001db8 <main+0x3f4>)
 8001b98:	f002 fbdb 	bl	8004352 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>
 8001b9c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001ba0:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 8001ba4:	f04f 0300 	mov.w	r3, #0
 8001ba8:	6013      	str	r3, [r2, #0]
 8001baa:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8001bae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001bb2:	4611      	mov	r1, r2
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f002 fbe7 	bl	8004388 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001bba:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001bbe:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8001bc2:	f04f 0300 	mov.w	r3, #0
 8001bc6:	6013      	str	r3, [r2, #0]
 8001bc8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f002 fbdb 	bl	8004388 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		     0 		 ,    0.000001    ,  		0     ,
 8001bd2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001bd6:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8001bda:	f04f 0300 	mov.w	r3, #0
 8001bde:	6013      	str	r3, [r2, #0]
 8001be0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001be4:	4619      	mov	r1, r3
 8001be6:	f002 fbcf 	bl	8004388 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001bea:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001bee:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8001bf2:	4b70      	ldr	r3, [pc, #448]	; (8001db4 <main+0x3f0>)
 8001bf4:	6013      	str	r3, [r2, #0]
 8001bf6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	f002 fbc4 	bl	8004388 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001c00:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001c04:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 8001c08:	f04f 0300 	mov.w	r3, #0
 8001c0c:	6013      	str	r3, [r2, #0]
 8001c0e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001c12:	4619      	mov	r1, r3
 8001c14:	f002 fbb8 	bl	8004388 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
			 0 		 ,    		0    ,      0.000001     ;
 8001c18:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001c1c:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8001c20:	f04f 0300 	mov.w	r3, #0
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	f002 fbac 	bl	8004388 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001c30:	4602      	mov	r2, r0
 8001c32:	f04f 0300 	mov.w	r3, #0
 8001c36:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001c3a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4610      	mov	r0, r2
 8001c42:	f002 fba1 	bl	8004388 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001c46:	4602      	mov	r2, r0
 8001c48:	4b5a      	ldr	r3, [pc, #360]	; (8001db4 <main+0x3f0>)
 8001c4a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001c4e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001c52:	4619      	mov	r1, r3
 8001c54:	4610      	mov	r0, r2
 8001c56:	f002 fb97 	bl	8004388 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		P << 0.000001 , 			0 	 , 			0     ,
 8001c5a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f002 fb86 	bl	8004370 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>

		O << 0 , 	0 	 , 		0     ,
 8001c64:	f04f 0300 	mov.w	r3, #0
 8001c68:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001c6c:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
 8001c70:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c74:	461a      	mov	r2, r3
 8001c76:	4951      	ldr	r1, [pc, #324]	; (8001dbc <main+0x3f8>)
 8001c78:	f002 fb6b 	bl	8004352 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>
 8001c7c:	f04f 0300 	mov.w	r3, #0
 8001c80:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001c84:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8001c88:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001c8c:	4611      	mov	r1, r2
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f002 fb7a 	bl	8004388 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001c94:	4602      	mov	r2, r0
 8001c96:	f04f 0300 	mov.w	r3, #0
 8001c9a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001c9e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	f002 fb6f 	bl	8004388 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001caa:	4602      	mov	r2, r0
		     0 ,    0    ,  	0     ,
 8001cac:	f04f 0300 	mov.w	r3, #0
 8001cb0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001cb4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4610      	mov	r0, r2
 8001cbc:	f002 fb64 	bl	8004388 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	f04f 0300 	mov.w	r3, #0
 8001cc6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001cca:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4610      	mov	r0, r2
 8001cd2:	f002 fb59 	bl	8004388 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	f04f 0300 	mov.w	r3, #0
 8001cdc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001ce0:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	f002 fb4e 	bl	8004388 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001cec:	4602      	mov	r2, r0
			 0 ,    0    ,      0     ;
 8001cee:	f04f 0300 	mov.w	r3, #0
 8001cf2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001cf6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4610      	mov	r0, r2
 8001cfe:	f002 fb43 	bl	8004388 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001d02:	4602      	mov	r2, r0
 8001d04:	f04f 0300 	mov.w	r3, #0
 8001d08:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001d0c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001d10:	4619      	mov	r1, r3
 8001d12:	4610      	mov	r0, r2
 8001d14:	f002 fb38 	bl	8004388 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	f04f 0300 	mov.w	r3, #0
 8001d1e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001d22:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001d26:	4619      	mov	r1, r3
 8001d28:	4610      	mov	r0, r2
 8001d2a:	f002 fb2d 	bl	8004388 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		O << 0 , 	0 	 , 		0     ,
 8001d2e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d32:	4618      	mov	r0, r3
 8001d34:	f002 fb1c 	bl	8004370 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>

		I << 1 , 0 , 0 ,
 8001d38:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001d3c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001d40:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001d44:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d48:	461a      	mov	r2, r3
 8001d4a:	491d      	ldr	r1, [pc, #116]	; (8001dc0 <main+0x3fc>)
 8001d4c:	f002 fb01 	bl	8004352 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>
 8001d50:	f04f 0300 	mov.w	r3, #0
 8001d54:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001d58:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8001d5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d60:	4611      	mov	r1, r2
 8001d62:	4618      	mov	r0, r3
 8001d64:	f002 fb10 	bl	8004388 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	f04f 0300 	mov.w	r3, #0
 8001d6e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001d72:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001d76:	4619      	mov	r1, r3
 8001d78:	4610      	mov	r0, r2
 8001d7a:	f002 fb05 	bl	8004388 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001d7e:	4602      	mov	r2, r0
			 0 , 1 , 0 ,
 8001d80:	f04f 0300 	mov.w	r3, #0
 8001d84:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001d88:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4610      	mov	r0, r2
 8001d90:	f002 fafa 	bl	8004388 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001d94:	4602      	mov	r2, r0
 8001d96:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001d9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001d9e:	e011      	b.n	8001dc4 <main+0x400>
 8001da0:	200005b8 	.word	0x200005b8
 8001da4:	3c23d70a 	.word	0x3c23d70a
 8001da8:	3851b717 	.word	0x3851b717
 8001dac:	200006a0 	.word	0x200006a0
 8001db0:	200006ac 	.word	0x200006ac
 8001db4:	358637bd 	.word	0x358637bd
 8001db8:	200005dc 	.word	0x200005dc
 8001dbc:	20000600 	.word	0x20000600
 8001dc0:	20000624 	.word	0x20000624
 8001dc4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4610      	mov	r0, r2
 8001dcc:	f002 fadc 	bl	8004388 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	f04f 0300 	mov.w	r3, #0
 8001dd6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001dda:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001dde:	4619      	mov	r1, r3
 8001de0:	4610      	mov	r0, r2
 8001de2:	f002 fad1 	bl	8004388 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001de6:	4602      	mov	r2, r0
			 0 , 0 , 1 ;
 8001de8:	f04f 0300 	mov.w	r3, #0
 8001dec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001df0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001df4:	4619      	mov	r1, r3
 8001df6:	4610      	mov	r0, r2
 8001df8:	f002 fac6 	bl	8004388 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	f04f 0300 	mov.w	r3, #0
 8001e02:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001e06:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	f002 fabb 	bl	8004388 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001e12:	4602      	mov	r2, r0
 8001e14:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001e18:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001e1c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001e20:	4619      	mov	r1, r3
 8001e22:	4610      	mov	r0, r2
 8001e24:	f002 fab0 	bl	8004388 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		I << 1 , 0 , 0 ,
 8001e28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f002 fa9f 	bl	8004370 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>

		R << pow(10, 0);
 8001e32:	2100      	movs	r1, #0
 8001e34:	200a      	movs	r0, #10
 8001e36:	f7ff fda5 	bl	8001984 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001e3a:	ec53 2b10 	vmov	r2, r3, d0
 8001e3e:	4610      	mov	r0, r2
 8001e40:	4619      	mov	r1, r3
 8001e42:	f7fe fe89 	bl	8000b58 <__aeabi_d2f>
 8001e46:	4603      	mov	r3, r0
 8001e48:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001e4c:	f507 709e 	add.w	r0, r7, #316	; 0x13c
 8001e50:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8001e54:	461a      	mov	r2, r3
 8001e56:	499c      	ldr	r1, [pc, #624]	; (80020c8 <main+0x704>)
 8001e58:	f002 fb92 	bl	8004580 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEElsERKf>
 8001e5c:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8001e60:	4618      	mov	r0, r3
 8001e62:	f002 fb9c 	bl	800459e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>

		D << 0 ;
 8001e66:	f04f 0300 	mov.w	r3, #0
 8001e6a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8001e6e:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 8001e72:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001e76:	461a      	mov	r2, r3
 8001e78:	4994      	ldr	r1, [pc, #592]	; (80020cc <main+0x708>)
 8001e7a:	f002 fb81 	bl	8004580 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEElsERKf>
 8001e7e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001e82:	4618      	mov	r0, r3
 8001e84:	f002 fb8b 	bl	800459e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>

		B << 0 , 0 , 0 ;
 8001e88:	f04f 0300 	mov.w	r3, #0
 8001e8c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8001e90:	f507 70b2 	add.w	r0, r7, #356	; 0x164
 8001e94:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8001e98:	461a      	mov	r2, r3
 8001e9a:	498d      	ldr	r1, [pc, #564]	; (80020d0 <main+0x70c>)
 8001e9c:	f002 fae4 	bl	8004468 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>
 8001ea0:	f04f 0300 	mov.w	r3, #0
 8001ea4:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8001ea8:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8001eac:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8001eb0:	4611      	mov	r1, r2
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f002 faf4 	bl	80044a0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	f04f 0300 	mov.w	r3, #0
 8001ebe:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001ec2:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4610      	mov	r0, r2
 8001eca:	f002 fae9 	bl	80044a0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001ece:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f002 fad7 	bl	8004486 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>

		C << 1 , 0 , 0 ;
 8001ed8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001edc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8001ee0:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 8001ee4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001ee8:	461a      	mov	r2, r3
 8001eea:	497a      	ldr	r1, [pc, #488]	; (80020d4 <main+0x710>)
 8001eec:	f002 fb63 	bl	80045b6 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEElsERKf>
 8001ef0:	f04f 0300 	mov.w	r3, #0
 8001ef4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8001ef8:	f507 72ca 	add.w	r2, r7, #404	; 0x194
 8001efc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8001f00:	4611      	mov	r1, r2
 8001f02:	4618      	mov	r0, r3
 8001f04:	f002 fb72 	bl	80045ec <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	f04f 0300 	mov.w	r3, #0
 8001f0e:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8001f12:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001f16:	4619      	mov	r1, r3
 8001f18:	4610      	mov	r0, r2
 8001f1a:	f002 fb67 	bl	80045ec <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf>
 8001f1e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8001f22:	4618      	mov	r0, r3
 8001f24:	f002 fb56 	bl	80045d4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>

		G << (Dt*Dt)/2 , Dt , 1 ;
 8001f28:	4b6b      	ldr	r3, [pc, #428]	; (80020d8 <main+0x714>)
 8001f2a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8001f2e:	f507 70ce 	add.w	r0, r7, #412	; 0x19c
 8001f32:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001f36:	461a      	mov	r2, r3
 8001f38:	4968      	ldr	r1, [pc, #416]	; (80020dc <main+0x718>)
 8001f3a:	f002 fa95 	bl	8004468 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>
 8001f3e:	4b68      	ldr	r3, [pc, #416]	; (80020e0 <main+0x71c>)
 8001f40:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8001f44:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8001f48:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8001f4c:	4611      	mov	r1, r2
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f002 faa6 	bl	80044a0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001f54:	4602      	mov	r2, r0
 8001f56:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001f5a:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8001f5e:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8001f62:	4619      	mov	r1, r3
 8001f64:	4610      	mov	r0, r2
 8001f66:	f002 fa9b 	bl	80044a0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001f6a:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f002 fa89 	bl	8004486 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f74:	f014 fb8a 	bl	801668c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f78:	f000 f9a4 	bl	80022c4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f7c:	f000 fbb4 	bl	80026e8 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001f80:	f000 fb8a 	bl	8002698 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 8001f84:	f000 fa10 	bl	80023a8 <_ZL12MX_I2C1_Initv>
  MX_TIM11_Init();
 8001f88:	f000 fb2e 	bl	80025e8 <_ZL13MX_TIM11_Initv>
  MX_TIM4_Init();
 8001f8c:	f000 fa74 	bl	8002478 <_ZL12MX_TIM4_Initv>
  MX_I2C3_Init();
 8001f90:	f000 fa3e 	bl	8002410 <_ZL12MX_I2C3_Initv>
  MX_USART2_UART_Init();
 8001f94:	f000 fb50 	bl	8002638 <_ZL19MX_USART2_UART_Initv>
  MX_TIM10_Init();
 8001f98:	f000 fafe 	bl	8002598 <_ZL13MX_TIM10_Initv>
  /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start_IT(&htim10); // milli timer
 8001f9c:	4851      	ldr	r0, [pc, #324]	; (80020e4 <main+0x720>)
 8001f9e:	f018 fe9b 	bl	801acd8 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim11); // micro timer
 8001fa2:	4851      	ldr	r0, [pc, #324]	; (80020e8 <main+0x724>)
 8001fa4:	f018 fe98 	bl	801acd8 <HAL_TIM_Base_Start_IT>

    //PWM Test
    HAL_TIM_Base_Start(&htim4);
 8001fa8:	4850      	ldr	r0, [pc, #320]	; (80020ec <main+0x728>)
 8001faa:	f018 fe3b 	bl	801ac24 <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001fae:	2100      	movs	r1, #0
 8001fb0:	484e      	ldr	r0, [pc, #312]	; (80020ec <main+0x728>)
 8001fb2:	f018 ff4d 	bl	801ae50 <HAL_TIM_PWM_Start>

    //UART UI
    HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuf, RxBuf_SIZE);
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	494d      	ldr	r1, [pc, #308]	; (80020f0 <main+0x72c>)
 8001fba:	484e      	ldr	r0, [pc, #312]	; (80020f4 <main+0x730>)
 8001fbc:	f019 fedf 	bl	801bd7e <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001fc0:	4b4d      	ldr	r3, [pc, #308]	; (80020f8 <main+0x734>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6819      	ldr	r1, [r3, #0]
 8001fc6:	4b4c      	ldr	r3, [pc, #304]	; (80020f8 <main+0x734>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	f021 0308 	bic.w	r3, r1, #8
 8001fce:	6013      	str	r3, [r2, #0]

    ////// ===== Select DataPosition Dataset =================
    switch(NumPosDataSetx){
 8001fd0:	4b4a      	ldr	r3, [pc, #296]	; (80020fc <main+0x738>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	2b03      	cmp	r3, #3
 8001fd8:	f200 809d 	bhi.w	8002116 <main+0x752>
 8001fdc:	a201      	add	r2, pc, #4	; (adr r2, 8001fe4 <main+0x620>)
 8001fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe2:	bf00      	nop
 8001fe4:	08001ff5 	.word	0x08001ff5
 8001fe8:	08002027 	.word	0x08002027
 8001fec:	08002059 	.word	0x08002059
 8001ff0:	0800208b 	.word	0x0800208b

    case 1:
    	for(int t = 0;t <= PosBufSize ;t++){
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001ffa:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001ffe:	2b14      	cmp	r3, #20
 8002000:	dc5c      	bgt.n	80020bc <main+0x6f8>
		PosDataSet[t] = rawPossw_1[t];
 8002002:	4a3f      	ldr	r2, [pc, #252]	; (8002100 <main+0x73c>)
 8002004:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	6819      	ldr	r1, [r3, #0]
 800200e:	4a3d      	ldr	r2, [pc, #244]	; (8002104 <main+0x740>)
 8002010:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	6019      	str	r1, [r3, #0]
    	for(int t = 0;t <= PosBufSize ;t++){
 800201a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800201e:	3301      	adds	r3, #1
 8002020:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002024:	e7e9      	b.n	8001ffa <main+0x636>
		} break;

    case 2:
    	for(int t = 0;t <= PosBufSize ;t++){
 8002026:	2300      	movs	r3, #0
 8002028:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800202c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002030:	2b14      	cmp	r3, #20
 8002032:	dc45      	bgt.n	80020c0 <main+0x6fc>
		PosDataSet[t] = rawPossw_2[t];
 8002034:	4a34      	ldr	r2, [pc, #208]	; (8002108 <main+0x744>)
 8002036:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	6819      	ldr	r1, [r3, #0]
 8002040:	4a30      	ldr	r2, [pc, #192]	; (8002104 <main+0x740>)
 8002042:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4413      	add	r3, r2
 800204a:	6019      	str	r1, [r3, #0]
    	for(int t = 0;t <= PosBufSize ;t++){
 800204c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002050:	3301      	adds	r3, #1
 8002052:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002056:	e7e9      	b.n	800202c <main+0x668>
		} break;

    case 3:
    	for(int t = 0;t <= PosBufSize ;t++){
 8002058:	2300      	movs	r3, #0
 800205a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800205e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002062:	2b14      	cmp	r3, #20
 8002064:	dc2e      	bgt.n	80020c4 <main+0x700>
    	PosDataSet[t] = rawPossw_3[t];
 8002066:	4a29      	ldr	r2, [pc, #164]	; (800210c <main+0x748>)
 8002068:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	6819      	ldr	r1, [r3, #0]
 8002072:	4a24      	ldr	r2, [pc, #144]	; (8002104 <main+0x740>)
 8002074:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	6019      	str	r1, [r3, #0]
    	for(int t = 0;t <= PosBufSize ;t++){
 800207e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002082:	3301      	adds	r3, #1
 8002084:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002088:	e7e9      	b.n	800205e <main+0x69a>
    	} break;

    case 4:
		for(int t = 0;t <= PosBufSize ;t++){
 800208a:	2300      	movs	r3, #0
 800208c:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8002090:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8002094:	2b14      	cmp	r3, #20
 8002096:	dc3d      	bgt.n	8002114 <main+0x750>
		PosDataSet[t] = rawPossw_4[t];
 8002098:	4a1d      	ldr	r2, [pc, #116]	; (8002110 <main+0x74c>)
 800209a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	6819      	ldr	r1, [r3, #0]
 80020a4:	4a17      	ldr	r2, [pc, #92]	; (8002104 <main+0x740>)
 80020a6:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	6019      	str	r1, [r3, #0]
		for(int t = 0;t <= PosBufSize ;t++){
 80020b0:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80020b4:	3301      	adds	r3, #1
 80020b6:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 80020ba:	e7e9      	b.n	8002090 <main+0x6cc>
		} break;
 80020bc:	bf00      	nop
 80020be:	e02a      	b.n	8002116 <main+0x752>
		} break;
 80020c0:	bf00      	nop
 80020c2:	e028      	b.n	8002116 <main+0x752>
    	} break;
 80020c4:	bf00      	nop
 80020c6:	e026      	b.n	8002116 <main+0x752>
 80020c8:	2000064c 	.word	0x2000064c
 80020cc:	20000650 	.word	0x20000650
 80020d0:	200006b8 	.word	0x200006b8
 80020d4:	20000664 	.word	0x20000664
 80020d8:	3851b717 	.word	0x3851b717
 80020dc:	20000670 	.word	0x20000670
 80020e0:	3c23d70a 	.word	0x3c23d70a
 80020e4:	20000364 	.word	0x20000364
 80020e8:	200003ac 	.word	0x200003ac
 80020ec:	2000031c 	.word	0x2000031c
 80020f0:	20000750 	.word	0x20000750
 80020f4:	200003f4 	.word	0x200003f4
 80020f8:	20000438 	.word	0x20000438
 80020fc:	20000000 	.word	0x20000000
 8002100:	20000004 	.word	0x20000004
 8002104:	20000518 	.word	0x20000518
 8002108:	20000054 	.word	0x20000054
 800210c:	200000a4 	.word	0x200000a4
 8002110:	200000f4 	.word	0x200000f4
		} break;
 8002114:	bf00      	nop
    }

    PosoffsetMon = 0 + POSOFFSET; // for send to cubeMon
 8002116:	4a5d      	ldr	r2, [pc, #372]	; (800228c <main+0x8c8>)
 8002118:	f240 3389 	movw	r3, #905	; 0x389
 800211c:	6013      	str	r3, [r2, #0]
    ////============position buffer Set Default===================
    //for(int f = 0; f <= PosBufSize; f++){
    //		positionlog[f] = -1.0;
    //	}
    //MCP23017 setting init
    HAL_Delay(50);
 800211e:	2032      	movs	r0, #50	; 0x32
 8002120:	f014 fb26 	bl	8016770 <HAL_Delay>
    IOExpenderInit();
 8002124:	f001 fed0 	bl	8003ec8 <_Z14IOExpenderInitv>
	      ///// IT test
	 //HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);

	  	  ///// GrandState ///////////////////

	  	  if(micros() - TimeStampGrand >= 1000){
 8002128:	f002 f83c 	bl	80041a4 <_Z6microsv>
 800212c:	4b58      	ldr	r3, [pc, #352]	; (8002290 <main+0x8cc>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2200      	movs	r2, #0
 8002132:	62bb      	str	r3, [r7, #40]	; 0x28
 8002134:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002138:	ebb0 0803 	subs.w	r8, r0, r3
 800213c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800213e:	eb61 0903 	sbc.w	r9, r1, r3
 8002142:	f5b8 7f7a 	cmp.w	r8, #1000	; 0x3e8
 8002146:	f179 0300 	sbcs.w	r3, r9, #0
 800214a:	bf2c      	ite	cs
 800214c:	2301      	movcs	r3, #1
 800214e:	2300      	movcc	r3, #0
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d007      	beq.n	8002166 <main+0x7a2>
	  		TimeStampGrand = micros();
 8002156:	f002 f825 	bl	80041a4 <_Z6microsv>
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
 800215e:	4b4c      	ldr	r3, [pc, #304]	; (8002290 <main+0x8cc>)
 8002160:	601a      	str	r2, [r3, #0]
	  		GrandStatumix();
 8002162:	f000 fbad 	bl	80028c0 <_Z13GrandStatumixv>
	  		//CurrentEn = BinPosXI * 0.006136;
	  	  }

	  	  // Encoder I2CRead

	  	  if (micros()-timeStampSR >= 10000)      // don't use 1
 8002166:	f002 f81d 	bl	80041a4 <_Z6microsv>
 800216a:	4b4a      	ldr	r3, [pc, #296]	; (8002294 <main+0x8d0>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2200      	movs	r2, #0
 8002170:	623b      	str	r3, [r7, #32]
 8002172:	627a      	str	r2, [r7, #36]	; 0x24
 8002174:	6a3b      	ldr	r3, [r7, #32]
 8002176:	1ac3      	subs	r3, r0, r3
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	eb61 0303 	sbc.w	r3, r1, r3
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	f242 7310 	movw	r3, #10000	; 0x2710
 8002186:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800218a:	4602      	mov	r2, r0
 800218c:	429a      	cmp	r2, r3
 800218e:	460b      	mov	r3, r1
 8002190:	f173 0300 	sbcs.w	r3, r3, #0
 8002194:	bf2c      	ite	cs
 8002196:	2301      	movcs	r3, #1
 8002198:	2300      	movcc	r3, #0
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b00      	cmp	r3, #0
 800219e:	d008      	beq.n	80021b2 <main+0x7ee>
	  	          {
	  	              timeStampSR = micros();           //set new time stamp
 80021a0:	f002 f800 	bl	80041a4 <_Z6microsv>
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
 80021a8:	4b3a      	ldr	r3, [pc, #232]	; (8002294 <main+0x8d0>)
 80021aa:	601a      	str	r2, [r3, #0]
	  	              flag_absenc = 1;
 80021ac:	4a3a      	ldr	r2, [pc, #232]	; (8002298 <main+0x8d4>)
 80021ae:	2301      	movs	r3, #1
 80021b0:	7013      	strb	r3, [r2, #0]
	  	          }
	  	  AbsEncI2CReadx(RawEnBitAB);
 80021b2:	483a      	ldr	r0, [pc, #232]	; (800229c <main+0x8d8>)
 80021b4:	f001 fe9e 	bl	8003ef4 <_Z14AbsEncI2CReadxPh>
	  	  //Unwrapping();
	  	  //Kalmanfilter();

	  	  ///////////////////// 2KHz change PWM PB6////////////////////

	  	  if(micros() - timestampPWM >= 500){
 80021b8:	f001 fff4 	bl	80041a4 <_Z6microsv>
 80021bc:	4b38      	ldr	r3, [pc, #224]	; (80022a0 <main+0x8dc>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2200      	movs	r2, #0
 80021c2:	61bb      	str	r3, [r7, #24]
 80021c4:	61fa      	str	r2, [r7, #28]
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	ebb0 0a03 	subs.w	sl, r0, r3
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	eb61 0b03 	sbc.w	fp, r1, r3
 80021d2:	f5ba 7ffa 	cmp.w	sl, #500	; 0x1f4
 80021d6:	f17b 0300 	sbcs.w	r3, fp, #0
 80021da:	bf2c      	ite	cs
 80021dc:	2301      	movcs	r3, #1
 80021de:	2300      	movcc	r3, #0
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d01a      	beq.n	800221c <main+0x858>
	  		  	  timestampPWM = micros(); // stamp
 80021e6:	f001 ffdd 	bl	80041a4 <_Z6microsv>
 80021ea:	4602      	mov	r2, r0
 80021ec:	460b      	mov	r3, r1
 80021ee:	4b2c      	ldr	r3, [pc, #176]	; (80022a0 <main+0x8dc>)
 80021f0:	601a      	str	r2, [r3, #0]
	  	  		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWMOut); // dutycycle
 80021f2:	4b2c      	ldr	r3, [pc, #176]	; (80022a4 <main+0x8e0>)
 80021f4:	8819      	ldrh	r1, [r3, #0]
 80021f6:	4b2c      	ldr	r3, [pc, #176]	; (80022a8 <main+0x8e4>)
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	460b      	mov	r3, r1
 80021fc:	6353      	str	r3, [r2, #52]	; 0x34
	  	  		  //__HAL_TIM_SET_PRESCALER(&htim4, pscalr); // Set freq of pwm
	  	  		  //ADC_Target = ADCFeedx[1].datt;

	  	  		///// Mot Driver ///// 0 => CCW /// 1 => CW
	  	  		if (mot_dirctn == 0){
 80021fe:	4b2b      	ldr	r3, [pc, #172]	; (80022ac <main+0x8e8>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d105      	bne.n	8002212 <main+0x84e>
	  	  		HAL_GPIO_WritePin(Mot_dir_GPIO_Port, Mot_dir_Pin, GPIO_PIN_SET);
 8002206:	2201      	movs	r2, #1
 8002208:	2104      	movs	r1, #4
 800220a:	4829      	ldr	r0, [pc, #164]	; (80022b0 <main+0x8ec>)
 800220c:	f015 f992 	bl	8017534 <HAL_GPIO_WritePin>
 8002210:	e004      	b.n	800221c <main+0x858>
	  	  		}else{
	  	  		HAL_GPIO_WritePin(Mot_dir_GPIO_Port, Mot_dir_Pin, GPIO_PIN_RESET);
 8002212:	2200      	movs	r2, #0
 8002214:	2104      	movs	r1, #4
 8002216:	4826      	ldr	r0, [pc, #152]	; (80022b0 <main+0x8ec>)
 8002218:	f015 f98c 	bl	8017534 <HAL_GPIO_WritePin>
				controlloop();
			 }
	  	    */

	  	 //////////// End Effector /////////////////////
	  	 Efft_activate(); // Activate by flag_efftActi = 1;
 800221c:	f001 febe 	bl	8003f9c <_Z13Efft_activatev>
	  	 Efft_read(&efft_status);
 8002220:	4824      	ldr	r0, [pc, #144]	; (80022b4 <main+0x8f0>)
 8002222:	f001 ff13 	bl	800404c <_Z9Efft_readPh>
	  	 //// trig_efftRead up for 10 times afrer shoot / trig at shoot state

	  	 if(trig_efftRead != 0 && millis() - timestamp_efft >= 500){
 8002226:	4b24      	ldr	r3, [pc, #144]	; (80022b8 <main+0x8f4>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d014      	beq.n	8002258 <main+0x894>
 800222e:	f001 ffd3 	bl	80041d8 <_Z6millisv>
 8002232:	4603      	mov	r3, r0
 8002234:	2200      	movs	r2, #0
 8002236:	613b      	str	r3, [r7, #16]
 8002238:	617a      	str	r2, [r7, #20]
 800223a:	4b20      	ldr	r3, [pc, #128]	; (80022bc <main+0x8f8>)
 800223c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002240:	6939      	ldr	r1, [r7, #16]
 8002242:	1a8c      	subs	r4, r1, r2
 8002244:	6979      	ldr	r1, [r7, #20]
 8002246:	eb61 0503 	sbc.w	r5, r1, r3
 800224a:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
 800224e:	f175 0300 	sbcs.w	r3, r5, #0
 8002252:	d301      	bcc.n	8002258 <main+0x894>
 8002254:	2301      	movs	r3, #1
 8002256:	e000      	b.n	800225a <main+0x896>
 8002258:	2300      	movs	r3, #0
 800225a:	2b00      	cmp	r3, #0
 800225c:	f43f af64 	beq.w	8002128 <main+0x764>
	  		 timestamp_efft = millis();
 8002260:	f001 ffba 	bl	80041d8 <_Z6millisv>
 8002264:	4603      	mov	r3, r0
 8002266:	2200      	movs	r2, #0
 8002268:	603b      	str	r3, [r7, #0]
 800226a:	607a      	str	r2, [r7, #4]
 800226c:	4b13      	ldr	r3, [pc, #76]	; (80022bc <main+0x8f8>)
 800226e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002272:	e9c3 1200 	strd	r1, r2, [r3]
	  		 flag_efftRead = 1;
 8002276:	4a12      	ldr	r2, [pc, #72]	; (80022c0 <main+0x8fc>)
 8002278:	2301      	movs	r3, #1
 800227a:	7013      	strb	r3, [r2, #0]
	  		 trig_efftRead++;
 800227c:	4b0e      	ldr	r3, [pc, #56]	; (80022b8 <main+0x8f4>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	3301      	adds	r3, #1
 8002282:	b2db      	uxtb	r3, r3
 8002284:	4a0c      	ldr	r2, [pc, #48]	; (80022b8 <main+0x8f4>)
 8002286:	7013      	strb	r3, [r2, #0]
	  	  if(micros() - TimeStampGrand >= 1000){
 8002288:	e74e      	b.n	8002128 <main+0x764>
 800228a:	bf00      	nop
 800228c:	200004f8 	.word	0x200004f8
 8002290:	20000500 	.word	0x20000500
 8002294:	20000568 	.word	0x20000568
 8002298:	20000572 	.word	0x20000572
 800229c:	2000056c 	.word	0x2000056c
 80022a0:	20000578 	.word	0x20000578
 80022a4:	20000574 	.word	0x20000574
 80022a8:	2000031c 	.word	0x2000031c
 80022ac:	2000057c 	.word	0x2000057c
 80022b0:	40020400 	.word	0x40020400
 80022b4:	2000073a 	.word	0x2000073a
 80022b8:	2000073d 	.word	0x2000073d
 80022bc:	20000740 	.word	0x20000740
 80022c0:	2000073c 	.word	0x2000073c

080022c4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b094      	sub	sp, #80	; 0x50
 80022c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022ca:	f107 0320 	add.w	r3, r7, #32
 80022ce:	2230      	movs	r2, #48	; 0x30
 80022d0:	2100      	movs	r1, #0
 80022d2:	4618      	mov	r0, r3
 80022d4:	f01b fe4e 	bl	801df74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022d8:	f107 030c 	add.w	r3, r7, #12
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	609a      	str	r2, [r3, #8]
 80022e4:	60da      	str	r2, [r3, #12]
 80022e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022e8:	2300      	movs	r3, #0
 80022ea:	60bb      	str	r3, [r7, #8]
 80022ec:	4b2c      	ldr	r3, [pc, #176]	; (80023a0 <_Z18SystemClock_Configv+0xdc>)
 80022ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f0:	4a2b      	ldr	r2, [pc, #172]	; (80023a0 <_Z18SystemClock_Configv+0xdc>)
 80022f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022f6:	6413      	str	r3, [r2, #64]	; 0x40
 80022f8:	4b29      	ldr	r3, [pc, #164]	; (80023a0 <_Z18SystemClock_Configv+0xdc>)
 80022fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002300:	60bb      	str	r3, [r7, #8]
 8002302:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002304:	2300      	movs	r3, #0
 8002306:	607b      	str	r3, [r7, #4]
 8002308:	4b26      	ldr	r3, [pc, #152]	; (80023a4 <_Z18SystemClock_Configv+0xe0>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a25      	ldr	r2, [pc, #148]	; (80023a4 <_Z18SystemClock_Configv+0xe0>)
 800230e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002312:	6013      	str	r3, [r2, #0]
 8002314:	4b23      	ldr	r3, [pc, #140]	; (80023a4 <_Z18SystemClock_Configv+0xe0>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800231c:	607b      	str	r3, [r7, #4]
 800231e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002320:	2302      	movs	r3, #2
 8002322:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002324:	2301      	movs	r3, #1
 8002326:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002328:	2310      	movs	r3, #16
 800232a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800232c:	2302      	movs	r3, #2
 800232e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002330:	2300      	movs	r3, #0
 8002332:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002334:	2308      	movs	r3, #8
 8002336:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002338:	2364      	movs	r3, #100	; 0x64
 800233a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800233c:	2302      	movs	r3, #2
 800233e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002340:	2304      	movs	r3, #4
 8002342:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002344:	f107 0320 	add.w	r3, r7, #32
 8002348:	4618      	mov	r0, r3
 800234a:	f017 ff83 	bl	801a254 <HAL_RCC_OscConfig>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	bf14      	ite	ne
 8002354:	2301      	movne	r3, #1
 8002356:	2300      	moveq	r3, #0
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 800235e:	f001 ff71 	bl	8004244 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002362:	230f      	movs	r3, #15
 8002364:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002366:	2302      	movs	r3, #2
 8002368:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800236a:	2300      	movs	r3, #0
 800236c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800236e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002372:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002374:	2300      	movs	r3, #0
 8002376:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002378:	f107 030c 	add.w	r3, r7, #12
 800237c:	2103      	movs	r1, #3
 800237e:	4618      	mov	r0, r3
 8002380:	f018 f9e0 	bl	801a744 <HAL_RCC_ClockConfig>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	bf14      	ite	ne
 800238a:	2301      	movne	r3, #1
 800238c:	2300      	moveq	r3, #0
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8002394:	f001 ff56 	bl	8004244 <Error_Handler>
  }
}
 8002398:	bf00      	nop
 800239a:	3750      	adds	r7, #80	; 0x50
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40023800 	.word	0x40023800
 80023a4:	40007000 	.word	0x40007000

080023a8 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023ac:	4b15      	ldr	r3, [pc, #84]	; (8002404 <_ZL12MX_I2C1_Initv+0x5c>)
 80023ae:	4a16      	ldr	r2, [pc, #88]	; (8002408 <_ZL12MX_I2C1_Initv+0x60>)
 80023b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80023b2:	4b14      	ldr	r3, [pc, #80]	; (8002404 <_ZL12MX_I2C1_Initv+0x5c>)
 80023b4:	4a15      	ldr	r2, [pc, #84]	; (800240c <_ZL12MX_I2C1_Initv+0x64>)
 80023b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023b8:	4b12      	ldr	r3, [pc, #72]	; (8002404 <_ZL12MX_I2C1_Initv+0x5c>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80023be:	4b11      	ldr	r3, [pc, #68]	; (8002404 <_ZL12MX_I2C1_Initv+0x5c>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023c4:	4b0f      	ldr	r3, [pc, #60]	; (8002404 <_ZL12MX_I2C1_Initv+0x5c>)
 80023c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023cc:	4b0d      	ldr	r3, [pc, #52]	; (8002404 <_ZL12MX_I2C1_Initv+0x5c>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80023d2:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <_ZL12MX_I2C1_Initv+0x5c>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023d8:	4b0a      	ldr	r3, [pc, #40]	; (8002404 <_ZL12MX_I2C1_Initv+0x5c>)
 80023da:	2200      	movs	r2, #0
 80023dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023de:	4b09      	ldr	r3, [pc, #36]	; (8002404 <_ZL12MX_I2C1_Initv+0x5c>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80023e4:	4807      	ldr	r0, [pc, #28]	; (8002404 <_ZL12MX_I2C1_Initv+0x5c>)
 80023e6:	f015 f8d7 	bl	8017598 <HAL_I2C_Init>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	bf14      	ite	ne
 80023f0:	2301      	movne	r3, #1
 80023f2:	2300      	moveq	r3, #0
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80023fa:	f001 ff23 	bl	8004244 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	20000274 	.word	0x20000274
 8002408:	40005400 	.word	0x40005400
 800240c:	00061a80 	.word	0x00061a80

08002410 <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002414:	4b15      	ldr	r3, [pc, #84]	; (800246c <_ZL12MX_I2C3_Initv+0x5c>)
 8002416:	4a16      	ldr	r2, [pc, #88]	; (8002470 <_ZL12MX_I2C3_Initv+0x60>)
 8002418:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800241a:	4b14      	ldr	r3, [pc, #80]	; (800246c <_ZL12MX_I2C3_Initv+0x5c>)
 800241c:	4a15      	ldr	r2, [pc, #84]	; (8002474 <_ZL12MX_I2C3_Initv+0x64>)
 800241e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002420:	4b12      	ldr	r3, [pc, #72]	; (800246c <_ZL12MX_I2C3_Initv+0x5c>)
 8002422:	2200      	movs	r2, #0
 8002424:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002426:	4b11      	ldr	r3, [pc, #68]	; (800246c <_ZL12MX_I2C3_Initv+0x5c>)
 8002428:	2200      	movs	r2, #0
 800242a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800242c:	4b0f      	ldr	r3, [pc, #60]	; (800246c <_ZL12MX_I2C3_Initv+0x5c>)
 800242e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002432:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002434:	4b0d      	ldr	r3, [pc, #52]	; (800246c <_ZL12MX_I2C3_Initv+0x5c>)
 8002436:	2200      	movs	r2, #0
 8002438:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800243a:	4b0c      	ldr	r3, [pc, #48]	; (800246c <_ZL12MX_I2C3_Initv+0x5c>)
 800243c:	2200      	movs	r2, #0
 800243e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002440:	4b0a      	ldr	r3, [pc, #40]	; (800246c <_ZL12MX_I2C3_Initv+0x5c>)
 8002442:	2200      	movs	r2, #0
 8002444:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002446:	4b09      	ldr	r3, [pc, #36]	; (800246c <_ZL12MX_I2C3_Initv+0x5c>)
 8002448:	2200      	movs	r2, #0
 800244a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800244c:	4807      	ldr	r0, [pc, #28]	; (800246c <_ZL12MX_I2C3_Initv+0x5c>)
 800244e:	f015 f8a3 	bl	8017598 <HAL_I2C_Init>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	bf14      	ite	ne
 8002458:	2301      	movne	r3, #1
 800245a:	2300      	moveq	r3, #0
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <_ZL12MX_I2C3_Initv+0x56>
  {
    Error_Handler();
 8002462:	f001 feef 	bl	8004244 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	200002c8 	.word	0x200002c8
 8002470:	40005c00 	.word	0x40005c00
 8002474:	00061a80 	.word	0x00061a80

08002478 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b08e      	sub	sp, #56	; 0x38
 800247c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800247e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002482:	2200      	movs	r2, #0
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	605a      	str	r2, [r3, #4]
 8002488:	609a      	str	r2, [r3, #8]
 800248a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800248c:	f107 0320 	add.w	r3, r7, #32
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002496:	1d3b      	adds	r3, r7, #4
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	605a      	str	r2, [r3, #4]
 800249e:	609a      	str	r2, [r3, #8]
 80024a0:	60da      	str	r2, [r3, #12]
 80024a2:	611a      	str	r2, [r3, #16]
 80024a4:	615a      	str	r2, [r3, #20]
 80024a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80024a8:	4b39      	ldr	r3, [pc, #228]	; (8002590 <_ZL12MX_TIM4_Initv+0x118>)
 80024aa:	4a3a      	ldr	r2, [pc, #232]	; (8002594 <_ZL12MX_TIM4_Initv+0x11c>)
 80024ac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80024ae:	4b38      	ldr	r3, [pc, #224]	; (8002590 <_ZL12MX_TIM4_Initv+0x118>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b4:	4b36      	ldr	r3, [pc, #216]	; (8002590 <_ZL12MX_TIM4_Initv+0x118>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80024ba:	4b35      	ldr	r3, [pc, #212]	; (8002590 <_ZL12MX_TIM4_Initv+0x118>)
 80024bc:	f242 720f 	movw	r2, #9999	; 0x270f
 80024c0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024c2:	4b33      	ldr	r3, [pc, #204]	; (8002590 <_ZL12MX_TIM4_Initv+0x118>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024c8:	4b31      	ldr	r3, [pc, #196]	; (8002590 <_ZL12MX_TIM4_Initv+0x118>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80024ce:	4830      	ldr	r0, [pc, #192]	; (8002590 <_ZL12MX_TIM4_Initv+0x118>)
 80024d0:	f018 fb58 	bl	801ab84 <HAL_TIM_Base_Init>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	bf14      	ite	ne
 80024da:	2301      	movne	r3, #1
 80024dc:	2300      	moveq	r3, #0
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <_ZL12MX_TIM4_Initv+0x70>
  {
    Error_Handler();
 80024e4:	f001 feae 	bl	8004244 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024ec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80024ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024f2:	4619      	mov	r1, r3
 80024f4:	4826      	ldr	r0, [pc, #152]	; (8002590 <_ZL12MX_TIM4_Initv+0x118>)
 80024f6:	f018 ff25 	bl	801b344 <HAL_TIM_ConfigClockSource>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	bf14      	ite	ne
 8002500:	2301      	movne	r3, #1
 8002502:	2300      	moveq	r3, #0
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <_ZL12MX_TIM4_Initv+0x96>
  {
    Error_Handler();
 800250a:	f001 fe9b 	bl	8004244 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800250e:	4820      	ldr	r0, [pc, #128]	; (8002590 <_ZL12MX_TIM4_Initv+0x118>)
 8002510:	f018 fc44 	bl	801ad9c <HAL_TIM_PWM_Init>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	bf14      	ite	ne
 800251a:	2301      	movne	r3, #1
 800251c:	2300      	moveq	r3, #0
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <_ZL12MX_TIM4_Initv+0xb0>
  {
    Error_Handler();
 8002524:	f001 fe8e 	bl	8004244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002528:	2300      	movs	r3, #0
 800252a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800252c:	2300      	movs	r3, #0
 800252e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002530:	f107 0320 	add.w	r3, r7, #32
 8002534:	4619      	mov	r1, r3
 8002536:	4816      	ldr	r0, [pc, #88]	; (8002590 <_ZL12MX_TIM4_Initv+0x118>)
 8002538:	f019 fac0 	bl	801babc <HAL_TIMEx_MasterConfigSynchronization>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	bf14      	ite	ne
 8002542:	2301      	movne	r3, #1
 8002544:	2300      	moveq	r3, #0
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <_ZL12MX_TIM4_Initv+0xd8>
  {
    Error_Handler();
 800254c:	f001 fe7a 	bl	8004244 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002550:	2360      	movs	r3, #96	; 0x60
 8002552:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002554:	2300      	movs	r3, #0
 8002556:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002558:	2300      	movs	r3, #0
 800255a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002560:	1d3b      	adds	r3, r7, #4
 8002562:	2200      	movs	r2, #0
 8002564:	4619      	mov	r1, r3
 8002566:	480a      	ldr	r0, [pc, #40]	; (8002590 <_ZL12MX_TIM4_Initv+0x118>)
 8002568:	f018 fe2a 	bl	801b1c0 <HAL_TIM_PWM_ConfigChannel>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	bf14      	ite	ne
 8002572:	2301      	movne	r3, #1
 8002574:	2300      	moveq	r3, #0
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <_ZL12MX_TIM4_Initv+0x108>
  {
    Error_Handler();
 800257c:	f001 fe62 	bl	8004244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002580:	4803      	ldr	r0, [pc, #12]	; (8002590 <_ZL12MX_TIM4_Initv+0x118>)
 8002582:	f013 fdf7 	bl	8016174 <HAL_TIM_MspPostInit>

}
 8002586:	bf00      	nop
 8002588:	3738      	adds	r7, #56	; 0x38
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	2000031c 	.word	0x2000031c
 8002594:	40000800 	.word	0x40000800

08002598 <_ZL13MX_TIM10_Initv>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800259c:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <_ZL13MX_TIM10_Initv+0x48>)
 800259e:	4a11      	ldr	r2, [pc, #68]	; (80025e4 <_ZL13MX_TIM10_Initv+0x4c>)
 80025a0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 99;
 80025a2:	4b0f      	ldr	r3, [pc, #60]	; (80025e0 <_ZL13MX_TIM10_Initv+0x48>)
 80025a4:	2263      	movs	r2, #99	; 0x63
 80025a6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025a8:	4b0d      	ldr	r3, [pc, #52]	; (80025e0 <_ZL13MX_TIM10_Initv+0x48>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 80025ae:	4b0c      	ldr	r3, [pc, #48]	; (80025e0 <_ZL13MX_TIM10_Initv+0x48>)
 80025b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025b4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025b6:	4b0a      	ldr	r3, [pc, #40]	; (80025e0 <_ZL13MX_TIM10_Initv+0x48>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025bc:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <_ZL13MX_TIM10_Initv+0x48>)
 80025be:	2200      	movs	r2, #0
 80025c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80025c2:	4807      	ldr	r0, [pc, #28]	; (80025e0 <_ZL13MX_TIM10_Initv+0x48>)
 80025c4:	f018 fade 	bl	801ab84 <HAL_TIM_Base_Init>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	bf14      	ite	ne
 80025ce:	2301      	movne	r3, #1
 80025d0:	2300      	moveq	r3, #0
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <_ZL13MX_TIM10_Initv+0x44>
  {
    Error_Handler();
 80025d8:	f001 fe34 	bl	8004244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80025dc:	bf00      	nop
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	20000364 	.word	0x20000364
 80025e4:	40014400 	.word	0x40014400

080025e8 <_ZL13MX_TIM11_Initv>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80025ec:	4b10      	ldr	r3, [pc, #64]	; (8002630 <_ZL13MX_TIM11_Initv+0x48>)
 80025ee:	4a11      	ldr	r2, [pc, #68]	; (8002634 <_ZL13MX_TIM11_Initv+0x4c>)
 80025f0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 80025f2:	4b0f      	ldr	r3, [pc, #60]	; (8002630 <_ZL13MX_TIM11_Initv+0x48>)
 80025f4:	2263      	movs	r2, #99	; 0x63
 80025f6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025f8:	4b0d      	ldr	r3, [pc, #52]	; (8002630 <_ZL13MX_TIM11_Initv+0x48>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80025fe:	4b0c      	ldr	r3, [pc, #48]	; (8002630 <_ZL13MX_TIM11_Initv+0x48>)
 8002600:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002604:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002606:	4b0a      	ldr	r3, [pc, #40]	; (8002630 <_ZL13MX_TIM11_Initv+0x48>)
 8002608:	2200      	movs	r2, #0
 800260a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800260c:	4b08      	ldr	r3, [pc, #32]	; (8002630 <_ZL13MX_TIM11_Initv+0x48>)
 800260e:	2200      	movs	r2, #0
 8002610:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002612:	4807      	ldr	r0, [pc, #28]	; (8002630 <_ZL13MX_TIM11_Initv+0x48>)
 8002614:	f018 fab6 	bl	801ab84 <HAL_TIM_Base_Init>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	bf14      	ite	ne
 800261e:	2301      	movne	r3, #1
 8002620:	2300      	moveq	r3, #0
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <_ZL13MX_TIM11_Initv+0x44>
  {
    Error_Handler();
 8002628:	f001 fe0c 	bl	8004244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800262c:	bf00      	nop
 800262e:	bd80      	pop	{r7, pc}
 8002630:	200003ac 	.word	0x200003ac
 8002634:	40014800 	.word	0x40014800

08002638 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800263c:	4b14      	ldr	r3, [pc, #80]	; (8002690 <_ZL19MX_USART2_UART_Initv+0x58>)
 800263e:	4a15      	ldr	r2, [pc, #84]	; (8002694 <_ZL19MX_USART2_UART_Initv+0x5c>)
 8002640:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 8002642:	4b13      	ldr	r3, [pc, #76]	; (8002690 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002644:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8002648:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800264a:	4b11      	ldr	r3, [pc, #68]	; (8002690 <_ZL19MX_USART2_UART_Initv+0x58>)
 800264c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002650:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002652:	4b0f      	ldr	r3, [pc, #60]	; (8002690 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002654:	2200      	movs	r2, #0
 8002656:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002658:	4b0d      	ldr	r3, [pc, #52]	; (8002690 <_ZL19MX_USART2_UART_Initv+0x58>)
 800265a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800265e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002660:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002662:	220c      	movs	r2, #12
 8002664:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002666:	4b0a      	ldr	r3, [pc, #40]	; (8002690 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002668:	2200      	movs	r2, #0
 800266a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800266c:	4b08      	ldr	r3, [pc, #32]	; (8002690 <_ZL19MX_USART2_UART_Initv+0x58>)
 800266e:	2200      	movs	r2, #0
 8002670:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002672:	4807      	ldr	r0, [pc, #28]	; (8002690 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002674:	f019 faa4 	bl	801bbc0 <HAL_UART_Init>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	bf14      	ite	ne
 800267e:	2301      	movne	r3, #1
 8002680:	2300      	moveq	r3, #0
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <_ZL19MX_USART2_UART_Initv+0x54>
  {
    Error_Handler();
 8002688:	f001 fddc 	bl	8004244 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800268c:	bf00      	nop
 800268e:	bd80      	pop	{r7, pc}
 8002690:	200003f4 	.word	0x200003f4
 8002694:	40004400 	.word	0x40004400

08002698 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	607b      	str	r3, [r7, #4]
 80026a2:	4b10      	ldr	r3, [pc, #64]	; (80026e4 <_ZL11MX_DMA_Initv+0x4c>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	4a0f      	ldr	r2, [pc, #60]	; (80026e4 <_ZL11MX_DMA_Initv+0x4c>)
 80026a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80026ac:	6313      	str	r3, [r2, #48]	; 0x30
 80026ae:	4b0d      	ldr	r3, [pc, #52]	; (80026e4 <_ZL11MX_DMA_Initv+0x4c>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026b6:	607b      	str	r3, [r7, #4]
 80026b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80026ba:	2200      	movs	r2, #0
 80026bc:	2100      	movs	r1, #0
 80026be:	2011      	movs	r0, #17
 80026c0:	f014 f955 	bl	801696e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80026c4:	2011      	movs	r0, #17
 80026c6:	f014 f96e 	bl	80169a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80026ca:	2200      	movs	r2, #0
 80026cc:	2100      	movs	r1, #0
 80026ce:	202f      	movs	r0, #47	; 0x2f
 80026d0:	f014 f94d 	bl	801696e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80026d4:	202f      	movs	r0, #47	; 0x2f
 80026d6:	f014 f966 	bl	80169a6 <HAL_NVIC_EnableIRQ>

}
 80026da:	bf00      	nop
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40023800 	.word	0x40023800

080026e8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b08a      	sub	sp, #40	; 0x28
 80026ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ee:	f107 0314 	add.w	r3, r7, #20
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	605a      	str	r2, [r3, #4]
 80026f8:	609a      	str	r2, [r3, #8]
 80026fa:	60da      	str	r2, [r3, #12]
 80026fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	613b      	str	r3, [r7, #16]
 8002702:	4b69      	ldr	r3, [pc, #420]	; (80028a8 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	4a68      	ldr	r2, [pc, #416]	; (80028a8 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002708:	f043 0304 	orr.w	r3, r3, #4
 800270c:	6313      	str	r3, [r2, #48]	; 0x30
 800270e:	4b66      	ldr	r3, [pc, #408]	; (80028a8 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	f003 0304 	and.w	r3, r3, #4
 8002716:	613b      	str	r3, [r7, #16]
 8002718:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800271a:	2300      	movs	r3, #0
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	4b62      	ldr	r3, [pc, #392]	; (80028a8 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	4a61      	ldr	r2, [pc, #388]	; (80028a8 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002728:	6313      	str	r3, [r2, #48]	; 0x30
 800272a:	4b5f      	ldr	r3, [pc, #380]	; (80028a8 <_ZL12MX_GPIO_Initv+0x1c0>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	60bb      	str	r3, [r7, #8]
 800273a:	4b5b      	ldr	r3, [pc, #364]	; (80028a8 <_ZL12MX_GPIO_Initv+0x1c0>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	4a5a      	ldr	r2, [pc, #360]	; (80028a8 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002740:	f043 0301 	orr.w	r3, r3, #1
 8002744:	6313      	str	r3, [r2, #48]	; 0x30
 8002746:	4b58      	ldr	r3, [pc, #352]	; (80028a8 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	60bb      	str	r3, [r7, #8]
 8002750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	607b      	str	r3, [r7, #4]
 8002756:	4b54      	ldr	r3, [pc, #336]	; (80028a8 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	4a53      	ldr	r2, [pc, #332]	; (80028a8 <_ZL12MX_GPIO_Initv+0x1c0>)
 800275c:	f043 0302 	orr.w	r3, r3, #2
 8002760:	6313      	str	r3, [r2, #48]	; 0x30
 8002762:	4b51      	ldr	r3, [pc, #324]	; (80028a8 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	607b      	str	r3, [r7, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	603b      	str	r3, [r7, #0]
 8002772:	4b4d      	ldr	r3, [pc, #308]	; (80028a8 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	4a4c      	ldr	r2, [pc, #304]	; (80028a8 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002778:	f043 0308 	orr.w	r3, r3, #8
 800277c:	6313      	str	r3, [r2, #48]	; 0x30
 800277e:	4b4a      	ldr	r3, [pc, #296]	; (80028a8 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	f003 0308 	and.w	r3, r3, #8
 8002786:	603b      	str	r3, [r7, #0]
 8002788:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800278a:	2200      	movs	r2, #0
 800278c:	2120      	movs	r1, #32
 800278e:	4847      	ldr	r0, [pc, #284]	; (80028ac <_ZL12MX_GPIO_Initv+0x1c4>)
 8002790:	f014 fed0 	bl	8017534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Mot_dir_Pin|PLamp_Green_Pin|PLamp_Blue_Pin|PLamp_Yellow_Pin, GPIO_PIN_RESET);
 8002794:	2200      	movs	r2, #0
 8002796:	f24e 0104 	movw	r1, #57348	; 0xe004
 800279a:	4845      	ldr	r0, [pc, #276]	; (80028b0 <_ZL12MX_GPIO_Initv+0x1c8>)
 800279c:	f014 feca 	bl	8017534 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin EXTI11_EMER_Pin */
  GPIO_InitStruct.Pin = B1_Pin|EXTI11_EMER_Pin;
 80027a0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80027a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80027a6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80027aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027b0:	f107 0314 	add.w	r3, r7, #20
 80027b4:	4619      	mov	r1, r3
 80027b6:	483f      	ldr	r0, [pc, #252]	; (80028b4 <_ZL12MX_GPIO_Initv+0x1cc>)
 80027b8:	f014 fd20 	bl	80171fc <HAL_GPIO_Init>

  /*Configure GPIO pin : TIM2_CH1_VINCp_Pin */
  GPIO_InitStruct.Pin = TIM2_CH1_VINCp_Pin;
 80027bc:	2301      	movs	r3, #1
 80027be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c0:	2302      	movs	r3, #2
 80027c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c4:	2300      	movs	r3, #0
 80027c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c8:	2300      	movs	r3, #0
 80027ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027cc:	2301      	movs	r3, #1
 80027ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TIM2_CH1_VINCp_GPIO_Port, &GPIO_InitStruct);
 80027d0:	f107 0314 	add.w	r3, r7, #20
 80027d4:	4619      	mov	r1, r3
 80027d6:	4835      	ldr	r0, [pc, #212]	; (80028ac <_ZL12MX_GPIO_Initv+0x1c4>)
 80027d8:	f014 fd10 	bl	80171fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80027dc:	2320      	movs	r3, #32
 80027de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027e0:	2301      	movs	r3, #1
 80027e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e4:	2300      	movs	r3, #0
 80027e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e8:	2300      	movs	r3, #0
 80027ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80027ec:	f107 0314 	add.w	r3, r7, #20
 80027f0:	4619      	mov	r1, r3
 80027f2:	482e      	ldr	r0, [pc, #184]	; (80028ac <_ZL12MX_GPIO_Initv+0x1c4>)
 80027f4:	f014 fd02 	bl	80171fc <HAL_GPIO_Init>

  /*Configure GPIO pin : Pwr_Sense_Pin */
  GPIO_InitStruct.Pin = Pwr_Sense_Pin;
 80027f8:	2302      	movs	r3, #2
 80027fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027fc:	2300      	movs	r3, #0
 80027fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002800:	2300      	movs	r3, #0
 8002802:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pwr_Sense_GPIO_Port, &GPIO_InitStruct);
 8002804:	f107 0314 	add.w	r3, r7, #20
 8002808:	4619      	mov	r1, r3
 800280a:	4829      	ldr	r0, [pc, #164]	; (80028b0 <_ZL12MX_GPIO_Initv+0x1c8>)
 800280c:	f014 fcf6 	bl	80171fc <HAL_GPIO_Init>

  /*Configure GPIO pins : Mot_dir_Pin PLamp_Green_Pin PLamp_Blue_Pin PLamp_Yellow_Pin */
  GPIO_InitStruct.Pin = Mot_dir_Pin|PLamp_Green_Pin|PLamp_Blue_Pin|PLamp_Yellow_Pin;
 8002810:	f24e 0304 	movw	r3, #57348	; 0xe004
 8002814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002816:	2301      	movs	r3, #1
 8002818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281a:	2300      	movs	r3, #0
 800281c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281e:	2300      	movs	r3, #0
 8002820:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002822:	f107 0314 	add.w	r3, r7, #20
 8002826:	4619      	mov	r1, r3
 8002828:	4821      	ldr	r0, [pc, #132]	; (80028b0 <_ZL12MX_GPIO_Initv+0x1c8>)
 800282a:	f014 fce7 	bl	80171fc <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI10_Stop_Pin */
  GPIO_InitStruct.Pin = EXTI10_Stop_Pin;
 800282e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002832:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002834:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002838:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283a:	2300      	movs	r3, #0
 800283c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EXTI10_Stop_GPIO_Port, &GPIO_InitStruct);
 800283e:	f107 0314 	add.w	r3, r7, #20
 8002842:	4619      	mov	r1, r3
 8002844:	481b      	ldr	r0, [pc, #108]	; (80028b4 <_ZL12MX_GPIO_Initv+0x1cc>)
 8002846:	f014 fcd9 	bl	80171fc <HAL_GPIO_Init>

  /*Configure GPIO pin : Stop_Sense_Pin */
  GPIO_InitStruct.Pin = Stop_Sense_Pin;
 800284a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800284e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002850:	2300      	movs	r3, #0
 8002852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002854:	2300      	movs	r3, #0
 8002856:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Stop_Sense_GPIO_Port, &GPIO_InitStruct);
 8002858:	f107 0314 	add.w	r3, r7, #20
 800285c:	4619      	mov	r1, r3
 800285e:	4815      	ldr	r0, [pc, #84]	; (80028b4 <_ZL12MX_GPIO_Initv+0x1cc>)
 8002860:	f014 fccc 	bl	80171fc <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI2_SetZero_Pin */
  GPIO_InitStruct.Pin = EXTI2_SetZero_Pin;
 8002864:	2304      	movs	r3, #4
 8002866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002868:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800286c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286e:	2300      	movs	r3, #0
 8002870:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EXTI2_SetZero_GPIO_Port, &GPIO_InitStruct);
 8002872:	f107 0314 	add.w	r3, r7, #20
 8002876:	4619      	mov	r1, r3
 8002878:	480f      	ldr	r0, [pc, #60]	; (80028b8 <_ZL12MX_GPIO_Initv+0x1d0>)
 800287a:	f014 fcbf 	bl	80171fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800287e:	2200      	movs	r2, #0
 8002880:	2100      	movs	r1, #0
 8002882:	2008      	movs	r0, #8
 8002884:	f014 f873 	bl	801696e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002888:	2008      	movs	r0, #8
 800288a:	f014 f88c 	bl	80169a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800288e:	2200      	movs	r2, #0
 8002890:	2100      	movs	r1, #0
 8002892:	2028      	movs	r0, #40	; 0x28
 8002894:	f014 f86b 	bl	801696e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002898:	2028      	movs	r0, #40	; 0x28
 800289a:	f014 f884 	bl	80169a6 <HAL_NVIC_EnableIRQ>

}
 800289e:	bf00      	nop
 80028a0:	3728      	adds	r7, #40	; 0x28
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40023800 	.word	0x40023800
 80028ac:	40020000 	.word	0x40020000
 80028b0:	40020400 	.word	0x40020400
 80028b4:	40020800 	.word	0x40020800
 80028b8:	40020c00 	.word	0x40020c00
 80028bc:	00000000 	.word	0x00000000

080028c0 <_Z13GrandStatumixv>:

/* USER CODE BEGIN 4 */
////////// [Grand State] //////////////////////// [Grand State] ////////////////////////
//======== [Grand State] ======================== [Grand State] ========================

void GrandStatumix(){
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
	if (grandState != Ready){
 80028c4:	4ba0      	ldr	r3, [pc, #640]	; (8002b48 <_Z13GrandStatumixv+0x288>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d005      	beq.n	80028d8 <_Z13GrandStatumixv+0x18>
		HAL_GPIO_WritePin(PLamp_Green_GPIO_Port, PLamp_Green_Pin, GPIO_PIN_RESET);
 80028cc:	2200      	movs	r2, #0
 80028ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028d2:	489e      	ldr	r0, [pc, #632]	; (8002b4c <_Z13GrandStatumixv+0x28c>)
 80028d4:	f014 fe2e 	bl	8017534 <HAL_GPIO_WritePin>
	}
	if (grandState != work || grandState != SetZeroBf || grandState != SetZeroGr){
 80028d8:	4b9b      	ldr	r3, [pc, #620]	; (8002b48 <_Z13GrandStatumixv+0x288>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d107      	bne.n	80028f0 <_Z13GrandStatumixv+0x30>
 80028e0:	4b99      	ldr	r3, [pc, #612]	; (8002b48 <_Z13GrandStatumixv+0x288>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b06      	cmp	r3, #6
 80028e6:	d103      	bne.n	80028f0 <_Z13GrandStatumixv+0x30>
 80028e8:	4b97      	ldr	r3, [pc, #604]	; (8002b48 <_Z13GrandStatumixv+0x288>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b05      	cmp	r3, #5
 80028ee:	d005      	beq.n	80028fc <_Z13GrandStatumixv+0x3c>
			HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_RESET);
 80028f0:	2200      	movs	r2, #0
 80028f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028f6:	4895      	ldr	r0, [pc, #596]	; (8002b4c <_Z13GrandStatumixv+0x28c>)
 80028f8:	f014 fe1c 	bl	8017534 <HAL_GPIO_WritePin>
		}
	if (grandState != stop || grandState != stopnd){
 80028fc:	4b92      	ldr	r3, [pc, #584]	; (8002b48 <_Z13GrandStatumixv+0x288>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b02      	cmp	r3, #2
 8002902:	d103      	bne.n	800290c <_Z13GrandStatumixv+0x4c>
 8002904:	4b90      	ldr	r3, [pc, #576]	; (8002b48 <_Z13GrandStatumixv+0x288>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2b04      	cmp	r3, #4
 800290a:	d005      	beq.n	8002918 <_Z13GrandStatumixv+0x58>
				HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_RESET);
 800290c:	2200      	movs	r2, #0
 800290e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002912:	488e      	ldr	r0, [pc, #568]	; (8002b4c <_Z13GrandStatumixv+0x28c>)
 8002914:	f014 fe0e 	bl	8017534 <HAL_GPIO_WritePin>
			}

	stop_sense = HAL_GPIO_ReadPin(Stop_Sense_GPIO_Port, Stop_Sense_Pin);
 8002918:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800291c:	488c      	ldr	r0, [pc, #560]	; (8002b50 <_Z13GrandStatumixv+0x290>)
 800291e:	f014 fdf1 	bl	8017504 <HAL_GPIO_ReadPin>
 8002922:	4603      	mov	r3, r0
 8002924:	461a      	mov	r2, r3
 8002926:	4b8b      	ldr	r3, [pc, #556]	; (8002b54 <_Z13GrandStatumixv+0x294>)
 8002928:	701a      	strb	r2, [r3, #0]
	pwr_sense = HAL_GPIO_ReadPin(Pwr_Sense_GPIO_Port, Pwr_Sense_Pin);
 800292a:	2102      	movs	r1, #2
 800292c:	4887      	ldr	r0, [pc, #540]	; (8002b4c <_Z13GrandStatumixv+0x28c>)
 800292e:	f014 fde9 	bl	8017504 <HAL_GPIO_ReadPin>
 8002932:	4603      	mov	r3, r0
 8002934:	461a      	mov	r2, r3
 8002936:	4b88      	ldr	r3, [pc, #544]	; (8002b58 <_Z13GrandStatumixv+0x298>)
 8002938:	701a      	strb	r2, [r3, #0]

	switch(grandState){
 800293a:	4b83      	ldr	r3, [pc, #524]	; (8002b48 <_Z13GrandStatumixv+0x288>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	3b01      	subs	r3, #1
 8002940:	2b05      	cmp	r3, #5
 8002942:	d80f      	bhi.n	8002964 <_Z13GrandStatumixv+0xa4>
 8002944:	a201      	add	r2, pc, #4	; (adr r2, 800294c <_Z13GrandStatumixv+0x8c>)
 8002946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800294a:	bf00      	nop
 800294c:	08002999 	.word	0x08002999
 8002950:	08002c05 	.word	0x08002c05
 8002954:	08002c9b 	.word	0x08002c9b
 8002958:	08002c55 	.word	0x08002c55
 800295c:	08002b75 	.word	0x08002b75
 8002960:	080029df 	.word	0x080029df
	default:
	case Ready:
		HAL_GPIO_WritePin(PLamp_Green_GPIO_Port, PLamp_Green_Pin, GPIO_PIN_SET);
 8002964:	2201      	movs	r2, #1
 8002966:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800296a:	4878      	ldr	r0, [pc, #480]	; (8002b4c <_Z13GrandStatumixv+0x28c>)
 800296c:	f014 fde2 	bl	8017534 <HAL_GPIO_WritePin>
		//PWMOut = 1200;
		Unwrapping();
 8002970:	f000 fe7a 	bl	8003668 <_Z10Unwrappingv>
		Kalmanfilter();
 8002974:	f000 ff30 	bl	80037d8 <_Z12Kalmanfilterv>
		//diffvelo();

		if (pwr_sense == 1){grandState = emer;}
 8002978:	4b77      	ldr	r3, [pc, #476]	; (8002b58 <_Z13GrandStatumixv+0x298>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d102      	bne.n	8002986 <_Z13GrandStatumixv+0xc6>
 8002980:	4b71      	ldr	r3, [pc, #452]	; (8002b48 <_Z13GrandStatumixv+0x288>)
 8002982:	2203      	movs	r2, #3
 8002984:	701a      	strb	r2, [r3, #0]
		if (stop_sense == 0){grandState = stop;}
 8002986:	4b73      	ldr	r3, [pc, #460]	; (8002b54 <_Z13GrandStatumixv+0x294>)
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	f040 8194 	bne.w	8002cb8 <_Z13GrandStatumixv+0x3f8>
 8002990:	4b6d      	ldr	r3, [pc, #436]	; (8002b48 <_Z13GrandStatumixv+0x288>)
 8002992:	2202      	movs	r2, #2
 8002994:	701a      	strb	r2, [r3, #0]
		/// [From UART] run when get {HOME} , {RUN}
		//if (bluecounter != 0){grandState = work;} // can go work from ready only
	break;
 8002996:	e18f      	b.n	8002cb8 <_Z13GrandStatumixv+0x3f8>

	case work:
		HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_SET);
 8002998:	2201      	movs	r2, #1
 800299a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800299e:	486b      	ldr	r0, [pc, #428]	; (8002b4c <_Z13GrandStatumixv+0x28c>)
 80029a0:	f014 fdc8 	bl	8017534 <HAL_GPIO_WritePin>
		LaserTrajex_workflow();
 80029a4:	f000 f9b4 	bl	8002d10 <_Z20LaserTrajex_workflowv>

		if (pwr_sense == 1){
 80029a8:	4b6b      	ldr	r3, [pc, #428]	; (8002b58 <_Z13GrandStatumixv+0x298>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d106      	bne.n	80029be <_Z13GrandStatumixv+0xfe>
			grandState = emer;
 80029b0:	4b65      	ldr	r3, [pc, #404]	; (8002b48 <_Z13GrandStatumixv+0x288>)
 80029b2:	2203      	movs	r2, #3
 80029b4:	701a      	strb	r2, [r3, #0]
			u_contr = 0;
 80029b6:	4b69      	ldr	r3, [pc, #420]	; (8002b5c <_Z13GrandStatumixv+0x29c>)
 80029b8:	f04f 0200 	mov.w	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]
		}
		if (stop_sense == 0){
 80029be:	4b65      	ldr	r3, [pc, #404]	; (8002b54 <_Z13GrandStatumixv+0x294>)
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f040 817a 	bne.w	8002cbc <_Z13GrandStatumixv+0x3fc>
			PWMOut = 0;
 80029c8:	4b65      	ldr	r3, [pc, #404]	; (8002b60 <_Z13GrandStatumixv+0x2a0>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	801a      	strh	r2, [r3, #0]
			grandState = stopnd;
 80029ce:	4b5e      	ldr	r3, [pc, #376]	; (8002b48 <_Z13GrandStatumixv+0x288>)
 80029d0:	2204      	movs	r2, #4
 80029d2:	701a      	strb	r2, [r3, #0]
			u_contr = 0;
 80029d4:	4b61      	ldr	r3, [pc, #388]	; (8002b5c <_Z13GrandStatumixv+0x29c>)
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
		}
	break;
 80029dc:	e16e      	b.n	8002cbc <_Z13GrandStatumixv+0x3fc>

	case SetZeroBf:
		static uint8_t counter_Z = 0;
		//// Cat cat set zero
		HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_SET);
 80029de:	2201      	movs	r2, #1
 80029e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029e4:	4859      	ldr	r0, [pc, #356]	; (8002b4c <_Z13GrandStatumixv+0x28c>)
 80029e6:	f014 fda5 	bl	8017534 <HAL_GPIO_WritePin>

		//PWMOut = 2500;
		//mot_dirctn = 0;
		Unwrapping();
 80029ea:	f000 fe3d 	bl	8003668 <_Z10Unwrappingv>
		Kalmanfilter();
 80029ee:	f000 fef3 	bl	80037d8 <_Z12Kalmanfilterv>

		if(KalP >= 2.00){
 80029f2:	4b5c      	ldr	r3, [pc, #368]	; (8002b64 <_Z13GrandStatumixv+0x2a4>)
 80029f4:	edd3 7a00 	vldr	s15, [r3]
 80029f8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80029fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a04:	db07      	blt.n	8002a16 <_Z13GrandStatumixv+0x156>
			PWMOut = 4800;
 8002a06:	4b56      	ldr	r3, [pc, #344]	; (8002b60 <_Z13GrandStatumixv+0x2a0>)
 8002a08:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8002a0c:	801a      	strh	r2, [r3, #0]
			mot_dirctn = 0;
 8002a0e:	4b56      	ldr	r3, [pc, #344]	; (8002b68 <_Z13GrandStatumixv+0x2a8>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	701a      	strb	r2, [r3, #0]
 8002a14:	e072      	b.n	8002afc <_Z13GrandStatumixv+0x23c>
		}else if (2.00 >= KalP && KalP >= 1.00) {
 8002a16:	4b53      	ldr	r3, [pc, #332]	; (8002b64 <_Z13GrandStatumixv+0x2a4>)
 8002a18:	edd3 7a00 	vldr	s15, [r3]
 8002a1c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002a20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a28:	d811      	bhi.n	8002a4e <_Z13GrandStatumixv+0x18e>
 8002a2a:	4b4e      	ldr	r3, [pc, #312]	; (8002b64 <_Z13GrandStatumixv+0x2a4>)
 8002a2c:	edd3 7a00 	vldr	s15, [r3]
 8002a30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a3c:	db07      	blt.n	8002a4e <_Z13GrandStatumixv+0x18e>
					PWMOut = 2400;
 8002a3e:	4b48      	ldr	r3, [pc, #288]	; (8002b60 <_Z13GrandStatumixv+0x2a0>)
 8002a40:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8002a44:	801a      	strh	r2, [r3, #0]
					mot_dirctn = 0;
 8002a46:	4b48      	ldr	r3, [pc, #288]	; (8002b68 <_Z13GrandStatumixv+0x2a8>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	701a      	strb	r2, [r3, #0]
 8002a4c:	e056      	b.n	8002afc <_Z13GrandStatumixv+0x23c>
		}else if (1.00 >= KalP && KalP >= 0.2) {
 8002a4e:	4b45      	ldr	r3, [pc, #276]	; (8002b64 <_Z13GrandStatumixv+0x2a4>)
 8002a50:	edd3 7a00 	vldr	s15, [r3]
 8002a54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a60:	d814      	bhi.n	8002a8c <_Z13GrandStatumixv+0x1cc>
 8002a62:	4b40      	ldr	r3, [pc, #256]	; (8002b64 <_Z13GrandStatumixv+0x2a4>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fd fd6e 	bl	8000548 <__aeabi_f2d>
 8002a6c:	a332      	add	r3, pc, #200	; (adr r3, 8002b38 <_Z13GrandStatumixv+0x278>)
 8002a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a72:	f7fe f847 	bl	8000b04 <__aeabi_dcmpge>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d007      	beq.n	8002a8c <_Z13GrandStatumixv+0x1cc>
			PWMOut = 1200;
 8002a7c:	4b38      	ldr	r3, [pc, #224]	; (8002b60 <_Z13GrandStatumixv+0x2a0>)
 8002a7e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002a82:	801a      	strh	r2, [r3, #0]
			mot_dirctn = 0;
 8002a84:	4b38      	ldr	r3, [pc, #224]	; (8002b68 <_Z13GrandStatumixv+0x2a8>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	701a      	strb	r2, [r3, #0]
 8002a8a:	e037      	b.n	8002afc <_Z13GrandStatumixv+0x23c>
		}else if (0.2 >= KalP && KalP >= 0.006) {
 8002a8c:	4b35      	ldr	r3, [pc, #212]	; (8002b64 <_Z13GrandStatumixv+0x2a4>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7fd fd59 	bl	8000548 <__aeabi_f2d>
 8002a96:	a328      	add	r3, pc, #160	; (adr r3, 8002b38 <_Z13GrandStatumixv+0x278>)
 8002a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9c:	f7fe f828 	bl	8000af0 <__aeabi_dcmple>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d014      	beq.n	8002ad0 <_Z13GrandStatumixv+0x210>
 8002aa6:	4b2f      	ldr	r3, [pc, #188]	; (8002b64 <_Z13GrandStatumixv+0x2a4>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7fd fd4c 	bl	8000548 <__aeabi_f2d>
 8002ab0:	a323      	add	r3, pc, #140	; (adr r3, 8002b40 <_Z13GrandStatumixv+0x280>)
 8002ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab6:	f7fe f825 	bl	8000b04 <__aeabi_dcmpge>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d007      	beq.n	8002ad0 <_Z13GrandStatumixv+0x210>
			PWMOut = 950;
 8002ac0:	4b27      	ldr	r3, [pc, #156]	; (8002b60 <_Z13GrandStatumixv+0x2a0>)
 8002ac2:	f240 32b6 	movw	r2, #950	; 0x3b6
 8002ac6:	801a      	strh	r2, [r3, #0]
			mot_dirctn = 0;
 8002ac8:	4b27      	ldr	r3, [pc, #156]	; (8002b68 <_Z13GrandStatumixv+0x2a8>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	701a      	strb	r2, [r3, #0]
 8002ace:	e015      	b.n	8002afc <_Z13GrandStatumixv+0x23c>
		}else if (1000 <= BinPosXI && BinPosXI <= 1023) {
 8002ad0:	4b26      	ldr	r3, [pc, #152]	; (8002b6c <_Z13GrandStatumixv+0x2ac>)
 8002ad2:	881b      	ldrh	r3, [r3, #0]
 8002ad4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ad8:	d30c      	bcc.n	8002af4 <_Z13GrandStatumixv+0x234>
 8002ada:	4b24      	ldr	r3, [pc, #144]	; (8002b6c <_Z13GrandStatumixv+0x2ac>)
 8002adc:	881b      	ldrh	r3, [r3, #0]
 8002ade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ae2:	d207      	bcs.n	8002af4 <_Z13GrandStatumixv+0x234>
				PWMOut = 950;
 8002ae4:	4b1e      	ldr	r3, [pc, #120]	; (8002b60 <_Z13GrandStatumixv+0x2a0>)
 8002ae6:	f240 32b6 	movw	r2, #950	; 0x3b6
 8002aea:	801a      	strh	r2, [r3, #0]
				mot_dirctn = 1;
 8002aec:	4b1e      	ldr	r3, [pc, #120]	; (8002b68 <_Z13GrandStatumixv+0x2a8>)
 8002aee:	2201      	movs	r2, #1
 8002af0:	701a      	strb	r2, [r3, #0]
 8002af2:	e003      	b.n	8002afc <_Z13GrandStatumixv+0x23c>
			}
		else{PWMOut = PWMOut;}
 8002af4:	4b1a      	ldr	r3, [pc, #104]	; (8002b60 <_Z13GrandStatumixv+0x2a0>)
 8002af6:	881a      	ldrh	r2, [r3, #0]
 8002af8:	4b19      	ldr	r3, [pc, #100]	; (8002b60 <_Z13GrandStatumixv+0x2a0>)
 8002afa:	801a      	strh	r2, [r3, #0]

		if(BinPosXI == 0){
 8002afc:	4b1b      	ldr	r3, [pc, #108]	; (8002b6c <_Z13GrandStatumixv+0x2ac>)
 8002afe:	881b      	ldrh	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d108      	bne.n	8002b16 <_Z13GrandStatumixv+0x256>
			PWMOut = 0;
 8002b04:	4b16      	ldr	r3, [pc, #88]	; (8002b60 <_Z13GrandStatumixv+0x2a0>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	801a      	strh	r2, [r3, #0]
			counter_Z++;
 8002b0a:	4b19      	ldr	r3, [pc, #100]	; (8002b70 <_Z13GrandStatumixv+0x2b0>)
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	b2da      	uxtb	r2, r3
 8002b12:	4b17      	ldr	r3, [pc, #92]	; (8002b70 <_Z13GrandStatumixv+0x2b0>)
 8002b14:	701a      	strb	r2, [r3, #0]
		}
		if(counter_Z >= 100){
 8002b16:	4b16      	ldr	r3, [pc, #88]	; (8002b70 <_Z13GrandStatumixv+0x2b0>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	2b63      	cmp	r3, #99	; 0x63
 8002b1c:	f240 80d0 	bls.w	8002cc0 <_Z13GrandStatumixv+0x400>
			counter_Z = 0;
 8002b20:	4b13      	ldr	r3, [pc, #76]	; (8002b70 <_Z13GrandStatumixv+0x2b0>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	701a      	strb	r2, [r3, #0]
			PWMOut = 0;
 8002b26:	4b0e      	ldr	r3, [pc, #56]	; (8002b60 <_Z13GrandStatumixv+0x2a0>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	801a      	strh	r2, [r3, #0]
			fn_Uart();
 8002b2c:	f7fe ff1c 	bl	8001968 <_Z7fn_Uartv>
			grandState = Ready;
 8002b30:	4b05      	ldr	r3, [pc, #20]	; (8002b48 <_Z13GrandStatumixv+0x288>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	701a      	strb	r2, [r3, #0]
//			position_order = 0;
//			positionlog[position_order] = 0.00; // 0.000613 - 0.0122 => 1-2/1024
//			Velocity = 7.0;
//			grandState = SetZeroGr;
//		}
		break;
 8002b36:	e0c3      	b.n	8002cc0 <_Z13GrandStatumixv+0x400>
 8002b38:	9999999a 	.word	0x9999999a
 8002b3c:	3fc99999 	.word	0x3fc99999
 8002b40:	bc6a7efa 	.word	0xbc6a7efa
 8002b44:	3f789374 	.word	0x3f789374
 8002b48:	200004fc 	.word	0x200004fc
 8002b4c:	40020400 	.word	0x40020400
 8002b50:	40020800 	.word	0x40020800
 8002b54:	200004fe 	.word	0x200004fe
 8002b58:	200004fd 	.word	0x200004fd
 8002b5c:	20000730 	.word	0x20000730
 8002b60:	20000574 	.word	0x20000574
 8002b64:	200006c4 	.word	0x200006c4
 8002b68:	2000057c 	.word	0x2000057c
 8002b6c:	20000570 	.word	0x20000570
 8002b70:	200007de 	.word	0x200007de

	case SetZeroGr:
		HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_SET);
 8002b74:	2201      	movs	r2, #1
 8002b76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b7a:	4857      	ldr	r0, [pc, #348]	; (8002cd8 <_Z13GrandStatumixv+0x418>)
 8002b7c:	f014 fcda 	bl	8017534 <HAL_GPIO_WritePin>

			////////>>>SetZeroStp/////////////////
		Unwrapping();
 8002b80:	f000 fd72 	bl	8003668 <_Z10Unwrappingv>

		 if(flagNewpos==0){
 8002b84:	4b55      	ldr	r3, [pc, #340]	; (8002cdc <_Z13GrandStatumixv+0x41c>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d111      	bne.n	8002bb0 <_Z13GrandStatumixv+0x2f0>
			Currentpos = CurrentEn;
 8002b8c:	4b54      	ldr	r3, [pc, #336]	; (8002ce0 <_Z13GrandStatumixv+0x420>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a54      	ldr	r2, [pc, #336]	; (8002ce4 <_Z13GrandStatumixv+0x424>)
 8002b92:	6013      	str	r3, [r2, #0]
			Distance = Finalposition - Currentpos;
 8002b94:	4b54      	ldr	r3, [pc, #336]	; (8002ce8 <_Z13GrandStatumixv+0x428>)
 8002b96:	ed93 7a00 	vldr	s14, [r3]
 8002b9a:	4b52      	ldr	r3, [pc, #328]	; (8002ce4 <_Z13GrandStatumixv+0x424>)
 8002b9c:	edd3 7a00 	vldr	s15, [r3]
 8002ba0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ba4:	4b51      	ldr	r3, [pc, #324]	; (8002cec <_Z13GrandStatumixv+0x42c>)
 8002ba6:	edc3 7a00 	vstr	s15, [r3]
			flagNewpos = 1;
 8002baa:	4b4c      	ldr	r3, [pc, #304]	; (8002cdc <_Z13GrandStatumixv+0x41c>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	601a      	str	r2, [r3, #0]
		 }
		Trajectory();
 8002bb0:	f000 f9f6 	bl	8002fa0 <_Z10Trajectoryv>
		Kalmanfilter();
 8002bb4:	f000 fe10 	bl	80037d8 <_Z12Kalmanfilterv>
		controlloop();
 8002bb8:	f001 f86a 	bl	8003c90 <_Z11controlloopv>

		//// <> Zero finish
		if (flag_finishTra == 1){
 8002bbc:	4b4c      	ldr	r3, [pc, #304]	; (8002cf0 <_Z13GrandStatumixv+0x430>)
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d109      	bne.n	8002bd8 <_Z13GrandStatumixv+0x318>
			flag_finishTra = 0;
 8002bc4:	4b4a      	ldr	r3, [pc, #296]	; (8002cf0 <_Z13GrandStatumixv+0x430>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	701a      	strb	r2, [r3, #0]
			//HAL_UART_Transmit(&huart2, (uint8_t*)temp_f_ack2, 2, 100);
			fn_Uart();
 8002bca:	f7fe fecd 	bl	8001968 <_Z7fn_Uartv>
			grandState = Ready;
 8002bce:	4b49      	ldr	r3, [pc, #292]	; (8002cf4 <_Z13GrandStatumixv+0x434>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	701a      	strb	r2, [r3, #0]
			ResetParam();
 8002bd4:	f000 f99a 	bl	8002f0c <_Z10ResetParamv>
		}
		////////<<<SetZeroStp/////////////////
//		}

		if (pwr_sense == 1){grandState = emer;}
 8002bd8:	4b47      	ldr	r3, [pc, #284]	; (8002cf8 <_Z13GrandStatumixv+0x438>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d102      	bne.n	8002be6 <_Z13GrandStatumixv+0x326>
 8002be0:	4b44      	ldr	r3, [pc, #272]	; (8002cf4 <_Z13GrandStatumixv+0x434>)
 8002be2:	2203      	movs	r2, #3
 8002be4:	701a      	strb	r2, [r3, #0]
		if (stop_sense == 0){
 8002be6:	4b45      	ldr	r3, [pc, #276]	; (8002cfc <_Z13GrandStatumixv+0x43c>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d16a      	bne.n	8002cc4 <_Z13GrandStatumixv+0x404>
					PWMOut = 0;
 8002bee:	4b44      	ldr	r3, [pc, #272]	; (8002d00 <_Z13GrandStatumixv+0x440>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	801a      	strh	r2, [r3, #0]
					grandState = stopnd;
 8002bf4:	4b3f      	ldr	r3, [pc, #252]	; (8002cf4 <_Z13GrandStatumixv+0x434>)
 8002bf6:	2204      	movs	r2, #4
 8002bf8:	701a      	strb	r2, [r3, #0]
					u_contr = 0;
 8002bfa:	4b42      	ldr	r3, [pc, #264]	; (8002d04 <_Z13GrandStatumixv+0x444>)
 8002bfc:	f04f 0200 	mov.w	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
				}
	break;
 8002c02:	e05f      	b.n	8002cc4 <_Z13GrandStatumixv+0x404>

	case stop:
		HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_SET);
 8002c04:	2201      	movs	r2, #1
 8002c06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c0a:	4833      	ldr	r0, [pc, #204]	; (8002cd8 <_Z13GrandStatumixv+0x418>)
 8002c0c:	f014 fc92 	bl	8017534 <HAL_GPIO_WritePin>
		PWMOut = 0;
 8002c10:	4b3b      	ldr	r3, [pc, #236]	; (8002d00 <_Z13GrandStatumixv+0x440>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	801a      	strh	r2, [r3, #0]

		X(1,0)=0;
 8002c16:	2200      	movs	r2, #0
 8002c18:	2101      	movs	r1, #1
 8002c1a:	483b      	ldr	r0, [pc, #236]	; (8002d08 <_Z13GrandStatumixv+0x448>)
 8002c1c:	f001 fd56 	bl	80046cc <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 8002c20:	4603      	mov	r3, r0
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]
		KalV = X(1,0);
 8002c28:	2200      	movs	r2, #0
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	4836      	ldr	r0, [pc, #216]	; (8002d08 <_Z13GrandStatumixv+0x448>)
 8002c2e:	f001 fd4d 	bl	80046cc <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 8002c32:	4603      	mov	r3, r0
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a35      	ldr	r2, [pc, #212]	; (8002d0c <_Z13GrandStatumixv+0x44c>)
 8002c38:	6013      	str	r3, [r2, #0]

		if (stop_sense == 1){
 8002c3a:	4b30      	ldr	r3, [pc, #192]	; (8002cfc <_Z13GrandStatumixv+0x43c>)
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d142      	bne.n	8002cc8 <_Z13GrandStatumixv+0x408>
			grandState = Ready;
 8002c42:	4b2c      	ldr	r3, [pc, #176]	; (8002cf4 <_Z13GrandStatumixv+0x434>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	701a      	strb	r2, [r3, #0]
			IOExpenderInit();
 8002c48:	f001 f93e 	bl	8003ec8 <_Z14IOExpenderInitv>
			HAL_Delay(100);
 8002c4c:	2064      	movs	r0, #100	; 0x64
 8002c4e:	f013 fd8f 	bl	8016770 <HAL_Delay>
			//== rotation change for dummy test
			//mot_dirctn++; mot_dirctn%=2;
		}
	break;
 8002c52:	e039      	b.n	8002cc8 <_Z13GrandStatumixv+0x408>

	case stopnd:
			HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_SET);
 8002c54:	2201      	movs	r2, #1
 8002c56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c5a:	481f      	ldr	r0, [pc, #124]	; (8002cd8 <_Z13GrandStatumixv+0x418>)
 8002c5c:	f014 fc6a 	bl	8017534 <HAL_GPIO_WritePin>
			PWMOut = 0;
 8002c60:	4b27      	ldr	r3, [pc, #156]	; (8002d00 <_Z13GrandStatumixv+0x440>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	801a      	strh	r2, [r3, #0]
			//Integral = 0;
			X(1,0)=0;
 8002c66:	2200      	movs	r2, #0
 8002c68:	2101      	movs	r1, #1
 8002c6a:	4827      	ldr	r0, [pc, #156]	; (8002d08 <_Z13GrandStatumixv+0x448>)
 8002c6c:	f001 fd2e 	bl	80046cc <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 8002c70:	4603      	mov	r3, r0
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]
			KalV = X(1,0);
 8002c78:	2200      	movs	r2, #0
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	4822      	ldr	r0, [pc, #136]	; (8002d08 <_Z13GrandStatumixv+0x448>)
 8002c7e:	f001 fd25 	bl	80046cc <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 8002c82:	4603      	mov	r3, r0
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a21      	ldr	r2, [pc, #132]	; (8002d0c <_Z13GrandStatumixv+0x44c>)
 8002c88:	6013      	str	r3, [r2, #0]


			if (stop_sense == 1){
 8002c8a:	4b1c      	ldr	r3, [pc, #112]	; (8002cfc <_Z13GrandStatumixv+0x43c>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d11c      	bne.n	8002ccc <_Z13GrandStatumixv+0x40c>

//				Currentpos = CurrentEn;
//				Distance = Finalposition - Currentpos;
//				flagNewpos = 1;
//				check = 0;
				grandState = work;
 8002c92:	4b18      	ldr	r3, [pc, #96]	; (8002cf4 <_Z13GrandStatumixv+0x434>)
 8002c94:	2201      	movs	r2, #1
 8002c96:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002c98:	e018      	b.n	8002ccc <_Z13GrandStatumixv+0x40c>

	case emer:
		ResetParam();
 8002c9a:	f000 f937 	bl	8002f0c <_Z10ResetParamv>
		// Reset every variables at control
		if (pwr_sense == 0){
 8002c9e:	4b16      	ldr	r3, [pc, #88]	; (8002cf8 <_Z13GrandStatumixv+0x438>)
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d114      	bne.n	8002cd0 <_Z13GrandStatumixv+0x410>
			grandState = Ready;
 8002ca6:	4b13      	ldr	r3, [pc, #76]	; (8002cf4 <_Z13GrandStatumixv+0x434>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	701a      	strb	r2, [r3, #0]
			HAL_Delay(250); // wait for emer release shock power
 8002cac:	20fa      	movs	r0, #250	; 0xfa
 8002cae:	f013 fd5f 	bl	8016770 <HAL_Delay>
			IOExpenderInit();
 8002cb2:	f001 f909 	bl	8003ec8 <_Z14IOExpenderInitv>

		}
	break;
 8002cb6:	e00b      	b.n	8002cd0 <_Z13GrandStatumixv+0x410>
	break;
 8002cb8:	bf00      	nop
 8002cba:	e00a      	b.n	8002cd2 <_Z13GrandStatumixv+0x412>
	break;
 8002cbc:	bf00      	nop
 8002cbe:	e008      	b.n	8002cd2 <_Z13GrandStatumixv+0x412>
		break;
 8002cc0:	bf00      	nop
 8002cc2:	e006      	b.n	8002cd2 <_Z13GrandStatumixv+0x412>
	break;
 8002cc4:	bf00      	nop
 8002cc6:	e004      	b.n	8002cd2 <_Z13GrandStatumixv+0x412>
	break;
 8002cc8:	bf00      	nop
 8002cca:	e002      	b.n	8002cd2 <_Z13GrandStatumixv+0x412>
		break;
 8002ccc:	bf00      	nop
 8002cce:	e000      	b.n	8002cd2 <_Z13GrandStatumixv+0x412>
	break;
 8002cd0:	bf00      	nop
	}
}
 8002cd2:	bf00      	nop
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40020400 	.word	0x40020400
 8002cdc:	200005ac 	.word	0x200005ac
 8002ce0:	200006e4 	.word	0x200006e4
 8002ce4:	200005a8 	.word	0x200005a8
 8002ce8:	20000580 	.word	0x20000580
 8002cec:	20000584 	.word	0x20000584
 8002cf0:	20000504 	.word	0x20000504
 8002cf4:	200004fc 	.word	0x200004fc
 8002cf8:	200004fd 	.word	0x200004fd
 8002cfc:	200004fe 	.word	0x200004fe
 8002d00:	20000574 	.word	0x20000574
 8002d04:	20000730 	.word	0x20000730
 8002d08:	200006a0 	.word	0x200006a0
 8002d0c:	200006c8 	.word	0x200006c8

08002d10 <_Z20LaserTrajex_workflowv>:

void LaserTrajex_workflow(){ // 1, n loop go to shoot laser run
 8002d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d14:	b086      	sub	sp, #24
 8002d16:	af00      	add	r7, sp, #0
	// -1 means no position value
	//if (Finalposition == -1){flag_LasxTraj = 0;}
	static uint16_t timeouttt = 5050;
	//static uint8_t missst = 0;

	switch(flag_LasxTraj){
 8002d18:	4b6b      	ldr	r3, [pc, #428]	; (8002ec8 <_Z20LaserTrajex_workflowv+0x1b8>)
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d012      	beq.n	8002d46 <_Z20LaserTrajex_workflowv+0x36>
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d05b      	beq.n	8002ddc <_Z20LaserTrajex_workflowv+0xcc>
	default:
	case 0: // wait go flag
		////////// raise flag to 1 if need to drive the state

		if (grandState == work){ //flag_LasxTraj != 0 ||
 8002d24:	4b69      	ldr	r3, [pc, #420]	; (8002ecc <_Z20LaserTrajex_workflowv+0x1bc>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	f040 80c3 	bne.w	8002eb4 <_Z20LaserTrajex_workflowv+0x1a4>
			flag_LasxTraj = 1;
 8002d2e:	4b66      	ldr	r3, [pc, #408]	; (8002ec8 <_Z20LaserTrajex_workflowv+0x1b8>)
 8002d30:	2201      	movs	r2, #1
 8002d32:	701a      	strb	r2, [r3, #0]
			Finalposition = positionlog[position_order]; // receive in rad
 8002d34:	4b66      	ldr	r3, [pc, #408]	; (8002ed0 <_Z20LaserTrajex_workflowv+0x1c0>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	4a66      	ldr	r2, [pc, #408]	; (8002ed4 <_Z20LaserTrajex_workflowv+0x1c4>)
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4413      	add	r3, r2
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a65      	ldr	r2, [pc, #404]	; (8002ed8 <_Z20LaserTrajex_workflowv+0x1c8>)
 8002d42:	6013      	str	r3, [r2, #0]

		}
		break;
 8002d44:	e0b6      	b.n	8002eb4 <_Z20LaserTrajex_workflowv+0x1a4>
	case 1: //-------------traject-----
		//====flag_LasxTraj will trig trajex in while;
		//////// raise flag to 2 and flag_efftActi = 1; if reach the target the position

		Unwrapping();
 8002d46:	f000 fc8f 	bl	8003668 <_Z10Unwrappingv>
		 if(flagNewpos == 0){
 8002d4a:	4b64      	ldr	r3, [pc, #400]	; (8002edc <_Z20LaserTrajex_workflowv+0x1cc>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d114      	bne.n	8002d7c <_Z20LaserTrajex_workflowv+0x6c>
			Currentpos = CurrentEn;
 8002d52:	4b63      	ldr	r3, [pc, #396]	; (8002ee0 <_Z20LaserTrajex_workflowv+0x1d0>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a63      	ldr	r2, [pc, #396]	; (8002ee4 <_Z20LaserTrajex_workflowv+0x1d4>)
 8002d58:	6013      	str	r3, [r2, #0]
			//Finalposition = 300*0.006136; // Put goal position here in rad
			Distance = Finalposition - Currentpos;
 8002d5a:	4b5f      	ldr	r3, [pc, #380]	; (8002ed8 <_Z20LaserTrajex_workflowv+0x1c8>)
 8002d5c:	ed93 7a00 	vldr	s14, [r3]
 8002d60:	4b60      	ldr	r3, [pc, #384]	; (8002ee4 <_Z20LaserTrajex_workflowv+0x1d4>)
 8002d62:	edd3 7a00 	vldr	s15, [r3]
 8002d66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d6a:	4b5f      	ldr	r3, [pc, #380]	; (8002ee8 <_Z20LaserTrajex_workflowv+0x1d8>)
 8002d6c:	edc3 7a00 	vstr	s15, [r3]
			flagNewpos = 1;
 8002d70:	4b5a      	ldr	r3, [pc, #360]	; (8002edc <_Z20LaserTrajex_workflowv+0x1cc>)
 8002d72:	2201      	movs	r2, #1
 8002d74:	601a      	str	r2, [r3, #0]
			check = 0;
 8002d76:	4b5d      	ldr	r3, [pc, #372]	; (8002eec <_Z20LaserTrajex_workflowv+0x1dc>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	701a      	strb	r2, [r3, #0]
		 }
		Trajectory();
 8002d7c:	f000 f910 	bl	8002fa0 <_Z10Trajectoryv>
		Kalmanfilter();
 8002d80:	f000 fd2a 	bl	80037d8 <_Z12Kalmanfilterv>
		controlloop();
 8002d84:	f000 ff84 	bl	8003c90 <_Z11controlloopv>

		//HAL_Delay(2500); // Simulate workload
		//flag_finishTra = 1;

		if(flag_finishTra == 1){
 8002d88:	4b59      	ldr	r3, [pc, #356]	; (8002ef0 <_Z20LaserTrajex_workflowv+0x1e0>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	f040 8093 	bne.w	8002eb8 <_Z20LaserTrajex_workflowv+0x1a8>
			flag_finishTra = 0;
 8002d92:	4b57      	ldr	r3, [pc, #348]	; (8002ef0 <_Z20LaserTrajex_workflowv+0x1e0>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	701a      	strb	r2, [r3, #0]

			flag_efftActi = 1;
 8002d98:	4b56      	ldr	r3, [pc, #344]	; (8002ef4 <_Z20LaserTrajex_workflowv+0x1e4>)
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	701a      	strb	r2, [r3, #0]
			flag_LasxTraj = 2;
 8002d9e:	4b4a      	ldr	r3, [pc, #296]	; (8002ec8 <_Z20LaserTrajex_workflowv+0x1b8>)
 8002da0:	2202      	movs	r2, #2
 8002da2:	701a      	strb	r2, [r3, #0]

			timeout_efft = millis();
 8002da4:	f001 fa18 	bl	80041d8 <_Z6millisv>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2200      	movs	r2, #0
 8002dac:	60bb      	str	r3, [r7, #8]
 8002dae:	60fa      	str	r2, [r7, #12]
 8002db0:	4b51      	ldr	r3, [pc, #324]	; (8002ef8 <_Z20LaserTrajex_workflowv+0x1e8>)
 8002db2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002db6:	e9c3 1200 	strd	r1, r2, [r3]

			if(flag_efftDis == 1){
 8002dba:	4b50      	ldr	r3, [pc, #320]	; (8002efc <_Z20LaserTrajex_workflowv+0x1ec>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d107      	bne.n	8002dd2 <_Z20LaserTrajex_workflowv+0xc2>
				timeouttt = 500;
 8002dc2:	4b4f      	ldr	r3, [pc, #316]	; (8002f00 <_Z20LaserTrajex_workflowv+0x1f0>)
 8002dc4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002dc8:	801a      	strh	r2, [r3, #0]
				efft_status = 0x78;}
 8002dca:	4b4e      	ldr	r3, [pc, #312]	; (8002f04 <_Z20LaserTrajex_workflowv+0x1f4>)
 8002dcc:	2278      	movs	r2, #120	; 0x78
 8002dce:	701a      	strb	r2, [r3, #0]
			else{timeouttt = 5050;}

		}
		break;
 8002dd0:	e072      	b.n	8002eb8 <_Z20LaserTrajex_workflowv+0x1a8>
			else{timeouttt = 5050;}
 8002dd2:	4b4b      	ldr	r3, [pc, #300]	; (8002f00 <_Z20LaserTrajex_workflowv+0x1f0>)
 8002dd4:	f241 32ba 	movw	r2, #5050	; 0x13ba
 8002dd8:	801a      	strh	r2, [r3, #0]
		break;
 8002dda:	e06d      	b.n	8002eb8 <_Z20LaserTrajex_workflowv+0x1a8>
	case 2: //---------------Laserwork--------------
		trig_efftRead = 1;
 8002ddc:	4b4a      	ldr	r3, [pc, #296]	; (8002f08 <_Z20LaserTrajex_workflowv+0x1f8>)
 8002dde:	2201      	movs	r2, #1
 8002de0:	701a      	strb	r2, [r3, #0]

		// if laser finished work or tomeout and not too fast shift state
		if((efft_status == 0x78 || millis() - timeout_efft >= timeouttt) && millis() - timeout_efft >= 1000){
 8002de2:	4b48      	ldr	r3, [pc, #288]	; (8002f04 <_Z20LaserTrajex_workflowv+0x1f4>)
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	2b78      	cmp	r3, #120	; 0x78
 8002de8:	d01c      	beq.n	8002e24 <_Z20LaserTrajex_workflowv+0x114>
 8002dea:	f001 f9f5 	bl	80041d8 <_Z6millisv>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2200      	movs	r2, #0
 8002df2:	613b      	str	r3, [r7, #16]
 8002df4:	617a      	str	r2, [r7, #20]
 8002df6:	4b40      	ldr	r3, [pc, #256]	; (8002ef8 <_Z20LaserTrajex_workflowv+0x1e8>)
 8002df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfc:	6939      	ldr	r1, [r7, #16]
 8002dfe:	ebb1 0802 	subs.w	r8, r1, r2
 8002e02:	6979      	ldr	r1, [r7, #20]
 8002e04:	eb61 0903 	sbc.w	r9, r1, r3
 8002e08:	4b3d      	ldr	r3, [pc, #244]	; (8002f00 <_Z20LaserTrajex_workflowv+0x1f0>)
 8002e0a:	881b      	ldrh	r3, [r3, #0]
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	2200      	movs	r2, #0
 8002e10:	603b      	str	r3, [r7, #0]
 8002e12:	607a      	str	r2, [r7, #4]
 8002e14:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	4598      	cmp	r8, r3
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	eb79 0303 	sbcs.w	r3, r9, r3
 8002e22:	d313      	bcc.n	8002e4c <_Z20LaserTrajex_workflowv+0x13c>
 8002e24:	f001 f9d8 	bl	80041d8 <_Z6millisv>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	469a      	mov	sl, r3
 8002e2e:	4693      	mov	fp, r2
 8002e30:	4b31      	ldr	r3, [pc, #196]	; (8002ef8 <_Z20LaserTrajex_workflowv+0x1e8>)
 8002e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e36:	ebba 0402 	subs.w	r4, sl, r2
 8002e3a:	eb6b 0503 	sbc.w	r5, fp, r3
 8002e3e:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8002e42:	f175 0300 	sbcs.w	r3, r5, #0
 8002e46:	d301      	bcc.n	8002e4c <_Z20LaserTrajex_workflowv+0x13c>
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e000      	b.n	8002e4e <_Z20LaserTrajex_workflowv+0x13e>
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d034      	beq.n	8002ebc <_Z20LaserTrajex_workflowv+0x1ac>
		//// force encoder to work
		//if(efft_status == 0x78 || millis() - timeout_efft >= timeouttt){
		//// cheat force
		//if(millis() - timeout_efft >= timeouttt){
			efft_status = 0x00;
 8002e52:	4b2c      	ldr	r3, [pc, #176]	; (8002f04 <_Z20LaserTrajex_workflowv+0x1f4>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	701a      	strb	r2, [r3, #0]
			trig_efftRead = 0;
 8002e58:	4b2b      	ldr	r3, [pc, #172]	; (8002f08 <_Z20LaserTrajex_workflowv+0x1f8>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	701a      	strb	r2, [r3, #0]
			position_order++; // go to next obtained position
 8002e5e:	4b1c      	ldr	r3, [pc, #112]	; (8002ed0 <_Z20LaserTrajex_workflowv+0x1c0>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	3301      	adds	r3, #1
 8002e64:	b2da      	uxtb	r2, r3
 8002e66:	4b1a      	ldr	r3, [pc, #104]	; (8002ed0 <_Z20LaserTrajex_workflowv+0x1c0>)
 8002e68:	701a      	strb	r2, [r3, #0]

			if (positionlog[position_order] == -1){
 8002e6a:	4b19      	ldr	r3, [pc, #100]	; (8002ed0 <_Z20LaserTrajex_workflowv+0x1c0>)
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	4a19      	ldr	r2, [pc, #100]	; (8002ed4 <_Z20LaserTrajex_workflowv+0x1c4>)
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	edd3 7a00 	vldr	s15, [r3]
 8002e78:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002e7c:	eef4 7a47 	vcmp.f32	s15, s14
 8002e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e84:	d10a      	bne.n	8002e9c <_Z20LaserTrajex_workflowv+0x18c>
				//Real end, reset all position parameter
				// back to ready
				//HAL_UART_Transmit(&huart2, (uint8_t*)temp_f_ack2, 2, 100);
				fn_Uart();
 8002e86:	f7fe fd6f 	bl	8001968 <_Z7fn_Uartv>
				flag_LasxTraj = 0;
 8002e8a:	4b0f      	ldr	r3, [pc, #60]	; (8002ec8 <_Z20LaserTrajex_workflowv+0x1b8>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	701a      	strb	r2, [r3, #0]
				ResetParam();
 8002e90:	f000 f83c 	bl	8002f0c <_Z10ResetParamv>
				grandState = Ready;
 8002e94:	4b0d      	ldr	r3, [pc, #52]	; (8002ecc <_Z20LaserTrajex_workflowv+0x1bc>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	701a      	strb	r2, [r3, #0]
			else {
				Finalposition = positionlog[position_order];
				flag_LasxTraj = 1;
			} // continue next pos if have
		}
		break;
 8002e9a:	e00f      	b.n	8002ebc <_Z20LaserTrajex_workflowv+0x1ac>
				Finalposition = positionlog[position_order];
 8002e9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ed0 <_Z20LaserTrajex_workflowv+0x1c0>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	4a0c      	ldr	r2, [pc, #48]	; (8002ed4 <_Z20LaserTrajex_workflowv+0x1c4>)
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a0b      	ldr	r2, [pc, #44]	; (8002ed8 <_Z20LaserTrajex_workflowv+0x1c8>)
 8002eaa:	6013      	str	r3, [r2, #0]
				flag_LasxTraj = 1;
 8002eac:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <_Z20LaserTrajex_workflowv+0x1b8>)
 8002eae:	2201      	movs	r2, #1
 8002eb0:	701a      	strb	r2, [r3, #0]
		break;
 8002eb2:	e003      	b.n	8002ebc <_Z20LaserTrajex_workflowv+0x1ac>
		break;
 8002eb4:	bf00      	nop
 8002eb6:	e002      	b.n	8002ebe <_Z20LaserTrajex_workflowv+0x1ae>
		break;
 8002eb8:	bf00      	nop
 8002eba:	e000      	b.n	8002ebe <_Z20LaserTrajex_workflowv+0x1ae>
		break;
 8002ebc:	bf00      	nop
	}
}
 8002ebe:	bf00      	nop
 8002ec0:	3718      	adds	r7, #24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ec8:	20000514 	.word	0x20000514
 8002ecc:	200004fc 	.word	0x200004fc
 8002ed0:	20000515 	.word	0x20000515
 8002ed4:	20000144 	.word	0x20000144
 8002ed8:	20000580 	.word	0x20000580
 8002edc:	200005ac 	.word	0x200005ac
 8002ee0:	200006e4 	.word	0x200006e4
 8002ee4:	200005a8 	.word	0x200005a8
 8002ee8:	20000584 	.word	0x20000584
 8002eec:	20000739 	.word	0x20000739
 8002ef0:	20000504 	.word	0x20000504
 8002ef4:	2000073b 	.word	0x2000073b
 8002ef8:	20000748 	.word	0x20000748
 8002efc:	200001ac 	.word	0x200001ac
 8002f00:	200001c4 	.word	0x200001c4
 8002f04:	2000073a 	.word	0x2000073a
 8002f08:	2000073d 	.word	0x2000073d

08002f0c <_Z10ResetParamv>:

void ResetParam(){
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
	// Reset every variables at control
	// reset position buffer
	PWMOut = 0;
 8002f12:	4b19      	ldr	r3, [pc, #100]	; (8002f78 <_Z10ResetParamv+0x6c>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i <= position_order; i++){
 8002f18:	2300      	movs	r3, #0
 8002f1a:	607b      	str	r3, [r7, #4]
 8002f1c:	4b17      	ldr	r3, [pc, #92]	; (8002f7c <_Z10ResetParamv+0x70>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	461a      	mov	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4293      	cmp	r3, r2
 8002f26:	dc09      	bgt.n	8002f3c <_Z10ResetParamv+0x30>
			positionlog[i] = -1.0;
 8002f28:	4a15      	ldr	r2, [pc, #84]	; (8002f80 <_Z10ResetParamv+0x74>)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	4413      	add	r3, r2
 8002f30:	4a14      	ldr	r2, [pc, #80]	; (8002f84 <_Z10ResetParamv+0x78>)
 8002f32:	601a      	str	r2, [r3, #0]
	for(int i = 0; i <= position_order; i++){
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	3301      	adds	r3, #1
 8002f38:	607b      	str	r3, [r7, #4]
 8002f3a:	e7ef      	b.n	8002f1c <_Z10ResetParamv+0x10>
		}
	position_order = 0;
 8002f3c:	4b0f      	ldr	r3, [pc, #60]	; (8002f7c <_Z10ResetParamv+0x70>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	701a      	strb	r2, [r3, #0]
	flag_LasxTraj = 0;
 8002f42:	4b11      	ldr	r3, [pc, #68]	; (8002f88 <_Z10ResetParamv+0x7c>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	701a      	strb	r2, [r3, #0]
	trig_efftRead = 0;
 8002f48:	4b10      	ldr	r3, [pc, #64]	; (8002f8c <_Z10ResetParamv+0x80>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	701a      	strb	r2, [r3, #0]
	bluecounter = 0;
 8002f4e:	4b10      	ldr	r3, [pc, #64]	; (8002f90 <_Z10ResetParamv+0x84>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	701a      	strb	r2, [r3, #0]
	Distance = 0;
 8002f54:	4b0f      	ldr	r3, [pc, #60]	; (8002f94 <_Z10ResetParamv+0x88>)
 8002f56:	f04f 0200 	mov.w	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
	Currentpos = 0;
 8002f5c:	4b0e      	ldr	r3, [pc, #56]	; (8002f98 <_Z10ResetParamv+0x8c>)
 8002f5e:	f04f 0200 	mov.w	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]
	efft_status = 0x00;
 8002f64:	4b0d      	ldr	r3, [pc, #52]	; (8002f9c <_Z10ResetParamv+0x90>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	701a      	strb	r2, [r3, #0]
	IOExpenderInit();
 8002f6a:	f000 ffad 	bl	8003ec8 <_Z14IOExpenderInitv>
	//Integral = 0;
	//u_contr = 0;
}
 8002f6e:	bf00      	nop
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	20000574 	.word	0x20000574
 8002f7c:	20000515 	.word	0x20000515
 8002f80:	20000144 	.word	0x20000144
 8002f84:	bf800000 	.word	0xbf800000
 8002f88:	20000514 	.word	0x20000514
 8002f8c:	2000073d 	.word	0x2000073d
 8002f90:	200006f0 	.word	0x200006f0
 8002f94:	20000584 	.word	0x20000584
 8002f98:	200005a8 	.word	0x200005a8
 8002f9c:	2000073a 	.word	0x2000073a

08002fa0 <_Z10Trajectoryv>:

//////////////////// [Trajectory Path] //////////////////////
void Trajectory(){
 8002fa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fa4:	ed2d 8b04 	vpush	{d8-d9}
 8002fa8:	af00      	add	r7, sp, #0

	if(micros() - TimeStampTraject >= 10000){
 8002faa:	f001 f8fb 	bl	80041a4 <_Z6microsv>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	49c5      	ldr	r1, [pc, #788]	; (80032c8 <_Z10Trajectoryv+0x328>)
 8002fb4:	6809      	ldr	r1, [r1, #0]
 8002fb6:	2000      	movs	r0, #0
 8002fb8:	4688      	mov	r8, r1
 8002fba:	4681      	mov	r9, r0
 8002fbc:	ebb2 0408 	subs.w	r4, r2, r8
 8002fc0:	eb63 0509 	sbc.w	r5, r3, r9
 8002fc4:	f242 7310 	movw	r3, #10000	; 0x2710
 8002fc8:	429c      	cmp	r4, r3
 8002fca:	f175 0300 	sbcs.w	r3, r5, #0
 8002fce:	bf2c      	ite	cs
 8002fd0:	2301      	movcs	r3, #1
 8002fd2:	2300      	movcc	r3, #0
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f000 8310 	beq.w	80035fc <_Z10Trajectoryv+0x65c>
		TimeStampTraject = micros();
 8002fdc:	f001 f8e2 	bl	80041a4 <_Z6microsv>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	4bb8      	ldr	r3, [pc, #736]	; (80032c8 <_Z10Trajectoryv+0x328>)
 8002fe6:	601a      	str	r2, [r3, #0]

		Acceleration = 0.5;
 8002fe8:	4bb8      	ldr	r3, [pc, #736]	; (80032cc <_Z10Trajectoryv+0x32c>)
 8002fea:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002fee:	601a      	str	r2, [r3, #0]
//		}
		////////=======>>> Quintic ============///////////

		////////=======<<< Tapezoidal==========//////////

      timeFinal = (4*abs(Velocity)) + ((abs(Distance)-(2*abs(Velocity)*abs(Velocity)))/abs(Velocity));
 8002ff0:	4bb7      	ldr	r3, [pc, #732]	; (80032d0 <_Z10Trajectoryv+0x330>)
 8002ff2:	edd3 7a00 	vldr	s15, [r3]
 8002ff6:	eeb0 0a67 	vmov.f32	s0, s15
 8002ffa:	f7fd ff7f 	bl	8000efc <_ZSt3absf>
 8002ffe:	eef0 7a40 	vmov.f32	s15, s0
 8003002:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003006:	ee27 8a87 	vmul.f32	s16, s15, s14
 800300a:	4bb2      	ldr	r3, [pc, #712]	; (80032d4 <_Z10Trajectoryv+0x334>)
 800300c:	edd3 7a00 	vldr	s15, [r3]
 8003010:	eeb0 0a67 	vmov.f32	s0, s15
 8003014:	f7fd ff72 	bl	8000efc <_ZSt3absf>
 8003018:	eeb0 9a40 	vmov.f32	s18, s0
 800301c:	4bac      	ldr	r3, [pc, #688]	; (80032d0 <_Z10Trajectoryv+0x330>)
 800301e:	edd3 7a00 	vldr	s15, [r3]
 8003022:	eeb0 0a67 	vmov.f32	s0, s15
 8003026:	f7fd ff69 	bl	8000efc <_ZSt3absf>
 800302a:	eef0 7a40 	vmov.f32	s15, s0
 800302e:	ee77 8aa7 	vadd.f32	s17, s15, s15
 8003032:	4ba7      	ldr	r3, [pc, #668]	; (80032d0 <_Z10Trajectoryv+0x330>)
 8003034:	edd3 7a00 	vldr	s15, [r3]
 8003038:	eeb0 0a67 	vmov.f32	s0, s15
 800303c:	f7fd ff5e 	bl	8000efc <_ZSt3absf>
 8003040:	eef0 7a40 	vmov.f32	s15, s0
 8003044:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8003048:	ee79 8a67 	vsub.f32	s17, s18, s15
 800304c:	4ba0      	ldr	r3, [pc, #640]	; (80032d0 <_Z10Trajectoryv+0x330>)
 800304e:	edd3 7a00 	vldr	s15, [r3]
 8003052:	eeb0 0a67 	vmov.f32	s0, s15
 8003056:	f7fd ff51 	bl	8000efc <_ZSt3absf>
 800305a:	eeb0 7a40 	vmov.f32	s14, s0
 800305e:	eec8 7a87 	vdiv.f32	s15, s17, s14
 8003062:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003066:	4b9c      	ldr	r3, [pc, #624]	; (80032d8 <_Z10Trajectoryv+0x338>)
 8003068:	edc3 7a00 	vstr	s15, [r3]

		if (Distance/Velocity > Velocity/Acceleration){
 800306c:	4b99      	ldr	r3, [pc, #612]	; (80032d4 <_Z10Trajectoryv+0x334>)
 800306e:	edd3 6a00 	vldr	s13, [r3]
 8003072:	4b97      	ldr	r3, [pc, #604]	; (80032d0 <_Z10Trajectoryv+0x330>)
 8003074:	edd3 7a00 	vldr	s15, [r3]
 8003078:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800307c:	4b94      	ldr	r3, [pc, #592]	; (80032d0 <_Z10Trajectoryv+0x330>)
 800307e:	ed93 6a00 	vldr	s12, [r3]
 8003082:	4b92      	ldr	r3, [pc, #584]	; (80032cc <_Z10Trajectoryv+0x32c>)
 8003084:	edd3 6a00 	vldr	s13, [r3]
 8003088:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800308c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003094:	dd0b      	ble.n	80030ae <_Z10Trajectoryv+0x10e>
			Tb = Velocity/Acceleration;
 8003096:	4b8e      	ldr	r3, [pc, #568]	; (80032d0 <_Z10Trajectoryv+0x330>)
 8003098:	edd3 6a00 	vldr	s13, [r3]
 800309c:	4b8b      	ldr	r3, [pc, #556]	; (80032cc <_Z10Trajectoryv+0x32c>)
 800309e:	ed93 7a00 	vldr	s14, [r3]
 80030a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030a6:	4b8d      	ldr	r3, [pc, #564]	; (80032dc <_Z10Trajectoryv+0x33c>)
 80030a8:	edc3 7a00 	vstr	s15, [r3]
 80030ac:	e029      	b.n	8003102 <_Z10Trajectoryv+0x162>
		}
		else {
			Tb = sqrt(2*abs(Distance));
 80030ae:	4b89      	ldr	r3, [pc, #548]	; (80032d4 <_Z10Trajectoryv+0x334>)
 80030b0:	edd3 7a00 	vldr	s15, [r3]
 80030b4:	eeb0 0a67 	vmov.f32	s0, s15
 80030b8:	f7fd ff20 	bl	8000efc <_ZSt3absf>
 80030bc:	eef0 7a40 	vmov.f32	s15, s0
 80030c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80030c4:	eeb0 0a67 	vmov.f32	s0, s15
 80030c8:	f7fd ff28 	bl	8000f1c <_ZSt4sqrtf>
 80030cc:	eef0 7a40 	vmov.f32	s15, s0
 80030d0:	4b82      	ldr	r3, [pc, #520]	; (80032dc <_Z10Trajectoryv+0x33c>)
 80030d2:	edc3 7a00 	vstr	s15, [r3]
			Velocity = sqrt(abs(Distance)/2);
 80030d6:	4b7f      	ldr	r3, [pc, #508]	; (80032d4 <_Z10Trajectoryv+0x334>)
 80030d8:	edd3 7a00 	vldr	s15, [r3]
 80030dc:	eeb0 0a67 	vmov.f32	s0, s15
 80030e0:	f7fd ff0c 	bl	8000efc <_ZSt3absf>
 80030e4:	eeb0 7a40 	vmov.f32	s14, s0
 80030e8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80030ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030f0:	eeb0 0a67 	vmov.f32	s0, s15
 80030f4:	f7fd ff12 	bl	8000f1c <_ZSt4sqrtf>
 80030f8:	eef0 7a40 	vmov.f32	s15, s0
 80030fc:	4b74      	ldr	r3, [pc, #464]	; (80032d0 <_Z10Trajectoryv+0x330>)
 80030fe:	edc3 7a00 	vstr	s15, [r3]
		}
		if (TimeinS < Tb){
 8003102:	4b77      	ldr	r3, [pc, #476]	; (80032e0 <_Z10Trajectoryv+0x340>)
 8003104:	ed93 7a00 	vldr	s14, [r3]
 8003108:	4b74      	ldr	r3, [pc, #464]	; (80032dc <_Z10Trajectoryv+0x33c>)
 800310a:	edd3 7a00 	vldr	s15, [r3]
 800310e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003116:	d55c      	bpl.n	80031d2 <_Z10Trajectoryv+0x232>
			OutPosition = (0.5*Acceleration*TimeinS*TimeinS)+Currentpos;
 8003118:	4b6c      	ldr	r3, [pc, #432]	; (80032cc <_Z10Trajectoryv+0x32c>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4618      	mov	r0, r3
 800311e:	f7fd fa13 	bl	8000548 <__aeabi_f2d>
 8003122:	f04f 0200 	mov.w	r2, #0
 8003126:	4b6f      	ldr	r3, [pc, #444]	; (80032e4 <_Z10Trajectoryv+0x344>)
 8003128:	f7fd fa66 	bl	80005f8 <__aeabi_dmul>
 800312c:	4602      	mov	r2, r0
 800312e:	460b      	mov	r3, r1
 8003130:	4614      	mov	r4, r2
 8003132:	461d      	mov	r5, r3
 8003134:	4b6a      	ldr	r3, [pc, #424]	; (80032e0 <_Z10Trajectoryv+0x340>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f7fd fa05 	bl	8000548 <__aeabi_f2d>
 800313e:	4602      	mov	r2, r0
 8003140:	460b      	mov	r3, r1
 8003142:	4620      	mov	r0, r4
 8003144:	4629      	mov	r1, r5
 8003146:	f7fd fa57 	bl	80005f8 <__aeabi_dmul>
 800314a:	4602      	mov	r2, r0
 800314c:	460b      	mov	r3, r1
 800314e:	4614      	mov	r4, r2
 8003150:	461d      	mov	r5, r3
 8003152:	4b63      	ldr	r3, [pc, #396]	; (80032e0 <_Z10Trajectoryv+0x340>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4618      	mov	r0, r3
 8003158:	f7fd f9f6 	bl	8000548 <__aeabi_f2d>
 800315c:	4602      	mov	r2, r0
 800315e:	460b      	mov	r3, r1
 8003160:	4620      	mov	r0, r4
 8003162:	4629      	mov	r1, r5
 8003164:	f7fd fa48 	bl	80005f8 <__aeabi_dmul>
 8003168:	4602      	mov	r2, r0
 800316a:	460b      	mov	r3, r1
 800316c:	4614      	mov	r4, r2
 800316e:	461d      	mov	r5, r3
 8003170:	4b5d      	ldr	r3, [pc, #372]	; (80032e8 <_Z10Trajectoryv+0x348>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4618      	mov	r0, r3
 8003176:	f7fd f9e7 	bl	8000548 <__aeabi_f2d>
 800317a:	4602      	mov	r2, r0
 800317c:	460b      	mov	r3, r1
 800317e:	4620      	mov	r0, r4
 8003180:	4629      	mov	r1, r5
 8003182:	f7fd f883 	bl	800028c <__adddf3>
 8003186:	4602      	mov	r2, r0
 8003188:	460b      	mov	r3, r1
 800318a:	4610      	mov	r0, r2
 800318c:	4619      	mov	r1, r3
 800318e:	f7fd fce3 	bl	8000b58 <__aeabi_d2f>
 8003192:	4603      	mov	r3, r0
 8003194:	4a55      	ldr	r2, [pc, #340]	; (80032ec <_Z10Trajectoryv+0x34c>)
 8003196:	6013      	str	r3, [r2, #0]
			OutVelocity = Acceleration*TimeinS;
 8003198:	4b4c      	ldr	r3, [pc, #304]	; (80032cc <_Z10Trajectoryv+0x32c>)
 800319a:	ed93 7a00 	vldr	s14, [r3]
 800319e:	4b50      	ldr	r3, [pc, #320]	; (80032e0 <_Z10Trajectoryv+0x340>)
 80031a0:	edd3 7a00 	vldr	s15, [r3]
 80031a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031a8:	4b51      	ldr	r3, [pc, #324]	; (80032f0 <_Z10Trajectoryv+0x350>)
 80031aa:	edc3 7a00 	vstr	s15, [r3]
			OutAcceleration = Acceleration;
 80031ae:	4b47      	ldr	r3, [pc, #284]	; (80032cc <_Z10Trajectoryv+0x32c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a50      	ldr	r2, [pc, #320]	; (80032f4 <_Z10Trajectoryv+0x354>)
 80031b4:	6013      	str	r3, [r2, #0]
			K_P_V = 2.5;
 80031b6:	4b50      	ldr	r3, [pc, #320]	; (80032f8 <_Z10Trajectoryv+0x358>)
 80031b8:	4a50      	ldr	r2, [pc, #320]	; (80032fc <_Z10Trajectoryv+0x35c>)
 80031ba:	601a      	str	r2, [r3, #0]
			K_I_V = 0.25;
 80031bc:	4b50      	ldr	r3, [pc, #320]	; (8003300 <_Z10Trajectoryv+0x360>)
 80031be:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 80031c2:	601a      	str	r2, [r3, #0]
			K_D_V = 1.2;
 80031c4:	4b4f      	ldr	r3, [pc, #316]	; (8003304 <_Z10Trajectoryv+0x364>)
 80031c6:	4a50      	ldr	r2, [pc, #320]	; (8003308 <_Z10Trajectoryv+0x368>)
 80031c8:	601a      	str	r2, [r3, #0]
			ch = 1;
 80031ca:	4b50      	ldr	r3, [pc, #320]	; (800330c <_Z10Trajectoryv+0x36c>)
 80031cc:	2201      	movs	r2, #1
 80031ce:	701a      	strb	r2, [r3, #0]
 80031d0:	e1c8      	b.n	8003564 <_Z10Trajectoryv+0x5c4>
			}
		else if(TimeinS < (timeFinal-Tb)){
 80031d2:	4b41      	ldr	r3, [pc, #260]	; (80032d8 <_Z10Trajectoryv+0x338>)
 80031d4:	ed93 7a00 	vldr	s14, [r3]
 80031d8:	4b40      	ldr	r3, [pc, #256]	; (80032dc <_Z10Trajectoryv+0x33c>)
 80031da:	edd3 7a00 	vldr	s15, [r3]
 80031de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80031e2:	4b3f      	ldr	r3, [pc, #252]	; (80032e0 <_Z10Trajectoryv+0x340>)
 80031e4:	edd3 7a00 	vldr	s15, [r3]
 80031e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f0:	f340 8092 	ble.w	8003318 <_Z10Trajectoryv+0x378>
			OutPosition = (0.5*Acceleration*(Tb*Tb)) + (Velocity*(TimeinS-Tb))+Currentpos;
 80031f4:	4b35      	ldr	r3, [pc, #212]	; (80032cc <_Z10Trajectoryv+0x32c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7fd f9a5 	bl	8000548 <__aeabi_f2d>
 80031fe:	f04f 0200 	mov.w	r2, #0
 8003202:	4b38      	ldr	r3, [pc, #224]	; (80032e4 <_Z10Trajectoryv+0x344>)
 8003204:	f7fd f9f8 	bl	80005f8 <__aeabi_dmul>
 8003208:	4602      	mov	r2, r0
 800320a:	460b      	mov	r3, r1
 800320c:	4614      	mov	r4, r2
 800320e:	461d      	mov	r5, r3
 8003210:	4b32      	ldr	r3, [pc, #200]	; (80032dc <_Z10Trajectoryv+0x33c>)
 8003212:	ed93 7a00 	vldr	s14, [r3]
 8003216:	4b31      	ldr	r3, [pc, #196]	; (80032dc <_Z10Trajectoryv+0x33c>)
 8003218:	edd3 7a00 	vldr	s15, [r3]
 800321c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003220:	ee17 0a90 	vmov	r0, s15
 8003224:	f7fd f990 	bl	8000548 <__aeabi_f2d>
 8003228:	4602      	mov	r2, r0
 800322a:	460b      	mov	r3, r1
 800322c:	4620      	mov	r0, r4
 800322e:	4629      	mov	r1, r5
 8003230:	f7fd f9e2 	bl	80005f8 <__aeabi_dmul>
 8003234:	4602      	mov	r2, r0
 8003236:	460b      	mov	r3, r1
 8003238:	4614      	mov	r4, r2
 800323a:	461d      	mov	r5, r3
 800323c:	4b28      	ldr	r3, [pc, #160]	; (80032e0 <_Z10Trajectoryv+0x340>)
 800323e:	ed93 7a00 	vldr	s14, [r3]
 8003242:	4b26      	ldr	r3, [pc, #152]	; (80032dc <_Z10Trajectoryv+0x33c>)
 8003244:	edd3 7a00 	vldr	s15, [r3]
 8003248:	ee37 7a67 	vsub.f32	s14, s14, s15
 800324c:	4b20      	ldr	r3, [pc, #128]	; (80032d0 <_Z10Trajectoryv+0x330>)
 800324e:	edd3 7a00 	vldr	s15, [r3]
 8003252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003256:	ee17 0a90 	vmov	r0, s15
 800325a:	f7fd f975 	bl	8000548 <__aeabi_f2d>
 800325e:	4602      	mov	r2, r0
 8003260:	460b      	mov	r3, r1
 8003262:	4620      	mov	r0, r4
 8003264:	4629      	mov	r1, r5
 8003266:	f7fd f811 	bl	800028c <__adddf3>
 800326a:	4602      	mov	r2, r0
 800326c:	460b      	mov	r3, r1
 800326e:	4614      	mov	r4, r2
 8003270:	461d      	mov	r5, r3
 8003272:	4b1d      	ldr	r3, [pc, #116]	; (80032e8 <_Z10Trajectoryv+0x348>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f7fd f966 	bl	8000548 <__aeabi_f2d>
 800327c:	4602      	mov	r2, r0
 800327e:	460b      	mov	r3, r1
 8003280:	4620      	mov	r0, r4
 8003282:	4629      	mov	r1, r5
 8003284:	f7fd f802 	bl	800028c <__adddf3>
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	4610      	mov	r0, r2
 800328e:	4619      	mov	r1, r3
 8003290:	f7fd fc62 	bl	8000b58 <__aeabi_d2f>
 8003294:	4603      	mov	r3, r0
 8003296:	4a15      	ldr	r2, [pc, #84]	; (80032ec <_Z10Trajectoryv+0x34c>)
 8003298:	6013      	str	r3, [r2, #0]
			OutVelocity = Velocity;
 800329a:	4b0d      	ldr	r3, [pc, #52]	; (80032d0 <_Z10Trajectoryv+0x330>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a14      	ldr	r2, [pc, #80]	; (80032f0 <_Z10Trajectoryv+0x350>)
 80032a0:	6013      	str	r3, [r2, #0]
			OutAcceleration = 0;
 80032a2:	4b14      	ldr	r3, [pc, #80]	; (80032f4 <_Z10Trajectoryv+0x354>)
 80032a4:	f04f 0200 	mov.w	r2, #0
 80032a8:	601a      	str	r2, [r3, #0]
			K_P_V = 2.0;
 80032aa:	4b13      	ldr	r3, [pc, #76]	; (80032f8 <_Z10Trajectoryv+0x358>)
 80032ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80032b0:	601a      	str	r2, [r3, #0]
			K_I_V = 0.215;
 80032b2:	4b13      	ldr	r3, [pc, #76]	; (8003300 <_Z10Trajectoryv+0x360>)
 80032b4:	4a16      	ldr	r2, [pc, #88]	; (8003310 <_Z10Trajectoryv+0x370>)
 80032b6:	601a      	str	r2, [r3, #0]
			K_D_V = 1.7;
 80032b8:	4b12      	ldr	r3, [pc, #72]	; (8003304 <_Z10Trajectoryv+0x364>)
 80032ba:	4a16      	ldr	r2, [pc, #88]	; (8003314 <_Z10Trajectoryv+0x374>)
 80032bc:	601a      	str	r2, [r3, #0]
			ch = 2;
 80032be:	4b13      	ldr	r3, [pc, #76]	; (800330c <_Z10Trajectoryv+0x36c>)
 80032c0:	2202      	movs	r2, #2
 80032c2:	701a      	strb	r2, [r3, #0]
 80032c4:	e14e      	b.n	8003564 <_Z10Trajectoryv+0x5c4>
 80032c6:	bf00      	nop
 80032c8:	200005b0 	.word	0x200005b0
 80032cc:	2000058c 	.word	0x2000058c
 80032d0:	20000588 	.word	0x20000588
 80032d4:	20000584 	.word	0x20000584
 80032d8:	200005a0 	.word	0x200005a0
 80032dc:	2000059c 	.word	0x2000059c
 80032e0:	200005a4 	.word	0x200005a4
 80032e4:	3fe00000 	.word	0x3fe00000
 80032e8:	200005a8 	.word	0x200005a8
 80032ec:	20000590 	.word	0x20000590
 80032f0:	20000594 	.word	0x20000594
 80032f4:	20000598 	.word	0x20000598
 80032f8:	2000071c 	.word	0x2000071c
 80032fc:	40200000 	.word	0x40200000
 8003300:	20000720 	.word	0x20000720
 8003304:	20000724 	.word	0x20000724
 8003308:	3f99999a 	.word	0x3f99999a
 800330c:	20000738 	.word	0x20000738
 8003310:	3e5c28f6 	.word	0x3e5c28f6
 8003314:	3fd9999a 	.word	0x3fd9999a
			}
		else if(((timeFinal-Tb) <= TimeinS) && (TimeinS <= timeFinal)){
 8003318:	4bbd      	ldr	r3, [pc, #756]	; (8003610 <_Z10Trajectoryv+0x670>)
 800331a:	ed93 7a00 	vldr	s14, [r3]
 800331e:	4bbd      	ldr	r3, [pc, #756]	; (8003614 <_Z10Trajectoryv+0x674>)
 8003320:	edd3 7a00 	vldr	s15, [r3]
 8003324:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003328:	4bbb      	ldr	r3, [pc, #748]	; (8003618 <_Z10Trajectoryv+0x678>)
 800332a:	edd3 7a00 	vldr	s15, [r3]
 800332e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003336:	f200 80ef 	bhi.w	8003518 <_Z10Trajectoryv+0x578>
 800333a:	4bb7      	ldr	r3, [pc, #732]	; (8003618 <_Z10Trajectoryv+0x678>)
 800333c:	ed93 7a00 	vldr	s14, [r3]
 8003340:	4bb3      	ldr	r3, [pc, #716]	; (8003610 <_Z10Trajectoryv+0x670>)
 8003342:	edd3 7a00 	vldr	s15, [r3]
 8003346:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800334a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800334e:	f200 80e3 	bhi.w	8003518 <_Z10Trajectoryv+0x578>
			OutPosition = (0.5*Acceleration*(Tb*Tb))+ (Velocity*(timeFinal-(2*Tb)))  + (Velocity*(TimeinS-(timeFinal-Tb))) - (0.5*Acceleration*((TimeinS-(timeFinal-Tb))*(TimeinS-(timeFinal-Tb))))+Currentpos;
 8003352:	4bb2      	ldr	r3, [pc, #712]	; (800361c <_Z10Trajectoryv+0x67c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4618      	mov	r0, r3
 8003358:	f7fd f8f6 	bl	8000548 <__aeabi_f2d>
 800335c:	f04f 0200 	mov.w	r2, #0
 8003360:	4baf      	ldr	r3, [pc, #700]	; (8003620 <_Z10Trajectoryv+0x680>)
 8003362:	f7fd f949 	bl	80005f8 <__aeabi_dmul>
 8003366:	4602      	mov	r2, r0
 8003368:	460b      	mov	r3, r1
 800336a:	4614      	mov	r4, r2
 800336c:	461d      	mov	r5, r3
 800336e:	4ba9      	ldr	r3, [pc, #676]	; (8003614 <_Z10Trajectoryv+0x674>)
 8003370:	ed93 7a00 	vldr	s14, [r3]
 8003374:	4ba7      	ldr	r3, [pc, #668]	; (8003614 <_Z10Trajectoryv+0x674>)
 8003376:	edd3 7a00 	vldr	s15, [r3]
 800337a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800337e:	ee17 0a90 	vmov	r0, s15
 8003382:	f7fd f8e1 	bl	8000548 <__aeabi_f2d>
 8003386:	4602      	mov	r2, r0
 8003388:	460b      	mov	r3, r1
 800338a:	4620      	mov	r0, r4
 800338c:	4629      	mov	r1, r5
 800338e:	f7fd f933 	bl	80005f8 <__aeabi_dmul>
 8003392:	4602      	mov	r2, r0
 8003394:	460b      	mov	r3, r1
 8003396:	4614      	mov	r4, r2
 8003398:	461d      	mov	r5, r3
 800339a:	4b9d      	ldr	r3, [pc, #628]	; (8003610 <_Z10Trajectoryv+0x670>)
 800339c:	ed93 7a00 	vldr	s14, [r3]
 80033a0:	4b9c      	ldr	r3, [pc, #624]	; (8003614 <_Z10Trajectoryv+0x674>)
 80033a2:	edd3 7a00 	vldr	s15, [r3]
 80033a6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80033aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80033ae:	4b9d      	ldr	r3, [pc, #628]	; (8003624 <_Z10Trajectoryv+0x684>)
 80033b0:	edd3 7a00 	vldr	s15, [r3]
 80033b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033b8:	ee17 0a90 	vmov	r0, s15
 80033bc:	f7fd f8c4 	bl	8000548 <__aeabi_f2d>
 80033c0:	4602      	mov	r2, r0
 80033c2:	460b      	mov	r3, r1
 80033c4:	4620      	mov	r0, r4
 80033c6:	4629      	mov	r1, r5
 80033c8:	f7fc ff60 	bl	800028c <__adddf3>
 80033cc:	4602      	mov	r2, r0
 80033ce:	460b      	mov	r3, r1
 80033d0:	4614      	mov	r4, r2
 80033d2:	461d      	mov	r5, r3
 80033d4:	4b90      	ldr	r3, [pc, #576]	; (8003618 <_Z10Trajectoryv+0x678>)
 80033d6:	ed93 7a00 	vldr	s14, [r3]
 80033da:	4b8d      	ldr	r3, [pc, #564]	; (8003610 <_Z10Trajectoryv+0x670>)
 80033dc:	edd3 6a00 	vldr	s13, [r3]
 80033e0:	4b8c      	ldr	r3, [pc, #560]	; (8003614 <_Z10Trajectoryv+0x674>)
 80033e2:	edd3 7a00 	vldr	s15, [r3]
 80033e6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80033ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80033ee:	4b8d      	ldr	r3, [pc, #564]	; (8003624 <_Z10Trajectoryv+0x684>)
 80033f0:	edd3 7a00 	vldr	s15, [r3]
 80033f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033f8:	ee17 0a90 	vmov	r0, s15
 80033fc:	f7fd f8a4 	bl	8000548 <__aeabi_f2d>
 8003400:	4602      	mov	r2, r0
 8003402:	460b      	mov	r3, r1
 8003404:	4620      	mov	r0, r4
 8003406:	4629      	mov	r1, r5
 8003408:	f7fc ff40 	bl	800028c <__adddf3>
 800340c:	4602      	mov	r2, r0
 800340e:	460b      	mov	r3, r1
 8003410:	4614      	mov	r4, r2
 8003412:	461d      	mov	r5, r3
 8003414:	4b81      	ldr	r3, [pc, #516]	; (800361c <_Z10Trajectoryv+0x67c>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	f7fd f895 	bl	8000548 <__aeabi_f2d>
 800341e:	f04f 0200 	mov.w	r2, #0
 8003422:	4b7f      	ldr	r3, [pc, #508]	; (8003620 <_Z10Trajectoryv+0x680>)
 8003424:	f7fd f8e8 	bl	80005f8 <__aeabi_dmul>
 8003428:	4602      	mov	r2, r0
 800342a:	460b      	mov	r3, r1
 800342c:	4690      	mov	r8, r2
 800342e:	4699      	mov	r9, r3
 8003430:	4b79      	ldr	r3, [pc, #484]	; (8003618 <_Z10Trajectoryv+0x678>)
 8003432:	ed93 7a00 	vldr	s14, [r3]
 8003436:	4b76      	ldr	r3, [pc, #472]	; (8003610 <_Z10Trajectoryv+0x670>)
 8003438:	edd3 6a00 	vldr	s13, [r3]
 800343c:	4b75      	ldr	r3, [pc, #468]	; (8003614 <_Z10Trajectoryv+0x674>)
 800343e:	edd3 7a00 	vldr	s15, [r3]
 8003442:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003446:	ee37 7a67 	vsub.f32	s14, s14, s15
 800344a:	4b73      	ldr	r3, [pc, #460]	; (8003618 <_Z10Trajectoryv+0x678>)
 800344c:	edd3 6a00 	vldr	s13, [r3]
 8003450:	4b6f      	ldr	r3, [pc, #444]	; (8003610 <_Z10Trajectoryv+0x670>)
 8003452:	ed93 6a00 	vldr	s12, [r3]
 8003456:	4b6f      	ldr	r3, [pc, #444]	; (8003614 <_Z10Trajectoryv+0x674>)
 8003458:	edd3 7a00 	vldr	s15, [r3]
 800345c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003460:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003464:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003468:	ee17 0a90 	vmov	r0, s15
 800346c:	f7fd f86c 	bl	8000548 <__aeabi_f2d>
 8003470:	4602      	mov	r2, r0
 8003472:	460b      	mov	r3, r1
 8003474:	4640      	mov	r0, r8
 8003476:	4649      	mov	r1, r9
 8003478:	f7fd f8be 	bl	80005f8 <__aeabi_dmul>
 800347c:	4602      	mov	r2, r0
 800347e:	460b      	mov	r3, r1
 8003480:	4620      	mov	r0, r4
 8003482:	4629      	mov	r1, r5
 8003484:	f7fc ff00 	bl	8000288 <__aeabi_dsub>
 8003488:	4602      	mov	r2, r0
 800348a:	460b      	mov	r3, r1
 800348c:	4614      	mov	r4, r2
 800348e:	461d      	mov	r5, r3
 8003490:	4b65      	ldr	r3, [pc, #404]	; (8003628 <_Z10Trajectoryv+0x688>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f7fd f857 	bl	8000548 <__aeabi_f2d>
 800349a:	4602      	mov	r2, r0
 800349c:	460b      	mov	r3, r1
 800349e:	4620      	mov	r0, r4
 80034a0:	4629      	mov	r1, r5
 80034a2:	f7fc fef3 	bl	800028c <__adddf3>
 80034a6:	4602      	mov	r2, r0
 80034a8:	460b      	mov	r3, r1
 80034aa:	4610      	mov	r0, r2
 80034ac:	4619      	mov	r1, r3
 80034ae:	f7fd fb53 	bl	8000b58 <__aeabi_d2f>
 80034b2:	4603      	mov	r3, r0
 80034b4:	4a5d      	ldr	r2, [pc, #372]	; (800362c <_Z10Trajectoryv+0x68c>)
 80034b6:	6013      	str	r3, [r2, #0]
			OutVelocity = Velocity-(Acceleration*(TimeinS-(timeFinal-Tb)));
 80034b8:	4b5a      	ldr	r3, [pc, #360]	; (8003624 <_Z10Trajectoryv+0x684>)
 80034ba:	ed93 7a00 	vldr	s14, [r3]
 80034be:	4b56      	ldr	r3, [pc, #344]	; (8003618 <_Z10Trajectoryv+0x678>)
 80034c0:	edd3 6a00 	vldr	s13, [r3]
 80034c4:	4b52      	ldr	r3, [pc, #328]	; (8003610 <_Z10Trajectoryv+0x670>)
 80034c6:	ed93 6a00 	vldr	s12, [r3]
 80034ca:	4b52      	ldr	r3, [pc, #328]	; (8003614 <_Z10Trajectoryv+0x674>)
 80034cc:	edd3 7a00 	vldr	s15, [r3]
 80034d0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80034d4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80034d8:	4b50      	ldr	r3, [pc, #320]	; (800361c <_Z10Trajectoryv+0x67c>)
 80034da:	edd3 7a00 	vldr	s15, [r3]
 80034de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034e6:	4b52      	ldr	r3, [pc, #328]	; (8003630 <_Z10Trajectoryv+0x690>)
 80034e8:	edc3 7a00 	vstr	s15, [r3]
			OutAcceleration = -Acceleration;
 80034ec:	4b4b      	ldr	r3, [pc, #300]	; (800361c <_Z10Trajectoryv+0x67c>)
 80034ee:	edd3 7a00 	vldr	s15, [r3]
 80034f2:	eef1 7a67 	vneg.f32	s15, s15
 80034f6:	4b4f      	ldr	r3, [pc, #316]	; (8003634 <_Z10Trajectoryv+0x694>)
 80034f8:	edc3 7a00 	vstr	s15, [r3]
			K_P_V = 2.0;
 80034fc:	4b4e      	ldr	r3, [pc, #312]	; (8003638 <_Z10Trajectoryv+0x698>)
 80034fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003502:	601a      	str	r2, [r3, #0]
			K_I_V = 0.215;
 8003504:	4b4d      	ldr	r3, [pc, #308]	; (800363c <_Z10Trajectoryv+0x69c>)
 8003506:	4a4e      	ldr	r2, [pc, #312]	; (8003640 <_Z10Trajectoryv+0x6a0>)
 8003508:	601a      	str	r2, [r3, #0]
			K_D_V = 1.2;
 800350a:	4b4e      	ldr	r3, [pc, #312]	; (8003644 <_Z10Trajectoryv+0x6a4>)
 800350c:	4a4e      	ldr	r2, [pc, #312]	; (8003648 <_Z10Trajectoryv+0x6a8>)
 800350e:	601a      	str	r2, [r3, #0]
			ch = 3;
 8003510:	4b4e      	ldr	r3, [pc, #312]	; (800364c <_Z10Trajectoryv+0x6ac>)
 8003512:	2203      	movs	r2, #3
 8003514:	701a      	strb	r2, [r3, #0]
 8003516:	e025      	b.n	8003564 <_Z10Trajectoryv+0x5c4>
			}
		else if(TimeinS > timeFinal){
 8003518:	4b3f      	ldr	r3, [pc, #252]	; (8003618 <_Z10Trajectoryv+0x678>)
 800351a:	ed93 7a00 	vldr	s14, [r3]
 800351e:	4b3c      	ldr	r3, [pc, #240]	; (8003610 <_Z10Trajectoryv+0x670>)
 8003520:	edd3 7a00 	vldr	s15, [r3]
 8003524:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800352c:	dd1a      	ble.n	8003564 <_Z10Trajectoryv+0x5c4>
			OutPosition = Distance+Currentpos;
 800352e:	4b48      	ldr	r3, [pc, #288]	; (8003650 <_Z10Trajectoryv+0x6b0>)
 8003530:	ed93 7a00 	vldr	s14, [r3]
 8003534:	4b3c      	ldr	r3, [pc, #240]	; (8003628 <_Z10Trajectoryv+0x688>)
 8003536:	edd3 7a00 	vldr	s15, [r3]
 800353a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800353e:	4b3b      	ldr	r3, [pc, #236]	; (800362c <_Z10Trajectoryv+0x68c>)
 8003540:	edc3 7a00 	vstr	s15, [r3]
			OutAcceleration = 0;
 8003544:	4b3b      	ldr	r3, [pc, #236]	; (8003634 <_Z10Trajectoryv+0x694>)
 8003546:	f04f 0200 	mov.w	r2, #0
 800354a:	601a      	str	r2, [r3, #0]
			K_P_V = 2.5;
 800354c:	4b3a      	ldr	r3, [pc, #232]	; (8003638 <_Z10Trajectoryv+0x698>)
 800354e:	4a41      	ldr	r2, [pc, #260]	; (8003654 <_Z10Trajectoryv+0x6b4>)
 8003550:	601a      	str	r2, [r3, #0]
			K_I_V = 0.2;
 8003552:	4b3a      	ldr	r3, [pc, #232]	; (800363c <_Z10Trajectoryv+0x69c>)
 8003554:	4a40      	ldr	r2, [pc, #256]	; (8003658 <_Z10Trajectoryv+0x6b8>)
 8003556:	601a      	str	r2, [r3, #0]
			K_D_V = 1.4;
 8003558:	4b3a      	ldr	r3, [pc, #232]	; (8003644 <_Z10Trajectoryv+0x6a4>)
 800355a:	4a40      	ldr	r2, [pc, #256]	; (800365c <_Z10Trajectoryv+0x6bc>)
 800355c:	601a      	str	r2, [r3, #0]
			ch = 4;
 800355e:	4b3b      	ldr	r3, [pc, #236]	; (800364c <_Z10Trajectoryv+0x6ac>)
 8003560:	2204      	movs	r2, #4
 8003562:	701a      	strb	r2, [r3, #0]
//			//Velocity = 1.04719755; // [From UART] Put Max Velo here
//			//Acceleration= 0.5;   // recieve frol UART
//			check = 50;
//		}
//		else
		if(Distance < 0){
 8003564:	4b3a      	ldr	r3, [pc, #232]	; (8003650 <_Z10Trajectoryv+0x6b0>)
 8003566:	edd3 7a00 	vldr	s15, [r3]
 800356a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800356e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003572:	d530      	bpl.n	80035d6 <_Z10Trajectoryv+0x636>
			//Velocity=-1.04719755; // [From UART] Put Max Velo here  (negative)
			//Velocity= -1 * Velocity;
			OutVelocity = OutVelocity * -1.0;
 8003574:	4b2e      	ldr	r3, [pc, #184]	; (8003630 <_Z10Trajectoryv+0x690>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4618      	mov	r0, r3
 800357a:	f7fc ffe5 	bl	8000548 <__aeabi_f2d>
 800357e:	4602      	mov	r2, r0
 8003580:	460b      	mov	r3, r1
 8003582:	4692      	mov	sl, r2
 8003584:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8003588:	4650      	mov	r0, sl
 800358a:	4659      	mov	r1, fp
 800358c:	f7fd fae4 	bl	8000b58 <__aeabi_d2f>
 8003590:	4603      	mov	r3, r0
 8003592:	4a27      	ldr	r2, [pc, #156]	; (8003630 <_Z10Trajectoryv+0x690>)
 8003594:	6013      	str	r3, [r2, #0]
			if(ch==4){
 8003596:	4b2d      	ldr	r3, [pc, #180]	; (800364c <_Z10Trajectoryv+0x6ac>)
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	2b04      	cmp	r3, #4
 800359c:	d10b      	bne.n	80035b6 <_Z10Trajectoryv+0x616>
				OutPosition = Distance+Currentpos;
 800359e:	4b2c      	ldr	r3, [pc, #176]	; (8003650 <_Z10Trajectoryv+0x6b0>)
 80035a0:	ed93 7a00 	vldr	s14, [r3]
 80035a4:	4b20      	ldr	r3, [pc, #128]	; (8003628 <_Z10Trajectoryv+0x688>)
 80035a6:	edd3 7a00 	vldr	s15, [r3]
 80035aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035ae:	4b1f      	ldr	r3, [pc, #124]	; (800362c <_Z10Trajectoryv+0x68c>)
 80035b0:	edc3 7a00 	vstr	s15, [r3]
 80035b4:	e00c      	b.n	80035d0 <_Z10Trajectoryv+0x630>
			}
			else{
				OutPosition = (OutPosition * -1.0)+(2*Currentpos) ;
 80035b6:	4b1c      	ldr	r3, [pc, #112]	; (8003628 <_Z10Trajectoryv+0x688>)
 80035b8:	edd3 7a00 	vldr	s15, [r3]
 80035bc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80035c0:	4b1a      	ldr	r3, [pc, #104]	; (800362c <_Z10Trajectoryv+0x68c>)
 80035c2:	edd3 7a00 	vldr	s15, [r3]
 80035c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035ca:	4b18      	ldr	r3, [pc, #96]	; (800362c <_Z10Trajectoryv+0x68c>)
 80035cc:	edc3 7a00 	vstr	s15, [r3]
			}

		    //Acceleration= -0.5;   // recieve frol UART (negative)
		    check = 100;
 80035d0:	4b23      	ldr	r3, [pc, #140]	; (8003660 <_Z10Trajectoryv+0x6c0>)
 80035d2:	2264      	movs	r2, #100	; 0x64
 80035d4:	701a      	strb	r2, [r3, #0]
		}

		////////=======>>> Tapezoidal==========//////////

		TimeinS = TimeinS + Dt;
 80035d6:	4b10      	ldr	r3, [pc, #64]	; (8003618 <_Z10Trajectoryv+0x678>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4618      	mov	r0, r3
 80035dc:	f7fc ffb4 	bl	8000548 <__aeabi_f2d>
 80035e0:	a309      	add	r3, pc, #36	; (adr r3, 8003608 <_Z10Trajectoryv+0x668>)
 80035e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e6:	f7fc fe51 	bl	800028c <__adddf3>
 80035ea:	4602      	mov	r2, r0
 80035ec:	460b      	mov	r3, r1
 80035ee:	4610      	mov	r0, r2
 80035f0:	4619      	mov	r1, r3
 80035f2:	f7fd fab1 	bl	8000b58 <__aeabi_d2f>
 80035f6:	4603      	mov	r3, r0
 80035f8:	4a07      	ldr	r2, [pc, #28]	; (8003618 <_Z10Trajectoryv+0x678>)
 80035fa:	6013      	str	r3, [r2, #0]
		//////<<< PID Tuning
		//OutVelocity = 0.523598775 ;
		//////>>> PID Tuning

		}
}
 80035fc:	bf00      	nop
 80035fe:	46bd      	mov	sp, r7
 8003600:	ecbd 8b04 	vpop	{d8-d9}
 8003604:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003608:	47ae147b 	.word	0x47ae147b
 800360c:	3f847ae1 	.word	0x3f847ae1
 8003610:	200005a0 	.word	0x200005a0
 8003614:	2000059c 	.word	0x2000059c
 8003618:	200005a4 	.word	0x200005a4
 800361c:	2000058c 	.word	0x2000058c
 8003620:	3fe00000 	.word	0x3fe00000
 8003624:	20000588 	.word	0x20000588
 8003628:	200005a8 	.word	0x200005a8
 800362c:	20000590 	.word	0x20000590
 8003630:	20000594 	.word	0x20000594
 8003634:	20000598 	.word	0x20000598
 8003638:	2000071c 	.word	0x2000071c
 800363c:	20000720 	.word	0x20000720
 8003640:	3e5c28f6 	.word	0x3e5c28f6
 8003644:	20000724 	.word	0x20000724
 8003648:	3f99999a 	.word	0x3f99999a
 800364c:	20000738 	.word	0x20000738
 8003650:	20000584 	.word	0x20000584
 8003654:	40200000 	.word	0x40200000
 8003658:	3e4ccccd 	.word	0x3e4ccccd
 800365c:	3fb33333 	.word	0x3fb33333
 8003660:	20000739 	.word	0x20000739
 8003664:	00000000 	.word	0x00000000

08003668 <_Z10Unwrappingv>:

//////////////////////// [Unwrapping] ///////////////////////
void Unwrapping(){
 8003668:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800366c:	af00      	add	r7, sp, #0

	if(micros() - TimeUnwrap >= 10000){
 800366e:	f000 fd99 	bl	80041a4 <_Z6microsv>
 8003672:	4602      	mov	r2, r0
 8003674:	460b      	mov	r3, r1
 8003676:	494e      	ldr	r1, [pc, #312]	; (80037b0 <_Z10Unwrappingv+0x148>)
 8003678:	6809      	ldr	r1, [r1, #0]
 800367a:	2000      	movs	r0, #0
 800367c:	4688      	mov	r8, r1
 800367e:	4681      	mov	r9, r0
 8003680:	ebb2 0408 	subs.w	r4, r2, r8
 8003684:	eb63 0509 	sbc.w	r5, r3, r9
 8003688:	f242 7310 	movw	r3, #10000	; 0x2710
 800368c:	429c      	cmp	r4, r3
 800368e:	f175 0300 	sbcs.w	r3, r5, #0
 8003692:	bf2c      	ite	cs
 8003694:	2301      	movcs	r3, #1
 8003696:	2300      	movcc	r3, #0
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d07c      	beq.n	8003798 <_Z10Unwrappingv+0x130>
		TimeUnwrap = micros();
 800369e:	f000 fd81 	bl	80041a4 <_Z6microsv>
 80036a2:	4602      	mov	r2, r0
 80036a4:	460b      	mov	r3, r1
 80036a6:	4b42      	ldr	r3, [pc, #264]	; (80037b0 <_Z10Unwrappingv+0x148>)
 80036a8:	601a      	str	r2, [r3, #0]
		Pn = BinPosXI * 0.006136;
 80036aa:	4b42      	ldr	r3, [pc, #264]	; (80037b4 <_Z10Unwrappingv+0x14c>)
 80036ac:	881b      	ldrh	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fc ff38 	bl	8000524 <__aeabi_i2d>
 80036b4:	a33a      	add	r3, pc, #232	; (adr r3, 80037a0 <_Z10Unwrappingv+0x138>)
 80036b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ba:	f7fc ff9d 	bl	80005f8 <__aeabi_dmul>
 80036be:	4602      	mov	r2, r0
 80036c0:	460b      	mov	r3, r1
 80036c2:	4610      	mov	r0, r2
 80036c4:	4619      	mov	r1, r3
 80036c6:	f7fd fa47 	bl	8000b58 <__aeabi_d2f>
 80036ca:	4603      	mov	r3, r0
 80036cc:	4a3a      	ldr	r2, [pc, #232]	; (80037b8 <_Z10Unwrappingv+0x150>)
 80036ce:	6013      	str	r3, [r2, #0]
		if(Pn-P_n <= -1*e){
 80036d0:	4b39      	ldr	r3, [pc, #228]	; (80037b8 <_Z10Unwrappingv+0x150>)
 80036d2:	ed93 7a00 	vldr	s14, [r3]
 80036d6:	4b39      	ldr	r3, [pc, #228]	; (80037bc <_Z10Unwrappingv+0x154>)
 80036d8:	edd3 7a00 	vldr	s15, [r3]
 80036dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036e0:	4b37      	ldr	r3, [pc, #220]	; (80037c0 <_Z10Unwrappingv+0x158>)
 80036e2:	edd3 7a00 	vldr	s15, [r3]
 80036e6:	eef1 7a67 	vneg.f32	s15, s15
 80036ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036f2:	d80b      	bhi.n	800370c <_Z10Unwrappingv+0xa4>
			P0 = P_0 + P_max;
 80036f4:	4b33      	ldr	r3, [pc, #204]	; (80037c4 <_Z10Unwrappingv+0x15c>)
 80036f6:	ed93 7a00 	vldr	s14, [r3]
 80036fa:	4b33      	ldr	r3, [pc, #204]	; (80037c8 <_Z10Unwrappingv+0x160>)
 80036fc:	edd3 7a00 	vldr	s15, [r3]
 8003700:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003704:	4b31      	ldr	r3, [pc, #196]	; (80037cc <_Z10Unwrappingv+0x164>)
 8003706:	edc3 7a00 	vstr	s15, [r3]
 800370a:	e01f      	b.n	800374c <_Z10Unwrappingv+0xe4>
		}
		else if(Pn - P_n >= e){
 800370c:	4b2a      	ldr	r3, [pc, #168]	; (80037b8 <_Z10Unwrappingv+0x150>)
 800370e:	ed93 7a00 	vldr	s14, [r3]
 8003712:	4b2a      	ldr	r3, [pc, #168]	; (80037bc <_Z10Unwrappingv+0x154>)
 8003714:	edd3 7a00 	vldr	s15, [r3]
 8003718:	ee37 7a67 	vsub.f32	s14, s14, s15
 800371c:	4b28      	ldr	r3, [pc, #160]	; (80037c0 <_Z10Unwrappingv+0x158>)
 800371e:	edd3 7a00 	vldr	s15, [r3]
 8003722:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800372a:	db0b      	blt.n	8003744 <_Z10Unwrappingv+0xdc>
			P0 = P_0 - P_max;
 800372c:	4b25      	ldr	r3, [pc, #148]	; (80037c4 <_Z10Unwrappingv+0x15c>)
 800372e:	ed93 7a00 	vldr	s14, [r3]
 8003732:	4b25      	ldr	r3, [pc, #148]	; (80037c8 <_Z10Unwrappingv+0x160>)
 8003734:	edd3 7a00 	vldr	s15, [r3]
 8003738:	ee77 7a67 	vsub.f32	s15, s14, s15
 800373c:	4b23      	ldr	r3, [pc, #140]	; (80037cc <_Z10Unwrappingv+0x164>)
 800373e:	edc3 7a00 	vstr	s15, [r3]
 8003742:	e003      	b.n	800374c <_Z10Unwrappingv+0xe4>
		}
		else{
			P0 = P_0;
 8003744:	4b1f      	ldr	r3, [pc, #124]	; (80037c4 <_Z10Unwrappingv+0x15c>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a20      	ldr	r2, [pc, #128]	; (80037cc <_Z10Unwrappingv+0x164>)
 800374a:	6013      	str	r3, [r2, #0]
		}

		OutUnwrap = Pn + P0;
 800374c:	4b1a      	ldr	r3, [pc, #104]	; (80037b8 <_Z10Unwrappingv+0x150>)
 800374e:	ed93 7a00 	vldr	s14, [r3]
 8003752:	4b1e      	ldr	r3, [pc, #120]	; (80037cc <_Z10Unwrappingv+0x164>)
 8003754:	edd3 7a00 	vldr	s15, [r3]
 8003758:	ee77 7a27 	vadd.f32	s15, s14, s15
 800375c:	4b1c      	ldr	r3, [pc, #112]	; (80037d0 <_Z10Unwrappingv+0x168>)
 800375e:	edc3 7a00 	vstr	s15, [r3]
		CurrentEn = BinPosXI * 0.00613592;
 8003762:	4b14      	ldr	r3, [pc, #80]	; (80037b4 <_Z10Unwrappingv+0x14c>)
 8003764:	881b      	ldrh	r3, [r3, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f7fc fedc 	bl	8000524 <__aeabi_i2d>
 800376c:	a30e      	add	r3, pc, #56	; (adr r3, 80037a8 <_Z10Unwrappingv+0x140>)
 800376e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003772:	f7fc ff41 	bl	80005f8 <__aeabi_dmul>
 8003776:	4602      	mov	r2, r0
 8003778:	460b      	mov	r3, r1
 800377a:	4610      	mov	r0, r2
 800377c:	4619      	mov	r1, r3
 800377e:	f7fd f9eb 	bl	8000b58 <__aeabi_d2f>
 8003782:	4603      	mov	r3, r0
 8003784:	4a13      	ldr	r2, [pc, #76]	; (80037d4 <_Z10Unwrappingv+0x16c>)
 8003786:	6013      	str	r3, [r2, #0]
		P_n = Pn;
 8003788:	4b0b      	ldr	r3, [pc, #44]	; (80037b8 <_Z10Unwrappingv+0x150>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a0b      	ldr	r2, [pc, #44]	; (80037bc <_Z10Unwrappingv+0x154>)
 800378e:	6013      	str	r3, [r2, #0]
		P_0 = P0;
 8003790:	4b0e      	ldr	r3, [pc, #56]	; (80037cc <_Z10Unwrappingv+0x164>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a0b      	ldr	r2, [pc, #44]	; (80037c4 <_Z10Unwrappingv+0x15c>)
 8003796:	6013      	str	r3, [r2, #0]
	}
}
 8003798:	bf00      	nop
 800379a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800379e:	bf00      	nop
 80037a0:	f540895d 	.word	0xf540895d
 80037a4:	3f79220f 	.word	0x3f79220f
 80037a8:	7bb1a72c 	.word	0x7bb1a72c
 80037ac:	3f7921fa 	.word	0x3f7921fa
 80037b0:	200006e8 	.word	0x200006e8
 80037b4:	20000570 	.word	0x20000570
 80037b8:	200006d8 	.word	0x200006d8
 80037bc:	200006dc 	.word	0x200006dc
 80037c0:	2000019c 	.word	0x2000019c
 80037c4:	200006d4 	.word	0x200006d4
 80037c8:	20000198 	.word	0x20000198
 80037cc:	200006d0 	.word	0x200006d0
 80037d0:	200006e0 	.word	0x200006e0
 80037d4:	200006e4 	.word	0x200006e4

080037d8 <_Z12Kalmanfilterv>:
	}
}


/////////////////////////// [Kalman Filter] ///////////////////////
void Kalmanfilter(){
 80037d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80037dc:	b0d2      	sub	sp, #328	; 0x148
 80037de:	af00      	add	r7, sp, #0

	if(micros() - TimeStampKalman >= 10000){
 80037e0:	f000 fce0 	bl	80041a4 <_Z6microsv>
 80037e4:	4602      	mov	r2, r0
 80037e6:	460b      	mov	r3, r1
 80037e8:	4992      	ldr	r1, [pc, #584]	; (8003a34 <_Z12Kalmanfilterv+0x25c>)
 80037ea:	6809      	ldr	r1, [r1, #0]
 80037ec:	2000      	movs	r0, #0
 80037ee:	4688      	mov	r8, r1
 80037f0:	4681      	mov	r9, r0
 80037f2:	ebb2 0408 	subs.w	r4, r2, r8
 80037f6:	eb63 0509 	sbc.w	r5, r3, r9
 80037fa:	f242 7310 	movw	r3, #10000	; 0x2710
 80037fe:	429c      	cmp	r4, r3
 8003800:	f175 0300 	sbcs.w	r3, r5, #0
 8003804:	bf2c      	ite	cs
 8003806:	2301      	movcs	r3, #1
 8003808:	2300      	movcc	r3, #0
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b00      	cmp	r3, #0
 800380e:	f000 810a 	beq.w	8003a26 <_Z12Kalmanfilterv+0x24e>
		 TimeStampKalman = micros();
 8003812:	f000 fcc7 	bl	80041a4 <_Z6microsv>
 8003816:	4602      	mov	r2, r0
 8003818:	460b      	mov	r3, r1
 800381a:	4b86      	ldr	r3, [pc, #536]	; (8003a34 <_Z12Kalmanfilterv+0x25c>)
 800381c:	601a      	str	r2, [r3, #0]
	//if(millis() - TimeStampKalman >= 10){
	//	TimeStampKalman = millis();
		 ////////// Predict ////////////////////
		 Q = G*Q1*G.transpose();
 800381e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003822:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003826:	4a84      	ldr	r2, [pc, #528]	; (8003a38 <_Z12Kalmanfilterv+0x260>)
 8003828:	4984      	ldr	r1, [pc, #528]	; (8003a3c <_Z12Kalmanfilterv+0x264>)
 800382a:	4618      	mov	r0, r3
 800382c:	f000 ff92 	bl	8004754 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlIfEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNS6_18promote_scalar_argIfT_XsrNS6_14has_ReturnTypeINS_20ScalarBinaryOpTraitsIfS9_NS7_IfS9_EEEEEE5valueEE4typeEEEKS2_KNS6_19plain_constant_typeIS2_SG_E4typeEEERKS9_>
 8003830:	4882      	ldr	r0, [pc, #520]	; (8003a3c <_Z12Kalmanfilterv+0x264>)
 8003832:	f000 ffc8 	bl	80047c6 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE9transposeEv>
 8003836:	4602      	mov	r2, r0
 8003838:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800383c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003840:	601a      	str	r2, [r3, #0]
 8003842:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003846:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800384a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800384e:	f107 0114 	add.w	r1, r7, #20
 8003852:	4618      	mov	r0, r3
 8003854:	f000 ffe9 	bl	800482a <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEmlINS_9TransposeIS6_EEEEKNS_7ProductISD_T_Li0EEERKNS0_ISJ_EE>
 8003858:	463b      	mov	r3, r7
 800385a:	4619      	mov	r1, r3
 800385c:	4878      	ldr	r0, [pc, #480]	; (8003a40 <_Z12Kalmanfilterv+0x268>)
 800385e:	f000 fffb 	bl	8004858 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS0_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS5_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEERS1_RKNS_9DenseBaseIT_EE>
		 X = A*X1 ;
 8003862:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003866:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800386a:	4a76      	ldr	r2, [pc, #472]	; (8003a44 <_Z12Kalmanfilterv+0x26c>)
 800386c:	4976      	ldr	r1, [pc, #472]	; (8003a48 <_Z12Kalmanfilterv+0x270>)
 800386e:	4618      	mov	r0, r3
 8003870:	f001 f801 	bl	8004876 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>
 8003874:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003878:	4619      	mov	r1, r3
 800387a:	4874      	ldr	r0, [pc, #464]	; (8003a4c <_Z12Kalmanfilterv+0x274>)
 800387c:	f001 f812 	bl	80048a4 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEES1_Li0EEEEERS1_RKNS_9DenseBaseIT_EE>
		 P = A*O*A.transpose()+Q;
 8003880:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003884:	4a72      	ldr	r2, [pc, #456]	; (8003a50 <_Z12Kalmanfilterv+0x278>)
 8003886:	4970      	ldr	r1, [pc, #448]	; (8003a48 <_Z12Kalmanfilterv+0x270>)
 8003888:	4618      	mov	r0, r3
 800388a:	f001 f81a 	bl	80048c2 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlIS2_EEKNS_7ProductIS2_T_Li0EEERKNS0_IS6_EE>
 800388e:	486e      	ldr	r0, [pc, #440]	; (8003a48 <_Z12Kalmanfilterv+0x270>)
 8003890:	f001 f82e 	bl	80048f0 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE9transposeEv>
 8003894:	4603      	mov	r3, r0
 8003896:	65bb      	str	r3, [r7, #88]	; 0x58
 8003898:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800389c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80038a0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80038a4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80038a8:	4618      	mov	r0, r3
 80038aa:	f001 f834 	bl	8004916 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEmlINS_9TransposeIS3_EEEEKNS1_IS4_T_Li0EEERKNS0_IS9_EE>
 80038ae:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80038b2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80038b6:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80038ba:	4a61      	ldr	r2, [pc, #388]	; (8003a40 <_Z12Kalmanfilterv+0x268>)
 80038bc:	4618      	mov	r0, r3
 80038be:	f001 f841 	bl	8004944 <_ZNK5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEplIS3_EEKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIfNSB_6traitsIT_E6ScalarEEEKS7_KSE_EERKNS0_ISE_EE>
 80038c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80038c6:	4619      	mov	r1, r3
 80038c8:	4862      	ldr	r0, [pc, #392]	; (8003a54 <_Z12Kalmanfilterv+0x27c>)
 80038ca:	f001 f859 	bl	8004980 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS7_IS1_S1_Li0EEENS_9TransposeIS1_EELi0EEEKS1_EEEERS1_RKNS_9DenseBaseIT_EE>

		 //////////////// Update /////////////////////
	     Z << OutUnwrap ;
 80038ce:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80038d2:	4a61      	ldr	r2, [pc, #388]	; (8003a58 <_Z12Kalmanfilterv+0x280>)
 80038d4:	4961      	ldr	r1, [pc, #388]	; (8003a5c <_Z12Kalmanfilterv+0x284>)
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 fe52 	bl	8004580 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEElsERKf>
 80038dc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80038e0:	4618      	mov	r0, r3
 80038e2:	f000 fe5c 	bl	800459e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
	//     Z << DiffVelo ;
		 K = (P*C.transpose())*(C*P*C.transpose()+R).inverse();
 80038e6:	485e      	ldr	r0, [pc, #376]	; (8003a60 <_Z12Kalmanfilterv+0x288>)
 80038e8:	f001 f859 	bl	800499e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>
 80038ec:	4603      	mov	r3, r0
 80038ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80038f2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80038f6:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80038fa:	4956      	ldr	r1, [pc, #344]	; (8003a54 <_Z12Kalmanfilterv+0x27c>)
 80038fc:	4618      	mov	r0, r3
 80038fe:	f001 f861 	bl	80049c4 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlINS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS9_EE>
 8003902:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003906:	4a53      	ldr	r2, [pc, #332]	; (8003a54 <_Z12Kalmanfilterv+0x27c>)
 8003908:	4955      	ldr	r1, [pc, #340]	; (8003a60 <_Z12Kalmanfilterv+0x288>)
 800390a:	4618      	mov	r0, r3
 800390c:	f001 f871 	bl	80049f2 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEmlINS1_IfLi3ELi3ELi0ELi3ELi3EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>
 8003910:	4853      	ldr	r0, [pc, #332]	; (8003a60 <_Z12Kalmanfilterv+0x288>)
 8003912:	f001 f844 	bl	800499e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>
 8003916:	4603      	mov	r3, r0
 8003918:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800391c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003920:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8003924:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8003928:	4618      	mov	r0, r3
 800392a:	f001 f879 	bl	8004a20 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEmlINS_9TransposeIS3_EEEEKNS1_IS5_T_Li0EEERKNS0_ISA_EE>
 800392e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8003932:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 8003936:	4a4b      	ldr	r2, [pc, #300]	; (8003a64 <_Z12Kalmanfilterv+0x28c>)
 8003938:	4618      	mov	r0, r3
 800393a:	f001 f888 	bl	8004a4e <_ZNK5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEplINS2_IfLi1ELi1ELi0ELi1ELi1EEEEEKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>
 800393e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003942:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003946:	4611      	mov	r1, r2
 8003948:	4618      	mov	r0, r3
 800394a:	f001 f8db 	bl	8004b04 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv>
 800394e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003952:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8003956:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800395a:	4618      	mov	r0, r3
 800395c:	f001 f90a 	bl	8004b74 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEmlINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEEKNS1_IS7_T_Li0EEERKNS0_ISM_EE>
 8003960:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003964:	4619      	mov	r1, r3
 8003966:	4840      	ldr	r0, [pc, #256]	; (8003a68 <_Z12Kalmanfilterv+0x290>)
 8003968:	f001 f91b 	bl	8004ba2 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_7ProductINS3_INS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS3_INS3_IS6_S4_Li0EEES7_Li0EEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS1_RKNS_9DenseBaseIT_EE>
		 X1 = X+K*(Z-C*X);
 800396c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8003970:	4a36      	ldr	r2, [pc, #216]	; (8003a4c <_Z12Kalmanfilterv+0x274>)
 8003972:	493b      	ldr	r1, [pc, #236]	; (8003a60 <_Z12Kalmanfilterv+0x288>)
 8003974:	4618      	mov	r0, r3
 8003976:	f001 f923 	bl	8004bc0 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEmlINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>
 800397a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800397e:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8003982:	4936      	ldr	r1, [pc, #216]	; (8003a5c <_Z12Kalmanfilterv+0x284>)
 8003984:	4618      	mov	r0, r3
 8003986:	f001 f932 	bl	8004bee <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEmiINS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEKNS_13CwiseBinaryOpINS_8internal20scalar_difference_opIfNSA_6traitsIT_E6ScalarEEEKS2_KSD_EERKNS0_ISD_EE>
 800398a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800398e:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8003992:	4935      	ldr	r1, [pc, #212]	; (8003a68 <_Z12Kalmanfilterv+0x290>)
 8003994:	4618      	mov	r0, r3
 8003996:	f001 f967 	bl	8004c68 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEEEEKNSB_IS2_T_Li0EEERKNS0_ISG_EE>
 800399a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800399e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80039a2:	492a      	ldr	r1, [pc, #168]	; (8003a4c <_Z12Kalmanfilterv+0x274>)
 80039a4:	4618      	mov	r0, r3
 80039a6:	f001 f98c 	bl	8004cc2 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEplINS_7ProductIS2_NS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS5_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEKNS6_INS7_13scalar_sum_opIfNS7_6traitsIT_E6ScalarEEEKS2_KSJ_EERKNS0_ISJ_EE>
 80039aa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80039ae:	4619      	mov	r1, r3
 80039b0:	4824      	ldr	r0, [pc, #144]	; (8003a44 <_Z12Kalmanfilterv+0x26c>)
 80039b2:	f001 f9a4 	bl	8004cfe <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS1_KNS_7ProductIS1_NS3_INS4_20scalar_difference_opIffEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEES1_Li0EEEEELi0EEEEEEERS1_RKNS_9DenseBaseIT_EE>
		 O = (I-(K*C))*P;
 80039b6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80039ba:	4a29      	ldr	r2, [pc, #164]	; (8003a60 <_Z12Kalmanfilterv+0x288>)
 80039bc:	492a      	ldr	r1, [pc, #168]	; (8003a68 <_Z12Kalmanfilterv+0x290>)
 80039be:	4618      	mov	r0, r3
 80039c0:	f001 f9ac 	bl	8004d1c <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>
 80039c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80039c8:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80039cc:	4927      	ldr	r1, [pc, #156]	; (8003a6c <_Z12Kalmanfilterv+0x294>)
 80039ce:	4618      	mov	r0, r3
 80039d0:	f001 f9bb 	bl	8004d4a <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmiINS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEKNS_13CwiseBinaryOpINS_8internal20scalar_difference_opIfNSA_6traitsIT_E6ScalarEEEKS2_KSD_EERKNS0_ISD_EE>
 80039d4:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80039d8:	f507 7198 	add.w	r1, r7, #304	; 0x130
 80039dc:	4a1d      	ldr	r2, [pc, #116]	; (8003a54 <_Z12Kalmanfilterv+0x27c>)
 80039de:	4618      	mov	r0, r3
 80039e0:	f001 f9f0 	bl	8004dc4 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEmlIS6_EEKNS8_ISD_T_Li0EEERKNS0_ISG_EE>
 80039e4:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80039e8:	4619      	mov	r1, r3
 80039ea:	4819      	ldr	r0, [pc, #100]	; (8003a50 <_Z12Kalmanfilterv+0x278>)
 80039ec:	f001 fa01 	bl	8004df2 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS3_INS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES1_Li0EEEEERS1_RKNS_9DenseBaseIT_EE>

		 KalP = X(0,0);
 80039f0:	2200      	movs	r2, #0
 80039f2:	2100      	movs	r1, #0
 80039f4:	4815      	ldr	r0, [pc, #84]	; (8003a4c <_Z12Kalmanfilterv+0x274>)
 80039f6:	f000 fe69 	bl	80046cc <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 80039fa:	4603      	mov	r3, r0
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a1c      	ldr	r2, [pc, #112]	; (8003a70 <_Z12Kalmanfilterv+0x298>)
 8003a00:	6013      	str	r3, [r2, #0]
		 KalV = X(1,0);
 8003a02:	2200      	movs	r2, #0
 8003a04:	2101      	movs	r1, #1
 8003a06:	4811      	ldr	r0, [pc, #68]	; (8003a4c <_Z12Kalmanfilterv+0x274>)
 8003a08:	f000 fe60 	bl	80046cc <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a18      	ldr	r2, [pc, #96]	; (8003a74 <_Z12Kalmanfilterv+0x29c>)
 8003a12:	6013      	str	r3, [r2, #0]
		 KalA = X(2,0);
 8003a14:	2200      	movs	r2, #0
 8003a16:	2102      	movs	r1, #2
 8003a18:	480c      	ldr	r0, [pc, #48]	; (8003a4c <_Z12Kalmanfilterv+0x274>)
 8003a1a:	f000 fe57 	bl	80046cc <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a15      	ldr	r2, [pc, #84]	; (8003a78 <_Z12Kalmanfilterv+0x2a0>)
 8003a24:	6013      	str	r3, [r2, #0]
		 //runtime = micros()-TimeStampKalman;

	     //ErrPos[0] = TargetDeg - BinPosXI*0.006136;
	 }

}
 8003a26:	bf00      	nop
 8003a28:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a32:	bf00      	nop
 8003a34:	200005b4 	.word	0x200005b4
 8003a38:	20000194 	.word	0x20000194
 8003a3c:	20000670 	.word	0x20000670
 8003a40:	2000067c 	.word	0x2000067c
 8003a44:	200006ac 	.word	0x200006ac
 8003a48:	200005b8 	.word	0x200005b8
 8003a4c:	200006a0 	.word	0x200006a0
 8003a50:	20000600 	.word	0x20000600
 8003a54:	200005dc 	.word	0x200005dc
 8003a58:	200006e0 	.word	0x200006e0
 8003a5c:	20000654 	.word	0x20000654
 8003a60:	20000664 	.word	0x20000664
 8003a64:	2000064c 	.word	0x2000064c
 8003a68:	20000658 	.word	0x20000658
 8003a6c:	20000624 	.word	0x20000624
 8003a70:	200006c4 	.word	0x200006c4
 8003a74:	200006c8 	.word	0x200006c8
 8003a78:	200006cc 	.word	0x200006cc

08003a7c <_Z11PIDPositionv>:

///////////////////// [PID cat cat Zero] /////////////////////////////
void PIDPosition(){
 8003a7c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003a80:	af00      	add	r7, sp, #0
	/*CrrntTime = micros();
	//DeltaTime = (CrrntTime - PreviTime) / 1000000.0; // seconds
	PreviTime = CrrntTime; // log previ here for next loop
	*/
	if(micros() - TimeStampPID_P >= 10000){
 8003a82:	f000 fb8f 	bl	80041a4 <_Z6microsv>
 8003a86:	4602      	mov	r2, r0
 8003a88:	460b      	mov	r3, r1
 8003a8a:	4936      	ldr	r1, [pc, #216]	; (8003b64 <_Z11PIDPositionv+0xe8>)
 8003a8c:	6809      	ldr	r1, [r1, #0]
 8003a8e:	2000      	movs	r0, #0
 8003a90:	4688      	mov	r8, r1
 8003a92:	4681      	mov	r9, r0
 8003a94:	ebb2 0408 	subs.w	r4, r2, r8
 8003a98:	eb63 0509 	sbc.w	r5, r3, r9
 8003a9c:	f242 7310 	movw	r3, #10000	; 0x2710
 8003aa0:	429c      	cmp	r4, r3
 8003aa2:	f175 0300 	sbcs.w	r3, r5, #0
 8003aa6:	bf2c      	ite	cs
 8003aa8:	2301      	movcs	r3, #1
 8003aaa:	2300      	movcc	r3, #0
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d055      	beq.n	8003b5e <_Z11PIDPositionv+0xe2>
		TimeStampPID_P = micros();
 8003ab2:	f000 fb77 	bl	80041a4 <_Z6microsv>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	460b      	mov	r3, r1
 8003aba:	4b2a      	ldr	r3, [pc, #168]	; (8003b64 <_Z11PIDPositionv+0xe8>)
 8003abc:	601a      	str	r2, [r3, #0]

	//if(millis() - TimeStampPID_P >= 10){
	//	TimeStampPID_P = millis();

		ErrPos[0] = OutPosition - KalP;
 8003abe:	4b2a      	ldr	r3, [pc, #168]	; (8003b68 <_Z11PIDPositionv+0xec>)
 8003ac0:	ed93 7a00 	vldr	s14, [r3]
 8003ac4:	4b29      	ldr	r3, [pc, #164]	; (8003b6c <_Z11PIDPositionv+0xf0>)
 8003ac6:	edd3 7a00 	vldr	s15, [r3]
 8003aca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ace:	4b28      	ldr	r3, [pc, #160]	; (8003b70 <_Z11PIDPositionv+0xf4>)
 8003ad0:	edc3 7a00 	vstr	s15, [r3]
	//	ErrPos[0] = OutVelocity - KalV;
		sumError = sumError + ErrPos[0];
 8003ad4:	4b26      	ldr	r3, [pc, #152]	; (8003b70 <_Z11PIDPositionv+0xf4>)
 8003ad6:	ed93 7a00 	vldr	s14, [r3]
 8003ada:	4b26      	ldr	r3, [pc, #152]	; (8003b74 <_Z11PIDPositionv+0xf8>)
 8003adc:	edd3 7a00 	vldr	s15, [r3]
 8003ae0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ae4:	4b23      	ldr	r3, [pc, #140]	; (8003b74 <_Z11PIDPositionv+0xf8>)
 8003ae6:	edc3 7a00 	vstr	s15, [r3]

		Propo = K_P * ErrPos[0];
 8003aea:	4b21      	ldr	r3, [pc, #132]	; (8003b70 <_Z11PIDPositionv+0xf4>)
 8003aec:	ed93 7a00 	vldr	s14, [r3]
 8003af0:	4b21      	ldr	r3, [pc, #132]	; (8003b78 <_Z11PIDPositionv+0xfc>)
 8003af2:	edd3 7a00 	vldr	s15, [r3]
 8003af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003afa:	4b20      	ldr	r3, [pc, #128]	; (8003b7c <_Z11PIDPositionv+0x100>)
 8003afc:	edc3 7a00 	vstr	s15, [r3]

		Integral = K_I * sumError; // Integral -Newton-Leibniz
 8003b00:	4b1f      	ldr	r3, [pc, #124]	; (8003b80 <_Z11PIDPositionv+0x104>)
 8003b02:	ed93 7a00 	vldr	s14, [r3]
 8003b06:	4b1b      	ldr	r3, [pc, #108]	; (8003b74 <_Z11PIDPositionv+0xf8>)
 8003b08:	edd3 7a00 	vldr	s15, [r3]
 8003b0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b10:	4b1c      	ldr	r3, [pc, #112]	; (8003b84 <_Z11PIDPositionv+0x108>)
 8003b12:	edc3 7a00 	vstr	s15, [r3]

		Derivate = K_D * (ErrPos[0]-ErrPos[1]); // d/dt position
 8003b16:	4b16      	ldr	r3, [pc, #88]	; (8003b70 <_Z11PIDPositionv+0xf4>)
 8003b18:	ed93 7a00 	vldr	s14, [r3]
 8003b1c:	4b14      	ldr	r3, [pc, #80]	; (8003b70 <_Z11PIDPositionv+0xf4>)
 8003b1e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b22:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b26:	4b18      	ldr	r3, [pc, #96]	; (8003b88 <_Z11PIDPositionv+0x10c>)
 8003b28:	edd3 7a00 	vldr	s15, [r3]
 8003b2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b30:	4b16      	ldr	r3, [pc, #88]	; (8003b8c <_Z11PIDPositionv+0x110>)
 8003b32:	edc3 7a00 	vstr	s15, [r3]

		ufromposit = Propo + Integral + Derivate;
 8003b36:	4b11      	ldr	r3, [pc, #68]	; (8003b7c <_Z11PIDPositionv+0x100>)
 8003b38:	ed93 7a00 	vldr	s14, [r3]
 8003b3c:	4b11      	ldr	r3, [pc, #68]	; (8003b84 <_Z11PIDPositionv+0x108>)
 8003b3e:	edd3 7a00 	vldr	s15, [r3]
 8003b42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b46:	4b11      	ldr	r3, [pc, #68]	; (8003b8c <_Z11PIDPositionv+0x110>)
 8003b48:	edd3 7a00 	vldr	s15, [r3]
 8003b4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b50:	4b0f      	ldr	r3, [pc, #60]	; (8003b90 <_Z11PIDPositionv+0x114>)
 8003b52:	edc3 7a00 	vstr	s15, [r3]

		//u_contr = ufromposit ;
		ErrPos[1] = ErrPos[0]; // log previous error
 8003b56:	4b06      	ldr	r3, [pc, #24]	; (8003b70 <_Z11PIDPositionv+0xf4>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a05      	ldr	r2, [pc, #20]	; (8003b70 <_Z11PIDPositionv+0xf4>)
 8003b5c:	6053      	str	r3, [r2, #4]
	}
}
 8003b5e:	bf00      	nop
 8003b60:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003b64:	200006ec 	.word	0x200006ec
 8003b68:	20000590 	.word	0x20000590
 8003b6c:	200006c4 	.word	0x200006c4
 8003b70:	200006f4 	.word	0x200006f4
 8003b74:	20000700 	.word	0x20000700
 8003b78:	200001a0 	.word	0x200001a0
 8003b7c:	20000704 	.word	0x20000704
 8003b80:	200001a4 	.word	0x200001a4
 8003b84:	20000708 	.word	0x20000708
 8003b88:	200001a8 	.word	0x200001a8
 8003b8c:	2000070c 	.word	0x2000070c
 8003b90:	200006fc 	.word	0x200006fc

08003b94 <_Z11PIDVelocityv>:

void PIDVelocity(){
 8003b94:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003b98:	af00      	add	r7, sp, #0

	if(micros() - TimeStampPID_V >= 10000){
 8003b9a:	f000 fb03 	bl	80041a4 <_Z6microsv>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	4930      	ldr	r1, [pc, #192]	; (8003c64 <_Z11PIDVelocityv+0xd0>)
 8003ba4:	6809      	ldr	r1, [r1, #0]
 8003ba6:	2000      	movs	r0, #0
 8003ba8:	4688      	mov	r8, r1
 8003baa:	4681      	mov	r9, r0
 8003bac:	ebb2 0408 	subs.w	r4, r2, r8
 8003bb0:	eb63 0509 	sbc.w	r5, r3, r9
 8003bb4:	f242 7310 	movw	r3, #10000	; 0x2710
 8003bb8:	429c      	cmp	r4, r3
 8003bba:	f175 0300 	sbcs.w	r3, r5, #0
 8003bbe:	bf2c      	ite	cs
 8003bc0:	2301      	movcs	r3, #1
 8003bc2:	2300      	movcc	r3, #0
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d048      	beq.n	8003c5c <_Z11PIDVelocityv+0xc8>
		TimeStampPID_V = micros();
 8003bca:	f000 faeb 	bl	80041a4 <_Z6microsv>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	4b24      	ldr	r3, [pc, #144]	; (8003c64 <_Z11PIDVelocityv+0xd0>)
 8003bd4:	601a      	str	r2, [r3, #0]
		Vcontr[1] = Vcontr[0] ;
		ErrVelo[2] = ErrVelo[1] ;
		ErrVelo[1] = ErrVelo[0] ;
		*/

		ErrVelo[0] = OutVelocity + ufromposit - KalV;
 8003bd6:	4b24      	ldr	r3, [pc, #144]	; (8003c68 <_Z11PIDVelocityv+0xd4>)
 8003bd8:	ed93 7a00 	vldr	s14, [r3]
 8003bdc:	4b23      	ldr	r3, [pc, #140]	; (8003c6c <_Z11PIDVelocityv+0xd8>)
 8003bde:	edd3 7a00 	vldr	s15, [r3]
 8003be2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003be6:	4b22      	ldr	r3, [pc, #136]	; (8003c70 <_Z11PIDVelocityv+0xdc>)
 8003be8:	edd3 7a00 	vldr	s15, [r3]
 8003bec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bf0:	4b20      	ldr	r3, [pc, #128]	; (8003c74 <_Z11PIDVelocityv+0xe0>)
 8003bf2:	edc3 7a00 	vstr	s15, [r3]
		SumAll = SumAll + ErrVelo[0];
 8003bf6:	4b1f      	ldr	r3, [pc, #124]	; (8003c74 <_Z11PIDVelocityv+0xe0>)
 8003bf8:	ed93 7a00 	vldr	s14, [r3]
 8003bfc:	4b1e      	ldr	r3, [pc, #120]	; (8003c78 <_Z11PIDVelocityv+0xe4>)
 8003bfe:	edd3 7a00 	vldr	s15, [r3]
 8003c02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c06:	4b1c      	ldr	r3, [pc, #112]	; (8003c78 <_Z11PIDVelocityv+0xe4>)
 8003c08:	edc3 7a00 	vstr	s15, [r3]

		u_contr = (K_P_V * ErrVelo[0])+(K_I_V * SumAll)+(K_D * (ErrVelo[0]-ErrVelo[1])) ;
 8003c0c:	4b19      	ldr	r3, [pc, #100]	; (8003c74 <_Z11PIDVelocityv+0xe0>)
 8003c0e:	ed93 7a00 	vldr	s14, [r3]
 8003c12:	4b1a      	ldr	r3, [pc, #104]	; (8003c7c <_Z11PIDVelocityv+0xe8>)
 8003c14:	edd3 7a00 	vldr	s15, [r3]
 8003c18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c1c:	4b18      	ldr	r3, [pc, #96]	; (8003c80 <_Z11PIDVelocityv+0xec>)
 8003c1e:	edd3 6a00 	vldr	s13, [r3]
 8003c22:	4b15      	ldr	r3, [pc, #84]	; (8003c78 <_Z11PIDVelocityv+0xe4>)
 8003c24:	edd3 7a00 	vldr	s15, [r3]
 8003c28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c30:	4b10      	ldr	r3, [pc, #64]	; (8003c74 <_Z11PIDVelocityv+0xe0>)
 8003c32:	edd3 6a00 	vldr	s13, [r3]
 8003c36:	4b0f      	ldr	r3, [pc, #60]	; (8003c74 <_Z11PIDVelocityv+0xe0>)
 8003c38:	edd3 7a01 	vldr	s15, [r3, #4]
 8003c3c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003c40:	4b10      	ldr	r3, [pc, #64]	; (8003c84 <_Z11PIDVelocityv+0xf0>)
 8003c42:	edd3 7a00 	vldr	s15, [r3]
 8003c46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c4e:	4b0e      	ldr	r3, [pc, #56]	; (8003c88 <_Z11PIDVelocityv+0xf4>)
 8003c50:	edc3 7a00 	vstr	s15, [r3]
		ErrVelo[1] = ErrVelo[0]; // log previous error
 8003c54:	4b07      	ldr	r3, [pc, #28]	; (8003c74 <_Z11PIDVelocityv+0xe0>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a06      	ldr	r2, [pc, #24]	; (8003c74 <_Z11PIDVelocityv+0xe0>)
 8003c5a:	6053      	str	r3, [r2, #4]
		}
}
 8003c5c:	bf00      	nop
 8003c5e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003c62:	bf00      	nop
 8003c64:	2000072c 	.word	0x2000072c
 8003c68:	20000594 	.word	0x20000594
 8003c6c:	200006fc 	.word	0x200006fc
 8003c70:	200006c8 	.word	0x200006c8
 8003c74:	20000710 	.word	0x20000710
 8003c78:	20000728 	.word	0x20000728
 8003c7c:	2000071c 	.word	0x2000071c
 8003c80:	20000720 	.word	0x20000720
 8003c84:	200001a8 	.word	0x200001a8
 8003c88:	20000730 	.word	0x20000730
 8003c8c:	00000000 	.word	0x00000000

08003c90 <_Z11controlloopv>:

void controlloop(){
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0

	if( abs( Finalposition - KalP) < 0.001 && abs(KalV) < 0.0005){
 8003c94:	4b2a      	ldr	r3, [pc, #168]	; (8003d40 <_Z11controlloopv+0xb0>)
 8003c96:	ed93 7a00 	vldr	s14, [r3]
 8003c9a:	4b2a      	ldr	r3, [pc, #168]	; (8003d44 <_Z11controlloopv+0xb4>)
 8003c9c:	edd3 7a00 	vldr	s15, [r3]
 8003ca0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ca4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ca8:	f7fd f928 	bl	8000efc <_ZSt3absf>
 8003cac:	ee10 3a10 	vmov	r3, s0
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7fc fc49 	bl	8000548 <__aeabi_f2d>
 8003cb6:	a31e      	add	r3, pc, #120	; (adr r3, 8003d30 <_Z11controlloopv+0xa0>)
 8003cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cbc:	f7fc ff0e 	bl	8000adc <__aeabi_dcmplt>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d015      	beq.n	8003cf2 <_Z11controlloopv+0x62>
 8003cc6:	4b20      	ldr	r3, [pc, #128]	; (8003d48 <_Z11controlloopv+0xb8>)
 8003cc8:	edd3 7a00 	vldr	s15, [r3]
 8003ccc:	eeb0 0a67 	vmov.f32	s0, s15
 8003cd0:	f7fd f914 	bl	8000efc <_ZSt3absf>
 8003cd4:	ee10 3a10 	vmov	r3, s0
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7fc fc35 	bl	8000548 <__aeabi_f2d>
 8003cde:	a316      	add	r3, pc, #88	; (adr r3, 8003d38 <_Z11controlloopv+0xa8>)
 8003ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce4:	f7fc fefa 	bl	8000adc <__aeabi_dcmplt>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <_Z11controlloopv+0x62>
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e000      	b.n	8003cf4 <_Z11controlloopv+0x64>
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d010      	beq.n	8003d1a <_Z11controlloopv+0x8a>
		PWMOut = 0;
 8003cf8:	4b14      	ldr	r3, [pc, #80]	; (8003d4c <_Z11controlloopv+0xbc>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	801a      	strh	r2, [r3, #0]
		check = 8;
 8003cfe:	4b14      	ldr	r3, [pc, #80]	; (8003d50 <_Z11controlloopv+0xc0>)
 8003d00:	2208      	movs	r2, #8
 8003d02:	701a      	strb	r2, [r3, #0]

		flagNewpos = 0;
 8003d04:	4b13      	ldr	r3, [pc, #76]	; (8003d54 <_Z11controlloopv+0xc4>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	601a      	str	r2, [r3, #0]
		flag_finishTra = 1;
 8003d0a:	4b13      	ldr	r3, [pc, #76]	; (8003d58 <_Z11controlloopv+0xc8>)
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	701a      	strb	r2, [r3, #0]
		TimeinS = 0;
 8003d10:	4b12      	ldr	r3, [pc, #72]	; (8003d5c <_Z11controlloopv+0xcc>)
 8003d12:	f04f 0200 	mov.w	r2, #0
 8003d16:	601a      	str	r2, [r3, #0]
	else{
		PIDPosition();
		PIDVelocity();
		MotDrvCytron();
	}
}
 8003d18:	e005      	b.n	8003d26 <_Z11controlloopv+0x96>
		PIDPosition();
 8003d1a:	f7ff feaf 	bl	8003a7c <_Z11PIDPositionv>
		PIDVelocity();
 8003d1e:	f7ff ff39 	bl	8003b94 <_Z11PIDVelocityv>
		MotDrvCytron();
 8003d22:	f000 f81d 	bl	8003d60 <_Z12MotDrvCytronv>
}
 8003d26:	bf00      	nop
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	f3af 8000 	nop.w
 8003d30:	d2f1a9fc 	.word	0xd2f1a9fc
 8003d34:	3f50624d 	.word	0x3f50624d
 8003d38:	d2f1a9fc 	.word	0xd2f1a9fc
 8003d3c:	3f40624d 	.word	0x3f40624d
 8003d40:	20000580 	.word	0x20000580
 8003d44:	200006c4 	.word	0x200006c4
 8003d48:	200006c8 	.word	0x200006c8
 8003d4c:	20000574 	.word	0x20000574
 8003d50:	20000739 	.word	0x20000739
 8003d54:	200005ac 	.word	0x200005ac
 8003d58:	20000504 	.word	0x20000504
 8003d5c:	200005a4 	.word	0x200005a4

08003d60 <_Z12MotDrvCytronv>:

void MotDrvCytron(){
 8003d60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003d64:	af00      	add	r7, sp, #0
	//   direction chk
	//if(u_contr > 0){mot_dirctn= 0;}
	//else if(u_contr < 0) {mot_dirctn = 1;}
	//else{PWMOut = 0;}

	if(micros() - TimeDrive >= 10000){
 8003d66:	f000 fa1d 	bl	80041a4 <_Z6microsv>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	4932      	ldr	r1, [pc, #200]	; (8003e38 <_Z12MotDrvCytronv+0xd8>)
 8003d70:	6809      	ldr	r1, [r1, #0]
 8003d72:	2000      	movs	r0, #0
 8003d74:	4688      	mov	r8, r1
 8003d76:	4681      	mov	r9, r0
 8003d78:	ebb2 0408 	subs.w	r4, r2, r8
 8003d7c:	eb63 0509 	sbc.w	r5, r3, r9
 8003d80:	f242 7310 	movw	r3, #10000	; 0x2710
 8003d84:	429c      	cmp	r4, r3
 8003d86:	f175 0300 	sbcs.w	r3, r5, #0
 8003d8a:	bf2c      	ite	cs
 8003d8c:	2301      	movcs	r3, #1
 8003d8e:	2300      	movcc	r3, #0
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d049      	beq.n	8003e2a <_Z12MotDrvCytronv+0xca>
			TimeDrive = micros();
 8003d96:	f000 fa05 	bl	80041a4 <_Z6microsv>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	4b26      	ldr	r3, [pc, #152]	; (8003e38 <_Z12MotDrvCytronv+0xd8>)
 8003da0:	601a      	str	r2, [r3, #0]
			u_contr = u_contr * 833.3;
 8003da2:	4b26      	ldr	r3, [pc, #152]	; (8003e3c <_Z12MotDrvCytronv+0xdc>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fc fbce 	bl	8000548 <__aeabi_f2d>
 8003dac:	a320      	add	r3, pc, #128	; (adr r3, 8003e30 <_Z12MotDrvCytronv+0xd0>)
 8003dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db2:	f7fc fc21 	bl	80005f8 <__aeabi_dmul>
 8003db6:	4602      	mov	r2, r0
 8003db8:	460b      	mov	r3, r1
 8003dba:	4610      	mov	r0, r2
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	f7fc fecb 	bl	8000b58 <__aeabi_d2f>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	4a1d      	ldr	r2, [pc, #116]	; (8003e3c <_Z12MotDrvCytronv+0xdc>)
 8003dc6:	6013      	str	r3, [r2, #0]
			// u_contr = 2500;
			if(u_contr > 0){
 8003dc8:	4b1c      	ldr	r3, [pc, #112]	; (8003e3c <_Z12MotDrvCytronv+0xdc>)
 8003dca:	edd3 7a00 	vldr	s15, [r3]
 8003dce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dd6:	dd03      	ble.n	8003de0 <_Z12MotDrvCytronv+0x80>
				mot_dirctn= 1;
 8003dd8:	4b19      	ldr	r3, [pc, #100]	; (8003e40 <_Z12MotDrvCytronv+0xe0>)
 8003dda:	2201      	movs	r2, #1
 8003ddc:	701a      	strb	r2, [r3, #0]
 8003dde:	e00e      	b.n	8003dfe <_Z12MotDrvCytronv+0x9e>
			}
			else if(u_contr < 0) {
 8003de0:	4b16      	ldr	r3, [pc, #88]	; (8003e3c <_Z12MotDrvCytronv+0xdc>)
 8003de2:	edd3 7a00 	vldr	s15, [r3]
 8003de6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dee:	d503      	bpl.n	8003df8 <_Z12MotDrvCytronv+0x98>
				mot_dirctn = 0;
 8003df0:	4b13      	ldr	r3, [pc, #76]	; (8003e40 <_Z12MotDrvCytronv+0xe0>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	701a      	strb	r2, [r3, #0]
 8003df6:	e002      	b.n	8003dfe <_Z12MotDrvCytronv+0x9e>
			}
			else{
				PWMOut = 0;
 8003df8:	4b12      	ldr	r3, [pc, #72]	; (8003e44 <_Z12MotDrvCytronv+0xe4>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	801a      	strh	r2, [r3, #0]
			}
	// speed
	PWMOut= (int)fabsf(u_contr); // Absolute int
 8003dfe:	4b0f      	ldr	r3, [pc, #60]	; (8003e3c <_Z12MotDrvCytronv+0xdc>)
 8003e00:	edd3 7a00 	vldr	s15, [r3]
 8003e04:	eef0 7ae7 	vabs.f32	s15, s15
 8003e08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e0c:	ee17 3a90 	vmov	r3, s15
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	4b0c      	ldr	r3, [pc, #48]	; (8003e44 <_Z12MotDrvCytronv+0xe4>)
 8003e14:	801a      	strh	r2, [r3, #0]
	if(PWMOut > 5000){PWMOut = 5000;} // saturate 50% gear 1:6 - 120rpm => 10rpm
 8003e16:	4b0b      	ldr	r3, [pc, #44]	; (8003e44 <_Z12MotDrvCytronv+0xe4>)
 8003e18:	881b      	ldrh	r3, [r3, #0]
 8003e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d903      	bls.n	8003e2a <_Z12MotDrvCytronv+0xca>
 8003e22:	4b08      	ldr	r3, [pc, #32]	; (8003e44 <_Z12MotDrvCytronv+0xe4>)
 8003e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e28:	801a      	strh	r2, [r3, #0]
	//if(PWMOut < 1600 ){PWMOut = 1600;} //pvnt too low pwm that can't drive mot
	//&& fabsf(ErrPos[0]) >= 4
	//if(flag_finishTra == 1){PWMOut = 0;}
	}
}
 8003e2a:	bf00      	nop
 8003e2c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003e30:	66666666 	.word	0x66666666
 8003e34:	408a0a66 	.word	0x408a0a66
 8003e38:	20000734 	.word	0x20000734
 8003e3c:	20000730 	.word	0x20000730
 8003e40:	2000057c 	.word	0x2000057c
 8003e44:	20000574 	.word	0x20000574

08003e48 <_Z13GraytoBinarioth>:

///////////////////// [Abs Encoder I2C] ////////////////////////////////////////////
////////// [Absolute Encoder] ////////////////////////////////////////////
uint16_t GraytoBinario(uint16_t grayx,uint8_t numbit){ // numbit=10
 8003e48:	b480      	push	{r7}
 8003e4a:	b087      	sub	sp, #28
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	4603      	mov	r3, r0
 8003e50:	460a      	mov	r2, r1
 8003e52:	80fb      	strh	r3, [r7, #6]
 8003e54:	4613      	mov	r3, r2
 8003e56:	717b      	strb	r3, [r7, #5]

	uint16_t binaryout = 0b0;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	82fb      	strh	r3, [r7, #22]

    binaryout = (grayx >> (numbit-1))&0x01;
 8003e5c:	88fa      	ldrh	r2, [r7, #6]
 8003e5e:	797b      	ldrb	r3, [r7, #5]
 8003e60:	3b01      	subs	r3, #1
 8003e62:	fa42 f303 	asr.w	r3, r2, r3
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	82fb      	strh	r3, [r7, #22]
    //std::cout << binaryout << std::endl;

    for (int i = 1; i < numbit ;i++){
 8003e6e:	2301      	movs	r3, #1
 8003e70:	613b      	str	r3, [r7, #16]
 8003e72:	797b      	ldrb	r3, [r7, #5]
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	da1e      	bge.n	8003eb8 <_Z13GraytoBinarioth+0x70>
        /* XOR operation */
        int cp1 = binaryout&0x01 ;//>> (numbit-i)
 8003e7a:	8afb      	ldrh	r3, [r7, #22]
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	60fb      	str	r3, [r7, #12]
        int cp2 = grayx >> (numbit-(i+1))&0x01; //
 8003e82:	88fa      	ldrh	r2, [r7, #6]
 8003e84:	7979      	ldrb	r1, [r7, #5]
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	3301      	adds	r3, #1
 8003e8a:	1acb      	subs	r3, r1, r3
 8003e8c:	fa42 f303 	asr.w	r3, r2, r3
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	60bb      	str	r3, [r7, #8]

        if (cp1 == cp2)
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d103      	bne.n	8003ea6 <_Z13GraytoBinarioth+0x5e>
            {binaryout = (binaryout << 1) + 0; } //qd = 0;
 8003e9e:	8afb      	ldrh	r3, [r7, #22]
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	82fb      	strh	r3, [r7, #22]
 8003ea4:	e004      	b.n	8003eb0 <_Z13GraytoBinarioth+0x68>
        else
            {binaryout = (binaryout << 1) + 1; } //qd = 1;
 8003ea6:	8afb      	ldrh	r3, [r7, #22]
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	3301      	adds	r3, #1
 8003eae:	82fb      	strh	r3, [r7, #22]
    for (int i = 1; i < numbit ;i++){
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	613b      	str	r3, [r7, #16]
 8003eb6:	e7dc      	b.n	8003e72 <_Z13GraytoBinarioth+0x2a>
        //std::cout << "cp" << i << " " << cp1 << cp2 << " " << qd << "  "<<binaryout << std::endl;
    }
    //BinPos = binaryout;
    return binaryout;
 8003eb8:	8afb      	ldrh	r3, [r7, #22]
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	371c      	adds	r7, #28
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
	...

08003ec8 <_Z14IOExpenderInitv>:

void IOExpenderInit() {// call when start system
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af04      	add	r7, sp, #16
			0x00, 0x00, 0x00, 0x00,
			0x00, // 0x12 GPIOA
			0x00, // 0x13 GPIOB
			0x00, 0x00 };
	// OLATB -> Out data for pinB
	HAL_I2C_Mem_Write(&hi2c1, ADDR_IOXT, 0x00, I2C_MEMADD_SIZE_8BIT, Xetting,
 8003ece:	2364      	movs	r3, #100	; 0x64
 8003ed0:	9302      	str	r3, [sp, #8]
 8003ed2:	2316      	movs	r3, #22
 8003ed4:	9301      	str	r3, [sp, #4]
 8003ed6:	4b05      	ldr	r3, [pc, #20]	; (8003eec <_Z14IOExpenderInitv+0x24>)
 8003ed8:	9300      	str	r3, [sp, #0]
 8003eda:	2301      	movs	r3, #1
 8003edc:	2200      	movs	r2, #0
 8003ede:	2140      	movs	r1, #64	; 0x40
 8003ee0:	4803      	ldr	r0, [pc, #12]	; (8003ef0 <_Z14IOExpenderInitv+0x28>)
 8003ee2:	f013 fc9d 	bl	8017820 <HAL_I2C_Mem_Write>
			0x16, 100);

}
 8003ee6:	bf00      	nop
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	200001c8 	.word	0x200001c8
 8003ef0:	20000274 	.word	0x20000274

08003ef4 <_Z14AbsEncI2CReadxPh>:

void AbsEncI2CReadx(uint8_t *RawRAB){
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af04      	add	r7, sp, #16
 8003efa:	6078      	str	r0, [r7, #4]

	if(flag_absenc != 0 && hi2c1.State == HAL_I2C_STATE_READY){
 8003efc:	4b22      	ldr	r3, [pc, #136]	; (8003f88 <_Z14AbsEncI2CReadxPh+0x94>)
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d007      	beq.n	8003f14 <_Z14AbsEncI2CReadxPh+0x20>
 8003f04:	4b21      	ldr	r3, [pc, #132]	; (8003f8c <_Z14AbsEncI2CReadxPh+0x98>)
 8003f06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b20      	cmp	r3, #32
 8003f0e:	d101      	bne.n	8003f14 <_Z14AbsEncI2CReadxPh+0x20>
 8003f10:	2301      	movs	r3, #1
 8003f12:	e000      	b.n	8003f16 <_Z14AbsEncI2CReadxPh+0x22>
 8003f14:	2300      	movs	r3, #0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d032      	beq.n	8003f80 <_Z14AbsEncI2CReadxPh+0x8c>

		HAL_I2C_Mem_Read(&hi2c1, ADDR_IOXT, 0x12, I2C_MEMADD_SIZE_8BIT,
 8003f1a:	2364      	movs	r3, #100	; 0x64
 8003f1c:	9302      	str	r3, [sp, #8]
 8003f1e:	2302      	movs	r3, #2
 8003f20:	9301      	str	r3, [sp, #4]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	2301      	movs	r3, #1
 8003f28:	2212      	movs	r2, #18
 8003f2a:	2140      	movs	r1, #64	; 0x40
 8003f2c:	4817      	ldr	r0, [pc, #92]	; (8003f8c <_Z14AbsEncI2CReadxPh+0x98>)
 8003f2e:	f013 fd71 	bl	8017a14 <HAL_I2C_Mem_Read>
								RawRAB, 2, 100);

		GrayCBitXI = (RawEnBitAB[1] << 8) | RawEnBitAB[0]; // GrayCBitx
 8003f32:	4b17      	ldr	r3, [pc, #92]	; (8003f90 <_Z14AbsEncI2CReadxPh+0x9c>)
 8003f34:	785b      	ldrb	r3, [r3, #1]
 8003f36:	021b      	lsls	r3, r3, #8
 8003f38:	b21a      	sxth	r2, r3
 8003f3a:	4b15      	ldr	r3, [pc, #84]	; (8003f90 <_Z14AbsEncI2CReadxPh+0x9c>)
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	b21b      	sxth	r3, r3
 8003f40:	4313      	orrs	r3, r2
 8003f42:	b21b      	sxth	r3, r3
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	4b13      	ldr	r3, [pc, #76]	; (8003f94 <_Z14AbsEncI2CReadxPh+0xa0>)
 8003f48:	801a      	strh	r2, [r3, #0]
		// 1023- to reverse
		BinPosXI = 1023 - (GraytoBinario(GrayCBitXI, 10) + POSOFFSET) ;//
 8003f4a:	4b12      	ldr	r3, [pc, #72]	; (8003f94 <_Z14AbsEncI2CReadxPh+0xa0>)
 8003f4c:	881b      	ldrh	r3, [r3, #0]
 8003f4e:	210a      	movs	r1, #10
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7ff ff79 	bl	8003e48 <_Z13GraytoBinarioth>
 8003f56:	4603      	mov	r3, r0
 8003f58:	f1c3 0376 	rsb	r3, r3, #118	; 0x76
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	4b0e      	ldr	r3, [pc, #56]	; (8003f98 <_Z14AbsEncI2CReadxPh+0xa4>)
 8003f60:	801a      	strh	r2, [r3, #0]
		if (BinPosXI >= 1024){BinPosXI %= 1024;}
 8003f62:	4b0d      	ldr	r3, [pc, #52]	; (8003f98 <_Z14AbsEncI2CReadxPh+0xa4>)
 8003f64:	881b      	ldrh	r3, [r3, #0]
 8003f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f6a:	d306      	bcc.n	8003f7a <_Z14AbsEncI2CReadxPh+0x86>
 8003f6c:	4b0a      	ldr	r3, [pc, #40]	; (8003f98 <_Z14AbsEncI2CReadxPh+0xa4>)
 8003f6e:	881b      	ldrh	r3, [r3, #0]
 8003f70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	4b08      	ldr	r3, [pc, #32]	; (8003f98 <_Z14AbsEncI2CReadxPh+0xa4>)
 8003f78:	801a      	strh	r2, [r3, #0]

		flag_absenc = 0;
 8003f7a:	4b03      	ldr	r3, [pc, #12]	; (8003f88 <_Z14AbsEncI2CReadxPh+0x94>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	701a      	strb	r2, [r3, #0]
//			flag_absenc = 0;
//		break;
//
//		}
	}
}
 8003f80:	bf00      	nop
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	20000572 	.word	0x20000572
 8003f8c:	20000274 	.word	0x20000274
 8003f90:	2000056c 	.word	0x2000056c
 8003f94:	2000056e 	.word	0x2000056e
 8003f98:	20000570 	.word	0x20000570

08003f9c <_Z13Efft_activatev>:

/////////////////////// [End Effector] //////////////////////////////////

void Efft_activate(){
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af02      	add	r7, sp, #8
	uint8_t cmmd = 0x45;
 8003fa2:	2345      	movs	r3, #69	; 0x45
 8003fa4:	71fb      	strb	r3, [r7, #7]

	static enum{ef_INIT, ef_shoot} efshoot = ef_INIT;


	switch(efshoot){
 8003fa6:	4b25      	ldr	r3, [pc, #148]	; (800403c <_Z13Efft_activatev+0xa0>)
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d025      	beq.n	8003ffa <_Z13Efft_activatev+0x5e>
	default:
	case ef_INIT:
		if(flag_efftDis == 1){
 8003fae:	4b24      	ldr	r3, [pc, #144]	; (8004040 <_Z13Efft_activatev+0xa4>)
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d106      	bne.n	8003fc4 <_Z13Efft_activatev+0x28>
			flag_efftActi = 0;
 8003fb6:	4b23      	ldr	r3, [pc, #140]	; (8004044 <_Z13Efft_activatev+0xa8>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	701a      	strb	r2, [r3, #0]
			efshoot = ef_INIT;
 8003fbc:	4b1f      	ldr	r3, [pc, #124]	; (800403c <_Z13Efft_activatev+0xa0>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	701a      	strb	r2, [r3, #0]
			//HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &cmmd, 1, I2C_FIRST_AND_LAST_FRAME);
			//HAL_I2C_Master_Transmit(&hi2c3, ADDR_EFFT, &cmmd, 2, 100);
			efshoot = ef_shoot;
			}
		}
	break;
 8003fc2:	e034      	b.n	800402e <_Z13Efft_activatev+0x92>
		if(flag_efftActi != 0 && hi2c3.State == HAL_I2C_STATE_READY){
 8003fc4:	4b1f      	ldr	r3, [pc, #124]	; (8004044 <_Z13Efft_activatev+0xa8>)
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d007      	beq.n	8003fdc <_Z13Efft_activatev+0x40>
 8003fcc:	4b1e      	ldr	r3, [pc, #120]	; (8004048 <_Z13Efft_activatev+0xac>)
 8003fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b20      	cmp	r3, #32
 8003fd6:	d101      	bne.n	8003fdc <_Z13Efft_activatev+0x40>
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e000      	b.n	8003fde <_Z13Efft_activatev+0x42>
 8003fdc:	2300      	movs	r3, #0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d025      	beq.n	800402e <_Z13Efft_activatev+0x92>
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &cmmd, 0, I2C_FIRST_FRAME);
 8003fe2:	1dfa      	adds	r2, r7, #7
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	9300      	str	r3, [sp, #0]
 8003fe8:	2300      	movs	r3, #0
 8003fea:	2146      	movs	r1, #70	; 0x46
 8003fec:	4816      	ldr	r0, [pc, #88]	; (8004048 <_Z13Efft_activatev+0xac>)
 8003fee:	f013 ff37 	bl	8017e60 <HAL_I2C_Master_Seq_Transmit_IT>
			efshoot = ef_shoot;
 8003ff2:	4b12      	ldr	r3, [pc, #72]	; (800403c <_Z13Efft_activatev+0xa0>)
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	701a      	strb	r2, [r3, #0]
	break;
 8003ff8:	e019      	b.n	800402e <_Z13Efft_activatev+0x92>

	case ef_shoot:
		if (hi2c3.State == HAL_I2C_STATE_READY){
 8003ffa:	4b13      	ldr	r3, [pc, #76]	; (8004048 <_Z13Efft_activatev+0xac>)
 8003ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b20      	cmp	r3, #32
 8004004:	bf0c      	ite	eq
 8004006:	2301      	moveq	r3, #1
 8004008:	2300      	movne	r3, #0
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b00      	cmp	r3, #0
 800400e:	d010      	beq.n	8004032 <_Z13Efft_activatev+0x96>
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &cmmd, 1, I2C_LAST_FRAME);
 8004010:	1dfa      	adds	r2, r7, #7
 8004012:	2320      	movs	r3, #32
 8004014:	9300      	str	r3, [sp, #0]
 8004016:	2301      	movs	r3, #1
 8004018:	2146      	movs	r1, #70	; 0x46
 800401a:	480b      	ldr	r0, [pc, #44]	; (8004048 <_Z13Efft_activatev+0xac>)
 800401c:	f013 ff20 	bl	8017e60 <HAL_I2C_Master_Seq_Transmit_IT>
			efshoot = ef_INIT;
 8004020:	4b06      	ldr	r3, [pc, #24]	; (800403c <_Z13Efft_activatev+0xa0>)
 8004022:	2200      	movs	r2, #0
 8004024:	701a      	strb	r2, [r3, #0]
			flag_efftActi = 0;
 8004026:	4b07      	ldr	r3, [pc, #28]	; (8004044 <_Z13Efft_activatev+0xa8>)
 8004028:	2200      	movs	r2, #0
 800402a:	701a      	strb	r2, [r3, #0]
			//trig_efftRead = 1;
		}
	break;
 800402c:	e001      	b.n	8004032 <_Z13Efft_activatev+0x96>
	break;
 800402e:	bf00      	nop
 8004030:	e000      	b.n	8004034 <_Z13Efft_activatev+0x98>
	break;
 8004032:	bf00      	nop
	}
}
 8004034:	bf00      	nop
 8004036:	3708      	adds	r7, #8
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	200007df 	.word	0x200007df
 8004040:	200001ac 	.word	0x200001ac
 8004044:	2000073b 	.word	0x2000073b
 8004048:	200002c8 	.word	0x200002c8

0800404c <_Z9Efft_readPh>:

void Efft_read(uint8_t *Rddata){
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af02      	add	r7, sp, #8
 8004052:	6078      	str	r0, [r7, #4]
		//HAL_I2C_Mem_Read(&hi2c1, ADDR_EFFT, &readRQ, I2C_MEMADD_SIZE_8BIT, Rddata, 1, 100);
		flag_efftRead = 0;
	}
	*/
	static uint8_t efrdStatus = 0;
	switch(efrdStatus){
 8004054:	4b1f      	ldr	r3, [pc, #124]	; (80040d4 <_Z9Efft_readPh+0x88>)
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d01a      	beq.n	8004092 <_Z9Efft_readPh+0x46>
	default:
	case 0:
		if (flag_efftRead != 0 && hi2c3.State == HAL_I2C_STATE_READY){
 800405c:	4b1e      	ldr	r3, [pc, #120]	; (80040d8 <_Z9Efft_readPh+0x8c>)
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d007      	beq.n	8004074 <_Z9Efft_readPh+0x28>
 8004064:	4b1d      	ldr	r3, [pc, #116]	; (80040dc <_Z9Efft_readPh+0x90>)
 8004066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b20      	cmp	r3, #32
 800406e:	d101      	bne.n	8004074 <_Z9Efft_readPh+0x28>
 8004070:	2301      	movs	r3, #1
 8004072:	e000      	b.n	8004076 <_Z9Efft_readPh+0x2a>
 8004074:	2300      	movs	r3, #0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d025      	beq.n	80040c6 <_Z9Efft_readPh+0x7a>
			//HAL_I2C_Master_Transmit_IT(&hi2c3, ADDR_EFFT, 0x23, 1);
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &readRQ, 1, I2C_FIRST_AND_NEXT_FRAME);
 800407a:	2302      	movs	r3, #2
 800407c:	9300      	str	r3, [sp, #0]
 800407e:	2301      	movs	r3, #1
 8004080:	4a17      	ldr	r2, [pc, #92]	; (80040e0 <_Z9Efft_readPh+0x94>)
 8004082:	2146      	movs	r1, #70	; 0x46
 8004084:	4815      	ldr	r0, [pc, #84]	; (80040dc <_Z9Efft_readPh+0x90>)
 8004086:	f013 feeb 	bl	8017e60 <HAL_I2C_Master_Seq_Transmit_IT>
			//HAL_I2C_Master_Transmit(&hi2c3, ADDR_EFFT, &readRQ, 2, 100);
			//HAL_I2C_Master_Seq_Transmit_DMA(&hi2c3, ADDR_EFFT, &readRQ, 1, I2C_FIRST_AND_NEXT_FRAME);
			efrdStatus = 1;
 800408a:	4b12      	ldr	r3, [pc, #72]	; (80040d4 <_Z9Efft_readPh+0x88>)
 800408c:	2201      	movs	r2, #1
 800408e:	701a      	strb	r2, [r3, #0]
		}
	break;
 8004090:	e019      	b.n	80040c6 <_Z9Efft_readPh+0x7a>

	case 1:

		if (hi2c3.State == HAL_I2C_STATE_READY){
 8004092:	4b12      	ldr	r3, [pc, #72]	; (80040dc <_Z9Efft_readPh+0x90>)
 8004094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b20      	cmp	r3, #32
 800409c:	bf0c      	ite	eq
 800409e:	2301      	moveq	r3, #1
 80040a0:	2300      	movne	r3, #0
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d010      	beq.n	80040ca <_Z9Efft_readPh+0x7e>
			HAL_I2C_Master_Seq_Receive_IT(&hi2c3, ADDR_EFFT, Rddata, 1, I2C_LAST_FRAME);
 80040a8:	2320      	movs	r3, #32
 80040aa:	9300      	str	r3, [sp, #0]
 80040ac:	2301      	movs	r3, #1
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	2146      	movs	r1, #70	; 0x46
 80040b2:	480a      	ldr	r0, [pc, #40]	; (80040dc <_Z9Efft_readPh+0x90>)
 80040b4:	f013 ff9a 	bl	8017fec <HAL_I2C_Master_Seq_Receive_IT>
			//HAL_I2C_Master_Seq_Receive_DMA(&hi2c3, ADDR_EFFT, Rddata, 1, I2C_LAST_FRAME);
			//HAL_I2C_Master_Receive(&hi2c3, ADDR_EFFT ,Rddata, 1, 100);
		flag_efftRead = 0;
 80040b8:	4b07      	ldr	r3, [pc, #28]	; (80040d8 <_Z9Efft_readPh+0x8c>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	701a      	strb	r2, [r3, #0]
		efrdStatus = 0;
 80040be:	4b05      	ldr	r3, [pc, #20]	; (80040d4 <_Z9Efft_readPh+0x88>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	701a      	strb	r2, [r3, #0]
			}
	break;
 80040c4:	e001      	b.n	80040ca <_Z9Efft_readPh+0x7e>
	break;
 80040c6:	bf00      	nop
 80040c8:	e000      	b.n	80040cc <_Z9Efft_readPh+0x80>
	break;
 80040ca:	bf00      	nop
	}

}
 80040cc:	bf00      	nop
 80040ce:	3708      	adds	r7, #8
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	200007e0 	.word	0x200007e0
 80040d8:	2000073c 	.word	0x2000073c
 80040dc:	200002c8 	.word	0x200002c8
 80040e0:	200001de 	.word	0x200001de

080040e4 <HAL_GPIO_EXTI_Callback>:

/////////////// Emer Interrupt /////////////////////////////////
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	4603      	mov	r3, r0
 80040ec:	80fb      	strh	r3, [r7, #6]
	//============// EMER ////=====================
	if(GPIO_Pin == GPIO_PIN_11){
 80040ee:	88fb      	ldrh	r3, [r7, #6]
 80040f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040f4:	d108      	bne.n	8004108 <HAL_GPIO_EXTI_Callback+0x24>
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
		grandState = emer;
 80040f6:	4b27      	ldr	r3, [pc, #156]	; (8004194 <HAL_GPIO_EXTI_Callback+0xb0>)
 80040f8:	2203      	movs	r2, #3
 80040fa:	701a      	strb	r2, [r3, #0]
		bluecounter = 0;
 80040fc:	4b26      	ldr	r3, [pc, #152]	; (8004198 <HAL_GPIO_EXTI_Callback+0xb4>)
 80040fe:	2200      	movs	r2, #0
 8004100:	701a      	strb	r2, [r3, #0]
		PWMOut = 0;
 8004102:	4b26      	ldr	r3, [pc, #152]	; (800419c <HAL_GPIO_EXTI_Callback+0xb8>)
 8004104:	2200      	movs	r2, #0
 8004106:	801a      	strh	r2, [r3, #0]
		// Motor Driver Torque Lock here
	}
	//=============// Stop ////======================
	if(GPIO_Pin == GPIO_PIN_10){
 8004108:	88fb      	ldrh	r3, [r7, #6]
 800410a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800410e:	d110      	bne.n	8004132 <HAL_GPIO_EXTI_Callback+0x4e>
		PWMOut = 0;
 8004110:	4b22      	ldr	r3, [pc, #136]	; (800419c <HAL_GPIO_EXTI_Callback+0xb8>)
 8004112:	2200      	movs	r2, #0
 8004114:	801a      	strh	r2, [r3, #0]
		bluecounter = 0;
 8004116:	4b20      	ldr	r3, [pc, #128]	; (8004198 <HAL_GPIO_EXTI_Callback+0xb4>)
 8004118:	2200      	movs	r2, #0
 800411a:	701a      	strb	r2, [r3, #0]
		if(grandState == work){grandState = stopnd;}
 800411c:	4b1d      	ldr	r3, [pc, #116]	; (8004194 <HAL_GPIO_EXTI_Callback+0xb0>)
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d103      	bne.n	800412c <HAL_GPIO_EXTI_Callback+0x48>
 8004124:	4b1b      	ldr	r3, [pc, #108]	; (8004194 <HAL_GPIO_EXTI_Callback+0xb0>)
 8004126:	2204      	movs	r2, #4
 8004128:	701a      	strb	r2, [r3, #0]
 800412a:	e002      	b.n	8004132 <HAL_GPIO_EXTI_Callback+0x4e>
		else{grandState = stop;}
 800412c:	4b19      	ldr	r3, [pc, #100]	; (8004194 <HAL_GPIO_EXTI_Callback+0xb0>)
 800412e:	2202      	movs	r2, #2
 8004130:	701a      	strb	r2, [r3, #0]

		}
	//=========// work Blue button //=========//
	if(GPIO_Pin == GPIO_PIN_13){
 8004132:	88fb      	ldrh	r3, [r7, #6]
 8004134:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004138:	d120      	bne.n	800417c <HAL_GPIO_EXTI_Callback+0x98>
		bluecounter++;
 800413a:	4b17      	ldr	r3, [pc, #92]	; (8004198 <HAL_GPIO_EXTI_Callback+0xb4>)
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	3301      	adds	r3, #1
 8004140:	b2da      	uxtb	r2, r3
 8004142:	4b15      	ldr	r3, [pc, #84]	; (8004198 <HAL_GPIO_EXTI_Callback+0xb4>)
 8004144:	701a      	strb	r2, [r3, #0]

		////===== Zero Calibrate Func /////////////
		if (bluecounter % 2 == 0){
 8004146:	4b14      	ldr	r3, [pc, #80]	; (8004198 <HAL_GPIO_EXTI_Callback+0xb4>)
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b00      	cmp	r3, #0
 8004150:	d111      	bne.n	8004176 <HAL_GPIO_EXTI_Callback+0x92>
			PWMOut = 1100;
 8004152:	4b12      	ldr	r3, [pc, #72]	; (800419c <HAL_GPIO_EXTI_Callback+0xb8>)
 8004154:	f240 424c 	movw	r2, #1100	; 0x44c
 8004158:	801a      	strh	r2, [r3, #0]
			mot_dirctn++; mot_dirctn%=2;
 800415a:	4b11      	ldr	r3, [pc, #68]	; (80041a0 <HAL_GPIO_EXTI_Callback+0xbc>)
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	3301      	adds	r3, #1
 8004160:	b2da      	uxtb	r2, r3
 8004162:	4b0f      	ldr	r3, [pc, #60]	; (80041a0 <HAL_GPIO_EXTI_Callback+0xbc>)
 8004164:	701a      	strb	r2, [r3, #0]
 8004166:	4b0e      	ldr	r3, [pc, #56]	; (80041a0 <HAL_GPIO_EXTI_Callback+0xbc>)
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	b2da      	uxtb	r2, r3
 8004170:	4b0b      	ldr	r3, [pc, #44]	; (80041a0 <HAL_GPIO_EXTI_Callback+0xbc>)
 8004172:	701a      	strb	r2, [r3, #0]
 8004174:	e002      	b.n	800417c <HAL_GPIO_EXTI_Callback+0x98>

		}else{PWMOut = 0;}
 8004176:	4b09      	ldr	r3, [pc, #36]	; (800419c <HAL_GPIO_EXTI_Callback+0xb8>)
 8004178:	2200      	movs	r2, #0
 800417a:	801a      	strh	r2, [r3, #0]
		//flag_efftActi = 1;
		//trig_efftRead = 1;
	}

	//=============// setzero //================//
		if(GPIO_Pin == GPIO_PIN_2){
 800417c:	88fb      	ldrh	r3, [r7, #6]
 800417e:	2b04      	cmp	r3, #4
 8004180:	d102      	bne.n	8004188 <HAL_GPIO_EXTI_Callback+0xa4>
//			position_order = 0;
//			positionlog[position_order] = 0.00; // 0.000613 - 0.0122 => 1-2/1024
//			Velocity = 7.0;
//			grandState = SetZeroGr;

			grandState = SetZeroBf;
 8004182:	4b04      	ldr	r3, [pc, #16]	; (8004194 <HAL_GPIO_EXTI_Callback+0xb0>)
 8004184:	2206      	movs	r2, #6
 8004186:	701a      	strb	r2, [r3, #0]
		}
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	200004fc 	.word	0x200004fc
 8004198:	200006f0 	.word	0x200006f0
 800419c:	20000574 	.word	0x20000574
 80041a0:	2000057c 	.word	0x2000057c

080041a4 <_Z6microsv>:

///////////////////////////////////// micro timer////////////////////////////////////
uint64_t micros()
{return _micros + htim11.Instance->CNT;}
 80041a4:	b4b0      	push	{r4, r5, r7}
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	4b09      	ldr	r3, [pc, #36]	; (80041d0 <_Z6microsv+0x2c>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ae:	2200      	movs	r2, #0
 80041b0:	4618      	mov	r0, r3
 80041b2:	4611      	mov	r1, r2
 80041b4:	4b07      	ldr	r3, [pc, #28]	; (80041d4 <_Z6microsv+0x30>)
 80041b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ba:	1884      	adds	r4, r0, r2
 80041bc:	eb41 0503 	adc.w	r5, r1, r3
 80041c0:	4622      	mov	r2, r4
 80041c2:	462b      	mov	r3, r5
 80041c4:	4610      	mov	r0, r2
 80041c6:	4619      	mov	r1, r3
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bcb0      	pop	{r4, r5, r7}
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	200003ac 	.word	0x200003ac
 80041d4:	20000508 	.word	0x20000508

080041d8 <_Z6millisv>:
uint32_t millis()
{return _millis;}// + htim10.Instance->CNT
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0
 80041dc:	4b03      	ldr	r3, [pc, #12]	; (80041ec <_Z6millisv+0x14>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4618      	mov	r0, r3
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	20000510 	.word	0x20000510

080041f0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80041f0:	b4b0      	push	{r4, r5, r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 if(htim == &htim11)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a0e      	ldr	r2, [pc, #56]	; (8004234 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d10a      	bne.n	8004216 <HAL_TIM_PeriodElapsedCallback+0x26>
 {_micros += 65535;}
 8004200:	4b0d      	ldr	r3, [pc, #52]	; (8004238 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8004202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004206:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800420a:	1854      	adds	r4, r2, r1
 800420c:	f143 0500 	adc.w	r5, r3, #0
 8004210:	4b09      	ldr	r3, [pc, #36]	; (8004238 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8004212:	e9c3 4500 	strd	r4, r5, [r3]
 if(htim == &htim10)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a08      	ldr	r2, [pc, #32]	; (800423c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d104      	bne.n	8004228 <HAL_TIM_PeriodElapsedCallback+0x38>
 {_millis++;}
 800421e:	4b08      	ldr	r3, [pc, #32]	; (8004240 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	3301      	adds	r3, #1
 8004224:	4a06      	ldr	r2, [pc, #24]	; (8004240 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8004226:	6013      	str	r3, [r2, #0]
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	bcb0      	pop	{r4, r5, r7}
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	200003ac 	.word	0x200003ac
 8004238:	20000508 	.word	0x20000508
 800423c:	20000364 	.word	0x20000364
 8004240:	20000510 	.word	0x20000510

08004244 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004244:	b480      	push	{r7}
 8004246:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004248:	b672      	cpsid	i
}
 800424a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800424c:	e7fe      	b.n	800424c <Error_Handler+0x8>

0800424e <_ZN5Eigen8symbolic10SymbolExprINS_8internal17symbolic_last_tagEEC1Ev>:
{
public:
  /** Alias to the template parameter \c tag */
  typedef tag Tag;

  SymbolExpr() {}
 800424e:	b480      	push	{r7}
 8004250:	b083      	sub	sp, #12
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4618      	mov	r0, r3
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <_ZN5Eigen8internal8FixedIntILi1EEC1Ev>:
template<int N> class FixedInt
{
public:
  static const int value = N;
  EIGEN_CONSTEXPR operator int() const { return value; }
  FixedInt() {}
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4618      	mov	r0, r3
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <_ZNK5Eigen8internal8FixedIntILi1EEclEv>:
  template<int M>
  FixedInt<N&M> operator&( FixedInt<M>) const { return FixedInt<N&M>(); }

#if EIGEN_HAS_CXX14_VARIABLE_TEMPLATES
  // Needed in C++14 to allow fix<N>():
  FixedInt operator() () const { return *this; }
 800427a:	b480      	push	{r7}
 800427c:	b083      	sub	sp, #12
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
 8004282:	bf00      	nop
 8004284:	4618      	mov	r0, r3
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEEplILi1EEENS0_7AddExprIS5_NS0_9ValueExprINS3_8FixedIntIXT_EEEEEEESB_>:
  AddExpr<Derived,ValueExpr<internal::FixedInt<N> > > operator+(internal::FixedInt<N>) const
 8004290:	b5b0      	push	{r4, r5, r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	7039      	strb	r1, [r7, #0]
  { return AddExpr<Derived,ValueExpr<internal::FixedInt<N> > >(derived(), ValueExpr<internal::FixedInt<N> >()); }
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 fdb8 	bl	8004e10 <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEE7derivedEv>
 80042a0:	4604      	mov	r4, r0
 80042a2:	f107 030c 	add.w	r3, r7, #12
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 fdbd 	bl	8004e26 <_ZN5Eigen8symbolic9ValueExprINS_8internal8FixedIntILi1EEEEC1Ev>
 80042ac:	f107 020c 	add.w	r2, r7, #12
 80042b0:	f107 0308 	add.w	r3, r7, #8
 80042b4:	4621      	mov	r1, r4
 80042b6:	4618      	mov	r0, r3
 80042b8:	f000 fdc0 	bl	8004e3c <_ZN5Eigen8symbolic7AddExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEENS0_9ValueExprINS3_8FixedIntILi1EEEEEEC1ERKS5_RKS9_>
 80042bc:	bf00      	nop
 80042be:	4628      	mov	r0, r5
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bdb0      	pop	{r4, r5, r7, pc}

080042c6 <_ZN5Eigen8internal22ignore_unused_variableIiEEvRKT_>:
#endif

// Suppresses 'unused variable' warnings.
namespace Eigen {
  namespace internal {
    template<typename T> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void ignore_unused_variable(const T&) {}
 80042c6:	b480      	push	{r7}
 80042c8:	b083      	sub	sp, #12
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
 80042ce:	bf00      	nop
 80042d0:	370c      	adds	r7, #12
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr

080042da <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>:
      * a matrix to 0 is not supported.
      *
      * \sa resize(Index,Index)
      */
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    Matrix() : Base()
 80042da:	b580      	push	{r7, lr}
 80042dc:	b082      	sub	sp, #8
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f000 fdc2 	bl	8004e6e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
    {
      Base::_check_template_params();
 80042ea:	f000 fdd0 	bl	8004e8e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      EIGEN_INITIALIZE_COEFFS_IF_THAT_OPTION_IS_ENABLED
    }
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4618      	mov	r0, r3
 80042f2:	3708      	adds	r7, #8
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>:
    Matrix() : Base()
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4618      	mov	r0, r3
 8004304:	f000 fdd6 	bl	8004eb4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 8004308:	f000 fde4 	bl	8004ed4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
    }
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4618      	mov	r0, r3
 8004310:	3708      	adds	r7, #8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>:
    Matrix() : Base()
 8004316:	b580      	push	{r7, lr}
 8004318:	b082      	sub	sp, #8
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4618      	mov	r0, r3
 8004322:	f000 fdea 	bl	8004efa <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 8004326:	f000 fdf8 	bl	8004f1a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
    }
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4618      	mov	r0, r3
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <_ZN5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EEC1Ev>:
    Matrix() : Base()
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4618      	mov	r0, r3
 8004340:	f000 fdfe 	bl	8004f40 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
      Base::_check_template_params();
 8004344:	f000 fe0c 	bl	8004f60 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE22_check_template_paramsEv>
    }
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4618      	mov	r0, r3
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>:
  * \note According the c++ standard, the argument expressions of this comma initializer are evaluated in arbitrary order.
  *
  * \sa CommaInitializer::finished(), class CommaInitializer
  */
template<typename Derived>
EIGEN_DEVICE_FUNC inline CommaInitializer<Derived> DenseBase<Derived>::operator<< (const Scalar& s)
 8004352:	b580      	push	{r7, lr}
 8004354:	b084      	sub	sp, #16
 8004356:	af00      	add	r7, sp, #0
 8004358:	60f8      	str	r0, [r7, #12]
 800435a:	60b9      	str	r1, [r7, #8]
 800435c:	607a      	str	r2, [r7, #4]
{
  return CommaInitializer<Derived>(*static_cast<Derived*>(this), s);
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	68b9      	ldr	r1, [r7, #8]
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f000 fe04 	bl	8004f70 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf>
}
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>:
  inline ~CommaInitializer()
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
    finished();
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 fe39 	bl	8004ff0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv>
  }
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4618      	mov	r0, r3
 8004382:	3708      	adds	r7, #8
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>:
  CommaInitializer& operator,(const Scalar& s)
 8004388:	b590      	push	{r4, r7, lr}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
    if (m_col==m_xpr.cols())
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	689c      	ldr	r4, [r3, #8]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4618      	mov	r0, r3
 800439c:	f000 fe5e 	bl	800505c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80043a0:	4603      	mov	r3, r0
 80043a2:	429c      	cmp	r4, r3
 80043a4:	bf0c      	ite	eq
 80043a6:	2301      	moveq	r3, #1
 80043a8:	2300      	movne	r3, #0
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d01d      	beq.n	80043ec <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x64>
      m_row+=m_currentBlockRows;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	441a      	add	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	605a      	str	r2, [r3, #4]
      m_col = 0;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	609a      	str	r2, [r3, #8]
      m_currentBlockRows = 1;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	60da      	str	r2, [r3, #12]
      eigen_assert(m_row<m_xpr.rows()
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685c      	ldr	r4, [r3, #4]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 fe4d 	bl	8005072 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80043d8:	4603      	mov	r3, r0
 80043da:	429c      	cmp	r4, r3
 80043dc:	db05      	blt.n	80043ea <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x62>
 80043de:	4b1d      	ldr	r3, [pc, #116]	; (8004454 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xcc>)
 80043e0:	4a1d      	ldr	r2, [pc, #116]	; (8004458 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd0>)
 80043e2:	2148      	movs	r1, #72	; 0x48
 80043e4:	481d      	ldr	r0, [pc, #116]	; (800445c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd4>)
 80043e6:	f019 fd5d 	bl	801dea4 <__assert_func>
 80043ea:	bf00      	nop
    eigen_assert(m_col<m_xpr.cols()
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689c      	ldr	r4, [r3, #8]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f000 fe31 	bl	800505c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80043fa:	4603      	mov	r3, r0
 80043fc:	429c      	cmp	r4, r3
 80043fe:	db05      	blt.n	800440c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x84>
 8004400:	4b17      	ldr	r3, [pc, #92]	; (8004460 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd8>)
 8004402:	4a15      	ldr	r2, [pc, #84]	; (8004458 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd0>)
 8004404:	214b      	movs	r1, #75	; 0x4b
 8004406:	4815      	ldr	r0, [pc, #84]	; (800445c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd4>)
 8004408:	f019 fd4c 	bl	801dea4 <__assert_func>
 800440c:	bf00      	nop
    eigen_assert(m_currentBlockRows==1);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d005      	beq.n	8004422 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x9a>
 8004416:	4b13      	ldr	r3, [pc, #76]	; (8004464 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xdc>)
 8004418:	4a0f      	ldr	r2, [pc, #60]	; (8004458 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd0>)
 800441a:	214d      	movs	r1, #77	; 0x4d
 800441c:	480f      	ldr	r0, [pc, #60]	; (800445c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd4>)
 800441e:	f019 fd41 	bl	801dea4 <__assert_func>
    m_xpr.coeffRef(m_row, m_col++) = s;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	461c      	mov	r4, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6858      	ldr	r0, [r3, #4]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	1c59      	adds	r1, r3, #1
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	6091      	str	r1, [r2, #8]
 8004436:	461a      	mov	r2, r3
 8004438:	4601      	mov	r1, r0
 800443a:	4620      	mov	r0, r4
 800443c:	f000 fe24 	bl	8005088 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8coeffRefEii>
 8004440:	4602      	mov	r2, r0
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6013      	str	r3, [r2, #0]
    return *this;
 8004448:	687b      	ldr	r3, [r7, #4]
  }
 800444a:	4618      	mov	r0, r3
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	bd90      	pop	{r4, r7, pc}
 8004452:	bf00      	nop
 8004454:	0801ef20 	.word	0x0801ef20
 8004458:	0801ef70 	.word	0x0801ef70
 800445c:	0801f034 	.word	0x0801f034
 8004460:	0801f090 	.word	0x0801f090
 8004464:	0801f0e8 	.word	0x0801f0e8

08004468 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>:
EIGEN_DEVICE_FUNC inline CommaInitializer<Derived> DenseBase<Derived>::operator<< (const Scalar& s)
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
  return CommaInitializer<Derived>(*static_cast<Derived*>(this), s);
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	68b9      	ldr	r1, [r7, #8]
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f000 fe1f 	bl	80050bc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf>
}
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
  inline ~CommaInitializer()
 8004486:	b580      	push	{r7, lr}
 8004488:	b082      	sub	sp, #8
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
    finished();
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 fe54 	bl	800513c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv>
  }
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4618      	mov	r0, r3
 8004498:	3708      	adds	r7, #8
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
	...

080044a0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>:
  CommaInitializer& operator,(const Scalar& s)
 80044a0:	b590      	push	{r4, r7, lr}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
    if (m_col==m_xpr.cols())
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	689c      	ldr	r4, [r3, #8]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 fe78 	bl	80051a8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80044b8:	4603      	mov	r3, r0
 80044ba:	429c      	cmp	r4, r3
 80044bc:	bf0c      	ite	eq
 80044be:	2301      	moveq	r3, #1
 80044c0:	2300      	movne	r3, #0
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d01d      	beq.n	8004504 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x64>
      m_row+=m_currentBlockRows;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	441a      	add	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	605a      	str	r2, [r3, #4]
      m_col = 0;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	609a      	str	r2, [r3, #8]
      m_currentBlockRows = 1;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	60da      	str	r2, [r3, #12]
      eigen_assert(m_row<m_xpr.rows()
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685c      	ldr	r4, [r3, #4]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 fe67 	bl	80051be <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80044f0:	4603      	mov	r3, r0
 80044f2:	429c      	cmp	r4, r3
 80044f4:	db05      	blt.n	8004502 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x62>
 80044f6:	4b1d      	ldr	r3, [pc, #116]	; (800456c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xcc>)
 80044f8:	4a1d      	ldr	r2, [pc, #116]	; (8004570 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd0>)
 80044fa:	2148      	movs	r1, #72	; 0x48
 80044fc:	481d      	ldr	r0, [pc, #116]	; (8004574 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd4>)
 80044fe:	f019 fcd1 	bl	801dea4 <__assert_func>
 8004502:	bf00      	nop
    eigen_assert(m_col<m_xpr.cols()
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689c      	ldr	r4, [r3, #8]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4618      	mov	r0, r3
 800450e:	f000 fe4b 	bl	80051a8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8004512:	4603      	mov	r3, r0
 8004514:	429c      	cmp	r4, r3
 8004516:	db05      	blt.n	8004524 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x84>
 8004518:	4b17      	ldr	r3, [pc, #92]	; (8004578 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd8>)
 800451a:	4a15      	ldr	r2, [pc, #84]	; (8004570 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd0>)
 800451c:	214b      	movs	r1, #75	; 0x4b
 800451e:	4815      	ldr	r0, [pc, #84]	; (8004574 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd4>)
 8004520:	f019 fcc0 	bl	801dea4 <__assert_func>
 8004524:	bf00      	nop
    eigen_assert(m_currentBlockRows==1);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d005      	beq.n	800453a <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x9a>
 800452e:	4b13      	ldr	r3, [pc, #76]	; (800457c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xdc>)
 8004530:	4a0f      	ldr	r2, [pc, #60]	; (8004570 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd0>)
 8004532:	214d      	movs	r1, #77	; 0x4d
 8004534:	480f      	ldr	r0, [pc, #60]	; (8004574 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd4>)
 8004536:	f019 fcb5 	bl	801dea4 <__assert_func>
    m_xpr.coeffRef(m_row, m_col++) = s;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	461c      	mov	r4, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6858      	ldr	r0, [r3, #4]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	1c59      	adds	r1, r3, #1
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	6091      	str	r1, [r2, #8]
 800454e:	461a      	mov	r2, r3
 8004550:	4601      	mov	r1, r0
 8004552:	4620      	mov	r0, r4
 8004554:	f000 fe3e 	bl	80051d4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8coeffRefEii>
 8004558:	4602      	mov	r2, r0
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	6013      	str	r3, [r2, #0]
    return *this;
 8004560:	687b      	ldr	r3, [r7, #4]
  }
 8004562:	4618      	mov	r0, r3
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	bd90      	pop	{r4, r7, pc}
 800456a:	bf00      	nop
 800456c:	0801ef20 	.word	0x0801ef20
 8004570:	0801f100 	.word	0x0801f100
 8004574:	0801f034 	.word	0x0801f034
 8004578:	0801f090 	.word	0x0801f090
 800457c:	0801f0e8 	.word	0x0801f0e8

08004580 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEElsERKf>:
EIGEN_DEVICE_FUNC inline CommaInitializer<Derived> DenseBase<Derived>::operator<< (const Scalar& s)
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
  return CommaInitializer<Derived>(*static_cast<Derived*>(this), s);
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	68b9      	ldr	r1, [r7, #8]
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	f000 fe39 	bl	8005208 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf>
}
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
  inline ~CommaInitializer()
 800459e:	b580      	push	{r7, lr}
 80045a0:	b082      	sub	sp, #8
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
    finished();
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 fe6e 	bl	8005288 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv>
  }
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4618      	mov	r0, r3
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEElsERKf>:
EIGEN_DEVICE_FUNC inline CommaInitializer<Derived> DenseBase<Derived>::operator<< (const Scalar& s)
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b084      	sub	sp, #16
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	60f8      	str	r0, [r7, #12]
 80045be:	60b9      	str	r1, [r7, #8]
 80045c0:	607a      	str	r2, [r7, #4]
  return CommaInitializer<Derived>(*static_cast<Derived*>(this), s);
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	68b9      	ldr	r1, [r7, #8]
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f000 fe94 	bl	80052f4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf>
}
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
  inline ~CommaInitializer()
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
    finished();
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 fec9 	bl	8005374 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv>
  }
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4618      	mov	r0, r3
 80045e6:	3708      	adds	r7, #8
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf>:
  CommaInitializer& operator,(const Scalar& s)
 80045ec:	b590      	push	{r4, r7, lr}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
    if (m_col==m_xpr.cols())
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	689c      	ldr	r4, [r3, #8]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 feee 	bl	80053e0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8004604:	4603      	mov	r3, r0
 8004606:	429c      	cmp	r4, r3
 8004608:	bf0c      	ite	eq
 800460a:	2301      	moveq	r3, #1
 800460c:	2300      	movne	r3, #0
 800460e:	b2db      	uxtb	r3, r3
 8004610:	2b00      	cmp	r3, #0
 8004612:	d01d      	beq.n	8004650 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x64>
      m_row+=m_currentBlockRows;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	441a      	add	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	605a      	str	r2, [r3, #4]
      m_col = 0;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	609a      	str	r2, [r3, #8]
      m_currentBlockRows = 1;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	60da      	str	r2, [r3, #12]
      eigen_assert(m_row<m_xpr.rows()
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685c      	ldr	r4, [r3, #4]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4618      	mov	r0, r3
 8004638:	f000 fedd 	bl	80053f6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 800463c:	4603      	mov	r3, r0
 800463e:	429c      	cmp	r4, r3
 8004640:	db05      	blt.n	800464e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x62>
 8004642:	4b1d      	ldr	r3, [pc, #116]	; (80046b8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xcc>)
 8004644:	4a1d      	ldr	r2, [pc, #116]	; (80046bc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd0>)
 8004646:	2148      	movs	r1, #72	; 0x48
 8004648:	481d      	ldr	r0, [pc, #116]	; (80046c0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd4>)
 800464a:	f019 fc2b 	bl	801dea4 <__assert_func>
 800464e:	bf00      	nop
    eigen_assert(m_col<m_xpr.cols()
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689c      	ldr	r4, [r3, #8]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4618      	mov	r0, r3
 800465a:	f000 fec1 	bl	80053e0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 800465e:	4603      	mov	r3, r0
 8004660:	429c      	cmp	r4, r3
 8004662:	db05      	blt.n	8004670 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x84>
 8004664:	4b17      	ldr	r3, [pc, #92]	; (80046c4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd8>)
 8004666:	4a15      	ldr	r2, [pc, #84]	; (80046bc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd0>)
 8004668:	214b      	movs	r1, #75	; 0x4b
 800466a:	4815      	ldr	r0, [pc, #84]	; (80046c0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd4>)
 800466c:	f019 fc1a 	bl	801dea4 <__assert_func>
 8004670:	bf00      	nop
    eigen_assert(m_currentBlockRows==1);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d005      	beq.n	8004686 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x9a>
 800467a:	4b13      	ldr	r3, [pc, #76]	; (80046c8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xdc>)
 800467c:	4a0f      	ldr	r2, [pc, #60]	; (80046bc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd0>)
 800467e:	214d      	movs	r1, #77	; 0x4d
 8004680:	480f      	ldr	r0, [pc, #60]	; (80046c0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd4>)
 8004682:	f019 fc0f 	bl	801dea4 <__assert_func>
    m_xpr.coeffRef(m_row, m_col++) = s;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	461c      	mov	r4, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6858      	ldr	r0, [r3, #4]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	1c59      	adds	r1, r3, #1
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	6091      	str	r1, [r2, #8]
 800469a:	461a      	mov	r2, r3
 800469c:	4601      	mov	r1, r0
 800469e:	4620      	mov	r0, r4
 80046a0:	f000 feb4 	bl	800540c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8coeffRefEii>
 80046a4:	4602      	mov	r2, r0
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	6013      	str	r3, [r2, #0]
    return *this;
 80046ac:	687b      	ldr	r3, [r7, #4]
  }
 80046ae:	4618      	mov	r0, r3
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd90      	pop	{r4, r7, pc}
 80046b6:	bf00      	nop
 80046b8:	0801ef20 	.word	0x0801ef20
 80046bc:	0801f1c4 	.word	0x0801f1c4
 80046c0:	0801f034 	.word	0x0801f034
 80046c4:	0801f090 	.word	0x0801f090
 80046c8:	0801f0e8 	.word	0x0801f0e8

080046cc <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>:
      * \sa operator[](Index)
      */

    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE Scalar&
    operator()(Index row, Index col)
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
    {
      eigen_assert(row >= 0 && row < rows()
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	db10      	blt.n	8004700 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x34>
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f000 fead 	bl	800543e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80046e4:	4602      	mov	r2, r0
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	4293      	cmp	r3, r2
 80046ea:	da09      	bge.n	8004700 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x34>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	db06      	blt.n	8004700 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x34>
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f000 feb3 	bl	800545e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80046f8:	4602      	mov	r2, r0
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4293      	cmp	r3, r2
 80046fe:	db06      	blt.n	800470e <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x42>
 8004700:	4b08      	ldr	r3, [pc, #32]	; (8004724 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x58>)
 8004702:	4a09      	ldr	r2, [pc, #36]	; (8004728 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x5c>)
 8004704:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 8004708:	4808      	ldr	r0, [pc, #32]	; (800472c <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x60>)
 800470a:	f019 fbcb 	bl	801dea4 <__assert_func>
          && col >= 0 && col < cols());
      return coeffRef(row, col);
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	68b9      	ldr	r1, [r7, #8]
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f000 fecc 	bl	80054b0 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EE8coeffRefEii>
 8004718:	4603      	mov	r3, r0
    }
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	0801f288 	.word	0x0801f288
 8004728:	0801f2c0 	.word	0x0801f2c0
 800472c:	0801f3ac 	.word	0x0801f3ac

08004730 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS7_>:
  * on the behavior of CwiseNullaryOp.
  *
  * \sa class CwiseUnaryOp, class CwiseBinaryOp, DenseBase::NullaryExpr
  */
template<typename NullaryOp, typename PlainObjectType>
class CwiseNullaryOp : public internal::dense_xpr_base< CwiseNullaryOp<NullaryOp, PlainObjectType> >::type, internal::no_assignment_operator
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	1d1a      	adds	r2, r3, #4
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	3304      	adds	r3, #4
 8004742:	4619      	mov	r1, r3
 8004744:	4610      	mov	r0, r2
 8004746:	f000 ffaf 	bl	80056a8 <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKS2_>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4618      	mov	r0, r3
 800474e:	3708      	adds	r7, #8
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlIfEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNS6_18promote_scalar_argIfT_XsrNS6_14has_ReturnTypeINS_20ScalarBinaryOpTraitsIfS9_NS7_IfS9_EEEEEE5valueEE4typeEEEKS2_KNS6_19plain_constant_typeIS2_SG_E4typeEEERKS9_>:
  return CwiseBinaryOp<CustomBinaryOp, const Derived, const OtherDerived>(derived(), other.derived(), func);
}


#ifndef EIGEN_PARSED_BY_DOXYGEN
EIGEN_MAKE_SCALAR_BINARY_OP(operator*,product)
 8004754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004756:	b089      	sub	sp, #36	; 0x24
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
 8004760:	68b8      	ldr	r0, [r7, #8]
 8004762:	f000 fec8 	bl	80054f6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004766:	4604      	mov	r4, r0
 8004768:	68b8      	ldr	r0, [r7, #8]
 800476a:	f000 fec4 	bl	80054f6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800476e:	4603      	mov	r3, r0
 8004770:	4618      	mov	r0, r3
 8004772:	f000 fd24 	bl	80051be <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8004776:	4605      	mov	r5, r0
 8004778:	68b8      	ldr	r0, [r7, #8]
 800477a:	f000 febc 	bl	80054f6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800477e:	4603      	mov	r3, r0
 8004780:	4618      	mov	r0, r3
 8004782:	f000 fd11 	bl	80051a8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8004786:	4606      	mov	r6, r0
 8004788:	f107 0318 	add.w	r3, r7, #24
 800478c:	6879      	ldr	r1, [r7, #4]
 800478e:	4618      	mov	r0, r3
 8004790:	f000 febc 	bl	800550c <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKf>
 8004794:	f107 0318 	add.w	r3, r7, #24
 8004798:	f107 0010 	add.w	r0, r7, #16
 800479c:	4632      	mov	r2, r6
 800479e:	4629      	mov	r1, r5
 80047a0:	f000 fed0 	bl	8005544 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_>
 80047a4:	f107 031c 	add.w	r3, r7, #28
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 ff03 	bl	80055b4 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 80047ae:	f107 031c 	add.w	r3, r7, #28
 80047b2:	f107 0210 	add.w	r2, r7, #16
 80047b6:	4621      	mov	r1, r4
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f000 ff35 	bl	8005628 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_>
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	3724      	adds	r7, #36	; 0x24
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080047c6 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE9transposeEv>:
  *
  * \sa transposeInPlace(), adjoint() */
template<typename Derived>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
Transpose<Derived>
DenseBase<Derived>::transpose()
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b084      	sub	sp, #16
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
{
  return TransposeReturnType(derived());
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 ff86 	bl	80056e0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80047d4:	4602      	mov	r2, r0
 80047d6:	f107 030c 	add.w	r3, r7, #12
 80047da:	4611      	mov	r1, r2
 80047dc:	4618      	mov	r0, r3
 80047de:	f000 ffa2 	bl	8005726 <_ZN5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_>
 80047e2:	68fb      	ldr	r3, [r7, #12]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>:
  * CwiseBinaryOp types explicitly.
  *
  * \sa MatrixBase::binaryExpr(const MatrixBase<OtherDerived> &,const CustomBinaryOp &) const, class CwiseUnaryOp, class CwiseNullaryOp
  */
template<typename BinaryOp, typename LhsType, typename RhsType>
class CwiseBinaryOp :
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	601a      	str	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	1d1a      	adds	r2, r3, #4
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	3304      	adds	r3, #4
 8004806:	4619      	mov	r1, r3
 8004808:	4610      	mov	r0, r2
 800480a:	f7ff ff91 	bl	8004730 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS7_>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f103 020c 	add.w	r2, r3, #12
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	330c      	adds	r3, #12
 8004818:	4619      	mov	r1, r3
 800481a:	4610      	mov	r0, r2
 800481c:	f000 ff54 	bl	80056c8 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4618      	mov	r0, r3
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEmlINS_9TransposeIS6_EEEEKNS_7ProductISD_T_Li0EEERKNS0_ISJ_EE>:
  */
template<typename Derived>
template<typename OtherDerived>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
const Product<Derived, OtherDerived>
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 800482a:	b590      	push	{r4, r7, lr}
 800482c:	b085      	sub	sp, #20
 800482e:	af00      	add	r7, sp, #0
 8004830:	60f8      	str	r0, [r7, #12]
 8004832:	60b9      	str	r1, [r7, #8]
 8004834:	607a      	str	r2, [r7, #4]
  EIGEN_STATIC_ASSERT(ProductIsValid || SameSizes, INVALID_MATRIX_PRODUCT)
#ifdef EIGEN_DEBUG_PRODUCT
  internal::product_type<Derived,OtherDerived>::debug();
#endif

  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004836:	68b8      	ldr	r0, [r7, #8]
 8004838:	f000 ff85 	bl	8005746 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE7derivedEv>
 800483c:	4604      	mov	r4, r0
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 ff8c 	bl	800575c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 8004844:	4603      	mov	r3, r0
 8004846:	461a      	mov	r2, r3
 8004848:	4621      	mov	r1, r4
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f000 ffd2 	bl	80057f4 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_>
}
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	3714      	adds	r7, #20
 8004854:	46bd      	mov	sp, r7
 8004856:	bd90      	pop	{r4, r7, pc}

08004858 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS0_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS5_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6839      	ldr	r1, [r7, #0]
 8004866:	4618      	mov	r0, r3
 8004868:	f000 fff4 	bl	8005854 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
 800486c:	4603      	mov	r3, r0
    }
 800486e:	4618      	mov	r0, r3
 8004870:	3708      	adds	r7, #8
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004876:	b590      	push	{r4, r7, lr}
 8004878:	b085      	sub	sp, #20
 800487a:	af00      	add	r7, sp, #0
 800487c:	60f8      	str	r0, [r7, #12]
 800487e:	60b9      	str	r1, [r7, #8]
 8004880:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004882:	68b8      	ldr	r0, [r7, #8]
 8004884:	f000 ffff 	bl	8005886 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004888:	4604      	mov	r4, r0
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 fe33 	bl	80054f6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004890:	4603      	mov	r3, r0
 8004892:	461a      	mov	r2, r3
 8004894:	4621      	mov	r1, r4
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f001 f824 	bl	80058e4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_>
}
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	3714      	adds	r7, #20
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd90      	pop	{r4, r7, pc}

080048a4 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEES1_Li0EEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6839      	ldr	r1, [r7, #0]
 80048b2:	4618      	mov	r0, r3
 80048b4:	f001 f844 	bl	8005940 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
 80048b8:	4603      	mov	r3, r0
    }
 80048ba:	4618      	mov	r0, r3
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlIS2_EEKNS_7ProductIS2_T_Li0EEERKNS0_IS6_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 80048c2:	b590      	push	{r4, r7, lr}
 80048c4:	b085      	sub	sp, #20
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	60f8      	str	r0, [r7, #12]
 80048ca:	60b9      	str	r1, [r7, #8]
 80048cc:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 80048ce:	68b8      	ldr	r0, [r7, #8]
 80048d0:	f000 ffd9 	bl	8005886 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80048d4:	4604      	mov	r4, r0
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 ffd5 	bl	8005886 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80048dc:	4603      	mov	r3, r0
 80048de:	461a      	mov	r2, r3
 80048e0:	4621      	mov	r1, r4
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f001 f86a 	bl	80059bc <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_>
}
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	3714      	adds	r7, #20
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd90      	pop	{r4, r7, pc}

080048f0 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE9transposeEv>:
DenseBase<Derived>::transpose()
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  return TransposeReturnType(derived());
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f001 f88d 	bl	8005a18 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80048fe:	4602      	mov	r2, r0
 8004900:	f107 030c 	add.w	r3, r7, #12
 8004904:	4611      	mov	r1, r2
 8004906:	4618      	mov	r0, r3
 8004908:	f001 f8a9 	bl	8005a5e <_ZN5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_>
 800490c:	68fb      	ldr	r3, [r7, #12]
}
 800490e:	4618      	mov	r0, r3
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEmlINS_9TransposeIS3_EEEEKNS1_IS4_T_Li0EEERKNS0_IS9_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004916:	b590      	push	{r4, r7, lr}
 8004918:	b085      	sub	sp, #20
 800491a:	af00      	add	r7, sp, #0
 800491c:	60f8      	str	r0, [r7, #12]
 800491e:	60b9      	str	r1, [r7, #8]
 8004920:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004922:	68b8      	ldr	r0, [r7, #8]
 8004924:	f001 f8ab 	bl	8005a7e <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE7derivedEv>
 8004928:	4604      	mov	r4, r0
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f001 f8b2 	bl	8005a94 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 8004930:	4603      	mov	r3, r0
 8004932:	461a      	mov	r2, r3
 8004934:	4621      	mov	r1, r4
 8004936:	68f8      	ldr	r0, [r7, #12]
 8004938:	f001 f8f8 	bl	8005b2c <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_>
}
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	3714      	adds	r7, #20
 8004940:	46bd      	mov	sp, r7
 8004942:	bd90      	pop	{r4, r7, pc}

08004944 <_ZNK5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEplIS3_EEKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIfNSB_6traitsIT_E6ScalarEEEKS7_KSE_EERKNS0_ISE_EE>:
EIGEN_MAKE_CWISE_BINARY_OP(operator+,sum)
 8004944:	b5b0      	push	{r4, r5, r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
 8004950:	68b8      	ldr	r0, [r7, #8]
 8004952:	f001 f91b 	bl	8005b8c <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEE7derivedEv>
 8004956:	4604      	mov	r4, r0
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 ff94 	bl	8005886 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800495e:	4605      	mov	r5, r0
 8004960:	f107 0314 	add.w	r3, r7, #20
 8004964:	4618      	mov	r0, r3
 8004966:	f001 f91c 	bl	8005ba2 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800496a:	f107 0314 	add.w	r3, r7, #20
 800496e:	462a      	mov	r2, r5
 8004970:	4621      	mov	r1, r4
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f001 f954 	bl	8005c20 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_>
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	3718      	adds	r7, #24
 800497c:	46bd      	mov	sp, r7
 800497e:	bdb0      	pop	{r4, r5, r7, pc}

08004980 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS7_IS1_S1_Li0EEENS_9TransposeIS1_EELi0EEEKS1_EEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6839      	ldr	r1, [r7, #0]
 800498e:	4618      	mov	r0, r3
 8004990:	f001 f992 	bl	8005cb8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_IS2_S2_Li0EEENS_9TransposeIS2_EELi0EEEKS2_EEEERS2_RKNS_9DenseBaseIT_EE>
 8004994:	4603      	mov	r3, r0
    }
 8004996:	4618      	mov	r0, r3
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>:
DenseBase<Derived>::transpose()
 800499e:	b580      	push	{r7, lr}
 80049a0:	b084      	sub	sp, #16
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  return TransposeReturnType(derived());
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f001 f99f 	bl	8005cea <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 80049ac:	4602      	mov	r2, r0
 80049ae:	f107 030c 	add.w	r3, r7, #12
 80049b2:	4611      	mov	r1, r2
 80049b4:	4618      	mov	r0, r3
 80049b6:	f001 f9bb 	bl	8005d30 <_ZN5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_>
 80049ba:	68fb      	ldr	r3, [r7, #12]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3710      	adds	r7, #16
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlINS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS9_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 80049c4:	b590      	push	{r4, r7, lr}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 80049d0:	68b8      	ldr	r0, [r7, #8]
 80049d2:	f000 ff58 	bl	8005886 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80049d6:	4604      	mov	r4, r0
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f001 f9b9 	bl	8005d50 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 80049de:	4603      	mov	r3, r0
 80049e0:	461a      	mov	r2, r3
 80049e2:	4621      	mov	r1, r4
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f001 f9f1 	bl	8005dcc <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_>
}
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	3714      	adds	r7, #20
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd90      	pop	{r4, r7, pc}

080049f2 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEmlINS1_IfLi3ELi3ELi0ELi3ELi3EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 80049f2:	b590      	push	{r4, r7, lr}
 80049f4:	b085      	sub	sp, #20
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	60f8      	str	r0, [r7, #12]
 80049fa:	60b9      	str	r1, [r7, #8]
 80049fc:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 80049fe:	68b8      	ldr	r0, [r7, #8]
 8004a00:	f001 fa12 	bl	8005e28 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8004a04:	4604      	mov	r4, r0
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 ff3d 	bl	8005886 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	461a      	mov	r2, r3
 8004a10:	4621      	mov	r1, r4
 8004a12:	68f8      	ldr	r0, [r7, #12]
 8004a14:	f001 fa38 	bl	8005e88 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_>
}
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	3714      	adds	r7, #20
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd90      	pop	{r4, r7, pc}

08004a20 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEmlINS_9TransposeIS3_EEEEKNS1_IS5_T_Li0EEERKNS0_ISA_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004a20:	b590      	push	{r4, r7, lr}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004a2c:	68b8      	ldr	r0, [r7, #8]
 8004a2e:	f001 fa59 	bl	8005ee4 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE7derivedEv>
 8004a32:	4604      	mov	r4, r0
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f001 f98b 	bl	8005d50 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	4621      	mov	r1, r4
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f001 fa8d 	bl	8005f60 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_>
}
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	3714      	adds	r7, #20
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd90      	pop	{r4, r7, pc}

08004a4e <_ZNK5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEplINS2_IfLi1ELi1ELi0ELi1ELi1EEEEEKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>:
 8004a4e:	b5b0      	push	{r4, r5, r7, lr}
 8004a50:	b086      	sub	sp, #24
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	60f8      	str	r0, [r7, #12]
 8004a56:	60b9      	str	r1, [r7, #8]
 8004a58:	607a      	str	r2, [r7, #4]
 8004a5a:	68b8      	ldr	r0, [r7, #8]
 8004a5c:	f001 fab0 	bl	8005fc0 <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEE7derivedEv>
 8004a60:	4604      	mov	r4, r0
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f001 fab7 	bl	8005fd6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 8004a68:	4605      	mov	r5, r0
 8004a6a:	f107 0314 	add.w	r3, r7, #20
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f001 f897 	bl	8005ba2 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8004a74:	f107 0314 	add.w	r3, r7, #20
 8004a78:	462a      	mov	r2, r5
 8004a7a:	4621      	mov	r1, r4
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f001 faff 	bl	8006080 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_>
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	3718      	adds	r7, #24
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bdb0      	pop	{r4, r5, r7, pc}

08004a8a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>:
  inline const Derived& const_derived() const
  { return *static_cast<const Derived*>(this); }

  /** \returns the number of rows. \sa cols(), RowsAtCompileTime */
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b082      	sub	sp, #8
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f001 fb34 	bl	8006100 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f001 fb3b 	bl	8006116 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>:
  /** \returns the number of columns. \sa rows(), ColsAtCompileTime*/
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b082      	sub	sp, #8
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f001 fb24 	bl	8006100 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	4618      	mov	r0, r3
 8004abc:	f001 fb38 	bl	8006130 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3708      	adds	r7, #8
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKSF_>:
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b082      	sub	sp, #8
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
 8004ad2:	6039      	str	r1, [r7, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	ca07      	ldmia	r2, {r0, r1, r2}
 8004ada:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	68da      	ldr	r2, [r3, #12]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	60da      	str	r2, [r3, #12]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f103 0210 	add.w	r2, r3, #16
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	3310      	adds	r3, #16
 8004af0:	4619      	mov	r1, r3
 8004af2:	4610      	mov	r0, r2
 8004af4:	f001 f8d4 	bl	8005ca0 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4618      	mov	r0, r3
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
	...

08004b04 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv>:
  *
  * \sa computeInverseAndDetWithCheck()
  */
template<typename Derived>
EIGEN_DEVICE_FUNC
inline const Inverse<Derived> MatrixBase<Derived>::inverse() const
 8004b04:	b590      	push	{r4, r7, lr}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
{
  EIGEN_STATIC_ASSERT(!NumTraits<Scalar>::IsInteger,THIS_FUNCTION_IS_NOT_FOR_INTEGER_NUMERIC_TYPES)
  eigen_assert(rows() == cols());
 8004b0e:	6838      	ldr	r0, [r7, #0]
 8004b10:	f7ff ffbb 	bl	8004a8a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>
 8004b14:	4604      	mov	r4, r0
 8004b16:	6838      	ldr	r0, [r7, #0]
 8004b18:	f7ff ffc7 	bl	8004aaa <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	429c      	cmp	r4, r3
 8004b20:	d006      	beq.n	8004b30 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv+0x2c>
 8004b22:	4b09      	ldr	r3, [pc, #36]	; (8004b48 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv+0x44>)
 8004b24:	4a09      	ldr	r2, [pc, #36]	; (8004b4c <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv+0x48>)
 8004b26:	f240 115f 	movw	r1, #351	; 0x15f
 8004b2a:	4809      	ldr	r0, [pc, #36]	; (8004b50 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv+0x4c>)
 8004b2c:	f019 f9ba 	bl	801dea4 <__assert_func>
  return Inverse<Derived>(derived());
 8004b30:	6838      	ldr	r0, [r7, #0]
 8004b32:	f001 fae5 	bl	8006100 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>
 8004b36:	4603      	mov	r3, r0
 8004b38:	4619      	mov	r1, r3
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f001 fb1d 	bl	800617a <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSG_>
}
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd90      	pop	{r4, r7, pc}
 8004b48:	0801f408 	.word	0x0801f408
 8004b4c:	0801f41c 	.word	0x0801f41c
 8004b50:	0801f570 	.word	0x0801f570

08004b54 <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSH_>:
  * This class represents an abstract expression of A.inverse()
  * and most of the time this is the only way it is used.
  *
  */
template<typename XprType>
class Inverse : public InverseImpl<XprType,typename internal::traits<XprType>::StorageKind>
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	4611      	mov	r1, r2
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7ff ffb0 	bl	8004aca <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKSF_>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3708      	adds	r7, #8
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEmlINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEEKNS1_IS7_T_Li0EEERKNS0_ISM_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004b74:	b590      	push	{r4, r7, lr}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004b80:	68b8      	ldr	r0, [r7, #8]
 8004b82:	f001 fb0c 	bl	800619e <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE7derivedEv>
 8004b86:	4604      	mov	r4, r0
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f001 fb13 	bl	80061b4 <_ZNK5Eigen9EigenBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEE7derivedEv>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	461a      	mov	r2, r3
 8004b92:	4621      	mov	r1, r4
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f001 fb57 	bl	8006248 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_>
}
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd90      	pop	{r4, r7, pc}

08004ba2 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_7ProductINS3_INS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS3_INS3_IS6_S4_Li0EEES7_Li0EEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b082      	sub	sp, #8
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
 8004baa:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6839      	ldr	r1, [r7, #0]
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f001 fb7b 	bl	80062ac <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
 8004bb6:	4603      	mov	r3, r0
    }
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3708      	adds	r7, #8
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEmlINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004bc0:	b590      	push	{r4, r7, lr}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004bcc:	68b8      	ldr	r0, [r7, #8]
 8004bce:	f001 f92b 	bl	8005e28 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8004bd2:	4604      	mov	r4, r0
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 fc8e 	bl	80054f6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	461a      	mov	r2, r3
 8004bde:	4621      	mov	r1, r4
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	f001 fba1 	bl	8006328 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_>
}
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	3714      	adds	r7, #20
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd90      	pop	{r4, r7, pc}

08004bee <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEmiINS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEKNS_13CwiseBinaryOpINS_8internal20scalar_difference_opIfNSA_6traitsIT_E6ScalarEEEKS2_KSD_EERKNS0_ISD_EE>:
EIGEN_MAKE_CWISE_BINARY_OP(operator-,difference)
 8004bee:	b5b0      	push	{r4, r5, r7, lr}
 8004bf0:	b086      	sub	sp, #24
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	60f8      	str	r0, [r7, #12]
 8004bf6:	60b9      	str	r1, [r7, #8]
 8004bf8:	607a      	str	r2, [r7, #4]
 8004bfa:	68b8      	ldr	r0, [r7, #8]
 8004bfc:	f001 f9eb 	bl	8005fd6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 8004c00:	4604      	mov	r4, r0
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f001 fbbe 	bl	8006384 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>
 8004c08:	4605      	mov	r5, r0
 8004c0a:	f107 0314 	add.w	r3, r7, #20
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f001 fbc3 	bl	800639a <_ZN5Eigen8internal20scalar_difference_opIffEC1Ev>
 8004c14:	f107 0314 	add.w	r3, r7, #20
 8004c18:	462a      	mov	r2, r5
 8004c1a:	4621      	mov	r1, r4
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f001 fbfb 	bl	8006418 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_>
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	3718      	adds	r7, #24
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bdb0      	pop	{r4, r5, r7, pc}

08004c2a <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERKSC_>:
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b082      	sub	sp, #8
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
 8004c32:	6039      	str	r1, [r7, #0]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	601a      	str	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	1d1a      	adds	r2, r3, #4
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	3304      	adds	r3, #4
 8004c44:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004c48:	e882 0003 	stmia.w	r2, {r0, r1}
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f103 020c 	add.w	r2, r3, #12
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	330c      	adds	r3, #12
 8004c56:	4619      	mov	r1, r3
 8004c58:	4610      	mov	r0, r2
 8004c5a:	f001 fc1f 	bl	800649c <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4618      	mov	r0, r3
 8004c62:	3708      	adds	r7, #8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEEEEKNSB_IS2_T_Li0EEERKNS0_ISG_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004c68:	b590      	push	{r4, r7, lr}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004c74:	68b8      	ldr	r0, [r7, #8]
 8004c76:	f000 fc3e 	bl	80054f6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004c7a:	4604      	mov	r4, r0
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f001 fc19 	bl	80064b4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEE7derivedEv>
 8004c82:	4603      	mov	r3, r0
 8004c84:	461a      	mov	r2, r3
 8004c86:	4621      	mov	r1, r4
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	f001 fc51 	bl	8006530 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_>
}
 8004c8e:	68f8      	ldr	r0, [r7, #12]
 8004c90:	3714      	adds	r7, #20
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd90      	pop	{r4, r7, pc}

08004c96 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKSD_>:
  * The other template parameters are:
  * \tparam Option     can be DefaultProduct, AliasFreeProduct, or LazyProduct
  *
  */
template<typename _Lhs, typename _Rhs, int Option>
class Product : public ProductImpl<_Lhs,_Rhs,Option,
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b082      	sub	sp, #8
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
 8004c9e:	6039      	str	r1, [r7, #0]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	601a      	str	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	1d1a      	adds	r2, r3, #4
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	3304      	adds	r3, #4
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	4610      	mov	r0, r2
 8004cb4:	f7ff ffb9 	bl	8004c2a <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERKSC_>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3708      	adds	r7, #8
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEplINS_7ProductIS2_NS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS5_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEKNS6_INS7_13scalar_sum_opIfNS7_6traitsIT_E6ScalarEEEKS2_KSJ_EERKNS0_ISJ_EE>:
EIGEN_MAKE_CWISE_BINARY_OP(operator+,sum)
 8004cc2:	b5b0      	push	{r4, r5, r7, lr}
 8004cc4:	b086      	sub	sp, #24
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	60f8      	str	r0, [r7, #12]
 8004cca:	60b9      	str	r1, [r7, #8]
 8004ccc:	607a      	str	r2, [r7, #4]
 8004cce:	68b8      	ldr	r0, [r7, #8]
 8004cd0:	f000 fc11 	bl	80054f6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004cd4:	4604      	mov	r4, r0
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f001 fc5a 	bl	8006590 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEE7derivedEv>
 8004cdc:	4605      	mov	r5, r0
 8004cde:	f107 0314 	add.w	r3, r7, #20
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f000 ff5d 	bl	8005ba2 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8004ce8:	f107 0314 	add.w	r3, r7, #20
 8004cec:	462a      	mov	r2, r5
 8004cee:	4621      	mov	r1, r4
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f001 fc8d 	bl	8006610 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_>
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	3718      	adds	r7, #24
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bdb0      	pop	{r4, r5, r7, pc}

08004cfe <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS1_KNS_7ProductIS1_NS3_INS4_20scalar_difference_opIffEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEES1_Li0EEEEELi0EEEEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b082      	sub	sp, #8
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
 8004d06:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6839      	ldr	r1, [r7, #0]
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f001 fcbf 	bl	8006690 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>
 8004d12:	4603      	mov	r3, r0
    }
 8004d14:	4618      	mov	r0, r3
 8004d16:	3708      	adds	r7, #8
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004d1c:	b590      	push	{r4, r7, lr}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004d28:	68b8      	ldr	r0, [r7, #8]
 8004d2a:	f000 fbe4 	bl	80054f6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004d2e:	4604      	mov	r4, r0
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f001 f879 	bl	8005e28 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8004d36:	4603      	mov	r3, r0
 8004d38:	461a      	mov	r2, r3
 8004d3a:	4621      	mov	r1, r4
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f001 fce5 	bl	800670c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_>
}
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	3714      	adds	r7, #20
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd90      	pop	{r4, r7, pc}

08004d4a <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmiINS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEKNS_13CwiseBinaryOpINS_8internal20scalar_difference_opIfNSA_6traitsIT_E6ScalarEEEKS2_KSD_EERKNS0_ISD_EE>:
EIGEN_MAKE_CWISE_BINARY_OP(operator-,difference)
 8004d4a:	b5b0      	push	{r4, r5, r7, lr}
 8004d4c:	b086      	sub	sp, #24
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	60f8      	str	r0, [r7, #12]
 8004d52:	60b9      	str	r1, [r7, #8]
 8004d54:	607a      	str	r2, [r7, #4]
 8004d56:	68b8      	ldr	r0, [r7, #8]
 8004d58:	f000 fd95 	bl	8005886 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004d5c:	4604      	mov	r4, r0
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f001 fd02 	bl	8006768 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE7derivedEv>
 8004d64:	4605      	mov	r5, r0
 8004d66:	f107 0314 	add.w	r3, r7, #20
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f001 fb15 	bl	800639a <_ZN5Eigen8internal20scalar_difference_opIffEC1Ev>
 8004d70:	f107 0314 	add.w	r3, r7, #20
 8004d74:	462a      	mov	r2, r5
 8004d76:	4621      	mov	r1, r4
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f001 fd35 	bl	80067e8 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_>
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	3718      	adds	r7, #24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bdb0      	pop	{r4, r5, r7, pc}

08004d86 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERKSC_>:
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b082      	sub	sp, #8
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
 8004d8e:	6039      	str	r1, [r7, #0]
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	601a      	str	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	1d1a      	adds	r2, r3, #4
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	3304      	adds	r3, #4
 8004da0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004da4:	e882 0003 	stmia.w	r2, {r0, r1}
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f103 020c 	add.w	r2, r3, #12
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	330c      	adds	r3, #12
 8004db2:	4619      	mov	r1, r3
 8004db4:	4610      	mov	r0, r2
 8004db6:	f001 fb71 	bl	800649c <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3708      	adds	r7, #8
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEmlIS6_EEKNS8_ISD_T_Li0EEERKNS0_ISG_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004dc4:	b590      	push	{r4, r7, lr}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004dd0:	68b8      	ldr	r0, [r7, #8]
 8004dd2:	f001 fd4b 	bl	800686c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE7derivedEv>
 8004dd6:	4604      	mov	r4, r0
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 fd54 	bl	8005886 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004dde:	4603      	mov	r3, r0
 8004de0:	461a      	mov	r2, r3
 8004de2:	4621      	mov	r1, r4
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f001 fd7f 	bl	80068e8 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_>
}
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	3714      	adds	r7, #20
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd90      	pop	{r4, r7, pc}

08004df2 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS3_INS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES1_Li0EEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b082      	sub	sp, #8
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
 8004dfa:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6839      	ldr	r1, [r7, #0]
 8004e00:	4618      	mov	r0, r3
 8004e02:	f001 fd9f 	bl	8006944 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
 8004e06:	4603      	mov	r3, r0
    }
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3708      	adds	r7, #8
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <_ZN5Eigen8symbolic9ValueExprINS_8internal8FixedIntILi1EEEEC1Ev>:
  ValueExpr() {}
 8004e26:	b480      	push	{r7}
 8004e28:	b083      	sub	sp, #12
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4618      	mov	r0, r3
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <_ZN5Eigen8symbolic7AddExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEENS0_9ValueExprINS3_8FixedIntILi1EEEEEEC1ERKS5_RKS9_>:

template<typename Arg0, typename Arg1>
class AddExpr : public BaseExpr<AddExpr<Arg0,Arg1> >
{
public:
  AddExpr(const Arg0& arg0, const Arg1& arg1) : m_arg0(arg0), m_arg1(arg1) {}
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>:
    EIGEN_MATRIX_FUNCTION_1(MatrixPowerReturnValue,        pow, power to \c p, const RealScalar& p)
    EIGEN_MATRIX_FUNCTION_1(MatrixComplexPowerReturnValue, pow, power to \c p, const std::complex<RealScalar>& p)

  protected:
    EIGEN_DEFAULT_COPY_CONSTRUCTOR(MatrixBase)
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(MatrixBase)
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b082      	sub	sp, #8
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f001 fd89 	bl	8006976 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4618      	mov	r0, r3
 8004e68:	3708      	adds	r7, #8
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>:
    // Prevent user from trying to instantiate PlainObjectBase objects
    // by making all its constructor protected. See bug 1074.
  protected:

    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	b082      	sub	sp, #8
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f7ff ffed 	bl	8004e56 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f001 fd84 	bl	800698c <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EEC1Ev>
    {
//       _check_template_params();
//       EIGEN_INITIALIZE_COEFFS_IF_THAT_OPTION_IS_ENABLED
    }
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4618      	mov	r0, r3
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    void swap(DenseBase<OtherDerived> const & other)
    { Base::swap(other.derived()); }

    EIGEN_DEVICE_FUNC
    static EIGEN_STRONG_INLINE void _check_template_params()
 8004e8e:	b480      	push	{r7}
 8004e90:	af00      	add	r7, sp, #0
                        && ((MaxColsAtCompileTime == Dynamic) || (MaxColsAtCompileTime >= 0))
                        && (MaxRowsAtCompileTime == RowsAtCompileTime || RowsAtCompileTime==Dynamic)
                        && (MaxColsAtCompileTime == ColsAtCompileTime || ColsAtCompileTime==Dynamic)
                        && (Options & (DontAlign|RowMajor)) == Options),
        INVALID_MATRIX_TEMPLATE_PARAMETERS)
    }
 8004e92:	bf00      	nop
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f001 fd7e 	bl	80069a6 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4618      	mov	r0, r3
 8004eae:	3708      	adds	r7, #8
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f7ff ffed 	bl	8004e9c <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f001 fd79 	bl	80069bc <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EEC1Ev>
    }
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3708      	adds	r7, #8
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>:
    static EIGEN_STRONG_INLINE void _check_template_params()
 8004ed4:	b480      	push	{r7}
 8004ed6:	af00      	add	r7, sp, #0
    }
 8004ed8:	bf00      	nop
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr

08004ee2 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>:
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b082      	sub	sp, #8
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f001 fd73 	bl	80069d6 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>:
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b082      	sub	sp, #8
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f7ff ffed 	bl	8004ee2 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f001 fd6e 	bl	80069ec <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EEC1Ev>
    }
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4618      	mov	r0, r3
 8004f14:	3708      	adds	r7, #8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>:
    static EIGEN_STRONG_INLINE void _check_template_params()
 8004f1a:	b480      	push	{r7}
 8004f1c:	af00      	add	r7, sp, #0
    }
 8004f1e:	bf00      	nop
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f001 fd68 	bl	8006a06 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3708      	adds	r7, #8
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f7ff ffed 	bl	8004f28 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4618      	mov	r0, r3
 8004f52:	f001 fd63 	bl	8006a1c <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EEC1Ev>
    }
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3708      	adds	r7, #8
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE22_check_template_paramsEv>:
    static EIGEN_STRONG_INLINE void _check_template_params()
 8004f60:	b480      	push	{r7}
 8004f62:	af00      	add	r7, sp, #0
    }
 8004f64:	bf00      	nop
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
	...

08004f70 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf>:
  inline CommaInitializer(XprType& xpr, const Scalar& s)
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	601a      	str	r2, [r3, #0]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	605a      	str	r2, [r3, #4]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	609a      	str	r2, [r3, #8]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2201      	movs	r2, #1
 8004f92:	60da      	str	r2, [r3, #12]
    eigen_assert(m_xpr.rows() > 0 && m_xpr.cols() > 0
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f000 f86a 	bl	8005072 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	dd07      	ble.n	8004fb4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x44>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f000 f857 	bl	800505c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	dc05      	bgt.n	8004fc0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x50>
 8004fb4:	4b0b      	ldr	r3, [pc, #44]	; (8004fe4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x74>)
 8004fb6:	4a0c      	ldr	r2, [pc, #48]	; (8004fe8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x78>)
 8004fb8:	2124      	movs	r1, #36	; 0x24
 8004fba:	480c      	ldr	r0, [pc, #48]	; (8004fec <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x7c>)
 8004fbc:	f018 ff72 	bl	801dea4 <__assert_func>
 8004fc0:	bf00      	nop
    m_xpr.coeffRef(0,0) = s;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	2100      	movs	r1, #0
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f000 f85c 	bl	8005088 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8coeffRefEii>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	6013      	str	r3, [r2, #0]
  }
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	0801f5c8 	.word	0x0801f5c8
 8004fe8:	0801f624 	.word	0x0801f624
 8004fec:	0801f034 	.word	0x0801f034

08004ff0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv>:
  inline XprType& finished() {
 8004ff0:	b590      	push	{r4, r7, lr}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685a      	ldr	r2, [r3, #4]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	18d4      	adds	r4, r2, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4618      	mov	r0, r3
 8005008:	f000 f833 	bl	8005072 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800500c:	4603      	mov	r3, r0
 800500e:	429c      	cmp	r4, r3
 8005010:	d007      	beq.n	8005022 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x32>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4618      	mov	r0, r3
 8005018:	f000 f820 	bl	800505c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d109      	bne.n	8005036 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x46>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	689c      	ldr	r4, [r3, #8]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4618      	mov	r0, r3
 800502c:	f000 f816 	bl	800505c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005030:	4603      	mov	r3, r0
 8005032:	429c      	cmp	r4, r3
 8005034:	d005      	beq.n	8005042 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x52>
 8005036:	4b06      	ldr	r3, [pc, #24]	; (8005050 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x60>)
 8005038:	4a06      	ldr	r2, [pc, #24]	; (8005054 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x64>)
 800503a:	217a      	movs	r1, #122	; 0x7a
 800503c:	4806      	ldr	r0, [pc, #24]	; (8005058 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x68>)
 800503e:	f018 ff31 	bl	801dea4 <__assert_func>
 8005042:	bf00      	nop
      return m_xpr;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
  }
 8005048:	4618      	mov	r0, r3
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	bd90      	pop	{r4, r7, pc}
 8005050:	0801f6d4 	.word	0x0801f6d4
 8005054:	0801f774 	.word	0x0801f774
 8005058:	0801f034 	.word	0x0801f034

0800505c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	f001 fce7 	bl	8006a36 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4colsEv>
 8005068:	4603      	mov	r3, r0
 800506a:	4618      	mov	r0, r3
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}

08005072 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 8005072:	b580      	push	{r7, lr}
 8005074:	b082      	sub	sp, #8
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
 800507a:	f001 fce4 	bl	8006a46 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4rowsEv>
 800507e:	4603      	mov	r3, r0
 8005080:	4618      	mov	r0, r3
 8005082:	3708      	adds	r7, #8
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)
 8005088:	b590      	push	{r4, r7, lr}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
        return m_storage.data()[rowId + colId * m_storage.rows()];
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	4618      	mov	r0, r3
 8005098:	f001 fcdd 	bl	8006a56 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4dataEv>
 800509c:	4604      	mov	r4, r0
 800509e:	f001 fcd2 	bl	8006a46 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4rowsEv>
 80050a2:	4602      	mov	r2, r0
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	fb03 f202 	mul.w	r2, r3, r2
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	4413      	add	r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	4423      	add	r3, r4
    }
 80050b2:	4618      	mov	r0, r3
 80050b4:	3714      	adds	r7, #20
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd90      	pop	{r4, r7, pc}
	...

080050bc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf>:
  inline CommaInitializer(XprType& xpr, const Scalar& s)
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	607a      	str	r2, [r7, #4]
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	601a      	str	r2, [r3, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	605a      	str	r2, [r3, #4]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2201      	movs	r2, #1
 80050d8:	609a      	str	r2, [r3, #8]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2201      	movs	r2, #1
 80050de:	60da      	str	r2, [r3, #12]
    eigen_assert(m_xpr.rows() > 0 && m_xpr.cols() > 0
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4618      	mov	r0, r3
 80050e6:	f000 f86a 	bl	80051be <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	dd07      	ble.n	8005100 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x44>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4618      	mov	r0, r3
 80050f6:	f000 f857 	bl	80051a8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	dc05      	bgt.n	800510c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x50>
 8005100:	4b0b      	ldr	r3, [pc, #44]	; (8005130 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x74>)
 8005102:	4a0c      	ldr	r2, [pc, #48]	; (8005134 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x78>)
 8005104:	2124      	movs	r1, #36	; 0x24
 8005106:	480c      	ldr	r0, [pc, #48]	; (8005138 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x7c>)
 8005108:	f018 fecc 	bl	801dea4 <__assert_func>
 800510c:	bf00      	nop
    m_xpr.coeffRef(0,0) = s;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2200      	movs	r2, #0
 8005114:	2100      	movs	r1, #0
 8005116:	4618      	mov	r0, r3
 8005118:	f000 f85c 	bl	80051d4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8coeffRefEii>
 800511c:	4602      	mov	r2, r0
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	6013      	str	r3, [r2, #0]
  }
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	0801f5c8 	.word	0x0801f5c8
 8005134:	0801f7dc 	.word	0x0801f7dc
 8005138:	0801f034 	.word	0x0801f034

0800513c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv>:
  inline XprType& finished() {
 800513c:	b590      	push	{r4, r7, lr}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	18d4      	adds	r4, r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4618      	mov	r0, r3
 8005154:	f000 f833 	bl	80051be <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8005158:	4603      	mov	r3, r0
 800515a:	429c      	cmp	r4, r3
 800515c:	d007      	beq.n	800516e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x32>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4618      	mov	r0, r3
 8005164:	f000 f820 	bl	80051a8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d109      	bne.n	8005182 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x46>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	689c      	ldr	r4, [r3, #8]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4618      	mov	r0, r3
 8005178:	f000 f816 	bl	80051a8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800517c:	4603      	mov	r3, r0
 800517e:	429c      	cmp	r4, r3
 8005180:	d005      	beq.n	800518e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x52>
 8005182:	4b06      	ldr	r3, [pc, #24]	; (800519c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x60>)
 8005184:	4a06      	ldr	r2, [pc, #24]	; (80051a0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x64>)
 8005186:	217a      	movs	r1, #122	; 0x7a
 8005188:	4806      	ldr	r0, [pc, #24]	; (80051a4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x68>)
 800518a:	f018 fe8b 	bl	801dea4 <__assert_func>
 800518e:	bf00      	nop
      return m_xpr;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
  }
 8005194:	4618      	mov	r0, r3
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	bd90      	pop	{r4, r7, pc}
 800519c:	0801f6d4 	.word	0x0801f6d4
 80051a0:	0801f88c 	.word	0x0801f88c
 80051a4:	0801f034 	.word	0x0801f034

080051a8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	f001 fc5c 	bl	8006a6c <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4colsEv>
 80051b4:	4603      	mov	r3, r0
 80051b6:	4618      	mov	r0, r3
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 80051be:	b580      	push	{r7, lr}
 80051c0:	b082      	sub	sp, #8
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
 80051c6:	f001 fc59 	bl	8006a7c <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4rowsEv>
 80051ca:	4603      	mov	r3, r0
 80051cc:	4618      	mov	r0, r3
 80051ce:	3708      	adds	r7, #8
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)
 80051d4:	b590      	push	{r4, r7, lr}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
        return m_storage.data()[rowId + colId * m_storage.rows()];
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	4618      	mov	r0, r3
 80051e4:	f001 fc52 	bl	8006a8c <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv>
 80051e8:	4604      	mov	r4, r0
 80051ea:	f001 fc47 	bl	8006a7c <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4rowsEv>
 80051ee:	4602      	mov	r2, r0
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	fb03 f202 	mul.w	r2, r3, r2
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	4413      	add	r3, r2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4423      	add	r3, r4
    }
 80051fe:	4618      	mov	r0, r3
 8005200:	3714      	adds	r7, #20
 8005202:	46bd      	mov	sp, r7
 8005204:	bd90      	pop	{r4, r7, pc}
	...

08005208 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf>:
  inline CommaInitializer(XprType& xpr, const Scalar& s)
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	601a      	str	r2, [r3, #0]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	605a      	str	r2, [r3, #4]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2201      	movs	r2, #1
 8005224:	609a      	str	r2, [r3, #8]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2201      	movs	r2, #1
 800522a:	60da      	str	r2, [r3, #12]
    eigen_assert(m_xpr.rows() > 0 && m_xpr.cols() > 0
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4618      	mov	r0, r3
 8005232:	f000 ff0e 	bl	8006052 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	dd07      	ble.n	800524c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x44>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4618      	mov	r0, r3
 8005242:	f000 ff11 	bl	8006068 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	dc05      	bgt.n	8005258 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x50>
 800524c:	4b0b      	ldr	r3, [pc, #44]	; (800527c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x74>)
 800524e:	4a0c      	ldr	r2, [pc, #48]	; (8005280 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x78>)
 8005250:	2124      	movs	r1, #36	; 0x24
 8005252:	480c      	ldr	r0, [pc, #48]	; (8005284 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x7c>)
 8005254:	f018 fe26 	bl	801dea4 <__assert_func>
 8005258:	bf00      	nop
    m_xpr.coeffRef(0,0) = s;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2200      	movs	r2, #0
 8005260:	2100      	movs	r1, #0
 8005262:	4618      	mov	r0, r3
 8005264:	f001 fc1d 	bl	8006aa2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>
 8005268:	4602      	mov	r2, r0
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6013      	str	r3, [r2, #0]
  }
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	4618      	mov	r0, r3
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	0801f5c8 	.word	0x0801f5c8
 8005280:	0801f8f4 	.word	0x0801f8f4
 8005284:	0801f034 	.word	0x0801f034

08005288 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv>:
  inline XprType& finished() {
 8005288:	b590      	push	{r4, r7, lr}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685a      	ldr	r2, [r3, #4]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	18d4      	adds	r4, r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4618      	mov	r0, r3
 80052a0:	f000 fed7 	bl	8006052 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 80052a4:	4603      	mov	r3, r0
 80052a6:	429c      	cmp	r4, r3
 80052a8:	d007      	beq.n	80052ba <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x32>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4618      	mov	r0, r3
 80052b0:	f000 feda 	bl	8006068 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d109      	bne.n	80052ce <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x46>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	689c      	ldr	r4, [r3, #8]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4618      	mov	r0, r3
 80052c4:	f000 fed0 	bl	8006068 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 80052c8:	4603      	mov	r3, r0
 80052ca:	429c      	cmp	r4, r3
 80052cc:	d005      	beq.n	80052da <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x52>
 80052ce:	4b06      	ldr	r3, [pc, #24]	; (80052e8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x60>)
 80052d0:	4a06      	ldr	r2, [pc, #24]	; (80052ec <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x64>)
 80052d2:	217a      	movs	r1, #122	; 0x7a
 80052d4:	4806      	ldr	r0, [pc, #24]	; (80052f0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x68>)
 80052d6:	f018 fde5 	bl	801dea4 <__assert_func>
 80052da:	bf00      	nop
      return m_xpr;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
  }
 80052e0:	4618      	mov	r0, r3
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd90      	pop	{r4, r7, pc}
 80052e8:	0801f6d4 	.word	0x0801f6d4
 80052ec:	0801f9a4 	.word	0x0801f9a4
 80052f0:	0801f034 	.word	0x0801f034

080052f4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf>:
  inline CommaInitializer(XprType& xpr, const Scalar& s)
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	68ba      	ldr	r2, [r7, #8]
 8005304:	601a      	str	r2, [r3, #0]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	605a      	str	r2, [r3, #4]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2201      	movs	r2, #1
 8005310:	609a      	str	r2, [r3, #8]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2201      	movs	r2, #1
 8005316:	60da      	str	r2, [r3, #12]
    eigen_assert(m_xpr.rows() > 0 && m_xpr.cols() > 0
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4618      	mov	r0, r3
 800531e:	f000 f86a 	bl	80053f6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	dd07      	ble.n	8005338 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x44>
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4618      	mov	r0, r3
 800532e:	f000 f857 	bl	80053e0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	dc05      	bgt.n	8005344 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x50>
 8005338:	4b0b      	ldr	r3, [pc, #44]	; (8005368 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x74>)
 800533a:	4a0c      	ldr	r2, [pc, #48]	; (800536c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x78>)
 800533c:	2124      	movs	r1, #36	; 0x24
 800533e:	480c      	ldr	r0, [pc, #48]	; (8005370 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x7c>)
 8005340:	f018 fdb0 	bl	801dea4 <__assert_func>
 8005344:	bf00      	nop
    m_xpr.coeffRef(0,0) = s;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2200      	movs	r2, #0
 800534c:	2100      	movs	r1, #0
 800534e:	4618      	mov	r0, r3
 8005350:	f000 f85c 	bl	800540c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8coeffRefEii>
 8005354:	4602      	mov	r2, r0
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	6013      	str	r3, [r2, #0]
  }
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	4618      	mov	r0, r3
 8005360:	3710      	adds	r7, #16
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	0801f5c8 	.word	0x0801f5c8
 800536c:	0801fa0c 	.word	0x0801fa0c
 8005370:	0801f034 	.word	0x0801f034

08005374 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv>:
  inline XprType& finished() {
 8005374:	b590      	push	{r4, r7, lr}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685a      	ldr	r2, [r3, #4]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	18d4      	adds	r4, r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4618      	mov	r0, r3
 800538c:	f000 f833 	bl	80053f6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8005390:	4603      	mov	r3, r0
 8005392:	429c      	cmp	r4, r3
 8005394:	d007      	beq.n	80053a6 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x32>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4618      	mov	r0, r3
 800539c:	f000 f820 	bl	80053e0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d109      	bne.n	80053ba <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x46>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	689c      	ldr	r4, [r3, #8]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4618      	mov	r0, r3
 80053b0:	f000 f816 	bl	80053e0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80053b4:	4603      	mov	r3, r0
 80053b6:	429c      	cmp	r4, r3
 80053b8:	d005      	beq.n	80053c6 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x52>
 80053ba:	4b06      	ldr	r3, [pc, #24]	; (80053d4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x60>)
 80053bc:	4a06      	ldr	r2, [pc, #24]	; (80053d8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x64>)
 80053be:	217a      	movs	r1, #122	; 0x7a
 80053c0:	4806      	ldr	r0, [pc, #24]	; (80053dc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x68>)
 80053c2:	f018 fd6f 	bl	801dea4 <__assert_func>
 80053c6:	bf00      	nop
      return m_xpr;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
  }
 80053cc:	4618      	mov	r0, r3
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd90      	pop	{r4, r7, pc}
 80053d4:	0801f6d4 	.word	0x0801f6d4
 80053d8:	0801fabc 	.word	0x0801fabc
 80053dc:	0801f034 	.word	0x0801f034

080053e0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	f001 fb74 	bl	8006ad4 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4colsEv>
 80053ec:	4603      	mov	r3, r0
 80053ee:	4618      	mov	r0, r3
 80053f0:	3708      	adds	r7, #8
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b082      	sub	sp, #8
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
 80053fe:	f001 fb71 	bl	8006ae4 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4rowsEv>
 8005402:	4603      	mov	r3, r0
 8005404:	4618      	mov	r0, r3
 8005406:	3708      	adds	r7, #8
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)
 800540c:	b590      	push	{r4, r7, lr}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
        return m_storage.data()[colId + rowId * m_storage.cols()];
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	4618      	mov	r0, r3
 800541c:	f001 fb6a 	bl	8006af4 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4dataEv>
 8005420:	4604      	mov	r4, r0
 8005422:	f001 fb57 	bl	8006ad4 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4colsEv>
 8005426:	4602      	mov	r2, r0
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	fb03 f202 	mul.w	r2, r3, r2
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4413      	add	r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4423      	add	r3, r4
    }
 8005436:	4618      	mov	r0, r3
 8005438:	3714      	adds	r7, #20
 800543a:	46bd      	mov	sp, r7
 800543c:	bd90      	pop	{r4, r7, pc}

0800543e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800543e:	b580      	push	{r7, lr}
 8005440:	b082      	sub	sp, #8
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 f855 	bl	80054f6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800544c:	4603      	mov	r3, r0
 800544e:	4618      	mov	r0, r3
 8005450:	f7ff feb5 	bl	80051be <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8005454:	4603      	mov	r3, r0
 8005456:	4618      	mov	r0, r3
 8005458:	3708      	adds	r7, #8
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800545e:	b580      	push	{r7, lr}
 8005460:	b082      	sub	sp, #8
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f845 	bl	80054f6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800546c:	4603      	mov	r3, r0
 800546e:	4618      	mov	r0, r3
 8005470:	f7ff fe9a 	bl	80051a8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8005474:	4603      	mov	r3, r0
 8005476:	4618      	mov	r0, r3
 8005478:	3708      	adds	r7, #8
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
protected:
  Index m_outerStride;
};

template<typename Derived>
struct evaluator<PlainObjectBase<Derived> >
 800547e:	b580      	push	{r7, lr}
 8005480:	b082      	sub	sp, #8
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f001 fb4f 	bl	8006b2a <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4618      	mov	r0, r3
 8005490:	3708      	adds	r7, #8
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}

08005496 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:

  plainobjectbase_evaluator_data<Scalar,OuterStrideAtCompileTime> m_d;
};

template<typename Scalar, int Rows, int Cols, int Options, int MaxRows, int MaxCols>
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 8005496:	b580      	push	{r7, lr}
 8005498:	b082      	sub	sp, #8
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4618      	mov	r0, r3
 80054a2:	f7ff ffec 	bl	800547e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4618      	mov	r0, r3
 80054aa:	3708      	adds	r7, #8
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index row, Index col)
 80054b0:	b590      	push	{r4, r7, lr}
 80054b2:	b087      	sub	sp, #28
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
      return internal::evaluator<Derived>(derived()).coeffRef(row,col);
 80054bc:	68f8      	ldr	r0, [r7, #12]
 80054be:	f000 f90f 	bl	80056e0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80054c2:	4602      	mov	r2, r0
 80054c4:	f107 0314 	add.w	r3, r7, #20
 80054c8:	4611      	mov	r1, r2
 80054ca:	4618      	mov	r0, r3
 80054cc:	f001 fb1d 	bl	8006b0a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 80054d0:	f107 0314 	add.w	r3, r7, #20
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	68b9      	ldr	r1, [r7, #8]
 80054d8:	4618      	mov	r0, r3
 80054da:	f001 fb31 	bl	8006b40 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEii>
 80054de:	4604      	mov	r4, r0
 80054e0:	bf00      	nop
 80054e2:	f107 0314 	add.w	r3, r7, #20
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7ff ffd5 	bl	8005496 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 80054ec:	4623      	mov	r3, r4
    }
 80054ee:	4618      	mov	r0, r3
 80054f0:	371c      	adds	r7, #28
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd90      	pop	{r4, r7, pc}

080054f6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 80054f6:	b480      	push	{r7}
 80054f8:	b083      	sub	sp, #12
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4618      	mov	r0, r3
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKf>:
namespace internal {

template<typename Scalar>
struct scalar_constant_op {
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE scalar_constant_op(const scalar_constant_op& other) : m_other(other.m_other) { }
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE scalar_constant_op(const Scalar& other) : m_other(other) { }
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	601a      	str	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4618      	mov	r0, r3
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <_ZN5Eigen10MatrixBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f001 fb1b 	bl	8006b70 <_ZN5Eigen9DenseBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4618      	mov	r0, r3
 800553e:	3708      	adds	r7, #8
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_>:

    typedef typename internal::dense_xpr_base<CwiseNullaryOp>::type Base;
    EIGEN_DENSE_PUBLIC_INTERFACE(CwiseNullaryOp)

    EIGEN_DEVICE_FUNC
    CwiseNullaryOp(Index rows, Index cols, const NullaryOp& func = NullaryOp())
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
 8005550:	603b      	str	r3, [r7, #0]
      : m_rows(rows), m_cols(cols), m_functor(func)
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f7ff ffea 	bl	800552c <_ZN5Eigen10MatrixBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	68b9      	ldr	r1, [r7, #8]
 800555c:	4618      	mov	r0, r3
 800555e:	f001 fb13 	bl	8006b88 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	3301      	adds	r3, #1
 8005566:	6879      	ldr	r1, [r7, #4]
 8005568:	4618      	mov	r0, r3
 800556a:	f001 fb27 	bl	8006bbc <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	3304      	adds	r3, #4
 8005572:	6839      	ldr	r1, [r7, #0]
 8005574:	4618      	mov	r0, r3
 8005576:	f000 f897 	bl	80056a8 <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKS2_>
    {
      eigen_assert(rows >= 0
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	2b00      	cmp	r3, #0
 800557e:	db08      	blt.n	8005592 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x4e>
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	2b03      	cmp	r3, #3
 8005584:	d105      	bne.n	8005592 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x4e>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2b00      	cmp	r3, #0
 800558a:	db02      	blt.n	8005592 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x4e>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b01      	cmp	r3, #1
 8005590:	d005      	beq.n	800559e <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x5a>
 8005592:	4b05      	ldr	r3, [pc, #20]	; (80055a8 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x64>)
 8005594:	4a05      	ldr	r2, [pc, #20]	; (80055ac <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x68>)
 8005596:	2147      	movs	r1, #71	; 0x47
 8005598:	4805      	ldr	r0, [pc, #20]	; (80055b0 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x6c>)
 800559a:	f018 fc83 	bl	801dea4 <__assert_func>
            && (RowsAtCompileTime == Dynamic || RowsAtCompileTime == rows)
            &&  cols >= 0
            && (ColsAtCompileTime == Dynamic || ColsAtCompileTime == cols));
    }
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	4618      	mov	r0, r3
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	0801fb24 	.word	0x0801fb24
 80055ac:	0801fbbc 	.word	0x0801fbbc
 80055b0:	0801fcb0 	.word	0x0801fcb0

080055b4 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>:
template<typename LhsScalar,typename RhsScalar>
struct scalar_product_op  : binary_op_base<LhsScalar,RhsScalar>
{
  typedef typename ScalarBinaryOpTraits<LhsScalar,RhsScalar,scalar_product_op>::ReturnType result_type;
#ifndef EIGEN_SCALAR_BINARY_OP_PLUGIN
  EIGEN_EMPTY_STRUCT_CTOR(scalar_product_op)
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4618      	mov	r0, r3
 80055c0:	370c      	adds	r7, #12
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr

080055ca <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEC1Ev>:
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b082      	sub	sp, #8
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f001 fb0c 	bl	8006bf0 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEC1Ev>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4618      	mov	r0, r3
 80055dc:	3708      	adds	r7, #8
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EENS_5DenseEEC1Ev>:
    const BinaryOp m_functor;
};

// Generic API dispatcher
template<typename BinaryOp, typename Lhs, typename Rhs, typename StorageKind>
class CwiseBinaryOpImpl
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b082      	sub	sp, #8
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f7ff ffed 	bl	80055ca <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEC1Ev>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4618      	mov	r0, r3
 80055f4:	3708      	adds	r7, #8
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}

080055fa <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:

    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
    Index rows() const { return m_rows.value(); }
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b082      	sub	sp, #8
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
 8005602:	f001 fb00 	bl	8006c06 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8005606:	4603      	mov	r3, r0
 8005608:	4618      	mov	r0, r3
 800560a:	3708      	adds	r7, #8
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
    Index cols() const { return m_cols.value(); }
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	f001 fafd 	bl	8006c16 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800561c:	4603      	mov	r3, r0
 800561e:	4618      	mov	r0, r3
 8005620:	3708      	adds	r7, #8
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
	...

08005628 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8005628:	b590      	push	{r4, r7, lr}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
 8005634:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8005636:	68f8      	ldr	r0, [r7, #12]
 8005638:	f7ff ffd3 	bl	80055e2 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EENS_5DenseEEC1Ev>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	68ba      	ldr	r2, [r7, #8]
 8005640:	601a      	str	r2, [r3, #0]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	3304      	adds	r3, #4
 8005646:	6879      	ldr	r1, [r7, #4]
 8005648:	4618      	mov	r0, r3
 800564a:	f7ff f871 	bl	8004730 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS7_>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	330c      	adds	r3, #12
 8005652:	6839      	ldr	r1, [r7, #0]
 8005654:	4618      	mov	r0, r3
 8005656:	f000 f837 	bl	80056c8 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	4618      	mov	r0, r3
 800565e:	f7ff fdae 	bl	80051be <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8005662:	4604      	mov	r4, r0
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f7ff ffc8 	bl	80055fa <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800566a:	4603      	mov	r3, r0
 800566c:	429c      	cmp	r4, r3
 800566e:	d10a      	bne.n	8005686 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x5e>
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	4618      	mov	r0, r3
 8005674:	f7ff fd98 	bl	80051a8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8005678:	4604      	mov	r4, r0
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f7ff ffc8 	bl	8005610 <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8005680:	4603      	mov	r3, r0
 8005682:	429c      	cmp	r4, r3
 8005684:	d005      	beq.n	8005692 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x6a>
 8005686:	4b05      	ldr	r3, [pc, #20]	; (800569c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x74>)
 8005688:	4a05      	ldr	r2, [pc, #20]	; (80056a0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x78>)
 800568a:	2174      	movs	r1, #116	; 0x74
 800568c:	4805      	ldr	r0, [pc, #20]	; (80056a4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x7c>)
 800568e:	f018 fc09 	bl	801dea4 <__assert_func>
    }
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	4618      	mov	r0, r3
 8005696:	3714      	adds	r7, #20
 8005698:	46bd      	mov	sp, r7
 800569a:	bd90      	pop	{r4, r7, pc}
 800569c:	0801fd0c 	.word	0x0801fd0c
 80056a0:	0801fd48 	.word	0x0801fd48
 80056a4:	0801ff70 	.word	0x0801ff70

080056a8 <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKS2_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE scalar_constant_op(const scalar_constant_op& other) : m_other(other.m_other) { }
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	601a      	str	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4618      	mov	r0, r3
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>:
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4618      	mov	r0, r3
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>:
  Derived& derived() { return *static_cast<Derived*>(this); }
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4618      	mov	r0, r3
 80056ec:	370c      	adds	r7, #12
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr

080056f6 <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b082      	sub	sp, #8
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f001 fa91 	bl	8006c26 <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4618      	mov	r0, r3
 8005708:	3708      	adds	r7, #8
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <_ZN5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 800570e:	b580      	push	{r7, lr}
 8005710:	b082      	sub	sp, #8
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f7ff ffed 	bl	80056f6 <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4618      	mov	r0, r3
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <_ZN5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 8005726:	b580      	push	{r7, lr}
 8005728:	b082      	sub	sp, #8
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
 800572e:	6039      	str	r1, [r7, #0]
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f7ff ffec 	bl	800570e <_ZN5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEEC1Ev>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	683a      	ldr	r2, [r7, #0]
 800573a:	601a      	str	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4618      	mov	r0, r3
 8005740:	3708      	adds	r7, #8
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8005746:	b480      	push	{r7}
 8005748:	b083      	sub	sp, #12
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4618      	mov	r0, r3
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>:
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4618      	mov	r0, r3
 8005768:	370c      	adds	r7, #12
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEEC1Ev>:
 8005772:	b580      	push	{r7, lr}
 8005774:	b082      	sub	sp, #8
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f001 fa5e 	bl	8006c3c <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEEC1Ev>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4618      	mov	r0, r3
 8005784:	3708      	adds	r7, #8
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}

0800578a <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0ELi4EEC1Ev>:
};

namespace internal {

template<typename Lhs, typename Rhs, int Option, int ProductTag = internal::product_type<Lhs,Rhs>::ret>
class dense_product_base
 800578a:	b580      	push	{r7, lr}
 800578c:	b082      	sub	sp, #8
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f7ff ffed 	bl	8005772 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEEC1Ev>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4618      	mov	r0, r3
 800579c:	3708      	adds	r7, #8
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0ENS_5DenseEEC1Ev>:
  public:
    typedef typename internal::generic_xpr_base<Product<Lhs,Rhs,Option>, MatrixXpr, StorageKind>::type Base;
};

template<typename Lhs, typename Rhs, int Option>
class ProductImpl<Lhs,Rhs,Option,Dense>
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b082      	sub	sp, #8
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f7ff ffed 	bl	800578a <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0ELi4EEC1Ev>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4618      	mov	r0, r3
 80057b4:	3708      	adds	r7, #8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 80057ba:	b580      	push	{r7, lr}
 80057bc:	b082      	sub	sp, #8
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7ff fcee 	bl	80051a8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80057cc:	4603      	mov	r3, r0
    }
 80057ce:	4618      	mov	r0, r3
 80057d0:	3708      	adds	r7, #8
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}

080057d6 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b082      	sub	sp, #8
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7ff fce0 	bl	80051a8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80057e8:	4603      	mov	r3, r0
 80057ea:	4618      	mov	r0, r3
 80057ec:	3708      	adds	r7, #8
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
	...

080057f4 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 80057f4:	b590      	push	{r4, r7, lr}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	607a      	str	r2, [r7, #4]
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f7ff ffce 	bl	80057a2 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0ENS_5DenseEEC1Ev>
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	68b9      	ldr	r1, [r7, #8]
 800580a:	4618      	mov	r0, r3
 800580c:	f7fe ffee 	bl	80047ec <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	3310      	adds	r3, #16
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	6812      	ldr	r2, [r2, #0]
 8005818:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 800581a:	68b8      	ldr	r0, [r7, #8]
 800581c:	f7ff ffcd 	bl	80057ba <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4colsEv>
 8005820:	4604      	mov	r4, r0
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f7ff ffd7 	bl	80057d6 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8005828:	4603      	mov	r3, r0
 800582a:	429c      	cmp	r4, r3
 800582c:	d005      	beq.n	800583a <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_+0x46>
 800582e:	4b06      	ldr	r3, [pc, #24]	; (8005848 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_+0x54>)
 8005830:	4a06      	ldr	r2, [pc, #24]	; (800584c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_+0x58>)
 8005832:	2160      	movs	r1, #96	; 0x60
 8005834:	4806      	ldr	r0, [pc, #24]	; (8005850 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_+0x5c>)
 8005836:	f018 fb35 	bl	801dea4 <__assert_func>
 800583a:	bf00      	nop
    }
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	4618      	mov	r0, r3
 8005840:	3714      	adds	r7, #20
 8005842:	46bd      	mov	sp, r7
 8005844:	bd90      	pop	{r4, r7, pc}
 8005846:	bf00      	nop
 8005848:	0801ffcc 	.word	0x0801ffcc
 800584c:	08020058 	.word	0x08020058
 8005850:	0802031c 	.word	0x0802031c

08005854 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8005854:	b590      	push	{r4, r7, lr}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 f8da 	bl	8005a18 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8005864:	4604      	mov	r4, r0
 8005866:	6838      	ldr	r0, [r7, #0]
 8005868:	f001 f9f3 	bl	8006c52 <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEE7derivedEv>
 800586c:	4603      	mov	r3, r0
 800586e:	4619      	mov	r1, r3
 8005870:	4620      	mov	r0, r4
 8005872:	f001 f9f9 	bl	8006c68 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEEvRT_RKT0_>
      return this->derived();
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f8ce 	bl	8005a18 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800587c:	4603      	mov	r3, r0
    }
 800587e:	4618      	mov	r0, r3
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	bd90      	pop	{r4, r7, pc}

08005886 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>:
 8005886:	b480      	push	{r7}
 8005888:	b083      	sub	sp, #12
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4618      	mov	r0, r3
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>:
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f001 f9f4 	bl	8006c92 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4618      	mov	r0, r3
 80058ae:	3708      	adds	r7, #8
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0ELi3EEC1Ev>:
class dense_product_base
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f7ff ffed 	bl	800589c <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4618      	mov	r0, r3
 80058c6:	3708      	adds	r7, #8
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f7ff ffed 	bl	80058b4 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0ELi3EEC1Ev>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4618      	mov	r0, r3
 80058de:	3708      	adds	r7, #8
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 80058e4:	b590      	push	{r4, r7, lr}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
 80058f0:	68f8      	ldr	r0, [r7, #12]
 80058f2:	f7ff ffeb 	bl	80058cc <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0ENS_5DenseEEC1Ev>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	68ba      	ldr	r2, [r7, #8]
 80058fa:	601a      	str	r2, [r3, #0]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	4618      	mov	r0, r3
 8005906:	f7ff fba9 	bl	800505c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800590a:	4604      	mov	r4, r0
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4618      	mov	r0, r3
 8005910:	f7ff fc55 	bl	80051be <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8005914:	4603      	mov	r3, r0
 8005916:	429c      	cmp	r4, r3
 8005918:	d005      	beq.n	8005926 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x42>
 800591a:	4b06      	ldr	r3, [pc, #24]	; (8005934 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x50>)
 800591c:	4a06      	ldr	r2, [pc, #24]	; (8005938 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x54>)
 800591e:	2160      	movs	r1, #96	; 0x60
 8005920:	4806      	ldr	r0, [pc, #24]	; (800593c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x58>)
 8005922:	f018 fabf 	bl	801dea4 <__assert_func>
 8005926:	bf00      	nop
    }
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	4618      	mov	r0, r3
 800592c:	3714      	adds	r7, #20
 800592e:	46bd      	mov	sp, r7
 8005930:	bd90      	pop	{r4, r7, pc}
 8005932:	bf00      	nop
 8005934:	0801ffcc 	.word	0x0801ffcc
 8005938:	08020370 	.word	0x08020370
 800593c:	0802031c 	.word	0x0802031c

08005940 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8005940:	b590      	push	{r4, r7, lr}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f7ff fec8 	bl	80056e0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8005950:	4604      	mov	r4, r0
 8005952:	6838      	ldr	r0, [r7, #0]
 8005954:	f001 f9a8 	bl	8006ca8 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>
 8005958:	4603      	mov	r3, r0
 800595a:	4619      	mov	r1, r3
 800595c:	4620      	mov	r0, r4
 800595e:	f001 f9ae 	bl	8006cbe <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEEvRT_RKT0_>
      return this->derived();
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f7ff febc 	bl	80056e0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8005968:	4603      	mov	r3, r0
    }
 800596a:	4618      	mov	r0, r3
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	bd90      	pop	{r4, r7, pc}

08005972 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEC1Ev>:
 8005972:	b580      	push	{r7, lr}
 8005974:	b082      	sub	sp, #8
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f001 f9b4 	bl	8006ce8 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEC1Ev>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4618      	mov	r0, r3
 8005984:	3708      	adds	r7, #8
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0ELi3EEC1Ev>:
class dense_product_base
 800598a:	b580      	push	{r7, lr}
 800598c:	b082      	sub	sp, #8
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f7ff ffed 	bl	8005972 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEC1Ev>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4618      	mov	r0, r3
 800599c:	3708      	adds	r7, #8
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b082      	sub	sp, #8
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7ff ffed 	bl	800598a <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0ELi3EEC1Ev>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4618      	mov	r0, r3
 80059b4:	3708      	adds	r7, #8
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
	...

080059bc <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 80059bc:	b590      	push	{r4, r7, lr}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f7ff ffea 	bl	80059a2 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0ENS_5DenseEEC1Ev>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	601a      	str	r2, [r3, #0]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	4618      	mov	r0, r3
 80059de:	f7ff fb3d 	bl	800505c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80059e2:	4604      	mov	r4, r0
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7ff fb43 	bl	8005072 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80059ec:	4603      	mov	r3, r0
 80059ee:	429c      	cmp	r4, r3
 80059f0:	d005      	beq.n	80059fe <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_+0x42>
 80059f2:	4b06      	ldr	r3, [pc, #24]	; (8005a0c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_+0x50>)
 80059f4:	4a06      	ldr	r2, [pc, #24]	; (8005a10 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_+0x54>)
 80059f6:	2160      	movs	r1, #96	; 0x60
 80059f8:	4806      	ldr	r0, [pc, #24]	; (8005a14 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_+0x58>)
 80059fa:	f018 fa53 	bl	801dea4 <__assert_func>
 80059fe:	bf00      	nop
    }
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	4618      	mov	r0, r3
 8005a04:	3714      	adds	r7, #20
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd90      	pop	{r4, r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	0801ffcc 	.word	0x0801ffcc
 8005a10:	08020498 	.word	0x08020498
 8005a14:	0802031c 	.word	0x0802031c

08005a18 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>:
  Derived& derived() { return *static_cast<Derived*>(this); }
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4618      	mov	r0, r3
 8005a24:	370c      	adds	r7, #12
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr

08005a2e <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>:
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b082      	sub	sp, #8
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f001 f961 	bl	8006cfe <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3708      	adds	r7, #8
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <_ZN5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b082      	sub	sp, #8
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f7ff ffed 	bl	8005a2e <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4618      	mov	r0, r3
 8005a58:	3708      	adds	r7, #8
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <_ZN5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 8005a5e:	b580      	push	{r7, lr}
 8005a60:	b082      	sub	sp, #8
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
 8005a66:	6039      	str	r1, [r7, #0]
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f7ff ffec 	bl	8005a46 <_ZN5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEEC1Ev>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	683a      	ldr	r2, [r7, #0]
 8005a72:	601a      	str	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4618      	mov	r0, r3
 8005a78:	3708      	adds	r7, #8
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8005a7e:	b480      	push	{r7}
 8005a80:	b083      	sub	sp, #12
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4618      	mov	r0, r3
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>:
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr

08005aaa <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEC1Ev>:
 8005aaa:	b580      	push	{r7, lr}
 8005aac:	b082      	sub	sp, #8
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f001 f92e 	bl	8006d14 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEC1Ev>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4618      	mov	r0, r3
 8005abc:	3708      	adds	r7, #8
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0ELi3EEC1Ev>:
class dense_product_base
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b082      	sub	sp, #8
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f7ff ffed 	bl	8005aaa <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEC1Ev>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3708      	adds	r7, #8
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b082      	sub	sp, #8
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f7ff ffed 	bl	8005ac2 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0ELi3EEC1Ev>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4618      	mov	r0, r3
 8005aec:	3708      	adds	r7, #8
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}

08005af2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8005af2:	b580      	push	{r7, lr}
 8005af4:	b082      	sub	sp, #8
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7ff faac 	bl	800505c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005b04:	4603      	mov	r3, r0
 8005b06:	4618      	mov	r0, r3
 8005b08:	3708      	adds	r7, #8
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b082      	sub	sp, #8
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7ff fa9e 	bl	800505c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005b20:	4603      	mov	r3, r0
 8005b22:	4618      	mov	r0, r3
 8005b24:	3708      	adds	r7, #8
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
	...

08005b2c <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005b2c:	b590      	push	{r4, r7, lr}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	607a      	str	r2, [r7, #4]
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f7ff ffce 	bl	8005ada <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0ENS_5DenseEEC1Ev>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	68ba      	ldr	r2, [r7, #8]
 8005b42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005b46:	e883 0003 	stmia.w	r3, {r0, r1}
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	3308      	adds	r3, #8
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	6812      	ldr	r2, [r2, #0]
 8005b52:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 8005b54:	68b8      	ldr	r0, [r7, #8]
 8005b56:	f7ff ffcc 	bl	8005af2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>
 8005b5a:	4604      	mov	r4, r0
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f7ff ffd6 	bl	8005b0e <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8005b62:	4603      	mov	r3, r0
 8005b64:	429c      	cmp	r4, r3
 8005b66:	d005      	beq.n	8005b74 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_+0x48>
 8005b68:	4b05      	ldr	r3, [pc, #20]	; (8005b80 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_+0x54>)
 8005b6a:	4a06      	ldr	r2, [pc, #24]	; (8005b84 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_+0x58>)
 8005b6c:	2160      	movs	r1, #96	; 0x60
 8005b6e:	4806      	ldr	r0, [pc, #24]	; (8005b88 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_+0x5c>)
 8005b70:	f018 f998 	bl	801dea4 <__assert_func>
 8005b74:	bf00      	nop
    }
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3714      	adds	r7, #20
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd90      	pop	{r4, r7, pc}
 8005b80:	0801ffcc 	.word	0x0801ffcc
 8005b84:	080205c0 	.word	0x080205c0
 8005b88:	0802031c 	.word	0x0802031c

08005b8c <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEE7derivedEv>:
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4618      	mov	r0, r3
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr

08005ba2 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>:
  EIGEN_EMPTY_STRUCT_CTOR(scalar_sum_op)
 8005ba2:	b480      	push	{r7}
 8005ba4:	b083      	sub	sp, #12
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4618      	mov	r0, r3
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>:
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f001 f8b2 	bl	8006d2a <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3708      	adds	r7, #8
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_NS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f7ff ffed 	bl	8005bb8 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4618      	mov	r0, r3
 8005be2:	3708      	adds	r7, #8
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f001 f8a4 	bl	8006d40 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4rowsEv>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3708      	adds	r7, #8
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b082      	sub	sp, #8
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	3308      	adds	r3, #8
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f001 f8a4 	bl	8006d5c <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005c14:	4603      	mov	r3, r0
 8005c16:	4618      	mov	r0, r3
 8005c18:	3708      	adds	r7, #8
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
	...

08005c20 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8005c20:	b590      	push	{r4, r7, lr}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
 8005c2c:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f7ff ffce 	bl	8005bd0 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_NS_5DenseEEC1Ev>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	ca07      	ldmia	r2, {r0, r1, r2}
 8005c3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	60da      	str	r2, [r3, #12]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	3310      	adds	r3, #16
 8005c48:	6839      	ldr	r1, [r7, #0]
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f000 f828 	bl	8005ca0 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8005c50:	68b8      	ldr	r0, [r7, #8]
 8005c52:	f7ff ffc9 	bl	8005be8 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 8005c56:	4604      	mov	r4, r0
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7ff fa09 	bl	8005072 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8005c60:	4603      	mov	r3, r0
 8005c62:	429c      	cmp	r4, r3
 8005c64:	d10a      	bne.n	8005c7c <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x5c>
 8005c66:	68b8      	ldr	r0, [r7, #8]
 8005c68:	f7ff ffcb 	bl	8005c02 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4colsEv>
 8005c6c:	4604      	mov	r4, r0
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4618      	mov	r0, r3
 8005c72:	f7ff f9f3 	bl	800505c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005c76:	4603      	mov	r3, r0
 8005c78:	429c      	cmp	r4, r3
 8005c7a:	d005      	beq.n	8005c88 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x68>
 8005c7c:	4b05      	ldr	r3, [pc, #20]	; (8005c94 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x74>)
 8005c7e:	4a06      	ldr	r2, [pc, #24]	; (8005c98 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x78>)
 8005c80:	2174      	movs	r1, #116	; 0x74
 8005c82:	4806      	ldr	r0, [pc, #24]	; (8005c9c <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x7c>)
 8005c84:	f018 f90e 	bl	801dea4 <__assert_func>
    }
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3714      	adds	r7, #20
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd90      	pop	{r4, r7, pc}
 8005c92:	bf00      	nop
 8005c94:	0801fd0c 	.word	0x0801fd0c
 8005c98:	0802076c 	.word	0x0802076c
 8005c9c:	0801ff70 	.word	0x0801ff70

08005ca0 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>:
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4618      	mov	r0, r3
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_IS2_S2_Li0EEENS_9TransposeIS2_EELi0EEEKS2_EEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8005cb8:	b590      	push	{r4, r7, lr}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f7ff fea8 	bl	8005a18 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8005cc8:	4604      	mov	r4, r0
 8005cca:	6838      	ldr	r0, [r7, #0]
 8005ccc:	f001 f854 	bl	8006d78 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEE7derivedEv>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	f001 f85a 	bl	8006d8e <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRT_RKT0_>
      return this->derived();
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f7ff fe9c 	bl	8005a18 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8005ce0:	4603      	mov	r3, r0
    }
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	370c      	adds	r7, #12
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd90      	pop	{r4, r7, pc}

08005cea <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>:
  Derived& derived() { return *static_cast<Derived*>(this); }
 8005cea:	b480      	push	{r7}
 8005cec:	b083      	sub	sp, #12
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f001 f855 	bl	8006db8 <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4618      	mov	r0, r3
 8005d12:	3708      	adds	r7, #8
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <_ZN5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f7ff ffed 	bl	8005d00 <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3708      	adds	r7, #8
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <_ZN5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f7ff ffec 	bl	8005d18 <_ZN5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEEC1Ev>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	683a      	ldr	r2, [r7, #0]
 8005d44:	601a      	str	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3708      	adds	r7, #8
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	370c      	adds	r7, #12
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEC1Ev>:
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b082      	sub	sp, #8
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f001 f82d 	bl	8006dce <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEC1Ev>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4618      	mov	r0, r3
 8005d78:	3708      	adds	r7, #8
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0ELi3EEC1Ev>:
class dense_product_base
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b082      	sub	sp, #8
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f7ff ffed 	bl	8005d66 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEC1Ev>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3708      	adds	r7, #8
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}

08005d96 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005d96:	b580      	push	{r7, lr}
 8005d98:	b082      	sub	sp, #8
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f7ff ffed 	bl	8005d7e <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0ELi3EEC1Ev>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4618      	mov	r0, r3
 8005da8:	3708      	adds	r7, #8
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b082      	sub	sp, #8
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7ff fb10 	bl	80053e0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3708      	adds	r7, #8
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
	...

08005dcc <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005dcc:	b590      	push	{r4, r7, lr}
 8005dce:	b085      	sub	sp, #20
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	607a      	str	r2, [r7, #4]
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f7ff ffdc 	bl	8005d96 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0ENS_5DenseEEC1Ev>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	68ba      	ldr	r2, [r7, #8]
 8005de2:	601a      	str	r2, [r3, #0]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	3304      	adds	r3, #4
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	6812      	ldr	r2, [r2, #0]
 8005dec:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	4618      	mov	r0, r3
 8005df2:	f7ff f933 	bl	800505c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005df6:	4604      	mov	r4, r0
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f7ff ffd8 	bl	8005dae <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	429c      	cmp	r4, r3
 8005e02:	d005      	beq.n	8005e10 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_+0x44>
 8005e04:	4b05      	ldr	r3, [pc, #20]	; (8005e1c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_+0x50>)
 8005e06:	4a06      	ldr	r2, [pc, #24]	; (8005e20 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_+0x54>)
 8005e08:	2160      	movs	r1, #96	; 0x60
 8005e0a:	4806      	ldr	r0, [pc, #24]	; (8005e24 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_+0x58>)
 8005e0c:	f018 f84a 	bl	801dea4 <__assert_func>
 8005e10:	bf00      	nop
    }
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	4618      	mov	r0, r3
 8005e16:	3714      	adds	r7, #20
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd90      	pop	{r4, r7, pc}
 8005e1c:	0801ffcc 	.word	0x0801ffcc
 8005e20:	080209e0 	.word	0x080209e0
 8005e24:	0802031c 	.word	0x0802031c

08005e28 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>:
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4618      	mov	r0, r3
 8005e34:	370c      	adds	r7, #12
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1Ev>:
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b082      	sub	sp, #8
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 ffcc 	bl	8006de4 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1Ev>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3708      	adds	r7, #8
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0ELi3EEC1Ev>:
class dense_product_base
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b082      	sub	sp, #8
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f7ff ffed 	bl	8005e3e <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1Ev>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4618      	mov	r0, r3
 8005e68:	3708      	adds	r7, #8
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b082      	sub	sp, #8
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f7ff ffed 	bl	8005e56 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0ELi3EEC1Ev>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3708      	adds	r7, #8
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
	...

08005e88 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005e88:	b590      	push	{r4, r7, lr}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f7ff ffea 	bl	8005e6e <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0ENS_5DenseEEC1Ev>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	601a      	str	r2, [r3, #0]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f7ff fa99 	bl	80053e0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8005eae:	4604      	mov	r4, r0
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7ff f8dd 	bl	8005072 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	429c      	cmp	r4, r3
 8005ebc:	d005      	beq.n	8005eca <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_+0x42>
 8005ebe:	4b06      	ldr	r3, [pc, #24]	; (8005ed8 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_+0x50>)
 8005ec0:	4a06      	ldr	r2, [pc, #24]	; (8005edc <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_+0x54>)
 8005ec2:	2160      	movs	r1, #96	; 0x60
 8005ec4:	4806      	ldr	r0, [pc, #24]	; (8005ee0 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_+0x58>)
 8005ec6:	f017 ffed 	bl	801dea4 <__assert_func>
 8005eca:	bf00      	nop
    }
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3714      	adds	r7, #20
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd90      	pop	{r4, r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	0801ffcc 	.word	0x0801ffcc
 8005edc:	08020b2c 	.word	0x08020b2c
 8005ee0:	0802031c 	.word	0x0802031c

08005ee4 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE7derivedEv>:
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	370c      	adds	r7, #12
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr

08005efa <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEC1Ev>:
 8005efa:	b580      	push	{r7, lr}
 8005efc:	b082      	sub	sp, #8
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 ff79 	bl	8006dfa <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEC1Ev>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3708      	adds	r7, #8
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0ELi6EEC1Ev>:
class dense_product_base<Lhs, Rhs, Option, InnerProduct>
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b082      	sub	sp, #8
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f7ff ffed 	bl	8005efa <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEC1Ev>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4618      	mov	r0, r3
 8005f24:	3708      	adds	r7, #8
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b082      	sub	sp, #8
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f7ff ffed 	bl	8005f12 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0ELi6EEC1Ev>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3708      	adds	r7, #8
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b082      	sub	sp, #8
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7ff f884 	bl	800505c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005f54:	4603      	mov	r3, r0
 8005f56:	4618      	mov	r0, r3
 8005f58:	3708      	adds	r7, #8
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
	...

08005f60 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005f60:	b590      	push	{r4, r7, lr}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	607a      	str	r2, [r7, #4]
 8005f6c:	68f8      	ldr	r0, [r7, #12]
 8005f6e:	f7ff ffdc 	bl	8005f2a <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0ENS_5DenseEEC1Ev>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	68ba      	ldr	r2, [r7, #8]
 8005f76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005f7a:	e883 0003 	stmia.w	r3, {r0, r1}
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	3308      	adds	r3, #8
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	6812      	ldr	r2, [r2, #0]
 8005f86:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 8005f88:	68b8      	ldr	r0, [r7, #8]
 8005f8a:	f7ff ffda 	bl	8005f42 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4colsEv>
 8005f8e:	4604      	mov	r4, r0
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f7ff ff0c 	bl	8005dae <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8005f96:	4603      	mov	r3, r0
 8005f98:	429c      	cmp	r4, r3
 8005f9a:	d005      	beq.n	8005fa8 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_+0x48>
 8005f9c:	4b05      	ldr	r3, [pc, #20]	; (8005fb4 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_+0x54>)
 8005f9e:	4a06      	ldr	r2, [pc, #24]	; (8005fb8 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_+0x58>)
 8005fa0:	2160      	movs	r1, #96	; 0x60
 8005fa2:	4806      	ldr	r0, [pc, #24]	; (8005fbc <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_+0x5c>)
 8005fa4:	f017 ff7e 	bl	801dea4 <__assert_func>
 8005fa8:	bf00      	nop
    }
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	4618      	mov	r0, r3
 8005fae:	3714      	adds	r7, #20
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd90      	pop	{r4, r7, pc}
 8005fb4:	0801ffcc 	.word	0x0801ffcc
 8005fb8:	08020c54 	.word	0x08020c54
 8005fbc:	0802031c 	.word	0x0802031c

08005fc0 <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEE7derivedEv>:
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4618      	mov	r0, r3
 8005fcc:	370c      	adds	r7, #12
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>:
 8005fd6:	b480      	push	{r7}
 8005fd8:	b083      	sub	sp, #12
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>:
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 ff0b 	bl	8006e10 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3708      	adds	r7, #8
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f7ff ffed 	bl	8005fec <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4618      	mov	r0, r3
 8006016:	3708      	adds	r7, #8
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4618      	mov	r0, r3
 8006028:	f000 fefd 	bl	8006e26 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4rowsEv>
 800602c:	4603      	mov	r3, r0
 800602e:	4618      	mov	r0, r3
 8006030:	3708      	adds	r7, #8
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8006036:	b580      	push	{r7, lr}
 8006038:	b082      	sub	sp, #8
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	3308      	adds	r3, #8
 8006042:	4618      	mov	r0, r3
 8006044:	f000 fefd 	bl	8006e42 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8006048:	4603      	mov	r3, r0
 800604a:	4618      	mov	r0, r3
 800604c:	3708      	adds	r7, #8
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}

08006052 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 8006052:	b580      	push	{r7, lr}
 8006054:	b082      	sub	sp, #8
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
 800605a:	f000 ff00 	bl	8006e5e <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4rowsEv>
 800605e:	4603      	mov	r3, r0
 8006060:	4618      	mov	r0, r3
 8006062:	3708      	adds	r7, #8
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	f000 fefd 	bl	8006e6e <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4colsEv>
 8006074:	4603      	mov	r3, r0
 8006076:	4618      	mov	r0, r3
 8006078:	3708      	adds	r7, #8
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
	...

08006080 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8006080:	b590      	push	{r4, r7, lr}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
 800608c:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f7ff ffb8 	bl	8006004 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEENS_5DenseEEC1Ev>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	68ba      	ldr	r2, [r7, #8]
 8006098:	ca07      	ldmia	r2, {r0, r1, r2}
 800609a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	60da      	str	r2, [r3, #12]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	3310      	adds	r3, #16
 80060a8:	6839      	ldr	r1, [r7, #0]
 80060aa:	4618      	mov	r0, r3
 80060ac:	f7ff fdf8 	bl	8005ca0 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 80060b0:	68b8      	ldr	r0, [r7, #8]
 80060b2:	f7ff ffb3 	bl	800601c <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 80060b6:	4604      	mov	r4, r0
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7ff ffc9 	bl	8006052 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 80060c0:	4603      	mov	r3, r0
 80060c2:	429c      	cmp	r4, r3
 80060c4:	d10a      	bne.n	80060dc <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x5c>
 80060c6:	68b8      	ldr	r0, [r7, #8]
 80060c8:	f7ff ffb5 	bl	8006036 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4colsEv>
 80060cc:	4604      	mov	r4, r0
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7ff ffc9 	bl	8006068 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 80060d6:	4603      	mov	r3, r0
 80060d8:	429c      	cmp	r4, r3
 80060da:	d005      	beq.n	80060e8 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x68>
 80060dc:	4b05      	ldr	r3, [pc, #20]	; (80060f4 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x74>)
 80060de:	4a06      	ldr	r2, [pc, #24]	; (80060f8 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x78>)
 80060e0:	2174      	movs	r1, #116	; 0x74
 80060e2:	4806      	ldr	r0, [pc, #24]	; (80060fc <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x7c>)
 80060e4:	f017 fede 	bl	801dea4 <__assert_func>
    }
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	4618      	mov	r0, r3
 80060ec:	3714      	adds	r7, #20
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd90      	pop	{r4, r7, pc}
 80060f2:	bf00      	nop
 80060f4:	0801fd0c 	.word	0x0801fd0c
 80060f8:	08020e00 	.word	0x08020e00
 80060fc:	0801ff70 	.word	0x0801ff70

08006100 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>:
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4618      	mov	r0, r3
 800610c:	370c      	adds	r7, #12
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr

08006116 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8006116:	b580      	push	{r7, lr}
 8006118:	b082      	sub	sp, #8
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4618      	mov	r0, r3
 8006122:	f7ff ff7b 	bl	800601c <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 8006126:	4603      	mov	r3, r0
    }
 8006128:	4618      	mov	r0, r3
 800612a:	3708      	adds	r7, #8
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4618      	mov	r0, r3
 800613c:	f7ff ff7b 	bl	8006036 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4colsEv>
 8006140:	4603      	mov	r3, r0
    }
 8006142:	4618      	mov	r0, r3
 8006144:	3708      	adds	r7, #8
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <_ZN5Eigen10MatrixBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEC1Ev>:
 800614a:	b580      	push	{r7, lr}
 800614c:	b082      	sub	sp, #8
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 fe93 	bl	8006e7e <_ZN5Eigen9DenseBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEC1Ev>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4618      	mov	r0, r3
 800615c:	3708      	adds	r7, #8
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}

08006162 <_ZN5Eigen11InverseImplINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS_5DenseEEC1Ev>:
  XprTypeNested m_xpr;
};

// Generic API dispatcher
template<typename XprType, typename StorageKind>
class InverseImpl
 8006162:	b580      	push	{r7, lr}
 8006164:	b082      	sub	sp, #8
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f7ff ffed 	bl	800614a <_ZN5Eigen10MatrixBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEC1Ev>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4618      	mov	r0, r3
 8006174:	3708      	adds	r7, #8
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSG_>:
  explicit EIGEN_DEVICE_FUNC Inverse(const XprType &xpr)
 800617a:	b580      	push	{r7, lr}
 800617c:	b082      	sub	sp, #8
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
 8006182:	6039      	str	r1, [r7, #0]
    : m_xpr(xpr)
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f7ff ffec 	bl	8006162 <_ZN5Eigen11InverseImplINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS_5DenseEEC1Ev>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6839      	ldr	r1, [r7, #0]
 800618e:	4618      	mov	r0, r3
 8006190:	f7fe fc9b 	bl	8004aca <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKSF_>
  {}
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4618      	mov	r0, r3
 8006198:	3708      	adds	r7, #8
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE7derivedEv>:
 800619e:	b480      	push	{r7}
 80061a0:	b083      	sub	sp, #12
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4618      	mov	r0, r3
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <_ZNK5Eigen9EigenBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEE7derivedEv>:
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4618      	mov	r0, r3
 80061c0:	370c      	adds	r7, #12
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr

080061ca <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEC1Ev>:
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b082      	sub	sp, #8
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 fe5e 	bl	8006e94 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEC1Ev>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4618      	mov	r0, r3
 80061dc:	3708      	adds	r7, #8
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0ELi4EEC1Ev>:
class dense_product_base
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b082      	sub	sp, #8
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f7ff ffed 	bl	80061ca <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEC1Ev>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4618      	mov	r0, r3
 80061f4:	3708      	adds	r7, #8
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b082      	sub	sp, #8
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f7ff ffed 	bl	80061e2 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0ELi4EEC1Ev>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4618      	mov	r0, r3
 800620c:	3708      	adds	r7, #8
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}

08006212 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8006212:	b580      	push	{r7, lr}
 8006214:	b082      	sub	sp, #8
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	3304      	adds	r3, #4
 800621e:	4618      	mov	r0, r3
 8006220:	f000 fe0f 	bl	8006e42 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8006224:	4603      	mov	r3, r0
 8006226:	4618      	mov	r0, r3
 8006228:	3708      	adds	r7, #8
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>:
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR  Index rows() const EIGEN_NOEXCEPT { return m_xpr.cols(); }
 800622e:	b580      	push	{r7, lr}
 8006230:	b082      	sub	sp, #8
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4618      	mov	r0, r3
 800623a:	f7ff ff79 	bl	8006130 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800623e:	4603      	mov	r3, r0
 8006240:	4618      	mov	r0, r3
 8006242:	3708      	adds	r7, #8
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8006248:	b590      	push	{r4, r7, lr}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f7ff ffd0 	bl	80061fa <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0ENS_5DenseEEC1Ev>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006262:	e883 0003 	stmia.w	r3, {r0, r1}
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	3308      	adds	r3, #8
 800626a:	6879      	ldr	r1, [r7, #4]
 800626c:	4618      	mov	r0, r3
 800626e:	f7fe fc71 	bl	8004b54 <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSH_>
      eigen_assert(lhs.cols() == rhs.rows()
 8006272:	68b8      	ldr	r0, [r7, #8]
 8006274:	f7ff ffcd 	bl	8006212 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>
 8006278:	4604      	mov	r4, r0
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f7ff ffd7 	bl	800622e <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>
 8006280:	4603      	mov	r3, r0
 8006282:	429c      	cmp	r4, r3
 8006284:	d005      	beq.n	8006292 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_+0x4a>
 8006286:	4b06      	ldr	r3, [pc, #24]	; (80062a0 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_+0x58>)
 8006288:	4a06      	ldr	r2, [pc, #24]	; (80062a4 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_+0x5c>)
 800628a:	2160      	movs	r1, #96	; 0x60
 800628c:	4806      	ldr	r0, [pc, #24]	; (80062a8 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_+0x60>)
 800628e:	f017 fe09 	bl	801dea4 <__assert_func>
 8006292:	bf00      	nop
    }
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	4618      	mov	r0, r3
 8006298:	3714      	adds	r7, #20
 800629a:	46bd      	mov	sp, r7
 800629c:	bd90      	pop	{r4, r7, pc}
 800629e:	bf00      	nop
 80062a0:	0801ffcc 	.word	0x0801ffcc
 80062a4:	08021074 	.word	0x08021074
 80062a8:	0802031c 	.word	0x0802031c

080062ac <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 80062ac:	b590      	push	{r4, r7, lr}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f7ff fa12 	bl	80056e0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80062bc:	4604      	mov	r4, r0
 80062be:	6838      	ldr	r0, [r7, #0]
 80062c0:	f000 fdf3 	bl	8006eaa <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEE7derivedEv>
 80062c4:	4603      	mov	r3, r0
 80062c6:	4619      	mov	r1, r3
 80062c8:	4620      	mov	r0, r4
 80062ca:	f000 fdf9 	bl	8006ec0 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEEvRT_RKT0_>
      return this->derived();
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f7ff fa06 	bl	80056e0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80062d4:	4603      	mov	r3, r0
    }
 80062d6:	4618      	mov	r0, r3
 80062d8:	370c      	adds	r7, #12
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd90      	pop	{r4, r7, pc}

080062de <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>:
 80062de:	b580      	push	{r7, lr}
 80062e0:	b082      	sub	sp, #8
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 fdff 	bl	8006eea <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4618      	mov	r0, r3
 80062f0:	3708      	adds	r7, #8
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0ELi6EEC1Ev>:
class dense_product_base<Lhs, Rhs, Option, InnerProduct>
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b082      	sub	sp, #8
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f7ff ffed 	bl	80062de <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4618      	mov	r0, r3
 8006308:	3708      	adds	r7, #8
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800630e:	b580      	push	{r7, lr}
 8006310:	b082      	sub	sp, #8
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f7ff ffed 	bl	80062f6 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0ELi6EEC1Ev>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4618      	mov	r0, r3
 8006320:	3708      	adds	r7, #8
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
	...

08006328 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8006328:	b590      	push	{r4, r7, lr}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	f7ff ffea 	bl	800630e <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0ENS_5DenseEEC1Ev>
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	68ba      	ldr	r2, [r7, #8]
 800633e:	601a      	str	r2, [r3, #0]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	4618      	mov	r0, r3
 800634a:	f7ff f849 	bl	80053e0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 800634e:	4604      	mov	r4, r0
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4618      	mov	r0, r3
 8006354:	f7fe ff33 	bl	80051be <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8006358:	4603      	mov	r3, r0
 800635a:	429c      	cmp	r4, r3
 800635c:	d005      	beq.n	800636a <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x42>
 800635e:	4b06      	ldr	r3, [pc, #24]	; (8006378 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x50>)
 8006360:	4a06      	ldr	r2, [pc, #24]	; (800637c <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x54>)
 8006362:	2160      	movs	r1, #96	; 0x60
 8006364:	4806      	ldr	r0, [pc, #24]	; (8006380 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x58>)
 8006366:	f017 fd9d 	bl	801dea4 <__assert_func>
 800636a:	bf00      	nop
    }
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	4618      	mov	r0, r3
 8006370:	3714      	adds	r7, #20
 8006372:	46bd      	mov	sp, r7
 8006374:	bd90      	pop	{r4, r7, pc}
 8006376:	bf00      	nop
 8006378:	0801ffcc 	.word	0x0801ffcc
 800637c:	080213fc 	.word	0x080213fc
 8006380:	0802031c 	.word	0x0802031c

08006384 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>:
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4618      	mov	r0, r3
 8006390:	370c      	adds	r7, #12
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr

0800639a <_ZN5Eigen8internal20scalar_difference_opIffEC1Ev>:
template<typename LhsScalar,typename RhsScalar>
struct scalar_difference_op : binary_op_base<LhsScalar,RhsScalar>
{
  typedef typename ScalarBinaryOpTraits<LhsScalar,RhsScalar,scalar_difference_op>::ReturnType result_type;
#ifndef EIGEN_SCALAR_BINARY_OP_PLUGIN
  EIGEN_EMPTY_STRUCT_CTOR(scalar_difference_op)
 800639a:	b480      	push	{r7}
 800639c:	b083      	sub	sp, #12
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4618      	mov	r0, r3
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEC1Ev>:
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 fda1 	bl	8006f00 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEC1Ev>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4618      	mov	r0, r3
 80063c2:	3708      	adds	r7, #8
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f7ff ffed 	bl	80063b0 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEC1Ev>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4618      	mov	r0, r3
 80063da:	3708      	adds	r7, #8
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4618      	mov	r0, r3
 80063ee:	f7ff f802 	bl	80053f6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 80063f2:	4603      	mov	r3, r0
 80063f4:	4618      	mov	r0, r3
 80063f6:	3708      	adds	r7, #8
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	4618      	mov	r0, r3
 800640a:	f7fe fecd 	bl	80051a8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800640e:	4603      	mov	r3, r0
 8006410:	4618      	mov	r0, r3
 8006412:	3708      	adds	r7, #8
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8006418:	b590      	push	{r4, r7, lr}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	607a      	str	r2, [r7, #4]
 8006424:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f7ff ffce 	bl	80063c8 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS_5DenseEEC1Ev>
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	68ba      	ldr	r2, [r7, #8]
 8006430:	601a      	str	r2, [r3, #0]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	3304      	adds	r3, #4
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	e892 0003 	ldmia.w	r2, {r0, r1}
 800643c:	e883 0003 	stmia.w	r3, {r0, r1}
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	330c      	adds	r3, #12
 8006444:	6839      	ldr	r1, [r7, #0]
 8006446:	4618      	mov	r0, r3
 8006448:	f000 f828 	bl	800649c <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	4618      	mov	r0, r3
 8006450:	f7ff fdff 	bl	8006052 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8006454:	4604      	mov	r4, r0
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f7ff ffc2 	bl	80063e0 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>
 800645c:	4603      	mov	r3, r0
 800645e:	429c      	cmp	r4, r3
 8006460:	d10a      	bne.n	8006478 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x60>
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	4618      	mov	r0, r3
 8006466:	f7ff fdff 	bl	8006068 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800646a:	4604      	mov	r4, r0
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f7ff ffc5 	bl	80063fc <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>
 8006472:	4603      	mov	r3, r0
 8006474:	429c      	cmp	r4, r3
 8006476:	d005      	beq.n	8006484 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x6c>
 8006478:	4b05      	ldr	r3, [pc, #20]	; (8006490 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x78>)
 800647a:	4a06      	ldr	r2, [pc, #24]	; (8006494 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x7c>)
 800647c:	2174      	movs	r1, #116	; 0x74
 800647e:	4806      	ldr	r0, [pc, #24]	; (8006498 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x80>)
 8006480:	f017 fd10 	bl	801dea4 <__assert_func>
    }
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	4618      	mov	r0, r3
 8006488:	3714      	adds	r7, #20
 800648a:	46bd      	mov	sp, r7
 800648c:	bd90      	pop	{r4, r7, pc}
 800648e:	bf00      	nop
 8006490:	0801fd0c 	.word	0x0801fd0c
 8006494:	08021524 	.word	0x08021524
 8006498:	0801ff70 	.word	0x0801ff70

0800649c <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>:
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4618      	mov	r0, r3
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEE7derivedEv>:
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4618      	mov	r0, r3
 80064c0:	370c      	adds	r7, #12
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr

080064ca <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEC1Ev>:
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b082      	sub	sp, #8
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 fd1f 	bl	8006f16 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEC1Ev>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4618      	mov	r0, r3
 80064dc:	3708      	adds	r7, #8
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}

080064e2 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0ELi4EEC1Ev>:
class dense_product_base
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b082      	sub	sp, #8
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f7ff ffed 	bl	80064ca <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEC1Ev>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4618      	mov	r0, r3
 80064f4:	3708      	adds	r7, #8
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b082      	sub	sp, #8
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f7ff ffed 	bl	80064e2 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0ELi4EEC1Ev>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4618      	mov	r0, r3
 800650c:	3708      	adds	r7, #8
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}

08006512 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8006512:	b580      	push	{r7, lr}
 8006514:	b082      	sub	sp, #8
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4618      	mov	r0, r3
 8006520:	f7ff fd97 	bl	8006052 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8006524:	4603      	mov	r3, r0
    }
 8006526:	4618      	mov	r0, r3
 8006528:	3708      	adds	r7, #8
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
	...

08006530 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8006530:	b590      	push	{r4, r7, lr}
 8006532:	b085      	sub	sp, #20
 8006534:	af00      	add	r7, sp, #0
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	607a      	str	r2, [r7, #4]
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f7ff ffdc 	bl	80064fa <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0ENS_5DenseEEC1Ev>
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	601a      	str	r2, [r3, #0]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	3304      	adds	r3, #4
 800654c:	6879      	ldr	r1, [r7, #4]
 800654e:	4618      	mov	r0, r3
 8006550:	f7fe fb6b 	bl	8004c2a <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERKSC_>
      eigen_assert(lhs.cols() == rhs.rows()
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	4618      	mov	r0, r3
 8006558:	f7fe fe26 	bl	80051a8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800655c:	4604      	mov	r4, r0
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f7ff ffd7 	bl	8006512 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4rowsEv>
 8006564:	4603      	mov	r3, r0
 8006566:	429c      	cmp	r4, r3
 8006568:	d005      	beq.n	8006576 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_+0x46>
 800656a:	4b06      	ldr	r3, [pc, #24]	; (8006584 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_+0x54>)
 800656c:	4a06      	ldr	r2, [pc, #24]	; (8006588 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_+0x58>)
 800656e:	2160      	movs	r1, #96	; 0x60
 8006570:	4806      	ldr	r0, [pc, #24]	; (800658c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_+0x5c>)
 8006572:	f017 fc97 	bl	801dea4 <__assert_func>
 8006576:	bf00      	nop
    }
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	4618      	mov	r0, r3
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	bd90      	pop	{r4, r7, pc}
 8006582:	bf00      	nop
 8006584:	0801ffcc 	.word	0x0801ffcc
 8006588:	0802171c 	.word	0x0802171c
 800658c:	0802031c 	.word	0x0802031c

08006590 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEE7derivedEv>:
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4618      	mov	r0, r3
 800659c:	370c      	adds	r7, #12
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr

080065a6 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEEC1Ev>:
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b082      	sub	sp, #8
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 fcbc 	bl	8006f2c <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEEC1Ev>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4618      	mov	r0, r3
 80065b8:	3708      	adds	r7, #8
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}

080065be <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS_13CwiseBinaryOpINS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 80065be:	b580      	push	{r7, lr}
 80065c0:	b082      	sub	sp, #8
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f7ff ffed 	bl	80065a6 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEEC1Ev>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4618      	mov	r0, r3
 80065d0:	3708      	adds	r7, #8
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b082      	sub	sp, #8
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4618      	mov	r0, r3
 80065e4:	f7fe fdeb 	bl	80051be <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80065e8:	4603      	mov	r3, r0
 80065ea:	4618      	mov	r0, r3
 80065ec:	3708      	adds	r7, #8
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b082      	sub	sp, #8
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	3304      	adds	r3, #4
 80065fe:	4618      	mov	r0, r3
 8006600:	f000 fc9f 	bl	8006f42 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4colsEv>
 8006604:	4603      	mov	r3, r0
 8006606:	4618      	mov	r0, r3
 8006608:	3708      	adds	r7, #8
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
	...

08006610 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8006610:	b590      	push	{r4, r7, lr}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	607a      	str	r2, [r7, #4]
 800661c:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800661e:	68f8      	ldr	r0, [r7, #12]
 8006620:	f7ff ffcd 	bl	80065be <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS_13CwiseBinaryOpINS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEENS_5DenseEEC1Ev>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	68ba      	ldr	r2, [r7, #8]
 8006628:	601a      	str	r2, [r3, #0]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	3304      	adds	r3, #4
 800662e:	6879      	ldr	r1, [r7, #4]
 8006630:	4618      	mov	r0, r3
 8006632:	f7fe fb30 	bl	8004c96 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKSD_>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	3318      	adds	r3, #24
 800663a:	6839      	ldr	r1, [r7, #0]
 800663c:	4618      	mov	r0, r3
 800663e:	f7ff fb2f 	bl	8005ca0 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	4618      	mov	r0, r3
 8006646:	f7fe fdba 	bl	80051be <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800664a:	4604      	mov	r4, r0
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f7ff ffc2 	bl	80065d6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4rowsEv>
 8006652:	4603      	mov	r3, r0
 8006654:	429c      	cmp	r4, r3
 8006656:	d10a      	bne.n	800666e <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x5e>
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	4618      	mov	r0, r3
 800665c:	f7fe fda4 	bl	80051a8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8006660:	4604      	mov	r4, r0
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f7ff ffc5 	bl	80065f2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4colsEv>
 8006668:	4603      	mov	r3, r0
 800666a:	429c      	cmp	r4, r3
 800666c:	d005      	beq.n	800667a <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x6a>
 800666e:	4b05      	ldr	r3, [pc, #20]	; (8006684 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x74>)
 8006670:	4a05      	ldr	r2, [pc, #20]	; (8006688 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x78>)
 8006672:	2174      	movs	r1, #116	; 0x74
 8006674:	4805      	ldr	r0, [pc, #20]	; (800668c <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x7c>)
 8006676:	f017 fc15 	bl	801dea4 <__assert_func>
    }
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	4618      	mov	r0, r3
 800667e:	3714      	adds	r7, #20
 8006680:	46bd      	mov	sp, r7
 8006682:	bd90      	pop	{r4, r7, pc}
 8006684:	0801fd0c 	.word	0x0801fd0c
 8006688:	08021988 	.word	0x08021988
 800668c:	0801ff70 	.word	0x0801ff70

08006690 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8006690:	b590      	push	{r4, r7, lr}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f7ff f820 	bl	80056e0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80066a0:	4604      	mov	r4, r0
 80066a2:	6838      	ldr	r0, [r7, #0]
 80066a4:	f000 fc5b 	bl	8006f5e <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEE7derivedEv>
 80066a8:	4603      	mov	r3, r0
 80066aa:	4619      	mov	r1, r3
 80066ac:	4620      	mov	r0, r4
 80066ae:	f000 fc61 	bl	8006f74 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEEEEvRT_RKT0_>
      return this->derived();
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f7ff f814 	bl	80056e0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80066b8:	4603      	mov	r3, r0
    }
 80066ba:	4618      	mov	r0, r3
 80066bc:	370c      	adds	r7, #12
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd90      	pop	{r4, r7, pc}

080066c2 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1Ev>:
 80066c2:	b580      	push	{r7, lr}
 80066c4:	b082      	sub	sp, #8
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 fc67 	bl	8006f9e <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1Ev>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4618      	mov	r0, r3
 80066d4:	3708      	adds	r7, #8
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0ELi4EEC1Ev>:
class dense_product_base
 80066da:	b580      	push	{r7, lr}
 80066dc:	b082      	sub	sp, #8
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f7ff ffed 	bl	80066c2 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1Ev>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4618      	mov	r0, r3
 80066ec:	3708      	adds	r7, #8
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b082      	sub	sp, #8
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f7ff ffed 	bl	80066da <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0ELi4EEC1Ev>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4618      	mov	r0, r3
 8006704:	3708      	adds	r7, #8
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
	...

0800670c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 800670c:	b590      	push	{r4, r7, lr}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	607a      	str	r2, [r7, #4]
 8006718:	68f8      	ldr	r0, [r7, #12]
 800671a:	f7ff ffea 	bl	80066f2 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0ENS_5DenseEEC1Ev>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	68ba      	ldr	r2, [r7, #8]
 8006722:	601a      	str	r2, [r3, #0]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	4618      	mov	r0, r3
 800672e:	f7fe fd3b 	bl	80051a8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8006732:	4604      	mov	r4, r0
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4618      	mov	r0, r3
 8006738:	f7fe fe5d 	bl	80053f6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 800673c:	4603      	mov	r3, r0
 800673e:	429c      	cmp	r4, r3
 8006740:	d005      	beq.n	800674e <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_+0x42>
 8006742:	4b06      	ldr	r3, [pc, #24]	; (800675c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_+0x50>)
 8006744:	4a06      	ldr	r2, [pc, #24]	; (8006760 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_+0x54>)
 8006746:	2160      	movs	r1, #96	; 0x60
 8006748:	4806      	ldr	r0, [pc, #24]	; (8006764 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_+0x58>)
 800674a:	f017 fbab 	bl	801dea4 <__assert_func>
 800674e:	bf00      	nop
    }
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	4618      	mov	r0, r3
 8006754:	3714      	adds	r7, #20
 8006756:	46bd      	mov	sp, r7
 8006758:	bd90      	pop	{r4, r7, pc}
 800675a:	bf00      	nop
 800675c:	0801ffcc 	.word	0x0801ffcc
 8006760:	08021cbc 	.word	0x08021cbc
 8006764:	0802031c 	.word	0x0802031c

08006768 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE7derivedEv>:
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4618      	mov	r0, r3
 8006774:	370c      	adds	r7, #12
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr

0800677e <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEC1Ev>:
 800677e:	b580      	push	{r7, lr}
 8006780:	b082      	sub	sp, #8
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 fc14 	bl	8006fb4 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEC1Ev>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4618      	mov	r0, r3
 8006790:	3708      	adds	r7, #8
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8006796:	b580      	push	{r7, lr}
 8006798:	b082      	sub	sp, #8
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f7ff ffed 	bl	800677e <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEC1Ev>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4618      	mov	r0, r3
 80067a8:	3708      	adds	r7, #8
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}

080067ae <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 80067ae:	b580      	push	{r7, lr}
 80067b0:	b082      	sub	sp, #8
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7fe fcff 	bl	80051be <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80067c0:	4603      	mov	r3, r0
 80067c2:	4618      	mov	r0, r3
 80067c4:	3708      	adds	r7, #8
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80067ca:	b580      	push	{r7, lr}
 80067cc:	b082      	sub	sp, #8
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7fe fe02 	bl	80053e0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80067dc:	4603      	mov	r3, r0
 80067de:	4618      	mov	r0, r3
 80067e0:	3708      	adds	r7, #8
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
	...

080067e8 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 80067e8:	b590      	push	{r4, r7, lr}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	607a      	str	r2, [r7, #4]
 80067f4:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 80067f6:	68f8      	ldr	r0, [r7, #12]
 80067f8:	f7ff ffcd 	bl	8006796 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS_5DenseEEC1Ev>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	68ba      	ldr	r2, [r7, #8]
 8006800:	601a      	str	r2, [r3, #0]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	3304      	adds	r3, #4
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	e892 0003 	ldmia.w	r2, {r0, r1}
 800680c:	e883 0003 	stmia.w	r3, {r0, r1}
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	330c      	adds	r3, #12
 8006814:	6839      	ldr	r1, [r7, #0]
 8006816:	4618      	mov	r0, r3
 8006818:	f7ff fe40 	bl	800649c <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	4618      	mov	r0, r3
 8006820:	f7fe fc27 	bl	8005072 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8006824:	4604      	mov	r4, r0
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f7ff ffc1 	bl	80067ae <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4rowsEv>
 800682c:	4603      	mov	r3, r0
 800682e:	429c      	cmp	r4, r3
 8006830:	d10a      	bne.n	8006848 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x60>
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	4618      	mov	r0, r3
 8006836:	f7fe fc11 	bl	800505c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800683a:	4604      	mov	r4, r0
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f7ff ffc4 	bl	80067ca <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4colsEv>
 8006842:	4603      	mov	r3, r0
 8006844:	429c      	cmp	r4, r3
 8006846:	d005      	beq.n	8006854 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x6c>
 8006848:	4b05      	ldr	r3, [pc, #20]	; (8006860 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x78>)
 800684a:	4a06      	ldr	r2, [pc, #24]	; (8006864 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x7c>)
 800684c:	2174      	movs	r1, #116	; 0x74
 800684e:	4806      	ldr	r0, [pc, #24]	; (8006868 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x80>)
 8006850:	f017 fb28 	bl	801dea4 <__assert_func>
    }
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	4618      	mov	r0, r3
 8006858:	3714      	adds	r7, #20
 800685a:	46bd      	mov	sp, r7
 800685c:	bd90      	pop	{r4, r7, pc}
 800685e:	bf00      	nop
 8006860:	0801fd0c 	.word	0x0801fd0c
 8006864:	08021de4 	.word	0x08021de4
 8006868:	0801ff70 	.word	0x0801ff70

0800686c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE7derivedEv>:
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4618      	mov	r0, r3
 8006878:	370c      	adds	r7, #12
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr

08006882 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEEC1Ev>:
 8006882:	b580      	push	{r7, lr}
 8006884:	b082      	sub	sp, #8
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 fb9d 	bl	8006fca <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEEC1Ev>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4618      	mov	r0, r3
 8006894:	3708      	adds	r7, #8
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0ELi3EEC1Ev>:
class dense_product_base
 800689a:	b580      	push	{r7, lr}
 800689c:	b082      	sub	sp, #8
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f7ff ffed 	bl	8006882 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEEC1Ev>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4618      	mov	r0, r3
 80068ac:	3708      	adds	r7, #8
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b082      	sub	sp, #8
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f7ff ffed 	bl	800689a <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0ELi3EEC1Ev>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4618      	mov	r0, r3
 80068c4:	3708      	adds	r7, #8
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b082      	sub	sp, #8
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7fe fbc0 	bl	800505c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80068dc:	4603      	mov	r3, r0
    }
 80068de:	4618      	mov	r0, r3
 80068e0:	3708      	adds	r7, #8
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
	...

080068e8 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 80068e8:	b590      	push	{r4, r7, lr}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	607a      	str	r2, [r7, #4]
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	f7ff ffdc 	bl	80068b2 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0ENS_5DenseEEC1Ev>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	68b9      	ldr	r1, [r7, #8]
 80068fe:	4618      	mov	r0, r3
 8006900:	f7fe fa41 	bl	8004d86 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERKSC_>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	611a      	str	r2, [r3, #16]
      eigen_assert(lhs.cols() == rhs.rows()
 800690a:	68b8      	ldr	r0, [r7, #8]
 800690c:	f7ff ffdd 	bl	80068ca <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4colsEv>
 8006910:	4604      	mov	r4, r0
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4618      	mov	r0, r3
 8006916:	f7fe fbac 	bl	8005072 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800691a:	4603      	mov	r3, r0
 800691c:	429c      	cmp	r4, r3
 800691e:	d005      	beq.n	800692c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_+0x44>
 8006920:	4b05      	ldr	r3, [pc, #20]	; (8006938 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_+0x50>)
 8006922:	4a06      	ldr	r2, [pc, #24]	; (800693c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_+0x54>)
 8006924:	2160      	movs	r1, #96	; 0x60
 8006926:	4806      	ldr	r0, [pc, #24]	; (8006940 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_+0x58>)
 8006928:	f017 fabc 	bl	801dea4 <__assert_func>
 800692c:	bf00      	nop
    }
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	4618      	mov	r0, r3
 8006932:	3714      	adds	r7, #20
 8006934:	46bd      	mov	sp, r7
 8006936:	bd90      	pop	{r4, r7, pc}
 8006938:	0801ffcc 	.word	0x0801ffcc
 800693c:	08021fdc 	.word	0x08021fdc
 8006940:	0802031c 	.word	0x0802031c

08006944 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8006944:	b590      	push	{r4, r7, lr}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f7ff f862 	bl	8005a18 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8006954:	4604      	mov	r4, r0
 8006956:	6838      	ldr	r0, [r7, #0]
 8006958:	f000 fb42 	bl	8006fe0 <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEE7derivedEv>
 800695c:	4603      	mov	r3, r0
 800695e:	4619      	mov	r1, r3
 8006960:	4620      	mov	r0, r4
 8006962:	f000 fb48 	bl	8006ff6 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEEEEvRT_RKT0_>
      return this->derived();
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f7ff f856 	bl	8005a18 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800696c:	4603      	mov	r3, r0
    }
 800696e:	4618      	mov	r0, r3
 8006970:	370c      	adds	r7, #12
 8006972:	46bd      	mov	sp, r7
 8006974:	bd90      	pop	{r4, r7, pc}

08006976 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>:
    }

  protected:
    EIGEN_DEFAULT_COPY_CONSTRUCTOR(DenseBase)
    /** Default constructor. Do nothing. */
    EIGEN_DEVICE_FUNC DenseBase()
 8006976:	b480      	push	{r7}
 8006978:	b083      	sub	sp, #12
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
#ifdef EIGEN_INTERNAL_DEBUGGING
      EIGEN_STATIC_ASSERT((EIGEN_IMPLIES(MaxRowsAtCompileTime==1 && MaxColsAtCompileTime!=1, int(IsRowMajor))
                        && EIGEN_IMPLIES(MaxColsAtCompileTime==1 && MaxRowsAtCompileTime!=1, int(!IsRowMajor))),
                          INVALID_STORAGE_ORDER_FOR_THIS_VECTOR_EXPRESSION)
#endif
    }
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4618      	mov	r0, r3
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EEC1Ev>:
// purely fixed-size matrix
template<typename T, int Size, int _Rows, int _Cols, int _Options> class DenseStorage
{
    internal::plain_array<T,Size,_Options> m_data;
  public:
    EIGEN_DEVICE_FUNC DenseStorage() {
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4618      	mov	r0, r3
 8006998:	f000 fb42 	bl	8007020 <_ZN5Eigen8internal11plain_arrayIfLi9ELi0ELi0EEC1Ev>
      EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN(Index size = Size)
    }
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4618      	mov	r0, r3
 80069a0:	3708      	adds	r7, #8
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}

080069a6 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80069a6:	b480      	push	{r7}
 80069a8:	b083      	sub	sp, #12
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
    }
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4618      	mov	r0, r3
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EEC1Ev>:
    EIGEN_DEVICE_FUNC DenseStorage() {
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4618      	mov	r0, r3
 80069c8:	f000 fb35 	bl	8007036 <_ZN5Eigen8internal11plain_arrayIfLi1ELi0ELi0EEC1Ev>
    }
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4618      	mov	r0, r3
 80069d0:	3708      	adds	r7, #8
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}

080069d6 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80069d6:	b480      	push	{r7}
 80069d8:	b083      	sub	sp, #12
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
    }
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4618      	mov	r0, r3
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EEC1Ev>:
    EIGEN_DEVICE_FUNC DenseStorage() {
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b082      	sub	sp, #8
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4618      	mov	r0, r3
 80069f8:	f000 fb28 	bl	800704c <_ZN5Eigen8internal11plain_arrayIfLi3ELi0ELi0EEC1Ev>
    }
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4618      	mov	r0, r3
 8006a00:	3708      	adds	r7, #8
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006a06:	b480      	push	{r7}
 8006a08:	b083      	sub	sp, #12
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
    }
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4618      	mov	r0, r3
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EEC1Ev>:
    EIGEN_DEVICE_FUNC DenseStorage() {
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4618      	mov	r0, r3
 8006a28:	f000 fb1b 	bl	8007062 <_ZN5Eigen8internal11plain_arrayIfLi3ELi1ELi0EEC1Ev>
    }
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3708      	adds	r7, #8
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4colsEv>:
    }
    EIGEN_DEVICE_FUNC void swap(DenseStorage& other) {
      numext::swap(m_data, other.m_data);
    }
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 8006a36:	b480      	push	{r7}
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 8006a46:	b480      	push	{r7}
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr

08006a56 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC void conservativeResize(Index,Index,Index) {}
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
 8006a56:	b480      	push	{r7}
 8006a58:	b083      	sub	sp, #12
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4618      	mov	r0, r3
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4colsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 8006a6c:	b480      	push	{r7}
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	2301      	movs	r3, #1
 8006a72:	4618      	mov	r0, r3
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 8006a7c:	b480      	push	{r7}
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	2303      	movs	r3, #3
 8006a82:	4618      	mov	r0, r3
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4618      	mov	r0, r3
 8006a98:	370c      	adds	r7, #12
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr

08006aa2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)
 8006aa2:	b590      	push	{r4, r7, lr}
 8006aa4:	b085      	sub	sp, #20
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	60f8      	str	r0, [r7, #12]
 8006aaa:	60b9      	str	r1, [r7, #8]
 8006aac:	607a      	str	r2, [r7, #4]
        return m_storage.data()[rowId + colId * m_storage.rows()];
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f000 fae1 	bl	8007078 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4dataEv>
 8006ab6:	4604      	mov	r4, r0
 8006ab8:	f000 f9d1 	bl	8006e5e <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4rowsEv>
 8006abc:	4602      	mov	r2, r0
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	fb03 f202 	mul.w	r2, r3, r2
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	4413      	add	r3, r2
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	4423      	add	r3, r4
    }
 8006acc:	4618      	mov	r0, r3
 8006ace:	3714      	adds	r7, #20
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd90      	pop	{r4, r7, pc}

08006ad4 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4colsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 8006ad4:	b480      	push	{r7}
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	2303      	movs	r3, #3
 8006ada:	4618      	mov	r0, r3
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 8006ae4:	b480      	push	{r7}
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	2301      	movs	r3, #1
 8006aea:	4618      	mov	r0, r3
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4dataEv>:
    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4618      	mov	r0, r3
 8006b00:	370c      	adds	r7, #12
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr

08006b0a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>:

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  evaluator() {}

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  explicit evaluator(const XprType& m)
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b082      	sub	sp, #8
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
 8006b12:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	683a      	ldr	r2, [r7, #0]
 8006b18:	4611      	mov	r1, r2
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f000 fab7 	bl	800708e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS5_>
  { }
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4618      	mov	r0, r3
 8006b24:	3708      	adds	r7, #8
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8006b2a:	b480      	push	{r7}
 8006b2c:	b083      	sub	sp, #12
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4618      	mov	r0, r3
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEii>:
  Scalar& coeffRef(Index row, Index col)
 8006b40:	b590      	push	{r4, r7, lr}
 8006b42:	b085      	sub	sp, #20
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	607a      	str	r2, [r7, #4]
      return const_cast<Scalar*>(m_d.data)[row + col * m_d.outerStride()];
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681c      	ldr	r4, [r3, #0]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	4618      	mov	r0, r3
 8006b54:	f000 fab2 	bl	80070bc <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	fb03 f202 	mul.w	r2, r3, r2
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	4413      	add	r3, r2
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	4423      	add	r3, r4
  }
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3714      	adds	r7, #20
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd90      	pop	{r4, r7, pc}

08006b70 <_ZN5Eigen9DenseBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
    }
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	370c      	adds	r7, #12
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr
	...

08006b88 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>:
  */
template<typename T, int Value> class variable_if_dynamic
{
  public:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(variable_if_dynamic)
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_DEBUG(v); eigen_assert(v == T(Value)); }
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	2b03      	cmp	r3, #3
 8006b96:	d005      	beq.n	8006ba4 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei+0x1c>
 8006b98:	4b05      	ldr	r3, [pc, #20]	; (8006bb0 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei+0x28>)
 8006b9a:	4a06      	ldr	r2, [pc, #24]	; (8006bb4 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei+0x2c>)
 8006b9c:	2185      	movs	r1, #133	; 0x85
 8006b9e:	4806      	ldr	r0, [pc, #24]	; (8006bb8 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei+0x30>)
 8006ba0:	f017 f980 	bl	801dea4 <__assert_func>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3708      	adds	r7, #8
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	08022248 	.word	0x08022248
 8006bb4:	08022258 	.word	0x08022258
 8006bb8:	080222c0 	.word	0x080222c0

08006bbc <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>:
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d005      	beq.n	8006bd8 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei+0x1c>
 8006bcc:	4b05      	ldr	r3, [pc, #20]	; (8006be4 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei+0x28>)
 8006bce:	4a06      	ldr	r2, [pc, #24]	; (8006be8 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei+0x2c>)
 8006bd0:	2185      	movs	r1, #133	; 0x85
 8006bd2:	4806      	ldr	r0, [pc, #24]	; (8006bec <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei+0x30>)
 8006bd4:	f017 f966 	bl	801dea4 <__assert_func>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3708      	adds	r7, #8
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	08022248 	.word	0x08022248
 8006be8:	0802231c 	.word	0x0802231c
 8006bec:	080222c0 	.word	0x080222c0

08006bf0 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
    }
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	370c      	adds	r7, #12
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr

08006c06 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>:
    EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
    T value() { return T(Value); }
 8006c06:	b480      	push	{r7}
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr

08006c16 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>:
 8006c16:	b480      	push	{r7}
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr

08006c26 <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006c26:	b480      	push	{r7}
 8006c28:	b083      	sub	sp, #12
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
    }
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4618      	mov	r0, r3
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
    }
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4618      	mov	r0, r3
 8006c48:	370c      	adds	r7, #12
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr

08006c52 <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEE7derivedEv>:
 8006c52:	b480      	push	{r7}
 8006c54:	b083      	sub	sp, #12
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEEvRT_RKT0_>:
// So this intermediate function removes everything related to "assume-aliasing" such that Assignment
// does not has to bother about these annoying details.

template<typename Dst, typename Src>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
void call_assignment(Dst& dst, const Src& src)
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
{
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 8006c72:	f107 030c 	add.w	r3, r7, #12
 8006c76:	4618      	mov	r0, r3
 8006c78:	f000 fa2b 	bl	80070d2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006c7c:	f107 020c 	add.w	r2, r7, #12
 8006c80:	2300      	movs	r3, #0
 8006c82:	6839      	ldr	r1, [r7, #0]
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 fa2f 	bl	80070e8 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISN_NS0_16evaluator_traitsISN_E5ShapeEEE5valueEPvE4typeE>
}
 8006c8a:	bf00      	nop
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006c92:	b480      	push	{r7}
 8006c94:	b083      	sub	sp, #12
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
    }
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	370c      	adds	r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>:
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	370c      	adds	r7, #12
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr

08006cbe <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 8006cbe:	b580      	push	{r7, lr}
 8006cc0:	b084      	sub	sp, #16
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
 8006cc6:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 8006cc8:	f107 030c 	add.w	r3, r7, #12
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f000 fa00 	bl	80070d2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006cd2:	f107 020c 	add.w	r2, r7, #12
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	6839      	ldr	r1, [r7, #0]
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 fa1c 	bl	8007118 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISB_NS0_16evaluator_traitsISB_E5ShapeEEE5valueEPvE4typeE>
}
 8006ce0:	bf00      	nop
 8006ce2:	3710      	adds	r7, #16
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
    }
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	370c      	adds	r7, #12
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr

08006cfe <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006cfe:	b480      	push	{r7}
 8006d00:	b083      	sub	sp, #12
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
    }
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4618      	mov	r0, r3
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
    }
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4618      	mov	r0, r3
 8006d20:	370c      	adds	r7, #12
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr

08006d2a <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006d2a:	b480      	push	{r7}
 8006d2c:	b083      	sub	sp, #12
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
    }
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4618      	mov	r0, r3
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f7fe f990 	bl	8005072 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8006d52:	4603      	mov	r3, r0
 8006d54:	4618      	mov	r0, r3
 8006d56:	3708      	adds	r7, #8
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f7fe f982 	bl	8005072 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	4618      	mov	r0, r3
 8006d72:	3708      	adds	r7, #8
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEE7derivedEv>:
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4618      	mov	r0, r3
 8006d84:	370c      	adds	r7, #12
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b084      	sub	sp, #16
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
 8006d96:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 8006d98:	f107 030c 	add.w	r3, r7, #12
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f000 f998 	bl	80070d2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006da2:	f107 020c 	add.w	r2, r7, #12
 8006da6:	2300      	movs	r3, #0
 8006da8:	6839      	ldr	r1, [r7, #0]
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 f9cc 	bl	8007148 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXntsrNS0_25evaluator_assume_aliasingISJ_NS0_16evaluator_traitsISJ_E5ShapeEEE5valueEPvE4typeE>
}
 8006db0:	bf00      	nop
 8006db2:	3710      	adds	r7, #16
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
    }
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	370c      	adds	r7, #12
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr

08006dce <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006dce:	b480      	push	{r7}
 8006dd0:	b083      	sub	sp, #12
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
    }
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4618      	mov	r0, r3
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
    }
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4618      	mov	r0, r3
 8006df0:	370c      	adds	r7, #12
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr

08006dfa <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006dfa:	b480      	push	{r7}
 8006dfc:	b083      	sub	sp, #12
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
    }
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4618      	mov	r0, r3
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
    }
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	370c      	adds	r7, #12
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr

08006e26 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4rowsEv>:
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b082      	sub	sp, #8
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7fe fadf 	bl	80053f6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3708      	adds	r7, #8
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>:
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b082      	sub	sp, #8
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f7fe fad1 	bl	80053f6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8006e54:	4603      	mov	r3, r0
 8006e56:	4618      	mov	r0, r3
 8006e58:	3708      	adds	r7, #8
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 8006e5e:	b480      	push	{r7}
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	2301      	movs	r3, #1
 8006e64:	4618      	mov	r0, r3
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4colsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 8006e6e:	b480      	push	{r7}
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	2301      	movs	r3, #1
 8006e74:	4618      	mov	r0, r3
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr

08006e7e <_ZN5Eigen9DenseBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006e7e:	b480      	push	{r7}
 8006e80:	b083      	sub	sp, #12
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
    }
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4618      	mov	r0, r3
 8006e8a:	370c      	adds	r7, #12
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
    }
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	370c      	adds	r7, #12
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr

08006eaa <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEE7derivedEv>:
 8006eaa:	b480      	push	{r7}
 8006eac:	b083      	sub	sp, #12
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 8006eca:	f107 030c 	add.w	r3, r7, #12
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f000 f8ff 	bl	80070d2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006ed4:	f107 020c 	add.w	r2, r7, #12
 8006ed8:	2300      	movs	r3, #0
 8006eda:	6839      	ldr	r1, [r7, #0]
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 f943 	bl	8007168 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISQ_NS0_16evaluator_traitsISQ_E5ShapeEEE5valueEPvE4typeE>
}
 8006ee2:	bf00      	nop
 8006ee4:	3710      	adds	r7, #16
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}

08006eea <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006eea:	b480      	push	{r7}
 8006eec:	b083      	sub	sp, #12
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
    }
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
    }
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	370c      	adds	r7, #12
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr

08006f16 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006f16:	b480      	push	{r7}
 8006f18:	b083      	sub	sp, #12
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
    }
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4618      	mov	r0, r3
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
    }
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4618      	mov	r0, r3
 8006f38:	370c      	adds	r7, #12
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr

08006f42 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b082      	sub	sp, #8
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f7ff f88a 	bl	8006068 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8006f54:	4603      	mov	r3, r0
    }
 8006f56:	4618      	mov	r0, r3
 8006f58:	3708      	adds	r7, #8
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}

08006f5e <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEE7derivedEv>:
 8006f5e:	b480      	push	{r7}
 8006f60:	b083      	sub	sp, #12
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4618      	mov	r0, r3
 8006f6a:	370c      	adds	r7, #12
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 8006f7e:	f107 030c 	add.w	r3, r7, #12
 8006f82:	4618      	mov	r0, r3
 8006f84:	f000 f8a5 	bl	80070d2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006f88:	f107 020c 	add.w	r2, r7, #12
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	6839      	ldr	r1, [r7, #0]
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 f901 	bl	8007198 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISO_NS0_16evaluator_traitsISO_E5ShapeEEE5valueEPvE4typeE>
}
 8006f96:	bf00      	nop
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006f9e:	b480      	push	{r7}
 8006fa0:	b083      	sub	sp, #12
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
    }
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4618      	mov	r0, r3
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
    }
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	370c      	adds	r7, #12
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr

08006fca <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006fca:	b480      	push	{r7}
 8006fcc:	b083      	sub	sp, #12
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
    }
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEE7derivedEv>:
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4618      	mov	r0, r3
 8006fec:	370c      	adds	r7, #12
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr

08006ff6 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b084      	sub	sp, #16
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
 8006ffe:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 8007000:	f107 030c 	add.w	r3, r7, #12
 8007004:	4618      	mov	r0, r3
 8007006:	f000 f864 	bl	80070d2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800700a:	f107 020c 	add.w	r2, r7, #12
 800700e:	2300      	movs	r3, #0
 8007010:	6839      	ldr	r1, [r7, #0]
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 f8d8 	bl	80071c8 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISJ_NS0_16evaluator_traitsISJ_E5ShapeEEE5valueEPvE4typeE>
}
 8007018:	bf00      	nop
 800701a:	3710      	adds	r7, #16
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <_ZN5Eigen8internal11plain_arrayIfLi9ELi0ELi0EEC1Ev>:
  plain_array()
 8007020:	b580      	push	{r7, lr}
 8007022:	b082      	sub	sp, #8
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 8007028:	f000 f8e6 	bl	80071f8 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi9EEEvv>
  }
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4618      	mov	r0, r3
 8007030:	3708      	adds	r7, #8
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}

08007036 <_ZN5Eigen8internal11plain_arrayIfLi1ELi0ELi0EEC1Ev>:
  plain_array()
 8007036:	b580      	push	{r7, lr}
 8007038:	b082      	sub	sp, #8
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 800703e:	f000 f8e2 	bl	8007206 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi1EEEvv>
  }
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4618      	mov	r0, r3
 8007046:	3708      	adds	r7, #8
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <_ZN5Eigen8internal11plain_arrayIfLi3ELi0ELi0EEC1Ev>:
  plain_array()
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 8007054:	f000 f8de 	bl	8007214 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi3EEEvv>
  }
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4618      	mov	r0, r3
 800705c:	3708      	adds	r7, #8
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <_ZN5Eigen8internal11plain_arrayIfLi3ELi1ELi0EEC1Ev>:
  plain_array()
 8007062:	b580      	push	{r7, lr}
 8007064:	b082      	sub	sp, #8
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 800706a:	f000 f8d3 	bl	8007214 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi3EEEvv>
  }
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4618      	mov	r0, r3
 8007072:	3708      	adds	r7, #8
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4618      	mov	r0, r3
 8007084:	370c      	adds	r7, #12
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr

0800708e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 800708e:	b590      	push	{r4, r7, lr}
 8007090:	b083      	sub	sp, #12
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
 8007096:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 f8cf 	bl	800723c <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
 800709e:	687c      	ldr	r4, [r7, #4]
 80070a0:	6838      	ldr	r0, [r7, #0]
 80070a2:	f000 f8be 	bl	8007222 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2200      	movs	r2, #0
 80070aa:	4619      	mov	r1, r3
 80070ac:	4620      	mov	r0, r4
 80070ae:	f000 f8d0 	bl	8007252 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4618      	mov	r0, r3
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd90      	pop	{r4, r7, pc}

080070bc <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>:
  Index outerStride() const EIGEN_NOEXCEPT { return OuterStride; }
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	2300      	movs	r3, #0
 80070c6:	4618      	mov	r0, r3
 80070c8:	370c      	adds	r7, #12
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr

080070d2 <_ZN5Eigen8internal9assign_opIffEC1Ev>:
  * \brief Template functor for scalar/packet assignment
  *
  */
template<typename DstScalar,typename SrcScalar> struct assign_op {

  EIGEN_EMPTY_STRUCT_CTOR(assign_op)
 80070d2:	b480      	push	{r7}
 80070d4:	b083      	sub	sp, #12
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4618      	mov	r0, r3
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISN_NS0_16evaluator_traitsISN_E5ShapeEEE5valueEPvE4typeE>:
}

// Deal with "assume-aliasing"
template<typename Dst, typename Src, typename Func>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b08e      	sub	sp, #56	; 0x38
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	607a      	str	r2, [r7, #4]
 80070f4:	603b      	str	r3, [r7, #0]
{
  typename plain_matrix_type<Src>::type tmp(src);
 80070f6:	f107 0314 	add.w	r3, r7, #20
 80070fa:	68b9      	ldr	r1, [r7, #8]
 80070fc:	4618      	mov	r0, r3
 80070fe:	f000 f8ba 	bl	8007276 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS0_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS5_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 8007102:	f107 0314 	add.w	r3, r7, #20
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	4619      	mov	r1, r3
 800710a:	68f8      	ldr	r0, [r7, #12]
 800710c:	f000 f8c8 	bl	80072a0 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 8007110:	bf00      	nop
 8007112:	3738      	adds	r7, #56	; 0x38
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISB_NS0_16evaluator_traitsISB_E5ShapeEEE5valueEPvE4typeE>:
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 8007118:	b580      	push	{r7, lr}
 800711a:	b088      	sub	sp, #32
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	607a      	str	r2, [r7, #4]
 8007124:	603b      	str	r3, [r7, #0]
  typename plain_matrix_type<Src>::type tmp(src);
 8007126:	f107 0314 	add.w	r3, r7, #20
 800712a:	68b9      	ldr	r1, [r7, #8]
 800712c:	4618      	mov	r0, r3
 800712e:	f000 f8c8 	bl	80072c2 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEES1_Li0EEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 8007132:	f107 0314 	add.w	r3, r7, #20
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	4619      	mov	r1, r3
 800713a:	68f8      	ldr	r0, [r7, #12]
 800713c:	f000 f8d6 	bl	80072ec <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 8007140:	bf00      	nop
 8007142:	3720      	adds	r7, #32
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXntsrNS0_25evaluator_assume_aliasingISJ_NS0_16evaluator_traitsISJ_E5ShapeEEE5valueEPvE4typeE>:

template<typename Dst, typename Src, typename Func>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if<!evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 8007148:	b580      	push	{r7, lr}
 800714a:	b084      	sub	sp, #16
 800714c:	af00      	add	r7, sp, #0
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	607a      	str	r2, [r7, #4]
 8007154:	603b      	str	r3, [r7, #0]
{
  call_assignment_no_alias(dst, src, func);
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	68b9      	ldr	r1, [r7, #8]
 800715a:	68f8      	ldr	r0, [r7, #12]
 800715c:	f000 f8d7 	bl	800730e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 8007160:	bf00      	nop
 8007162:	3710      	adds	r7, #16
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISQ_NS0_16evaluator_traitsISQ_E5ShapeEEE5valueEPvE4typeE>:
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 8007168:	b580      	push	{r7, lr}
 800716a:	b088      	sub	sp, #32
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	607a      	str	r2, [r7, #4]
 8007174:	603b      	str	r3, [r7, #0]
  typename plain_matrix_type<Src>::type tmp(src);
 8007176:	f107 0314 	add.w	r3, r7, #20
 800717a:	68b9      	ldr	r1, [r7, #8]
 800717c:	4618      	mov	r0, r3
 800717e:	f000 f8d7 	bl	8007330 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS3_INS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS3_INS3_IS6_S4_Li0EEES7_Li0EEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 8007182:	f107 0314 	add.w	r3, r7, #20
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	4619      	mov	r1, r3
 800718a:	68f8      	ldr	r0, [r7, #12]
 800718c:	f000 f8ae 	bl	80072ec <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 8007190:	bf00      	nop
 8007192:	3720      	adds	r7, #32
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISO_NS0_16evaluator_traitsISO_E5ShapeEEE5valueEPvE4typeE>:
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 8007198:	b580      	push	{r7, lr}
 800719a:	b088      	sub	sp, #32
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	607a      	str	r2, [r7, #4]
 80071a4:	603b      	str	r3, [r7, #0]
  typename plain_matrix_type<Src>::type tmp(src);
 80071a6:	f107 0314 	add.w	r3, r7, #20
 80071aa:	68b9      	ldr	r1, [r7, #8]
 80071ac:	4618      	mov	r0, r3
 80071ae:	f000 f8d4 	bl	800735a <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS1_KNS_7ProductIS1_NS3_INS4_20scalar_difference_opIffEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEES1_Li0EEEEELi0EEEEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 80071b2:	f107 0314 	add.w	r3, r7, #20
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	4619      	mov	r1, r3
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	f000 f896 	bl	80072ec <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 80071c0:	bf00      	nop
 80071c2:	3720      	adds	r7, #32
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISJ_NS0_16evaluator_traitsISJ_E5ShapeEEE5valueEPvE4typeE>:
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b08e      	sub	sp, #56	; 0x38
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	607a      	str	r2, [r7, #4]
 80071d4:	603b      	str	r3, [r7, #0]
  typename plain_matrix_type<Src>::type tmp(src);
 80071d6:	f107 0314 	add.w	r3, r7, #20
 80071da:	68b9      	ldr	r1, [r7, #8]
 80071dc:	4618      	mov	r0, r3
 80071de:	f000 f8d1 	bl	8007384 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS3_INS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES1_Li0EEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 80071e2:	f107 0314 	add.w	r3, r7, #20
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	4619      	mov	r1, r3
 80071ea:	68f8      	ldr	r0, [r7, #12]
 80071ec:	f000 f858 	bl	80072a0 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 80071f0:	bf00      	nop
 80071f2:	3738      	adds	r7, #56	; 0x38
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi9EEEvv>:
void check_static_allocation_size()
 80071f8:	b480      	push	{r7}
 80071fa:	af00      	add	r7, sp, #0
}
 80071fc:	bf00      	nop
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr

08007206 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi1EEEvv>:
void check_static_allocation_size()
 8007206:	b480      	push	{r7}
 8007208:	af00      	add	r7, sp, #0
}
 800720a:	bf00      	nop
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi3EEEvv>:
void check_static_allocation_size()
 8007214:	b480      	push	{r7}
 8007216:	af00      	add	r7, sp, #0
}
 8007218:	bf00      	nop
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr

08007222 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 8007222:	b580      	push	{r7, lr}
 8007224:	b082      	sub	sp, #8
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4618      	mov	r0, r3
 800722e:	f000 f8be 	bl	80073ae <_ZNK5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv>
 8007232:	4603      	mov	r3, r0
 8007234:	4618      	mov	r0, r3
 8007236:	3708      	adds	r7, #8
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	4618      	mov	r0, r3
 8007248:	370c      	adds	r7, #12
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr

08007252 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>:
  plainobjectbase_evaluator_data(const Scalar* ptr, Index outerStride) : data(ptr)
 8007252:	b580      	push	{r7, lr}
 8007254:	b084      	sub	sp, #16
 8007256:	af00      	add	r7, sp, #0
 8007258:	60f8      	str	r0, [r7, #12]
 800725a:	60b9      	str	r1, [r7, #8]
 800725c:	607a      	str	r2, [r7, #4]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	68ba      	ldr	r2, [r7, #8]
 8007262:	601a      	str	r2, [r3, #0]
    EIGEN_UNUSED_VARIABLE(outerStride);
 8007264:	1d3b      	adds	r3, r7, #4
 8007266:	4618      	mov	r0, r3
 8007268:	f7fd f82d 	bl	80042c6 <_ZN5Eigen8internal22ignore_unused_variableIiEEvRKT_>
  }
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	4618      	mov	r0, r3
 8007270:	3710      	adds	r7, #16
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}

08007276 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS0_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS5_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEERKT_>:
#ifndef EIGEN_PARSED_BY_DOXYGEN

    // This constructor is for both 1x1 matrices and dynamic vectors
    template<typename T>
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    explicit Matrix(const T& x)
 8007276:	b580      	push	{r7, lr}
 8007278:	b082      	sub	sp, #8
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
 800727e:	6039      	str	r1, [r7, #0]
    {
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4618      	mov	r0, r3
 8007284:	f7fd fdf3 	bl	8004e6e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 8007288:	f7fd fe01 	bl	8004e8e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6839      	ldr	r1, [r7, #0]
 8007290:	4618      	mov	r0, r3
 8007292:	f000 f8a3 	bl	80073dc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEESK_EEvRKNS_9DenseBaseIT0_EE>
    }
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	4618      	mov	r0, r3
 800729a:	3708      	adds	r7, #8
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
}


template<typename Dst, typename Src, typename Func>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b086      	sub	sp, #24
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	607a      	str	r2, [r7, #4]
                      ) && int(Dst::SizeAtCompileTime) != 1
  };

  typedef typename internal::conditional<NeedToTranspose, Transpose<Dst>, Dst>::type ActualDstTypeCleaned;
  typedef typename internal::conditional<NeedToTranspose, Transpose<Dst>, Dst&>::type ActualDstType;
  ActualDstType actualDst(dst);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	617b      	str	r3, [r7, #20]
  // TODO check whether this is the right place to perform these checks:
  EIGEN_STATIC_ASSERT_LVALUE(Dst)
  EIGEN_STATIC_ASSERT_SAME_MATRIX_SIZE(ActualDstTypeCleaned,Src)
  EIGEN_CHECK_BINARY_COMPATIBILIY(Func,typename ActualDstTypeCleaned::Scalar,typename Src::Scalar);

  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	68b9      	ldr	r1, [r7, #8]
 80072b4:	6978      	ldr	r0, [r7, #20]
 80072b6:	f000 f89e 	bl	80073f6 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>
}
 80072ba:	bf00      	nop
 80072bc:	3718      	adds	r7, #24
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}

080072c2 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEES1_Li0EEEEERKT_>:
    explicit Matrix(const T& x)
 80072c2:	b580      	push	{r7, lr}
 80072c4:	b082      	sub	sp, #8
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
 80072ca:	6039      	str	r1, [r7, #0]
    {
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4618      	mov	r0, r3
 80072d0:	f7fd fe13 	bl	8004efa <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 80072d4:	f7fd fe21 	bl	8004f1a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6839      	ldr	r1, [r7, #0]
 80072dc:	4618      	mov	r0, r3
 80072de:	f000 f89d 	bl	800741c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEES7_EEvRKNS_9DenseBaseIT0_EE>
    }
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4618      	mov	r0, r3
 80072e6:	3708      	adds	r7, #8
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b086      	sub	sp, #24
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	68b9      	ldr	r1, [r7, #8]
 8007300:	6978      	ldr	r0, [r7, #20]
 8007302:	f000 f898 	bl	8007436 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>
}
 8007306:	bf00      	nop
 8007308:	3718      	adds	r7, #24
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800730e:	b580      	push	{r7, lr}
 8007310:	b086      	sub	sp, #24
 8007312:	af00      	add	r7, sp, #0
 8007314:	60f8      	str	r0, [r7, #12]
 8007316:	60b9      	str	r1, [r7, #8]
 8007318:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	68b9      	ldr	r1, [r7, #8]
 8007322:	6978      	ldr	r0, [r7, #20]
 8007324:	f000 f89a 	bl	800745c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 8007328:	bf00      	nop
 800732a:	3718      	adds	r7, #24
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS3_INS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS3_INS3_IS6_S4_Li0EEES7_Li0EEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERKT_>:
    explicit Matrix(const T& x)
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
    {
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4618      	mov	r0, r3
 800733e:	f7fd fddc 	bl	8004efa <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 8007342:	f7fd fdea 	bl	8004f1a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6839      	ldr	r1, [r7, #0]
 800734a:	4618      	mov	r0, r3
 800734c:	f000 f899 	bl	8007482 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEESN_EEvRKNS_9DenseBaseIT0_EE>
    }
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4618      	mov	r0, r3
 8007354:	3708      	adds	r7, #8
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}

0800735a <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS1_KNS_7ProductIS1_NS3_INS4_20scalar_difference_opIffEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEES1_Li0EEEEELi0EEEEEEERKT_>:
    explicit Matrix(const T& x)
 800735a:	b580      	push	{r7, lr}
 800735c:	b082      	sub	sp, #8
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
 8007362:	6039      	str	r1, [r7, #0]
    {
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	4618      	mov	r0, r3
 8007368:	f7fd fdc7 	bl	8004efa <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 800736c:	f7fd fdd5 	bl	8004f1a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6839      	ldr	r1, [r7, #0]
 8007374:	4618      	mov	r0, r3
 8007376:	f000 f891 	bl	800749c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEESL_EEvRKNS_9DenseBaseIT0_EE>
    }
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4618      	mov	r0, r3
 800737e:	3708      	adds	r7, #8
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS3_INS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES1_Li0EEEEERKT_>:
    explicit Matrix(const T& x)
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
    {
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4618      	mov	r0, r3
 8007392:	f7fd fd6c 	bl	8004e6e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 8007396:	f7fd fd7a 	bl	8004e8e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6839      	ldr	r1, [r7, #0]
 800739e:	4618      	mov	r0, r3
 80073a0:	f000 f889 	bl	80074b6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEESG_EEvRKNS_9DenseBaseIT0_EE>
    }
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4618      	mov	r0, r3
 80073a8:	3708      	adds	r7, #8
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}

080073ae <_ZNK5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 80073ae:	b480      	push	{r7}
 80073b0:	b083      	sub	sp, #12
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4618      	mov	r0, r3
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>:
    { }

    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index innerStride() const EIGEN_NOEXCEPT { return 1; }
    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index outerStride() const EIGEN_NOEXCEPT { return this->innerSize(); }
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 f87f 	bl	80074d0 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE9innerSizeEv>
 80073d2:	4603      	mov	r3, r0
 80073d4:	4618      	mov	r0, r3
 80073d6:	3708      	adds	r7, #8
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEESK_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 80073e6:	6839      	ldr	r1, [r7, #0]
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 f87d 	bl	80074e8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 80073ee:	bf00      	nop
 80073f0:	3708      	adds	r7, #8
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>:
// both partial specialization+SFINAE without ambiguous specialization
template< typename DstXprType, typename SrcXprType, typename Functor, typename Weak>
struct Assignment<DstXprType, SrcXprType, Functor, Dense2Dense, Weak>
{
  EIGEN_DEVICE_FUNC
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b084      	sub	sp, #16
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	60f8      	str	r0, [r7, #12]
 80073fe:	60b9      	str	r1, [r7, #8]
 8007400:	607a      	str	r2, [r7, #4]
  {
#ifndef EIGEN_NO_DEBUG
    internal::check_for_aliasing(dst, src);
 8007402:	68b9      	ldr	r1, [r7, #8]
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f000 f890 	bl	800752a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_>
#endif

    call_dense_assignment_loop(dst, src, func);
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	68b9      	ldr	r1, [r7, #8]
 800740e:	68f8      	ldr	r0, [r7, #12]
 8007410:	f000 f8c4 	bl	800759c <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8007414:	bf00      	nop
 8007416:	3710      	adds	r7, #16
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEES7_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 8007426:	6839      	ldr	r1, [r7, #0]
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 f8ef 	bl	800760c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800742e:	bf00      	nop
 8007430:	3708      	adds	r7, #8
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8007436:	b580      	push	{r7, lr}
 8007438:	b084      	sub	sp, #16
 800743a:	af00      	add	r7, sp, #0
 800743c:	60f8      	str	r0, [r7, #12]
 800743e:	60b9      	str	r1, [r7, #8]
 8007440:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8007442:	68b9      	ldr	r1, [r7, #8]
 8007444:	68f8      	ldr	r0, [r7, #12]
 8007446:	f000 f902 	bl	800764e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_EEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	68b9      	ldr	r1, [r7, #8]
 800744e:	68f8      	ldr	r0, [r7, #12]
 8007450:	f000 f908 	bl	8007664 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8007454:	bf00      	nop
 8007456:	3710      	adds	r7, #16
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8007468:	68b9      	ldr	r1, [r7, #8]
 800746a:	68f8      	ldr	r0, [r7, #12]
 800746c:	f000 f932 	bl	80076d4 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	68b9      	ldr	r1, [r7, #8]
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f000 f9ca 	bl	800780e <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800747a:	bf00      	nop
 800747c:	3710      	adds	r7, #16
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEESN_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 8007482:	b580      	push	{r7, lr}
 8007484:	b082      	sub	sp, #8
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
 800748a:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800748c:	6839      	ldr	r1, [r7, #0]
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 f9f5 	bl	800787e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 8007494:	bf00      	nop
 8007496:	3708      	adds	r7, #8
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEESL_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 80074a6:	6839      	ldr	r1, [r7, #0]
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 fa09 	bl	80078c0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 80074ae:	bf00      	nop
 80074b0:	3708      	adds	r7, #8
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}

080074b6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEESG_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 80074b6:	b580      	push	{r7, lr}
 80074b8:	b082      	sub	sp, #8
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
 80074be:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 80074c0:	6839      	ldr	r1, [r7, #0]
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 fa1d 	bl	8007902 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 80074c8:	bf00      	nop
 80074ca:	3708      	adds	r7, #8
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE9innerSizeEv>:
    Index innerSize() const
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 fa33 	bl	8007944 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4sizeEv>
 80074de:	4603      	mov	r3, r0
    }
 80074e0:	4618      	mov	r0, r3
 80074e2:	3708      	adds	r7, #8
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 80074e8:	b5b0      	push	{r4, r5, r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f7fe fa90 	bl	8005a18 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80074f8:	4604      	mov	r4, r0
 80074fa:	6838      	ldr	r0, [r7, #0]
 80074fc:	f7ff fba9 	bl	8006c52 <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEE7derivedEv>
 8007500:	4605      	mov	r5, r0
 8007502:	f107 030c 	add.w	r3, r7, #12
 8007506:	4618      	mov	r0, r3
 8007508:	f7ff fde3 	bl	80070d2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800750c:	f107 030c 	add.w	r3, r7, #12
 8007510:	461a      	mov	r2, r3
 8007512:	4629      	mov	r1, r5
 8007514:	4620      	mov	r0, r4
 8007516:	f000 fa27 	bl	8007968 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f7fe fa7c 	bl	8005a18 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8007520:	4603      	mov	r3, r0
    }
 8007522:	4618      	mov	r0, r3
 8007524:	3710      	adds	r7, #16
 8007526:	46bd      	mov	sp, r7
 8007528:	bdb0      	pop	{r4, r5, r7, pc}

0800752a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_>:
    {
    }
};

template<typename Dst, typename Src>
void check_for_aliasing(const Dst &dst, const Src &src)
 800752a:	b580      	push	{r7, lr}
 800752c:	b082      	sub	sp, #8
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
 8007532:	6039      	str	r1, [r7, #0]
{
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	4618      	mov	r0, r3
 8007538:	f7fd fd9b 	bl	8005072 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800753c:	4603      	mov	r3, r0
 800753e:	2b01      	cmp	r3, #1
 8007540:	dd08      	ble.n	8007554 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_+0x2a>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4618      	mov	r0, r3
 8007546:	f7fd fd89 	bl	800505c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800754a:	4603      	mov	r3, r0
 800754c:	2b01      	cmp	r3, #1
 800754e:	dd01      	ble.n	8007554 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_+0x2a>
 8007550:	2301      	movs	r3, #1
 8007552:	e000      	b.n	8007556 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_+0x2c>
 8007554:	2300      	movs	r3, #0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d003      	beq.n	8007562 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 800755a:	6839      	ldr	r1, [r7, #0]
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 fa14 	bl	800798a <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Lb0EE3runERKS3_S6_>
}
 8007562:	bf00      	nop
 8007564:	3708      	adds	r7, #8
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}

0800756a <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>:
struct evaluator<PlainObjectBase<Derived> >
 800756a:	b580      	push	{r7, lr}
 800756c:	b082      	sub	sp, #8
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 fa24 	bl	80079c0 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4618      	mov	r0, r3
 800757c:	3708      	adds	r7, #8
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}

08007582 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>:
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 8007582:	b580      	push	{r7, lr}
 8007584:	b082      	sub	sp, #8
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4618      	mov	r0, r3
 800758e:	f7ff ffec 	bl	800756a <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4618      	mov	r0, r3
 8007596:	3708      	adds	r7, #8
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800759c:	b580      	push	{r7, lr}
 800759e:	b08c      	sub	sp, #48	; 0x30
 80075a0:	af02      	add	r7, sp, #8
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 80075a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075ac:	68b9      	ldr	r1, [r7, #8]
 80075ae:	4618      	mov	r0, r3
 80075b0:	f000 f9f6 	bl	80079a0 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  resize_if_allowed(dst, src, func);
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	68b9      	ldr	r1, [r7, #8]
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	f000 fa0d 	bl	80079d8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 80075be:	f107 0320 	add.w	r3, r7, #32
 80075c2:	68f9      	ldr	r1, [r7, #12]
 80075c4:	4618      	mov	r0, r3
 80075c6:	f000 f9eb 	bl	80079a0 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 80075ca:	68f8      	ldr	r0, [r7, #12]
 80075cc:	f000 fa50 	bl	8007a70 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 80075d0:	4603      	mov	r3, r0
 80075d2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80075d6:	f107 0120 	add.w	r1, r7, #32
 80075da:	f107 0010 	add.w	r0, r7, #16
 80075de:	9300      	str	r3, [sp, #0]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f000 fa50 	bl	8007a86 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 80075e6:	f107 0310 	add.w	r3, r7, #16
 80075ea:	4618      	mov	r0, r3
 80075ec:	f000 fa65 	bl	8007aba <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>
  DstEvaluatorType dstEvaluator(dst);
 80075f0:	f107 0320 	add.w	r3, r7, #32
 80075f4:	4618      	mov	r0, r3
 80075f6:	f7ff ffc4 	bl	8007582 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 80075fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075fe:	4618      	mov	r0, r3
 8007600:	f7ff ffbf 	bl	8007582 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
}
 8007604:	bf00      	nop
 8007606:	3728      	adds	r7, #40	; 0x28
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800760c:	b5b0      	push	{r4, r5, r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f7fe f862 	bl	80056e0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800761c:	4604      	mov	r4, r0
 800761e:	6838      	ldr	r0, [r7, #0]
 8007620:	f7ff fb42 	bl	8006ca8 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>
 8007624:	4605      	mov	r5, r0
 8007626:	f107 030c 	add.w	r3, r7, #12
 800762a:	4618      	mov	r0, r3
 800762c:	f7ff fd51 	bl	80070d2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8007630:	f107 030c 	add.w	r3, r7, #12
 8007634:	461a      	mov	r2, r3
 8007636:	4629      	mov	r1, r5
 8007638:	4620      	mov	r0, r4
 800763a:	f000 fa49 	bl	8007ad0 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f7fe f84e 	bl	80056e0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8007644:	4603      	mov	r3, r0
    }
 8007646:	4618      	mov	r0, r3
 8007648:	3710      	adds	r7, #16
 800764a:	46bd      	mov	sp, r7
 800764c:	bdb0      	pop	{r4, r5, r7, pc}

0800764e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_EEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800764e:	b480      	push	{r7}
 8007650:	b083      	sub	sp, #12
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
 8007656:	6039      	str	r1, [r7, #0]
}
 8007658:	bf00      	nop
 800765a:	370c      	adds	r7, #12
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8007664:	b580      	push	{r7, lr}
 8007666:	b08c      	sub	sp, #48	; 0x30
 8007668:	af02      	add	r7, sp, #8
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8007670:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007674:	68b9      	ldr	r1, [r7, #8]
 8007676:	4618      	mov	r0, r3
 8007678:	f7ff fa47 	bl	8006b0a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  resize_if_allowed(dst, src, func);
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	68b9      	ldr	r1, [r7, #8]
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	f000 fa37 	bl	8007af4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8007686:	f107 0320 	add.w	r3, r7, #32
 800768a:	68f9      	ldr	r1, [r7, #12]
 800768c:	4618      	mov	r0, r3
 800768e:	f7ff fa3c 	bl	8006b0a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8007692:	68f8      	ldr	r0, [r7, #12]
 8007694:	f000 fa7a 	bl	8007b8c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 8007698:	4603      	mov	r3, r0
 800769a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800769e:	f107 0120 	add.w	r1, r7, #32
 80076a2:	f107 0010 	add.w	r0, r7, #16
 80076a6:	9300      	str	r3, [sp, #0]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f000 fa7a 	bl	8007ba2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 80076ae:	f107 0310 	add.w	r3, r7, #16
 80076b2:	4618      	mov	r0, r3
 80076b4:	f000 fa8f 	bl	8007bd6 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>
  DstEvaluatorType dstEvaluator(dst);
 80076b8:	f107 0320 	add.w	r3, r7, #32
 80076bc:	4618      	mov	r0, r3
 80076be:	f7fd feea 	bl	8005496 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 80076c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7fd fee5 	bl	8005496 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
}
 80076cc:	bf00      	nop
 80076ce:	3728      	adds	r7, #40	; 0x28
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4618      	mov	r0, r3
 80076e2:	f7fd fcc6 	bl	8005072 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	dd08      	ble.n	80076fe <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_+0x2a>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4618      	mov	r0, r3
 80076f0:	f7fd fcb4 	bl	800505c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	dd01      	ble.n	80076fe <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_+0x2a>
 80076fa:	2301      	movs	r3, #1
 80076fc:	e000      	b.n	8007700 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_+0x2c>
 80076fe:	2300      	movs	r3, #0
 8007700:	2b00      	cmp	r3, #0
 8007702:	d003      	beq.n	800770c <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 8007704:	6839      	ldr	r1, [r7, #0]
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 fa70 	bl	8007bec <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EELb0EE3runERSD_RKSE_>
}
 800770c:	bf00      	nop
 800770e:	3708      	adds	r7, #8
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEED1Ev>:
struct evaluator<PlainObjectBase<Derived> >
 8007714:	b580      	push	{r7, lr}
 8007716:	b082      	sub	sp, #8
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 fa8a 	bl	8007c36 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4618      	mov	r0, r3
 8007726:	3708      	adds	r7, #8
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>:
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 800772c:	b580      	push	{r7, lr}
 800772e:	b082      	sub	sp, #8
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4618      	mov	r0, r3
 8007738:	f7ff ffec 	bl	8007714 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEED1Ev>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	4618      	mov	r0, r3
 8007740:	3708      	adds	r7, #8
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEELi3ENS_10DenseShapeES9_ffED1Ev>:
};

// This is the default evaluator implementation for products:
// It creates a temporary and call generic_product_impl
template<typename Lhs, typename Rhs, int Options, int ProductTag, typename LhsShape, typename RhsShape>
struct product_evaluator<Product<Lhs, Rhs, Options>, ProductTag, LhsShape, RhsShape>
 8007746:	b580      	push	{r7, lr}
 8007748:	b082      	sub	sp, #8
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4618      	mov	r0, r3
 8007752:	f7ff ffeb 	bl	800772c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4618      	mov	r0, r3
 800775a:	3708      	adds	r7, #8
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4618      	mov	r0, r3
 800776c:	f7ff ffeb 	bl	8007746 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEELi3ENS_10DenseShapeES9_ffED1Ev>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	4618      	mov	r0, r3
 8007774:	3708      	adds	r7, #8
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}

0800777a <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEED1Ev>:
struct evaluator<const T>
 800777a:	b580      	push	{r7, lr}
 800777c:	b082      	sub	sp, #8
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4618      	mov	r0, r3
 8007786:	f7ff ffeb 	bl	8007760 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEED1Ev>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4618      	mov	r0, r3
 800778e:	3708      	adds	r7, #8
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>:
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	4618      	mov	r0, r3
 80077a0:	f7ff feef 	bl	8007582 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4618      	mov	r0, r3
 80077a8:	3708      	adds	r7, #8
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}

080077ae <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4DataD1Ev>:
  }

protected:

  // this helper permits to completely eliminate the functor if it is empty
  struct Data
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b082      	sub	sp, #8
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	332c      	adds	r3, #44	; 0x2c
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7ff ffea 	bl	8007794 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	3304      	adds	r3, #4
 80077c4:	4618      	mov	r0, r3
 80077c6:	f7ff ffd8 	bl	800777a <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEED1Ev>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4618      	mov	r0, r3
 80077ce:	3708      	adds	r7, #8
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b082      	sub	sp, #8
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4618      	mov	r0, r3
 80077e0:	f7ff ffe5 	bl	80077ae <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4DataD1Ev>
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 fa1b 	bl	8007c20 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEED1Ev>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4618      	mov	r0, r3
 80077ee:	3708      	adds	r7, #8
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4618      	mov	r0, r3
 8007800:	f7ff ffe8 	bl	80077d4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffED1Ev>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	4618      	mov	r0, r3
 8007808:	3708      	adds	r7, #8
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800780e:	b580      	push	{r7, lr}
 8007810:	b098      	sub	sp, #96	; 0x60
 8007812:	af02      	add	r7, sp, #8
 8007814:	60f8      	str	r0, [r7, #12]
 8007816:	60b9      	str	r1, [r7, #8]
 8007818:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800781a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800781e:	68b9      	ldr	r1, [r7, #8]
 8007820:	4618      	mov	r0, r3
 8007822:	f000 f9ee 	bl	8007c02 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1ERKSE_>
  resize_if_allowed(dst, src, func);
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	68b9      	ldr	r1, [r7, #8]
 800782a:	68f8      	ldr	r0, [r7, #12]
 800782c:	f000 fa28 	bl	8007c80 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8007830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007834:	68f9      	ldr	r1, [r7, #12]
 8007836:	4618      	mov	r0, r3
 8007838:	f000 f8b2 	bl	80079a0 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800783c:	68f8      	ldr	r0, [r7, #12]
 800783e:	f000 f917 	bl	8007a70 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 8007842:	4603      	mov	r3, r0
 8007844:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007848:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800784c:	f107 0014 	add.w	r0, r7, #20
 8007850:	9300      	str	r3, [sp, #0]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f000 fa5e 	bl	8007d14 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8007858:	f107 0314 	add.w	r3, r7, #20
 800785c:	4618      	mov	r0, r3
 800785e:	f000 fa73 	bl	8007d48 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSL_>
  DstEvaluatorType dstEvaluator(dst);
 8007862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007866:	4618      	mov	r0, r3
 8007868:	f7ff fe8b 	bl	8007582 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800786c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007870:	4618      	mov	r0, r3
 8007872:	f7ff ffbf 	bl	80077f4 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEED1Ev>
}
 8007876:	bf00      	nop
 8007878:	3758      	adds	r7, #88	; 0x58
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800787e:	b5b0      	push	{r4, r5, r7, lr}
 8007880:	b084      	sub	sp, #16
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
 8007886:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f7fd ff29 	bl	80056e0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800788e:	4604      	mov	r4, r0
 8007890:	6838      	ldr	r0, [r7, #0]
 8007892:	f7ff fb0a 	bl	8006eaa <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEE7derivedEv>
 8007896:	4605      	mov	r5, r0
 8007898:	f107 030c 	add.w	r3, r7, #12
 800789c:	4618      	mov	r0, r3
 800789e:	f7ff fc18 	bl	80070d2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 80078a2:	f107 030c 	add.w	r3, r7, #12
 80078a6:	461a      	mov	r2, r3
 80078a8:	4629      	mov	r1, r5
 80078aa:	4620      	mov	r0, r4
 80078ac:	f000 fa57 	bl	8007d5e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f7fd ff15 	bl	80056e0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80078b6:	4603      	mov	r3, r0
    }
 80078b8:	4618      	mov	r0, r3
 80078ba:	3710      	adds	r7, #16
 80078bc:	46bd      	mov	sp, r7
 80078be:	bdb0      	pop	{r4, r5, r7, pc}

080078c0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 80078c0:	b5b0      	push	{r4, r5, r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f7fd ff08 	bl	80056e0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80078d0:	4604      	mov	r4, r0
 80078d2:	6838      	ldr	r0, [r7, #0]
 80078d4:	f7ff fb43 	bl	8006f5e <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEE7derivedEv>
 80078d8:	4605      	mov	r5, r0
 80078da:	f107 030c 	add.w	r3, r7, #12
 80078de:	4618      	mov	r0, r3
 80078e0:	f7ff fbf7 	bl	80070d2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 80078e4:	f107 030c 	add.w	r3, r7, #12
 80078e8:	461a      	mov	r2, r3
 80078ea:	4629      	mov	r1, r5
 80078ec:	4620      	mov	r0, r4
 80078ee:	f000 fa47 	bl	8007d80 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f7fd fef4 	bl	80056e0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80078f8:	4603      	mov	r3, r0
    }
 80078fa:	4618      	mov	r0, r3
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bdb0      	pop	{r4, r5, r7, pc}

08007902 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 8007902:	b5b0      	push	{r4, r5, r7, lr}
 8007904:	b084      	sub	sp, #16
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
 800790a:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f7fe f883 	bl	8005a18 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8007912:	4604      	mov	r4, r0
 8007914:	6838      	ldr	r0, [r7, #0]
 8007916:	f7ff fb63 	bl	8006fe0 <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEE7derivedEv>
 800791a:	4605      	mov	r5, r0
 800791c:	f107 030c 	add.w	r3, r7, #12
 8007920:	4618      	mov	r0, r3
 8007922:	f7ff fbd6 	bl	80070d2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8007926:	f107 030c 	add.w	r3, r7, #12
 800792a:	461a      	mov	r2, r3
 800792c:	4629      	mov	r1, r5
 800792e:	4620      	mov	r0, r4
 8007930:	f000 fa37 	bl	8007da2 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f7fe f86f 	bl	8005a18 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800793a:	4603      	mov	r3, r0
    }
 800793c:	4618      	mov	r0, r3
 800793e:	3710      	adds	r7, #16
 8007940:	46bd      	mov	sp, r7
 8007942:	bdb0      	pop	{r4, r5, r7, pc}

08007944 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4sizeEv>:
  /** \returns the number of coefficients, which is rows()*cols().
    * \sa rows(), cols(), SizeAtCompileTime. */
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
  inline Index size() const EIGEN_NOEXCEPT { return rows() * cols(); }
 8007944:	b590      	push	{r4, r7, lr}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f7fd fd76 	bl	800543e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007952:	4604      	mov	r4, r0
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f7fd fd82 	bl	800545e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800795a:	4603      	mov	r3, r0
 800795c:	fb04 f303 	mul.w	r3, r4, r3
 8007960:	4618      	mov	r0, r3
 8007962:	370c      	adds	r7, #12
 8007964:	46bd      	mov	sp, r7
 8007966:	bd90      	pop	{r4, r7, pc}

08007968 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8007968:	b580      	push	{r7, lr}
 800796a:	b086      	sub	sp, #24
 800796c:	af00      	add	r7, sp, #0
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	68b9      	ldr	r1, [r7, #8]
 800797c:	6978      	ldr	r0, [r7, #20]
 800797e:	f000 fa3c 	bl	8007dfa <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>
}
 8007982:	bf00      	nop
 8007984:	3718      	adds	r7, #24
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}

0800798a <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Lb0EE3runERKS3_S6_>:
    static void run(const Derived&, const OtherDerived&)
 800798a:	b480      	push	{r7}
 800798c:	b083      	sub	sp, #12
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
 8007992:	6039      	str	r1, [r7, #0]
    }
 8007994:	bf00      	nop
 8007996:	370c      	adds	r7, #12
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr

080079a0 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>:
  explicit evaluator(const XprType& m)
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	683a      	ldr	r2, [r7, #0]
 80079ae:	4611      	mov	r1, r2
 80079b0:	4618      	mov	r0, r3
 80079b2:	f000 fa5c 	bl	8007e6e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1ERKS5_>
  { }
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4618      	mov	r0, r3
 80079ba:	3708      	adds	r7, #8
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	4618      	mov	r0, r3
 80079cc:	370c      	adds	r7, #12
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr
	...

080079d8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 80079d8:	b580      	push	{r7, lr}
 80079da:	b086      	sub	sp, #24
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7fd fb43 	bl	8005072 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80079ec:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	4618      	mov	r0, r3
 80079f2:	f7fd fb33 	bl	800505c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80079f6:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7fd fb39 	bl	8005072 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007a00:	4602      	mov	r2, r0
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d107      	bne.n	8007a18 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7fd fb26 	bl	800505c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007a10:	4602      	mov	r2, r0
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d001      	beq.n	8007a1c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x44>
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e000      	b.n	8007a1e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x46>
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d005      	beq.n	8007a2e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x56>
    dst.resize(dstRows, dstCols);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	693a      	ldr	r2, [r7, #16]
 8007a26:	6979      	ldr	r1, [r7, #20]
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f000 fa3b 	bl	8007ea4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	4618      	mov	r0, r3
 8007a32:	f7fd fb1e 	bl	8005072 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007a36:	4602      	mov	r2, r0
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d107      	bne.n	8007a4e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x76>
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	4618      	mov	r0, r3
 8007a42:	f7fd fb0b 	bl	800505c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007a46:	4602      	mov	r2, r0
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d006      	beq.n	8007a5c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x84>
 8007a4e:	4b05      	ldr	r3, [pc, #20]	; (8007a64 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8007a50:	4a05      	ldr	r2, [pc, #20]	; (8007a68 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8007a52:	f240 21fd 	movw	r1, #765	; 0x2fd
 8007a56:	4805      	ldr	r0, [pc, #20]	; (8007a6c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x94>)
 8007a58:	f016 fa24 	bl	801dea4 <__assert_func>
}
 8007a5c:	bf00      	nop
 8007a5e:	3718      	adds	r7, #24
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	08022384 	.word	0x08022384
 8007a68:	080223b4 	.word	0x080223b4
 8007a6c:	08022498 	.word	0x08022498

08007a70 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	370c      	adds	r7, #12
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr

08007a86 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8007a86:	b480      	push	{r7}
 8007a88:	b085      	sub	sp, #20
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	60f8      	str	r0, [r7, #12]
 8007a8e:	60b9      	str	r1, [r7, #8]
 8007a90:	607a      	str	r2, [r7, #4]
 8007a92:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	68ba      	ldr	r2, [r7, #8]
 8007a98:	601a      	str	r2, [r3, #0]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	605a      	str	r2, [r3, #4]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	683a      	ldr	r2, [r7, #0]
 8007aa4:	609a      	str	r2, [r3, #8]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	69ba      	ldr	r2, [r7, #24]
 8007aaa:	60da      	str	r2, [r3, #12]
  }
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3714      	adds	r7, #20
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr

08007aba <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b082      	sub	sp, #8
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 fa20 	bl	8007f08 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi9EE3runERS9_>
  }
 8007ac8:	bf00      	nop
 8007aca:	3708      	adds	r7, #8
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b086      	sub	sp, #24
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	68b9      	ldr	r1, [r7, #8]
 8007ae4:	6978      	ldr	r0, [r7, #20]
 8007ae6:	f000 fa3a 	bl	8007f5e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>
}
 8007aea:	bf00      	nop
 8007aec:	3718      	adds	r7, #24
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
	...

08007af4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b086      	sub	sp, #24
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	4618      	mov	r0, r3
 8007b04:	f7fd fb5b 	bl	80051be <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007b08:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f7fd fb4b 	bl	80051a8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007b12:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7fd fb51 	bl	80051be <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d107      	bne.n	8007b34 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	4618      	mov	r0, r3
 8007b28:	f7fd fb3e 	bl	80051a8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d001      	beq.n	8007b38 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x44>
 8007b34:	2301      	movs	r3, #1
 8007b36:	e000      	b.n	8007b3a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x46>
 8007b38:	2300      	movs	r3, #0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d005      	beq.n	8007b4a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x56>
    dst.resize(dstRows, dstCols);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	693a      	ldr	r2, [r7, #16]
 8007b42:	6979      	ldr	r1, [r7, #20]
 8007b44:	4618      	mov	r0, r3
 8007b46:	f000 fa45 	bl	8007fd4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f7fd fb36 	bl	80051be <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007b52:	4602      	mov	r2, r0
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d107      	bne.n	8007b6a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x76>
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f7fd fb23 	bl	80051a8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007b62:	4602      	mov	r2, r0
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d006      	beq.n	8007b78 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x84>
 8007b6a:	4b05      	ldr	r3, [pc, #20]	; (8007b80 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8007b6c:	4a05      	ldr	r2, [pc, #20]	; (8007b84 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8007b6e:	f240 21fd 	movw	r1, #765	; 0x2fd
 8007b72:	4805      	ldr	r0, [pc, #20]	; (8007b88 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x94>)
 8007b74:	f016 f996 	bl	801dea4 <__assert_func>
}
 8007b78:	bf00      	nop
 8007b7a:	3718      	adds	r7, #24
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}
 8007b80:	08022384 	.word	0x08022384
 8007b84:	080224f4 	.word	0x080224f4
 8007b88:	08022498 	.word	0x08022498

08007b8c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4618      	mov	r0, r3
 8007b98:	370c      	adds	r7, #12
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr

08007ba2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8007ba2:	b480      	push	{r7}
 8007ba4:	b085      	sub	sp, #20
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	60f8      	str	r0, [r7, #12]
 8007baa:	60b9      	str	r1, [r7, #8]
 8007bac:	607a      	str	r2, [r7, #4]
 8007bae:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	68ba      	ldr	r2, [r7, #8]
 8007bb4:	601a      	str	r2, [r3, #0]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	605a      	str	r2, [r3, #4]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	683a      	ldr	r2, [r7, #0]
 8007bc0:	609a      	str	r2, [r3, #8]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	69ba      	ldr	r2, [r7, #24]
 8007bc6:	60da      	str	r2, [r3, #12]
  }
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3714      	adds	r7, #20
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr

08007bd6 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b082      	sub	sp, #8
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 fa2a 	bl	8008038 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi3EE3runERS9_>
  }
 8007be4:	bf00      	nop
 8007be6:	3708      	adds	r7, #8
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EELb0EE3runERSD_RKSE_>:
    static void run(const Derived&, const OtherDerived&)
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
    }
 8007bf6:	bf00      	nop
 8007bf8:	370c      	adds	r7, #12
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr

08007c02 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1ERKSE_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b082      	sub	sp, #8
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
 8007c0a:	6039      	str	r1, [r7, #0]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6839      	ldr	r1, [r7, #0]
 8007c10:	4618      	mov	r0, r3
 8007c12:	f000 fa20 	bl	8008056 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffEC1ERKSE_>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3708      	adds	r7, #8
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	370c      	adds	r7, #12
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr

08007c36 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>:
 8007c36:	b480      	push	{r7}
 8007c38:	b083      	sub	sp, #12
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4618      	mov	r0, r3
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b082      	sub	sp, #8
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7fd ffc6 	bl	8005be8 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 8007c5c:	4603      	mov	r3, r0
    }
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3708      	adds	r7, #8
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b082      	sub	sp, #8
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	4618      	mov	r0, r3
 8007c72:	f7fd ffc6 	bl	8005c02 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4colsEv>
 8007c76:	4603      	mov	r3, r0
    }
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3708      	adds	r7, #8
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b086      	sub	sp, #24
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8007c8c:	68b8      	ldr	r0, [r7, #8]
 8007c8e:	f7ff ffdd 	bl	8007c4c <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E4rowsEv>
 8007c92:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8007c94:	68b8      	ldr	r0, [r7, #8]
 8007c96:	f7ff ffe6 	bl	8007c66 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E4colsEv>
 8007c9a:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f7fd f9e7 	bl	8005072 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d107      	bne.n	8007cbc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f7fd f9d4 	bl	800505c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d001      	beq.n	8007cc0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e000      	b.n	8007cc2 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d005      	beq.n	8007cd2 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	693a      	ldr	r2, [r7, #16]
 8007cca:	6979      	ldr	r1, [r7, #20]
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f000 f8e9 	bl	8007ea4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f7fd f9cc 	bl	8005072 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d107      	bne.n	8007cf2 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f7fd f9b9 	bl	800505c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007cea:	4602      	mov	r2, r0
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d006      	beq.n	8007d00 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8007cf2:	4b05      	ldr	r3, [pc, #20]	; (8007d08 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8007cf4:	4a05      	ldr	r2, [pc, #20]	; (8007d0c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8007cf6:	f240 21fd 	movw	r1, #765	; 0x2fd
 8007cfa:	4805      	ldr	r0, [pc, #20]	; (8007d10 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8007cfc:	f016 f8d2 	bl	801dea4 <__assert_func>
}
 8007d00:	bf00      	nop
 8007d02:	3718      	adds	r7, #24
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	08022384 	.word	0x08022384
 8007d0c:	080225d8 	.word	0x080225d8
 8007d10:	08022498 	.word	0x08022498

08007d14 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8007d14:	b480      	push	{r7}
 8007d16:	b085      	sub	sp, #20
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	60f8      	str	r0, [r7, #12]
 8007d1c:	60b9      	str	r1, [r7, #8]
 8007d1e:	607a      	str	r2, [r7, #4]
 8007d20:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	68ba      	ldr	r2, [r7, #8]
 8007d26:	601a      	str	r2, [r3, #0]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	605a      	str	r2, [r3, #4]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	683a      	ldr	r2, [r7, #0]
 8007d32:	609a      	str	r2, [r3, #8]
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	69ba      	ldr	r2, [r7, #24]
 8007d38:	60da      	str	r2, [r3, #12]
  }
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3714      	adds	r7, #20
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 f992 	bl	800807a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSL_>
  }
 8007d56:	bf00      	nop
 8007d58:	3708      	adds	r7, #8
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}

08007d5e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8007d5e:	b580      	push	{r7, lr}
 8007d60:	b086      	sub	sp, #24
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	60f8      	str	r0, [r7, #12]
 8007d66:	60b9      	str	r1, [r7, #8]
 8007d68:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	68b9      	ldr	r1, [r7, #8]
 8007d72:	6978      	ldr	r0, [r7, #20]
 8007d74:	f000 f9ac 	bl	80080d0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_>
}
 8007d78:	bf00      	nop
 8007d7a:	3718      	adds	r7, #24
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b086      	sub	sp, #24
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	60f8      	str	r0, [r7, #12]
 8007d88:	60b9      	str	r1, [r7, #8]
 8007d8a:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	68b9      	ldr	r1, [r7, #8]
 8007d94:	6978      	ldr	r0, [r7, #20]
 8007d96:	f000 f9d5 	bl	8008144 <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_9assign_opIffEENS0_13add_assign_opIffEEE3runINS5_INS0_13scalar_sum_opIffEEKS3_KSE_EESG_EEvRS3_RKT_RKT0_>
}
 8007d9a:	bf00      	nop
 8007d9c:	3718      	adds	r7, #24
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}

08007da2 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8007da2:	b580      	push	{r7, lr}
 8007da4:	b086      	sub	sp, #24
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	60f8      	str	r0, [r7, #12]
 8007daa:	60b9      	str	r1, [r7, #8]
 8007dac:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	68b9      	ldr	r1, [r7, #8]
 8007db6:	6978      	ldr	r0, [r7, #20]
 8007db8:	f000 fa09 	bl	80081ce <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 8007dbc:	bf00      	nop
 8007dbe:	3718      	adds	r7, #24
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE4rowsEv>:
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f000 fa37 	bl	8008242 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3708      	adds	r7, #8
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}

08007dde <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b082      	sub	sp, #8
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	3310      	adds	r3, #16
 8007dea:	4618      	mov	r0, r3
 8007dec:	f000 fa37 	bl	800825e <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007df0:	4603      	mov	r3, r0
 8007df2:	4618      	mov	r0, r3
 8007df4:	3708      	adds	r7, #8
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>:
struct Assignment<DstXprType, Product<Lhs,Rhs,Options>, internal::assign_op<Scalar,Scalar>, Dense2Dense,
  typename enable_if<(Options==DefaultProduct || Options==AliasFreeProduct)>::type>
{
  typedef Product<Lhs,Rhs,Options> SrcXprType;
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 8007dfa:	b590      	push	{r4, r7, lr}
 8007dfc:	b087      	sub	sp, #28
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	60f8      	str	r0, [r7, #12]
 8007e02:	60b9      	str	r1, [r7, #8]
 8007e04:	607a      	str	r2, [r7, #4]
  {
    Index dstRows = src.rows();
 8007e06:	68b8      	ldr	r0, [r7, #8]
 8007e08:	f7ff ffdc 	bl	8007dc4 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE4rowsEv>
 8007e0c:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 8007e0e:	68b8      	ldr	r0, [r7, #8]
 8007e10:	f7ff ffe5 	bl	8007dde <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE4colsEv>
 8007e14:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f7fd f92a 	bl	8005072 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d107      	bne.n	8007e36 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x3c>
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f7fd f917 	bl	800505c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d001      	beq.n	8007e3a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x40>
 8007e36:	2301      	movs	r3, #1
 8007e38:	e000      	b.n	8007e3c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x42>
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d005      	beq.n	8007e4c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x52>
      dst.resize(dstRows, dstCols);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	693a      	ldr	r2, [r7, #16]
 8007e44:	6979      	ldr	r1, [r7, #20]
 8007e46:	4618      	mov	r0, r3
 8007e48:	f000 f82c 	bl	8007ea4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
    // FIXME shall we handle nested_eval here?
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 8007e4c:	68b8      	ldr	r0, [r7, #8]
 8007e4e:	f000 fa14 	bl	800827a <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE3lhsEv>
 8007e52:	4604      	mov	r4, r0
 8007e54:	68b8      	ldr	r0, [r7, #8]
 8007e56:	f000 fa1b 	bl	8008290 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE3rhsEv>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	4621      	mov	r1, r4
 8007e60:	68f8      	ldr	r0, [r7, #12]
 8007e62:	f000 fa21 	bl	80082a8 <_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EENS_10DenseShapeESG_Li3EE6evalToINS5_IfLi3ELi3ELi0ELi3ELi3EEEEEvRT_RKSD_RKSF_>
  }
 8007e66:	bf00      	nop
 8007e68:	371c      	adds	r7, #28
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd90      	pop	{r4, r7, pc}

08007e6e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 8007e6e:	b5b0      	push	{r4, r5, r7, lr}
 8007e70:	b082      	sub	sp, #8
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
 8007e76:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 fa50 	bl	800831e <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
 8007e7e:	687c      	ldr	r4, [r7, #4]
 8007e80:	6838      	ldr	r0, [r7, #0]
 8007e82:	f000 fa2f 	bl	80082e4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 8007e86:	4605      	mov	r5, r0
 8007e88:	6838      	ldr	r0, [r7, #0]
 8007e8a:	f000 fa38 	bl	80082fe <_ZNK5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3EE11outerStrideEv>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	461a      	mov	r2, r3
 8007e92:	4629      	mov	r1, r5
 8007e94:	4620      	mov	r0, r4
 8007e96:	f000 fa4d 	bl	8008334 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EEC1EPKfi>
  }
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3708      	adds	r7, #8
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bdb0      	pop	{r4, r5, r7, pc}

08007ea4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b086      	sub	sp, #24
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	60f8      	str	r0, [r7, #12]
 8007eac:	60b9      	str	r1, [r7, #8]
 8007eae:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	2b03      	cmp	r3, #3
 8007eb4:	d108      	bne.n	8007ec8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x24>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2b03      	cmp	r3, #3
 8007eba:	d105      	bne.n	8007ec8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x24>
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	db02      	blt.n	8007ec8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x24>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	da06      	bge.n	8007ed6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x32>
 8007ec8:	4b0c      	ldr	r3, [pc, #48]	; (8007efc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x58>)
 8007eca:	4a0d      	ldr	r2, [pc, #52]	; (8007f00 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x5c>)
 8007ecc:	f240 1111 	movw	r1, #273	; 0x111
 8007ed0:	480c      	ldr	r0, [pc, #48]	; (8007f04 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x60>)
 8007ed2:	f015 ffe7 	bl	801dea4 <__assert_func>
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	617b      	str	r3, [r7, #20]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	613b      	str	r3, [r7, #16]
  }
 8007ede:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 8007ee0:	68f8      	ldr	r0, [r7, #12]
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	fb02 f103 	mul.w	r1, r2, r3
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	68ba      	ldr	r2, [r7, #8]
 8007eee:	f000 fa33 	bl	8008358 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE6resizeEiii>
    }
 8007ef2:	bf00      	nop
 8007ef4:	3718      	adds	r7, #24
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	0802279c 	.word	0x0802279c
 8007f00:	0802292c 	.word	0x0802292c
 8007f04:	080229b8 	.word	0x080229b8

08007f08 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8007f10:	2100      	movs	r1, #0
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 fa2d 	bl	8008372 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 fa48 	bl	80083ae <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi9EE3runERS9_>
  }
 8007f1e:	bf00      	nop
 8007f20:	3708      	adds	r7, #8
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b082      	sub	sp, #8
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7fd f89d 	bl	8005072 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3708      	adds	r7, #8
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}

08007f42 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8007f42:	b580      	push	{r7, lr}
 8007f44:	b082      	sub	sp, #8
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7fd f92a 	bl	80051a8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007f54:	4603      	mov	r3, r0
 8007f56:	4618      	mov	r0, r3
 8007f58:	3708      	adds	r7, #8
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 8007f5e:	b590      	push	{r4, r7, lr}
 8007f60:	b087      	sub	sp, #28
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	60f8      	str	r0, [r7, #12]
 8007f66:	60b9      	str	r1, [r7, #8]
 8007f68:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 8007f6a:	68b8      	ldr	r0, [r7, #8]
 8007f6c:	f7ff ffdb 	bl	8007f26 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>
 8007f70:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 8007f72:	68b8      	ldr	r0, [r7, #8]
 8007f74:	f7ff ffe5 	bl	8007f42 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>
 8007f78:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f7fd f91e 	bl	80051be <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007f82:	4602      	mov	r2, r0
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d107      	bne.n	8007f9a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_+0x3c>
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f7fd f90b 	bl	80051a8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007f92:	4602      	mov	r2, r0
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d001      	beq.n	8007f9e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_+0x40>
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e000      	b.n	8007fa0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_+0x42>
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d005      	beq.n	8007fb0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_+0x52>
      dst.resize(dstRows, dstCols);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	693a      	ldr	r2, [r7, #16]
 8007fa8:	6979      	ldr	r1, [r7, #20]
 8007faa:	4618      	mov	r0, r3
 8007fac:	f000 f812 	bl	8007fd4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 8007fb0:	68b8      	ldr	r0, [r7, #8]
 8007fb2:	f000 fa0b 	bl	80083cc <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3lhsEv>
 8007fb6:	4604      	mov	r4, r0
 8007fb8:	68b8      	ldr	r0, [r7, #8]
 8007fba:	f000 fa13 	bl	80083e4 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3rhsEv>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	4621      	mov	r1, r4
 8007fc4:	68f8      	ldr	r0, [r7, #12]
 8007fc6:	f000 fa19 	bl	80083fc <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEENS_10DenseShapeES5_Li3EE6evalToIS4_EEvRT_RKS3_RKS4_>
  }
 8007fca:	bf00      	nop
 8007fcc:	371c      	adds	r7, #28
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd90      	pop	{r4, r7, pc}
	...

08007fd4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b086      	sub	sp, #24
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	60b9      	str	r1, [r7, #8]
 8007fde:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	2b03      	cmp	r3, #3
 8007fe4:	d108      	bne.n	8007ff8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x24>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d105      	bne.n	8007ff8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x24>
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	db02      	blt.n	8007ff8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x24>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	da06      	bge.n	8008006 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x32>
 8007ff8:	4b0c      	ldr	r3, [pc, #48]	; (800802c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x58>)
 8007ffa:	4a0d      	ldr	r2, [pc, #52]	; (8008030 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x5c>)
 8007ffc:	f240 1111 	movw	r1, #273	; 0x111
 8008000:	480c      	ldr	r0, [pc, #48]	; (8008034 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x60>)
 8008002:	f015 ff4f 	bl	801dea4 <__assert_func>
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	617b      	str	r3, [r7, #20]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	613b      	str	r3, [r7, #16]
  }
 800800e:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 8008010:	68f8      	ldr	r0, [r7, #12]
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	fb02 f103 	mul.w	r1, r2, r3
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	68ba      	ldr	r2, [r7, #8]
 800801e:	f000 fa0b 	bl	8008438 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE6resizeEiii>
    }
 8008022:	bf00      	nop
 8008024:	3718      	adds	r7, #24
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	0802279c 	.word	0x0802279c
 8008030:	08022a14 	.word	0x08022a14
 8008034:	080229b8 	.word	0x080229b8

08008038 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi3EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8008040:	2100      	movs	r1, #0
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 fa05 	bl	8008452 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 fa20 	bl	800848e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi3EE3runERS9_>
  }
 800804e:	bf00      	nop
 8008050:	3708      	adds	r7, #8
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffEC1ERKSE_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8008056:	b580      	push	{r7, lr}
 8008058:	b082      	sub	sp, #8
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
 800805e:	6039      	str	r1, [r7, #0]
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 fa23 	bl	80084ac <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6839      	ldr	r1, [r7, #0]
 800806a:	4618      	mov	r0, r3
 800806c:	f000 fa29 	bl	80084c2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4DataC1ERKSE_>
  }
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4618      	mov	r0, r3
 8008074:	3708      	adds	r7, #8
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800807a:	b580      	push	{r7, lr}
 800807c:	b082      	sub	sp, #8
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8008082:	2200      	movs	r2, #0
 8008084:	2100      	movs	r1, #0
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 fa43 	bl	8008512 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 fa59 	bl	8008544 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSL_>
  }
 8008092:	bf00      	nop
 8008094:	3708      	adds	r7, #8
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800809a:	b580      	push	{r7, lr}
 800809c:	b082      	sub	sp, #8
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	4618      	mov	r0, r3
 80080a6:	f000 fa5d 	bl	8008564 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4rowsEv>
 80080aa:	4603      	mov	r3, r0
 80080ac:	4618      	mov	r0, r3
 80080ae:	3708      	adds	r7, #8
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	3308      	adds	r3, #8
 80080c0:	4618      	mov	r0, r3
 80080c2:	f000 fa5d 	bl	8008580 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>
 80080c6:	4603      	mov	r3, r0
 80080c8:	4618      	mov	r0, r3
 80080ca:	3708      	adds	r7, #8
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 80080d0:	b590      	push	{r4, r7, lr}
 80080d2:	b087      	sub	sp, #28
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 80080dc:	68b8      	ldr	r0, [r7, #8]
 80080de:	f7ff ffdc 	bl	800809a <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE4rowsEv>
 80080e2:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 80080e4:	68b8      	ldr	r0, [r7, #8]
 80080e6:	f7ff ffe5 	bl	80080b4 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE4colsEv>
 80080ea:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7fd f865 	bl	80051be <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80080f4:	4602      	mov	r2, r0
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d107      	bne.n	800810c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_+0x3c>
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	4618      	mov	r0, r3
 8008100:	f7fd f852 	bl	80051a8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8008104:	4602      	mov	r2, r0
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	4293      	cmp	r3, r2
 800810a:	d001      	beq.n	8008110 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_+0x40>
 800810c:	2301      	movs	r3, #1
 800810e:	e000      	b.n	8008112 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_+0x42>
 8008110:	2300      	movs	r3, #0
 8008112:	2b00      	cmp	r3, #0
 8008114:	d005      	beq.n	8008122 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_+0x52>
      dst.resize(dstRows, dstCols);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	693a      	ldr	r2, [r7, #16]
 800811a:	6979      	ldr	r1, [r7, #20]
 800811c:	4618      	mov	r0, r3
 800811e:	f7ff ff59 	bl	8007fd4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 8008122:	68b8      	ldr	r0, [r7, #8]
 8008124:	f000 fa39 	bl	800859a <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE3lhsEv>
 8008128:	4604      	mov	r4, r0
 800812a:	68b8      	ldr	r0, [r7, #8]
 800812c:	f000 fa40 	bl	80085b0 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE3rhsEv>
 8008130:	4603      	mov	r3, r0
 8008132:	461a      	mov	r2, r3
 8008134:	4621      	mov	r1, r4
 8008136:	68f8      	ldr	r0, [r7, #12]
 8008138:	f000 fa46 	bl	80085c8 <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEENS_10DenseShapeESK_Li3EE6evalToINS3_IfLi3ELi1ELi0ELi3ELi1EEEEEvRT_RKS8_RKSJ_>
  }
 800813c:	bf00      	nop
 800813e:	371c      	adds	r7, #28
 8008140:	46bd      	mov	sp, r7
 8008142:	bd90      	pop	{r4, r7, pc}

08008144 <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_9assign_opIffEENS0_13add_assign_opIffEEE3runINS5_INS0_13scalar_sum_opIffEEKS3_KSE_EESG_EEvRS3_RKT_RKT0_>:
template<typename DstXprType, typename OtherXpr, typename ProductType, typename Func1, typename Func2>
struct assignment_from_xpr_op_product
{
  template<typename SrcXprType, typename InitialFunc>
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  void run(DstXprType &dst, const SrcXprType &src, const InitialFunc& /*func*/)
 8008144:	b590      	push	{r4, r7, lr}
 8008146:	b087      	sub	sp, #28
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	607a      	str	r2, [r7, #4]
  {
    call_assignment_no_alias(dst, src.lhs(), Func1());
 8008150:	68b8      	ldr	r0, [r7, #8]
 8008152:	f000 fa57 	bl	8008604 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEE3lhsEv>
 8008156:	4604      	mov	r4, r0
 8008158:	f107 0310 	add.w	r3, r7, #16
 800815c:	4618      	mov	r0, r3
 800815e:	f7fe ffb8 	bl	80070d2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8008162:	f107 0310 	add.w	r3, r7, #16
 8008166:	461a      	mov	r2, r3
 8008168:	4621      	mov	r1, r4
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	f7ff f8be 	bl	80072ec <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
    call_assignment_no_alias(dst, src.rhs(), Func2());
 8008170:	68b8      	ldr	r0, [r7, #8]
 8008172:	f000 fa53 	bl	800861c <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEE3rhsEv>
 8008176:	4604      	mov	r4, r0
 8008178:	f107 0314 	add.w	r3, r7, #20
 800817c:	4618      	mov	r0, r3
 800817e:	f000 fa59 	bl	8008634 <_ZN5Eigen8internal13add_assign_opIffEC1Ev>
 8008182:	f107 0314 	add.w	r3, r7, #20
 8008186:	461a      	mov	r2, r3
 8008188:	4621      	mov	r1, r4
 800818a:	68f8      	ldr	r0, [r7, #12]
 800818c:	f000 fa5d 	bl	800864a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008190:	bf00      	nop
 8008192:	371c      	adds	r7, #28
 8008194:	46bd      	mov	sp, r7
 8008196:	bd90      	pop	{r4, r7, pc}

08008198 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4618      	mov	r0, r3
 80081a4:	f000 fa62 	bl	800866c <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4rowsEv>
 80081a8:	4603      	mov	r3, r0
 80081aa:	4618      	mov	r0, r3
 80081ac:	3708      	adds	r7, #8
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b082      	sub	sp, #8
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	691b      	ldr	r3, [r3, #16]
 80081be:	4618      	mov	r0, r3
 80081c0:	f7fc ff4c 	bl	800505c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80081c4:	4603      	mov	r3, r0
 80081c6:	4618      	mov	r0, r3
 80081c8:	3708      	adds	r7, #8
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}

080081ce <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 80081ce:	b590      	push	{r4, r7, lr}
 80081d0:	b087      	sub	sp, #28
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	60f8      	str	r0, [r7, #12]
 80081d6:	60b9      	str	r1, [r7, #8]
 80081d8:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 80081da:	68b8      	ldr	r0, [r7, #8]
 80081dc:	f7ff ffdc 	bl	8008198 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE4rowsEv>
 80081e0:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 80081e2:	68b8      	ldr	r0, [r7, #8]
 80081e4:	f7ff ffe5 	bl	80081b2 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE4colsEv>
 80081e8:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	4618      	mov	r0, r3
 80081ee:	f7fc ff40 	bl	8005072 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80081f2:	4602      	mov	r2, r0
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d107      	bne.n	800820a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x3c>
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	4618      	mov	r0, r3
 80081fe:	f7fc ff2d 	bl	800505c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8008202:	4602      	mov	r2, r0
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	4293      	cmp	r3, r2
 8008208:	d001      	beq.n	800820e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x40>
 800820a:	2301      	movs	r3, #1
 800820c:	e000      	b.n	8008210 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x42>
 800820e:	2300      	movs	r3, #0
 8008210:	2b00      	cmp	r3, #0
 8008212:	d005      	beq.n	8008220 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x52>
      dst.resize(dstRows, dstCols);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	693a      	ldr	r2, [r7, #16]
 8008218:	6979      	ldr	r1, [r7, #20]
 800821a:	4618      	mov	r0, r3
 800821c:	f7ff fe42 	bl	8007ea4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 8008220:	68b8      	ldr	r0, [r7, #8]
 8008222:	f000 fa31 	bl	8008688 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE3lhsEv>
 8008226:	4604      	mov	r4, r0
 8008228:	68b8      	ldr	r0, [r7, #8]
 800822a:	f000 fa38 	bl	800869e <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE3rhsEv>
 800822e:	4603      	mov	r3, r0
 8008230:	461a      	mov	r2, r3
 8008232:	4621      	mov	r1, r4
 8008234:	68f8      	ldr	r0, [r7, #12]
 8008236:	f000 fa3e 	bl	80086b6 <_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_NS_10DenseShapeESE_Li3EE6evalToIS6_EEvRT_RKSD_RS7_>
  }
 800823a:	bf00      	nop
 800823c:	371c      	adds	r7, #28
 800823e:	46bd      	mov	sp, r7
 8008240:	bd90      	pop	{r4, r7, pc}

08008242 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8008242:	b580      	push	{r7, lr}
 8008244:	b082      	sub	sp, #8
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4618      	mov	r0, r3
 8008250:	f7fc ffb5 	bl	80051be <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8008254:	4603      	mov	r3, r0
    }
 8008256:	4618      	mov	r0, r3
 8008258:	3708      	adds	r7, #8
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 800825e:	b580      	push	{r7, lr}
 8008260:	b082      	sub	sp, #8
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4618      	mov	r0, r3
 800826c:	f7fc ffa7 	bl	80051be <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8008270:	4603      	mov	r3, r0
 8008272:	4618      	mov	r0, r3
 8008274:	3708      	adds	r7, #8
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}

0800827a <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800827a:	b480      	push	{r7}
 800827c:	b083      	sub	sp, #12
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4618      	mov	r0, r3
 8008286:	370c      	adds	r7, #12
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8008290:	b480      	push	{r7}
 8008292:	b083      	sub	sp, #12
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	3310      	adds	r3, #16
 800829c:	4618      	mov	r0, r3
 800829e:	370c      	adds	r7, #12
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr

080082a8 <_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EENS_10DenseShapeESG_Li3EE6evalToINS5_IfLi3ELi3ELi0ELi3ELi3EEEEEvRT_RKSD_RKSF_>:
struct generic_product_impl<Lhs,Rhs,DenseShape,DenseShape,CoeffBasedProductMode>
{
  typedef typename Product<Lhs,Rhs>::Scalar Scalar;

  template<typename Dst>
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b08a      	sub	sp, #40	; 0x28
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	607a      	str	r2, [r7, #4]
  {
    // Same as: dst.noalias() = lhs.lazyProduct(rhs);
    // but easier on the compiler side
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 80082b4:	f107 0310 	add.w	r3, r7, #16
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	68b9      	ldr	r1, [r7, #8]
 80082bc:	4618      	mov	r0, r3
 80082be:	f000 fa18 	bl	80086f2 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE11lazyProductINS_9TransposeIS6_EEEEKNS_7ProductISD_T_Li1EEERKNS0_ISJ_EE>
 80082c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082c6:	4618      	mov	r0, r3
 80082c8:	f7fe ff03 	bl	80070d2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 80082cc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80082d0:	f107 0310 	add.w	r3, r7, #16
 80082d4:	4619      	mov	r1, r3
 80082d6:	68f8      	ldr	r0, [r7, #12]
 80082d8:	f000 fa22 	bl	8008720 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 80082dc:	bf00      	nop
 80082de:	3728      	adds	r7, #40	; 0x28
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	4618      	mov	r0, r3
 80082f0:	f000 fa27 	bl	8008742 <_ZNK5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4dataEv>
 80082f4:	4603      	mov	r3, r0
 80082f6:	4618      	mov	r0, r3
 80082f8:	3708      	adds	r7, #8
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}

080082fe <_ZNK5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3EE11outerStrideEv>:
      *          in a column-major matrix).
      *
      * \sa innerStride(), rowStride(), colStride()
      */
    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index outerStride() const EIGEN_NOEXCEPT
 80082fe:	b580      	push	{r7, lr}
 8008300:	b082      	sub	sp, #8
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
    {
      return derived().outerStride();
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f7fd fabd 	bl	8005886 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800830c:	4603      	mov	r3, r0
 800830e:	4618      	mov	r0, r3
 8008310:	f000 fa22 	bl	8008758 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 8008314:	4603      	mov	r3, r0
    }
 8008316:	4618      	mov	r0, r3
 8008318:	3708      	adds	r7, #8
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}

0800831e <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800831e:	b480      	push	{r7}
 8008320:	b083      	sub	sp, #12
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	4618      	mov	r0, r3
 800832a:	370c      	adds	r7, #12
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr

08008334 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EEC1EPKfi>:
  plainobjectbase_evaluator_data(const Scalar* ptr, Index outerStride) : data(ptr)
 8008334:	b580      	push	{r7, lr}
 8008336:	b084      	sub	sp, #16
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	607a      	str	r2, [r7, #4]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	68ba      	ldr	r2, [r7, #8]
 8008344:	601a      	str	r2, [r3, #0]
    EIGEN_UNUSED_VARIABLE(outerStride);
 8008346:	1d3b      	adds	r3, r7, #4
 8008348:	4618      	mov	r0, r3
 800834a:	f7fb ffbc 	bl	80042c6 <_ZN5Eigen8internal22ignore_unused_variableIiEEvRKT_>
  }
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	4618      	mov	r0, r3
 8008352:	3710      	adds	r7, #16
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE6resizeEiii>:
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
 8008358:	b480      	push	{r7}
 800835a:	b085      	sub	sp, #20
 800835c:	af00      	add	r7, sp, #0
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	60b9      	str	r1, [r7, #8]
 8008362:	607a      	str	r2, [r7, #4]
 8008364:	603b      	str	r3, [r7, #0]
 8008366:	bf00      	nop
 8008368:	3714      	adds	r7, #20
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr

08008372 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8008372:	b5b0      	push	{r4, r5, r7, lr}
 8008374:	b082      	sub	sp, #8
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
 800837a:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	689c      	ldr	r4, [r3, #8]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	6839      	ldr	r1, [r7, #0]
 8008386:	4618      	mov	r0, r3
 8008388:	f000 f9f2 	bl	8008770 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEi>
 800838c:	4605      	mov	r5, r0
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	6839      	ldr	r1, [r7, #0]
 8008394:	4618      	mov	r0, r3
 8008396:	f000 f9fb 	bl	8008790 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE5coeffEi>
 800839a:	4603      	mov	r3, r0
 800839c:	461a      	mov	r2, r3
 800839e:	4629      	mov	r1, r5
 80083a0:	4620      	mov	r0, r4
 80083a2:	f000 fa05 	bl	80087b0 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 80083a6:	bf00      	nop
 80083a8:	3708      	adds	r7, #8
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bdb0      	pop	{r4, r5, r7, pc}

080083ae <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80083ae:	b580      	push	{r7, lr}
 80083b0:	b082      	sub	sp, #8
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80083b6:	2101      	movs	r1, #1
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f7ff ffda 	bl	8008372 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 fa06 	bl	80087d0 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi2ELi9EE3runERS9_>
  }
 80083c4:	bf00      	nop
 80083c6:	3708      	adds	r7, #8
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 80083cc:	b480      	push	{r7}
 80083ce:	b083      	sub	sp, #12
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4618      	mov	r0, r3
 80083da:	370c      	adds	r7, #12
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	4618      	mov	r0, r3
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEENS_10DenseShapeES5_Li3EE6evalToIS4_EEvRT_RKS3_RKS4_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b088      	sub	sp, #32
 8008400:	af00      	add	r7, sp, #0
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 8008408:	f107 0314 	add.w	r3, r7, #20
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	68b9      	ldr	r1, [r7, #8]
 8008410:	4618      	mov	r0, r3
 8008412:	f000 f9ec 	bl	80087ee <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>
 8008416:	f107 031c 	add.w	r3, r7, #28
 800841a:	4618      	mov	r0, r3
 800841c:	f7fe fe59 	bl	80070d2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8008420:	f107 021c 	add.w	r2, r7, #28
 8008424:	f107 0314 	add.w	r3, r7, #20
 8008428:	4619      	mov	r1, r3
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	f000 f9f6 	bl	800881c <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008430:	bf00      	nop
 8008432:	3720      	adds	r7, #32
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE6resizeEiii>:
 8008438:	b480      	push	{r7}
 800843a:	b085      	sub	sp, #20
 800843c:	af00      	add	r7, sp, #0
 800843e:	60f8      	str	r0, [r7, #12]
 8008440:	60b9      	str	r1, [r7, #8]
 8008442:	607a      	str	r2, [r7, #4]
 8008444:	603b      	str	r3, [r7, #0]
 8008446:	bf00      	nop
 8008448:	3714      	adds	r7, #20
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr

08008452 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8008452:	b5b0      	push	{r4, r5, r7, lr}
 8008454:	b082      	sub	sp, #8
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
 800845a:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	689c      	ldr	r4, [r3, #8]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	6839      	ldr	r1, [r7, #0]
 8008466:	4618      	mov	r0, r3
 8008468:	f000 f9e9 	bl	800883e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 800846c:	4605      	mov	r5, r0
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	6839      	ldr	r1, [r7, #0]
 8008474:	4618      	mov	r0, r3
 8008476:	f000 f9f2 	bl	800885e <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEi>
 800847a:	4603      	mov	r3, r0
 800847c:	461a      	mov	r2, r3
 800847e:	4629      	mov	r1, r5
 8008480:	4620      	mov	r0, r4
 8008482:	f000 f995 	bl	80087b0 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8008486:	bf00      	nop
 8008488:	3708      	adds	r7, #8
 800848a:	46bd      	mov	sp, r7
 800848c:	bdb0      	pop	{r4, r5, r7, pc}

0800848e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi3EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800848e:	b580      	push	{r7, lr}
 8008490:	b082      	sub	sp, #8
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8008496:	2101      	movs	r1, #1
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f7ff ffda 	bl	8008452 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 f9ed 	bl	800887e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi2ELi3EE3runERS9_>
  }
 80084a4:	bf00      	nop
 80084a6:	3708      	adds	r7, #8
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}

080084ac <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80084ac:	b480      	push	{r7}
 80084ae:	b083      	sub	sp, #12
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	4618      	mov	r0, r3
 80084b8:	370c      	adds	r7, #12
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr

080084c2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4DataC1ERKSE_>:
  {
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 80084c2:	b590      	push	{r4, r7, lr}
 80084c4:	b083      	sub	sp, #12
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	6078      	str	r0, [r7, #4]
 80084ca:	6039      	str	r1, [r7, #0]
 80084cc:	687c      	ldr	r4, [r7, #4]
 80084ce:	6838      	ldr	r0, [r7, #0]
 80084d0:	f000 f9e4 	bl	800889c <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E7functorEv>
 80084d4:	4603      	mov	r3, r0
 80084d6:	4619      	mov	r1, r3
 80084d8:	4620      	mov	r0, r4
 80084da:	f7fd fbe1 	bl	8005ca0 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	1d1c      	adds	r4, r3, #4
 80084e2:	6838      	ldr	r0, [r7, #0]
 80084e4:	f000 f9e6 	bl	80088b4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E3lhsEv>
 80084e8:	4603      	mov	r3, r0
 80084ea:	4619      	mov	r1, r3
 80084ec:	4620      	mov	r0, r4
 80084ee:	f000 f9f8 	bl	80088e2 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEC1ERS9_>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80084f8:	6838      	ldr	r0, [r7, #0]
 80084fa:	f000 f9e6 	bl	80088ca <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E3rhsEv>
 80084fe:	4603      	mov	r3, r0
 8008500:	4619      	mov	r1, r3
 8008502:	4620      	mov	r0, r4
 8008504:	f000 f9fc 	bl	8008900 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS4_>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	4618      	mov	r0, r3
 800850c:	370c      	adds	r7, #12
 800850e:	46bd      	mov	sp, r7
 8008510:	bd90      	pop	{r4, r7, pc}

08008512 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 8008512:	b580      	push	{r7, lr}
 8008514:	b086      	sub	sp, #24
 8008516:	af00      	add	r7, sp, #0
 8008518:	60f8      	str	r0, [r7, #12]
 800851a:	60b9      	str	r1, [r7, #8]
 800851c:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 800851e:	6879      	ldr	r1, [r7, #4]
 8008520:	68b8      	ldr	r0, [r7, #8]
 8008522:	f000 f9fc 	bl	800891e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 8008526:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 8008528:	6879      	ldr	r1, [r7, #4]
 800852a:	68b8      	ldr	r0, [r7, #8]
 800852c:	f000 fa03 	bl	8008936 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 8008530:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 8008532:	693a      	ldr	r2, [r7, #16]
 8008534:	6979      	ldr	r1, [r7, #20]
 8008536:	68f8      	ldr	r0, [r7, #12]
 8008538:	f000 fa09 	bl	800894e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 800853c:	bf00      	nop
 800853e:	3718      	adds	r7, #24
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800854c:	2201      	movs	r2, #1
 800854e:	2100      	movs	r1, #0
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f7ff ffde 	bl	8008512 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f000 fa1f 	bl	800899a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSL_>
  }
 800855c:	bf00      	nop
 800855e:	3708      	adds	r7, #8
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4618      	mov	r0, r3
 8008572:	f7fc fd7e 	bl	8005072 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8008576:	4603      	mov	r3, r0
 8008578:	4618      	mov	r0, r3
 800857a:	3708      	adds	r7, #8
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>:
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR  Index cols() const EIGEN_NOEXCEPT { return m_xpr.rows(); }
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	4618      	mov	r0, r3
 800858c:	f7fd fdc3 	bl	8006116 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8008590:	4603      	mov	r3, r0
 8008592:	4618      	mov	r0, r3
 8008594:	3708      	adds	r7, #8
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}

0800859a <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800859a:	b480      	push	{r7}
 800859c:	b083      	sub	sp, #12
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4618      	mov	r0, r3
 80085a6:	370c      	adds	r7, #12
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	3308      	adds	r3, #8
 80085bc:	4618      	mov	r0, r3
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEENS_10DenseShapeESK_Li3EE6evalToINS3_IfLi3ELi1ELi0ELi3ELi1EEEEEvRT_RKS8_RKSJ_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b08c      	sub	sp, #48	; 0x30
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	60f8      	str	r0, [r7, #12]
 80085d0:	60b9      	str	r1, [r7, #8]
 80085d2:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 80085d4:	f107 0310 	add.w	r3, r7, #16
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	68b9      	ldr	r1, [r7, #8]
 80085dc:	4618      	mov	r0, r3
 80085de:	f000 f9ec 	bl	80089ba <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE11lazyProductINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEEKNS1_IS7_T_Li1EEERKNS0_ISM_EE>
 80085e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80085e6:	4618      	mov	r0, r3
 80085e8:	f7fe fd73 	bl	80070d2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 80085ec:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80085f0:	f107 0310 	add.w	r3, r7, #16
 80085f4:	4619      	mov	r1, r3
 80085f6:	68f8      	ldr	r0, [r7, #12]
 80085f8:	f000 f9f6 	bl	80089e8 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 80085fc:	bf00      	nop
 80085fe:	3730      	adds	r7, #48	; 0x30
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}

08008604 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4618      	mov	r0, r3
 8008612:	370c      	adds	r7, #12
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr

0800861c <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	3304      	adds	r3, #4
 8008628:	4618      	mov	r0, r3
 800862a:	370c      	adds	r7, #12
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr

08008634 <_ZN5Eigen8internal13add_assign_opIffEC1Ev>:
  * \brief Template functor for scalar/packet assignment with addition
  *
  */
template<typename DstScalar,typename SrcScalar> struct add_assign_op {

  EIGEN_EMPTY_STRUCT_CTOR(add_assign_op)
 8008634:	b480      	push	{r7}
 8008636:	b083      	sub	sp, #12
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	4618      	mov	r0, r3
 8008640:	370c      	adds	r7, #12
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr

0800864a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800864a:	b580      	push	{r7, lr}
 800864c:	b086      	sub	sp, #24
 800864e:	af00      	add	r7, sp, #0
 8008650:	60f8      	str	r0, [r7, #12]
 8008652:	60b9      	str	r1, [r7, #8]
 8008654:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	68b9      	ldr	r1, [r7, #8]
 800865e:	6978      	ldr	r0, [r7, #20]
 8008660:	f000 f9d4 	bl	8008a0c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 8008664:	bf00      	nop
 8008666:	3718      	adds	r7, #24
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4618      	mov	r0, r3
 800867a:	f7fc fcfa 	bl	8005072 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800867e:	4603      	mov	r3, r0
    }
 8008680:	4618      	mov	r0, r3
 8008682:	3708      	adds	r7, #8
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	4618      	mov	r0, r3
 8008694:	370c      	adds	r7, #12
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr

0800869e <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800869e:	b480      	push	{r7}
 80086a0:	b083      	sub	sp, #12
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	691b      	ldr	r3, [r3, #16]
 80086aa:	4618      	mov	r0, r3
 80086ac:	370c      	adds	r7, #12
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr

080086b6 <_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_NS_10DenseShapeESE_Li3EE6evalToIS6_EEvRT_RKSD_RS7_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 80086b6:	b580      	push	{r7, lr}
 80086b8:	b08a      	sub	sp, #40	; 0x28
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	60f8      	str	r0, [r7, #12]
 80086be:	60b9      	str	r1, [r7, #8]
 80086c0:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 80086c2:	f107 0310 	add.w	r3, r7, #16
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	68b9      	ldr	r1, [r7, #8]
 80086ca:	4618      	mov	r0, r3
 80086cc:	f000 f9d8 	bl	8008a80 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE11lazyProductIS6_EEKNS8_ISD_T_Li1EEERKNS0_ISG_EE>
 80086d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086d4:	4618      	mov	r0, r3
 80086d6:	f7fe fcfc 	bl	80070d2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 80086da:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80086de:	f107 0310 	add.w	r3, r7, #16
 80086e2:	4619      	mov	r1, r3
 80086e4:	68f8      	ldr	r0, [r7, #12]
 80086e6:	f000 f9e2 	bl	8008aae <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 80086ea:	bf00      	nop
 80086ec:	3728      	adds	r7, #40	; 0x28
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}

080086f2 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE11lazyProductINS_9TransposeIS6_EEEEKNS_7ProductISD_T_Li1EEERKNS0_ISJ_EE>:
  */
template<typename Derived>
template<typename OtherDerived>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
const Product<Derived,OtherDerived,LazyProduct>
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 80086f2:	b590      	push	{r4, r7, lr}
 80086f4:	b085      	sub	sp, #20
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	60f8      	str	r0, [r7, #12]
 80086fa:	60b9      	str	r1, [r7, #8]
 80086fc:	607a      	str	r2, [r7, #4]
    INVALID_VECTOR_VECTOR_PRODUCT__IF_YOU_WANTED_A_DOT_OR_COEFF_WISE_PRODUCT_YOU_MUST_USE_THE_EXPLICIT_FUNCTIONS)
  EIGEN_STATIC_ASSERT(ProductIsValid || !(SameSizes && !AreVectors),
    INVALID_MATRIX_PRODUCT__IF_YOU_WANTED_A_COEFF_WISE_PRODUCT_YOU_MUST_USE_THE_EXPLICIT_FUNCTION)
  EIGEN_STATIC_ASSERT(ProductIsValid || SameSizes, INVALID_MATRIX_PRODUCT)

  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 80086fe:	68b8      	ldr	r0, [r7, #8]
 8008700:	f7fd f821 	bl	8005746 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE7derivedEv>
 8008704:	4604      	mov	r4, r0
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f7fd f828 	bl	800575c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800870c:	4603      	mov	r3, r0
 800870e:	461a      	mov	r2, r3
 8008710:	4621      	mov	r1, r4
 8008712:	68f8      	ldr	r0, [r7, #12]
 8008714:	f000 fa00 	bl	8008b18 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_>
}
 8008718:	68f8      	ldr	r0, [r7, #12]
 800871a:	3714      	adds	r7, #20
 800871c:	46bd      	mov	sp, r7
 800871e:	bd90      	pop	{r4, r7, pc}

08008720 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8008720:	b580      	push	{r7, lr}
 8008722:	b086      	sub	sp, #24
 8008724:	af00      	add	r7, sp, #0
 8008726:	60f8      	str	r0, [r7, #12]
 8008728:	60b9      	str	r1, [r7, #8]
 800872a:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	68b9      	ldr	r1, [r7, #8]
 8008734:	6978      	ldr	r0, [r7, #20]
 8008736:	f000 fa1f 	bl	8008b78 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>
}
 800873a:	bf00      	nop
 800873c:	3718      	adds	r7, #24
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}

08008742 <_ZNK5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 8008742:	b480      	push	{r7}
 8008744:	b083      	sub	sp, #12
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	4618      	mov	r0, r3
 800874e:	370c      	adds	r7, #12
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr

08008758 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>:
 8008758:	b580      	push	{r7, lr}
 800875a:	b082      	sub	sp, #8
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 fa1c 	bl	8008b9e <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE9innerSizeEv>
 8008766:	4603      	mov	r3, r0
 8008768:	4618      	mov	r0, r3
 800876a:	3708      	adds	r7, #8
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEi>:
  Scalar& coeffRef(Index index)
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	6039      	str	r1, [r7, #0]
    return const_cast<Scalar*>(m_d.data)[index];
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	4413      	add	r3, r2
  }
 8008784:	4618      	mov	r0, r3
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr

08008790 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE5coeffEi>:
  CoeffReturnType coeff(Index index) const
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
    return m_d.data[index];
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	4413      	add	r3, r2
  }
 80087a4:	4618      	mov	r0, r3
 80087a6:	370c      	adds	r7, #12
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr

080087b0 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a = b; }
 80087b0:	b480      	push	{r7}
 80087b2:	b085      	sub	sp, #20
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	607a      	str	r2, [r7, #4]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681a      	ldr	r2, [r3, #0]
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	601a      	str	r2, [r3, #0]
 80087c4:	bf00      	nop
 80087c6:	3714      	adds	r7, #20
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi2ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80087d8:	2102      	movs	r1, #2
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f7ff fdc9 	bl	8008372 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 f9e8 	bl	8008bb6 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi3ELi9EE3runERS9_>
  }
 80087e6:	bf00      	nop
 80087e8:	3708      	adds	r7, #8
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}

080087ee <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 80087ee:	b590      	push	{r4, r7, lr}
 80087f0:	b085      	sub	sp, #20
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	60f8      	str	r0, [r7, #12]
 80087f6:	60b9      	str	r1, [r7, #8]
 80087f8:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 80087fa:	68b8      	ldr	r0, [r7, #8]
 80087fc:	f7fd f843 	bl	8005886 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8008800:	4604      	mov	r4, r0
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f7fc fe77 	bl	80054f6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8008808:	4603      	mov	r3, r0
 800880a:	461a      	mov	r2, r3
 800880c:	4621      	mov	r1, r4
 800880e:	68f8      	ldr	r0, [r7, #12]
 8008810:	f000 fa04 	bl	8008c1c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_>
}
 8008814:	68f8      	ldr	r0, [r7, #12]
 8008816:	3714      	adds	r7, #20
 8008818:	46bd      	mov	sp, r7
 800881a:	bd90      	pop	{r4, r7, pc}

0800881c <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800881c:	b580      	push	{r7, lr}
 800881e:	b086      	sub	sp, #24
 8008820:	af00      	add	r7, sp, #0
 8008822:	60f8      	str	r0, [r7, #12]
 8008824:	60b9      	str	r1, [r7, #8]
 8008826:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800882c:	687a      	ldr	r2, [r7, #4]
 800882e:	68b9      	ldr	r1, [r7, #8]
 8008830:	6978      	ldr	r0, [r7, #20]
 8008832:	f000 fa21 	bl	8008c78 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>
}
 8008836:	bf00      	nop
 8008838:	3718      	adds	r7, #24
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>:
  Scalar& coeffRef(Index index)
 800883e:	b480      	push	{r7}
 8008840:	b083      	sub	sp, #12
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
 8008846:	6039      	str	r1, [r7, #0]
    return const_cast<Scalar*>(m_d.data)[index];
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681a      	ldr	r2, [r3, #0]
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	4413      	add	r3, r2
  }
 8008852:	4618      	mov	r0, r3
 8008854:	370c      	adds	r7, #12
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr

0800885e <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEi>:
  CoeffReturnType coeff(Index index) const
 800885e:	b480      	push	{r7}
 8008860:	b083      	sub	sp, #12
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
 8008866:	6039      	str	r1, [r7, #0]
    return m_d.data[index];
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	4413      	add	r3, r2
  }
 8008872:	4618      	mov	r0, r3
 8008874:	370c      	adds	r7, #12
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr

0800887e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi2ELi3EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800887e:	b580      	push	{r7, lr}
 8008880:	b082      	sub	sp, #8
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8008886:	2102      	movs	r1, #2
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f7ff fde2 	bl	8008452 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 fa05 	bl	8008c9e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi3ELi3EE3runERS9_>
  }
 8008894:	bf00      	nop
 8008896:	3708      	adds	r7, #8
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800889c:	b480      	push	{r7}
 800889e:	b083      	sub	sp, #12
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	3310      	adds	r3, #16
 80088a8:	4618      	mov	r0, r3
 80088aa:	370c      	adds	r7, #12
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr

080088b4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 80088b4:	b480      	push	{r7}
 80088b6:	b083      	sub	sp, #12
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	4618      	mov	r0, r3
 80088c0:	370c      	adds	r7, #12
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr

080088ca <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 80088ca:	b480      	push	{r7}
 80088cc:	b083      	sub	sp, #12
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	6078      	str	r0, [r7, #4]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	4618      	mov	r0, r3
 80088d8:	370c      	adds	r7, #12
 80088da:	46bd      	mov	sp, r7
 80088dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e0:	4770      	bx	lr

080088e2 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEC1ERS9_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b082      	sub	sp, #8
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
 80088ea:	6039      	str	r1, [r7, #0]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6839      	ldr	r1, [r7, #0]
 80088f0:	4618      	mov	r0, r3
 80088f2:	f000 f9de 	bl	8008cb2 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEC1ERKS8_>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	4618      	mov	r0, r3
 80088fa:	3708      	adds	r7, #8
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS4_>:
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	6039      	str	r1, [r7, #0]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6839      	ldr	r1, [r7, #0]
 800890e:	4618      	mov	r0, r3
 8008910:	f7ff f846 	bl	80079a0 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	4618      	mov	r0, r3
 8008918:	3708      	adds	r7, #8
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}

0800891e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 800891e:	b480      	push	{r7}
 8008920:	b083      	sub	sp, #12
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
 8008926:	6039      	str	r1, [r7, #0]
      : inner;
 8008928:	683b      	ldr	r3, [r7, #0]
  }
 800892a:	4618      	mov	r0, r3
 800892c:	370c      	adds	r7, #12
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr

08008936 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 8008936:	b480      	push	{r7}
 8008938:	b083      	sub	sp, #12
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
 800893e:	6039      	str	r1, [r7, #0]
      : outer;
 8008940:	687b      	ldr	r3, [r7, #4]
  }
 8008942:	4618      	mov	r0, r3
 8008944:	370c      	adds	r7, #12
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr

0800894e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 800894e:	b5b0      	push	{r4, r5, r7, lr}
 8008950:	b086      	sub	sp, #24
 8008952:	af00      	add	r7, sp, #0
 8008954:	60f8      	str	r0, [r7, #12]
 8008956:	60b9      	str	r1, [r7, #8]
 8008958:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	689c      	ldr	r4, [r3, #8]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	68b9      	ldr	r1, [r7, #8]
 8008966:	4618      	mov	r0, r3
 8008968:	f000 f9b2 	bl	8008cd0 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 800896c:	4605      	mov	r5, r0
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	68b9      	ldr	r1, [r7, #8]
 8008976:	4618      	mov	r0, r3
 8008978:	f000 f9c2 	bl	8008d00 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE5coeffEii>
 800897c:	eef0 7a40 	vmov.f32	s15, s0
 8008980:	edc7 7a05 	vstr	s15, [r7, #20]
 8008984:	f107 0314 	add.w	r3, r7, #20
 8008988:	461a      	mov	r2, r3
 800898a:	4629      	mov	r1, r5
 800898c:	4620      	mov	r0, r4
 800898e:	f7ff ff0f 	bl	80087b0 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8008992:	bf00      	nop
 8008994:	3718      	adds	r7, #24
 8008996:	46bd      	mov	sp, r7
 8008998:	bdb0      	pop	{r4, r5, r7, pc}

0800899a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800899a:	b580      	push	{r7, lr}
 800899c:	b082      	sub	sp, #8
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80089a2:	2202      	movs	r2, #2
 80089a4:	2100      	movs	r1, #0
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f7ff fdb3 	bl	8008512 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 f9ce 	bl	8008d4e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSL_>
  }
 80089b2:	bf00      	nop
 80089b4:	3708      	adds	r7, #8
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE11lazyProductINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEEKNS1_IS7_T_Li1EEERKNS0_ISM_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 80089ba:	b590      	push	{r4, r7, lr}
 80089bc:	b085      	sub	sp, #20
 80089be:	af00      	add	r7, sp, #0
 80089c0:	60f8      	str	r0, [r7, #12]
 80089c2:	60b9      	str	r1, [r7, #8]
 80089c4:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 80089c6:	68b8      	ldr	r0, [r7, #8]
 80089c8:	f7fd fbe9 	bl	800619e <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE7derivedEv>
 80089cc:	4604      	mov	r4, r0
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f7fd fbf0 	bl	80061b4 <_ZNK5Eigen9EigenBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEE7derivedEv>
 80089d4:	4603      	mov	r3, r0
 80089d6:	461a      	mov	r2, r3
 80089d8:	4621      	mov	r1, r4
 80089da:	68f8      	ldr	r0, [r7, #12]
 80089dc:	f000 f9ec 	bl	8008db8 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_>
}
 80089e0:	68f8      	ldr	r0, [r7, #12]
 80089e2:	3714      	adds	r7, #20
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd90      	pop	{r4, r7, pc}

080089e8 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b086      	sub	sp, #24
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	60b9      	str	r1, [r7, #8]
 80089f2:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 80089f8:	687a      	ldr	r2, [r7, #4]
 80089fa:	68b9      	ldr	r1, [r7, #8]
 80089fc:	6978      	ldr	r0, [r7, #20]
 80089fe:	f000 fa0d 	bl	8008e1c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_>
}
 8008a02:	bf00      	nop
 8008a04:	3718      	adds	r7, #24
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
	...

08008a0c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::add_assign_op<Scalar,Scalar> &)
 8008a0c:	b590      	push	{r4, r7, lr}
 8008a0e:	b085      	sub	sp, #20
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	607a      	str	r2, [r7, #4]
    eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f7fc fbcf 	bl	80051be <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8008a20:	4604      	mov	r4, r0
 8008a22:	68b8      	ldr	r0, [r7, #8]
 8008a24:	f7fd fdd7 	bl	80065d6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4rowsEv>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	429c      	cmp	r4, r3
 8008a2c:	d10a      	bne.n	8008a44 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x38>
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	4618      	mov	r0, r3
 8008a32:	f7fc fbb9 	bl	80051a8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8008a36:	4604      	mov	r4, r0
 8008a38:	68b8      	ldr	r0, [r7, #8]
 8008a3a:	f7fd fdda 	bl	80065f2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4colsEv>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	429c      	cmp	r4, r3
 8008a42:	d005      	beq.n	8008a50 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x44>
 8008a44:	4b0b      	ldr	r3, [pc, #44]	; (8008a74 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x68>)
 8008a46:	4a0c      	ldr	r2, [pc, #48]	; (8008a78 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x6c>)
 8008a48:	21a1      	movs	r1, #161	; 0xa1
 8008a4a:	480c      	ldr	r0, [pc, #48]	; (8008a7c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x70>)
 8008a4c:	f015 fa2a 	bl	801dea4 <__assert_func>
    generic_product_impl<Lhs, Rhs>::addTo(dst, src.lhs(), src.rhs());
 8008a50:	68b8      	ldr	r0, [r7, #8]
 8008a52:	f000 f9f6 	bl	8008e42 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE3lhsEv>
 8008a56:	4604      	mov	r4, r0
 8008a58:	68b8      	ldr	r0, [r7, #8]
 8008a5a:	f000 f9fe 	bl	8008e5a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE3rhsEv>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	461a      	mov	r2, r3
 8008a62:	4621      	mov	r1, r4
 8008a64:	68f8      	ldr	r0, [r7, #12]
 8008a66:	f000 fa04 	bl	8008e72 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEENS_10DenseShapeESE_Li3EE5addToIS3_EEvRT_RKS3_RKSD_>
  }
 8008a6a:	bf00      	nop
 8008a6c:	3714      	adds	r7, #20
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd90      	pop	{r4, r7, pc}
 8008a72:	bf00      	nop
 8008a74:	08022aa0 	.word	0x08022aa0
 8008a78:	08022ad8 	.word	0x08022ad8
 8008a7c:	08022f98 	.word	0x08022f98

08008a80 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE11lazyProductIS6_EEKNS8_ISD_T_Li1EEERKNS0_ISG_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 8008a80:	b590      	push	{r4, r7, lr}
 8008a82:	b085      	sub	sp, #20
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	60f8      	str	r0, [r7, #12]
 8008a88:	60b9      	str	r1, [r7, #8]
 8008a8a:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 8008a8c:	68b8      	ldr	r0, [r7, #8]
 8008a8e:	f7fd feed 	bl	800686c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE7derivedEv>
 8008a92:	4604      	mov	r4, r0
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f7fc fef6 	bl	8005886 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	4621      	mov	r1, r4
 8008aa0:	68f8      	ldr	r0, [r7, #12]
 8008aa2:	f000 fa29 	bl	8008ef8 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_>
}
 8008aa6:	68f8      	ldr	r0, [r7, #12]
 8008aa8:	3714      	adds	r7, #20
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd90      	pop	{r4, r7, pc}

08008aae <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b086      	sub	sp, #24
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	60f8      	str	r0, [r7, #12]
 8008ab6:	60b9      	str	r1, [r7, #8]
 8008ab8:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	68b9      	ldr	r1, [r7, #8]
 8008ac2:	6978      	ldr	r0, [r7, #20]
 8008ac4:	f000 fa46 	bl	8008f54 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 8008ac8:	bf00      	nop
 8008aca:	3718      	adds	r7, #24
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>:
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b082      	sub	sp, #8
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 fa4e 	bl	8008f7a <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3708      	adds	r7, #8
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1ELi4EEC1Ev>:
class dense_product_base
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f7ff ffed 	bl	8008ad0 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	4618      	mov	r0, r3
 8008afa:	3708      	adds	r7, #8
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b082      	sub	sp, #8
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f7ff ffed 	bl	8008ae8 <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1ELi4EEC1Ev>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	4618      	mov	r0, r3
 8008b12:	3708      	adds	r7, #8
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8008b18:	b590      	push	{r4, r7, lr}
 8008b1a:	b085      	sub	sp, #20
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	60f8      	str	r0, [r7, #12]
 8008b20:	60b9      	str	r1, [r7, #8]
 8008b22:	607a      	str	r2, [r7, #4]
 8008b24:	68f8      	ldr	r0, [r7, #12]
 8008b26:	f7ff ffeb 	bl	8008b00 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1ENS_5DenseEEC1Ev>
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	68b9      	ldr	r1, [r7, #8]
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f7fb fe5c 	bl	80047ec <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	3310      	adds	r3, #16
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	6812      	ldr	r2, [r2, #0]
 8008b3c:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 8008b3e:	68b8      	ldr	r0, [r7, #8]
 8008b40:	f7fc fe3b 	bl	80057ba <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4colsEv>
 8008b44:	4604      	mov	r4, r0
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f7fc fe45 	bl	80057d6 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	429c      	cmp	r4, r3
 8008b50:	d005      	beq.n	8008b5e <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_+0x46>
 8008b52:	4b06      	ldr	r3, [pc, #24]	; (8008b6c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_+0x54>)
 8008b54:	4a06      	ldr	r2, [pc, #24]	; (8008b70 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_+0x58>)
 8008b56:	2160      	movs	r1, #96	; 0x60
 8008b58:	4806      	ldr	r0, [pc, #24]	; (8008b74 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_+0x5c>)
 8008b5a:	f015 f9a3 	bl	801dea4 <__assert_func>
 8008b5e:	bf00      	nop
    }
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	4618      	mov	r0, r3
 8008b64:	3714      	adds	r7, #20
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd90      	pop	{r4, r7, pc}
 8008b6a:	bf00      	nop
 8008b6c:	0801ffcc 	.word	0x0801ffcc
 8008b70:	08022ff8 	.word	0x08022ff8
 8008b74:	0802031c 	.word	0x0802031c

08008b78 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b084      	sub	sp, #16
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	60b9      	str	r1, [r7, #8]
 8008b82:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8008b84:	68b9      	ldr	r1, [r7, #8]
 8008b86:	68f8      	ldr	r0, [r7, #12]
 8008b88:	f000 fa02 	bl	8008f90 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	68b9      	ldr	r1, [r7, #8]
 8008b90:	68f8      	ldr	r0, [r7, #12]
 8008b92:	f000 fab3 	bl	80090fc <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008b96:	bf00      	nop
 8008b98:	3710      	adds	r7, #16
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}

08008b9e <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE9innerSizeEv>:
    Index innerSize() const
 8008b9e:	b580      	push	{r7, lr}
 8008ba0:	b082      	sub	sp, #8
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 fae0 	bl	800916c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8008bac:	4603      	mov	r3, r0
    }
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3708      	adds	r7, #8
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi3ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b082      	sub	sp, #8
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8008bbe:	2103      	movs	r1, #3
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f7ff fbd6 	bl	8008372 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f000 fae0 	bl	800918c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi4ELi9EE3runERS9_>
  }
 8008bcc:	bf00      	nop
 8008bce:	3708      	adds	r7, #8
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>:
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b082      	sub	sp, #8
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 fae4 	bl	80091aa <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4618      	mov	r0, r3
 8008be6:	3708      	adds	r7, #8
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}

08008bec <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1ELi3EEC1Ev>:
class dense_product_base
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b082      	sub	sp, #8
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f7ff ffed 	bl	8008bd4 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3708      	adds	r7, #8
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b082      	sub	sp, #8
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f7ff ffed 	bl	8008bec <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1ELi3EEC1Ev>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	4618      	mov	r0, r3
 8008c16:	3708      	adds	r7, #8
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8008c1c:	b590      	push	{r4, r7, lr}
 8008c1e:	b085      	sub	sp, #20
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	60f8      	str	r0, [r7, #12]
 8008c24:	60b9      	str	r1, [r7, #8]
 8008c26:	607a      	str	r2, [r7, #4]
 8008c28:	68f8      	ldr	r0, [r7, #12]
 8008c2a:	f7ff ffeb 	bl	8008c04 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1ENS_5DenseEEC1Ev>
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	68ba      	ldr	r2, [r7, #8]
 8008c32:	601a      	str	r2, [r3, #0]
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f7fc fa0d 	bl	800505c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8008c42:	4604      	mov	r4, r0
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7fc fab9 	bl	80051be <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	429c      	cmp	r4, r3
 8008c50:	d005      	beq.n	8008c5e <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_+0x42>
 8008c52:	4b06      	ldr	r3, [pc, #24]	; (8008c6c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_+0x50>)
 8008c54:	4a06      	ldr	r2, [pc, #24]	; (8008c70 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_+0x54>)
 8008c56:	2160      	movs	r1, #96	; 0x60
 8008c58:	4806      	ldr	r0, [pc, #24]	; (8008c74 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_+0x58>)
 8008c5a:	f015 f923 	bl	801dea4 <__assert_func>
 8008c5e:	bf00      	nop
    }
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	4618      	mov	r0, r3
 8008c64:	3714      	adds	r7, #20
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd90      	pop	{r4, r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	0801ffcc 	.word	0x0801ffcc
 8008c70:	080232bc 	.word	0x080232bc
 8008c74:	0802031c 	.word	0x0802031c

08008c78 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	60b9      	str	r1, [r7, #8]
 8008c82:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8008c84:	68b9      	ldr	r1, [r7, #8]
 8008c86:	68f8      	ldr	r0, [r7, #12]
 8008c88:	f000 fa9a 	bl	80091c0 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	68b9      	ldr	r1, [r7, #8]
 8008c90:	68f8      	ldr	r0, [r7, #12]
 8008c92:	f000 fac3 	bl	800921c <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008c96:	bf00      	nop
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}

08008c9e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi3ELi3EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8008c9e:	b480      	push	{r7}
 8008ca0:	b083      	sub	sp, #12
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
 8008ca6:	bf00      	nop
 8008ca8:	370c      	adds	r7, #12
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr

08008cb2 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEC1ERKS8_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b082      	sub	sp, #8
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
 8008cba:	6039      	str	r1, [r7, #0]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6839      	ldr	r1, [r7, #0]
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f000 fae3 	bl	800928c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3708      	adds	r7, #8
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>:
  Scalar& coeffRef(Index row, Index col)
 8008cd0:	b590      	push	{r4, r7, lr}
 8008cd2:	b085      	sub	sp, #20
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	60b9      	str	r1, [r7, #8]
 8008cda:	607a      	str	r2, [r7, #4]
      return const_cast<Scalar*>(m_d.data)[row + col * m_d.outerStride()];
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681c      	ldr	r4, [r3, #0]
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f000 fb0f 	bl	8009306 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	fb03 f202 	mul.w	r2, r3, r2
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	4413      	add	r3, r2
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	4423      	add	r3, r4
  }
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3714      	adds	r7, #20
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd90      	pop	{r4, r7, pc}

08008d00 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8008d00:	b5b0      	push	{r4, r5, r7, lr}
 8008d02:	b084      	sub	sp, #16
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	60f8      	str	r0, [r7, #12]
 8008d08:	60b9      	str	r1, [r7, #8]
 8008d0a:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f000 fb04 	bl	800931c <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4Data4funcEv>
 8008d14:	4604      	mov	r4, r0
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	3304      	adds	r3, #4
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	68b9      	ldr	r1, [r7, #8]
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f000 fb07 	bl	8009332 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEE5coeffEii>
 8008d24:	4605      	mov	r5, r0
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	332c      	adds	r3, #44	; 0x2c
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	68b9      	ldr	r1, [r7, #8]
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f000 fb17 	bl	8009362 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE5coeffEii>
 8008d34:	4603      	mov	r3, r0
 8008d36:	461a      	mov	r2, r3
 8008d38:	4629      	mov	r1, r5
 8008d3a:	4620      	mov	r0, r4
 8008d3c:	f000 fb29 	bl	8009392 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8008d40:	eef0 7a40 	vmov.f32	s15, s0
  }
 8008d44:	eeb0 0a67 	vmov.f32	s0, s15
 8008d48:	3710      	adds	r7, #16
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bdb0      	pop	{r4, r5, r7, pc}

08008d4e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8008d4e:	b580      	push	{r7, lr}
 8008d50:	b082      	sub	sp, #8
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8008d56:	2200      	movs	r2, #0
 8008d58:	2101      	movs	r1, #1
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f7ff fbd9 	bl	8008512 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 fb2b 	bl	80093bc <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSL_>
  }
 8008d66:	bf00      	nop
 8008d68:	3708      	adds	r7, #8
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}

08008d6e <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>:
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b082      	sub	sp, #8
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 fb30 	bl	80093dc <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3708      	adds	r7, #8
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}

08008d86 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1ELi4EEC1Ev>:
class dense_product_base
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b082      	sub	sp, #8
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f7ff ffed 	bl	8008d6e <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	4618      	mov	r0, r3
 8008d98:	3708      	adds	r7, #8
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}

08008d9e <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8008d9e:	b580      	push	{r7, lr}
 8008da0:	b082      	sub	sp, #8
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f7ff ffed 	bl	8008d86 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1ELi4EEC1Ev>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	4618      	mov	r0, r3
 8008db0:	3708      	adds	r7, #8
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
	...

08008db8 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8008db8:	b590      	push	{r4, r7, lr}
 8008dba:	b085      	sub	sp, #20
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	60b9      	str	r1, [r7, #8]
 8008dc2:	607a      	str	r2, [r7, #4]
 8008dc4:	68f8      	ldr	r0, [r7, #12]
 8008dc6:	f7ff ffea 	bl	8008d9e <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1ENS_5DenseEEC1Ev>
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	68ba      	ldr	r2, [r7, #8]
 8008dce:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008dd2:	e883 0003 	stmia.w	r3, {r0, r1}
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	3308      	adds	r3, #8
 8008dda:	6879      	ldr	r1, [r7, #4]
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f7fb feb9 	bl	8004b54 <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSH_>
      eigen_assert(lhs.cols() == rhs.rows()
 8008de2:	68b8      	ldr	r0, [r7, #8]
 8008de4:	f7fd fa15 	bl	8006212 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>
 8008de8:	4604      	mov	r4, r0
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f7fd fa1f 	bl	800622e <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>
 8008df0:	4603      	mov	r3, r0
 8008df2:	429c      	cmp	r4, r3
 8008df4:	d005      	beq.n	8008e02 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_+0x4a>
 8008df6:	4b06      	ldr	r3, [pc, #24]	; (8008e10 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_+0x58>)
 8008df8:	4a06      	ldr	r2, [pc, #24]	; (8008e14 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_+0x5c>)
 8008dfa:	2160      	movs	r1, #96	; 0x60
 8008dfc:	4806      	ldr	r0, [pc, #24]	; (8008e18 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_+0x60>)
 8008dfe:	f015 f851 	bl	801dea4 <__assert_func>
 8008e02:	bf00      	nop
    }
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	4618      	mov	r0, r3
 8008e08:	3714      	adds	r7, #20
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd90      	pop	{r4, r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	0801ffcc 	.word	0x0801ffcc
 8008e14:	080233e4 	.word	0x080233e4
 8008e18:	0802031c 	.word	0x0802031c

08008e1c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	60f8      	str	r0, [r7, #12]
 8008e24:	60b9      	str	r1, [r7, #8]
 8008e26:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8008e28:	68b9      	ldr	r1, [r7, #8]
 8008e2a:	68f8      	ldr	r0, [r7, #12]
 8008e2c:	f000 fae1 	bl	80093f2 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	68b9      	ldr	r1, [r7, #8]
 8008e34:	68f8      	ldr	r0, [r7, #12]
 8008e36:	f000 fb23 	bl	8009480 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008e3a:	bf00      	nop
 8008e3c:	3710      	adds	r7, #16
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8008e42:	b480      	push	{r7}
 8008e44:	b083      	sub	sp, #12
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4618      	mov	r0, r3
 8008e50:	370c      	adds	r7, #12
 8008e52:	46bd      	mov	sp, r7
 8008e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e58:	4770      	bx	lr

08008e5a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8008e5a:	b480      	push	{r7}
 8008e5c:	b083      	sub	sp, #12
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	3304      	adds	r3, #4
 8008e66:	4618      	mov	r0, r3
 8008e68:	370c      	adds	r7, #12
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr

08008e72 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEENS_10DenseShapeESE_Li3EE5addToIS3_EEvRT_RKS3_RKSD_>:

  template<typename Dst>
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void addTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b08a      	sub	sp, #40	; 0x28
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	60f8      	str	r0, [r7, #12]
 8008e7a:	60b9      	str	r1, [r7, #8]
 8008e7c:	607a      	str	r2, [r7, #4]
  {
    // dst.noalias() += lhs.lazyProduct(rhs);
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::add_assign_op<typename Dst::Scalar,Scalar>());
 8008e7e:	f107 0310 	add.w	r3, r7, #16
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	68b9      	ldr	r1, [r7, #8]
 8008e86:	4618      	mov	r0, r3
 8008e88:	f000 fb32 	bl	80094f0 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE11lazyProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEEEEKNSB_IS2_T_Li1EEERKNS0_ISG_EE>
 8008e8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e90:	4618      	mov	r0, r3
 8008e92:	f7ff fbcf 	bl	8008634 <_ZN5Eigen8internal13add_assign_opIffEC1Ev>
 8008e96:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008e9a:	f107 0310 	add.w	r3, r7, #16
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	68f8      	ldr	r0, [r7, #12]
 8008ea2:	f000 fb3c 	bl	800951e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008ea6:	bf00      	nop
 8008ea8:	3728      	adds	r7, #40	; 0x28
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>:
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b082      	sub	sp, #8
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 fb42 	bl	8009540 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3708      	adds	r7, #8
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1ELi3EEC1Ev>:
class dense_product_base
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b082      	sub	sp, #8
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f7ff ffed 	bl	8008eae <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3708      	adds	r7, #8
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}

08008ede <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8008ede:	b580      	push	{r7, lr}
 8008ee0:	b082      	sub	sp, #8
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	6078      	str	r0, [r7, #4]
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f7ff ffed 	bl	8008ec6 <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1ELi3EEC1Ev>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3708      	adds	r7, #8
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
	...

08008ef8 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8008ef8:	b590      	push	{r4, r7, lr}
 8008efa:	b085      	sub	sp, #20
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	60f8      	str	r0, [r7, #12]
 8008f00:	60b9      	str	r1, [r7, #8]
 8008f02:	607a      	str	r2, [r7, #4]
 8008f04:	68f8      	ldr	r0, [r7, #12]
 8008f06:	f7ff ffea 	bl	8008ede <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1ENS_5DenseEEC1Ev>
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	68b9      	ldr	r1, [r7, #8]
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f7fb ff39 	bl	8004d86 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERKSC_>
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	611a      	str	r2, [r3, #16]
      eigen_assert(lhs.cols() == rhs.rows()
 8008f1a:	68b8      	ldr	r0, [r7, #8]
 8008f1c:	f7fd fcd5 	bl	80068ca <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4colsEv>
 8008f20:	4604      	mov	r4, r0
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	4618      	mov	r0, r3
 8008f26:	f7fc f8a4 	bl	8005072 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	429c      	cmp	r4, r3
 8008f2e:	d005      	beq.n	8008f3c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_+0x44>
 8008f30:	4b05      	ldr	r3, [pc, #20]	; (8008f48 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_+0x50>)
 8008f32:	4a06      	ldr	r2, [pc, #24]	; (8008f4c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_+0x54>)
 8008f34:	2160      	movs	r1, #96	; 0x60
 8008f36:	4806      	ldr	r0, [pc, #24]	; (8008f50 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_+0x58>)
 8008f38:	f014 ffb4 	bl	801dea4 <__assert_func>
 8008f3c:	bf00      	nop
    }
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	4618      	mov	r0, r3
 8008f42:	3714      	adds	r7, #20
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd90      	pop	{r4, r7, pc}
 8008f48:	0801ffcc 	.word	0x0801ffcc
 8008f4c:	0802376c 	.word	0x0802376c
 8008f50:	0802031c 	.word	0x0802031c

08008f54 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b084      	sub	sp, #16
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	60b9      	str	r1, [r7, #8]
 8008f5e:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8008f60:	68b9      	ldr	r1, [r7, #8]
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	f000 faf7 	bl	8009556 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	68b9      	ldr	r1, [r7, #8]
 8008f6c:	68f8      	ldr	r0, [r7, #12]
 8008f6e:	f000 fb35 	bl	80095dc <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008f72:	bf00      	nop
 8008f74:	3710      	adds	r7, #16
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8008f7a:	b480      	push	{r7}
 8008f7c:	b083      	sub	sp, #12
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
    }
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	4618      	mov	r0, r3
 8008f86:	370c      	adds	r7, #12
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr

08008f90 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f7fc f868 	bl	8005072 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	dd08      	ble.n	8008fba <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_+0x2a>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7fc f856 	bl	800505c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	2b01      	cmp	r3, #1
 8008fb4:	dd01      	ble.n	8008fba <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_+0x2a>
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	e000      	b.n	8008fbc <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_+0x2c>
 8008fba:	2300      	movs	r3, #0
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d003      	beq.n	8008fc8 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 8008fc0:	6839      	ldr	r1, [r7, #0]
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 fb42 	bl	800964c <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEELb0EE3runERKS3_RKSI_>
}
 8008fc8:	bf00      	nop
 8008fca:	3708      	adds	r7, #8
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
struct evaluator<const T>
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b082      	sub	sp, #8
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f7fc fa5b 	bl	8005496 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3708      	adds	r7, #8
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}

08008fea <_ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
struct evaluator<CwiseNullaryOp<NullaryOp,PlainObjectType> >
 8008fea:	b580      	push	{r7, lr}
 8008fec:	b082      	sub	sp, #8
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 fb5a 	bl	80096ac <_ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3708      	adds	r7, #8
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <_ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
struct evaluator<const T>
 8009002:	b580      	push	{r7, lr}
 8009004:	b082      	sub	sp, #8
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	4618      	mov	r0, r3
 800900e:	f7ff ffec 	bl	8008fea <_ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	4618      	mov	r0, r3
 8009016:	3708      	adds	r7, #8
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4DataD1Ev>:
  struct Data
 800901c:	b580      	push	{r7, lr}
 800901e:	b082      	sub	sp, #8
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	3308      	adds	r3, #8
 8009028:	4618      	mov	r0, r3
 800902a:	f7ff ffea 	bl	8009002 <_ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	3304      	adds	r3, #4
 8009032:	4618      	mov	r0, r3
 8009034:	f7ff ffcc 	bl	8008fd0 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	4618      	mov	r0, r3
 800903c:	3708      	adds	r7, #8
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}

08009042 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8009042:	b580      	push	{r7, lr}
 8009044:	b082      	sub	sp, #8
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	4618      	mov	r0, r3
 800904e:	f7ff ffe5 	bl	800901c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4DataD1Ev>
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 fb1f 	bl	8009696 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	4618      	mov	r0, r3
 800905c:	3708      	adds	r7, #8
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}

08009062 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8009062:	b580      	push	{r7, lr}
 8009064:	b082      	sub	sp, #8
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	4618      	mov	r0, r3
 800906e:	f7ff ffe8 	bl	8009042 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffED1Ev>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	4618      	mov	r0, r3
 8009076:	3708      	adds	r7, #8
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	4618      	mov	r0, r3
 8009088:	f7fc fa05 	bl	8005496 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 fb18 	bl	80096c2 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	4618      	mov	r0, r3
 8009096:	3708      	adds	r7, #8
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7ff ffe8 	bl	800907c <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedEfED1Ev>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	4618      	mov	r0, r3
 80090b0:	3708      	adds	r7, #8
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}

080090b6 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffED1Ev>:

template<int StorageOrder, int UnrollingIndex, typename Lhs, typename Rhs, typename Packet, int LoadMode>
struct etor_product_packet_impl;

template<typename Lhs, typename Rhs, int ProductTag>
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 80090b6:	b580      	push	{r7, lr}
 80090b8:	b082      	sub	sp, #8
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	3324      	adds	r3, #36	; 0x24
 80090c2:	4618      	mov	r0, r3
 80090c4:	f7ff ffea 	bl	800909c <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	3314      	adds	r3, #20
 80090cc:	4618      	mov	r0, r3
 80090ce:	f7ff ffc8 	bl	8009062 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 fad4 	bl	8009680 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEED1Ev>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	4618      	mov	r0, r3
 80090dc:	3708      	adds	r7, #8
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}

080090e2 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 80090e2:	b580      	push	{r7, lr}
 80090e4:	b082      	sub	sp, #8
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	4618      	mov	r0, r3
 80090ee:	f7ff ffe2 	bl	80090b6 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffED1Ev>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	4618      	mov	r0, r3
 80090f6:	3708      	adds	r7, #8
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b096      	sub	sp, #88	; 0x58
 8009100:	af02      	add	r7, sp, #8
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8009108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800910c:	68b9      	ldr	r1, [r7, #8]
 800910e:	4618      	mov	r0, r3
 8009110:	f000 faa7 	bl	8009662 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1ERKSH_>
  resize_if_allowed(dst, src, func);
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	68b9      	ldr	r1, [r7, #8]
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	f000 faf9 	bl	8009710 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800911e:	f107 0320 	add.w	r3, r7, #32
 8009122:	68f9      	ldr	r1, [r7, #12]
 8009124:	4618      	mov	r0, r3
 8009126:	f7fe fc3b 	bl	80079a0 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800912a:	68f8      	ldr	r0, [r7, #12]
 800912c:	f7fe fca0 	bl	8007a70 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 8009130:	4603      	mov	r3, r0
 8009132:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009136:	f107 0120 	add.w	r1, r7, #32
 800913a:	f107 0010 	add.w	r0, r7, #16
 800913e:	9300      	str	r3, [sp, #0]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f000 fb2f 	bl	80097a4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSL_RKSN_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8009146:	f107 0310 	add.w	r3, r7, #16
 800914a:	4618      	mov	r0, r3
 800914c:	f000 fb44 	bl	80097d8 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSP_>
  DstEvaluatorType dstEvaluator(dst);
 8009150:	f107 0320 	add.w	r3, r7, #32
 8009154:	4618      	mov	r0, r3
 8009156:	f7fe fa14 	bl	8007582 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800915a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800915e:	4618      	mov	r0, r3
 8009160:	f7ff ffbf 	bl	80090e2 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEED1Ev>
}
 8009164:	bf00      	nop
 8009166:	3750      	adds	r7, #80	; 0x50
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800916c:	b580      	push	{r7, lr}
 800916e:	b082      	sub	sp, #8
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f7fc fb86 	bl	8005886 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800917a:	4603      	mov	r3, r0
 800917c:	4618      	mov	r0, r3
 800917e:	f7fb ff78 	bl	8005072 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8009182:	4603      	mov	r3, r0
 8009184:	4618      	mov	r0, r3
 8009186:	3708      	adds	r7, #8
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi4ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800918c:	b580      	push	{r7, lr}
 800918e:	b082      	sub	sp, #8
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8009194:	2104      	movs	r1, #4
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f7ff f8eb 	bl	8008372 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 fb26 	bl	80097ee <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi5ELi9EE3runERS9_>
  }
 80091a2:	bf00      	nop
 80091a4:	3708      	adds	r7, #8
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}

080091aa <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80091aa:	b480      	push	{r7}
 80091ac:	b083      	sub	sp, #12
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
    }
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	4618      	mov	r0, r3
 80091b6:	370c      	adds	r7, #12
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr

080091c0 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 80091c0:	b480      	push	{r7}
 80091c2:	b083      	sub	sp, #12
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
}
 80091ca:	bf00      	nop
 80091cc:	370c      	adds	r7, #12
 80091ce:	46bd      	mov	sp, r7
 80091d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d4:	4770      	bx	lr

080091d6 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 80091d6:	b580      	push	{r7, lr}
 80091d8:	b082      	sub	sp, #8
 80091da:	af00      	add	r7, sp, #0
 80091dc:	6078      	str	r0, [r7, #4]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	330c      	adds	r3, #12
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7fc f957 	bl	8005496 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	3308      	adds	r3, #8
 80091ec:	4618      	mov	r0, r3
 80091ee:	f7fe f9c8 	bl	8007582 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 fb19 	bl	800982a <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEED1Ev>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	4618      	mov	r0, r3
 80091fc:	3708      	adds	r7, #8
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}

08009202 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8009202:	b580      	push	{r7, lr}
 8009204:	b082      	sub	sp, #8
 8009206:	af00      	add	r7, sp, #0
 8009208:	6078      	str	r0, [r7, #4]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	4618      	mov	r0, r3
 800920e:	f7ff ffe2 	bl	80091d6 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffED1Ev>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	4618      	mov	r0, r3
 8009216:	3708      	adds	r7, #8
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800921c:	b580      	push	{r7, lr}
 800921e:	b090      	sub	sp, #64	; 0x40
 8009220:	af02      	add	r7, sp, #8
 8009222:	60f8      	str	r0, [r7, #12]
 8009224:	60b9      	str	r1, [r7, #8]
 8009226:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8009228:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800922c:	68b9      	ldr	r1, [r7, #8]
 800922e:	4618      	mov	r0, r3
 8009230:	f000 faec 	bl	800980c <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1ERKS6_>
  resize_if_allowed(dst, src, func);
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	68b9      	ldr	r1, [r7, #8]
 8009238:	68f8      	ldr	r0, [r7, #12]
 800923a:	f000 fb1d 	bl	8009878 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800923e:	f107 0320 	add.w	r3, r7, #32
 8009242:	68f9      	ldr	r1, [r7, #12]
 8009244:	4618      	mov	r0, r3
 8009246:	f7fd fc60 	bl	8006b0a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800924a:	68f8      	ldr	r0, [r7, #12]
 800924c:	f7fe fc9e 	bl	8007b8c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 8009250:	4603      	mov	r3, r0
 8009252:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009256:	f107 0120 	add.w	r1, r7, #32
 800925a:	f107 0010 	add.w	r0, r7, #16
 800925e:	9300      	str	r3, [sp, #0]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f000 fb53 	bl	800990c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS9_RKSB_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8009266:	f107 0310 	add.w	r3, r7, #16
 800926a:	4618      	mov	r0, r3
 800926c:	f000 fb68 	bl	8009940 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSD_>
  DstEvaluatorType dstEvaluator(dst);
 8009270:	f107 0320 	add.w	r3, r7, #32
 8009274:	4618      	mov	r0, r3
 8009276:	f7fc f90e 	bl	8005496 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800927a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800927e:	4618      	mov	r0, r3
 8009280:	f7ff ffbf 	bl	8009202 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEED1Ev>
}
 8009284:	bf00      	nop
 8009286:	3738      	adds	r7, #56	; 0x38
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>:
  explicit product_evaluator(const XprType& xpr)
 800928c:	b5b0      	push	{r4, r5, r7, lr}
 800928e:	b084      	sub	sp, #16
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
    : m_result(xpr.rows(), xpr.cols())
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	4618      	mov	r0, r3
 800929a:	f000 fb5c 	bl	8009956 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	1d1c      	adds	r4, r3, #4
 80092a2:	6838      	ldr	r0, [r7, #0]
 80092a4:	f7fc fca0 	bl	8005be8 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 80092a8:	4603      	mov	r3, r0
 80092aa:	60bb      	str	r3, [r7, #8]
 80092ac:	6838      	ldr	r0, [r7, #0]
 80092ae:	f7fc fca8 	bl	8005c02 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4colsEv>
 80092b2:	4603      	mov	r3, r0
 80092b4:	60fb      	str	r3, [r7, #12]
 80092b6:	f107 020c 	add.w	r2, r7, #12
 80092ba:	f107 0308 	add.w	r3, r7, #8
 80092be:	4619      	mov	r1, r3
 80092c0:	4620      	mov	r0, r4
 80092c2:	f000 fb55 	bl	8009970 <_ZN5Eigen6MatrixIfLi3ELi3ELi1ELi3ELi3EEC1IiiEERKT_RKT0_>
    ::new (static_cast<Base*>(this)) Base(m_result);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	4619      	mov	r1, r3
 80092ca:	2004      	movs	r0, #4
 80092cc:	f7f7 fe36 	bl	8000f3c <_ZnwjPv>
 80092d0:	4602      	mov	r2, r0
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	3304      	adds	r3, #4
 80092d6:	4619      	mov	r1, r3
 80092d8:	4610      	mov	r0, r2
 80092da:	f000 fb62 	bl	80099a2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1ERKS3_>
    generic_product_impl<Lhs, Rhs, LhsShape, RhsShape, ProductTag>::evalTo(m_result, xpr.lhs(), xpr.rhs());
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	1d1c      	adds	r4, r3, #4
 80092e2:	6838      	ldr	r0, [r7, #0]
 80092e4:	f000 fb6d 	bl	80099c2 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE3lhsEv>
 80092e8:	4605      	mov	r5, r0
 80092ea:	6838      	ldr	r0, [r7, #0]
 80092ec:	f000 fb74 	bl	80099d8 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE3rhsEv>
 80092f0:	4603      	mov	r3, r0
 80092f2:	461a      	mov	r2, r3
 80092f4:	4629      	mov	r1, r5
 80092f6:	4620      	mov	r0, r4
 80092f8:	f000 fb7a 	bl	80099f0 <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EENS_10DenseShapeES8_Li3EE6evalToINS3_IfLi3ELi3ELi1ELi3ELi3EEEEEvRT_RKS5_RKS7_>
  }
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	4618      	mov	r0, r3
 8009300:	3710      	adds	r7, #16
 8009302:	46bd      	mov	sp, r7
 8009304:	bdb0      	pop	{r4, r5, r7, pc}

08009306 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>:
  Index outerStride() const EIGEN_NOEXCEPT { return OuterStride; }
 8009306:	b480      	push	{r7}
 8009308:	b083      	sub	sp, #12
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
 800930e:	2303      	movs	r3, #3
 8009310:	4618      	mov	r0, r3
 8009312:	370c      	adds	r7, #12
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr

0800931c <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4Data4funcEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    const BinaryOp& func() const { return op; }
 800931c:	b480      	push	{r7}
 800931e:	b083      	sub	sp, #12
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	4618      	mov	r0, r3
 8009328:	370c      	adds	r7, #12
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr

08009332 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8009332:	b590      	push	{r4, r7, lr}
 8009334:	b085      	sub	sp, #20
 8009336:	af00      	add	r7, sp, #0
 8009338:	60f8      	str	r0, [r7, #12]
 800933a:	60b9      	str	r1, [r7, #8]
 800933c:	607a      	str	r2, [r7, #4]
      return m_d.data[row * m_d.outerStride() + col];
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681c      	ldr	r4, [r3, #0]
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	4618      	mov	r0, r3
 8009346:	f7ff ffde 	bl	8009306 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>
 800934a:	4602      	mov	r2, r0
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	fb03 f202 	mul.w	r2, r3, r2
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	4413      	add	r3, r2
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	4423      	add	r3, r4
  }
 800935a:	4618      	mov	r0, r3
 800935c:	3714      	adds	r7, #20
 800935e:	46bd      	mov	sp, r7
 8009360:	bd90      	pop	{r4, r7, pc}

08009362 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8009362:	b590      	push	{r4, r7, lr}
 8009364:	b085      	sub	sp, #20
 8009366:	af00      	add	r7, sp, #0
 8009368:	60f8      	str	r0, [r7, #12]
 800936a:	60b9      	str	r1, [r7, #8]
 800936c:	607a      	str	r2, [r7, #4]
      return m_d.data[row + col * m_d.outerStride()];
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681c      	ldr	r4, [r3, #0]
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	4618      	mov	r0, r3
 8009376:	f7ff ffc6 	bl	8009306 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>
 800937a:	4602      	mov	r2, r0
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	fb03 f202 	mul.w	r2, r3, r2
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	4413      	add	r3, r2
 8009386:	009b      	lsls	r3, r3, #2
 8009388:	4423      	add	r3, r4
  }
 800938a:	4618      	mov	r0, r3
 800938c:	3714      	adds	r7, #20
 800938e:	46bd      	mov	sp, r7
 8009390:	bd90      	pop	{r4, r7, pc}

08009392 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 8009392:	b480      	push	{r7}
 8009394:	b085      	sub	sp, #20
 8009396:	af00      	add	r7, sp, #0
 8009398:	60f8      	str	r0, [r7, #12]
 800939a:	60b9      	str	r1, [r7, #8]
 800939c:	607a      	str	r2, [r7, #4]
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	ed93 7a00 	vldr	s14, [r3]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	edd3 7a00 	vldr	s15, [r3]
 80093aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80093ae:	eeb0 0a67 	vmov.f32	s0, s15
 80093b2:	3714      	adds	r7, #20
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr

080093bc <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80093c4:	2201      	movs	r2, #1
 80093c6:	2101      	movs	r1, #1
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f7ff f8a2 	bl	8008512 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 fb2c 	bl	8009a2c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSL_>
  }
 80093d4:	bf00      	nop
 80093d6:	3708      	adds	r7, #8
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80093dc:	b480      	push	{r7}
 80093de:	b083      	sub	sp, #12
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
    }
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	4618      	mov	r0, r3
 80093e8:	370c      	adds	r7, #12
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr

080093f2 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 80093f2:	b480      	push	{r7}
 80093f4:	b083      	sub	sp, #12
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
 80093fa:	6039      	str	r1, [r7, #0]
}
 80093fc:	bf00      	nop
 80093fe:	370c      	adds	r7, #12
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr

08009408 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>:
struct evaluator<PlainObjectBase<Derived> >
 8009408:	b580      	push	{r7, lr}
 800940a:	b082      	sub	sp, #8
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f000 fb35 	bl	8009a80 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	4618      	mov	r0, r3
 800941a:	3708      	adds	r7, #8
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	4618      	mov	r0, r3
 800942c:	f7ff ffec 	bl	8009408 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	4618      	mov	r0, r3
 8009434:	3708      	adds	r7, #8
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 800943a:	b580      	push	{r7, lr}
 800943c:	b082      	sub	sp, #8
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	3314      	adds	r3, #20
 8009446:	4618      	mov	r0, r3
 8009448:	f7ff ffea 	bl	8009420 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	3310      	adds	r3, #16
 8009450:	4618      	mov	r0, r3
 8009452:	f7fc f820 	bl	8005496 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 fb07 	bl	8009a6a <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEED1Ev>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	4618      	mov	r0, r3
 8009460:	3708      	adds	r7, #8
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}

08009466 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8009466:	b580      	push	{r7, lr}
 8009468:	b082      	sub	sp, #8
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	4618      	mov	r0, r3
 8009472:	f7ff ffe2 	bl	800943a <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffED1Ev>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	4618      	mov	r0, r3
 800947a:	3708      	adds	r7, #8
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8009480:	b580      	push	{r7, lr}
 8009482:	b092      	sub	sp, #72	; 0x48
 8009484:	af02      	add	r7, sp, #8
 8009486:	60f8      	str	r0, [r7, #12]
 8009488:	60b9      	str	r1, [r7, #8]
 800948a:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800948c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009490:	68b9      	ldr	r1, [r7, #8]
 8009492:	4618      	mov	r0, r3
 8009494:	f000 fada 	bl	8009a4c <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1ERKSK_>
  resize_if_allowed(dst, src, func);
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	68b9      	ldr	r1, [r7, #8]
 800949c:	68f8      	ldr	r0, [r7, #12]
 800949e:	f000 fb15 	bl	8009acc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 80094a2:	f107 0320 	add.w	r3, r7, #32
 80094a6:	68f9      	ldr	r1, [r7, #12]
 80094a8:	4618      	mov	r0, r3
 80094aa:	f7fd fb2e 	bl	8006b0a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 80094ae:	68f8      	ldr	r0, [r7, #12]
 80094b0:	f7fe fb6c 	bl	8007b8c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 80094b4:	4603      	mov	r3, r0
 80094b6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80094ba:	f107 0120 	add.w	r1, r7, #32
 80094be:	f107 0010 	add.w	r0, r7, #16
 80094c2:	9300      	str	r3, [sp, #0]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f000 fb4b 	bl	8009b60 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSO_RKSQ_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 80094ca:	f107 0310 	add.w	r3, r7, #16
 80094ce:	4618      	mov	r0, r3
 80094d0:	f000 fb60 	bl	8009b94 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSS_>
  DstEvaluatorType dstEvaluator(dst);
 80094d4:	f107 0320 	add.w	r3, r7, #32
 80094d8:	4618      	mov	r0, r3
 80094da:	f7fb ffdc 	bl	8005496 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 80094de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094e2:	4618      	mov	r0, r3
 80094e4:	f7ff ffbf 	bl	8009466 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEED1Ev>
}
 80094e8:	bf00      	nop
 80094ea:	3740      	adds	r7, #64	; 0x40
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}

080094f0 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE11lazyProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEEEEKNSB_IS2_T_Li1EEERKNS0_ISG_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 80094f0:	b590      	push	{r4, r7, lr}
 80094f2:	b085      	sub	sp, #20
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	60f8      	str	r0, [r7, #12]
 80094f8:	60b9      	str	r1, [r7, #8]
 80094fa:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 80094fc:	68b8      	ldr	r0, [r7, #8]
 80094fe:	f7fb fffa 	bl	80054f6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8009502:	4604      	mov	r4, r0
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f7fc ffd5 	bl	80064b4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEE7derivedEv>
 800950a:	4603      	mov	r3, r0
 800950c:	461a      	mov	r2, r3
 800950e:	4621      	mov	r1, r4
 8009510:	68f8      	ldr	r0, [r7, #12]
 8009512:	f000 fb6f 	bl	8009bf4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_>
}
 8009516:	68f8      	ldr	r0, [r7, #12]
 8009518:	3714      	adds	r7, #20
 800951a:	46bd      	mov	sp, r7
 800951c:	bd90      	pop	{r4, r7, pc}

0800951e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800951e:	b580      	push	{r7, lr}
 8009520:	b086      	sub	sp, #24
 8009522:	af00      	add	r7, sp, #0
 8009524:	60f8      	str	r0, [r7, #12]
 8009526:	60b9      	str	r1, [r7, #8]
 8009528:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	68b9      	ldr	r1, [r7, #8]
 8009532:	6978      	ldr	r0, [r7, #20]
 8009534:	f000 fb8e 	bl	8009c54 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 8009538:	bf00      	nop
 800953a:	3718      	adds	r7, #24
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8009540:	b480      	push	{r7}
 8009542:	b083      	sub	sp, #12
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
    }
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	4618      	mov	r0, r3
 800954c:	370c      	adds	r7, #12
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr

08009556 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8009556:	b580      	push	{r7, lr}
 8009558:	b082      	sub	sp, #8
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
 800955e:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	4618      	mov	r0, r3
 8009564:	f7fb fd85 	bl	8005072 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8009568:	4603      	mov	r3, r0
 800956a:	2b01      	cmp	r3, #1
 800956c:	dd08      	ble.n	8009580 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_+0x2a>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	4618      	mov	r0, r3
 8009572:	f7fb fd73 	bl	800505c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8009576:	4603      	mov	r3, r0
 8009578:	2b01      	cmp	r3, #1
 800957a:	dd01      	ble.n	8009580 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_+0x2a>
 800957c:	2301      	movs	r3, #1
 800957e:	e000      	b.n	8009582 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_+0x2c>
 8009580:	2300      	movs	r3, #0
 8009582:	2b00      	cmp	r3, #0
 8009584:	d003      	beq.n	800958e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 8009586:	6839      	ldr	r1, [r7, #0]
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f000 fb76 	bl	8009c7a <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEELb0EE3runERS8_RKSE_>
}
 800958e:	bf00      	nop
 8009590:	3708      	adds	r7, #8
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}

08009596 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 8009596:	b580      	push	{r7, lr}
 8009598:	b082      	sub	sp, #8
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	332c      	adds	r3, #44	; 0x2c
 80095a2:	4618      	mov	r0, r3
 80095a4:	f7fd ffed 	bl	8007582 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	3328      	adds	r3, #40	; 0x28
 80095ac:	4618      	mov	r0, r3
 80095ae:	f7fd ffe8 	bl	8007582 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f000 fb7b 	bl	8009cae <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEED1Ev>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	4618      	mov	r0, r3
 80095bc:	3708      	adds	r7, #8
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}

080095c2 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 80095c2:	b580      	push	{r7, lr}
 80095c4:	b082      	sub	sp, #8
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	6078      	str	r0, [r7, #4]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	4618      	mov	r0, r3
 80095ce:	f7ff ffe2 	bl	8009596 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffED1Ev>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	4618      	mov	r0, r3
 80095d6:	3708      	adds	r7, #8
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 80095dc:	b580      	push	{r7, lr}
 80095de:	b098      	sub	sp, #96	; 0x60
 80095e0:	af02      	add	r7, sp, #8
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 80095e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80095ec:	68b9      	ldr	r1, [r7, #8]
 80095ee:	4618      	mov	r0, r3
 80095f0:	f000 fb4e 	bl	8009c90 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1ERKSE_>
  resize_if_allowed(dst, src, func);
 80095f4:	687a      	ldr	r2, [r7, #4]
 80095f6:	68b9      	ldr	r1, [r7, #8]
 80095f8:	68f8      	ldr	r0, [r7, #12]
 80095fa:	f000 fb7f 	bl	8009cfc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 80095fe:	f107 0320 	add.w	r3, r7, #32
 8009602:	68f9      	ldr	r1, [r7, #12]
 8009604:	4618      	mov	r0, r3
 8009606:	f7fe f9cb 	bl	80079a0 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800960a:	68f8      	ldr	r0, [r7, #12]
 800960c:	f7fe fa30 	bl	8007a70 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 8009610:	4603      	mov	r3, r0
 8009612:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009616:	f107 0120 	add.w	r1, r7, #32
 800961a:	f107 0010 	add.w	r0, r7, #16
 800961e:	9300      	str	r3, [sp, #0]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f000 fbb5 	bl	8009d90 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8009626:	f107 0310 	add.w	r3, r7, #16
 800962a:	4618      	mov	r0, r3
 800962c:	f000 fbca 	bl	8009dc4 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSL_>
  DstEvaluatorType dstEvaluator(dst);
 8009630:	f107 0320 	add.w	r3, r7, #32
 8009634:	4618      	mov	r0, r3
 8009636:	f7fd ffa4 	bl	8007582 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800963a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800963e:	4618      	mov	r0, r3
 8009640:	f7ff ffbf 	bl	80095c2 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEED1Ev>
}
 8009644:	bf00      	nop
 8009646:	3758      	adds	r7, #88	; 0x58
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEELb0EE3runERKS3_RKSI_>:
    static void run(const Derived&, const OtherDerived&)
 800964c:	b480      	push	{r7}
 800964e:	b083      	sub	sp, #12
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	6039      	str	r1, [r7, #0]
    }
 8009656:	bf00      	nop
 8009658:	370c      	adds	r7, #12
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr

08009662 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1ERKSH_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8009662:	b580      	push	{r7, lr}
 8009664:	b082      	sub	sp, #8
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
 800966a:	6039      	str	r1, [r7, #0]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6839      	ldr	r1, [r7, #0]
 8009670:	4618      	mov	r0, r3
 8009672:	f000 fbb2 	bl	8009dda <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffEC1ERKSH_>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	4618      	mov	r0, r3
 800967a:	3708      	adds	r7, #8
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}

08009680 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8009680:	b480      	push	{r7}
 8009682:	b083      	sub	sp, #12
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	4618      	mov	r0, r3
 800968c:	370c      	adds	r7, #12
 800968e:	46bd      	mov	sp, r7
 8009690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009694:	4770      	bx	lr

08009696 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>:
 8009696:	b480      	push	{r7}
 8009698:	b083      	sub	sp, #12
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	4618      	mov	r0, r3
 80096a2:	370c      	adds	r7, #12
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr

080096ac <_ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
 80096ac:	b480      	push	{r7}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	4618      	mov	r0, r3
 80096b8:	370c      	adds	r7, #12
 80096ba:	46bd      	mov	sp, r7
 80096bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c0:	4770      	bx	lr

080096c2 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
 80096c2:	b480      	push	{r7}
 80096c4:	b083      	sub	sp, #12
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	6078      	str	r0, [r7, #4]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	4618      	mov	r0, r3
 80096ce:	370c      	adds	r7, #12
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr

080096d8 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 80096d8:	b580      	push	{r7, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7fe fdad 	bl	8008242 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>
 80096e8:	4603      	mov	r3, r0
 80096ea:	4618      	mov	r0, r3
 80096ec:	3708      	adds	r7, #8
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}

080096f2 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80096f2:	b580      	push	{r7, lr}
 80096f4:	b082      	sub	sp, #8
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	6078      	str	r0, [r7, #4]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	3310      	adds	r3, #16
 80096fe:	4618      	mov	r0, r3
 8009700:	f7fe fdad 	bl	800825e <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8009704:	4603      	mov	r3, r0
 8009706:	4618      	mov	r0, r3
 8009708:	3708      	adds	r7, #8
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
	...

08009710 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8009710:	b580      	push	{r7, lr}
 8009712:	b086      	sub	sp, #24
 8009714:	af00      	add	r7, sp, #0
 8009716:	60f8      	str	r0, [r7, #12]
 8009718:	60b9      	str	r1, [r7, #8]
 800971a:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 800971c:	68b8      	ldr	r0, [r7, #8]
 800971e:	f7ff ffdb 	bl	80096d8 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE4rowsEv>
 8009722:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8009724:	68b8      	ldr	r0, [r7, #8]
 8009726:	f7ff ffe4 	bl	80096f2 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE4colsEv>
 800972a:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	4618      	mov	r0, r3
 8009730:	f7fb fc9f 	bl	8005072 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8009734:	4602      	mov	r2, r0
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	4293      	cmp	r3, r2
 800973a:	d107      	bne.n	800974c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	4618      	mov	r0, r3
 8009740:	f7fb fc8c 	bl	800505c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8009744:	4602      	mov	r2, r0
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	4293      	cmp	r3, r2
 800974a:	d001      	beq.n	8009750 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 800974c:	2301      	movs	r3, #1
 800974e:	e000      	b.n	8009752 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8009750:	2300      	movs	r3, #0
 8009752:	2b00      	cmp	r3, #0
 8009754:	d005      	beq.n	8009762 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	693a      	ldr	r2, [r7, #16]
 800975a:	6979      	ldr	r1, [r7, #20]
 800975c:	4618      	mov	r0, r3
 800975e:	f7fe fba1 	bl	8007ea4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	4618      	mov	r0, r3
 8009766:	f7fb fc84 	bl	8005072 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800976a:	4602      	mov	r2, r0
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	4293      	cmp	r3, r2
 8009770:	d107      	bne.n	8009782 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	4618      	mov	r0, r3
 8009776:	f7fb fc71 	bl	800505c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800977a:	4602      	mov	r2, r0
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	4293      	cmp	r3, r2
 8009780:	d006      	beq.n	8009790 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8009782:	4b05      	ldr	r3, [pc, #20]	; (8009798 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8009784:	4a05      	ldr	r2, [pc, #20]	; (800979c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8009786:	f240 21fd 	movw	r1, #765	; 0x2fd
 800978a:	4805      	ldr	r0, [pc, #20]	; (80097a0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 800978c:	f014 fb8a 	bl	801dea4 <__assert_func>
}
 8009790:	bf00      	nop
 8009792:	3718      	adds	r7, #24
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}
 8009798:	08022384 	.word	0x08022384
 800979c:	080239d8 	.word	0x080239d8
 80097a0:	08022498 	.word	0x08022498

080097a4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSL_RKSN_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 80097a4:	b480      	push	{r7}
 80097a6:	b085      	sub	sp, #20
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	60f8      	str	r0, [r7, #12]
 80097ac:	60b9      	str	r1, [r7, #8]
 80097ae:	607a      	str	r2, [r7, #4]
 80097b0:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	68ba      	ldr	r2, [r7, #8]
 80097b6:	601a      	str	r2, [r3, #0]
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	687a      	ldr	r2, [r7, #4]
 80097bc:	605a      	str	r2, [r3, #4]
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	683a      	ldr	r2, [r7, #0]
 80097c2:	609a      	str	r2, [r3, #8]
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	69ba      	ldr	r2, [r7, #24]
 80097c8:	60da      	str	r2, [r3, #12]
  }
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	4618      	mov	r0, r3
 80097ce:	3714      	adds	r7, #20
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr

080097d8 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80097d8:	b580      	push	{r7, lr}
 80097da:	b082      	sub	sp, #8
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f000 fb32 	bl	8009e4a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSP_>
  }
 80097e6:	bf00      	nop
 80097e8:	3708      	adds	r7, #8
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi5ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b082      	sub	sp, #8
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80097f6:	2105      	movs	r1, #5
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f7fe fdba 	bl	8008372 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f000 fb33 	bl	8009e6a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi6ELi9EE3runERS9_>
  }
 8009804:	bf00      	nop
 8009806:	3708      	adds	r7, #8
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1ERKS6_>:
 800980c:	b580      	push	{r7, lr}
 800980e:	b082      	sub	sp, #8
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	6039      	str	r1, [r7, #0]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6839      	ldr	r1, [r7, #0]
 800981a:	4618      	mov	r0, r3
 800981c:	f000 fb34 	bl	8009e88 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	4618      	mov	r0, r3
 8009824:	3708      	adds	r7, #8
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}

0800982a <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEED1Ev>:
 800982a:	b480      	push	{r7}
 800982c:	b083      	sub	sp, #12
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	4618      	mov	r0, r3
 8009836:	370c      	adds	r7, #12
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr

08009840 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8009840:	b580      	push	{r7, lr}
 8009842:	b082      	sub	sp, #8
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4618      	mov	r0, r3
 800984e:	f7fb fc10 	bl	8005072 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8009852:	4603      	mov	r3, r0
 8009854:	4618      	mov	r0, r3
 8009856:	3708      	adds	r7, #8
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}

0800985c <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800985c:	b580      	push	{r7, lr}
 800985e:	b082      	sub	sp, #8
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	4618      	mov	r0, r3
 800986a:	f7fb fc9d 	bl	80051a8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800986e:	4603      	mov	r3, r0
 8009870:	4618      	mov	r0, r3
 8009872:	3708      	adds	r7, #8
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8009878:	b580      	push	{r7, lr}
 800987a:	b086      	sub	sp, #24
 800987c:	af00      	add	r7, sp, #0
 800987e:	60f8      	str	r0, [r7, #12]
 8009880:	60b9      	str	r1, [r7, #8]
 8009882:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8009884:	68b8      	ldr	r0, [r7, #8]
 8009886:	f7ff ffdb 	bl	8009840 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE4rowsEv>
 800988a:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 800988c:	68b8      	ldr	r0, [r7, #8]
 800988e:	f7ff ffe5 	bl	800985c <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE4colsEv>
 8009892:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	4618      	mov	r0, r3
 8009898:	f7fb fc91 	bl	80051be <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800989c:	4602      	mov	r2, r0
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d107      	bne.n	80098b4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7fb fc7e 	bl	80051a8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80098ac:	4602      	mov	r2, r0
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d001      	beq.n	80098b8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 80098b4:	2301      	movs	r3, #1
 80098b6:	e000      	b.n	80098ba <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 80098b8:	2300      	movs	r3, #0
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d005      	beq.n	80098ca <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	693a      	ldr	r2, [r7, #16]
 80098c2:	6979      	ldr	r1, [r7, #20]
 80098c4:	4618      	mov	r0, r3
 80098c6:	f7fe fb85 	bl	8007fd4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	4618      	mov	r0, r3
 80098ce:	f7fb fc76 	bl	80051be <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80098d2:	4602      	mov	r2, r0
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d107      	bne.n	80098ea <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	4618      	mov	r0, r3
 80098de:	f7fb fc63 	bl	80051a8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80098e2:	4602      	mov	r2, r0
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d006      	beq.n	80098f8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 80098ea:	4b05      	ldr	r3, [pc, #20]	; (8009900 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 80098ec:	4a05      	ldr	r2, [pc, #20]	; (8009904 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 80098ee:	f240 21fd 	movw	r1, #765	; 0x2fd
 80098f2:	4805      	ldr	r0, [pc, #20]	; (8009908 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 80098f4:	f014 fad6 	bl	801dea4 <__assert_func>
}
 80098f8:	bf00      	nop
 80098fa:	3718      	adds	r7, #24
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}
 8009900:	08022384 	.word	0x08022384
 8009904:	08023bb8 	.word	0x08023bb8
 8009908:	08022498 	.word	0x08022498

0800990c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS9_RKSB_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 800990c:	b480      	push	{r7}
 800990e:	b085      	sub	sp, #20
 8009910:	af00      	add	r7, sp, #0
 8009912:	60f8      	str	r0, [r7, #12]
 8009914:	60b9      	str	r1, [r7, #8]
 8009916:	607a      	str	r2, [r7, #4]
 8009918:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	68ba      	ldr	r2, [r7, #8]
 800991e:	601a      	str	r2, [r3, #0]
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	605a      	str	r2, [r3, #4]
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	683a      	ldr	r2, [r7, #0]
 800992a:	609a      	str	r2, [r3, #8]
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	69ba      	ldr	r2, [r7, #24]
 8009930:	60da      	str	r2, [r3, #12]
  }
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	4618      	mov	r0, r3
 8009936:	3714      	adds	r7, #20
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr

08009940 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009940:	b580      	push	{r7, lr}
 8009942:	b082      	sub	sp, #8
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f000 fad2 	bl	8009ef2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSD_>
  }
 800994e:	bf00      	nop
 8009950:	3708      	adds	r7, #8
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}

08009956 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
  evaluator() {}
 8009956:	b580      	push	{r7, lr}
 8009958:	b082      	sub	sp, #8
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	4618      	mov	r0, r3
 8009962:	f000 fad5 	bl	8009f10 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEEC1Ev>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	4618      	mov	r0, r3
 800996a:	3708      	adds	r7, #8
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}

08009970 <_ZN5Eigen6MatrixIfLi3ELi3ELi1ELi3ELi3EEC1IiiEERKT_RKT0_>:
    Matrix(const T0& x, const T1& y)
 8009970:	b580      	push	{r7, lr}
 8009972:	b084      	sub	sp, #16
 8009974:	af00      	add	r7, sp, #0
 8009976:	60f8      	str	r0, [r7, #12]
 8009978:	60b9      	str	r1, [r7, #8]
 800997a:	607a      	str	r2, [r7, #4]
    {
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	4618      	mov	r0, r3
 8009980:	f000 fae4 	bl	8009f4c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 8009984:	f000 faf2 	bl	8009f6c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init2<T0,T1>(x, y);
 8009988:	68f8      	ldr	r0, [r7, #12]
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	6819      	ldr	r1, [r3, #0]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681a      	ldr	r2, [r3, #0]
 8009992:	2300      	movs	r3, #0
 8009994:	f000 faf1 	bl	8009f7a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>
    }
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	4618      	mov	r0, r3
 800999c:	3710      	adds	r7, #16
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}

080099a2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1ERKS3_>:
  explicit evaluator(const XprType& m)
 80099a2:	b580      	push	{r7, lr}
 80099a4:	b082      	sub	sp, #8
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	6078      	str	r0, [r7, #4]
 80099aa:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	683a      	ldr	r2, [r7, #0]
 80099b0:	4611      	mov	r1, r2
 80099b2:	4618      	mov	r0, r3
 80099b4:	f000 faf5 	bl	8009fa2 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEEC1ERKS5_>
  { }
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	4618      	mov	r0, r3
 80099bc:	3708      	adds	r7, #8
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}

080099c2 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 80099c2:	b480      	push	{r7}
 80099c4:	b083      	sub	sp, #12
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	4618      	mov	r0, r3
 80099ce:	370c      	adds	r7, #12
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr

080099d8 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 80099d8:	b480      	push	{r7}
 80099da:	b083      	sub	sp, #12
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	3308      	adds	r3, #8
 80099e4:	4618      	mov	r0, r3
 80099e6:	370c      	adds	r7, #12
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr

080099f0 <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EENS_10DenseShapeES8_Li3EE6evalToINS3_IfLi3ELi3ELi1ELi3ELi3EEEEEvRT_RKS5_RKS7_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b088      	sub	sp, #32
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	60f8      	str	r0, [r7, #12]
 80099f8:	60b9      	str	r1, [r7, #8]
 80099fa:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 80099fc:	f107 0310 	add.w	r3, r7, #16
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	68b9      	ldr	r1, [r7, #8]
 8009a04:	4618      	mov	r0, r3
 8009a06:	f000 fae7 	bl	8009fd8 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE11lazyProductINS_9TransposeIS3_EEEEKNS1_IS4_T_Li1EEERKNS0_IS9_EE>
 8009a0a:	f107 031c 	add.w	r3, r7, #28
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f7fd fb5f 	bl	80070d2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8009a14:	f107 021c 	add.w	r2, r7, #28
 8009a18:	f107 0310 	add.w	r3, r7, #16
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	68f8      	ldr	r0, [r7, #12]
 8009a20:	f000 faf1 	bl	800a006 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8009a24:	bf00      	nop
 8009a26:	3720      	adds	r7, #32
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8009a34:	2202      	movs	r2, #2
 8009a36:	2101      	movs	r1, #1
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f7fe fd6a 	bl	8008512 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 faf2 	bl	800a028 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSL_>
  }
 8009a44:	bf00      	nop
 8009a46:	3708      	adds	r7, #8
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}

08009a4c <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1ERKSK_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b082      	sub	sp, #8
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	6039      	str	r1, [r7, #0]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6839      	ldr	r1, [r7, #0]
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f000 faf4 	bl	800a048 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffEC1ERKSK_>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	4618      	mov	r0, r3
 8009a64:	3708      	adds	r7, #8
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}

08009a6a <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8009a6a:	b480      	push	{r7}
 8009a6c:	b083      	sub	sp, #12
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	6078      	str	r0, [r7, #4]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	4618      	mov	r0, r3
 8009a76:	370c      	adds	r7, #12
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr

08009a80 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
 8009a80:	b480      	push	{r7}
 8009a82:	b083      	sub	sp, #12
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	370c      	adds	r7, #12
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr

08009a96 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8009a96:	b580      	push	{r7, lr}
 8009a98:	b082      	sub	sp, #8
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f7fe fd5f 	bl	8008564 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4rowsEv>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3708      	adds	r7, #8
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	3308      	adds	r3, #8
 8009abc:	4618      	mov	r0, r3
 8009abe:	f7fe fd5f 	bl	8008580 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3708      	adds	r7, #8
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b086      	sub	sp, #24
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	60f8      	str	r0, [r7, #12]
 8009ad4:	60b9      	str	r1, [r7, #8]
 8009ad6:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8009ad8:	68b8      	ldr	r0, [r7, #8]
 8009ada:	f7ff ffdc 	bl	8009a96 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE4rowsEv>
 8009ade:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8009ae0:	68b8      	ldr	r0, [r7, #8]
 8009ae2:	f7ff ffe5 	bl	8009ab0 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE4colsEv>
 8009ae6:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	4618      	mov	r0, r3
 8009aec:	f7fb fb67 	bl	80051be <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8009af0:	4602      	mov	r2, r0
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d107      	bne.n	8009b08 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	4618      	mov	r0, r3
 8009afc:	f7fb fb54 	bl	80051a8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8009b00:	4602      	mov	r2, r0
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d001      	beq.n	8009b0c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8009b08:	2301      	movs	r3, #1
 8009b0a:	e000      	b.n	8009b0e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d005      	beq.n	8009b1e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	693a      	ldr	r2, [r7, #16]
 8009b16:	6979      	ldr	r1, [r7, #20]
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f7fe fa5b 	bl	8007fd4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	4618      	mov	r0, r3
 8009b22:	f7fb fb4c 	bl	80051be <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8009b26:	4602      	mov	r2, r0
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d107      	bne.n	8009b3e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	4618      	mov	r0, r3
 8009b32:	f7fb fb39 	bl	80051a8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8009b36:	4602      	mov	r2, r0
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d006      	beq.n	8009b4c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8009b3e:	4b05      	ldr	r3, [pc, #20]	; (8009b54 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8009b40:	4a05      	ldr	r2, [pc, #20]	; (8009b58 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8009b42:	f240 21fd 	movw	r1, #765	; 0x2fd
 8009b46:	4805      	ldr	r0, [pc, #20]	; (8009b5c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8009b48:	f014 f9ac 	bl	801dea4 <__assert_func>
}
 8009b4c:	bf00      	nop
 8009b4e:	3718      	adds	r7, #24
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}
 8009b54:	08022384 	.word	0x08022384
 8009b58:	08023ccc 	.word	0x08023ccc
 8009b5c:	08022498 	.word	0x08022498

08009b60 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSO_RKSQ_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8009b60:	b480      	push	{r7}
 8009b62:	b085      	sub	sp, #20
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	60f8      	str	r0, [r7, #12]
 8009b68:	60b9      	str	r1, [r7, #8]
 8009b6a:	607a      	str	r2, [r7, #4]
 8009b6c:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	68ba      	ldr	r2, [r7, #8]
 8009b72:	601a      	str	r2, [r3, #0]
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	687a      	ldr	r2, [r7, #4]
 8009b78:	605a      	str	r2, [r3, #4]
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	683a      	ldr	r2, [r7, #0]
 8009b7e:	609a      	str	r2, [r3, #8]
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	69ba      	ldr	r2, [r7, #24]
 8009b84:	60da      	str	r2, [r3, #12]
  }
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3714      	adds	r7, #20
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr

08009b94 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f000 fa8e 	bl	800a0be <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSS_>
  }
 8009ba2:	bf00      	nop
 8009ba4:	3708      	adds	r7, #8
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}

08009baa <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEC1Ev>:
 8009baa:	b580      	push	{r7, lr}
 8009bac:	b082      	sub	sp, #8
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	6078      	str	r0, [r7, #4]
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 fa92 	bl	800a0dc <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEC1Ev>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3708      	adds	r7, #8
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}

08009bc2 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1ELi4EEC1Ev>:
class dense_product_base
 8009bc2:	b580      	push	{r7, lr}
 8009bc4:	b082      	sub	sp, #8
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f7ff ffed 	bl	8009baa <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEC1Ev>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3708      	adds	r7, #8
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}

08009bda <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8009bda:	b580      	push	{r7, lr}
 8009bdc:	b082      	sub	sp, #8
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	6078      	str	r0, [r7, #4]
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f7ff ffed 	bl	8009bc2 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1ELi4EEC1Ev>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	4618      	mov	r0, r3
 8009bec:	3708      	adds	r7, #8
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
	...

08009bf4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8009bf4:	b590      	push	{r4, r7, lr}
 8009bf6:	b085      	sub	sp, #20
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	60f8      	str	r0, [r7, #12]
 8009bfc:	60b9      	str	r1, [r7, #8]
 8009bfe:	607a      	str	r2, [r7, #4]
 8009c00:	68f8      	ldr	r0, [r7, #12]
 8009c02:	f7ff ffea 	bl	8009bda <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1ENS_5DenseEEC1Ev>
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	68ba      	ldr	r2, [r7, #8]
 8009c0a:	601a      	str	r2, [r3, #0]
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	3304      	adds	r3, #4
 8009c10:	6879      	ldr	r1, [r7, #4]
 8009c12:	4618      	mov	r0, r3
 8009c14:	f7fb f809 	bl	8004c2a <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERKSC_>
      eigen_assert(lhs.cols() == rhs.rows()
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f7fb fac4 	bl	80051a8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8009c20:	4604      	mov	r4, r0
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f7fc fc75 	bl	8006512 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4rowsEv>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	429c      	cmp	r4, r3
 8009c2c:	d005      	beq.n	8009c3a <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_+0x46>
 8009c2e:	4b06      	ldr	r3, [pc, #24]	; (8009c48 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_+0x54>)
 8009c30:	4a06      	ldr	r2, [pc, #24]	; (8009c4c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_+0x58>)
 8009c32:	2160      	movs	r1, #96	; 0x60
 8009c34:	4806      	ldr	r0, [pc, #24]	; (8009c50 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_+0x5c>)
 8009c36:	f014 f935 	bl	801dea4 <__assert_func>
 8009c3a:	bf00      	nop
    }
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3714      	adds	r7, #20
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd90      	pop	{r4, r7, pc}
 8009c46:	bf00      	nop
 8009c48:	0801ffcc 	.word	0x0801ffcc
 8009c4c:	08023f10 	.word	0x08023f10
 8009c50:	0802031c 	.word	0x0802031c

08009c54 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b084      	sub	sp, #16
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	60f8      	str	r0, [r7, #12]
 8009c5c:	60b9      	str	r1, [r7, #8]
 8009c5e:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8009c60:	68b9      	ldr	r1, [r7, #8]
 8009c62:	68f8      	ldr	r0, [r7, #12]
 8009c64:	f000 fa45 	bl	800a0f2 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	68b9      	ldr	r1, [r7, #8]
 8009c6c:	68f8      	ldr	r0, [r7, #12]
 8009c6e:	f000 fa6e 	bl	800a14e <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8009c72:	bf00      	nop
 8009c74:	3710      	adds	r7, #16
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}

08009c7a <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEELb0EE3runERS8_RKSE_>:
    static void run(const Derived&, const OtherDerived&)
 8009c7a:	b480      	push	{r7}
 8009c7c:	b083      	sub	sp, #12
 8009c7e:	af00      	add	r7, sp, #0
 8009c80:	6078      	str	r0, [r7, #4]
 8009c82:	6039      	str	r1, [r7, #0]
    }
 8009c84:	bf00      	nop
 8009c86:	370c      	adds	r7, #12
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr

08009c90 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1ERKSE_>:
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b082      	sub	sp, #8
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	6039      	str	r1, [r7, #0]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6839      	ldr	r1, [r7, #0]
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f000 fa8d 	bl	800a1be <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffEC1ERKSE_>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3708      	adds	r7, #8
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}

08009cae <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEED1Ev>:
 8009cae:	b480      	push	{r7}
 8009cb0:	b083      	sub	sp, #12
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6078      	str	r0, [r7, #4]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	4618      	mov	r0, r3
 8009cba:	370c      	adds	r7, #12
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr

08009cc4 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b082      	sub	sp, #8
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f7fe fccc 	bl	800866c <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4rowsEv>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3708      	adds	r7, #8
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}

08009cde <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8009cde:	b580      	push	{r7, lr}
 8009ce0:	b082      	sub	sp, #8
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	691b      	ldr	r3, [r3, #16]
 8009cea:	4618      	mov	r0, r3
 8009cec:	f7fb f9b6 	bl	800505c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3708      	adds	r7, #8
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}
	...

08009cfc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b086      	sub	sp, #24
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8009d08:	68b8      	ldr	r0, [r7, #8]
 8009d0a:	f7ff ffdb 	bl	8009cc4 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE4rowsEv>
 8009d0e:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8009d10:	68b8      	ldr	r0, [r7, #8]
 8009d12:	f7ff ffe4 	bl	8009cde <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE4colsEv>
 8009d16:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f7fb f9a9 	bl	8005072 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8009d20:	4602      	mov	r2, r0
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d107      	bne.n	8009d38 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f7fb f996 	bl	800505c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8009d30:	4602      	mov	r2, r0
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d001      	beq.n	8009d3c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8009d38:	2301      	movs	r3, #1
 8009d3a:	e000      	b.n	8009d3e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d005      	beq.n	8009d4e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	693a      	ldr	r2, [r7, #16]
 8009d46:	6979      	ldr	r1, [r7, #20]
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f7fe f8ab 	bl	8007ea4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	4618      	mov	r0, r3
 8009d52:	f7fb f98e 	bl	8005072 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8009d56:	4602      	mov	r2, r0
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d107      	bne.n	8009d6e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	4618      	mov	r0, r3
 8009d62:	f7fb f97b 	bl	800505c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8009d66:	4602      	mov	r2, r0
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d006      	beq.n	8009d7c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8009d6e:	4b05      	ldr	r3, [pc, #20]	; (8009d84 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8009d70:	4a05      	ldr	r2, [pc, #20]	; (8009d88 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8009d72:	f240 21fd 	movw	r1, #765	; 0x2fd
 8009d76:	4805      	ldr	r0, [pc, #20]	; (8009d8c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8009d78:	f014 f894 	bl	801dea4 <__assert_func>
}
 8009d7c:	bf00      	nop
 8009d7e:	3718      	adds	r7, #24
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}
 8009d84:	08022384 	.word	0x08022384
 8009d88:	0802417c 	.word	0x0802417c
 8009d8c:	08022498 	.word	0x08022498

08009d90 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8009d90:	b480      	push	{r7}
 8009d92:	b085      	sub	sp, #20
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	60f8      	str	r0, [r7, #12]
 8009d98:	60b9      	str	r1, [r7, #8]
 8009d9a:	607a      	str	r2, [r7, #4]
 8009d9c:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	68ba      	ldr	r2, [r7, #8]
 8009da2:	601a      	str	r2, [r3, #0]
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	687a      	ldr	r2, [r7, #4]
 8009da8:	605a      	str	r2, [r3, #4]
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	683a      	ldr	r2, [r7, #0]
 8009dae:	609a      	str	r2, [r3, #8]
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	69ba      	ldr	r2, [r7, #24]
 8009db4:	60da      	str	r2, [r3, #12]
  }
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	4618      	mov	r0, r3
 8009dba:	3714      	adds	r7, #20
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr

08009dc4 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b082      	sub	sp, #8
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f000 fa2c 	bl	800a22a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSL_>
  }
 8009dd2:	bf00      	nop
 8009dd4:	3708      	adds	r7, #8
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}

08009dda <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffEC1ERKSH_>:
  typedef Product<Lhs, Rhs, LazyProduct> XprType;
  typedef typename XprType::Scalar Scalar;
  typedef typename XprType::CoeffReturnType CoeffReturnType;

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  explicit product_evaluator(const XprType& xpr)
 8009dda:	b590      	push	{r4, r7, lr}
 8009ddc:	b083      	sub	sp, #12
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
 8009de2:	6039      	str	r1, [r7, #0]
    : m_lhs(xpr.lhs()),
      m_rhs(xpr.rhs()),
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
                            //       or perhaps declare them on the fly on the packet method... We have experiment to check what's best.
      m_innerDim(xpr.lhs().cols())
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 fa47 	bl	800a278 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>
 8009dea:	687c      	ldr	r4, [r7, #4]
    : m_lhs(xpr.lhs()),
 8009dec:	6838      	ldr	r0, [r7, #0]
 8009dee:	f000 fa2c 	bl	800a24a <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3lhsEv>
 8009df2:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 8009df4:	4619      	mov	r1, r3
 8009df6:	4620      	mov	r0, r4
 8009df8:	f7fa fcf8 	bl	80047ec <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
      m_rhs(xpr.rhs()),
 8009dfc:	6838      	ldr	r0, [r7, #0]
 8009dfe:	f000 fa2f 	bl	800a260 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3rhsEv>
 8009e02:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	3310      	adds	r3, #16
 8009e08:	6812      	ldr	r2, [r2, #0]
 8009e0a:	601a      	str	r2, [r3, #0]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	3314      	adds	r3, #20
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8009e10:	687a      	ldr	r2, [r7, #4]
      m_innerDim(xpr.lhs().cols())
 8009e12:	4611      	mov	r1, r2
 8009e14:	4618      	mov	r0, r3
 8009e16:	f000 fa3a 	bl	800a28e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERKSD_>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f103 0224 	add.w	r2, r3, #36	; 0x24
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	3310      	adds	r3, #16
      m_innerDim(xpr.lhs().cols())
 8009e24:	4619      	mov	r1, r3
 8009e26:	4610      	mov	r0, r2
 8009e28:	f000 fa40 	bl	800a2ac <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS5_>
 8009e2c:	6838      	ldr	r0, [r7, #0]
 8009e2e:	f000 fa0c 	bl	800a24a <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3lhsEv>
 8009e32:	4603      	mov	r3, r0
 8009e34:	4618      	mov	r0, r3
 8009e36:	f7fb fcc0 	bl	80057ba <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4colsEv>
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	629a      	str	r2, [r3, #40]	; 0x28
    std::cerr << "CanVectorizeInner=    " << CanVectorizeInner << "\n";
    std::cerr << "EvalToRowMajor=       " << EvalToRowMajor << "\n";
    std::cerr << "Alignment=            " << Alignment << "\n";
    std::cerr << "Flags=                " << Flags << "\n";
#endif
  }
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	4618      	mov	r0, r3
 8009e44:	370c      	adds	r7, #12
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd90      	pop	{r4, r7, pc}

08009e4a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009e4a:	b580      	push	{r7, lr}
 8009e4c:	b082      	sub	sp, #8
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8009e52:	2200      	movs	r2, #0
 8009e54:	2100      	movs	r1, #0
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f000 fa37 	bl	800a2ca <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 fa4d 	bl	800a2fc <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSP_>
  }
 8009e62:	bf00      	nop
 8009e64:	3708      	adds	r7, #8
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}

08009e6a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi6ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8009e6a:	b580      	push	{r7, lr}
 8009e6c:	b082      	sub	sp, #8
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8009e72:	2106      	movs	r1, #6
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f7fe fa7c 	bl	8008372 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f000 fa4e 	bl	800a31c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi7ELi9EE3runERS9_>
  }
 8009e80:	bf00      	nop
 8009e82:	3708      	adds	r7, #8
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>:
  explicit product_evaluator(const XprType& xpr)
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b082      	sub	sp, #8
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f000 fa69 	bl	800a36a <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 8009e98:	6838      	ldr	r0, [r7, #0]
 8009e9a:	f000 fa4e 	bl	800a33a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3lhsEv>
 8009e9e:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 8009ea4:	6838      	ldr	r0, [r7, #0]
 8009ea6:	f000 fa54 	bl	800a352 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3rhsEv>
 8009eaa:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	605a      	str	r2, [r3, #4]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 8009eba:	4619      	mov	r1, r3
 8009ebc:	4610      	mov	r0, r2
 8009ebe:	f7fd fd6f 	bl	80079a0 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	685b      	ldr	r3, [r3, #4]
      m_innerDim(xpr.lhs().cols())
 8009ecc:	4619      	mov	r1, r3
 8009ece:	4610      	mov	r0, r2
 8009ed0:	f7fc fe1b 	bl	8006b0a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 8009ed4:	6838      	ldr	r0, [r7, #0]
 8009ed6:	f000 fa30 	bl	800a33a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3lhsEv>
 8009eda:	4603      	mov	r3, r0
 8009edc:	4618      	mov	r0, r3
 8009ede:	f7fb f8bd 	bl	800505c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8009ee2:	4602      	mov	r2, r0
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	611a      	str	r2, [r3, #16]
  }
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	4618      	mov	r0, r3
 8009eec:	3708      	adds	r7, #8
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}

08009ef2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8009ef2:	b580      	push	{r7, lr}
 8009ef4:	b082      	sub	sp, #8
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8009efa:	2100      	movs	r1, #0
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f000 fa3f 	bl	800a380 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f000 fa5f 	bl	800a3c6 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSD_>
  }
 8009f08:	bf00      	nop
 8009f0a:	3708      	adds	r7, #8
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}

08009f10 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEEC1Ev>:
  evaluator()
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b082      	sub	sp, #8
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
    : m_d(0,OuterStrideAtCompileTime)
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f000 fa63 	bl	800a3e4 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2203      	movs	r2, #3
 8009f22:	2100      	movs	r1, #0
 8009f24:	4618      	mov	r0, r3
 8009f26:	f7fe fa05 	bl	8008334 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EEC1EPKfi>
  }
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3708      	adds	r7, #8
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b082      	sub	sp, #8
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f000 fa5c 	bl	800a3fa <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	4618      	mov	r0, r3
 8009f46:	3708      	adds	r7, #8
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}

08009f4c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b082      	sub	sp, #8
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f7ff ffed 	bl	8009f34 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f000 fa57 	bl	800a410 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EEC1Ev>
    }
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	4618      	mov	r0, r3
 8009f66:	3708      	adds	r7, #8
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}

08009f6c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE22_check_template_paramsEv>:
    static EIGEN_STRONG_INLINE void _check_template_params()
 8009f6c:	b480      	push	{r7}
 8009f6e:	af00      	add	r7, sp, #0
    }
 8009f70:	bf00      	nop
 8009f72:	46bd      	mov	sp, r7
 8009f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f78:	4770      	bx	lr

08009f7a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>:
    EIGEN_STRONG_INLINE void _init2(Index rows, Index cols, typename internal::enable_if<Base::SizeAtCompileTime!=2,T0>::type* = 0)
 8009f7a:	b580      	push	{r7, lr}
 8009f7c:	b086      	sub	sp, #24
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	60f8      	str	r0, [r7, #12]
 8009f82:	60b9      	str	r1, [r7, #8]
 8009f84:	607a      	str	r2, [r7, #4]
 8009f86:	603b      	str	r3, [r7, #0]
      const bool t0_is_integer_alike = internal::is_valid_index_type<T0>::value;
 8009f88:	2301      	movs	r3, #1
 8009f8a:	75fb      	strb	r3, [r7, #23]
      const bool t1_is_integer_alike = internal::is_valid_index_type<T1>::value;
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	75bb      	strb	r3, [r7, #22]
      resize(rows,cols);
 8009f90:	687a      	ldr	r2, [r7, #4]
 8009f92:	68b9      	ldr	r1, [r7, #8]
 8009f94:	68f8      	ldr	r0, [r7, #12]
 8009f96:	f000 fa49 	bl	800a42c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii>
    }
 8009f9a:	bf00      	nop
 8009f9c:	3718      	adds	r7, #24
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}

08009fa2 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 8009fa2:	b5b0      	push	{r4, r5, r7, lr}
 8009fa4:	b082      	sub	sp, #8
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	6078      	str	r0, [r7, #4]
 8009faa:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f000 fa19 	bl	800a3e4 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 8009fb2:	687c      	ldr	r4, [r7, #4]
 8009fb4:	6838      	ldr	r0, [r7, #0]
 8009fb6:	f000 fa6b 	bl	800a490 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4dataEv>
 8009fba:	4605      	mov	r5, r0
 8009fbc:	6838      	ldr	r0, [r7, #0]
 8009fbe:	f000 fa74 	bl	800a4aa <_ZNK5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEELi3EE11outerStrideEv>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	461a      	mov	r2, r3
 8009fc6:	4629      	mov	r1, r5
 8009fc8:	4620      	mov	r0, r4
 8009fca:	f7fe f9b3 	bl	8008334 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EEC1EPKfi>
  }
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3708      	adds	r7, #8
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bdb0      	pop	{r4, r5, r7, pc}

08009fd8 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE11lazyProductINS_9TransposeIS3_EEEEKNS1_IS4_T_Li1EEERKNS0_IS9_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 8009fd8:	b590      	push	{r4, r7, lr}
 8009fda:	b085      	sub	sp, #20
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	60f8      	str	r0, [r7, #12]
 8009fe0:	60b9      	str	r1, [r7, #8]
 8009fe2:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 8009fe4:	68b8      	ldr	r0, [r7, #8]
 8009fe6:	f7fb fd4a 	bl	8005a7e <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE7derivedEv>
 8009fea:	4604      	mov	r4, r0
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f7fb fd51 	bl	8005a94 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	461a      	mov	r2, r3
 8009ff6:	4621      	mov	r1, r4
 8009ff8:	68f8      	ldr	r0, [r7, #12]
 8009ffa:	f000 fa8b 	bl	800a514 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_>
}
 8009ffe:	68f8      	ldr	r0, [r7, #12]
 800a000:	3714      	adds	r7, #20
 800a002:	46bd      	mov	sp, r7
 800a004:	bd90      	pop	{r4, r7, pc}

0800a006 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800a006:	b580      	push	{r7, lr}
 800a008:	b086      	sub	sp, #24
 800a00a:	af00      	add	r7, sp, #0
 800a00c:	60f8      	str	r0, [r7, #12]
 800a00e:	60b9      	str	r1, [r7, #8]
 800a010:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800a016:	687a      	ldr	r2, [r7, #4]
 800a018:	68b9      	ldr	r1, [r7, #8]
 800a01a:	6978      	ldr	r0, [r7, #20]
 800a01c:	f000 faaa 	bl	800a574 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>
}
 800a020:	bf00      	nop
 800a022:	3718      	adds	r7, #24
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}

0800a028 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a028:	b580      	push	{r7, lr}
 800a02a:	b082      	sub	sp, #8
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a030:	2200      	movs	r2, #0
 800a032:	2102      	movs	r1, #2
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f7fe fa6c 	bl	8008512 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 faad 	bl	800a59a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSL_>
  }
 800a040:	bf00      	nop
 800a042:	3708      	adds	r7, #8
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}

0800a048 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffEC1ERKSK_>:
  explicit product_evaluator(const XprType& xpr)
 800a048:	b590      	push	{r4, r7, lr}
 800a04a:	b083      	sub	sp, #12
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f000 fac8 	bl	800a5e8 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>
 800a058:	687c      	ldr	r4, [r7, #4]
    : m_lhs(xpr.lhs()),
 800a05a:	6838      	ldr	r0, [r7, #0]
 800a05c:	f000 faad 	bl	800a5ba <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3lhsEv>
 800a060:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 800a062:	4619      	mov	r1, r3
 800a064:	4620      	mov	r0, r4
 800a066:	f000 faca 	bl	800a5fe <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEERKT_>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f103 040c 	add.w	r4, r3, #12
      m_rhs(xpr.rhs()),
 800a070:	6838      	ldr	r0, [r7, #0]
 800a072:	f000 faad 	bl	800a5d0 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3rhsEv>
 800a076:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 800a078:	4619      	mov	r1, r3
 800a07a:	4620      	mov	r0, r4
 800a07c:	f000 fad4 	bl	800a628 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS1_EEEEEERKT_>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	3310      	adds	r3, #16
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 800a084:	687a      	ldr	r2, [r7, #4]
      m_innerDim(xpr.lhs().cols())
 800a086:	4611      	mov	r1, r2
 800a088:	4618      	mov	r0, r3
 800a08a:	f7fc fd3e 	bl	8006b0a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f103 0214 	add.w	r2, r3, #20
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	330c      	adds	r3, #12
      m_innerDim(xpr.lhs().cols())
 800a098:	4619      	mov	r1, r3
 800a09a:	4610      	mov	r0, r2
 800a09c:	f000 fad9 	bl	800a652 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
 800a0a0:	6838      	ldr	r0, [r7, #0]
 800a0a2:	f000 fa8a 	bl	800a5ba <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3lhsEv>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f7fc f8b2 	bl	8006212 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>
 800a0ae:	4602      	mov	r2, r0
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	619a      	str	r2, [r3, #24]
  }
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	370c      	adds	r7, #12
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd90      	pop	{r4, r7, pc}

0800a0be <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a0be:	b580      	push	{r7, lr}
 800a0c0:	b082      	sub	sp, #8
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a0c6:	2100      	movs	r1, #0
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f000 fad2 	bl	800a672 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f000 faf2 	bl	800a6b8 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSS_>
  }
 800a0d4:	bf00      	nop
 800a0d6:	3708      	adds	r7, #8
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
    }
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	370c      	adds	r7, #12
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f0:	4770      	bx	lr

0800a0f2 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800a0f2:	b480      	push	{r7}
 800a0f4:	b083      	sub	sp, #12
 800a0f6:	af00      	add	r7, sp, #0
 800a0f8:	6078      	str	r0, [r7, #4]
 800a0fa:	6039      	str	r1, [r7, #0]
}
 800a0fc:	bf00      	nop
 800a0fe:	370c      	adds	r7, #12
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr

0800a108 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 800a108:	b580      	push	{r7, lr}
 800a10a:	b082      	sub	sp, #8
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	330c      	adds	r3, #12
 800a114:	4618      	mov	r0, r3
 800a116:	f7ff f983 	bl	8009420 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	3308      	adds	r3, #8
 800a11e:	4618      	mov	r0, r3
 800a120:	f7fb f9b9 	bl	8005496 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f000 fae5 	bl	800a6f4 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEED1Ev>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	4618      	mov	r0, r3
 800a12e:	3708      	adds	r7, #8
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}

0800a134 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 800a134:	b580      	push	{r7, lr}
 800a136:	b082      	sub	sp, #8
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	4618      	mov	r0, r3
 800a140:	f7ff ffe2 	bl	800a108 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffED1Ev>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	4618      	mov	r0, r3
 800a148:	3708      	adds	r7, #8
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}

0800a14e <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800a14e:	b580      	push	{r7, lr}
 800a150:	b090      	sub	sp, #64	; 0x40
 800a152:	af02      	add	r7, sp, #8
 800a154:	60f8      	str	r0, [r7, #12]
 800a156:	60b9      	str	r1, [r7, #8]
 800a158:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800a15a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a15e:	68b9      	ldr	r1, [r7, #8]
 800a160:	4618      	mov	r0, r3
 800a162:	f000 fab8 	bl	800a6d6 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEC1ERKSE_>
  resize_if_allowed(dst, src, func);
 800a166:	687a      	ldr	r2, [r7, #4]
 800a168:	68b9      	ldr	r1, [r7, #8]
 800a16a:	68f8      	ldr	r0, [r7, #12]
 800a16c:	f000 faea 	bl	800a744 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>
  DstEvaluatorType dstEvaluator(dst);
 800a170:	f107 0320 	add.w	r3, r7, #32
 800a174:	68f9      	ldr	r1, [r7, #12]
 800a176:	4618      	mov	r0, r3
 800a178:	f7fc fcc7 	bl	8006b0a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800a17c:	68f8      	ldr	r0, [r7, #12]
 800a17e:	f7fd fd05 	bl	8007b8c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 800a182:	4603      	mov	r3, r0
 800a184:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800a188:	f107 0120 	add.w	r1, r7, #32
 800a18c:	f107 0010 	add.w	r0, r7, #16
 800a190:	9300      	str	r3, [sp, #0]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f000 fb04 	bl	800a7a0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800a198:	f107 0310 	add.w	r3, r7, #16
 800a19c:	4618      	mov	r0, r3
 800a19e:	f000 fb19 	bl	800a7d4 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi1ELi2EE3runERSL_>
  DstEvaluatorType dstEvaluator(dst);
 800a1a2:	f107 0320 	add.w	r3, r7, #32
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f7fb f975 	bl	8005496 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800a1ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f7ff ffbf 	bl	800a134 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEED1Ev>
}
 800a1b6:	bf00      	nop
 800a1b8:	3738      	adds	r7, #56	; 0x38
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}

0800a1be <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffEC1ERKSE_>:
  explicit product_evaluator(const XprType& xpr)
 800a1be:	b590      	push	{r4, r7, lr}
 800a1c0:	b083      	sub	sp, #12
 800a1c2:	af00      	add	r7, sp, #0
 800a1c4:	6078      	str	r0, [r7, #4]
 800a1c6:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 fb25 	bl	800a818 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>
 800a1ce:	687c      	ldr	r4, [r7, #4]
    : m_lhs(xpr.lhs()),
 800a1d0:	6838      	ldr	r0, [r7, #0]
 800a1d2:	f000 fb0a 	bl	800a7ea <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3lhsEv>
 800a1d6:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 800a1d8:	4619      	mov	r1, r3
 800a1da:	4620      	mov	r0, r4
 800a1dc:	f000 fb27 	bl	800a82e <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS_7ProductINS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEERKT_>
      m_rhs(xpr.rhs()),
 800a1e0:	6838      	ldr	r0, [r7, #0]
 800a1e2:	f000 fb0d 	bl	800a800 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3rhsEv>
 800a1e6:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	625a      	str	r2, [r3, #36]	; 0x24
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	3328      	adds	r3, #40	; 0x28
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 800a1f0:	687a      	ldr	r2, [r7, #4]
      m_innerDim(xpr.lhs().cols())
 800a1f2:	4611      	mov	r1, r2
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f7fd fbd3 	bl	80079a0 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f103 022c 	add.w	r2, r3, #44	; 0x2c
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      m_innerDim(xpr.lhs().cols())
 800a204:	4619      	mov	r1, r3
 800a206:	4610      	mov	r0, r2
 800a208:	f7fd fbca 	bl	80079a0 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 800a20c:	6838      	ldr	r0, [r7, #0]
 800a20e:	f000 faec 	bl	800a7ea <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3lhsEv>
 800a212:	4603      	mov	r3, r0
 800a214:	4618      	mov	r0, r3
 800a216:	f7fc fb58 	bl	80068ca <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4colsEv>
 800a21a:	4602      	mov	r2, r0
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	631a      	str	r2, [r3, #48]	; 0x30
  }
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	4618      	mov	r0, r3
 800a224:	370c      	adds	r7, #12
 800a226:	46bd      	mov	sp, r7
 800a228:	bd90      	pop	{r4, r7, pc}

0800a22a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a22a:	b580      	push	{r7, lr}
 800a22c:	b082      	sub	sp, #8
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a232:	2200      	movs	r2, #0
 800a234:	2100      	movs	r1, #0
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f000 fb0e 	bl	800a858 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f000 fb24 	bl	800a88a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSL_>
  }
 800a242:	bf00      	nop
 800a244:	3708      	adds	r7, #8
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}

0800a24a <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800a24a:	b480      	push	{r7}
 800a24c:	b083      	sub	sp, #12
 800a24e:	af00      	add	r7, sp, #0
 800a250:	6078      	str	r0, [r7, #4]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	4618      	mov	r0, r3
 800a256:	370c      	adds	r7, #12
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr

0800a260 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800a260:	b480      	push	{r7}
 800a262:	b083      	sub	sp, #12
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	3310      	adds	r3, #16
 800a26c:	4618      	mov	r0, r3
 800a26e:	370c      	adds	r7, #12
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr

0800a278 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800a278:	b480      	push	{r7}
 800a27a:	b083      	sub	sp, #12
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	4618      	mov	r0, r3
 800a284:	370c      	adds	r7, #12
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr

0800a28e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERKSD_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800a28e:	b580      	push	{r7, lr}
 800a290:	b082      	sub	sp, #8
 800a292:	af00      	add	r7, sp, #0
 800a294:	6078      	str	r0, [r7, #4]
 800a296:	6039      	str	r1, [r7, #0]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6839      	ldr	r1, [r7, #0]
 800a29c:	4618      	mov	r0, r3
 800a29e:	f000 fb04 	bl	800a8aa <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffEC1ERKSD_>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3708      	adds	r7, #8
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS5_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b082      	sub	sp, #8
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6839      	ldr	r1, [r7, #0]
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f000 fb07 	bl	800a8ce <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedEfEC1ERKS5_>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3708      	adds	r7, #8
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}

0800a2ca <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 800a2ca:	b580      	push	{r7, lr}
 800a2cc:	b086      	sub	sp, #24
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	60f8      	str	r0, [r7, #12]
 800a2d2:	60b9      	str	r1, [r7, #8]
 800a2d4:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 800a2d6:	6879      	ldr	r1, [r7, #4]
 800a2d8:	68b8      	ldr	r0, [r7, #8]
 800a2da:	f000 fb0e 	bl	800a8fa <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 800a2de:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 800a2e0:	6879      	ldr	r1, [r7, #4]
 800a2e2:	68b8      	ldr	r0, [r7, #8]
 800a2e4:	f000 fb15 	bl	800a912 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 800a2e8:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 800a2ea:	693a      	ldr	r2, [r7, #16]
 800a2ec:	6979      	ldr	r1, [r7, #20]
 800a2ee:	68f8      	ldr	r0, [r7, #12]
 800a2f0:	f000 fb1b 	bl	800a92a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 800a2f4:	bf00      	nop
 800a2f6:	3718      	adds	r7, #24
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}

0800a2fc <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b082      	sub	sp, #8
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a304:	2201      	movs	r2, #1
 800a306:	2100      	movs	r1, #0
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f7ff ffde 	bl	800a2ca <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f000 fb31 	bl	800a976 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSP_>
  }
 800a314:	bf00      	nop
 800a316:	3708      	adds	r7, #8
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}

0800a31c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi7ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b082      	sub	sp, #8
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a324:	2107      	movs	r1, #7
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f7fe f823 	bl	8008372 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f000 fb32 	bl	800a996 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi8ELi9EE3runERS9_>
  }
 800a332:	bf00      	nop
 800a334:	3708      	adds	r7, #8
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}

0800a33a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800a33a:	b480      	push	{r7}
 800a33c:	b083      	sub	sp, #12
 800a33e:	af00      	add	r7, sp, #0
 800a340:	6078      	str	r0, [r7, #4]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4618      	mov	r0, r3
 800a348:	370c      	adds	r7, #12
 800a34a:	46bd      	mov	sp, r7
 800a34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a350:	4770      	bx	lr

0800a352 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800a352:	b480      	push	{r7}
 800a354:	b083      	sub	sp, #12
 800a356:	af00      	add	r7, sp, #0
 800a358:	6078      	str	r0, [r7, #4]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	4618      	mov	r0, r3
 800a360:	370c      	adds	r7, #12
 800a362:	46bd      	mov	sp, r7
 800a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a368:	4770      	bx	lr

0800a36a <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800a36a:	b480      	push	{r7}
 800a36c:	b083      	sub	sp, #12
 800a36e:	af00      	add	r7, sp, #0
 800a370:	6078      	str	r0, [r7, #4]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	4618      	mov	r0, r3
 800a376:	370c      	adds	r7, #12
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr

0800a380 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 800a380:	b5b0      	push	{r4, r5, r7, lr}
 800a382:	b084      	sub	sp, #16
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	689c      	ldr	r4, [r3, #8]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	6839      	ldr	r1, [r7, #0]
 800a394:	4618      	mov	r0, r3
 800a396:	f7fe fa52 	bl	800883e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 800a39a:	4605      	mov	r5, r0
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	6839      	ldr	r1, [r7, #0]
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f000 fb06 	bl	800a9b4 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffE5coeffEi>
 800a3a8:	eef0 7a40 	vmov.f32	s15, s0
 800a3ac:	edc7 7a03 	vstr	s15, [r7, #12]
 800a3b0:	f107 030c 	add.w	r3, r7, #12
 800a3b4:	461a      	mov	r2, r3
 800a3b6:	4629      	mov	r1, r5
 800a3b8:	4620      	mov	r0, r4
 800a3ba:	f7fe f9f9 	bl	80087b0 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800a3be:	bf00      	nop
 800a3c0:	3710      	adds	r7, #16
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bdb0      	pop	{r4, r5, r7, pc}

0800a3c6 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a3c6:	b580      	push	{r7, lr}
 800a3c8:	b082      	sub	sp, #8
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a3ce:	2101      	movs	r1, #1
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f7ff ffd5 	bl	800a380 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f000 fb25 	bl	800aa26 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSD_>
  }
 800a3dc:	bf00      	nop
 800a3de:	3708      	adds	r7, #8
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
 800a3e4:	b480      	push	{r7}
 800a3e6:	b083      	sub	sp, #12
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	370c      	adds	r7, #12
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr

0800a3fa <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800a3fa:	b480      	push	{r7}
 800a3fc:	b083      	sub	sp, #12
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	6078      	str	r0, [r7, #4]
    }
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	4618      	mov	r0, r3
 800a406:	370c      	adds	r7, #12
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr

0800a410 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EEC1Ev>:
    EIGEN_DEVICE_FUNC DenseStorage() {
 800a410:	b580      	push	{r7, lr}
 800a412:	b082      	sub	sp, #8
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	4618      	mov	r0, r3
 800a41c:	f000 fb12 	bl	800aa44 <_ZN5Eigen8internal11plain_arrayIfLi9ELi1ELi0EEC1Ev>
    }
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	4618      	mov	r0, r3
 800a424:	3708      	adds	r7, #8
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
	...

0800a42c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b086      	sub	sp, #24
 800a430:	af00      	add	r7, sp, #0
 800a432:	60f8      	str	r0, [r7, #12]
 800a434:	60b9      	str	r1, [r7, #8]
 800a436:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	2b03      	cmp	r3, #3
 800a43c:	d108      	bne.n	800a450 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x24>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2b03      	cmp	r3, #3
 800a442:	d105      	bne.n	800a450 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x24>
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	2b00      	cmp	r3, #0
 800a448:	db02      	blt.n	800a450 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x24>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	da06      	bge.n	800a45e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x32>
 800a450:	4b0c      	ldr	r3, [pc, #48]	; (800a484 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x58>)
 800a452:	4a0d      	ldr	r2, [pc, #52]	; (800a488 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x5c>)
 800a454:	f240 1111 	movw	r1, #273	; 0x111
 800a458:	480c      	ldr	r0, [pc, #48]	; (800a48c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x60>)
 800a45a:	f013 fd23 	bl	801dea4 <__assert_func>
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	617b      	str	r3, [r7, #20]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	613b      	str	r3, [r7, #16]
  }
 800a466:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 800a468:	68f8      	ldr	r0, [r7, #12]
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	fb02 f103 	mul.w	r1, r2, r3
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	68ba      	ldr	r2, [r7, #8]
 800a476:	f000 faf0 	bl	800aa5a <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE6resizeEiii>
    }
 800a47a:	bf00      	nop
 800a47c:	3718      	adds	r7, #24
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}
 800a482:	bf00      	nop
 800a484:	0802279c 	.word	0x0802279c
 800a488:	08024334 	.word	0x08024334
 800a48c:	080229b8 	.word	0x080229b8

0800a490 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 800a490:	b580      	push	{r7, lr}
 800a492:	b082      	sub	sp, #8
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	4618      	mov	r0, r3
 800a49c:	f000 faea 	bl	800aa74 <_ZNK5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4dataEv>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3708      	adds	r7, #8
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}

0800a4aa <_ZNK5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEELi3EE11outerStrideEv>:
    inline Index outerStride() const EIGEN_NOEXCEPT
 800a4aa:	b580      	push	{r7, lr}
 800a4ac:	b082      	sub	sp, #8
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	6078      	str	r0, [r7, #4]
      return derived().outerStride();
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f000 fae9 	bl	800aa8a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE7derivedEv>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f000 faf0 	bl	800aaa0 <_ZNK5Eigen6MatrixIfLi3ELi3ELi1ELi3ELi3EE11outerStrideEv>
 800a4c0:	4603      	mov	r3, r0
    }
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3708      	adds	r7, #8
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}

0800a4ca <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1EEEEC1Ev>:
 800a4ca:	b580      	push	{r7, lr}
 800a4cc:	b082      	sub	sp, #8
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	6078      	str	r0, [r7, #4]
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f000 faf0 	bl	800aab8 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1EEEEC1Ev>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3708      	adds	r7, #8
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}

0800a4e2 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1ELi3EEC1Ev>:
class dense_product_base
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b082      	sub	sp, #8
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f7ff ffed 	bl	800a4ca <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1EEEEC1Ev>
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3708      	adds	r7, #8
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}

0800a4fa <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800a4fa:	b580      	push	{r7, lr}
 800a4fc:	b082      	sub	sp, #8
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f7ff ffed 	bl	800a4e2 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1ELi3EEC1Ev>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	4618      	mov	r0, r3
 800a50c:	3708      	adds	r7, #8
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
	...

0800a514 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 800a514:	b590      	push	{r4, r7, lr}
 800a516:	b085      	sub	sp, #20
 800a518:	af00      	add	r7, sp, #0
 800a51a:	60f8      	str	r0, [r7, #12]
 800a51c:	60b9      	str	r1, [r7, #8]
 800a51e:	607a      	str	r2, [r7, #4]
 800a520:	68f8      	ldr	r0, [r7, #12]
 800a522:	f7ff ffea 	bl	800a4fa <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1ENS_5DenseEEC1Ev>
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	68ba      	ldr	r2, [r7, #8]
 800a52a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a52e:	e883 0003 	stmia.w	r3, {r0, r1}
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	3308      	adds	r3, #8
 800a536:	687a      	ldr	r2, [r7, #4]
 800a538:	6812      	ldr	r2, [r2, #0]
 800a53a:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 800a53c:	68b8      	ldr	r0, [r7, #8]
 800a53e:	f7fb fad8 	bl	8005af2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>
 800a542:	4604      	mov	r4, r0
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f7fb fae2 	bl	8005b0e <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800a54a:	4603      	mov	r3, r0
 800a54c:	429c      	cmp	r4, r3
 800a54e:	d005      	beq.n	800a55c <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_+0x48>
 800a550:	4b05      	ldr	r3, [pc, #20]	; (800a568 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_+0x54>)
 800a552:	4a06      	ldr	r2, [pc, #24]	; (800a56c <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_+0x58>)
 800a554:	2160      	movs	r1, #96	; 0x60
 800a556:	4806      	ldr	r0, [pc, #24]	; (800a570 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_+0x5c>)
 800a558:	f013 fca4 	bl	801dea4 <__assert_func>
 800a55c:	bf00      	nop
    }
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	4618      	mov	r0, r3
 800a562:	3714      	adds	r7, #20
 800a564:	46bd      	mov	sp, r7
 800a566:	bd90      	pop	{r4, r7, pc}
 800a568:	0801ffcc 	.word	0x0801ffcc
 800a56c:	080243c8 	.word	0x080243c8
 800a570:	0802031c 	.word	0x0802031c

0800a574 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800a574:	b580      	push	{r7, lr}
 800a576:	b084      	sub	sp, #16
 800a578:	af00      	add	r7, sp, #0
 800a57a:	60f8      	str	r0, [r7, #12]
 800a57c:	60b9      	str	r1, [r7, #8]
 800a57e:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800a580:	68b9      	ldr	r1, [r7, #8]
 800a582:	68f8      	ldr	r0, [r7, #12]
 800a584:	f000 fab9 	bl	800aafa <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800a588:	687a      	ldr	r2, [r7, #4]
 800a58a:	68b9      	ldr	r1, [r7, #8]
 800a58c:	68f8      	ldr	r0, [r7, #12]
 800a58e:	f000 fb14 	bl	800abba <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800a592:	bf00      	nop
 800a594:	3710      	adds	r7, #16
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}

0800a59a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a59a:	b580      	push	{r7, lr}
 800a59c:	b082      	sub	sp, #8
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	2102      	movs	r1, #2
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f7fd ffb3 	bl	8008512 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f000 fb3c 	bl	800ac2a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSL_>
  }
 800a5b2:	bf00      	nop
 800a5b4:	3708      	adds	r7, #8
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}

0800a5ba <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800a5ba:	b480      	push	{r7}
 800a5bc:	b083      	sub	sp, #12
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	6078      	str	r0, [r7, #4]
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	370c      	adds	r7, #12
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ce:	4770      	bx	lr

0800a5d0 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800a5d0:	b480      	push	{r7}
 800a5d2:	b083      	sub	sp, #12
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	3308      	adds	r3, #8
 800a5dc:	4618      	mov	r0, r3
 800a5de:	370c      	adds	r7, #12
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e6:	4770      	bx	lr

0800a5e8 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>:
 800a5e8:	b480      	push	{r7}
 800a5ea:	b083      	sub	sp, #12
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	370c      	adds	r7, #12
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fc:	4770      	bx	lr

0800a5fe <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEERKT_>:
    explicit Matrix(const T& x)
 800a5fe:	b580      	push	{r7, lr}
 800a600:	b082      	sub	sp, #8
 800a602:	af00      	add	r7, sp, #0
 800a604:	6078      	str	r0, [r7, #4]
 800a606:	6039      	str	r1, [r7, #0]
    {
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	4618      	mov	r0, r3
 800a60c:	f7fa fc75 	bl	8004efa <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 800a610:	f7fa fc83 	bl	8004f1a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6839      	ldr	r1, [r7, #0]
 800a618:	4618      	mov	r0, r3
 800a61a:	f000 fb16 	bl	800ac4a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEESA_EEvRKNS_9DenseBaseIT0_EE>
    }
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	4618      	mov	r0, r3
 800a622:	3708      	adds	r7, #8
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}

0800a628 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS1_EEEEEERKT_>:
    explicit Matrix(const T& x)
 800a628:	b580      	push	{r7, lr}
 800a62a:	b082      	sub	sp, #8
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	6039      	str	r1, [r7, #0]
    {
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	4618      	mov	r0, r3
 800a636:	f7fa fc3d 	bl	8004eb4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 800a63a:	f7fa fc4b 	bl	8004ed4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6839      	ldr	r1, [r7, #0]
 800a642:	4618      	mov	r0, r3
 800a644:	f000 fb0e 	bl	800ac64 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS2_EEEESK_EEvRKNS_9DenseBaseIT0_EE>
    }
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	4618      	mov	r0, r3
 800a64c:	3708      	adds	r7, #8
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}

0800a652 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>:
  explicit evaluator(const XprType& m)
 800a652:	b580      	push	{r7, lr}
 800a654:	b082      	sub	sp, #8
 800a656:	af00      	add	r7, sp, #0
 800a658:	6078      	str	r0, [r7, #4]
 800a65a:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	683a      	ldr	r2, [r7, #0]
 800a660:	4611      	mov	r1, r2
 800a662:	4618      	mov	r0, r3
 800a664:	f000 fb0b 	bl	800ac7e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKS5_>
  { }
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	4618      	mov	r0, r3
 800a66c:	3708      	adds	r7, #8
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}

0800a672 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 800a672:	b5b0      	push	{r4, r5, r7, lr}
 800a674:	b084      	sub	sp, #16
 800a676:	af00      	add	r7, sp, #0
 800a678:	6078      	str	r0, [r7, #4]
 800a67a:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	689c      	ldr	r4, [r3, #8]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	6839      	ldr	r1, [r7, #0]
 800a686:	4618      	mov	r0, r3
 800a688:	f7fe f8d9 	bl	800883e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 800a68c:	4605      	mov	r5, r0
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	6839      	ldr	r1, [r7, #0]
 800a694:	4618      	mov	r0, r3
 800a696:	f000 fb09 	bl	800acac <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffE5coeffEi>
 800a69a:	eef0 7a40 	vmov.f32	s15, s0
 800a69e:	edc7 7a03 	vstr	s15, [r7, #12]
 800a6a2:	f107 030c 	add.w	r3, r7, #12
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	4629      	mov	r1, r5
 800a6aa:	4620      	mov	r0, r4
 800a6ac:	f7fe f880 	bl	80087b0 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800a6b0:	bf00      	nop
 800a6b2:	3710      	adds	r7, #16
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bdb0      	pop	{r4, r5, r7, pc}

0800a6b8 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a6c0:	2101      	movs	r1, #1
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f7ff ffd5 	bl	800a672 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f000 fb28 	bl	800ad1e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSS_>
  }
 800a6ce:	bf00      	nop
 800a6d0:	3708      	adds	r7, #8
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}

0800a6d6 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEC1ERKSE_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800a6d6:	b580      	push	{r7, lr}
 800a6d8:	b082      	sub	sp, #8
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]
 800a6de:	6039      	str	r1, [r7, #0]
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6839      	ldr	r1, [r7, #0]
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f000 fb29 	bl	800ad3c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffEC1ERKSE_>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3708      	adds	r7, #8
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}

0800a6f4 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800a6f4:	b480      	push	{r7}
 800a6f6:	b083      	sub	sp, #12
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	4618      	mov	r0, r3
 800a700:	370c      	adds	r7, #12
 800a702:	46bd      	mov	sp, r7
 800a704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a708:	4770      	bx	lr

0800a70a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800a70a:	b580      	push	{r7, lr}
 800a70c:	b082      	sub	sp, #8
 800a70e:	af00      	add	r7, sp, #0
 800a710:	6078      	str	r0, [r7, #4]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	4618      	mov	r0, r3
 800a718:	f7fa fd51 	bl	80051be <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800a71c:	4603      	mov	r3, r0
 800a71e:	4618      	mov	r0, r3
 800a720:	3708      	adds	r7, #8
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}

0800a726 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800a726:	b580      	push	{r7, lr}
 800a728:	b082      	sub	sp, #8
 800a72a:	af00      	add	r7, sp, #0
 800a72c:	6078      	str	r0, [r7, #4]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	3304      	adds	r3, #4
 800a732:	4618      	mov	r0, r3
 800a734:	f7fc fc05 	bl	8006f42 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4colsEv>
 800a738:	4603      	mov	r3, r0
 800a73a:	4618      	mov	r0, r3
 800a73c:	3708      	adds	r7, #8
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}
	...

0800a744 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const Functor &/*func*/)
 800a744:	b590      	push	{r4, r7, lr}
 800a746:	b085      	sub	sp, #20
 800a748:	af00      	add	r7, sp, #0
 800a74a:	60f8      	str	r0, [r7, #12]
 800a74c:	60b9      	str	r1, [r7, #8]
 800a74e:	607a      	str	r2, [r7, #4]
  eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	4618      	mov	r0, r3
 800a754:	f7fa fd33 	bl	80051be <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800a758:	4604      	mov	r4, r0
 800a75a:	68b8      	ldr	r0, [r7, #8]
 800a75c:	f7ff ffd5 	bl	800a70a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE4rowsEv>
 800a760:	4603      	mov	r3, r0
 800a762:	429c      	cmp	r4, r3
 800a764:	d10a      	bne.n	800a77c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x38>
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	4618      	mov	r0, r3
 800a76a:	f7fa fd1d 	bl	80051a8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800a76e:	4604      	mov	r4, r0
 800a770:	68b8      	ldr	r0, [r7, #8]
 800a772:	f7ff ffd8 	bl	800a726 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE4colsEv>
 800a776:	4603      	mov	r3, r0
 800a778:	429c      	cmp	r4, r3
 800a77a:	d006      	beq.n	800a78a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x46>
 800a77c:	4b05      	ldr	r3, [pc, #20]	; (800a794 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x50>)
 800a77e:	4a06      	ldr	r2, [pc, #24]	; (800a798 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x54>)
 800a780:	f240 21f2 	movw	r1, #754	; 0x2f2
 800a784:	4805      	ldr	r0, [pc, #20]	; (800a79c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x58>)
 800a786:	f013 fb8d 	bl	801dea4 <__assert_func>
}
 800a78a:	bf00      	nop
 800a78c:	3714      	adds	r7, #20
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd90      	pop	{r4, r7, pc}
 800a792:	bf00      	nop
 800a794:	08022aa0 	.word	0x08022aa0
 800a798:	08024574 	.word	0x08024574
 800a79c:	08022498 	.word	0x08022498

0800a7a0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 800a7a0:	b480      	push	{r7}
 800a7a2:	b085      	sub	sp, #20
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	60f8      	str	r0, [r7, #12]
 800a7a8:	60b9      	str	r1, [r7, #8]
 800a7aa:	607a      	str	r2, [r7, #4]
 800a7ac:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	68ba      	ldr	r2, [r7, #8]
 800a7b2:	601a      	str	r2, [r3, #0]
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	687a      	ldr	r2, [r7, #4]
 800a7b8:	605a      	str	r2, [r3, #4]
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	683a      	ldr	r2, [r7, #0]
 800a7be:	609a      	str	r2, [r3, #8]
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	69ba      	ldr	r2, [r7, #24]
 800a7c4:	60da      	str	r2, [r3, #12]
  }
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3714      	adds	r7, #20
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr

0800a7d4 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi1ELi2EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b082      	sub	sp, #8
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f000 fae6 	bl	800adae <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi0ELi3EE3runERSL_>
  }
 800a7e2:	bf00      	nop
 800a7e4:	3708      	adds	r7, #8
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}

0800a7ea <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800a7ea:	b480      	push	{r7}
 800a7ec:	b083      	sub	sp, #12
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	6078      	str	r0, [r7, #4]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	370c      	adds	r7, #12
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr

0800a800 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800a800:	b480      	push	{r7}
 800a802:	b083      	sub	sp, #12
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	691b      	ldr	r3, [r3, #16]
 800a80c:	4618      	mov	r0, r3
 800a80e:	370c      	adds	r7, #12
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr

0800a818 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800a818:	b480      	push	{r7}
 800a81a:	b083      	sub	sp, #12
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	4618      	mov	r0, r3
 800a824:	370c      	adds	r7, #12
 800a826:	46bd      	mov	sp, r7
 800a828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82c:	4770      	bx	lr

0800a82e <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS_7ProductINS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEERKT_>:
    explicit Matrix(const T& x)
 800a82e:	b580      	push	{r7, lr}
 800a830:	b082      	sub	sp, #8
 800a832:	af00      	add	r7, sp, #0
 800a834:	6078      	str	r0, [r7, #4]
 800a836:	6039      	str	r1, [r7, #0]
    {
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	4618      	mov	r0, r3
 800a83c:	f7fa fb17 	bl	8004e6e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 800a840:	f7fa fb25 	bl	8004e8e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6839      	ldr	r1, [r7, #0]
 800a848:	4618      	mov	r0, r3
 800a84a:	f000 fabf 	bl	800adcc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEESF_EEvRKNS_9DenseBaseIT0_EE>
    }
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	4618      	mov	r0, r3
 800a852:	3708      	adds	r7, #8
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 800a858:	b580      	push	{r7, lr}
 800a85a:	b086      	sub	sp, #24
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	60f8      	str	r0, [r7, #12]
 800a860:	60b9      	str	r1, [r7, #8]
 800a862:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 800a864:	6879      	ldr	r1, [r7, #4]
 800a866:	68b8      	ldr	r0, [r7, #8]
 800a868:	f000 fabd 	bl	800ade6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 800a86c:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 800a86e:	6879      	ldr	r1, [r7, #4]
 800a870:	68b8      	ldr	r0, [r7, #8]
 800a872:	f000 fac4 	bl	800adfe <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 800a876:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 800a878:	693a      	ldr	r2, [r7, #16]
 800a87a:	6979      	ldr	r1, [r7, #20]
 800a87c:	68f8      	ldr	r0, [r7, #12]
 800a87e:	f000 faca 	bl	800ae16 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 800a882:	bf00      	nop
 800a884:	3718      	adds	r7, #24
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}

0800a88a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a88a:	b580      	push	{r7, lr}
 800a88c:	b082      	sub	sp, #8
 800a88e:	af00      	add	r7, sp, #0
 800a890:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a892:	2201      	movs	r2, #1
 800a894:	2100      	movs	r1, #0
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f7ff ffde 	bl	800a858 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f000 fae0 	bl	800ae62 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSL_>
  }
 800a8a2:	bf00      	nop
 800a8a4:	3708      	adds	r7, #8
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}

0800a8aa <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffEC1ERKSD_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800a8aa:	b580      	push	{r7, lr}
 800a8ac:	b082      	sub	sp, #8
 800a8ae:	af00      	add	r7, sp, #0
 800a8b0:	6078      	str	r0, [r7, #4]
 800a8b2:	6039      	str	r1, [r7, #0]
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f000 fae4 	bl	800ae82 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1Ev>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6839      	ldr	r1, [r7, #0]
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f000 faea 	bl	800ae98 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4DataC1ERKSD_>
  }
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3708      	adds	r7, #8
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}

0800a8ce <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedEfEC1ERKS5_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 800a8ce:	b590      	push	{r4, r7, lr}
 800a8d0:	b083      	sub	sp, #12
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	6078      	str	r0, [r7, #4]
 800a8d6:	6039      	str	r1, [r7, #0]
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f000 fb11 	bl	800af00 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 800a8de:	687c      	ldr	r4, [r7, #4]
 800a8e0:	6838      	ldr	r0, [r7, #0]
 800a8e2:	f000 fb01 	bl	800aee8 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	4620      	mov	r0, r4
 800a8ec:	f7fc f90d 	bl	8006b0a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	370c      	adds	r7, #12
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd90      	pop	{r4, r7, pc}

0800a8fa <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 800a8fa:	b480      	push	{r7}
 800a8fc:	b083      	sub	sp, #12
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	6078      	str	r0, [r7, #4]
 800a902:	6039      	str	r1, [r7, #0]
      : inner;
 800a904:	683b      	ldr	r3, [r7, #0]
  }
 800a906:	4618      	mov	r0, r3
 800a908:	370c      	adds	r7, #12
 800a90a:	46bd      	mov	sp, r7
 800a90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a910:	4770      	bx	lr

0800a912 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 800a912:	b480      	push	{r7}
 800a914:	b083      	sub	sp, #12
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
 800a91a:	6039      	str	r1, [r7, #0]
      : outer;
 800a91c:	687b      	ldr	r3, [r7, #4]
  }
 800a91e:	4618      	mov	r0, r3
 800a920:	370c      	adds	r7, #12
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr

0800a92a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 800a92a:	b5b0      	push	{r4, r5, r7, lr}
 800a92c:	b086      	sub	sp, #24
 800a92e:	af00      	add	r7, sp, #0
 800a930:	60f8      	str	r0, [r7, #12]
 800a932:	60b9      	str	r1, [r7, #8]
 800a934:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	689c      	ldr	r4, [r3, #8]
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	687a      	ldr	r2, [r7, #4]
 800a940:	68b9      	ldr	r1, [r7, #8]
 800a942:	4618      	mov	r0, r3
 800a944:	f7fe f9c4 	bl	8008cd0 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 800a948:	4605      	mov	r5, r0
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	685b      	ldr	r3, [r3, #4]
 800a94e:	687a      	ldr	r2, [r7, #4]
 800a950:	68b9      	ldr	r1, [r7, #8]
 800a952:	4618      	mov	r0, r3
 800a954:	f000 fadf 	bl	800af16 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffE5coeffEii>
 800a958:	eef0 7a40 	vmov.f32	s15, s0
 800a95c:	edc7 7a05 	vstr	s15, [r7, #20]
 800a960:	f107 0314 	add.w	r3, r7, #20
 800a964:	461a      	mov	r2, r3
 800a966:	4629      	mov	r1, r5
 800a968:	4620      	mov	r0, r4
 800a96a:	f7fd ff21 	bl	80087b0 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800a96e:	bf00      	nop
 800a970:	3718      	adds	r7, #24
 800a972:	46bd      	mov	sp, r7
 800a974:	bdb0      	pop	{r4, r5, r7, pc}

0800a976 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a976:	b580      	push	{r7, lr}
 800a978:	b082      	sub	sp, #8
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a97e:	2202      	movs	r2, #2
 800a980:	2100      	movs	r1, #0
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f7ff fca1 	bl	800a2ca <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 faf7 	bl	800af7c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSP_>
  }
 800a98e:	bf00      	nop
 800a990:	3708      	adds	r7, #8
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}

0800a996 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi8ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a996:	b580      	push	{r7, lr}
 800a998:	b082      	sub	sp, #8
 800a99a:	af00      	add	r7, sp, #0
 800a99c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a99e:	2108      	movs	r1, #8
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f7fd fce6 	bl	8008372 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f000 faf8 	bl	800af9c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi9ELi9EE3runERS9_>
  }
 800a9ac:	bf00      	nop
 800a9ae:	3708      	adds	r7, #8
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}

0800a9b4 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffE5coeffEi>:
  /* Allow index-based non-packet access. It is impossible though to allow index-based packed access,
   * which is why we don't set the LinearAccessBit.
   * TODO: this seems possible when the result is a vector
   */
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  const CoeffReturnType coeff(Index index) const
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b0a4      	sub	sp, #144	; 0x90
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
 800a9bc:	6039      	str	r1, [r7, #0]
  {
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6819      	ldr	r1, [r3, #0]
 800a9ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a9d2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f000 faea 	bl	800afb0 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 800a9dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a9e0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a9e4:	4611      	mov	r1, r2
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f000 faf5 	bl	800afd6 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6859      	ldr	r1, [r3, #4]
 800a9f0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f000 fafe 	bl	800aff8 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3colEi>
 800a9fc:	f107 030c 	add.w	r3, r7, #12
 800aa00:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800aa04:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f000 fb08 	bl	800b01e <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 800aa0e:	f107 030c 	add.w	r3, r7, #12
 800aa12:	4618      	mov	r0, r3
 800aa14:	f000 fb31 	bl	800b07a <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE3sumEv>
 800aa18:	eef0 7a40 	vmov.f32	s15, s0
  }
 800aa1c:	eeb0 0a67 	vmov.f32	s0, s15
 800aa20:	3790      	adds	r7, #144	; 0x90
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}

0800aa26 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800aa26:	b580      	push	{r7, lr}
 800aa28:	b082      	sub	sp, #8
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800aa2e:	2102      	movs	r1, #2
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f7ff fca5 	bl	800a380 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f000 fb3a 	bl	800b0b0 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSD_>
  }
 800aa3c:	bf00      	nop
 800aa3e:	3708      	adds	r7, #8
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}

0800aa44 <_ZN5Eigen8internal11plain_arrayIfLi9ELi1ELi0EEC1Ev>:
  plain_array()
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b082      	sub	sp, #8
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 800aa4c:	f7fc fbd4 	bl	80071f8 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi9EEEvv>
  }
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	4618      	mov	r0, r3
 800aa54:	3708      	adds	r7, #8
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}

0800aa5a <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE6resizeEiii>:
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
 800aa5a:	b480      	push	{r7}
 800aa5c:	b085      	sub	sp, #20
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	60f8      	str	r0, [r7, #12]
 800aa62:	60b9      	str	r1, [r7, #8]
 800aa64:	607a      	str	r2, [r7, #4]
 800aa66:	603b      	str	r3, [r7, #0]
 800aa68:	bf00      	nop
 800aa6a:	3714      	adds	r7, #20
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa72:	4770      	bx	lr

0800aa74 <_ZNK5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 800aa74:	b480      	push	{r7}
 800aa76:	b083      	sub	sp, #12
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	4618      	mov	r0, r3
 800aa80:	370c      	adds	r7, #12
 800aa82:	46bd      	mov	sp, r7
 800aa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa88:	4770      	bx	lr

0800aa8a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800aa8a:	b480      	push	{r7}
 800aa8c:	b083      	sub	sp, #12
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	6078      	str	r0, [r7, #4]
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	4618      	mov	r0, r3
 800aa96:	370c      	adds	r7, #12
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr

0800aaa0 <_ZNK5Eigen6MatrixIfLi3ELi3ELi1ELi3ELi3EE11outerStrideEv>:
    inline Index outerStride() const EIGEN_NOEXCEPT { return this->innerSize(); }
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b082      	sub	sp, #8
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f000 fb0b 	bl	800b0c4 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE9innerSizeEv>
 800aaae:	4603      	mov	r3, r0
 800aab0:	4618      	mov	r0, r3
 800aab2:	3708      	adds	r7, #8
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800aab8:	b480      	push	{r7}
 800aaba:	b083      	sub	sp, #12
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
    }
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	4618      	mov	r0, r3
 800aac4:	370c      	adds	r7, #12
 800aac6:	46bd      	mov	sp, r7
 800aac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aacc:	4770      	bx	lr

0800aace <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 800aace:	b580      	push	{r7, lr}
 800aad0:	b082      	sub	sp, #8
 800aad2:	af00      	add	r7, sp, #0
 800aad4:	6078      	str	r0, [r7, #4]
 800aad6:	f000 fb01 	bl	800b0dc <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4rowsEv>
 800aada:	4603      	mov	r3, r0
 800aadc:	4618      	mov	r0, r3
 800aade:	3708      	adds	r7, #8
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}

0800aae4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b082      	sub	sp, #8
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	f000 fafe 	bl	800b0ec <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4colsEv>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3708      	adds	r7, #8
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}

0800aafa <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800aafa:	b580      	push	{r7, lr}
 800aafc:	b082      	sub	sp, #8
 800aafe:	af00      	add	r7, sp, #0
 800ab00:	6078      	str	r0, [r7, #4]
 800ab02:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	4618      	mov	r0, r3
 800ab08:	f7ff ffe1 	bl	800aace <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4rowsEv>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	2b01      	cmp	r3, #1
 800ab10:	dd08      	ble.n	800ab24 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_+0x2a>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	4618      	mov	r0, r3
 800ab16:	f7ff ffe5 	bl	800aae4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	dd01      	ble.n	800ab24 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_+0x2a>
 800ab20:	2301      	movs	r3, #1
 800ab22:	e000      	b.n	800ab26 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_+0x2c>
 800ab24:	2300      	movs	r3, #0
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d003      	beq.n	800ab32 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 800ab2a:	6839      	ldr	r1, [r7, #0]
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f000 fae5 	bl	800b0fc <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEELb0EE3runERKS3_RKS9_>
}
 800ab32:	bf00      	nop
 800ab34:	3708      	adds	r7, #8
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}

0800ab3a <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800ab3a:	b580      	push	{r7, lr}
 800ab3c:	b082      	sub	sp, #8
 800ab3e:	af00      	add	r7, sp, #0
 800ab40:	6078      	str	r0, [r7, #4]
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	4618      	mov	r0, r3
 800ab46:	f7fc fd1c 	bl	8007582 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f000 fafb 	bl	800b146 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	4618      	mov	r0, r3
 800ab54:	3708      	adds	r7, #8
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}

0800ab5a <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800ab5a:	b580      	push	{r7, lr}
 800ab5c:	b082      	sub	sp, #8
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	6078      	str	r0, [r7, #4]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	4618      	mov	r0, r3
 800ab66:	f7ff ffe8 	bl	800ab3a <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS0_10IndexBasedEfED1Ev>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3708      	adds	r7, #8
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}

0800ab74 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b082      	sub	sp, #8
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	332c      	adds	r3, #44	; 0x2c
 800ab80:	4618      	mov	r0, r3
 800ab82:	f7ff ffea 	bl	800ab5a <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	3328      	adds	r3, #40	; 0x28
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f7fc fcf9 	bl	8007582 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f000 facd 	bl	800b130 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEED1Ev>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3708      	adds	r7, #8
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b082      	sub	sp, #8
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	4618      	mov	r0, r3
 800abac:	f7ff ffe2 	bl	800ab74 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffED1Ev>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	4618      	mov	r0, r3
 800abb4:	3708      	adds	r7, #8
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}

0800abba <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800abba:	b580      	push	{r7, lr}
 800abbc:	b098      	sub	sp, #96	; 0x60
 800abbe:	af02      	add	r7, sp, #8
 800abc0:	60f8      	str	r0, [r7, #12]
 800abc2:	60b9      	str	r1, [r7, #8]
 800abc4:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800abc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800abca:	68b9      	ldr	r1, [r7, #8]
 800abcc:	4618      	mov	r0, r3
 800abce:	f000 faa0 	bl	800b112 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEEC1ERKS8_>
  resize_if_allowed(dst, src, func);
 800abd2:	687a      	ldr	r2, [r7, #4]
 800abd4:	68b9      	ldr	r1, [r7, #8]
 800abd6:	68f8      	ldr	r0, [r7, #12]
 800abd8:	f000 fadc 	bl	800b194 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800abdc:	f107 0320 	add.w	r3, r7, #32
 800abe0:	68f9      	ldr	r1, [r7, #12]
 800abe2:	4618      	mov	r0, r3
 800abe4:	f7fe fedd 	bl	80099a2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800abe8:	68f8      	ldr	r0, [r7, #12]
 800abea:	f000 fb1d 	bl	800b228 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE18const_cast_derivedEv>
 800abee:	4603      	mov	r3, r0
 800abf0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800abf4:	f107 0120 	add.w	r1, r7, #32
 800abf8:	f107 0010 	add.w	r0, r7, #16
 800abfc:	9300      	str	r3, [sp, #0]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f000 fb1d 	bl	800b23e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSC_RKSE_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800ac04:	f107 0310 	add.w	r3, r7, #16
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f000 fb32 	bl	800b272 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSG_>
  DstEvaluatorType dstEvaluator(dst);
 800ac0e:	f107 0320 	add.w	r3, r7, #32
 800ac12:	4618      	mov	r0, r3
 800ac14:	f7fc fd8a 	bl	800772c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800ac18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f7ff ffbf 	bl	800aba0 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEED1Ev>
}
 800ac22:	bf00      	nop
 800ac24:	3758      	adds	r7, #88	; 0x58
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}

0800ac2a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800ac2a:	b580      	push	{r7, lr}
 800ac2c:	b082      	sub	sp, #8
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800ac32:	2202      	movs	r2, #2
 800ac34:	2102      	movs	r1, #2
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f7fd fc6b 	bl	8008512 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f000 fb23 	bl	800b288 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSL_>
  }
 800ac42:	bf00      	nop
 800ac44:	3708      	adds	r7, #8
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}

0800ac4a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEESA_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800ac4a:	b580      	push	{r7, lr}
 800ac4c:	b082      	sub	sp, #8
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	6078      	str	r0, [r7, #4]
 800ac52:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800ac54:	6839      	ldr	r1, [r7, #0]
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f000 fb20 	bl	800b29c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800ac5c:	bf00      	nop
 800ac5e:	3708      	adds	r7, #8
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}

0800ac64 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS2_EEEESK_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b082      	sub	sp, #8
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800ac6e:	6839      	ldr	r1, [r7, #0]
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f000 fb34 	bl	800b2de <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS2_EEEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800ac76:	bf00      	nop
 800ac78:	3708      	adds	r7, #8
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}

0800ac7e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 800ac7e:	b590      	push	{r4, r7, lr}
 800ac80:	b083      	sub	sp, #12
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	6078      	str	r0, [r7, #4]
 800ac86:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f000 fb56 	bl	800b33a <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 800ac8e:	687c      	ldr	r4, [r7, #4]
 800ac90:	6838      	ldr	r0, [r7, #0]
 800ac92:	f000 fb45 	bl	800b320 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4dataEv>
 800ac96:	4603      	mov	r3, r0
 800ac98:	2200      	movs	r2, #0
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	4620      	mov	r0, r4
 800ac9e:	f7fc fad8 	bl	8007252 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	4618      	mov	r0, r3
 800aca6:	370c      	adds	r7, #12
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd90      	pop	{r4, r7, pc}

0800acac <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffE5coeffEi>:
  const CoeffReturnType coeff(Index index) const
 800acac:	b580      	push	{r7, lr}
 800acae:	b0a2      	sub	sp, #136	; 0x88
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	6039      	str	r1, [r7, #0]
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 800acbc:	2300      	movs	r3, #0
 800acbe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800acc2:	6879      	ldr	r1, [r7, #4]
 800acc4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800acc8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800accc:	4618      	mov	r0, r3
 800acce:	f000 fb3f 	bl	800b350 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3rowEi>
 800acd2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800acd6:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800acda:	4611      	mov	r1, r2
 800acdc:	4618      	mov	r0, r3
 800acde:	f000 fb4a 	bl	800b376 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE9transposeEv>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f103 010c 	add.w	r1, r3, #12
 800ace8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800acec:	2200      	movs	r2, #0
 800acee:	4618      	mov	r0, r3
 800acf0:	f000 fb52 	bl	800b398 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE3colEi>
 800acf4:	f107 030c 	add.w	r3, r7, #12
 800acf8:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800acfc:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800ad00:	4618      	mov	r0, r3
 800ad02:	f000 fb5c 	bl	800b3be <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 800ad06:	f107 030c 	add.w	r3, r7, #12
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f000 fb85 	bl	800b41a <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE3sumEv>
 800ad10:	eef0 7a40 	vmov.f32	s15, s0
  }
 800ad14:	eeb0 0a67 	vmov.f32	s0, s15
 800ad18:	3788      	adds	r7, #136	; 0x88
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}

0800ad1e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800ad1e:	b580      	push	{r7, lr}
 800ad20:	b082      	sub	sp, #8
 800ad22:	af00      	add	r7, sp, #0
 800ad24:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800ad26:	2102      	movs	r1, #2
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f7ff fca2 	bl	800a672 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f000 fb8e 	bl	800b450 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSS_>
  }
 800ad34:	bf00      	nop
 800ad36:	3708      	adds	r7, #8
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffEC1ERKSE_>:
  explicit product_evaluator(const XprType& xpr)
 800ad3c:	b590      	push	{r4, r7, lr}
 800ad3e:	b083      	sub	sp, #12
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f000 fba4 	bl	800b494 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 800ad4c:	6838      	ldr	r0, [r7, #0]
 800ad4e:	f000 fb89 	bl	800b464 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3lhsEv>
 800ad52:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	601a      	str	r2, [r3, #0]
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	1d1c      	adds	r4, r3, #4
      m_rhs(xpr.rhs()),
 800ad5c:	6838      	ldr	r0, [r7, #0]
 800ad5e:	f000 fb8d 	bl	800b47c <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3rhsEv>
 800ad62:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 800ad64:	4619      	mov	r1, r3
 800ad66:	4620      	mov	r0, r4
 800ad68:	f000 fb9f 	bl	800b4aa <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS_7ProductINS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEERKT_>
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 800ad76:	4619      	mov	r1, r3
 800ad78:	4610      	mov	r0, r2
 800ad7a:	f7fb fec6 	bl	8006b0a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	3304      	adds	r3, #4
      m_innerDim(xpr.lhs().cols())
 800ad88:	4619      	mov	r1, r3
 800ad8a:	4610      	mov	r0, r2
 800ad8c:	f7ff fc61 	bl	800a652 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
 800ad90:	6838      	ldr	r0, [r7, #0]
 800ad92:	f000 fb67 	bl	800b464 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3lhsEv>
 800ad96:	4603      	mov	r3, r0
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f7fa fa05 	bl	80051a8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800ad9e:	4602      	mov	r2, r0
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	611a      	str	r2, [r3, #16]
  }
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	4618      	mov	r0, r3
 800ada8:	370c      	adds	r7, #12
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd90      	pop	{r4, r7, pc}

0800adae <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi0ELi3EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800adae:	b580      	push	{r7, lr}
 800adb0:	b082      	sub	sp, #8
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800adb6:	2100      	movs	r1, #0
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f000 fb8b 	bl	800b4d4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f000 fbab 	bl	800b51a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi1ELi3EE3runERSL_>
  }
 800adc4:	bf00      	nop
 800adc6:	3708      	adds	r7, #8
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}

0800adcc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEESF_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800adcc:	b580      	push	{r7, lr}
 800adce:	b082      	sub	sp, #8
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
 800add4:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800add6:	6839      	ldr	r1, [r7, #0]
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f000 fbad 	bl	800b538 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800adde:	bf00      	nop
 800ade0:	3708      	adds	r7, #8
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}

0800ade6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 800ade6:	b480      	push	{r7}
 800ade8:	b083      	sub	sp, #12
 800adea:	af00      	add	r7, sp, #0
 800adec:	6078      	str	r0, [r7, #4]
 800adee:	6039      	str	r1, [r7, #0]
      : inner;
 800adf0:	683b      	ldr	r3, [r7, #0]
  }
 800adf2:	4618      	mov	r0, r3
 800adf4:	370c      	adds	r7, #12
 800adf6:	46bd      	mov	sp, r7
 800adf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfc:	4770      	bx	lr

0800adfe <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 800adfe:	b480      	push	{r7}
 800ae00:	b083      	sub	sp, #12
 800ae02:	af00      	add	r7, sp, #0
 800ae04:	6078      	str	r0, [r7, #4]
 800ae06:	6039      	str	r1, [r7, #0]
      : outer;
 800ae08:	687b      	ldr	r3, [r7, #4]
  }
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	370c      	adds	r7, #12
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae14:	4770      	bx	lr

0800ae16 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 800ae16:	b5b0      	push	{r4, r5, r7, lr}
 800ae18:	b086      	sub	sp, #24
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	60f8      	str	r0, [r7, #12]
 800ae1e:	60b9      	str	r1, [r7, #8]
 800ae20:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	689c      	ldr	r4, [r3, #8]
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	687a      	ldr	r2, [r7, #4]
 800ae2c:	68b9      	ldr	r1, [r7, #8]
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f7fd ff4e 	bl	8008cd0 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 800ae34:	4605      	mov	r5, r0
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	685b      	ldr	r3, [r3, #4]
 800ae3a:	687a      	ldr	r2, [r7, #4]
 800ae3c:	68b9      	ldr	r1, [r7, #8]
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f000 fb9b 	bl	800b57a <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffE5coeffEii>
 800ae44:	eef0 7a40 	vmov.f32	s15, s0
 800ae48:	edc7 7a05 	vstr	s15, [r7, #20]
 800ae4c:	f107 0314 	add.w	r3, r7, #20
 800ae50:	461a      	mov	r2, r3
 800ae52:	4629      	mov	r1, r5
 800ae54:	4620      	mov	r0, r4
 800ae56:	f7fd fcab 	bl	80087b0 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800ae5a:	bf00      	nop
 800ae5c:	3718      	adds	r7, #24
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bdb0      	pop	{r4, r5, r7, pc}

0800ae62 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800ae62:	b580      	push	{r7, lr}
 800ae64:	b082      	sub	sp, #8
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800ae6a:	2202      	movs	r2, #2
 800ae6c:	2100      	movs	r1, #0
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f7ff fcf2 	bl	800a858 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f000 fbb2 	bl	800b5de <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSL_>
  }
 800ae7a:	bf00      	nop
 800ae7c:	3708      	adds	r7, #8
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}

0800ae82 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800ae82:	b480      	push	{r7}
 800ae84:	b083      	sub	sp, #12
 800ae86:	af00      	add	r7, sp, #0
 800ae88:	6078      	str	r0, [r7, #4]
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	370c      	adds	r7, #12
 800ae90:	46bd      	mov	sp, r7
 800ae92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae96:	4770      	bx	lr

0800ae98 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4DataC1ERKSD_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800ae98:	b590      	push	{r4, r7, lr}
 800ae9a:	b083      	sub	sp, #12
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	6039      	str	r1, [r7, #0]
 800aea2:	687c      	ldr	r4, [r7, #4]
 800aea4:	6838      	ldr	r0, [r7, #0]
 800aea6:	f000 fbaa 	bl	800b5fe <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE7functorEv>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	4619      	mov	r1, r3
 800aeae:	4620      	mov	r0, r4
 800aeb0:	f7fa fc0a 	bl	80056c8 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	1d1c      	adds	r4, r3, #4
 800aeb8:	6838      	ldr	r0, [r7, #0]
 800aeba:	f000 fbac 	bl	800b616 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3lhsEv>
 800aebe:	4603      	mov	r3, r0
 800aec0:	4619      	mov	r1, r3
 800aec2:	4620      	mov	r0, r4
 800aec4:	f000 fbbf 	bl	800b646 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS4_>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f103 0408 	add.w	r4, r3, #8
 800aece:	6838      	ldr	r0, [r7, #0]
 800aed0:	f000 fbad 	bl	800b62e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3rhsEv>
 800aed4:	4603      	mov	r3, r0
 800aed6:	4619      	mov	r1, r3
 800aed8:	4620      	mov	r0, r4
 800aeda:	f000 fbc3 	bl	800b664 <_ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERS9_>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	4618      	mov	r0, r3
 800aee2:	370c      	adds	r7, #12
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd90      	pop	{r4, r7, pc}

0800aee8 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 800aee8:	b480      	push	{r7}
 800aeea:	b083      	sub	sp, #12
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	4618      	mov	r0, r3
 800aef6:	370c      	adds	r7, #12
 800aef8:	46bd      	mov	sp, r7
 800aefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefe:	4770      	bx	lr

0800af00 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800af00:	b480      	push	{r7}
 800af02:	b083      	sub	sp, #12
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	4618      	mov	r0, r3
 800af0c:	370c      	adds	r7, #12
 800af0e:	46bd      	mov	sp, r7
 800af10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af14:	4770      	bx	lr

0800af16 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 800af16:	b580      	push	{r7, lr}
 800af18:	b0a4      	sub	sp, #144	; 0x90
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	60f8      	str	r0, [r7, #12]
 800af1e:	60b9      	str	r1, [r7, #8]
 800af20:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800af22:	68f9      	ldr	r1, [r7, #12]
 800af24:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800af28:	68ba      	ldr	r2, [r7, #8]
 800af2a:	4618      	mov	r0, r3
 800af2c:	f000 fbde 	bl	800b6ec <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE3rowEi>
 800af30:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800af34:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800af38:	4611      	mov	r1, r2
 800af3a:	4618      	mov	r0, r3
 800af3c:	f000 fbf9 	bl	800b732 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE9transposeEv>
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	f103 0110 	add.w	r1, r3, #16
 800af46:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800af4a:	687a      	ldr	r2, [r7, #4]
 800af4c:	4618      	mov	r0, r3
 800af4e:	f000 fc01 	bl	800b754 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE3colEi>
 800af52:	f107 0310 	add.w	r3, r7, #16
 800af56:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800af5a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800af5e:	4618      	mov	r0, r3
 800af60:	f000 fc0b 	bl	800b77a <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS1_IS8_EELi1ELi1ELb0EEEEEKNS3_INS5_IfNS4_6traitsIT_E6ScalarEEEKSJ_KSQ_EERKNS0_ISQ_EE>
 800af64:	f107 0310 	add.w	r3, r7, #16
 800af68:	4618      	mov	r0, r3
 800af6a:	f000 fc34 	bl	800b7d6 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE3sumEv>
 800af6e:	eef0 7a40 	vmov.f32	s15, s0
  }
 800af72:	eeb0 0a67 	vmov.f32	s0, s15
 800af76:	3790      	adds	r7, #144	; 0x90
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}

0800af7c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b082      	sub	sp, #8
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800af84:	2200      	movs	r2, #0
 800af86:	2101      	movs	r1, #1
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f7ff f99e 	bl	800a2ca <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f000 fc3c 	bl	800b80c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSP_>
  }
 800af94:	bf00      	nop
 800af96:	3708      	adds	r7, #8
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi9ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800af9c:	b480      	push	{r7}
 800af9e:	b083      	sub	sp, #12
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	bf00      	nop
 800afa6:	370c      	adds	r7, #12
 800afa8:	46bd      	mov	sp, r7
 800afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afae:	4770      	bx	lr

0800afb0 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>:
  return RowXpr(derived(), i);
}

/// This is the const version of row(). */
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
ConstRowXpr row(Index i) const
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b084      	sub	sp, #16
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	60f8      	str	r0, [r7, #12]
 800afb8:	60b9      	str	r1, [r7, #8]
 800afba:	607a      	str	r2, [r7, #4]
{
  return ConstRowXpr(derived(), i);
 800afbc:	68b8      	ldr	r0, [r7, #8]
 800afbe:	f7fa fc62 	bl	8005886 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800afc2:	4603      	mov	r3, r0
 800afc4:	687a      	ldr	r2, [r7, #4]
 800afc6:	4619      	mov	r1, r3
 800afc8:	68f8      	ldr	r0, [r7, #12]
 800afca:	f000 fc2f 	bl	800b82c <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i>
}
 800afce:	68f8      	ldr	r0, [r7, #12]
 800afd0:	3710      	adds	r7, #16
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}

0800afd6 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 800afd6:	b580      	push	{r7, lr}
 800afd8:	b082      	sub	sp, #8
 800afda:	af00      	add	r7, sp, #0
 800afdc:	6078      	str	r0, [r7, #4]
 800afde:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 800afe0:	6838      	ldr	r0, [r7, #0]
 800afe2:	f000 fc4d 	bl	800b880 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE7derivedEv>
 800afe6:	4603      	mov	r3, r0
 800afe8:	4619      	mov	r1, r3
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f000 fc6b 	bl	800b8c6 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS6_>
}
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	3708      	adds	r7, #8
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}

0800aff8 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3colEi>:
ConstColXpr col(Index i) const
 800aff8:	b580      	push	{r7, lr}
 800affa:	b084      	sub	sp, #16
 800affc:	af00      	add	r7, sp, #0
 800affe:	60f8      	str	r0, [r7, #12]
 800b000:	60b9      	str	r1, [r7, #8]
 800b002:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800b004:	68b8      	ldr	r0, [r7, #8]
 800b006:	f7fa fa76 	bl	80054f6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800b00a:	4603      	mov	r3, r0
 800b00c:	687a      	ldr	r2, [r7, #4]
 800b00e:	4619      	mov	r1, r3
 800b010:	68f8      	ldr	r0, [r7, #12]
 800b012:	f000 fc6f 	bl	800b8f4 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i>
}
 800b016:	68f8      	ldr	r0, [r7, #12]
 800b018:	3710      	adds	r7, #16
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}

0800b01e <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
  * \sa class CwiseBinaryOp, cwiseAbs2
  */
template<typename OtherDerived>
EIGEN_DEVICE_FUNC
EIGEN_STRONG_INLINE const EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800b01e:	b5b0      	push	{r4, r5, r7, lr}
 800b020:	b086      	sub	sp, #24
 800b022:	af00      	add	r7, sp, #0
 800b024:	60f8      	str	r0, [r7, #12]
 800b026:	60b9      	str	r1, [r7, #8]
 800b028:	607a      	str	r2, [r7, #4]
{
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800b02a:	68b8      	ldr	r0, [r7, #8]
 800b02c:	f000 fc8a 	bl	800b944 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>
 800b030:	4604      	mov	r4, r0
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f000 fc91 	bl	800b95a <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE7derivedEv>
 800b038:	4605      	mov	r5, r0
 800b03a:	f107 0314 	add.w	r3, r7, #20
 800b03e:	4618      	mov	r0, r3
 800b040:	f7fa fab8 	bl	80055b4 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800b044:	f107 0314 	add.w	r3, r7, #20
 800b048:	462a      	mov	r2, r5
 800b04a:	4621      	mov	r1, r4
 800b04c:	68f8      	ldr	r0, [r7, #12]
 800b04e:	f000 fcd7 	bl	800ba00 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_>
}
 800b052:	68f8      	ldr	r0, [r7, #12]
 800b054:	3718      	adds	r7, #24
 800b056:	46bd      	mov	sp, r7
 800b058:	bdb0      	pop	{r4, r5, r7, pc}

0800b05a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800b05a:	b580      	push	{r7, lr}
 800b05c:	b082      	sub	sp, #8
 800b05e:	af00      	add	r7, sp, #0
 800b060:	6078      	str	r0, [r7, #4]
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f000 fd2a 	bl	800babc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800b068:	4603      	mov	r3, r0
 800b06a:	4618      	mov	r0, r3
 800b06c:	f000 fd31 	bl	800bad2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE4rowsEv>
 800b070:	4603      	mov	r3, r0
 800b072:	4618      	mov	r0, r3
 800b074:	3708      	adds	r7, #8
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}

0800b07a <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE3sumEv>:
  *
  * \sa trace(), prod(), mean()
  */
template<typename Derived>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE typename internal::traits<Derived>::Scalar
DenseBase<Derived>::sum() const
 800b07a:	b590      	push	{r4, r7, lr}
 800b07c:	b085      	sub	sp, #20
 800b07e:	af00      	add	r7, sp, #0
 800b080:	6078      	str	r0, [r7, #4]
{
  if(SizeAtCompileTime==0 || (SizeAtCompileTime==Dynamic && size()==0))
    return Scalar(0);
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f000 fd1a 	bl	800babc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800b088:	4604      	mov	r4, r0
 800b08a:	f107 030c 	add.w	r3, r7, #12
 800b08e:	4618      	mov	r0, r3
 800b090:	f7fa fd87 	bl	8005ba2 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800b094:	f107 030c 	add.w	r3, r7, #12
 800b098:	4619      	mov	r1, r3
 800b09a:	4620      	mov	r0, r4
 800b09c:	f000 fdf4 	bl	800bc88 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800b0a0:	eef0 7a40 	vmov.f32	s15, s0
 800b0a4:	bf00      	nop
}
 800b0a6:	eeb0 0a67 	vmov.f32	s0, s15
 800b0aa:	3714      	adds	r7, #20
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd90      	pop	{r4, r7, pc}

0800b0b0 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSD_>:
 800b0b0:	b480      	push	{r7}
 800b0b2:	b083      	sub	sp, #12
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
 800b0b8:	bf00      	nop
 800b0ba:	370c      	adds	r7, #12
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c2:	4770      	bx	lr

0800b0c4 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE9innerSizeEv>:
    Index innerSize() const
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b082      	sub	sp, #8
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f000 fe21 	bl	800bd14 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800b0d2:	4603      	mov	r3, r0
    }
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	3708      	adds	r7, #8
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}

0800b0dc <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 800b0dc:	b480      	push	{r7}
 800b0de:	af00      	add	r7, sp, #0
 800b0e0:	2303      	movs	r3, #3
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ea:	4770      	bx	lr

0800b0ec <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4colsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 800b0ec:	b480      	push	{r7}
 800b0ee:	af00      	add	r7, sp, #0
 800b0f0:	2303      	movs	r3, #3
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fa:	4770      	bx	lr

0800b0fc <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEELb0EE3runERKS3_RKS9_>:
    static void run(const Derived&, const OtherDerived&)
 800b0fc:	b480      	push	{r7}
 800b0fe:	b083      	sub	sp, #12
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	6039      	str	r1, [r7, #0]
    }
 800b106:	bf00      	nop
 800b108:	370c      	adds	r7, #12
 800b10a:	46bd      	mov	sp, r7
 800b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b110:	4770      	bx	lr

0800b112 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEEC1ERKS8_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800b112:	b580      	push	{r7, lr}
 800b114:	b082      	sub	sp, #8
 800b116:	af00      	add	r7, sp, #0
 800b118:	6078      	str	r0, [r7, #4]
 800b11a:	6039      	str	r1, [r7, #0]
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6839      	ldr	r1, [r7, #0]
 800b120:	4618      	mov	r0, r3
 800b122:	f000 fe07 	bl	800bd34 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	4618      	mov	r0, r3
 800b12a:	3708      	adds	r7, #8
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}

0800b130 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800b130:	b480      	push	{r7}
 800b132:	b083      	sub	sp, #12
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	4618      	mov	r0, r3
 800b13c:	370c      	adds	r7, #12
 800b13e:	46bd      	mov	sp, r7
 800b140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b144:	4770      	bx	lr

0800b146 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>:
 800b146:	b480      	push	{r7}
 800b148:	b083      	sub	sp, #12
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	6078      	str	r0, [r7, #4]
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	4618      	mov	r0, r3
 800b152:	370c      	adds	r7, #12
 800b154:	46bd      	mov	sp, r7
 800b156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15a:	4770      	bx	lr

0800b15c <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b082      	sub	sp, #8
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	4618      	mov	r0, r3
 800b168:	f7fb fdea 	bl	8006d40 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4rowsEv>
 800b16c:	4603      	mov	r3, r0
 800b16e:	4618      	mov	r0, r3
 800b170:	3708      	adds	r7, #8
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}

0800b176 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800b176:	b580      	push	{r7, lr}
 800b178:	b082      	sub	sp, #8
 800b17a:	af00      	add	r7, sp, #0
 800b17c:	6078      	str	r0, [r7, #4]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	3308      	adds	r3, #8
 800b182:	4618      	mov	r0, r3
 800b184:	f7fb fdea 	bl	8006d5c <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800b188:	4603      	mov	r3, r0
 800b18a:	4618      	mov	r0, r3
 800b18c:	3708      	adds	r7, #8
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}
	...

0800b194 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 800b194:	b580      	push	{r7, lr}
 800b196:	b086      	sub	sp, #24
 800b198:	af00      	add	r7, sp, #0
 800b19a:	60f8      	str	r0, [r7, #12]
 800b19c:	60b9      	str	r1, [r7, #8]
 800b19e:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 800b1a0:	68b8      	ldr	r0, [r7, #8]
 800b1a2:	f7ff ffdb 	bl	800b15c <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE4rowsEv>
 800b1a6:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 800b1a8:	68b8      	ldr	r0, [r7, #8]
 800b1aa:	f7ff ffe4 	bl	800b176 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE4colsEv>
 800b1ae:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f7ff fc8b 	bl	800aace <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4rowsEv>
 800b1b8:	4602      	mov	r2, r0
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	4293      	cmp	r3, r2
 800b1be:	d107      	bne.n	800b1d0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f7ff fc8e 	bl	800aae4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800b1c8:	4602      	mov	r2, r0
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d001      	beq.n	800b1d4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	e000      	b.n	800b1d6 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d005      	beq.n	800b1e6 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	693a      	ldr	r2, [r7, #16]
 800b1de:	6979      	ldr	r1, [r7, #20]
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f7ff f923 	bl	800a42c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	f7ff fc70 	bl	800aace <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4rowsEv>
 800b1ee:	4602      	mov	r2, r0
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	d107      	bne.n	800b206 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f7ff fc73 	bl	800aae4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800b1fe:	4602      	mov	r2, r0
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	4293      	cmp	r3, r2
 800b204:	d006      	beq.n	800b214 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 800b206:	4b05      	ldr	r3, [pc, #20]	; (800b21c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 800b208:	4a05      	ldr	r2, [pc, #20]	; (800b220 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 800b20a:	f240 21fd 	movw	r1, #765	; 0x2fd
 800b20e:	4805      	ldr	r0, [pc, #20]	; (800b224 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 800b210:	f012 fe48 	bl	801dea4 <__assert_func>
}
 800b214:	bf00      	nop
 800b216:	3718      	adds	r7, #24
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}
 800b21c:	08022384 	.word	0x08022384
 800b220:	08024730 	.word	0x08024730
 800b224:	08022498 	.word	0x08022498

0800b228 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 800b228:	b480      	push	{r7}
 800b22a:	b083      	sub	sp, #12
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	4618      	mov	r0, r3
 800b234:	370c      	adds	r7, #12
 800b236:	46bd      	mov	sp, r7
 800b238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23c:	4770      	bx	lr

0800b23e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSC_RKSE_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 800b23e:	b480      	push	{r7}
 800b240:	b085      	sub	sp, #20
 800b242:	af00      	add	r7, sp, #0
 800b244:	60f8      	str	r0, [r7, #12]
 800b246:	60b9      	str	r1, [r7, #8]
 800b248:	607a      	str	r2, [r7, #4]
 800b24a:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	68ba      	ldr	r2, [r7, #8]
 800b250:	601a      	str	r2, [r3, #0]
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	687a      	ldr	r2, [r7, #4]
 800b256:	605a      	str	r2, [r3, #4]
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	683a      	ldr	r2, [r7, #0]
 800b25c:	609a      	str	r2, [r3, #8]
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	69ba      	ldr	r2, [r7, #24]
 800b262:	60da      	str	r2, [r3, #12]
  }
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	4618      	mov	r0, r3
 800b268:	3714      	adds	r7, #20
 800b26a:	46bd      	mov	sp, r7
 800b26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b270:	4770      	bx	lr

0800b272 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800b272:	b580      	push	{r7, lr}
 800b274:	b082      	sub	sp, #8
 800b276:	af00      	add	r7, sp, #0
 800b278:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f000 fd92 	bl	800bda4 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSG_>
  }
 800b280:	bf00      	nop
 800b282:	3708      	adds	r7, #8
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}

0800b288 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800b288:	b480      	push	{r7}
 800b28a:	b083      	sub	sp, #12
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
 800b290:	bf00      	nop
 800b292:	370c      	adds	r7, #12
 800b294:	46bd      	mov	sp, r7
 800b296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29a:	4770      	bx	lr

0800b29c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800b29c:	b5b0      	push	{r4, r5, r7, lr}
 800b29e:	b084      	sub	sp, #16
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
 800b2a4:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f7fa fa1a 	bl	80056e0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800b2ac:	4604      	mov	r4, r0
 800b2ae:	6838      	ldr	r0, [r7, #0]
 800b2b0:	f7fa ff75 	bl	800619e <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE7derivedEv>
 800b2b4:	4605      	mov	r5, r0
 800b2b6:	f107 030c 	add.w	r3, r7, #12
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f7fb ff09 	bl	80070d2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800b2c0:	f107 030c 	add.w	r3, r7, #12
 800b2c4:	461a      	mov	r2, r3
 800b2c6:	4629      	mov	r1, r5
 800b2c8:	4620      	mov	r0, r4
 800b2ca:	f000 fd7b 	bl	800bdc4 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f7fa fa06 	bl	80056e0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800b2d4:	4603      	mov	r3, r0
    }
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3710      	adds	r7, #16
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bdb0      	pop	{r4, r5, r7, pc}

0800b2de <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS2_EEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800b2de:	b5b0      	push	{r4, r5, r7, lr}
 800b2e0:	b084      	sub	sp, #16
 800b2e2:	af00      	add	r7, sp, #0
 800b2e4:	6078      	str	r0, [r7, #4]
 800b2e6:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f000 fd7c 	bl	800bde6 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800b2ee:	4604      	mov	r4, r0
 800b2f0:	6838      	ldr	r0, [r7, #0]
 800b2f2:	f7fa ff5f 	bl	80061b4 <_ZNK5Eigen9EigenBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEE7derivedEv>
 800b2f6:	4605      	mov	r5, r0
 800b2f8:	f107 030c 	add.w	r3, r7, #12
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f7fb fee8 	bl	80070d2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800b302:	f107 030c 	add.w	r3, r7, #12
 800b306:	461a      	mov	r2, r3
 800b308:	4629      	mov	r1, r5
 800b30a:	4620      	mov	r0, r4
 800b30c:	f000 fd76 	bl	800bdfc <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f000 fd68 	bl	800bde6 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800b316:	4603      	mov	r3, r0
    }
 800b318:	4618      	mov	r0, r3
 800b31a:	3710      	adds	r7, #16
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bdb0      	pop	{r4, r5, r7, pc}

0800b320 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 800b320:	b580      	push	{r7, lr}
 800b322:	b082      	sub	sp, #8
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	4618      	mov	r0, r3
 800b32c:	f000 fd77 	bl	800be1e <_ZNK5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4dataEv>
 800b330:	4603      	mov	r3, r0
 800b332:	4618      	mov	r0, r3
 800b334:	3708      	adds	r7, #8
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}

0800b33a <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800b33a:	b480      	push	{r7}
 800b33c:	b083      	sub	sp, #12
 800b33e:	af00      	add	r7, sp, #0
 800b340:	6078      	str	r0, [r7, #4]
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	4618      	mov	r0, r3
 800b346:	370c      	adds	r7, #12
 800b348:	46bd      	mov	sp, r7
 800b34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34e:	4770      	bx	lr

0800b350 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3rowEi>:
ConstRowXpr row(Index i) const
 800b350:	b580      	push	{r7, lr}
 800b352:	b084      	sub	sp, #16
 800b354:	af00      	add	r7, sp, #0
 800b356:	60f8      	str	r0, [r7, #12]
 800b358:	60b9      	str	r1, [r7, #8]
 800b35a:	607a      	str	r2, [r7, #4]
  return ConstRowXpr(derived(), i);
 800b35c:	68b8      	ldr	r0, [r7, #8]
 800b35e:	f7fa f8ca 	bl	80054f6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800b362:	4603      	mov	r3, r0
 800b364:	687a      	ldr	r2, [r7, #4]
 800b366:	4619      	mov	r1, r3
 800b368:	68f8      	ldr	r0, [r7, #12]
 800b36a:	f000 fd6f 	bl	800be4c <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i>
}
 800b36e:	68f8      	ldr	r0, [r7, #12]
 800b370:	3710      	adds	r7, #16
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}

0800b376 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 800b376:	b580      	push	{r7, lr}
 800b378:	b082      	sub	sp, #8
 800b37a:	af00      	add	r7, sp, #0
 800b37c:	6078      	str	r0, [r7, #4]
 800b37e:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 800b380:	6838      	ldr	r0, [r7, #0]
 800b382:	f000 fd8d 	bl	800bea0 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE7derivedEv>
 800b386:	4603      	mov	r3, r0
 800b388:	4619      	mov	r1, r3
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f000 fdab 	bl	800bee6 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERS6_>
}
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	3708      	adds	r7, #8
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}

0800b398 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE3colEi>:
ConstColXpr col(Index i) const
 800b398:	b580      	push	{r7, lr}
 800b39a:	b084      	sub	sp, #16
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	60f8      	str	r0, [r7, #12]
 800b3a0:	60b9      	str	r1, [r7, #8]
 800b3a2:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800b3a4:	68b8      	ldr	r0, [r7, #8]
 800b3a6:	f7fa fe16 	bl	8005fd6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	687a      	ldr	r2, [r7, #4]
 800b3ae:	4619      	mov	r1, r3
 800b3b0:	68f8      	ldr	r0, [r7, #12]
 800b3b2:	f000 fdaf 	bl	800bf14 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i>
}
 800b3b6:	68f8      	ldr	r0, [r7, #12]
 800b3b8:	3710      	adds	r7, #16
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}

0800b3be <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800b3be:	b5b0      	push	{r4, r5, r7, lr}
 800b3c0:	b086      	sub	sp, #24
 800b3c2:	af00      	add	r7, sp, #0
 800b3c4:	60f8      	str	r0, [r7, #12]
 800b3c6:	60b9      	str	r1, [r7, #8]
 800b3c8:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800b3ca:	68b8      	ldr	r0, [r7, #8]
 800b3cc:	f000 fdd4 	bl	800bf78 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE7derivedEv>
 800b3d0:	4604      	mov	r4, r0
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f000 fddb 	bl	800bf8e <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE7derivedEv>
 800b3d8:	4605      	mov	r5, r0
 800b3da:	f107 0314 	add.w	r3, r7, #20
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f7fa f8e8 	bl	80055b4 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800b3e4:	f107 0314 	add.w	r3, r7, #20
 800b3e8:	462a      	mov	r2, r5
 800b3ea:	4621      	mov	r1, r4
 800b3ec:	68f8      	ldr	r0, [r7, #12]
 800b3ee:	f000 fe21 	bl	800c034 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_>
}
 800b3f2:	68f8      	ldr	r0, [r7, #12]
 800b3f4:	3718      	adds	r7, #24
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bdb0      	pop	{r4, r5, r7, pc}

0800b3fa <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800b3fa:	b580      	push	{r7, lr}
 800b3fc:	b082      	sub	sp, #8
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	6078      	str	r0, [r7, #4]
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f000 fe72 	bl	800c0ec <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800b408:	4603      	mov	r3, r0
 800b40a:	4618      	mov	r0, r3
 800b40c:	f000 fe79 	bl	800c102 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE4rowsEv>
 800b410:	4603      	mov	r3, r0
 800b412:	4618      	mov	r0, r3
 800b414:	3708      	adds	r7, #8
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}

0800b41a <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 800b41a:	b590      	push	{r4, r7, lr}
 800b41c:	b085      	sub	sp, #20
 800b41e:	af00      	add	r7, sp, #0
 800b420:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f000 fe62 	bl	800c0ec <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800b428:	4604      	mov	r4, r0
 800b42a:	f107 030c 	add.w	r3, r7, #12
 800b42e:	4618      	mov	r0, r3
 800b430:	f7fa fbb7 	bl	8005ba2 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800b434:	f107 030c 	add.w	r3, r7, #12
 800b438:	4619      	mov	r1, r3
 800b43a:	4620      	mov	r0, r4
 800b43c:	f000 ff3c 	bl	800c2b8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800b440:	eef0 7a40 	vmov.f32	s15, s0
 800b444:	bf00      	nop
}
 800b446:	eeb0 0a67 	vmov.f32	s0, s15
 800b44a:	3714      	adds	r7, #20
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd90      	pop	{r4, r7, pc}

0800b450 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800b450:	b480      	push	{r7}
 800b452:	b083      	sub	sp, #12
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	bf00      	nop
 800b45a:	370c      	adds	r7, #12
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr

0800b464 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800b464:	b480      	push	{r7}
 800b466:	b083      	sub	sp, #12
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	4618      	mov	r0, r3
 800b472:	370c      	adds	r7, #12
 800b474:	46bd      	mov	sp, r7
 800b476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47a:	4770      	bx	lr

0800b47c <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800b47c:	b480      	push	{r7}
 800b47e:	b083      	sub	sp, #12
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	3304      	adds	r3, #4
 800b488:	4618      	mov	r0, r3
 800b48a:	370c      	adds	r7, #12
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr

0800b494 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEC1Ev>:
 800b494:	b480      	push	{r7}
 800b496:	b083      	sub	sp, #12
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	4618      	mov	r0, r3
 800b4a0:	370c      	adds	r7, #12
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a8:	4770      	bx	lr

0800b4aa <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS_7ProductINS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEERKT_>:
    explicit Matrix(const T& x)
 800b4aa:	b580      	push	{r7, lr}
 800b4ac:	b082      	sub	sp, #8
 800b4ae:	af00      	add	r7, sp, #0
 800b4b0:	6078      	str	r0, [r7, #4]
 800b4b2:	6039      	str	r1, [r7, #0]
    {
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f7f9 fcfc 	bl	8004eb4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 800b4bc:	f7f9 fd0a 	bl	8004ed4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6839      	ldr	r1, [r7, #0]
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f000 ff3d 	bl	800c344 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEESF_EEvRKNS_9DenseBaseIT0_EE>
    }
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	3708      	adds	r7, #8
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}

0800b4d4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 800b4d4:	b5b0      	push	{r4, r5, r7, lr}
 800b4d6:	b084      	sub	sp, #16
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
 800b4dc:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	689c      	ldr	r4, [r3, #8]
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	6839      	ldr	r1, [r7, #0]
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f7fd f9a8 	bl	800883e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 800b4ee:	4605      	mov	r5, r0
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	685b      	ldr	r3, [r3, #4]
 800b4f4:	6839      	ldr	r1, [r7, #0]
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f000 ff31 	bl	800c35e <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffE5coeffEi>
 800b4fc:	eef0 7a40 	vmov.f32	s15, s0
 800b500:	edc7 7a03 	vstr	s15, [r7, #12]
 800b504:	f107 030c 	add.w	r3, r7, #12
 800b508:	461a      	mov	r2, r3
 800b50a:	4629      	mov	r1, r5
 800b50c:	4620      	mov	r0, r4
 800b50e:	f000 ff5f 	bl	800c3d0 <_ZNK5Eigen8internal13add_assign_opIffE11assignCoeffERfRKf>
  }
 800b512:	bf00      	nop
 800b514:	3710      	adds	r7, #16
 800b516:	46bd      	mov	sp, r7
 800b518:	bdb0      	pop	{r4, r5, r7, pc}

0800b51a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi1ELi3EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800b51a:	b580      	push	{r7, lr}
 800b51c:	b082      	sub	sp, #8
 800b51e:	af00      	add	r7, sp, #0
 800b520:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800b522:	2101      	movs	r1, #1
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f7ff ffd5 	bl	800b4d4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f000 ff67 	bl	800c3fe <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi2ELi3EE3runERSL_>
  }
 800b530:	bf00      	nop
 800b532:	3708      	adds	r7, #8
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}

0800b538 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800b538:	b5b0      	push	{r4, r5, r7, lr}
 800b53a:	b084      	sub	sp, #16
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
 800b540:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f7fa fa68 	bl	8005a18 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800b548:	4604      	mov	r4, r0
 800b54a:	6838      	ldr	r0, [r7, #0]
 800b54c:	f7fb f98e 	bl	800686c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE7derivedEv>
 800b550:	4605      	mov	r5, r0
 800b552:	f107 030c 	add.w	r3, r7, #12
 800b556:	4618      	mov	r0, r3
 800b558:	f7fb fdbb 	bl	80070d2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800b55c:	f107 030c 	add.w	r3, r7, #12
 800b560:	461a      	mov	r2, r3
 800b562:	4629      	mov	r1, r5
 800b564:	4620      	mov	r0, r4
 800b566:	f000 ff59 	bl	800c41c <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f7fa fa54 	bl	8005a18 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800b570:	4603      	mov	r3, r0
    }
 800b572:	4618      	mov	r0, r3
 800b574:	3710      	adds	r7, #16
 800b576:	46bd      	mov	sp, r7
 800b578:	bdb0      	pop	{r4, r5, r7, pc}

0800b57a <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 800b57a:	b580      	push	{r7, lr}
 800b57c:	b0a4      	sub	sp, #144	; 0x90
 800b57e:	af00      	add	r7, sp, #0
 800b580:	60f8      	str	r0, [r7, #12]
 800b582:	60b9      	str	r1, [r7, #8]
 800b584:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800b586:	68f9      	ldr	r1, [r7, #12]
 800b588:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b58c:	68ba      	ldr	r2, [r7, #8]
 800b58e:	4618      	mov	r0, r3
 800b590:	f7ff fd0e 	bl	800afb0 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 800b594:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b598:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b59c:	4611      	mov	r1, r2
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f7ff fd19 	bl	800afd6 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800b5a8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b5ac:	687a      	ldr	r2, [r7, #4]
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f000 ff45 	bl	800c43e <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3colEi>
 800b5b4:	f107 0314 	add.w	r3, r7, #20
 800b5b8:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800b5bc:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f000 ff4f 	bl	800c464 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IS5_Li3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>
 800b5c6:	f107 0314 	add.w	r3, r7, #20
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f000 ff78 	bl	800c4c0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE3sumEv>
 800b5d0:	eef0 7a40 	vmov.f32	s15, s0
  }
 800b5d4:	eeb0 0a67 	vmov.f32	s0, s15
 800b5d8:	3790      	adds	r7, #144	; 0x90
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}

0800b5de <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800b5de:	b580      	push	{r7, lr}
 800b5e0:	b082      	sub	sp, #8
 800b5e2:	af00      	add	r7, sp, #0
 800b5e4:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	2101      	movs	r1, #1
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f7ff f934 	bl	800a858 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f000 ff80 	bl	800c4f6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSL_>
  }
 800b5f6:	bf00      	nop
 800b5f8:	3708      	adds	r7, #8
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}

0800b5fe <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800b5fe:	b480      	push	{r7}
 800b600:	b083      	sub	sp, #12
 800b602:	af00      	add	r7, sp, #0
 800b604:	6078      	str	r0, [r7, #4]
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	330c      	adds	r3, #12
 800b60a:	4618      	mov	r0, r3
 800b60c:	370c      	adds	r7, #12
 800b60e:	46bd      	mov	sp, r7
 800b610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b614:	4770      	bx	lr

0800b616 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800b616:	b480      	push	{r7}
 800b618:	b083      	sub	sp, #12
 800b61a:	af00      	add	r7, sp, #0
 800b61c:	6078      	str	r0, [r7, #4]
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	4618      	mov	r0, r3
 800b624:	370c      	adds	r7, #12
 800b626:	46bd      	mov	sp, r7
 800b628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62c:	4770      	bx	lr

0800b62e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800b62e:	b480      	push	{r7}
 800b630:	b083      	sub	sp, #12
 800b632:	af00      	add	r7, sp, #0
 800b634:	6078      	str	r0, [r7, #4]
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	3304      	adds	r3, #4
 800b63a:	4618      	mov	r0, r3
 800b63c:	370c      	adds	r7, #12
 800b63e:	46bd      	mov	sp, r7
 800b640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b644:	4770      	bx	lr

0800b646 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS4_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800b646:	b580      	push	{r7, lr}
 800b648:	b082      	sub	sp, #8
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	6078      	str	r0, [r7, #4]
 800b64e:	6039      	str	r1, [r7, #0]
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6839      	ldr	r1, [r7, #0]
 800b654:	4618      	mov	r0, r3
 800b656:	f7fb fa58 	bl	8006b0a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	4618      	mov	r0, r3
 800b65e:	3708      	adds	r7, #8
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}

0800b664 <_ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERS9_>:
 800b664:	b580      	push	{r7, lr}
 800b666:	b082      	sub	sp, #8
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	6039      	str	r1, [r7, #0]
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6839      	ldr	r1, [r7, #0]
 800b672:	4618      	mov	r0, r3
 800b674:	f000 ff4f 	bl	800c516 <_ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS8_>
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	4618      	mov	r0, r3
 800b67c:	3708      	adds	r7, #8
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}

0800b682 <_ZN5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERKSF_>:
    typedef typename internal::ref_selector<XprType>::non_const_type XprTypeNested;
  public:

    typedef typename internal::dense_xpr_base<BlockType>::type Base;
    EIGEN_DENSE_PUBLIC_INTERFACE(BlockType)
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(BlockImpl_dense)
 800b682:	b580      	push	{r7, lr}
 800b684:	b082      	sub	sp, #8
 800b686:	af00      	add	r7, sp, #0
 800b688:	6078      	str	r0, [r7, #4]
 800b68a:	6039      	str	r1, [r7, #0]
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	683a      	ldr	r2, [r7, #0]
 800b690:	4611      	mov	r1, r2
 800b692:	4618      	mov	r0, r3
 800b694:	f7f9 f8aa 	bl	80047ec <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	3310      	adds	r3, #16
 800b69c:	683a      	ldr	r2, [r7, #0]
 800b69e:	6912      	ldr	r2, [r2, #16]
 800b6a0:	601a      	str	r2, [r3, #0]
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3708      	adds	r7, #8
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}

0800b6ac <_ZN5Eigen9BlockImplIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ENS_5DenseEEC1ERKSG_>:
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(BlockImpl)
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b082      	sub	sp, #8
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
 800b6b4:	6039      	str	r1, [r7, #0]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	683a      	ldr	r2, [r7, #0]
 800b6ba:	4611      	mov	r1, r2
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f7ff ffe0 	bl	800b682 <_ZN5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERKSF_>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	3708      	adds	r7, #8
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}

0800b6cc <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERKSF_>:
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(Block)
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b082      	sub	sp, #8
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	6039      	str	r1, [r7, #0]
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	683a      	ldr	r2, [r7, #0]
 800b6da:	4611      	mov	r1, r2
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f7ff ffe5 	bl	800b6ac <_ZN5Eigen9BlockImplIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ENS_5DenseEEC1ERKSG_>
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3708      	adds	r7, #8
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE3rowEi>:
ConstRowXpr row(Index i) const
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b084      	sub	sp, #16
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	60f8      	str	r0, [r7, #12]
 800b6f4:	60b9      	str	r1, [r7, #8]
 800b6f6:	607a      	str	r2, [r7, #4]
  return ConstRowXpr(derived(), i);
 800b6f8:	68b8      	ldr	r0, [r7, #8]
 800b6fa:	f7fa f824 	bl	8005746 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE7derivedEv>
 800b6fe:	4603      	mov	r3, r0
 800b700:	687a      	ldr	r2, [r7, #4]
 800b702:	4619      	mov	r1, r3
 800b704:	68f8      	ldr	r0, [r7, #12]
 800b706:	f000 ff1d 	bl	800c544 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i>
}
 800b70a:	68f8      	ldr	r0, [r7, #12]
 800b70c:	3710      	adds	r7, #16
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}

0800b712 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERKSI_>:
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(Transpose)
 800b712:	b580      	push	{r7, lr}
 800b714:	b082      	sub	sp, #8
 800b716:	af00      	add	r7, sp, #0
 800b718:	6078      	str	r0, [r7, #4]
 800b71a:	6039      	str	r1, [r7, #0]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	683a      	ldr	r2, [r7, #0]
 800b720:	4611      	mov	r1, r2
 800b722:	4618      	mov	r0, r3
 800b724:	f7ff ffd2 	bl	800b6cc <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERKSF_>
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	4618      	mov	r0, r3
 800b72c:	3708      	adds	r7, #8
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}

0800b732 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 800b732:	b580      	push	{r7, lr}
 800b734:	b082      	sub	sp, #8
 800b736:	af00      	add	r7, sp, #0
 800b738:	6078      	str	r0, [r7, #4]
 800b73a:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 800b73c:	6838      	ldr	r0, [r7, #0]
 800b73e:	f000 ff29 	bl	800c594 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE7derivedEv>
 800b742:	4603      	mov	r3, r0
 800b744:	4619      	mov	r1, r3
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f000 ff47 	bl	800c5da <_ZN5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERSH_>
}
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	3708      	adds	r7, #8
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}

0800b754 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE3colEi>:
ConstColXpr col(Index i) const
 800b754:	b580      	push	{r7, lr}
 800b756:	b084      	sub	sp, #16
 800b758:	af00      	add	r7, sp, #0
 800b75a:	60f8      	str	r0, [r7, #12]
 800b75c:	60b9      	str	r1, [r7, #8]
 800b75e:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800b760:	68b8      	ldr	r0, [r7, #8]
 800b762:	f7f9 fffb 	bl	800575c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800b766:	4603      	mov	r3, r0
 800b768:	687a      	ldr	r2, [r7, #4]
 800b76a:	4619      	mov	r1, r3
 800b76c:	68f8      	ldr	r0, [r7, #12]
 800b76e:	f000 ff47 	bl	800c600 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i>
}
 800b772:	68f8      	ldr	r0, [r7, #12]
 800b774:	3710      	adds	r7, #16
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}

0800b77a <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS1_IS8_EELi1ELi1ELb0EEEEEKNS3_INS5_IfNS4_6traitsIT_E6ScalarEEEKSJ_KSQ_EERKNS0_ISQ_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800b77a:	b5b0      	push	{r4, r5, r7, lr}
 800b77c:	b086      	sub	sp, #24
 800b77e:	af00      	add	r7, sp, #0
 800b780:	60f8      	str	r0, [r7, #12]
 800b782:	60b9      	str	r1, [r7, #8]
 800b784:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800b786:	68b8      	ldr	r0, [r7, #8]
 800b788:	f000 ff62 	bl	800c650 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEE7derivedEv>
 800b78c:	4604      	mov	r4, r0
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f000 ff69 	bl	800c666 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEE7derivedEv>
 800b794:	4605      	mov	r5, r0
 800b796:	f107 0314 	add.w	r3, r7, #20
 800b79a:	4618      	mov	r0, r3
 800b79c:	f7f9 ff0a 	bl	80055b4 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800b7a0:	f107 0314 	add.w	r3, r7, #20
 800b7a4:	462a      	mov	r2, r5
 800b7a6:	4621      	mov	r1, r4
 800b7a8:	68f8      	ldr	r0, [r7, #12]
 800b7aa:	f000 ffaf 	bl	800c70c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_>
}
 800b7ae:	68f8      	ldr	r0, [r7, #12]
 800b7b0:	3718      	adds	r7, #24
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bdb0      	pop	{r4, r5, r7, pc}

0800b7b6 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE4rowsEv>:
 800b7b6:	b580      	push	{r7, lr}
 800b7b8:	b082      	sub	sp, #8
 800b7ba:	af00      	add	r7, sp, #0
 800b7bc:	6078      	str	r0, [r7, #4]
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f000 fffe 	bl	800c7c0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f001 f805 	bl	800c7d6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE4rowsEv>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	3708      	adds	r7, #8
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}

0800b7d6 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 800b7d6:	b590      	push	{r4, r7, lr}
 800b7d8:	b085      	sub	sp, #20
 800b7da:	af00      	add	r7, sp, #0
 800b7dc:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f000 ffee 	bl	800c7c0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800b7e4:	4604      	mov	r4, r0
 800b7e6:	f107 030c 	add.w	r3, r7, #12
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f7fa f9d9 	bl	8005ba2 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800b7f0:	f107 030c 	add.w	r3, r7, #12
 800b7f4:	4619      	mov	r1, r3
 800b7f6:	4620      	mov	r0, r4
 800b7f8:	f001 f8da 	bl	800c9b0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800b7fc:	eef0 7a40 	vmov.f32	s15, s0
 800b800:	bf00      	nop
}
 800b802:	eeb0 0a67 	vmov.f32	s0, s15
 800b806:	3714      	adds	r7, #20
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd90      	pop	{r4, r7, pc}

0800b80c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b082      	sub	sp, #8
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800b814:	2201      	movs	r2, #1
 800b816:	2101      	movs	r1, #1
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	f7fe fd56 	bl	800a2ca <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f001 f90c 	bl	800ca3c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSP_>
  }
 800b824:	bf00      	nop
 800b826:	3708      	adds	r7, #8
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}

0800b82c <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b084      	sub	sp, #16
 800b830:	af00      	add	r7, sp, #0
 800b832:	60f8      	str	r0, [r7, #12]
 800b834:	60b9      	str	r1, [r7, #8]
 800b836:	607a      	str	r2, [r7, #4]
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	687a      	ldr	r2, [r7, #4]
 800b83c:	68b9      	ldr	r1, [r7, #8]
 800b83e:	4618      	mov	r0, r3
 800b840:	f001 f90c 	bl	800ca5c <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2b00      	cmp	r3, #0
 800b848:	db07      	blt.n	800b85a <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x2e>
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	4618      	mov	r0, r3
 800b84e:	f7f9 fc10 	bl	8005072 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800b852:	4602      	mov	r2, r0
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	4293      	cmp	r3, r2
 800b858:	db05      	blt.n	800b866 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x3a>
 800b85a:	4b06      	ldr	r3, [pc, #24]	; (800b874 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x48>)
 800b85c:	4a06      	ldr	r2, [pc, #24]	; (800b878 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x4c>)
 800b85e:	2178      	movs	r1, #120	; 0x78
 800b860:	4806      	ldr	r0, [pc, #24]	; (800b87c <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x50>)
 800b862:	f012 fb1f 	bl	801dea4 <__assert_func>
 800b866:	bf00      	nop
    }
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	4618      	mov	r0, r3
 800b86c:	3710      	adds	r7, #16
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
 800b872:	bf00      	nop
 800b874:	08024890 	.word	0x08024890
 800b878:	08024938 	.word	0x08024938
 800b87c:	08024a14 	.word	0x08024a14

0800b880 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800b880:	b480      	push	{r7}
 800b882:	b083      	sub	sp, #12
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	4618      	mov	r0, r3
 800b88c:	370c      	adds	r7, #12
 800b88e:	46bd      	mov	sp, r7
 800b890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b894:	4770      	bx	lr

0800b896 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>:
 800b896:	b580      	push	{r7, lr}
 800b898:	b082      	sub	sp, #8
 800b89a:	af00      	add	r7, sp, #0
 800b89c:	6078      	str	r0, [r7, #4]
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f001 f8ed 	bl	800ca7e <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3708      	adds	r7, #8
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}

0800b8ae <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 800b8ae:	b580      	push	{r7, lr}
 800b8b0:	b082      	sub	sp, #8
 800b8b2:	af00      	add	r7, sp, #0
 800b8b4:	6078      	str	r0, [r7, #4]
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f7ff ffed 	bl	800b896 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3708      	adds	r7, #8
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}

0800b8c6 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS6_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 800b8c6:	b5b0      	push	{r4, r5, r7, lr}
 800b8c8:	b082      	sub	sp, #8
 800b8ca:	af00      	add	r7, sp, #0
 800b8cc:	6078      	str	r0, [r7, #4]
 800b8ce:	6039      	str	r1, [r7, #0]
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f7ff ffec 	bl	800b8ae <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS_5DenseEEC1Ev>
 800b8d6:	687a      	ldr	r2, [r7, #4]
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	4614      	mov	r4, r2
 800b8dc:	461d      	mov	r5, r3
 800b8de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b8e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b8e2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b8e6:	e884 0003 	stmia.w	r4, {r0, r1}
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	3708      	adds	r7, #8
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bdb0      	pop	{r4, r5, r7, pc}

0800b8f4 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b084      	sub	sp, #16
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	60f8      	str	r0, [r7, #12]
 800b8fc:	60b9      	str	r1, [r7, #8]
 800b8fe:	607a      	str	r2, [r7, #4]
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	687a      	ldr	r2, [r7, #4]
 800b904:	68b9      	ldr	r1, [r7, #8]
 800b906:	4618      	mov	r0, r3
 800b908:	f001 f8c4 	bl	800ca94 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	db07      	blt.n	800b922 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x2e>
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	4618      	mov	r0, r3
 800b916:	f7f9 fc47 	bl	80051a8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800b91a:	4602      	mov	r2, r0
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	4293      	cmp	r3, r2
 800b920:	db05      	blt.n	800b92e <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x3a>
 800b922:	4b05      	ldr	r3, [pc, #20]	; (800b938 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x44>)
 800b924:	4a05      	ldr	r2, [pc, #20]	; (800b93c <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x48>)
 800b926:	2178      	movs	r1, #120	; 0x78
 800b928:	4805      	ldr	r0, [pc, #20]	; (800b940 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x4c>)
 800b92a:	f012 fabb 	bl	801dea4 <__assert_func>
    }
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	4618      	mov	r0, r3
 800b932:	3710      	adds	r7, #16
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}
 800b938:	08024890 	.word	0x08024890
 800b93c:	08024a68 	.word	0x08024a68
 800b940:	08024a14 	.word	0x08024a14

0800b944 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>:
 800b944:	b480      	push	{r7}
 800b946:	b083      	sub	sp, #12
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	4618      	mov	r0, r3
 800b950:	370c      	adds	r7, #12
 800b952:	46bd      	mov	sp, r7
 800b954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b958:	4770      	bx	lr

0800b95a <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE7derivedEv>:
 800b95a:	b480      	push	{r7}
 800b95c:	b083      	sub	sp, #12
 800b95e:	af00      	add	r7, sp, #0
 800b960:	6078      	str	r0, [r7, #4]
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	4618      	mov	r0, r3
 800b966:	370c      	adds	r7, #12
 800b968:	46bd      	mov	sp, r7
 800b96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96e:	4770      	bx	lr

0800b970 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>:
 800b970:	b580      	push	{r7, lr}
 800b972:	b082      	sub	sp, #8
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
 800b978:	6878      	ldr	r0, [r7, #4]
 800b97a:	f001 f89c 	bl	800cab6 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	4618      	mov	r0, r3
 800b982:	3708      	adds	r7, #8
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}

0800b988 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800b988:	b580      	push	{r7, lr}
 800b98a:	b082      	sub	sp, #8
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	f7ff ffed 	bl	800b970 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	4618      	mov	r0, r3
 800b99a:	3708      	adds	r7, #8
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}

0800b9a0 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b082      	sub	sp, #8
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f001 f88e 	bl	800cacc <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4colsEv>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	3708      	adds	r7, #8
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bd80      	pop	{r7, pc}

0800b9ba <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 800b9ba:	b580      	push	{r7, lr}
 800b9bc:	b082      	sub	sp, #8
 800b9be:	af00      	add	r7, sp, #0
 800b9c0:	6078      	str	r0, [r7, #4]
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f001 f88c 	bl	800cae2 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4rowsEv>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3708      	adds	r7, #8
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}

0800b9d4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4rowsEv>:

    typedef typename Base::CoeffReturnType CoeffReturnType;

    /** \copydoc DenseBase::rows() */
    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b082      	sub	sp, #8
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
 800b9dc:	f7fb f913 	bl	8006c06 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	3708      	adds	r7, #8
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}

0800b9ea <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4colsEv>:
    /** \copydoc DenseBase::cols() */
    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800b9ea:	b580      	push	{r7, lr}
 800b9ec:	b082      	sub	sp, #8
 800b9ee:	af00      	add	r7, sp, #0
 800b9f0:	6078      	str	r0, [r7, #4]
 800b9f2:	f7fb f910 	bl	8006c16 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3708      	adds	r7, #8
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}

0800ba00 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800ba00:	b5b0      	push	{r4, r5, r7, lr}
 800ba02:	b084      	sub	sp, #16
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	60f8      	str	r0, [r7, #12]
 800ba08:	60b9      	str	r1, [r7, #8]
 800ba0a:	607a      	str	r2, [r7, #4]
 800ba0c:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800ba0e:	68f8      	ldr	r0, [r7, #12]
 800ba10:	f7ff ffba 	bl	800b988 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEENS_5DenseEEC1Ev>
 800ba14:	68fa      	ldr	r2, [r7, #12]
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	4614      	mov	r4, r2
 800ba1a:	461d      	mov	r5, r3
 800ba1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ba1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ba20:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ba24:	e884 0003 	stmia.w	r4, {r0, r1}
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	f103 0218 	add.w	r2, r3, #24
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	4614      	mov	r4, r2
 800ba32:	461d      	mov	r5, r3
 800ba34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ba36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ba38:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ba3c:	e884 0003 	stmia.w	r4, {r0, r1}
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	3330      	adds	r3, #48	; 0x30
 800ba44:	6839      	ldr	r1, [r7, #0]
 800ba46:	4618      	mov	r0, r3
 800ba48:	f7f9 fe3e 	bl	80056c8 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800ba4c:	68b8      	ldr	r0, [r7, #8]
 800ba4e:	f7ff ffa7 	bl	800b9a0 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800ba52:	4604      	mov	r4, r0
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	4618      	mov	r0, r3
 800ba58:	f7ff ffbc 	bl	800b9d4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4rowsEv>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	429c      	cmp	r4, r3
 800ba60:	d10a      	bne.n	800ba78 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x78>
 800ba62:	68b8      	ldr	r0, [r7, #8]
 800ba64:	f7ff ffa9 	bl	800b9ba <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800ba68:	4604      	mov	r4, r0
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f7ff ffbc 	bl	800b9ea <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4colsEv>
 800ba72:	4603      	mov	r3, r0
 800ba74:	429c      	cmp	r4, r3
 800ba76:	d005      	beq.n	800ba84 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x84>
 800ba78:	4b05      	ldr	r3, [pc, #20]	; (800ba90 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x90>)
 800ba7a:	4a06      	ldr	r2, [pc, #24]	; (800ba94 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x94>)
 800ba7c:	2174      	movs	r1, #116	; 0x74
 800ba7e:	4806      	ldr	r0, [pc, #24]	; (800ba98 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x98>)
 800ba80:	f012 fa10 	bl	801dea4 <__assert_func>
    }
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	4618      	mov	r0, r3
 800ba88:	3710      	adds	r7, #16
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bdb0      	pop	{r4, r5, r7, pc}
 800ba8e:	bf00      	nop
 800ba90:	0801fd0c 	.word	0x0801fd0c
 800ba94:	08024b44 	.word	0x08024b44
 800ba98:	0801ff70 	.word	0x0801ff70

0800ba9c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b082      	sub	sp, #8
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f000 f809 	bl	800babc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800baaa:	4603      	mov	r3, r0
 800baac:	4618      	mov	r0, r3
 800baae:	f001 f823 	bl	800caf8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE4colsEv>
 800bab2:	4603      	mov	r3, r0
 800bab4:	4618      	mov	r0, r3
 800bab6:	3708      	adds	r7, #8
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}

0800babc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800babc:	b480      	push	{r7}
 800babe:	b083      	sub	sp, #12
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	4618      	mov	r0, r3
 800bac8:	370c      	adds	r7, #12
 800baca:	46bd      	mov	sp, r7
 800bacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad0:	4770      	bx	lr

0800bad2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800bad2:	b580      	push	{r7, lr}
 800bad4:	b082      	sub	sp, #8
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	4618      	mov	r0, r3
 800bade:	f7ff ff5f 	bl	800b9a0 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800bae2:	4603      	mov	r3, r0
    }
 800bae4:	4618      	mov	r0, r3
 800bae6:	3708      	adds	r7, #8
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}

0800baec <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
// but that might complicate template specialization
template<typename Derived, typename PlainObjectType>
struct mapbase_evaluator;

template<typename Derived, typename PlainObjectType>
struct mapbase_evaluator : evaluator_base<Derived>
 800baec:	b580      	push	{r7, lr}
 800baee:	b082      	sub	sp, #8
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f001 f831 	bl	800cb5c <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	4618      	mov	r0, r3
 800bafe:	3708      	adds	r7, #8
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}

0800bb04 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EED1Ev>:

// TODO: This evaluator does not actually use the child evaluator;
// all action is via the data() as returned by the Block expression.

template<typename ArgType, int BlockRows, int BlockCols, bool InnerPanel>
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b082      	sub	sp, #8
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f7ff ffec 	bl	800baec <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	4618      	mov	r0, r3
 800bb18:	3708      	adds	r7, #8
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}

0800bb1e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800bb1e:	b580      	push	{r7, lr}
 800bb20:	b082      	sub	sp, #8
 800bb22:	af00      	add	r7, sp, #0
 800bb24:	6078      	str	r0, [r7, #4]
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f7ff ffeb 	bl	800bb04 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EED1Ev>
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	4618      	mov	r0, r3
 800bb32:	3708      	adds	r7, #8
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd80      	pop	{r7, pc}

0800bb38 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>:
struct evaluator<const T>
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b082      	sub	sp, #8
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	4618      	mov	r0, r3
 800bb44:	f7ff ffeb 	bl	800bb1e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	3708      	adds	r7, #8
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}

0800bb52 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800bb52:	b580      	push	{r7, lr}
 800bb54:	b082      	sub	sp, #8
 800bb56:	af00      	add	r7, sp, #0
 800bb58:	6078      	str	r0, [r7, #4]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f7ff ffeb 	bl	800bb38 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f000 ffef 	bl	800cb46 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3708      	adds	r7, #8
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}

0800bb72 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800bb72:	b580      	push	{r7, lr}
 800bb74:	b082      	sub	sp, #8
 800bb76:	af00      	add	r7, sp, #0
 800bb78:	6078      	str	r0, [r7, #4]
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f7ff ffe8 	bl	800bb52 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfED1Ev>
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	4618      	mov	r0, r3
 800bb86:	3708      	adds	r7, #8
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}

0800bb8c <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>:
struct evaluator<const T>
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b082      	sub	sp, #8
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	4618      	mov	r0, r3
 800bb98:	f7ff ffeb 	bl	800bb72 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3708      	adds	r7, #8
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}

0800bba6 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_ED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800bba6:	b580      	push	{r7, lr}
 800bba8:	b082      	sub	sp, #8
 800bbaa:	af00      	add	r7, sp, #0
 800bbac:	6078      	str	r0, [r7, #4]
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	f000 ffdf 	bl	800cb72 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3708      	adds	r7, #8
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}

0800bbbe <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800bbbe:	b580      	push	{r7, lr}
 800bbc0:	b082      	sub	sp, #8
 800bbc2:	af00      	add	r7, sp, #0
 800bbc4:	6078      	str	r0, [r7, #4]
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f7ff ffec 	bl	800bba6 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_ED1Ev>
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3708      	adds	r7, #8
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}

0800bbd8 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b082      	sub	sp, #8
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f7ff ffeb 	bl	800bbbe <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EED1Ev>
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	4618      	mov	r0, r3
 800bbec:	3708      	adds	r7, #8
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}

0800bbf2 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<const T>
 800bbf2:	b580      	push	{r7, lr}
 800bbf4:	b082      	sub	sp, #8
 800bbf6:	af00      	add	r7, sp, #0
 800bbf8:	6078      	str	r0, [r7, #4]
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f7ff ffeb 	bl	800bbd8 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	4618      	mov	r0, r3
 800bc06:	3708      	adds	r7, #8
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bd80      	pop	{r7, pc}

0800bc0c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b082      	sub	sp, #8
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	330c      	adds	r3, #12
 800bc18:	4618      	mov	r0, r3
 800bc1a:	f7ff ffea 	bl	800bbf2 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	3304      	adds	r3, #4
 800bc22:	4618      	mov	r0, r3
 800bc24:	f7ff ffb2 	bl	800bb8c <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	3708      	adds	r7, #8
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}

0800bc32 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800bc32:	b580      	push	{r7, lr}
 800bc34:	b082      	sub	sp, #8
 800bc36:	af00      	add	r7, sp, #0
 800bc38:	6078      	str	r0, [r7, #4]
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f7ff ffe5 	bl	800bc0c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f000 ff74 	bl	800cb30 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3708      	adds	r7, #8
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}

0800bc52 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800bc52:	b580      	push	{r7, lr}
 800bc54:	b082      	sub	sp, #8
 800bc56:	af00      	add	r7, sp, #0
 800bc58:	6078      	str	r0, [r7, #4]
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f7ff ffe8 	bl	800bc32 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	4618      	mov	r0, r3
 800bc66:	3708      	adds	r7, #8
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}

0800bc6c <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b082      	sub	sp, #8
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	4618      	mov	r0, r3
 800bc78:	f7ff ffeb 	bl	800bc52 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3708      	adds	r7, #8
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}
	...

0800bc88 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	ed2d 8b02 	vpush	{d8}
 800bc8e:	b088      	sub	sp, #32
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
 800bc94:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f7ff f9df 	bl	800b05a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE4rowsEv>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	dd05      	ble.n	800bcae <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f7ff fefa 	bl	800ba9c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE4colsEv>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	dc06      	bgt.n	800bcbc <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800bcae:	4b16      	ldr	r3, [pc, #88]	; (800bd08 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800bcb0:	4a16      	ldr	r2, [pc, #88]	; (800bd0c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800bcb2:	f240 119b 	movw	r1, #411	; 0x19b
 800bcb6:	4816      	ldr	r0, [pc, #88]	; (800bd10 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800bcb8:	f012 f8f4 	bl	801dea4 <__assert_func>
 800bcbc:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f7ff fefc 	bl	800babc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800bcc4:	4602      	mov	r2, r0
 800bcc6:	f107 030c 	add.w	r3, r7, #12
 800bcca:	4611      	mov	r1, r2
 800bccc:	4618      	mov	r0, r3
 800bcce:	f000 ff20 	bl	800cb12 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f7ff fef2 	bl	800babc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800bcd8:	4602      	mov	r2, r0
 800bcda:	f107 030c 	add.w	r3, r7, #12
 800bcde:	6839      	ldr	r1, [r7, #0]
 800bce0:	4618      	mov	r0, r3
 800bce2:	f000 ff51 	bl	800cb88 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 800bce6:	eeb0 8a40 	vmov.f32	s16, s0
 800bcea:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800bcec:	f107 030c 	add.w	r3, r7, #12
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f7ff ffbb 	bl	800bc6c <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800bcf6:	eef0 7a48 	vmov.f32	s15, s16
}
 800bcfa:	eeb0 0a67 	vmov.f32	s0, s15
 800bcfe:	3720      	adds	r7, #32
 800bd00:	46bd      	mov	sp, r7
 800bd02:	ecbd 8b02 	vpop	{d8}
 800bd06:	bd80      	pop	{r7, pc}
 800bd08:	08024d8c 	.word	0x08024d8c
 800bd0c:	08024dd0 	.word	0x08024dd0
 800bd10:	08024f98 	.word	0x08024f98

0800bd14 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b082      	sub	sp, #8
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f7fe feb4 	bl	800aa8a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE7derivedEv>
 800bd22:	4603      	mov	r3, r0
 800bd24:	4618      	mov	r0, r3
 800bd26:	f7fe fedd 	bl	800aae4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	3708      	adds	r7, #8
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}

0800bd34 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>:
  explicit product_evaluator(const XprType& xpr)
 800bd34:	b590      	push	{r4, r7, lr}
 800bd36:	b083      	sub	sp, #12
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
 800bd3c:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f000 ff4a 	bl	800cbd8 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEEC1Ev>
 800bd44:	687c      	ldr	r4, [r7, #4]
    : m_lhs(xpr.lhs()),
 800bd46:	6838      	ldr	r0, [r7, #0]
 800bd48:	f000 ff2f 	bl	800cbaa <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3lhsEv>
 800bd4c:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 800bd4e:	4619      	mov	r1, r3
 800bd50:	4620      	mov	r0, r4
 800bd52:	f000 ff4c 	bl	800cbee <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductIS1_S1_Li0EEEEERKT_>
      m_rhs(xpr.rhs()),
 800bd56:	6838      	ldr	r0, [r7, #0]
 800bd58:	f000 ff32 	bl	800cbc0 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3rhsEv>
 800bd5c:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	3324      	adds	r3, #36	; 0x24
 800bd62:	6812      	ldr	r2, [r2, #0]
 800bd64:	601a      	str	r2, [r3, #0]
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	3328      	adds	r3, #40	; 0x28
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 800bd6a:	687a      	ldr	r2, [r7, #4]
      m_innerDim(xpr.lhs().cols())
 800bd6c:	4611      	mov	r1, r2
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f7fb fe16 	bl	80079a0 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f103 022c 	add.w	r2, r3, #44	; 0x2c
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	3324      	adds	r3, #36	; 0x24
      m_innerDim(xpr.lhs().cols())
 800bd7e:	4619      	mov	r1, r3
 800bd80:	4610      	mov	r0, r2
 800bd82:	f000 ff49 	bl	800cc18 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1ERKS5_>
 800bd86:	6838      	ldr	r0, [r7, #0]
 800bd88:	f000 ff0f 	bl	800cbaa <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3lhsEv>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f7f9 feaf 	bl	8005af2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>
 800bd94:	4602      	mov	r2, r0
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	631a      	str	r2, [r3, #48]	; 0x30
  }
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	370c      	adds	r7, #12
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd90      	pop	{r4, r7, pc}

0800bda4 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b082      	sub	sp, #8
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800bdac:	2200      	movs	r2, #0
 800bdae:	2100      	movs	r1, #0
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f000 ff40 	bl	800cc36 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f000 ff56 	bl	800cc68 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSG_>
  }
 800bdbc:	bf00      	nop
 800bdbe:	3708      	adds	r7, #8
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}

0800bdc4 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b086      	sub	sp, #24
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	60f8      	str	r0, [r7, #12]
 800bdcc:	60b9      	str	r1, [r7, #8]
 800bdce:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800bdd4:	687a      	ldr	r2, [r7, #4]
 800bdd6:	68b9      	ldr	r1, [r7, #8]
 800bdd8:	6978      	ldr	r0, [r7, #20]
 800bdda:	f000 ff55 	bl	800cc88 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>
}
 800bdde:	bf00      	nop
 800bde0:	3718      	adds	r7, #24
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}

0800bde6 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>:
  Derived& derived() { return *static_cast<Derived*>(this); }
 800bde6:	b480      	push	{r7}
 800bde8:	b083      	sub	sp, #12
 800bdea:	af00      	add	r7, sp, #0
 800bdec:	6078      	str	r0, [r7, #4]
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	370c      	adds	r7, #12
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfa:	4770      	bx	lr

0800bdfc <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b086      	sub	sp, #24
 800be00:	af00      	add	r7, sp, #0
 800be02:	60f8      	str	r0, [r7, #12]
 800be04:	60b9      	str	r1, [r7, #8]
 800be06:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800be0c:	687a      	ldr	r2, [r7, #4]
 800be0e:	68b9      	ldr	r1, [r7, #8]
 800be10:	6978      	ldr	r0, [r7, #20]
 800be12:	f000 ff73 	bl	800ccfc <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>
}
 800be16:	bf00      	nop
 800be18:	3718      	adds	r7, #24
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}

0800be1e <_ZNK5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 800be1e:	b480      	push	{r7}
 800be20:	b083      	sub	sp, #12
 800be22:	af00      	add	r7, sp, #0
 800be24:	6078      	str	r0, [r7, #4]
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	4618      	mov	r0, r3
 800be2a:	370c      	adds	r7, #12
 800be2c:	46bd      	mov	sp, r7
 800be2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be32:	4770      	bx	lr

0800be34 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11outerStrideEv>:
    inline Index outerStride() const EIGEN_NOEXCEPT { return this->innerSize(); }
 800be34:	b580      	push	{r7, lr}
 800be36:	b082      	sub	sp, #8
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f000 ff9c 	bl	800cd7a <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE9innerSizeEv>
 800be42:	4603      	mov	r3, r0
 800be44:	4618      	mov	r0, r3
 800be46:	3708      	adds	r7, #8
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}

0800be4c <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b084      	sub	sp, #16
 800be50:	af00      	add	r7, sp, #0
 800be52:	60f8      	str	r0, [r7, #12]
 800be54:	60b9      	str	r1, [r7, #8]
 800be56:	607a      	str	r2, [r7, #4]
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	687a      	ldr	r2, [r7, #4]
 800be5c:	68b9      	ldr	r1, [r7, #8]
 800be5e:	4618      	mov	r0, r3
 800be60:	f000 ff97 	bl	800cd92 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2b00      	cmp	r3, #0
 800be68:	db07      	blt.n	800be7a <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x2e>
 800be6a:	68bb      	ldr	r3, [r7, #8]
 800be6c:	4618      	mov	r0, r3
 800be6e:	f7f9 f9a6 	bl	80051be <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800be72:	4602      	mov	r2, r0
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	4293      	cmp	r3, r2
 800be78:	db05      	blt.n	800be86 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x3a>
 800be7a:	4b06      	ldr	r3, [pc, #24]	; (800be94 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x48>)
 800be7c:	4a06      	ldr	r2, [pc, #24]	; (800be98 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x4c>)
 800be7e:	2178      	movs	r1, #120	; 0x78
 800be80:	4806      	ldr	r0, [pc, #24]	; (800be9c <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x50>)
 800be82:	f012 f80f 	bl	801dea4 <__assert_func>
 800be86:	bf00      	nop
    }
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	4618      	mov	r0, r3
 800be8c:	3710      	adds	r7, #16
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}
 800be92:	bf00      	nop
 800be94:	08024890 	.word	0x08024890
 800be98:	08024fec 	.word	0x08024fec
 800be9c:	08024a14 	.word	0x08024a14

0800bea0 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800bea0:	b480      	push	{r7}
 800bea2:	b083      	sub	sp, #12
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	4618      	mov	r0, r3
 800beac:	370c      	adds	r7, #12
 800beae:	46bd      	mov	sp, r7
 800beb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb4:	4770      	bx	lr

0800beb6 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>:
 800beb6:	b580      	push	{r7, lr}
 800beb8:	b082      	sub	sp, #8
 800beba:	af00      	add	r7, sp, #0
 800bebc:	6078      	str	r0, [r7, #4]
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f000 ff78 	bl	800cdb4 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	4618      	mov	r0, r3
 800bec8:	3708      	adds	r7, #8
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}

0800bece <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 800bece:	b580      	push	{r7, lr}
 800bed0:	b082      	sub	sp, #8
 800bed2:	af00      	add	r7, sp, #0
 800bed4:	6078      	str	r0, [r7, #4]
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f7ff ffed 	bl	800beb6 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	4618      	mov	r0, r3
 800bee0:	3708      	adds	r7, #8
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}

0800bee6 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERS6_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 800bee6:	b5b0      	push	{r4, r5, r7, lr}
 800bee8:	b082      	sub	sp, #8
 800beea:	af00      	add	r7, sp, #0
 800beec:	6078      	str	r0, [r7, #4]
 800beee:	6039      	str	r1, [r7, #0]
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	f7ff ffec 	bl	800bece <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS_5DenseEEC1Ev>
 800bef6:	687a      	ldr	r2, [r7, #4]
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	4614      	mov	r4, r2
 800befc:	461d      	mov	r5, r3
 800befe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bf00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bf02:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bf06:	e884 0003 	stmia.w	r4, {r0, r1}
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3708      	adds	r7, #8
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bdb0      	pop	{r4, r5, r7, pc}

0800bf14 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b084      	sub	sp, #16
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	60f8      	str	r0, [r7, #12]
 800bf1c:	60b9      	str	r1, [r7, #8]
 800bf1e:	607a      	str	r2, [r7, #4]
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	687a      	ldr	r2, [r7, #4]
 800bf24:	68b9      	ldr	r1, [r7, #8]
 800bf26:	4618      	mov	r0, r3
 800bf28:	f000 ff4f 	bl	800cdca <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	db0f      	blt.n	800bf52 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x3e>
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	4618      	mov	r0, r3
 800bf36:	f7fa f88c 	bl	8006052 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800bf3a:	4602      	mov	r2, r0
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	4293      	cmp	r3, r2
 800bf40:	db0d      	blt.n	800bf5e <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x4a>
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	4618      	mov	r0, r3
 800bf46:	f7fa f88f 	bl	8006068 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800bf4a:	4602      	mov	r2, r0
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	4293      	cmp	r3, r2
 800bf50:	db05      	blt.n	800bf5e <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x4a>
 800bf52:	4b06      	ldr	r3, [pc, #24]	; (800bf6c <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x58>)
 800bf54:	4a06      	ldr	r2, [pc, #24]	; (800bf70 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x5c>)
 800bf56:	2178      	movs	r1, #120	; 0x78
 800bf58:	4806      	ldr	r0, [pc, #24]	; (800bf74 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x60>)
 800bf5a:	f011 ffa3 	bl	801dea4 <__assert_func>
 800bf5e:	bf00      	nop
    }
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	4618      	mov	r0, r3
 800bf64:	3710      	adds	r7, #16
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd80      	pop	{r7, pc}
 800bf6a:	bf00      	nop
 800bf6c:	08024890 	.word	0x08024890
 800bf70:	080250c8 	.word	0x080250c8
 800bf74:	08024a14 	.word	0x08024a14

0800bf78 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE7derivedEv>:
 800bf78:	b480      	push	{r7}
 800bf7a:	b083      	sub	sp, #12
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	4618      	mov	r0, r3
 800bf84:	370c      	adds	r7, #12
 800bf86:	46bd      	mov	sp, r7
 800bf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8c:	4770      	bx	lr

0800bf8e <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE7derivedEv>:
 800bf8e:	b480      	push	{r7}
 800bf90:	b083      	sub	sp, #12
 800bf92:	af00      	add	r7, sp, #0
 800bf94:	6078      	str	r0, [r7, #4]
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	4618      	mov	r0, r3
 800bf9a:	370c      	adds	r7, #12
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa2:	4770      	bx	lr

0800bfa4 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>:
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b082      	sub	sp, #8
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	f000 ff1d 	bl	800cdec <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	3708      	adds	r7, #8
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bd80      	pop	{r7, pc}

0800bfbc <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b082      	sub	sp, #8
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	f7ff ffed 	bl	800bfa4 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	4618      	mov	r0, r3
 800bfce:	3708      	adds	r7, #8
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}

0800bfd4 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b082      	sub	sp, #8
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f000 ff0f 	bl	800ce02 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4colsEv>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	3708      	adds	r7, #8
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}

0800bfee <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 800bfee:	b580      	push	{r7, lr}
 800bff0:	b082      	sub	sp, #8
 800bff2:	af00      	add	r7, sp, #0
 800bff4:	6078      	str	r0, [r7, #4]
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	4618      	mov	r0, r3
 800bffa:	f000 ff0d 	bl	800ce18 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4rowsEv>
 800bffe:	4603      	mov	r3, r0
 800c000:	4618      	mov	r0, r3
 800c002:	3708      	adds	r7, #8
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}

0800c008 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800c008:	b580      	push	{r7, lr}
 800c00a:	b082      	sub	sp, #8
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
 800c010:	f7fa fe01 	bl	8006c16 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800c014:	4603      	mov	r3, r0
 800c016:	4618      	mov	r0, r3
 800c018:	3708      	adds	r7, #8
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}

0800c01e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800c01e:	b580      	push	{r7, lr}
 800c020:	b082      	sub	sp, #8
 800c022:	af00      	add	r7, sp, #0
 800c024:	6078      	str	r0, [r7, #4]
 800c026:	f7fa fdf6 	bl	8006c16 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800c02a:	4603      	mov	r3, r0
 800c02c:	4618      	mov	r0, r3
 800c02e:	3708      	adds	r7, #8
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}

0800c034 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800c034:	b5b0      	push	{r4, r5, r7, lr}
 800c036:	b084      	sub	sp, #16
 800c038:	af00      	add	r7, sp, #0
 800c03a:	60f8      	str	r0, [r7, #12]
 800c03c:	60b9      	str	r1, [r7, #8]
 800c03e:	607a      	str	r2, [r7, #4]
 800c040:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800c042:	68f8      	ldr	r0, [r7, #12]
 800c044:	f7ff ffba 	bl	800bfbc <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEENS_5DenseEEC1Ev>
 800c048:	68fa      	ldr	r2, [r7, #12]
 800c04a:	68bb      	ldr	r3, [r7, #8]
 800c04c:	4614      	mov	r4, r2
 800c04e:	461d      	mov	r5, r3
 800c050:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c052:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c054:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c058:	e884 0003 	stmia.w	r4, {r0, r1}
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	f103 0218 	add.w	r2, r3, #24
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	4614      	mov	r4, r2
 800c066:	461d      	mov	r5, r3
 800c068:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c06a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c06c:	682b      	ldr	r3, [r5, #0]
 800c06e:	6023      	str	r3, [r4, #0]
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	332c      	adds	r3, #44	; 0x2c
 800c074:	6839      	ldr	r1, [r7, #0]
 800c076:	4618      	mov	r0, r3
 800c078:	f7f9 fb26 	bl	80056c8 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800c07c:	68b8      	ldr	r0, [r7, #8]
 800c07e:	f7ff ffa9 	bl	800bfd4 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>
 800c082:	4604      	mov	r4, r0
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	4618      	mov	r0, r3
 800c088:	f7ff ffbe 	bl	800c008 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4rowsEv>
 800c08c:	4603      	mov	r3, r0
 800c08e:	429c      	cmp	r4, r3
 800c090:	d10a      	bne.n	800c0a8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x74>
 800c092:	68b8      	ldr	r0, [r7, #8]
 800c094:	f7ff ffab 	bl	800bfee <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>
 800c098:	4604      	mov	r4, r0
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	4618      	mov	r0, r3
 800c09e:	f7ff ffbe 	bl	800c01e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4colsEv>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	429c      	cmp	r4, r3
 800c0a6:	d005      	beq.n	800c0b4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x80>
 800c0a8:	4b05      	ldr	r3, [pc, #20]	; (800c0c0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x8c>)
 800c0aa:	4a06      	ldr	r2, [pc, #24]	; (800c0c4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x90>)
 800c0ac:	2174      	movs	r1, #116	; 0x74
 800c0ae:	4806      	ldr	r0, [pc, #24]	; (800c0c8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x94>)
 800c0b0:	f011 fef8 	bl	801dea4 <__assert_func>
    }
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	3710      	adds	r7, #16
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bdb0      	pop	{r4, r5, r7, pc}
 800c0be:	bf00      	nop
 800c0c0:	0801fd0c 	.word	0x0801fd0c
 800c0c4:	080251a4 	.word	0x080251a4
 800c0c8:	0801ff70 	.word	0x0801ff70

0800c0cc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b082      	sub	sp, #8
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f000 f809 	bl	800c0ec <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f000 fea6 	bl	800ce2e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE4colsEv>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	3708      	adds	r7, #8
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}

0800c0ec <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800c0ec:	b480      	push	{r7}
 800c0ee:	b083      	sub	sp, #12
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	370c      	adds	r7, #12
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c100:	4770      	bx	lr

0800c102 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800c102:	b580      	push	{r7, lr}
 800c104:	b082      	sub	sp, #8
 800c106:	af00      	add	r7, sp, #0
 800c108:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	4618      	mov	r0, r3
 800c10e:	f7ff ff61 	bl	800bfd4 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>
 800c112:	4603      	mov	r3, r0
    }
 800c114:	4618      	mov	r0, r3
 800c116:	3708      	adds	r7, #8
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}

0800c11c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b082      	sub	sp, #8
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	6878      	ldr	r0, [r7, #4]
 800c126:	f000 feb4 	bl	800ce92 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	4618      	mov	r0, r3
 800c12e:	3708      	adds	r7, #8
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}

0800c134 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800c134:	b580      	push	{r7, lr}
 800c136:	b082      	sub	sp, #8
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	4618      	mov	r0, r3
 800c140:	f7ff ffec 	bl	800c11c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	4618      	mov	r0, r3
 800c148:	3708      	adds	r7, #8
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}

0800c14e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800c14e:	b580      	push	{r7, lr}
 800c150:	b082      	sub	sp, #8
 800c152:	af00      	add	r7, sp, #0
 800c154:	6078      	str	r0, [r7, #4]
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	4618      	mov	r0, r3
 800c15a:	f7ff ffeb 	bl	800c134 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EED1Ev>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	4618      	mov	r0, r3
 800c162:	3708      	adds	r7, #8
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}

0800c168 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 800c168:	b580      	push	{r7, lr}
 800c16a:	b082      	sub	sp, #8
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	4618      	mov	r0, r3
 800c174:	f7ff ffeb 	bl	800c14e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	4618      	mov	r0, r3
 800c17c:	3708      	adds	r7, #8
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}

0800c182 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800c182:	b580      	push	{r7, lr}
 800c184:	b082      	sub	sp, #8
 800c186:	af00      	add	r7, sp, #0
 800c188:	6078      	str	r0, [r7, #4]
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	4618      	mov	r0, r3
 800c18e:	f7ff ffeb 	bl	800c168 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f000 fe72 	bl	800ce7c <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	4618      	mov	r0, r3
 800c19c:	3708      	adds	r7, #8
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}

0800c1a2 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800c1a2:	b580      	push	{r7, lr}
 800c1a4:	b082      	sub	sp, #8
 800c1a6:	af00      	add	r7, sp, #0
 800c1a8:	6078      	str	r0, [r7, #4]
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f7ff ffe8 	bl	800c182 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfED1Ev>
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3708      	adds	r7, #8
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}

0800c1bc <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator<const T>
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b082      	sub	sp, #8
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f7ff ffeb 	bl	800c1a2 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	3708      	adds	r7, #8
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}

0800c1d6 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_ED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800c1d6:	b580      	push	{r7, lr}
 800c1d8:	b082      	sub	sp, #8
 800c1da:	af00      	add	r7, sp, #0
 800c1dc:	6078      	str	r0, [r7, #4]
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f000 fe62 	bl	800cea8 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3708      	adds	r7, #8
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}

0800c1ee <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800c1ee:	b580      	push	{r7, lr}
 800c1f0:	b082      	sub	sp, #8
 800c1f2:	af00      	add	r7, sp, #0
 800c1f4:	6078      	str	r0, [r7, #4]
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	f7ff ffec 	bl	800c1d6 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_ED1Ev>
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	4618      	mov	r0, r3
 800c202:	3708      	adds	r7, #8
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}

0800c208 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800c208:	b580      	push	{r7, lr}
 800c20a:	b082      	sub	sp, #8
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	4618      	mov	r0, r3
 800c214:	f7ff ffeb 	bl	800c1ee <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EED1Ev>
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	4618      	mov	r0, r3
 800c21c:	3708      	adds	r7, #8
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}

0800c222 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>:
struct evaluator<const T>
 800c222:	b580      	push	{r7, lr}
 800c224:	b082      	sub	sp, #8
 800c226:	af00      	add	r7, sp, #0
 800c228:	6078      	str	r0, [r7, #4]
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	4618      	mov	r0, r3
 800c22e:	f7ff ffeb 	bl	800c208 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	4618      	mov	r0, r3
 800c236:	3708      	adds	r7, #8
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}

0800c23c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b082      	sub	sp, #8
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	330c      	adds	r3, #12
 800c248:	4618      	mov	r0, r3
 800c24a:	f7ff ffea 	bl	800c222 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	3304      	adds	r3, #4
 800c252:	4618      	mov	r0, r3
 800c254:	f7ff ffb2 	bl	800c1bc <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	4618      	mov	r0, r3
 800c25c:	3708      	adds	r7, #8
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}

0800c262 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800c262:	b580      	push	{r7, lr}
 800c264:	b082      	sub	sp, #8
 800c266:	af00      	add	r7, sp, #0
 800c268:	6078      	str	r0, [r7, #4]
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	4618      	mov	r0, r3
 800c26e:	f7ff ffe5 	bl	800c23c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f000 fdf7 	bl	800ce66 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	4618      	mov	r0, r3
 800c27c:	3708      	adds	r7, #8
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}

0800c282 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800c282:	b580      	push	{r7, lr}
 800c284:	b082      	sub	sp, #8
 800c286:	af00      	add	r7, sp, #0
 800c288:	6078      	str	r0, [r7, #4]
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	4618      	mov	r0, r3
 800c28e:	f7ff ffe8 	bl	800c262 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	4618      	mov	r0, r3
 800c296:	3708      	adds	r7, #8
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}

0800c29c <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b082      	sub	sp, #8
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f7ff ffeb 	bl	800c282 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	3708      	adds	r7, #8
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}
	...

0800c2b8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	ed2d 8b02 	vpush	{d8}
 800c2be:	b088      	sub	sp, #32
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
 800c2c4:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f7ff f897 	bl	800b3fa <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE4rowsEv>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	dd05      	ble.n	800c2de <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f7ff fefa 	bl	800c0cc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE4colsEv>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	dc06      	bgt.n	800c2ec <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800c2de:	4b16      	ldr	r3, [pc, #88]	; (800c338 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800c2e0:	4a16      	ldr	r2, [pc, #88]	; (800c33c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800c2e2:	f240 119b 	movw	r1, #411	; 0x19b
 800c2e6:	4816      	ldr	r0, [pc, #88]	; (800c340 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800c2e8:	f011 fddc 	bl	801dea4 <__assert_func>
 800c2ec:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f7ff fefc 	bl	800c0ec <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800c2f4:	4602      	mov	r2, r0
 800c2f6:	f107 030c 	add.w	r3, r7, #12
 800c2fa:	4611      	mov	r1, r2
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f000 fda3 	bl	800ce48 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	f7ff fef2 	bl	800c0ec <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800c308:	4602      	mov	r2, r0
 800c30a:	f107 030c 	add.w	r3, r7, #12
 800c30e:	6839      	ldr	r1, [r7, #0]
 800c310:	4618      	mov	r0, r3
 800c312:	f000 fdd4 	bl	800cebe <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 800c316:	eeb0 8a40 	vmov.f32	s16, s0
 800c31a:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800c31c:	f107 030c 	add.w	r3, r7, #12
 800c320:	4618      	mov	r0, r3
 800c322:	f7ff ffbb 	bl	800c29c <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800c326:	eef0 7a48 	vmov.f32	s15, s16
}
 800c32a:	eeb0 0a67 	vmov.f32	s0, s15
 800c32e:	3720      	adds	r7, #32
 800c330:	46bd      	mov	sp, r7
 800c332:	ecbd 8b02 	vpop	{d8}
 800c336:	bd80      	pop	{r7, pc}
 800c338:	08024d8c 	.word	0x08024d8c
 800c33c:	080253ec 	.word	0x080253ec
 800c340:	08024f98 	.word	0x08024f98

0800c344 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEESF_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800c344:	b580      	push	{r7, lr}
 800c346:	b082      	sub	sp, #8
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
 800c34c:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800c34e:	6839      	ldr	r1, [r7, #0]
 800c350:	6878      	ldr	r0, [r7, #4]
 800c352:	f000 fdc5 	bl	800cee0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800c356:	bf00      	nop
 800c358:	3708      	adds	r7, #8
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}

0800c35e <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffE5coeffEi>:
  const CoeffReturnType coeff(Index index) const
 800c35e:	b580      	push	{r7, lr}
 800c360:	b0a2      	sub	sp, #136	; 0x88
 800c362:	af00      	add	r7, sp, #0
 800c364:	6078      	str	r0, [r7, #4]
 800c366:	6039      	str	r1, [r7, #0]
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 800c36e:	2300      	movs	r3, #0
 800c370:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	6819      	ldr	r1, [r3, #0]
 800c378:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800c37c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c380:	4618      	mov	r0, r3
 800c382:	f7fe ffe5 	bl	800b350 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3rowEi>
 800c386:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c38a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800c38e:	4611      	mov	r1, r2
 800c390:	4618      	mov	r0, r3
 800c392:	f7fe fff0 	bl	800b376 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE9transposeEv>
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	1d19      	adds	r1, r3, #4
 800c39a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800c39e:	2200      	movs	r2, #0
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f7fe fff9 	bl	800b398 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE3colEi>
 800c3a6:	f107 030c 	add.w	r3, r7, #12
 800c3aa:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800c3ae:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f7ff f803 	bl	800b3be <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 800c3b8:	f107 030c 	add.w	r3, r7, #12
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f7ff f82c 	bl	800b41a <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE3sumEv>
 800c3c2:	eef0 7a40 	vmov.f32	s15, s0
  }
 800c3c6:	eeb0 0a67 	vmov.f32	s0, s15
 800c3ca:	3788      	adds	r7, #136	; 0x88
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}

0800c3d0 <_ZNK5Eigen8internal13add_assign_opIffE11assignCoeffERfRKf>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a += b; }
 800c3d0:	b480      	push	{r7}
 800c3d2:	b085      	sub	sp, #20
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	60f8      	str	r0, [r7, #12]
 800c3d8:	60b9      	str	r1, [r7, #8]
 800c3da:	607a      	str	r2, [r7, #4]
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	ed93 7a00 	vldr	s14, [r3]
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	edd3 7a00 	vldr	s15, [r3]
 800c3e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	edc3 7a00 	vstr	s15, [r3]
 800c3f2:	bf00      	nop
 800c3f4:	3714      	adds	r7, #20
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fc:	4770      	bx	lr

0800c3fe <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi2ELi3EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800c3fe:	b580      	push	{r7, lr}
 800c400:	b082      	sub	sp, #8
 800c402:	af00      	add	r7, sp, #0
 800c404:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800c406:	2102      	movs	r1, #2
 800c408:	6878      	ldr	r0, [r7, #4]
 800c40a:	f7ff f863 	bl	800b4d4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f000 fd87 	bl	800cf22 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi3ELi3EE3runERSL_>
  }
 800c414:	bf00      	nop
 800c416:	3708      	adds	r7, #8
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd80      	pop	{r7, pc}

0800c41c <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b086      	sub	sp, #24
 800c420:	af00      	add	r7, sp, #0
 800c422:	60f8      	str	r0, [r7, #12]
 800c424:	60b9      	str	r1, [r7, #8]
 800c426:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800c42c:	687a      	ldr	r2, [r7, #4]
 800c42e:	68b9      	ldr	r1, [r7, #8]
 800c430:	6978      	ldr	r0, [r7, #20]
 800c432:	f000 fd80 	bl	800cf36 <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_9assign_opIffEENS0_13sub_assign_opIffEEE3runINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KS7_EES9_EEvRS3_RKT_RKT0_>
}
 800c436:	bf00      	nop
 800c438:	3718      	adds	r7, #24
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}

0800c43e <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3colEi>:
ConstColXpr col(Index i) const
 800c43e:	b580      	push	{r7, lr}
 800c440:	b084      	sub	sp, #16
 800c442:	af00      	add	r7, sp, #0
 800c444:	60f8      	str	r0, [r7, #12]
 800c446:	60b9      	str	r1, [r7, #8]
 800c448:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800c44a:	68b8      	ldr	r0, [r7, #8]
 800c44c:	f7f9 fa1b 	bl	8005886 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800c450:	4603      	mov	r3, r0
 800c452:	687a      	ldr	r2, [r7, #4]
 800c454:	4619      	mov	r1, r3
 800c456:	68f8      	ldr	r0, [r7, #12]
 800c458:	f000 fd98 	bl	800cf8c <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i>
}
 800c45c:	68f8      	ldr	r0, [r7, #12]
 800c45e:	3710      	adds	r7, #16
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}

0800c464 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IS5_Li3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800c464:	b5b0      	push	{r4, r5, r7, lr}
 800c466:	b086      	sub	sp, #24
 800c468:	af00      	add	r7, sp, #0
 800c46a:	60f8      	str	r0, [r7, #12]
 800c46c:	60b9      	str	r1, [r7, #8]
 800c46e:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800c470:	68b8      	ldr	r0, [r7, #8]
 800c472:	f7ff fa67 	bl	800b944 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>
 800c476:	4604      	mov	r4, r0
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f000 fdaf 	bl	800cfdc <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7derivedEv>
 800c47e:	4605      	mov	r5, r0
 800c480:	f107 0314 	add.w	r3, r7, #20
 800c484:	4618      	mov	r0, r3
 800c486:	f7f9 f895 	bl	80055b4 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800c48a:	f107 0314 	add.w	r3, r7, #20
 800c48e:	462a      	mov	r2, r5
 800c490:	4621      	mov	r1, r4
 800c492:	68f8      	ldr	r0, [r7, #12]
 800c494:	f000 fddc 	bl	800d050 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_>
}
 800c498:	68f8      	ldr	r0, [r7, #12]
 800c49a:	3718      	adds	r7, #24
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bdb0      	pop	{r4, r5, r7, pc}

0800c4a0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b082      	sub	sp, #8
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	f000 fe2f 	bl	800d10c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f000 fe36 	bl	800d122 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE4rowsEv>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	3708      	adds	r7, #8
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}

0800c4c0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 800c4c0:	b590      	push	{r4, r7, lr}
 800c4c2:	b085      	sub	sp, #20
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	f000 fe1f 	bl	800d10c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800c4ce:	4604      	mov	r4, r0
 800c4d0:	f107 030c 	add.w	r3, r7, #12
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f7f9 fb64 	bl	8005ba2 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800c4da:	f107 030c 	add.w	r3, r7, #12
 800c4de:	4619      	mov	r1, r3
 800c4e0:	4620      	mov	r0, r4
 800c4e2:	f000 fe9b 	bl	800d21c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800c4e6:	eef0 7a40 	vmov.f32	s15, s0
 800c4ea:	bf00      	nop
}
 800c4ec:	eeb0 0a67 	vmov.f32	s0, s15
 800c4f0:	3714      	adds	r7, #20
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd90      	pop	{r4, r7, pc}

0800c4f6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800c4f6:	b580      	push	{r7, lr}
 800c4f8:	b082      	sub	sp, #8
 800c4fa:	af00      	add	r7, sp, #0
 800c4fc:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800c4fe:	2201      	movs	r2, #1
 800c500:	2101      	movs	r1, #1
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f7fe f9a8 	bl	800a858 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	f000 fecd 	bl	800d2a8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSL_>
  }
 800c50e:	bf00      	nop
 800c510:	3708      	adds	r7, #8
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}

0800c516 <_ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS8_>:
  EIGEN_DEVICE_FUNC explicit evaluator(const XprType& n)
 800c516:	b590      	push	{r4, r7, lr}
 800c518:	b083      	sub	sp, #12
 800c51a:	af00      	add	r7, sp, #0
 800c51c:	6078      	str	r0, [r7, #4]
 800c51e:	6039      	str	r1, [r7, #0]
    : m_functor(n.functor()), m_wrapper()
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f000 fedd 	bl	800d2e0 <_ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 800c526:	687c      	ldr	r4, [r7, #4]
 800c528:	6838      	ldr	r0, [r7, #0]
 800c52a:	f000 fecd 	bl	800d2c8 <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7functorEv>
 800c52e:	4603      	mov	r3, r0
 800c530:	4619      	mov	r1, r3
 800c532:	4620      	mov	r0, r4
 800c534:	f7f9 f8b8 	bl	80056a8 <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKS2_>
  }
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	4618      	mov	r0, r3
 800c53c:	370c      	adds	r7, #12
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd90      	pop	{r4, r7, pc}
	...

0800c544 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800c544:	b580      	push	{r7, lr}
 800c546:	b084      	sub	sp, #16
 800c548:	af00      	add	r7, sp, #0
 800c54a:	60f8      	str	r0, [r7, #12]
 800c54c:	60b9      	str	r1, [r7, #8]
 800c54e:	607a      	str	r2, [r7, #4]
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	687a      	ldr	r2, [r7, #4]
 800c554:	68b9      	ldr	r1, [r7, #8]
 800c556:	4618      	mov	r0, r3
 800c558:	f000 fecd 	bl	800d2f6 <_ZN5Eigen9BlockImplIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ENS_5DenseEEC1ERSE_i>
      eigen_assert( (i>=0) && (
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	db06      	blt.n	800c570 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x2c>
 800c562:	68b8      	ldr	r0, [r7, #8]
 800c564:	f7fb fe6d 	bl	8008242 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>
 800c568:	4602      	mov	r2, r0
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	4293      	cmp	r3, r2
 800c56e:	db05      	blt.n	800c57c <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x38>
 800c570:	4b05      	ldr	r3, [pc, #20]	; (800c588 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x44>)
 800c572:	4a06      	ldr	r2, [pc, #24]	; (800c58c <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x48>)
 800c574:	2178      	movs	r1, #120	; 0x78
 800c576:	4806      	ldr	r0, [pc, #24]	; (800c590 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x4c>)
 800c578:	f011 fc94 	bl	801dea4 <__assert_func>
 800c57c:	bf00      	nop
    }
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	4618      	mov	r0, r3
 800c582:	3710      	adds	r7, #16
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}
 800c588:	08024890 	.word	0x08024890
 800c58c:	080255b4 	.word	0x080255b4
 800c590:	08024a14 	.word	0x08024a14

0800c594 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800c594:	b480      	push	{r7}
 800c596:	b083      	sub	sp, #12
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	4618      	mov	r0, r3
 800c5a0:	370c      	adds	r7, #12
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a8:	4770      	bx	lr

0800c5aa <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>:
 800c5aa:	b580      	push	{r7, lr}
 800c5ac:	b082      	sub	sp, #8
 800c5ae:	af00      	add	r7, sp, #0
 800c5b0:	6078      	str	r0, [r7, #4]
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	f000 feb0 	bl	800d318 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	3708      	adds	r7, #8
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}

0800c5c2 <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 800c5c2:	b580      	push	{r7, lr}
 800c5c4:	b082      	sub	sp, #8
 800c5c6:	af00      	add	r7, sp, #0
 800c5c8:	6078      	str	r0, [r7, #4]
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f7ff ffed 	bl	800c5aa <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	3708      	adds	r7, #8
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}

0800c5da <_ZN5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERSH_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 800c5da:	b580      	push	{r7, lr}
 800c5dc:	b082      	sub	sp, #8
 800c5de:	af00      	add	r7, sp, #0
 800c5e0:	6078      	str	r0, [r7, #4]
 800c5e2:	6039      	str	r1, [r7, #0]
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f7ff ffec 	bl	800c5c2 <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS_5DenseEEC1Ev>
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	6839      	ldr	r1, [r7, #0]
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f7ff f86c 	bl	800b6cc <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERKSF_>
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	3708      	adds	r7, #8
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}
	...

0800c600 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800c600:	b580      	push	{r7, lr}
 800c602:	b084      	sub	sp, #16
 800c604:	af00      	add	r7, sp, #0
 800c606:	60f8      	str	r0, [r7, #12]
 800c608:	60b9      	str	r1, [r7, #8]
 800c60a:	607a      	str	r2, [r7, #4]
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	687a      	ldr	r2, [r7, #4]
 800c610:	68b9      	ldr	r1, [r7, #8]
 800c612:	4618      	mov	r0, r3
 800c614:	f000 fe8b 	bl	800d32e <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ENS_5DenseEEC1ERS5_i>
      eigen_assert( (i>=0) && (
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	db06      	blt.n	800c62c <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x2c>
 800c61e:	68b8      	ldr	r0, [r7, #8]
 800c620:	f7fb fe1d 	bl	800825e <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800c624:	4602      	mov	r2, r0
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	4293      	cmp	r3, r2
 800c62a:	db05      	blt.n	800c638 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x38>
 800c62c:	4b05      	ldr	r3, [pc, #20]	; (800c644 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x44>)
 800c62e:	4a06      	ldr	r2, [pc, #24]	; (800c648 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x48>)
 800c630:	2178      	movs	r1, #120	; 0x78
 800c632:	4806      	ldr	r0, [pc, #24]	; (800c64c <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x4c>)
 800c634:	f011 fc36 	bl	801dea4 <__assert_func>
    }
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	4618      	mov	r0, r3
 800c63c:	3710      	adds	r7, #16
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}
 800c642:	bf00      	nop
 800c644:	08024890 	.word	0x08024890
 800c648:	0802574c 	.word	0x0802574c
 800c64c:	08024a14 	.word	0x08024a14

0800c650 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEE7derivedEv>:
 800c650:	b480      	push	{r7}
 800c652:	b083      	sub	sp, #12
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	4618      	mov	r0, r3
 800c65c:	370c      	adds	r7, #12
 800c65e:	46bd      	mov	sp, r7
 800c660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c664:	4770      	bx	lr

0800c666 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEE7derivedEv>:
 800c666:	b480      	push	{r7}
 800c668:	b083      	sub	sp, #12
 800c66a:	af00      	add	r7, sp, #0
 800c66c:	6078      	str	r0, [r7, #4]
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	4618      	mov	r0, r3
 800c672:	370c      	adds	r7, #12
 800c674:	46bd      	mov	sp, r7
 800c676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67a:	4770      	bx	lr

0800c67c <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>:
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b082      	sub	sp, #8
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f000 fe63 	bl	800d350 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	4618      	mov	r0, r3
 800c68e:	3708      	adds	r7, #8
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}

0800c694 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpIS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS8_EELi1ELi1ELb0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800c694:	b580      	push	{r7, lr}
 800c696:	b082      	sub	sp, #8
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
 800c69c:	6878      	ldr	r0, [r7, #4]
 800c69e:	f7ff ffed 	bl	800c67c <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	3708      	adds	r7, #8
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	bd80      	pop	{r7, pc}

0800c6ac <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b082      	sub	sp, #8
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f000 fe55 	bl	800d366 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE4colsEv>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	4618      	mov	r0, r3
 800c6c0:	3708      	adds	r7, #8
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}

0800c6c6 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 800c6c6:	b580      	push	{r7, lr}
 800c6c8:	b082      	sub	sp, #8
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	6078      	str	r0, [r7, #4]
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	f000 fe53 	bl	800d37c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE4rowsEv>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	4618      	mov	r0, r3
 800c6da:	3708      	adds	r7, #8
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd80      	pop	{r7, pc}

0800c6e0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b082      	sub	sp, #8
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
 800c6e8:	f7fa fa95 	bl	8006c16 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	3708      	adds	r7, #8
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd80      	pop	{r7, pc}

0800c6f6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800c6f6:	b580      	push	{r7, lr}
 800c6f8:	b082      	sub	sp, #8
 800c6fa:	af00      	add	r7, sp, #0
 800c6fc:	6078      	str	r0, [r7, #4]
 800c6fe:	f7fa fa8a 	bl	8006c16 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800c702:	4603      	mov	r3, r0
 800c704:	4618      	mov	r0, r3
 800c706:	3708      	adds	r7, #8
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd80      	pop	{r7, pc}

0800c70c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800c70c:	b5b0      	push	{r4, r5, r7, lr}
 800c70e:	b084      	sub	sp, #16
 800c710:	af00      	add	r7, sp, #0
 800c712:	60f8      	str	r0, [r7, #12]
 800c714:	60b9      	str	r1, [r7, #8]
 800c716:	607a      	str	r2, [r7, #4]
 800c718:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800c71a:	68f8      	ldr	r0, [r7, #12]
 800c71c:	f7ff ffba 	bl	800c694 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpIS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS8_EELi1ELi1ELb0EEENS_5DenseEEC1Ev>
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	3304      	adds	r3, #4
 800c724:	68b9      	ldr	r1, [r7, #8]
 800c726:	4618      	mov	r0, r3
 800c728:	f7fe fff3 	bl	800b712 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERKSI_>
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	f103 021c 	add.w	r2, r3, #28
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	4614      	mov	r4, r2
 800c736:	461d      	mov	r5, r3
 800c738:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c73a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c73c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c740:	e884 0003 	stmia.w	r4, {r0, r1}
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	3334      	adds	r3, #52	; 0x34
 800c748:	6839      	ldr	r1, [r7, #0]
 800c74a:	4618      	mov	r0, r3
 800c74c:	f7f8 ffbc 	bl	80056c8 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800c750:	68b8      	ldr	r0, [r7, #8]
 800c752:	f7ff ffab 	bl	800c6ac <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4rowsEv>
 800c756:	4604      	mov	r4, r0
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	4618      	mov	r0, r3
 800c75c:	f7ff ffc0 	bl	800c6e0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4rowsEv>
 800c760:	4603      	mov	r3, r0
 800c762:	429c      	cmp	r4, r3
 800c764:	d10a      	bne.n	800c77c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x70>
 800c766:	68b8      	ldr	r0, [r7, #8]
 800c768:	f7ff ffad 	bl	800c6c6 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4colsEv>
 800c76c:	4604      	mov	r4, r0
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	4618      	mov	r0, r3
 800c772:	f7ff ffc0 	bl	800c6f6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4colsEv>
 800c776:	4603      	mov	r3, r0
 800c778:	429c      	cmp	r4, r3
 800c77a:	d005      	beq.n	800c788 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x7c>
 800c77c:	4b05      	ldr	r3, [pc, #20]	; (800c794 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x88>)
 800c77e:	4a06      	ldr	r2, [pc, #24]	; (800c798 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x8c>)
 800c780:	2174      	movs	r1, #116	; 0x74
 800c782:	4806      	ldr	r0, [pc, #24]	; (800c79c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x90>)
 800c784:	f011 fb8e 	bl	801dea4 <__assert_func>
    }
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	4618      	mov	r0, r3
 800c78c:	3710      	adds	r7, #16
 800c78e:	46bd      	mov	sp, r7
 800c790:	bdb0      	pop	{r4, r5, r7, pc}
 800c792:	bf00      	nop
 800c794:	0801fd0c 	.word	0x0801fd0c
 800c798:	0802583c 	.word	0x0802583c
 800c79c:	0801ff70 	.word	0x0801ff70

0800c7a0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b082      	sub	sp, #8
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f000 f809 	bl	800c7c0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	f000 fdee 	bl	800d392 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE4colsEv>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	3708      	adds	r7, #8
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bd80      	pop	{r7, pc}

0800c7c0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800c7c0:	b480      	push	{r7}
 800c7c2:	b083      	sub	sp, #12
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	370c      	adds	r7, #12
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d4:	4770      	bx	lr

0800c7d6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800c7d6:	b580      	push	{r7, lr}
 800c7d8:	b082      	sub	sp, #8
 800c7da:	af00      	add	r7, sp, #0
 800c7dc:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	3304      	adds	r3, #4
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f7ff ff62 	bl	800c6ac <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4rowsEv>
 800c7e8:	4603      	mov	r3, r0
    }
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	3708      	adds	r7, #8
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bd80      	pop	{r7, pc}

0800c7f2 <_ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>:
struct evaluator<const T>
 800c7f2:	b580      	push	{r7, lr}
 800c7f4:	b082      	sub	sp, #8
 800c7f6:	af00      	add	r7, sp, #0
 800c7f8:	6078      	str	r0, [r7, #4]
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f7fc fc30 	bl	8009062 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	4618      	mov	r0, r3
 800c806:	3708      	adds	r7, #8
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}

0800c80c <_ZN5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel>, IndexBased>
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b082      	sub	sp, #8
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	4618      	mov	r0, r3
 800c818:	f7ff ffeb 	bl	800c7f2 <_ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f000 fdeb 	bl	800d3f8 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	4618      	mov	r0, r3
 800c826:	3708      	adds	r7, #8
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}

0800c82c <_ZN5Eigen8internal15block_evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /*HasDirectAccess*/ false>
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b082      	sub	sp, #8
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	4618      	mov	r0, r3
 800c838:	f7ff ffe8 	bl	800c80c <_ZN5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfED1Ev>
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	4618      	mov	r0, r3
 800c840:	3708      	adds	r7, #8
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}

0800c846 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800c846:	b580      	push	{r7, lr}
 800c848:	b082      	sub	sp, #8
 800c84a:	af00      	add	r7, sp, #0
 800c84c:	6078      	str	r0, [r7, #4]
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	4618      	mov	r0, r3
 800c852:	f7ff ffeb 	bl	800c82c <_ZN5Eigen8internal15block_evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EED1Ev>
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	4618      	mov	r0, r3
 800c85a:	3708      	adds	r7, #8
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}

0800c860 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 800c860:	b580      	push	{r7, lr}
 800c862:	b082      	sub	sp, #8
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	4618      	mov	r0, r3
 800c86c:	f7ff ffeb 	bl	800c846 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	4618      	mov	r0, r3
 800c874:	3708      	adds	r7, #8
 800c876:	46bd      	mov	sp, r7
 800c878:	bd80      	pop	{r7, pc}

0800c87a <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800c87a:	b580      	push	{r7, lr}
 800c87c:	b082      	sub	sp, #8
 800c87e:	af00      	add	r7, sp, #0
 800c880:	6078      	str	r0, [r7, #4]
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	4618      	mov	r0, r3
 800c886:	f7ff ffeb 	bl	800c860 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f000 fda9 	bl	800d3e2 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	4618      	mov	r0, r3
 800c894:	3708      	adds	r7, #8
 800c896:	46bd      	mov	sp, r7
 800c898:	bd80      	pop	{r7, pc}

0800c89a <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800c89a:	b580      	push	{r7, lr}
 800c89c:	b082      	sub	sp, #8
 800c89e:	af00      	add	r7, sp, #0
 800c8a0:	6078      	str	r0, [r7, #4]
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	f7ff ffe8 	bl	800c87a <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfED1Ev>
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	3708      	adds	r7, #8
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bd80      	pop	{r7, pc}

0800c8b4 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator<const T>
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b082      	sub	sp, #8
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f7ff ffeb 	bl	800c89a <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	3708      	adds	r7, #8
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd80      	pop	{r7, pc}

0800c8ce <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800c8ce:	b580      	push	{r7, lr}
 800c8d0:	b082      	sub	sp, #8
 800c8d2:	af00      	add	r7, sp, #0
 800c8d4:	6078      	str	r0, [r7, #4]
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f000 fd99 	bl	800d40e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	4618      	mov	r0, r3
 800c8e0:	3708      	adds	r7, #8
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	bd80      	pop	{r7, pc}

0800c8e6 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800c8e6:	b580      	push	{r7, lr}
 800c8e8:	b082      	sub	sp, #8
 800c8ea:	af00      	add	r7, sp, #0
 800c8ec:	6078      	str	r0, [r7, #4]
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f7ff ffec 	bl	800c8ce <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEED1Ev>
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	3708      	adds	r7, #8
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	bd80      	pop	{r7, pc}

0800c900 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800c900:	b580      	push	{r7, lr}
 800c902:	b082      	sub	sp, #8
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	4618      	mov	r0, r3
 800c90c:	f7ff ffeb 	bl	800c8e6 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EED1Ev>
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	4618      	mov	r0, r3
 800c914:	3708      	adds	r7, #8
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}

0800c91a <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 800c91a:	b580      	push	{r7, lr}
 800c91c:	b082      	sub	sp, #8
 800c91e:	af00      	add	r7, sp, #0
 800c920:	6078      	str	r0, [r7, #4]
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	4618      	mov	r0, r3
 800c926:	f7ff ffeb 	bl	800c900 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	4618      	mov	r0, r3
 800c92e:	3708      	adds	r7, #8
 800c930:	46bd      	mov	sp, r7
 800c932:	bd80      	pop	{r7, pc}

0800c934 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4DataD1Ev>:
  struct Data
 800c934:	b580      	push	{r7, lr}
 800c936:	b082      	sub	sp, #8
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	3320      	adds	r3, #32
 800c940:	4618      	mov	r0, r3
 800c942:	f7ff ffea 	bl	800c91a <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	3304      	adds	r3, #4
 800c94a:	4618      	mov	r0, r3
 800c94c:	f7ff ffb2 	bl	800c8b4 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	4618      	mov	r0, r3
 800c954:	3708      	adds	r7, #8
 800c956:	46bd      	mov	sp, r7
 800c958:	bd80      	pop	{r7, pc}

0800c95a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800c95a:	b580      	push	{r7, lr}
 800c95c:	b082      	sub	sp, #8
 800c95e:	af00      	add	r7, sp, #0
 800c960:	6078      	str	r0, [r7, #4]
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	4618      	mov	r0, r3
 800c966:	f7ff ffe5 	bl	800c934 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4DataD1Ev>
 800c96a:	6878      	ldr	r0, [r7, #4]
 800c96c:	f000 fd2e 	bl	800d3cc <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	4618      	mov	r0, r3
 800c974:	3708      	adds	r7, #8
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}

0800c97a <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800c97a:	b580      	push	{r7, lr}
 800c97c:	b082      	sub	sp, #8
 800c97e:	af00      	add	r7, sp, #0
 800c980:	6078      	str	r0, [r7, #4]
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	4618      	mov	r0, r3
 800c986:	f7ff ffe8 	bl	800c95a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffED1Ev>
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	4618      	mov	r0, r3
 800c98e:	3708      	adds	r7, #8
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}

0800c994 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800c994:	b580      	push	{r7, lr}
 800c996:	b082      	sub	sp, #8
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f7ff ffeb 	bl	800c97a <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	3708      	adds	r7, #8
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}
	...

0800c9b0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	ed2d 8b02 	vpush	{d8}
 800c9b6:	b08c      	sub	sp, #48	; 0x30
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
 800c9bc:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800c9be:	6878      	ldr	r0, [r7, #4]
 800c9c0:	f7fe fef9 	bl	800b7b6 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE4rowsEv>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	dd05      	ble.n	800c9d6 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f7ff fee8 	bl	800c7a0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE4colsEv>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	dc06      	bgt.n	800c9e4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800c9d6:	4b16      	ldr	r3, [pc, #88]	; (800ca30 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800c9d8:	4a16      	ldr	r2, [pc, #88]	; (800ca34 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800c9da:	f240 119b 	movw	r1, #411	; 0x19b
 800c9de:	4816      	ldr	r0, [pc, #88]	; (800ca38 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800c9e0:	f011 fa60 	bl	801dea4 <__assert_func>
 800c9e4:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f7ff feea 	bl	800c7c0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800c9ec:	4602      	mov	r2, r0
 800c9ee:	f107 0308 	add.w	r3, r7, #8
 800c9f2:	4611      	mov	r1, r2
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f000 fcda 	bl	800d3ae <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1ERKSP_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f7ff fee0 	bl	800c7c0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800ca00:	4602      	mov	r2, r0
 800ca02:	f107 0308 	add.w	r3, r7, #8
 800ca06:	6839      	ldr	r1, [r7, #0]
 800ca08:	4618      	mov	r0, r3
 800ca0a:	f000 fd0b 	bl	800d424 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS5_IS7_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEELi1ELi1ELb0EEEEEKNS9_IKNS8_ISB_EELi1ELi1ELb0EEEEEEELi0ELi2EE3runISS_EEfRKST_RKS3_RKT_>
 800ca0e:	eeb0 8a40 	vmov.f32	s16, s0
 800ca12:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800ca14:	f107 0308 	add.w	r3, r7, #8
 800ca18:	4618      	mov	r0, r3
 800ca1a:	f7ff ffbb 	bl	800c994 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800ca1e:	eef0 7a48 	vmov.f32	s15, s16
}
 800ca22:	eeb0 0a67 	vmov.f32	s0, s15
 800ca26:	3730      	adds	r7, #48	; 0x30
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	ecbd 8b02 	vpop	{d8}
 800ca2e:	bd80      	pop	{r7, pc}
 800ca30:	08024d8c 	.word	0x08024d8c
 800ca34:	08025c24 	.word	0x08025c24
 800ca38:	08024f98 	.word	0x08024f98

0800ca3c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b082      	sub	sp, #8
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800ca44:	2202      	movs	r2, #2
 800ca46:	2101      	movs	r1, #1
 800ca48:	6878      	ldr	r0, [r7, #4]
 800ca4a:	f7fd fc3e 	bl	800a2ca <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	f000 fcf9 	bl	800d446 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSP_>
  }
 800ca54:	bf00      	nop
 800ca56:	3708      	adds	r7, #8
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}

0800ca5c <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ENS_5DenseEEC1ERS3_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b084      	sub	sp, #16
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	60f8      	str	r0, [r7, #12]
 800ca64:	60b9      	str	r1, [r7, #8]
 800ca66:	607a      	str	r2, [r7, #4]
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	687a      	ldr	r2, [r7, #4]
 800ca6c:	68b9      	ldr	r1, [r7, #8]
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f000 fcf9 	bl	800d466 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERS4_i>
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	4618      	mov	r0, r3
 800ca78:	3710      	adds	r7, #16
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bd80      	pop	{r7, pc}

0800ca7e <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800ca7e:	b480      	push	{r7}
 800ca80:	b083      	sub	sp, #12
 800ca82:	af00      	add	r7, sp, #0
 800ca84:	6078      	str	r0, [r7, #4]
    }
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	4618      	mov	r0, r3
 800ca8a:	370c      	adds	r7, #12
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca92:	4770      	bx	lr

0800ca94 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ENS_5DenseEEC1ERS3_i>:
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b084      	sub	sp, #16
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	60f8      	str	r0, [r7, #12]
 800ca9c:	60b9      	str	r1, [r7, #8]
 800ca9e:	607a      	str	r2, [r7, #4]
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	687a      	ldr	r2, [r7, #4]
 800caa4:	68b9      	ldr	r1, [r7, #8]
 800caa6:	4618      	mov	r0, r3
 800caa8:	f000 fd13 	bl	800d4d2 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EEC1ERS4_i>
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	4618      	mov	r0, r3
 800cab0:	3710      	adds	r7, #16
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bd80      	pop	{r7, pc}

0800cab6 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800cab6:	b480      	push	{r7}
 800cab8:	b083      	sub	sp, #12
 800caba:	af00      	add	r7, sp, #0
 800cabc:	6078      	str	r0, [r7, #4]
    }
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	4618      	mov	r0, r3
 800cac2:	370c      	adds	r7, #12
 800cac4:	46bd      	mov	sp, r7
 800cac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caca:	4770      	bx	lr

0800cacc <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4colsEv>:
 800cacc:	b580      	push	{r7, lr}
 800cace:	b082      	sub	sp, #8
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
 800cad4:	f7fa f897 	bl	8006c06 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800cad8:	4603      	mov	r3, r0
 800cada:	4618      	mov	r0, r3
 800cadc:	3708      	adds	r7, #8
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}

0800cae2 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800cae2:	b580      	push	{r7, lr}
 800cae4:	b082      	sub	sp, #8
 800cae6:	af00      	add	r7, sp, #0
 800cae8:	6078      	str	r0, [r7, #4]
 800caea:	f7fa f894 	bl	8006c16 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800caee:	4603      	mov	r3, r0
 800caf0:	4618      	mov	r0, r3
 800caf2:	3708      	adds	r7, #8
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bd80      	pop	{r7, pc}

0800caf8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b082      	sub	sp, #8
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	4618      	mov	r0, r3
 800cb04:	f7fe ff59 	bl	800b9ba <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800cb08:	4603      	mov	r3, r0
    }
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	3708      	adds	r7, #8
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}

0800cb12 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800cb12:	b580      	push	{r7, lr}
 800cb14:	b082      	sub	sp, #8
 800cb16:	af00      	add	r7, sp, #0
 800cb18:	6078      	str	r0, [r7, #4]
 800cb1a:	6039      	str	r1, [r7, #0]
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	6839      	ldr	r1, [r7, #0]
 800cb20:	4618      	mov	r0, r3
 800cb22:	f000 fd0c 	bl	800d53e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1ERKSI_>
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	4618      	mov	r0, r3
 800cb2a:	3708      	adds	r7, #8
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bd80      	pop	{r7, pc}

0800cb30 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800cb30:	b480      	push	{r7}
 800cb32:	b083      	sub	sp, #12
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	370c      	adds	r7, #12
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb44:	4770      	bx	lr

0800cb46 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>:
 800cb46:	b480      	push	{r7}
 800cb48:	b083      	sub	sp, #12
 800cb4a:	af00      	add	r7, sp, #0
 800cb4c:	6078      	str	r0, [r7, #4]
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	4618      	mov	r0, r3
 800cb52:	370c      	adds	r7, #12
 800cb54:	46bd      	mov	sp, r7
 800cb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5a:	4770      	bx	lr

0800cb5c <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>:
 800cb5c:	b480      	push	{r7}
 800cb5e:	b083      	sub	sp, #12
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	4618      	mov	r0, r3
 800cb68:	370c      	adds	r7, #12
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb70:	4770      	bx	lr

0800cb72 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>:
 800cb72:	b480      	push	{r7}
 800cb74:	b083      	sub	sp, #12
 800cb76:	af00      	add	r7, sp, #0
 800cb78:	6078      	str	r0, [r7, #4]
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	370c      	adds	r7, #12
 800cb80:	46bd      	mov	sp, r7
 800cb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb86:	4770      	bx	lr

0800cb88 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b084      	sub	sp, #16
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	60f8      	str	r0, [r7, #12]
 800cb90:	60b9      	str	r1, [r7, #8]
 800cb92:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800cb94:	68b9      	ldr	r1, [r7, #8]
 800cb96:	68f8      	ldr	r0, [r7, #12]
 800cb98:	f000 fce0 	bl	800d55c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSM_RKS3_>
 800cb9c:	eef0 7a40 	vmov.f32	s15, s0
  }
 800cba0:	eeb0 0a67 	vmov.f32	s0, s15
 800cba4:	3710      	adds	r7, #16
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd80      	pop	{r7, pc}

0800cbaa <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800cbaa:	b480      	push	{r7}
 800cbac:	b083      	sub	sp, #12
 800cbae:	af00      	add	r7, sp, #0
 800cbb0:	6078      	str	r0, [r7, #4]
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	370c      	adds	r7, #12
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbe:	4770      	bx	lr

0800cbc0 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800cbc0:	b480      	push	{r7}
 800cbc2:	b083      	sub	sp, #12
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	3308      	adds	r3, #8
 800cbcc:	4618      	mov	r0, r3
 800cbce:	370c      	adds	r7, #12
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd6:	4770      	bx	lr

0800cbd8 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800cbd8:	b480      	push	{r7}
 800cbda:	b083      	sub	sp, #12
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	370c      	adds	r7, #12
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbec:	4770      	bx	lr

0800cbee <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductIS1_S1_Li0EEEEERKT_>:
    explicit Matrix(const T& x)
 800cbee:	b580      	push	{r7, lr}
 800cbf0:	b082      	sub	sp, #8
 800cbf2:	af00      	add	r7, sp, #0
 800cbf4:	6078      	str	r0, [r7, #4]
 800cbf6:	6039      	str	r1, [r7, #0]
    {
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f7f8 f937 	bl	8004e6e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 800cc00:	f7f8 f945 	bl	8004e8e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	6839      	ldr	r1, [r7, #0]
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f000 fccb 	bl	800d5a4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductIS2_S2_Li0EEES6_EEvRKNS_9DenseBaseIT0_EE>
    }
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	4618      	mov	r0, r3
 800cc12:	3708      	adds	r7, #8
 800cc14:	46bd      	mov	sp, r7
 800cc16:	bd80      	pop	{r7, pc}

0800cc18 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b082      	sub	sp, #8
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
 800cc20:	6039      	str	r1, [r7, #0]
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	6839      	ldr	r1, [r7, #0]
 800cc26:	4618      	mov	r0, r3
 800cc28:	f000 fcc9 	bl	800d5be <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS0_10IndexBasedEfEC1ERKS5_>
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	4618      	mov	r0, r3
 800cc30:	3708      	adds	r7, #8
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}

0800cc36 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 800cc36:	b580      	push	{r7, lr}
 800cc38:	b086      	sub	sp, #24
 800cc3a:	af00      	add	r7, sp, #0
 800cc3c:	60f8      	str	r0, [r7, #12]
 800cc3e:	60b9      	str	r1, [r7, #8]
 800cc40:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 800cc42:	6879      	ldr	r1, [r7, #4]
 800cc44:	68b8      	ldr	r0, [r7, #8]
 800cc46:	f000 fcd0 	bl	800d5ea <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 800cc4a:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 800cc4c:	6879      	ldr	r1, [r7, #4]
 800cc4e:	68b8      	ldr	r0, [r7, #8]
 800cc50:	f000 fcd7 	bl	800d602 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 800cc54:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 800cc56:	693a      	ldr	r2, [r7, #16]
 800cc58:	6979      	ldr	r1, [r7, #20]
 800cc5a:	68f8      	ldr	r0, [r7, #12]
 800cc5c:	f000 fcdd 	bl	800d61a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 800cc60:	bf00      	nop
 800cc62:	3718      	adds	r7, #24
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}

0800cc68 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b082      	sub	sp, #8
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800cc70:	2201      	movs	r2, #1
 800cc72:	2100      	movs	r1, #0
 800cc74:	6878      	ldr	r0, [r7, #4]
 800cc76:	f7ff ffde 	bl	800cc36 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f000 fcf3 	bl	800d666 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSG_>
  }
 800cc80:	bf00      	nop
 800cc82:	3708      	adds	r7, #8
 800cc84:	46bd      	mov	sp, r7
 800cc86:	bd80      	pop	{r7, pc}

0800cc88 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 800cc88:	b590      	push	{r4, r7, lr}
 800cc8a:	b087      	sub	sp, #28
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	60f8      	str	r0, [r7, #12]
 800cc90:	60b9      	str	r1, [r7, #8]
 800cc92:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 800cc94:	68b8      	ldr	r0, [r7, #8]
 800cc96:	f7fb fc65 	bl	8008564 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4rowsEv>
 800cc9a:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 800cc9c:	68b8      	ldr	r0, [r7, #8]
 800cc9e:	f7f9 fab8 	bl	8006212 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>
 800cca2:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	4618      	mov	r0, r3
 800cca8:	f7f8 fa89 	bl	80051be <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800ccac:	4602      	mov	r2, r0
 800ccae:	697b      	ldr	r3, [r7, #20]
 800ccb0:	4293      	cmp	r3, r2
 800ccb2:	d107      	bne.n	800ccc4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_+0x3c>
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	f7f8 fa76 	bl	80051a8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800ccbc:	4602      	mov	r2, r0
 800ccbe:	693b      	ldr	r3, [r7, #16]
 800ccc0:	4293      	cmp	r3, r2
 800ccc2:	d001      	beq.n	800ccc8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_+0x40>
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	e000      	b.n	800ccca <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_+0x42>
 800ccc8:	2300      	movs	r3, #0
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d005      	beq.n	800ccda <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_+0x52>
      dst.resize(dstRows, dstCols);
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	693a      	ldr	r2, [r7, #16]
 800ccd2:	6979      	ldr	r1, [r7, #20]
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f7fb f97d 	bl	8007fd4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 800ccda:	68b8      	ldr	r0, [r7, #8]
 800ccdc:	f000 fcd3 	bl	800d686 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE3lhsEv>
 800cce0:	4604      	mov	r4, r0
 800cce2:	68b8      	ldr	r0, [r7, #8]
 800cce4:	f000 fcdb 	bl	800d69e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE3rhsEv>
 800cce8:	4603      	mov	r3, r0
 800ccea:	461a      	mov	r2, r3
 800ccec:	4621      	mov	r1, r4
 800ccee:	68f8      	ldr	r0, [r7, #12]
 800ccf0:	f000 fce1 	bl	800d6b6 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEENS_10DenseShapeES7_Li3EE6evalToINS2_IfLi3ELi1ELi0ELi3ELi1EEEEEvRT_RKS3_RKS6_>
  }
 800ccf4:	bf00      	nop
 800ccf6:	371c      	adds	r7, #28
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bd90      	pop	{r4, r7, pc}

0800ccfc <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>:
  static void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<typename DstXprType::Scalar,typename XprType::Scalar> &)
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b088      	sub	sp, #32
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	60f8      	str	r0, [r7, #12]
 800cd04:	60b9      	str	r1, [r7, #8]
 800cd06:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 800cd08:	68b8      	ldr	r0, [r7, #8]
 800cd0a:	f7f9 fa90 	bl	800622e <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>
 800cd0e:	61f8      	str	r0, [r7, #28]
    Index dstCols = src.cols();
 800cd10:	68b8      	ldr	r0, [r7, #8]
 800cd12:	f7fb fc35 	bl	8008580 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>
 800cd16:	61b8      	str	r0, [r7, #24]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	f7f9 f999 	bl	8006052 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800cd20:	4602      	mov	r2, r0
 800cd22:	69fb      	ldr	r3, [r7, #28]
 800cd24:	4293      	cmp	r3, r2
 800cd26:	d107      	bne.n	800cd38 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x3c>
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	f7f9 f99c 	bl	8006068 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800cd30:	4602      	mov	r2, r0
 800cd32:	69bb      	ldr	r3, [r7, #24]
 800cd34:	4293      	cmp	r3, r2
 800cd36:	d001      	beq.n	800cd3c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x40>
 800cd38:	2301      	movs	r3, #1
 800cd3a:	e000      	b.n	800cd3e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x42>
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d005      	beq.n	800cd4e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x52>
      dst.resize(dstRows, dstCols);
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	69ba      	ldr	r2, [r7, #24]
 800cd46:	69f9      	ldr	r1, [r7, #28]
 800cd48:	4618      	mov	r0, r3
 800cd4a:	f000 fcd3 	bl	800d6f4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>
    const int Size = EIGEN_PLAIN_ENUM_MIN(XprType::ColsAtCompileTime,DstXprType::ColsAtCompileTime);
 800cd4e:	2301      	movs	r3, #1
 800cd50:	617b      	str	r3, [r7, #20]
    ActualXprType actual_xpr(src.nestedExpression());
 800cd52:	68b8      	ldr	r0, [r7, #8]
 800cd54:	f000 fd00 	bl	800d758 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE16nestedExpressionEv>
 800cd58:	4602      	mov	r2, r0
 800cd5a:	f107 0310 	add.w	r3, r7, #16
 800cd5e:	4611      	mov	r1, r2
 800cd60:	4618      	mov	r0, r3
 800cd62:	f000 fd04 	bl	800d76e <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS7_INS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS1_EEEERKT_>
    compute_inverse<ActualXprTypeCleanded, DstXprType>::run(actual_xpr, dst);
 800cd66:	f107 0310 	add.w	r3, r7, #16
 800cd6a:	68f9      	ldr	r1, [r7, #12]
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	f000 fd13 	bl	800d798 <_ZN5Eigen8internal15compute_inverseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_Li1EE3runERKS3_RS3_>
  }
 800cd72:	bf00      	nop
 800cd74:	3720      	adds	r7, #32
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}

0800cd7a <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE9innerSizeEv>:
    Index innerSize() const
 800cd7a:	b580      	push	{r7, lr}
 800cd7c:	b082      	sub	sp, #8
 800cd7e:	af00      	add	r7, sp, #0
 800cd80:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 800cd82:	6878      	ldr	r0, [r7, #4]
 800cd84:	f000 fd47 	bl	800d816 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4sizeEv>
 800cd88:	4603      	mov	r3, r0
    }
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	3708      	adds	r7, #8
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	bd80      	pop	{r7, pc}

0800cd92 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ENS_5DenseEEC1ERS3_i>:
 800cd92:	b580      	push	{r7, lr}
 800cd94:	b084      	sub	sp, #16
 800cd96:	af00      	add	r7, sp, #0
 800cd98:	60f8      	str	r0, [r7, #12]
 800cd9a:	60b9      	str	r1, [r7, #8]
 800cd9c:	607a      	str	r2, [r7, #4]
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	687a      	ldr	r2, [r7, #4]
 800cda2:	68b9      	ldr	r1, [r7, #8]
 800cda4:	4618      	mov	r0, r3
 800cda6:	f000 fd58 	bl	800d85a <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EEC1ERS4_i>
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	4618      	mov	r0, r3
 800cdae:	3710      	adds	r7, #16
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bd80      	pop	{r7, pc}

0800cdb4 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800cdb4:	b480      	push	{r7}
 800cdb6:	b083      	sub	sp, #12
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
    }
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	370c      	adds	r7, #12
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc8:	4770      	bx	lr

0800cdca <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ENS_5DenseEEC1ERS3_i>:
 800cdca:	b580      	push	{r7, lr}
 800cdcc:	b084      	sub	sp, #16
 800cdce:	af00      	add	r7, sp, #0
 800cdd0:	60f8      	str	r0, [r7, #12]
 800cdd2:	60b9      	str	r1, [r7, #8]
 800cdd4:	607a      	str	r2, [r7, #4]
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	687a      	ldr	r2, [r7, #4]
 800cdda:	68b9      	ldr	r1, [r7, #8]
 800cddc:	4618      	mov	r0, r3
 800cdde:	f000 fd6d 	bl	800d8bc <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EEC1ERS4_i>
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	4618      	mov	r0, r3
 800cde6:	3710      	adds	r7, #16
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}

0800cdec <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800cdec:	b480      	push	{r7}
 800cdee:	b083      	sub	sp, #12
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
    }
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	370c      	adds	r7, #12
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce00:	4770      	bx	lr

0800ce02 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800ce02:	b580      	push	{r7, lr}
 800ce04:	b082      	sub	sp, #8
 800ce06:	af00      	add	r7, sp, #0
 800ce08:	6078      	str	r0, [r7, #4]
 800ce0a:	f7f9 ff04 	bl	8006c16 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	4618      	mov	r0, r3
 800ce12:	3708      	adds	r7, #8
 800ce14:	46bd      	mov	sp, r7
 800ce16:	bd80      	pop	{r7, pc}

0800ce18 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b082      	sub	sp, #8
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
 800ce20:	f7f9 fef9 	bl	8006c16 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800ce24:	4603      	mov	r3, r0
 800ce26:	4618      	mov	r0, r3
 800ce28:	3708      	adds	r7, #8
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}

0800ce2e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800ce2e:	b580      	push	{r7, lr}
 800ce30:	b082      	sub	sp, #8
 800ce32:	af00      	add	r7, sp, #0
 800ce34:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	4618      	mov	r0, r3
 800ce3a:	f7ff f8d8 	bl	800bfee <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>
 800ce3e:	4603      	mov	r3, r0
    }
 800ce40:	4618      	mov	r0, r3
 800ce42:	3708      	adds	r7, #8
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}

0800ce48 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b082      	sub	sp, #8
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
 800ce50:	6039      	str	r1, [r7, #0]
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	6839      	ldr	r1, [r7, #0]
 800ce56:	4618      	mov	r0, r3
 800ce58:	f000 fd61 	bl	800d91e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1ERKSI_>
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	4618      	mov	r0, r3
 800ce60:	3708      	adds	r7, #8
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}

0800ce66 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800ce66:	b480      	push	{r7}
 800ce68:	b083      	sub	sp, #12
 800ce6a:	af00      	add	r7, sp, #0
 800ce6c:	6078      	str	r0, [r7, #4]
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	4618      	mov	r0, r3
 800ce72:	370c      	adds	r7, #12
 800ce74:	46bd      	mov	sp, r7
 800ce76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7a:	4770      	bx	lr

0800ce7c <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>:
 800ce7c:	b480      	push	{r7}
 800ce7e:	b083      	sub	sp, #12
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	4618      	mov	r0, r3
 800ce88:	370c      	adds	r7, #12
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce90:	4770      	bx	lr

0800ce92 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>:
 800ce92:	b480      	push	{r7}
 800ce94:	b083      	sub	sp, #12
 800ce96:	af00      	add	r7, sp, #0
 800ce98:	6078      	str	r0, [r7, #4]
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	370c      	adds	r7, #12
 800cea0:	46bd      	mov	sp, r7
 800cea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea6:	4770      	bx	lr

0800cea8 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>:
 800cea8:	b480      	push	{r7}
 800ceaa:	b083      	sub	sp, #12
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	370c      	adds	r7, #12
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebc:	4770      	bx	lr

0800cebe <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800cebe:	b580      	push	{r7, lr}
 800cec0:	b084      	sub	sp, #16
 800cec2:	af00      	add	r7, sp, #0
 800cec4:	60f8      	str	r0, [r7, #12]
 800cec6:	60b9      	str	r1, [r7, #8]
 800cec8:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800ceca:	68b9      	ldr	r1, [r7, #8]
 800cecc:	68f8      	ldr	r0, [r7, #12]
 800cece:	f000 fd35 	bl	800d93c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 800ced2:	eef0 7a40 	vmov.f32	s15, s0
  }
 800ced6:	eeb0 0a67 	vmov.f32	s0, s15
 800ceda:	3710      	adds	r7, #16
 800cedc:	46bd      	mov	sp, r7
 800cede:	bd80      	pop	{r7, pc}

0800cee0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800cee0:	b5b0      	push	{r4, r5, r7, lr}
 800cee2:	b084      	sub	sp, #16
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
 800cee8:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800ceea:	6878      	ldr	r0, [r7, #4]
 800ceec:	f7fe ff7b 	bl	800bde6 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800cef0:	4604      	mov	r4, r0
 800cef2:	6838      	ldr	r0, [r7, #0]
 800cef4:	f7f9 fade 	bl	80064b4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEE7derivedEv>
 800cef8:	4605      	mov	r5, r0
 800cefa:	f107 030c 	add.w	r3, r7, #12
 800cefe:	4618      	mov	r0, r3
 800cf00:	f7fa f8e7 	bl	80070d2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800cf04:	f107 030c 	add.w	r3, r7, #12
 800cf08:	461a      	mov	r2, r3
 800cf0a:	4629      	mov	r1, r5
 800cf0c:	4620      	mov	r0, r4
 800cf0e:	f000 fd26 	bl	800d95e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f7fe ff67 	bl	800bde6 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800cf18:	4603      	mov	r3, r0
    }
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	3710      	adds	r7, #16
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bdb0      	pop	{r4, r5, r7, pc}

0800cf22 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi3ELi3EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800cf22:	b480      	push	{r7}
 800cf24:	b083      	sub	sp, #12
 800cf26:	af00      	add	r7, sp, #0
 800cf28:	6078      	str	r0, [r7, #4]
 800cf2a:	bf00      	nop
 800cf2c:	370c      	adds	r7, #12
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf34:	4770      	bx	lr

0800cf36 <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_9assign_opIffEENS0_13sub_assign_opIffEEE3runINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KS7_EES9_EEvRS3_RKT_RKT0_>:
  void run(DstXprType &dst, const SrcXprType &src, const InitialFunc& /*func*/)
 800cf36:	b590      	push	{r4, r7, lr}
 800cf38:	b087      	sub	sp, #28
 800cf3a:	af00      	add	r7, sp, #0
 800cf3c:	60f8      	str	r0, [r7, #12]
 800cf3e:	60b9      	str	r1, [r7, #8]
 800cf40:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, src.lhs(), Func1());
 800cf42:	68b8      	ldr	r0, [r7, #8]
 800cf44:	f000 fd1c 	bl	800d980 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE3lhsEv>
 800cf48:	4604      	mov	r4, r0
 800cf4a:	f107 0310 	add.w	r3, r7, #16
 800cf4e:	4618      	mov	r0, r3
 800cf50:	f7fa f8bf 	bl	80070d2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800cf54:	f107 0310 	add.w	r3, r7, #16
 800cf58:	461a      	mov	r2, r3
 800cf5a:	4621      	mov	r1, r4
 800cf5c:	68f8      	ldr	r0, [r7, #12]
 800cf5e:	f7fa f99f 	bl	80072a0 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
    call_assignment_no_alias(dst, src.rhs(), Func2());
 800cf62:	68b8      	ldr	r0, [r7, #8]
 800cf64:	f000 fd18 	bl	800d998 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE3rhsEv>
 800cf68:	4604      	mov	r4, r0
 800cf6a:	f107 0314 	add.w	r3, r7, #20
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f000 fd1e 	bl	800d9b0 <_ZN5Eigen8internal13sub_assign_opIffEC1Ev>
 800cf74:	f107 0314 	add.w	r3, r7, #20
 800cf78:	461a      	mov	r2, r3
 800cf7a:	4621      	mov	r1, r4
 800cf7c:	68f8      	ldr	r0, [r7, #12]
 800cf7e:	f000 fd22 	bl	800d9c6 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800cf82:	bf00      	nop
 800cf84:	371c      	adds	r7, #28
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd90      	pop	{r4, r7, pc}
	...

0800cf8c <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b084      	sub	sp, #16
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	60f8      	str	r0, [r7, #12]
 800cf94:	60b9      	str	r1, [r7, #8]
 800cf96:	607a      	str	r2, [r7, #4]
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	687a      	ldr	r2, [r7, #4]
 800cf9c:	68b9      	ldr	r1, [r7, #8]
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f000 fd22 	bl	800d9e8 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	db07      	blt.n	800cfba <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x2e>
 800cfaa:	68bb      	ldr	r3, [r7, #8]
 800cfac:	4618      	mov	r0, r3
 800cfae:	f7f8 f855 	bl	800505c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800cfb2:	4602      	mov	r2, r0
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	4293      	cmp	r3, r2
 800cfb8:	db05      	blt.n	800cfc6 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x3a>
 800cfba:	4b05      	ldr	r3, [pc, #20]	; (800cfd0 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x44>)
 800cfbc:	4a05      	ldr	r2, [pc, #20]	; (800cfd4 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x48>)
 800cfbe:	2178      	movs	r1, #120	; 0x78
 800cfc0:	4805      	ldr	r0, [pc, #20]	; (800cfd8 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x4c>)
 800cfc2:	f010 ff6f 	bl	801dea4 <__assert_func>
    }
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	4618      	mov	r0, r3
 800cfca:	3710      	adds	r7, #16
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bd80      	pop	{r7, pc}
 800cfd0:	08024890 	.word	0x08024890
 800cfd4:	08025eb8 	.word	0x08025eb8
 800cfd8:	08024a14 	.word	0x08024a14

0800cfdc <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7derivedEv>:
 800cfdc:	b480      	push	{r7}
 800cfde:	b083      	sub	sp, #12
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	370c      	adds	r7, #12
 800cfea:	46bd      	mov	sp, r7
 800cfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff0:	4770      	bx	lr

0800cff2 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>:
 800cff2:	b580      	push	{r7, lr}
 800cff4:	b082      	sub	sp, #8
 800cff6:	af00      	add	r7, sp, #0
 800cff8:	6078      	str	r0, [r7, #4]
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	f000 fd05 	bl	800da0a <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	4618      	mov	r0, r3
 800d004:	3708      	adds	r7, #8
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}

0800d00a <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800d00a:	b580      	push	{r7, lr}
 800d00c:	b082      	sub	sp, #8
 800d00e:	af00      	add	r7, sp, #0
 800d010:	6078      	str	r0, [r7, #4]
 800d012:	6878      	ldr	r0, [r7, #4]
 800d014:	f7ff ffed 	bl	800cff2 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	4618      	mov	r0, r3
 800d01c:	3708      	adds	r7, #8
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}

0800d022 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4rowsEv>:
 800d022:	b580      	push	{r7, lr}
 800d024:	b082      	sub	sp, #8
 800d026:	af00      	add	r7, sp, #0
 800d028:	6078      	str	r0, [r7, #4]
 800d02a:	f7f9 fdec 	bl	8006c06 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800d02e:	4603      	mov	r3, r0
 800d030:	4618      	mov	r0, r3
 800d032:	3708      	adds	r7, #8
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}

0800d038 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800d038:	b580      	push	{r7, lr}
 800d03a:	b082      	sub	sp, #8
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
 800d040:	f7f9 fde9 	bl	8006c16 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800d044:	4603      	mov	r3, r0
 800d046:	4618      	mov	r0, r3
 800d048:	3708      	adds	r7, #8
 800d04a:	46bd      	mov	sp, r7
 800d04c:	bd80      	pop	{r7, pc}
	...

0800d050 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800d050:	b5b0      	push	{r4, r5, r7, lr}
 800d052:	b084      	sub	sp, #16
 800d054:	af00      	add	r7, sp, #0
 800d056:	60f8      	str	r0, [r7, #12]
 800d058:	60b9      	str	r1, [r7, #8]
 800d05a:	607a      	str	r2, [r7, #4]
 800d05c:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800d05e:	68f8      	ldr	r0, [r7, #12]
 800d060:	f7ff ffd3 	bl	800d00a <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEENS_5DenseEEC1Ev>
 800d064:	68fa      	ldr	r2, [r7, #12]
 800d066:	68bb      	ldr	r3, [r7, #8]
 800d068:	4614      	mov	r4, r2
 800d06a:	461d      	mov	r5, r3
 800d06c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d06e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d070:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d074:	e884 0003 	stmia.w	r4, {r0, r1}
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	f103 0218 	add.w	r2, r3, #24
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	4614      	mov	r4, r2
 800d082:	461d      	mov	r5, r3
 800d084:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d086:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d088:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d08c:	e884 0003 	stmia.w	r4, {r0, r1}
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	3330      	adds	r3, #48	; 0x30
 800d094:	6839      	ldr	r1, [r7, #0]
 800d096:	4618      	mov	r0, r3
 800d098:	f7f8 fb16 	bl	80056c8 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800d09c:	68b8      	ldr	r0, [r7, #8]
 800d09e:	f7fe fc7f 	bl	800b9a0 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800d0a2:	4604      	mov	r4, r0
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f7ff ffbb 	bl	800d022 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4rowsEv>
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	429c      	cmp	r4, r3
 800d0b0:	d10a      	bne.n	800d0c8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x78>
 800d0b2:	68b8      	ldr	r0, [r7, #8]
 800d0b4:	f7fe fc81 	bl	800b9ba <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800d0b8:	4604      	mov	r4, r0
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	4618      	mov	r0, r3
 800d0be:	f7ff ffbb 	bl	800d038 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4colsEv>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	429c      	cmp	r4, r3
 800d0c6:	d005      	beq.n	800d0d4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x84>
 800d0c8:	4b05      	ldr	r3, [pc, #20]	; (800d0e0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x90>)
 800d0ca:	4a06      	ldr	r2, [pc, #24]	; (800d0e4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x94>)
 800d0cc:	2174      	movs	r1, #116	; 0x74
 800d0ce:	4806      	ldr	r0, [pc, #24]	; (800d0e8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x98>)
 800d0d0:	f010 fee8 	bl	801dea4 <__assert_func>
    }
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	3710      	adds	r7, #16
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bdb0      	pop	{r4, r5, r7, pc}
 800d0de:	bf00      	nop
 800d0e0:	0801fd0c 	.word	0x0801fd0c
 800d0e4:	08025f94 	.word	0x08025f94
 800d0e8:	0801ff70 	.word	0x0801ff70

0800d0ec <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b082      	sub	sp, #8
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
 800d0f4:	6878      	ldr	r0, [r7, #4]
 800d0f6:	f000 f809 	bl	800d10c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	f000 fc8f 	bl	800da20 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE4colsEv>
 800d102:	4603      	mov	r3, r0
 800d104:	4618      	mov	r0, r3
 800d106:	3708      	adds	r7, #8
 800d108:	46bd      	mov	sp, r7
 800d10a:	bd80      	pop	{r7, pc}

0800d10c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800d10c:	b480      	push	{r7}
 800d10e:	b083      	sub	sp, #12
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	4618      	mov	r0, r3
 800d118:	370c      	adds	r7, #12
 800d11a:	46bd      	mov	sp, r7
 800d11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d120:	4770      	bx	lr

0800d122 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800d122:	b580      	push	{r7, lr}
 800d124:	b082      	sub	sp, #8
 800d126:	af00      	add	r7, sp, #0
 800d128:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	4618      	mov	r0, r3
 800d12e:	f7fe fc37 	bl	800b9a0 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800d132:	4603      	mov	r3, r0
    }
 800d134:	4618      	mov	r0, r3
 800d136:	3708      	adds	r7, #8
 800d138:	46bd      	mov	sp, r7
 800d13a:	bd80      	pop	{r7, pc}

0800d13c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b082      	sub	sp, #8
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f000 fc92 	bl	800da6e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	4618      	mov	r0, r3
 800d14e:	3708      	adds	r7, #8
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}

0800d154 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800d154:	b580      	push	{r7, lr}
 800d156:	b082      	sub	sp, #8
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	4618      	mov	r0, r3
 800d160:	f7ff ffec 	bl	800d13c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	4618      	mov	r0, r3
 800d168:	3708      	adds	r7, #8
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}

0800d16e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800d16e:	b580      	push	{r7, lr}
 800d170:	b082      	sub	sp, #8
 800d172:	af00      	add	r7, sp, #0
 800d174:	6078      	str	r0, [r7, #4]
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	4618      	mov	r0, r3
 800d17a:	f7ff ffeb 	bl	800d154 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EED1Ev>
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	4618      	mov	r0, r3
 800d182:	3708      	adds	r7, #8
 800d184:	46bd      	mov	sp, r7
 800d186:	bd80      	pop	{r7, pc}

0800d188 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<const T>
 800d188:	b580      	push	{r7, lr}
 800d18a:	b082      	sub	sp, #8
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	4618      	mov	r0, r3
 800d194:	f7ff ffeb 	bl	800d16e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	4618      	mov	r0, r3
 800d19c:	3708      	adds	r7, #8
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bd80      	pop	{r7, pc}

0800d1a2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4DataD1Ev>:
  struct Data
 800d1a2:	b580      	push	{r7, lr}
 800d1a4:	b082      	sub	sp, #8
 800d1a6:	af00      	add	r7, sp, #0
 800d1a8:	6078      	str	r0, [r7, #4]
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	330c      	adds	r3, #12
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	f7ff ffea 	bl	800d188 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	3304      	adds	r3, #4
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f7fe fce7 	bl	800bb8c <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	3708      	adds	r7, #8
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	bd80      	pop	{r7, pc}

0800d1c8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b082      	sub	sp, #8
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f7ff ffe5 	bl	800d1a2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4DataD1Ev>
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	f000 fc3d 	bl	800da58 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	3708      	adds	r7, #8
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd80      	pop	{r7, pc}

0800d1e8 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b082      	sub	sp, #8
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f7ff ffe8 	bl	800d1c8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffED1Ev>
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	3708      	adds	r7, #8
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}

0800d202 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800d202:	b580      	push	{r7, lr}
 800d204:	b082      	sub	sp, #8
 800d206:	af00      	add	r7, sp, #0
 800d208:	6078      	str	r0, [r7, #4]
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	4618      	mov	r0, r3
 800d20e:	f7ff ffeb 	bl	800d1e8 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	4618      	mov	r0, r3
 800d216:	3708      	adds	r7, #8
 800d218:	46bd      	mov	sp, r7
 800d21a:	bd80      	pop	{r7, pc}

0800d21c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800d21c:	b580      	push	{r7, lr}
 800d21e:	ed2d 8b02 	vpush	{d8}
 800d222:	b088      	sub	sp, #32
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
 800d228:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	f7ff f938 	bl	800c4a0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE4rowsEv>
 800d230:	4603      	mov	r3, r0
 800d232:	2b00      	cmp	r3, #0
 800d234:	dd05      	ble.n	800d242 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	f7ff ff58 	bl	800d0ec <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE4colsEv>
 800d23c:	4603      	mov	r3, r0
 800d23e:	2b00      	cmp	r3, #0
 800d240:	dc06      	bgt.n	800d250 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800d242:	4b16      	ldr	r3, [pc, #88]	; (800d29c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800d244:	4a16      	ldr	r2, [pc, #88]	; (800d2a0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800d246:	f240 119b 	movw	r1, #411	; 0x19b
 800d24a:	4816      	ldr	r0, [pc, #88]	; (800d2a4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800d24c:	f010 fe2a 	bl	801dea4 <__assert_func>
 800d250:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800d252:	6878      	ldr	r0, [r7, #4]
 800d254:	f7ff ff5a 	bl	800d10c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800d258:	4602      	mov	r2, r0
 800d25a:	f107 030c 	add.w	r3, r7, #12
 800d25e:	4611      	mov	r1, r2
 800d260:	4618      	mov	r0, r3
 800d262:	f000 fbea 	bl	800da3a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1ERKSG_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800d266:	6878      	ldr	r0, [r7, #4]
 800d268:	f7ff ff50 	bl	800d10c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800d26c:	4602      	mov	r2, r0
 800d26e:	f107 030c 	add.w	r3, r7, #12
 800d272:	6839      	ldr	r1, [r7, #0]
 800d274:	4618      	mov	r0, r3
 800d276:	f000 fc05 	bl	800da84 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi2EE3runISJ_EEfRKSK_RKS3_RKT_>
 800d27a:	eeb0 8a40 	vmov.f32	s16, s0
 800d27e:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800d280:	f107 030c 	add.w	r3, r7, #12
 800d284:	4618      	mov	r0, r3
 800d286:	f7ff ffbc 	bl	800d202 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800d28a:	eef0 7a48 	vmov.f32	s15, s16
}
 800d28e:	eeb0 0a67 	vmov.f32	s0, s15
 800d292:	3720      	adds	r7, #32
 800d294:	46bd      	mov	sp, r7
 800d296:	ecbd 8b02 	vpop	{d8}
 800d29a:	bd80      	pop	{r7, pc}
 800d29c:	08024d8c 	.word	0x08024d8c
 800d2a0:	080261dc 	.word	0x080261dc
 800d2a4:	08024f98 	.word	0x08024f98

0800d2a8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b082      	sub	sp, #8
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800d2b0:	2202      	movs	r2, #2
 800d2b2:	2101      	movs	r1, #1
 800d2b4:	6878      	ldr	r0, [r7, #4]
 800d2b6:	f7fd facf 	bl	800a858 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800d2ba:	6878      	ldr	r0, [r7, #4]
 800d2bc:	f000 fbf3 	bl	800daa6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSL_>
  }
 800d2c0:	bf00      	nop
 800d2c2:	3708      	adds	r7, #8
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bd80      	pop	{r7, pc}

0800d2c8 <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7functorEv>:

    /** \returns the functor representing the nullary operation */
    EIGEN_DEVICE_FUNC
    const NullaryOp& functor() const { return m_functor; }
 800d2c8:	b480      	push	{r7}
 800d2ca:	b083      	sub	sp, #12
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	3304      	adds	r3, #4
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	370c      	adds	r7, #12
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2de:	4770      	bx	lr

0800d2e0 <_ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800d2e0:	b480      	push	{r7}
 800d2e2:	b083      	sub	sp, #12
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	370c      	adds	r7, #12
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f4:	4770      	bx	lr

0800d2f6 <_ZN5Eigen9BlockImplIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ENS_5DenseEEC1ERSE_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 800d2f6:	b580      	push	{r7, lr}
 800d2f8:	b084      	sub	sp, #16
 800d2fa:	af00      	add	r7, sp, #0
 800d2fc:	60f8      	str	r0, [r7, #12]
 800d2fe:	60b9      	str	r1, [r7, #8]
 800d300:	607a      	str	r2, [r7, #4]
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	687a      	ldr	r2, [r7, #4]
 800d306:	68b9      	ldr	r1, [r7, #8]
 800d308:	4618      	mov	r0, r3
 800d30a:	f000 fbe8 	bl	800dade <_ZN5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERSE_i>
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	4618      	mov	r0, r3
 800d312:	3710      	adds	r7, #16
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}

0800d318 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800d318:	b480      	push	{r7}
 800d31a:	b083      	sub	sp, #12
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
    }
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	4618      	mov	r0, r3
 800d324:	370c      	adds	r7, #12
 800d326:	46bd      	mov	sp, r7
 800d328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32c:	4770      	bx	lr

0800d32e <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ENS_5DenseEEC1ERS5_i>:
 800d32e:	b580      	push	{r7, lr}
 800d330:	b084      	sub	sp, #16
 800d332:	af00      	add	r7, sp, #0
 800d334:	60f8      	str	r0, [r7, #12]
 800d336:	60b9      	str	r1, [r7, #8]
 800d338:	607a      	str	r2, [r7, #4]
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	687a      	ldr	r2, [r7, #4]
 800d33e:	68b9      	ldr	r1, [r7, #8]
 800d340:	4618      	mov	r0, r3
 800d342:	f000 fbf7 	bl	800db34 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EEC1ERS6_i>
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	4618      	mov	r0, r3
 800d34a:	3710      	adds	r7, #16
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd80      	pop	{r7, pc}

0800d350 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800d350:	b480      	push	{r7}
 800d352:	b083      	sub	sp, #12
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
    }
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	4618      	mov	r0, r3
 800d35c:	370c      	adds	r7, #12
 800d35e:	46bd      	mov	sp, r7
 800d360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d364:	4770      	bx	lr

0800d366 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE4colsEv>:
      : m_xpr(xpr), m_startRow(startRow), m_startCol(startCol),
                    m_blockRows(blockRows), m_blockCols(blockCols)
    {}

    EIGEN_DEVICE_FUNC inline Index rows() const { return m_blockRows.value(); }
    EIGEN_DEVICE_FUNC inline Index cols() const { return m_blockCols.value(); }
 800d366:	b580      	push	{r7, lr}
 800d368:	b082      	sub	sp, #8
 800d36a:	af00      	add	r7, sp, #0
 800d36c:	6078      	str	r0, [r7, #4]
 800d36e:	f7f9 fc52 	bl	8006c16 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800d372:	4603      	mov	r3, r0
 800d374:	4618      	mov	r0, r3
 800d376:	3708      	adds	r7, #8
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}

0800d37c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE4rowsEv>:
    EIGEN_DEVICE_FUNC inline Index rows() const { return m_blockRows.value(); }
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b082      	sub	sp, #8
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
 800d384:	f7f9 fc47 	bl	8006c16 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800d388:	4603      	mov	r3, r0
 800d38a:	4618      	mov	r0, r3
 800d38c:	3708      	adds	r7, #8
 800d38e:	46bd      	mov	sp, r7
 800d390:	bd80      	pop	{r7, pc}

0800d392 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800d392:	b580      	push	{r7, lr}
 800d394:	b082      	sub	sp, #8
 800d396:	af00      	add	r7, sp, #0
 800d398:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	3304      	adds	r3, #4
 800d39e:	4618      	mov	r0, r3
 800d3a0:	f7ff f991 	bl	800c6c6 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4colsEv>
 800d3a4:	4603      	mov	r3, r0
    }
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	3708      	adds	r7, #8
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	bd80      	pop	{r7, pc}

0800d3ae <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1ERKSP_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800d3ae:	b580      	push	{r7, lr}
 800d3b0:	b082      	sub	sp, #8
 800d3b2:	af00      	add	r7, sp, #0
 800d3b4:	6078      	str	r0, [r7, #4]
 800d3b6:	6039      	str	r1, [r7, #0]
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	6839      	ldr	r1, [r7, #0]
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f000 fbeb 	bl	800db98 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1ERKSP_>
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	3708      	adds	r7, #8
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	bd80      	pop	{r7, pc}

0800d3cc <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800d3cc:	b480      	push	{r7}
 800d3ce:	b083      	sub	sp, #12
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	370c      	adds	r7, #12
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e0:	4770      	bx	lr

0800d3e2 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>:
 800d3e2:	b480      	push	{r7}
 800d3e4:	b083      	sub	sp, #12
 800d3e6:	af00      	add	r7, sp, #0
 800d3e8:	6078      	str	r0, [r7, #4]
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	370c      	adds	r7, #12
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f6:	4770      	bx	lr

0800d3f8 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>:
 800d3f8:	b480      	push	{r7}
 800d3fa:	b083      	sub	sp, #12
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	4618      	mov	r0, r3
 800d404:	370c      	adds	r7, #12
 800d406:	46bd      	mov	sp, r7
 800d408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40c:	4770      	bx	lr

0800d40e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>:
 800d40e:	b480      	push	{r7}
 800d410:	b083      	sub	sp, #12
 800d412:	af00      	add	r7, sp, #0
 800d414:	6078      	str	r0, [r7, #4]
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	4618      	mov	r0, r3
 800d41a:	370c      	adds	r7, #12
 800d41c:	46bd      	mov	sp, r7
 800d41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d422:	4770      	bx	lr

0800d424 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS5_IS7_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEELi1ELi1ELb0EEEEEKNS9_IKNS8_ISB_EELi1ELi1ELb0EEEEEEELi0ELi2EE3runISS_EEfRKST_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800d424:	b580      	push	{r7, lr}
 800d426:	b084      	sub	sp, #16
 800d428:	af00      	add	r7, sp, #0
 800d42a:	60f8      	str	r0, [r7, #12]
 800d42c:	60b9      	str	r1, [r7, #8]
 800d42e:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800d430:	68b9      	ldr	r1, [r7, #8]
 800d432:	68f8      	ldr	r0, [r7, #12]
 800d434:	f000 fbbf 	bl	800dbb6 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS5_IS7_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEELi1ELi1ELb0EEEEEKNS9_IKNS8_ISB_EELi1ELi1ELb0EEEEEEELi0ELi1EE3runERKST_RKS3_>
 800d438:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d43c:	eeb0 0a67 	vmov.f32	s0, s15
 800d440:	3710      	adds	r7, #16
 800d442:	46bd      	mov	sp, r7
 800d444:	bd80      	pop	{r7, pc}

0800d446 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800d446:	b580      	push	{r7, lr}
 800d448:	b082      	sub	sp, #8
 800d44a:	af00      	add	r7, sp, #0
 800d44c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800d44e:	2200      	movs	r2, #0
 800d450:	2102      	movs	r1, #2
 800d452:	6878      	ldr	r0, [r7, #4]
 800d454:	f7fc ff39 	bl	800a2ca <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800d458:	6878      	ldr	r0, [r7, #4]
 800d45a:	f000 fbbd 	bl	800dbd8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSP_>
  }
 800d45e:	bf00      	nop
 800d460:	3708      	adds	r7, #8
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}

0800d466 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERS4_i>:
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(BlockImpl_dense)

    /** Column or Row constructor
      */
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    BlockImpl_dense(XprType& xpr, Index i)
 800d466:	b5b0      	push	{r4, r5, r7, lr}
 800d468:	b084      	sub	sp, #16
 800d46a:	af00      	add	r7, sp, #0
 800d46c:	60f8      	str	r0, [r7, #12]
 800d46e:	60b9      	str	r1, [r7, #8]
 800d470:	607a      	str	r2, [r7, #4]
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
             BlockRows==1 ? 1 : xpr.rows(),
             BlockCols==1 ? 1 : xpr.cols()),
        m_xpr(xpr),
        m_startRow( (BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) ? i : 0),
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d472:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	4618      	mov	r0, r3
 800d478:	f7fa ff34 	bl	80082e4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 800d47c:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800d47e:	68b8      	ldr	r0, [r7, #8]
 800d480:	f000 fbba 	bl	800dbf8 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 800d484:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	fb02 f303 	mul.w	r3, r2, r3
 800d48c:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d48e:	441d      	add	r5, r3
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	4618      	mov	r0, r3
 800d494:	f7f7 fde2 	bl	800505c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800d498:	4603      	mov	r3, r0
 800d49a:	2201      	movs	r2, #1
 800d49c:	4629      	mov	r1, r5
 800d49e:	4620      	mov	r0, r4
 800d4a0:	f000 fbc2 	bl	800dc28 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii>
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	68ba      	ldr	r2, [r7, #8]
 800d4a8:	609a      	str	r2, [r3, #8]
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	330c      	adds	r3, #12
 800d4ae:	6879      	ldr	r1, [r7, #4]
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	f000 fbf7 	bl	800dca4 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	3310      	adds	r3, #16
 800d4ba:	2100      	movs	r1, #0
 800d4bc:	4618      	mov	r0, r3
 800d4be:	f000 fbf1 	bl	800dca4 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
    {
      init();
 800d4c2:	68f8      	ldr	r0, [r7, #12]
 800d4c4:	f000 fbfd 	bl	800dcc2 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE4initEv>
    }
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	3710      	adds	r7, #16
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bdb0      	pop	{r4, r5, r7, pc}

0800d4d2 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800d4d2:	b5b0      	push	{r4, r5, r7, lr}
 800d4d4:	b084      	sub	sp, #16
 800d4d6:	af00      	add	r7, sp, #0
 800d4d8:	60f8      	str	r0, [r7, #12]
 800d4da:	60b9      	str	r1, [r7, #8]
 800d4dc:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d4de:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	f7f9 fe9d 	bl	8007222 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>
 800d4e8:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800d4ea:	68b8      	ldr	r0, [r7, #8]
 800d4ec:	f7f9 ff6a 	bl	80073c4 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 800d4f0:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	fb02 f303 	mul.w	r3, r2, r3
 800d4f8:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d4fa:	441d      	add	r5, r3
 800d4fc:	68bb      	ldr	r3, [r7, #8]
 800d4fe:	4618      	mov	r0, r3
 800d500:	f7f7 fe5d 	bl	80051be <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800d504:	4602      	mov	r2, r0
 800d506:	2301      	movs	r3, #1
 800d508:	4629      	mov	r1, r5
 800d50a:	4620      	mov	r0, r4
 800d50c:	f000 fc00 	bl	800dd10 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii>
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	68ba      	ldr	r2, [r7, #8]
 800d514:	609a      	str	r2, [r3, #8]
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	330c      	adds	r3, #12
 800d51a:	2100      	movs	r1, #0
 800d51c:	4618      	mov	r0, r3
 800d51e:	f000 fbc1 	bl	800dca4 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	3310      	adds	r3, #16
 800d526:	6879      	ldr	r1, [r7, #4]
 800d528:	4618      	mov	r0, r3
 800d52a:	f000 fc2f 	bl	800dd8c <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
      init();
 800d52e:	68f8      	ldr	r0, [r7, #12]
 800d530:	f000 fc46 	bl	800ddc0 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE4initEv>
    }
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	4618      	mov	r0, r3
 800d538:	3710      	adds	r7, #16
 800d53a:	46bd      	mov	sp, r7
 800d53c:	bdb0      	pop	{r4, r5, r7, pc}

0800d53e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800d53e:	b580      	push	{r7, lr}
 800d540:	b082      	sub	sp, #8
 800d542:	af00      	add	r7, sp, #0
 800d544:	6078      	str	r0, [r7, #4]
 800d546:	6039      	str	r1, [r7, #0]
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	6839      	ldr	r1, [r7, #0]
 800d54c:	4618      	mov	r0, r3
 800d54e:	f000 fc47 	bl	800dde0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	4618      	mov	r0, r3
 800d556:	3708      	adds	r7, #8
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd80      	pop	{r7, pc}

0800d55c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b084      	sub	sp, #16
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
 800d564:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800d566:	6839      	ldr	r1, [r7, #0]
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	f000 fc4b 	bl	800de04 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 800d56e:	eef0 7a40 	vmov.f32	s15, s0
 800d572:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800d576:	6839      	ldr	r1, [r7, #0]
 800d578:	6878      	ldr	r0, [r7, #4]
 800d57a:	f000 fc54 	bl	800de26 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSM_RKS3_>
 800d57e:	eef0 7a40 	vmov.f32	s15, s0
 800d582:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800d586:	f107 020c 	add.w	r2, r7, #12
 800d58a:	f107 0308 	add.w	r3, r7, #8
 800d58e:	4619      	mov	r1, r3
 800d590:	6838      	ldr	r0, [r7, #0]
 800d592:	f7fb fefe 	bl	8009392 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800d596:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d59a:	eeb0 0a67 	vmov.f32	s0, s15
 800d59e:	3710      	adds	r7, #16
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bd80      	pop	{r7, pc}

0800d5a4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductIS2_S2_Li0EEES6_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b082      	sub	sp, #8
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
 800d5ac:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800d5ae:	6839      	ldr	r1, [r7, #0]
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	f000 fc5c 	bl	800de6e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductIS2_S2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800d5b6:	bf00      	nop
 800d5b8:	3708      	adds	r7, #8
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}

0800d5be <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS0_10IndexBasedEfEC1ERKS5_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 800d5be:	b590      	push	{r4, r7, lr}
 800d5c0:	b083      	sub	sp, #12
 800d5c2:	af00      	add	r7, sp, #0
 800d5c4:	6078      	str	r0, [r7, #4]
 800d5c6:	6039      	str	r1, [r7, #0]
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f000 fc7d 	bl	800dec8 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>
 800d5ce:	687c      	ldr	r4, [r7, #4]
 800d5d0:	6838      	ldr	r0, [r7, #0]
 800d5d2:	f000 fc6d 	bl	800deb0 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	4619      	mov	r1, r3
 800d5da:	4620      	mov	r0, r4
 800d5dc:	f7fa f9e0 	bl	80079a0 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	370c      	adds	r7, #12
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd90      	pop	{r4, r7, pc}

0800d5ea <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 800d5ea:	b480      	push	{r7}
 800d5ec:	b083      	sub	sp, #12
 800d5ee:	af00      	add	r7, sp, #0
 800d5f0:	6078      	str	r0, [r7, #4]
 800d5f2:	6039      	str	r1, [r7, #0]
      : inner;
 800d5f4:	687b      	ldr	r3, [r7, #4]
  }
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	370c      	adds	r7, #12
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d600:	4770      	bx	lr

0800d602 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 800d602:	b480      	push	{r7}
 800d604:	b083      	sub	sp, #12
 800d606:	af00      	add	r7, sp, #0
 800d608:	6078      	str	r0, [r7, #4]
 800d60a:	6039      	str	r1, [r7, #0]
      : outer;
 800d60c:	683b      	ldr	r3, [r7, #0]
  }
 800d60e:	4618      	mov	r0, r3
 800d610:	370c      	adds	r7, #12
 800d612:	46bd      	mov	sp, r7
 800d614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d618:	4770      	bx	lr

0800d61a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 800d61a:	b5b0      	push	{r4, r5, r7, lr}
 800d61c:	b086      	sub	sp, #24
 800d61e:	af00      	add	r7, sp, #0
 800d620:	60f8      	str	r0, [r7, #12]
 800d622:	60b9      	str	r1, [r7, #8]
 800d624:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	689c      	ldr	r4, [r3, #8]
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	687a      	ldr	r2, [r7, #4]
 800d630:	68b9      	ldr	r1, [r7, #8]
 800d632:	4618      	mov	r0, r3
 800d634:	f000 fc53 	bl	800dede <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEE8coeffRefEii>
 800d638:	4605      	mov	r5, r0
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	685b      	ldr	r3, [r3, #4]
 800d63e:	687a      	ldr	r2, [r7, #4]
 800d640:	68b9      	ldr	r1, [r7, #8]
 800d642:	4618      	mov	r0, r3
 800d644:	f000 fc63 	bl	800df0e <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffE5coeffEii>
 800d648:	eef0 7a40 	vmov.f32	s15, s0
 800d64c:	edc7 7a05 	vstr	s15, [r7, #20]
 800d650:	f107 0314 	add.w	r3, r7, #20
 800d654:	461a      	mov	r2, r3
 800d656:	4629      	mov	r1, r5
 800d658:	4620      	mov	r0, r4
 800d65a:	f7fb f8a9 	bl	80087b0 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800d65e:	bf00      	nop
 800d660:	3718      	adds	r7, #24
 800d662:	46bd      	mov	sp, r7
 800d664:	bdb0      	pop	{r4, r5, r7, pc}

0800d666 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800d666:	b580      	push	{r7, lr}
 800d668:	b082      	sub	sp, #8
 800d66a:	af00      	add	r7, sp, #0
 800d66c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800d66e:	2202      	movs	r2, #2
 800d670:	2100      	movs	r1, #0
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f7ff fadf 	bl	800cc36 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800d678:	6878      	ldr	r0, [r7, #4]
 800d67a:	f000 fc7b 	bl	800df74 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSG_>
  }
 800d67e:	bf00      	nop
 800d680:	3708      	adds	r7, #8
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}

0800d686 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800d686:	b480      	push	{r7}
 800d688:	b083      	sub	sp, #12
 800d68a:	af00      	add	r7, sp, #0
 800d68c:	6078      	str	r0, [r7, #4]
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	4618      	mov	r0, r3
 800d694:	370c      	adds	r7, #12
 800d696:	46bd      	mov	sp, r7
 800d698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69c:	4770      	bx	lr

0800d69e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800d69e:	b480      	push	{r7}
 800d6a0:	b083      	sub	sp, #12
 800d6a2:	af00      	add	r7, sp, #0
 800d6a4:	6078      	str	r0, [r7, #4]
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	3304      	adds	r3, #4
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	370c      	adds	r7, #12
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b4:	4770      	bx	lr

0800d6b6 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEENS_10DenseShapeES7_Li3EE6evalToINS2_IfLi3ELi1ELi0ELi3ELi1EEEEEvRT_RKS3_RKS6_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800d6b6:	b580      	push	{r7, lr}
 800d6b8:	b088      	sub	sp, #32
 800d6ba:	af00      	add	r7, sp, #0
 800d6bc:	60f8      	str	r0, [r7, #12]
 800d6be:	60b9      	str	r1, [r7, #8]
 800d6c0:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 800d6c2:	f107 0314 	add.w	r3, r7, #20
 800d6c6:	687a      	ldr	r2, [r7, #4]
 800d6c8:	68b9      	ldr	r1, [r7, #8]
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	f000 fc62 	bl	800df94 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductINS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS9_EE>
 800d6d0:	f107 031c 	add.w	r3, r7, #28
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f7f9 fcfc 	bl	80070d2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800d6da:	f107 021c 	add.w	r2, r7, #28
 800d6de:	f107 0314 	add.w	r3, r7, #20
 800d6e2:	4619      	mov	r1, r3
 800d6e4:	68f8      	ldr	r0, [r7, #12]
 800d6e6:	f000 fc6c 	bl	800dfc2 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800d6ea:	bf00      	nop
 800d6ec:	3720      	adds	r7, #32
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}
	...

0800d6f4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b086      	sub	sp, #24
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	60f8      	str	r0, [r7, #12]
 800d6fc:	60b9      	str	r1, [r7, #8]
 800d6fe:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 800d700:	68bb      	ldr	r3, [r7, #8]
 800d702:	2b01      	cmp	r3, #1
 800d704:	d108      	bne.n	800d718 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x24>
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	2b01      	cmp	r3, #1
 800d70a:	d105      	bne.n	800d718 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x24>
 800d70c:	68bb      	ldr	r3, [r7, #8]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	db02      	blt.n	800d718 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x24>
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	2b00      	cmp	r3, #0
 800d716:	da06      	bge.n	800d726 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x32>
 800d718:	4b0c      	ldr	r3, [pc, #48]	; (800d74c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x58>)
 800d71a:	4a0d      	ldr	r2, [pc, #52]	; (800d750 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x5c>)
 800d71c:	f240 1111 	movw	r1, #273	; 0x111
 800d720:	480c      	ldr	r0, [pc, #48]	; (800d754 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x60>)
 800d722:	f010 fbbf 	bl	801dea4 <__assert_func>
 800d726:	68bb      	ldr	r3, [r7, #8]
 800d728:	617b      	str	r3, [r7, #20]
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	613b      	str	r3, [r7, #16]
  }
 800d72e:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 800d730:	68f8      	ldr	r0, [r7, #12]
 800d732:	68bb      	ldr	r3, [r7, #8]
 800d734:	687a      	ldr	r2, [r7, #4]
 800d736:	fb02 f103 	mul.w	r1, r2, r3
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	68ba      	ldr	r2, [r7, #8]
 800d73e:	f000 fc51 	bl	800dfe4 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE6resizeEiii>
    }
 800d742:	bf00      	nop
 800d744:	3718      	adds	r7, #24
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}
 800d74a:	bf00      	nop
 800d74c:	0802279c 	.word	0x0802279c
 800d750:	080263a4 	.word	0x080263a4
 800d754:	080229b8 	.word	0x080229b8

0800d758 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE16nestedExpressionEv>:
  EIGEN_DEVICE_FUNC const XprTypeNestedCleaned& nestedExpression() const { return m_xpr; }
 800d758:	b480      	push	{r7}
 800d75a:	b083      	sub	sp, #12
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	4618      	mov	r0, r3
 800d764:	370c      	adds	r7, #12
 800d766:	46bd      	mov	sp, r7
 800d768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76c:	4770      	bx	lr

0800d76e <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS7_INS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS1_EEEERKT_>:
    explicit Matrix(const T& x)
 800d76e:	b580      	push	{r7, lr}
 800d770:	b082      	sub	sp, #8
 800d772:	af00      	add	r7, sp, #0
 800d774:	6078      	str	r0, [r7, #4]
 800d776:	6039      	str	r1, [r7, #0]
    {
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	4618      	mov	r0, r3
 800d77c:	f7f7 fb9a 	bl	8004eb4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 800d780:	f7f7 fba8 	bl	8004ed4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	6839      	ldr	r1, [r7, #0]
 800d788:	4618      	mov	r0, r3
 800d78a:	f000 fc38 	bl	800dffe <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS2_EESI_EEvRKNS_9DenseBaseIT0_EE>
    }
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	4618      	mov	r0, r3
 800d792:	3708      	adds	r7, #8
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}

0800d798 <_ZN5Eigen8internal15compute_inverseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_Li1EE3runERKS3_RS3_>:
  static inline void run(const MatrixType& matrix, ResultType& result)
 800d798:	b580      	push	{r7, lr}
 800d79a:	ed2d 8b02 	vpush	{d8}
 800d79e:	b084      	sub	sp, #16
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
 800d7a4:	6039      	str	r1, [r7, #0]
    internal::evaluator<MatrixType> matrixEval(matrix);
 800d7a6:	f107 030c 	add.w	r3, r7, #12
 800d7aa:	6879      	ldr	r1, [r7, #4]
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	f7fc ff50 	bl	800a652 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
    result.coeffRef(0,0) = Scalar(1) / matrixEval.coeff(0,0);
 800d7b2:	f107 030c 	add.w	r3, r7, #12
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	2100      	movs	r1, #0
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	f000 fc2c 	bl	800e018 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEii>
 800d7c0:	4603      	mov	r3, r0
 800d7c2:	ed93 8a00 	vldr	s16, [r3]
 800d7c6:	683b      	ldr	r3, [r7, #0]
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	2100      	movs	r1, #0
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	f7f9 f968 	bl	8006aa2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d7d8:	eec7 7a08 	vdiv.f32	s15, s14, s16
 800d7dc:	edc3 7a00 	vstr	s15, [r3]
    internal::evaluator<MatrixType> matrixEval(matrix);
 800d7e0:	f107 030c 	add.w	r3, r7, #12
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	f7fb fe1b 	bl	8009420 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
  }
 800d7ea:	bf00      	nop
 800d7ec:	3710      	adds	r7, #16
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	ecbd 8b02 	vpop	{d8}
 800d7f4:	bd80      	pop	{r7, pc}

0800d7f6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800d7f6:	b580      	push	{r7, lr}
 800d7f8:	b082      	sub	sp, #8
 800d7fa:	af00      	add	r7, sp, #0
 800d7fc:	6078      	str	r0, [r7, #4]
 800d7fe:	6878      	ldr	r0, [r7, #4]
 800d800:	f7f8 fbe9 	bl	8005fd6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800d804:	4603      	mov	r3, r0
 800d806:	4618      	mov	r0, r3
 800d808:	f7f8 fc23 	bl	8006052 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800d80c:	4603      	mov	r3, r0
 800d80e:	4618      	mov	r0, r3
 800d810:	3708      	adds	r7, #8
 800d812:	46bd      	mov	sp, r7
 800d814:	bd80      	pop	{r7, pc}

0800d816 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4sizeEv>:
  inline Index size() const EIGEN_NOEXCEPT { return rows() * cols(); }
 800d816:	b590      	push	{r4, r7, lr}
 800d818:	b083      	sub	sp, #12
 800d81a:	af00      	add	r7, sp, #0
 800d81c:	6078      	str	r0, [r7, #4]
 800d81e:	6878      	ldr	r0, [r7, #4]
 800d820:	f7ff ffe9 	bl	800d7f6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800d824:	4604      	mov	r4, r0
 800d826:	6878      	ldr	r0, [r7, #4]
 800d828:	f000 f807 	bl	800d83a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800d82c:	4603      	mov	r3, r0
 800d82e:	fb04 f303 	mul.w	r3, r4, r3
 800d832:	4618      	mov	r0, r3
 800d834:	370c      	adds	r7, #12
 800d836:	46bd      	mov	sp, r7
 800d838:	bd90      	pop	{r4, r7, pc}

0800d83a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800d83a:	b580      	push	{r7, lr}
 800d83c:	b082      	sub	sp, #8
 800d83e:	af00      	add	r7, sp, #0
 800d840:	6078      	str	r0, [r7, #4]
 800d842:	6878      	ldr	r0, [r7, #4]
 800d844:	f7f8 fbc7 	bl	8005fd6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800d848:	4603      	mov	r3, r0
 800d84a:	4618      	mov	r0, r3
 800d84c:	f7f8 fc0c 	bl	8006068 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800d850:	4603      	mov	r3, r0
 800d852:	4618      	mov	r0, r3
 800d854:	3708      	adds	r7, #8
 800d856:	46bd      	mov	sp, r7
 800d858:	bd80      	pop	{r7, pc}

0800d85a <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800d85a:	b5b0      	push	{r4, r5, r7, lr}
 800d85c:	b084      	sub	sp, #16
 800d85e:	af00      	add	r7, sp, #0
 800d860:	60f8      	str	r0, [r7, #12]
 800d862:	60b9      	str	r1, [r7, #8]
 800d864:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d866:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d868:	68bb      	ldr	r3, [r7, #8]
 800d86a:	4618      	mov	r0, r3
 800d86c:	f7f9 fcd9 	bl	8007222 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>
 800d870:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800d872:	68b8      	ldr	r0, [r7, #8]
 800d874:	f000 fa35 	bl	800dce2 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>
 800d878:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	fb02 f303 	mul.w	r3, r2, r3
 800d880:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d882:	18e9      	adds	r1, r5, r3
 800d884:	2301      	movs	r3, #1
 800d886:	2201      	movs	r2, #1
 800d888:	4620      	mov	r0, r4
 800d88a:	f000 fbe9 	bl	800e060 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii>
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	68ba      	ldr	r2, [r7, #8]
 800d892:	609a      	str	r2, [r3, #8]
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	330c      	adds	r3, #12
 800d898:	6879      	ldr	r1, [r7, #4]
 800d89a:	4618      	mov	r0, r3
 800d89c:	f000 fa02 	bl	800dca4 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	3310      	adds	r3, #16
 800d8a4:	2100      	movs	r1, #0
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f000 fa70 	bl	800dd8c <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
      init();
 800d8ac:	68f8      	ldr	r0, [r7, #12]
 800d8ae:	f000 fc15 	bl	800e0dc <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE4initEv>
    }
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	3710      	adds	r7, #16
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bdb0      	pop	{r4, r5, r7, pc}

0800d8bc <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800d8bc:	b5b0      	push	{r4, r5, r7, lr}
 800d8be:	b084      	sub	sp, #16
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	60f8      	str	r0, [r7, #12]
 800d8c4:	60b9      	str	r1, [r7, #8]
 800d8c6:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d8c8:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d8ca:	68bb      	ldr	r3, [r7, #8]
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	f7fd fd27 	bl	800b320 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4dataEv>
 800d8d2:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800d8d4:	68b8      	ldr	r0, [r7, #8]
 800d8d6:	f000 fc11 	bl	800e0fc <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11innerStrideEv>
 800d8da:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	fb02 f303 	mul.w	r3, r2, r3
 800d8e2:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d8e4:	18e9      	adds	r1, r5, r3
 800d8e6:	2301      	movs	r3, #1
 800d8e8:	2201      	movs	r2, #1
 800d8ea:	4620      	mov	r0, r4
 800d8ec:	f000 fc1e 	bl	800e12c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii>
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	68ba      	ldr	r2, [r7, #8]
 800d8f4:	609a      	str	r2, [r3, #8]
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	330c      	adds	r3, #12
 800d8fa:	6879      	ldr	r1, [r7, #4]
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	f000 fa45 	bl	800dd8c <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	330d      	adds	r3, #13
 800d906:	6879      	ldr	r1, [r7, #4]
 800d908:	4618      	mov	r0, r3
 800d90a:	f000 fa3f 	bl	800dd8c <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
      init();
 800d90e:	68f8      	ldr	r0, [r7, #12]
 800d910:	f000 fc4a 	bl	800e1a8 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE4initEv>
    }
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	4618      	mov	r0, r3
 800d918:	3710      	adds	r7, #16
 800d91a:	46bd      	mov	sp, r7
 800d91c:	bdb0      	pop	{r4, r5, r7, pc}

0800d91e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800d91e:	b580      	push	{r7, lr}
 800d920:	b082      	sub	sp, #8
 800d922:	af00      	add	r7, sp, #0
 800d924:	6078      	str	r0, [r7, #4]
 800d926:	6039      	str	r1, [r7, #0]
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	6839      	ldr	r1, [r7, #0]
 800d92c:	4618      	mov	r0, r3
 800d92e:	f000 fc4b 	bl	800e1c8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	4618      	mov	r0, r3
 800d936:	3708      	adds	r7, #8
 800d938:	46bd      	mov	sp, r7
 800d93a:	bd80      	pop	{r7, pc}

0800d93c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b082      	sub	sp, #8
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
 800d944:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800d946:	2200      	movs	r2, #0
 800d948:	2100      	movs	r1, #0
 800d94a:	6878      	ldr	r0, [r7, #4]
 800d94c:	f000 fc4e 	bl	800e1ec <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800d950:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d954:	eeb0 0a67 	vmov.f32	s0, s15
 800d958:	3708      	adds	r7, #8
 800d95a:	46bd      	mov	sp, r7
 800d95c:	bd80      	pop	{r7, pc}

0800d95e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800d95e:	b580      	push	{r7, lr}
 800d960:	b086      	sub	sp, #24
 800d962:	af00      	add	r7, sp, #0
 800d964:	60f8      	str	r0, [r7, #12]
 800d966:	60b9      	str	r1, [r7, #8]
 800d968:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800d96e:	687a      	ldr	r2, [r7, #4]
 800d970:	68b9      	ldr	r1, [r7, #8]
 800d972:	6978      	ldr	r0, [r7, #20]
 800d974:	f000 fc4d 	bl	800e212 <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_9assign_opIffEENS0_13sub_assign_opIffEEE3runINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KS7_EES9_EEvRS3_RKT_RKT0_>
}
 800d978:	bf00      	nop
 800d97a:	3718      	adds	r7, #24
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bd80      	pop	{r7, pc}

0800d980 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800d980:	b480      	push	{r7}
 800d982:	b083      	sub	sp, #12
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	4618      	mov	r0, r3
 800d98e:	370c      	adds	r7, #12
 800d990:	46bd      	mov	sp, r7
 800d992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d996:	4770      	bx	lr

0800d998 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800d998:	b480      	push	{r7}
 800d99a:	b083      	sub	sp, #12
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	3304      	adds	r3, #4
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	370c      	adds	r7, #12
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ae:	4770      	bx	lr

0800d9b0 <_ZN5Eigen8internal13sub_assign_opIffEC1Ev>:
  * \brief Template functor for scalar/packet assignment with subtraction
  *
  */
template<typename DstScalar,typename SrcScalar> struct sub_assign_op {

  EIGEN_EMPTY_STRUCT_CTOR(sub_assign_op)
 800d9b0:	b480      	push	{r7}
 800d9b2:	b083      	sub	sp, #12
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	370c      	adds	r7, #12
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c4:	4770      	bx	lr

0800d9c6 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800d9c6:	b580      	push	{r7, lr}
 800d9c8:	b086      	sub	sp, #24
 800d9ca:	af00      	add	r7, sp, #0
 800d9cc:	60f8      	str	r0, [r7, #12]
 800d9ce:	60b9      	str	r1, [r7, #8]
 800d9d0:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800d9d6:	687a      	ldr	r2, [r7, #4]
 800d9d8:	68b9      	ldr	r1, [r7, #8]
 800d9da:	6978      	ldr	r0, [r7, #20]
 800d9dc:	f000 fc44 	bl	800e268 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>
}
 800d9e0:	bf00      	nop
 800d9e2:	3718      	adds	r7, #24
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	bd80      	pop	{r7, pc}

0800d9e8 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ENS_5DenseEEC1ERS3_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b084      	sub	sp, #16
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	60f8      	str	r0, [r7, #12]
 800d9f0:	60b9      	str	r1, [r7, #8]
 800d9f2:	607a      	str	r2, [r7, #4]
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	687a      	ldr	r2, [r7, #4]
 800d9f8:	68b9      	ldr	r1, [r7, #8]
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	f000 fc6e 	bl	800e2dc <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EEC1ERS4_i>
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	4618      	mov	r0, r3
 800da04:	3710      	adds	r7, #16
 800da06:	46bd      	mov	sp, r7
 800da08:	bd80      	pop	{r7, pc}

0800da0a <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800da0a:	b480      	push	{r7}
 800da0c:	b083      	sub	sp, #12
 800da0e:	af00      	add	r7, sp, #0
 800da10:	6078      	str	r0, [r7, #4]
    }
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	4618      	mov	r0, r3
 800da16:	370c      	adds	r7, #12
 800da18:	46bd      	mov	sp, r7
 800da1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1e:	4770      	bx	lr

0800da20 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800da20:	b580      	push	{r7, lr}
 800da22:	b082      	sub	sp, #8
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	4618      	mov	r0, r3
 800da2c:	f7fd ffc5 	bl	800b9ba <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800da30:	4603      	mov	r3, r0
    }
 800da32:	4618      	mov	r0, r3
 800da34:	3708      	adds	r7, #8
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}

0800da3a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1ERKSG_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800da3a:	b580      	push	{r7, lr}
 800da3c:	b082      	sub	sp, #8
 800da3e:	af00      	add	r7, sp, #0
 800da40:	6078      	str	r0, [r7, #4]
 800da42:	6039      	str	r1, [r7, #0]
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	6839      	ldr	r1, [r7, #0]
 800da48:	4618      	mov	r0, r3
 800da4a:	f000 fc7d 	bl	800e348 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1ERKSG_>
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	4618      	mov	r0, r3
 800da52:	3708      	adds	r7, #8
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}

0800da58 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800da58:	b480      	push	{r7}
 800da5a:	b083      	sub	sp, #12
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	4618      	mov	r0, r3
 800da64:	370c      	adds	r7, #12
 800da66:	46bd      	mov	sp, r7
 800da68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6c:	4770      	bx	lr

0800da6e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>:
 800da6e:	b480      	push	{r7}
 800da70:	b083      	sub	sp, #12
 800da72:	af00      	add	r7, sp, #0
 800da74:	6078      	str	r0, [r7, #4]
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	4618      	mov	r0, r3
 800da7a:	370c      	adds	r7, #12
 800da7c:	46bd      	mov	sp, r7
 800da7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da82:	4770      	bx	lr

0800da84 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi2EE3runISJ_EEfRKSK_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800da84:	b580      	push	{r7, lr}
 800da86:	b084      	sub	sp, #16
 800da88:	af00      	add	r7, sp, #0
 800da8a:	60f8      	str	r0, [r7, #12]
 800da8c:	60b9      	str	r1, [r7, #8]
 800da8e:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800da90:	68b9      	ldr	r1, [r7, #8]
 800da92:	68f8      	ldr	r0, [r7, #12]
 800da94:	f000 fc67 	bl	800e366 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi3EE3runERKSK_RKS3_>
 800da98:	eef0 7a40 	vmov.f32	s15, s0
  }
 800da9c:	eeb0 0a67 	vmov.f32	s0, s15
 800daa0:	3710      	adds	r7, #16
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}

0800daa6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800daa6:	b580      	push	{r7, lr}
 800daa8:	b082      	sub	sp, #8
 800daaa:	af00      	add	r7, sp, #0
 800daac:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800daae:	2200      	movs	r2, #0
 800dab0:	2102      	movs	r1, #2
 800dab2:	6878      	ldr	r0, [r7, #4]
 800dab4:	f7fc fed0 	bl	800a858 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800dab8:	6878      	ldr	r0, [r7, #4]
 800daba:	f000 fc78 	bl	800e3ae <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSL_>
  }
 800dabe:	bf00      	nop
 800dac0:	3708      	adds	r7, #8
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}

0800dac6 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>:
 800dac6:	b580      	push	{r7, lr}
 800dac8:	b082      	sub	sp, #8
 800daca:	af00      	add	r7, sp, #0
 800dacc:	6078      	str	r0, [r7, #4]
 800dace:	6878      	ldr	r0, [r7, #4]
 800dad0:	f000 fc7d 	bl	800e3ce <_ZN5Eigen9DenseBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	4618      	mov	r0, r3
 800dad8:	3708      	adds	r7, #8
 800dada:	46bd      	mov	sp, r7
 800dadc:	bd80      	pop	{r7, pc}

0800dade <_ZN5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERSE_i>:
    inline BlockImpl_dense(XprType& xpr, Index i)
 800dade:	b580      	push	{r7, lr}
 800dae0:	b084      	sub	sp, #16
 800dae2:	af00      	add	r7, sp, #0
 800dae4:	60f8      	str	r0, [r7, #12]
 800dae6:	60b9      	str	r1, [r7, #8]
 800dae8:	607a      	str	r2, [r7, #4]
        m_blockCols(BlockCols==1 ? 1 : xpr.cols())
 800daea:	68f8      	ldr	r0, [r7, #12]
 800daec:	f7ff ffeb 	bl	800dac6 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	68b9      	ldr	r1, [r7, #8]
 800daf4:	4618      	mov	r0, r3
 800daf6:	f7f6 fe79 	bl	80047ec <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	3310      	adds	r3, #16
 800dafe:	6879      	ldr	r1, [r7, #4]
 800db00:	4618      	mov	r0, r3
 800db02:	f000 f8cf 	bl	800dca4 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	3314      	adds	r3, #20
 800db0a:	2100      	movs	r1, #0
 800db0c:	4618      	mov	r0, r3
 800db0e:	f000 f93d 	bl	800dd8c <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	3315      	adds	r3, #21
 800db16:	2101      	movs	r1, #1
 800db18:	4618      	mov	r0, r3
 800db1a:	f7f9 f84f 	bl	8006bbc <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	3316      	adds	r3, #22
 800db22:	2101      	movs	r1, #1
 800db24:	4618      	mov	r0, r3
 800db26:	f7f9 f849 	bl	8006bbc <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
    {}
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	4618      	mov	r0, r3
 800db2e:	3710      	adds	r7, #16
 800db30:	46bd      	mov	sp, r7
 800db32:	bd80      	pop	{r7, pc}

0800db34 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EEC1ERS6_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800db34:	b5b0      	push	{r4, r5, r7, lr}
 800db36:	b084      	sub	sp, #16
 800db38:	af00      	add	r7, sp, #0
 800db3a:	60f8      	str	r0, [r7, #12]
 800db3c:	60b9      	str	r1, [r7, #8]
 800db3e:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800db40:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800db42:	68b8      	ldr	r0, [r7, #8]
 800db44:	f000 fc4e 	bl	800e3e4 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE4dataEv>
 800db48:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800db4a:	68b8      	ldr	r0, [r7, #8]
 800db4c:	f000 fc5e 	bl	800e40c <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11innerStrideEv>
 800db50:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	fb02 f303 	mul.w	r3, r2, r3
 800db58:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800db5a:	18e9      	adds	r1, r5, r3
 800db5c:	2301      	movs	r3, #1
 800db5e:	2201      	movs	r2, #1
 800db60:	4620      	mov	r0, r4
 800db62:	f000 fc87 	bl	800e474 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii>
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	3308      	adds	r3, #8
 800db6a:	68ba      	ldr	r2, [r7, #8]
 800db6c:	6812      	ldr	r2, [r2, #0]
 800db6e:	601a      	str	r2, [r3, #0]
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	330c      	adds	r3, #12
 800db74:	2100      	movs	r1, #0
 800db76:	4618      	mov	r0, r3
 800db78:	f000 f908 	bl	800dd8c <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	3310      	adds	r3, #16
 800db80:	6879      	ldr	r1, [r7, #4]
 800db82:	4618      	mov	r0, r3
 800db84:	f000 f88e 	bl	800dca4 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 800db88:	68f8      	ldr	r0, [r7, #12]
 800db8a:	f000 fcb1 	bl	800e4f0 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE4initEv>
    }
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	4618      	mov	r0, r3
 800db92:	3710      	adds	r7, #16
 800db94:	46bd      	mov	sp, r7
 800db96:	bdb0      	pop	{r4, r5, r7, pc}

0800db98 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1ERKSP_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800db98:	b580      	push	{r7, lr}
 800db9a:	b082      	sub	sp, #8
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
 800dba0:	6039      	str	r1, [r7, #0]
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6839      	ldr	r1, [r7, #0]
 800dba6:	4618      	mov	r0, r3
 800dba8:	f000 fcb2 	bl	800e510 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffEC1ERKSP_>
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3708      	adds	r7, #8
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}

0800dbb6 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS5_IS7_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEELi1ELi1ELb0EEEEEKNS9_IKNS8_ISB_EELi1ELi1ELb0EEEEEEELi0ELi1EE3runERKST_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800dbb6:	b580      	push	{r7, lr}
 800dbb8:	b082      	sub	sp, #8
 800dbba:	af00      	add	r7, sp, #0
 800dbbc:	6078      	str	r0, [r7, #4]
 800dbbe:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	2100      	movs	r1, #0
 800dbc4:	6878      	ldr	r0, [r7, #4]
 800dbc6:	f000 fcb5 	bl	800e534 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 800dbca:	eef0 7a40 	vmov.f32	s15, s0
  }
 800dbce:	eeb0 0a67 	vmov.f32	s0, s15
 800dbd2:	3708      	adds	r7, #8
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}

0800dbd8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b082      	sub	sp, #8
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800dbe0:	2201      	movs	r2, #1
 800dbe2:	2102      	movs	r1, #2
 800dbe4:	6878      	ldr	r0, [r7, #4]
 800dbe6:	f7fc fb70 	bl	800a2ca <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800dbea:	6878      	ldr	r0, [r7, #4]
 800dbec:	f000 fcb5 	bl	800e55a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSP_>
  }
 800dbf0:	bf00      	nop
 800dbf2:	3708      	adds	r7, #8
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	bd80      	pop	{r7, pc}

0800dbf8 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>:
    inline Index innerStride() const EIGEN_NOEXCEPT { return 1; }
 800dbf8:	b480      	push	{r7}
 800dbfa:	b083      	sub	sp, #12
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
 800dc00:	2301      	movs	r3, #1
 800dc02:	4618      	mov	r0, r3
 800dc04:	370c      	adds	r7, #12
 800dc06:	46bd      	mov	sp, r7
 800dc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0c:	4770      	bx	lr

0800dc0e <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>:
 800dc0e:	b580      	push	{r7, lr}
 800dc10:	b082      	sub	sp, #8
 800dc12:	af00      	add	r7, sp, #0
 800dc14:	6078      	str	r0, [r7, #4]
 800dc16:	6878      	ldr	r0, [r7, #4]
 800dc18:	f000 fcaf 	bl	800e57a <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	4618      	mov	r0, r3
 800dc20:	3708      	adds	r7, #8
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd80      	pop	{r7, pc}
	...

0800dc28 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii>:
      checkSanity<Derived>();
    }

    /** \internal Constructor for dynamically sized matrices */
    EIGEN_DEVICE_FUNC
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b084      	sub	sp, #16
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	60f8      	str	r0, [r7, #12]
 800dc30:	60b9      	str	r1, [r7, #8]
 800dc32:	607a      	str	r2, [r7, #4]
 800dc34:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800dc36:	68f8      	ldr	r0, [r7, #12]
 800dc38:	f7ff ffe9 	bl	800dc0e <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	68ba      	ldr	r2, [r7, #8]
 800dc40:	601a      	str	r2, [r3, #0]
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	3304      	adds	r3, #4
 800dc46:	6879      	ldr	r1, [r7, #4]
 800dc48:	4618      	mov	r0, r3
 800dc4a:	f7f8 ffb7 	bl	8006bbc <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	3305      	adds	r3, #5
 800dc52:	6839      	ldr	r1, [r7, #0]
 800dc54:	4618      	mov	r0, r3
 800dc56:	f7f8 ff97 	bl	8006b88 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
    {
      eigen_assert( (dataPtr == 0)
 800dc5a:	68bb      	ldr	r3, [r7, #8]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d011      	beq.n	800dc84 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x5c>
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	db08      	blt.n	800dc78 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x50>
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	2b01      	cmp	r3, #1
 800dc6a:	d105      	bne.n	800dc78 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x50>
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	db02      	blt.n	800dc78 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x50>
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	2b03      	cmp	r3, #3
 800dc76:	d005      	beq.n	800dc84 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x5c>
 800dc78:	4b07      	ldr	r3, [pc, #28]	; (800dc98 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x70>)
 800dc7a:	4a08      	ldr	r2, [pc, #32]	; (800dc9c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x74>)
 800dc7c:	21b0      	movs	r1, #176	; 0xb0
 800dc7e:	4808      	ldr	r0, [pc, #32]	; (800dca0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x78>)
 800dc80:	f010 f910 	bl	801dea4 <__assert_func>
              || (   rows >= 0 && (RowsAtCompileTime == Dynamic || RowsAtCompileTime == rows)
                  && cols >= 0 && (ColsAtCompileTime == Dynamic || ColsAtCompileTime == cols)));
      checkSanity<Derived>();
 800dc84:	2100      	movs	r1, #0
 800dc86:	68f8      	ldr	r0, [r7, #12]
 800dc88:	f000 fc82 	bl	800e590 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	4618      	mov	r0, r3
 800dc90:	3710      	adds	r7, #16
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bd80      	pop	{r7, pc}
 800dc96:	bf00      	nop
 800dc98:	08026430 	.word	0x08026430
 800dc9c:	080264dc 	.word	0x080264dc
 800dca0:	080265e0 	.word	0x080265e0

0800dca4 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>:

template<typename T> class variable_if_dynamic<T, Dynamic>
{
    T m_value;
  public:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T value = 0) EIGEN_NO_THROW : m_value(value) {}
 800dca4:	b480      	push	{r7}
 800dca6:	b083      	sub	sp, #12
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
 800dcac:	6039      	str	r1, [r7, #0]
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	683a      	ldr	r2, [r7, #0]
 800dcb2:	601a      	str	r2, [r3, #0]
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	370c      	adds	r7, #12
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc0:	4770      	bx	lr

0800dcc2 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE4initEv>:
    }
    #endif

  protected:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    void init()
 800dcc2:	b580      	push	{r7, lr}
 800dcc4:	b082      	sub	sp, #8
 800dcc6:	af00      	add	r7, sp, #0
 800dcc8:	6078      	str	r0, [r7, #4]
    {
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
                    ? m_xpr.outerStride()
                    : m_xpr.innerStride();
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	689b      	ldr	r3, [r3, #8]
                    ? m_xpr.outerStride()
 800dcce:	4618      	mov	r0, r3
 800dcd0:	f7ff ff92 	bl	800dbf8 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 800dcd4:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	615a      	str	r2, [r3, #20]
    }
 800dcda:	bf00      	nop
 800dcdc:	3708      	adds	r7, #8
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd80      	pop	{r7, pc}

0800dce2 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>:
 800dce2:	b480      	push	{r7}
 800dce4:	b083      	sub	sp, #12
 800dce6:	af00      	add	r7, sp, #0
 800dce8:	6078      	str	r0, [r7, #4]
 800dcea:	2301      	movs	r3, #1
 800dcec:	4618      	mov	r0, r3
 800dcee:	370c      	adds	r7, #12
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf6:	4770      	bx	lr

0800dcf8 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>:
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b082      	sub	sp, #8
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
 800dd00:	6878      	ldr	r0, [r7, #4]
 800dd02:	f000 fc50 	bl	800e5a6 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	4618      	mov	r0, r3
 800dd0a:	3708      	adds	r7, #8
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bd80      	pop	{r7, pc}

0800dd10 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b084      	sub	sp, #16
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	60f8      	str	r0, [r7, #12]
 800dd18:	60b9      	str	r1, [r7, #8]
 800dd1a:	607a      	str	r2, [r7, #4]
 800dd1c:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800dd1e:	68f8      	ldr	r0, [r7, #12]
 800dd20:	f7ff ffea 	bl	800dcf8 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	68ba      	ldr	r2, [r7, #8]
 800dd28:	601a      	str	r2, [r3, #0]
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	3304      	adds	r3, #4
 800dd2e:	6879      	ldr	r1, [r7, #4]
 800dd30:	4618      	mov	r0, r3
 800dd32:	f7f8 ff29 	bl	8006b88 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	3305      	adds	r3, #5
 800dd3a:	6839      	ldr	r1, [r7, #0]
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	f7f8 ff3d 	bl	8006bbc <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800dd42:	68bb      	ldr	r3, [r7, #8]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d011      	beq.n	800dd6c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	db08      	blt.n	800dd60 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	2b03      	cmp	r3, #3
 800dd52:	d105      	bne.n	800dd60 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	db02      	blt.n	800dd60 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	2b01      	cmp	r3, #1
 800dd5e:	d005      	beq.n	800dd6c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800dd60:	4b07      	ldr	r3, [pc, #28]	; (800dd80 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x70>)
 800dd62:	4a08      	ldr	r2, [pc, #32]	; (800dd84 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x74>)
 800dd64:	21b0      	movs	r1, #176	; 0xb0
 800dd66:	4808      	ldr	r0, [pc, #32]	; (800dd88 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x78>)
 800dd68:	f010 f89c 	bl	801dea4 <__assert_func>
      checkSanity<Derived>();
 800dd6c:	2100      	movs	r1, #0
 800dd6e:	68f8      	ldr	r0, [r7, #12]
 800dd70:	f000 fc24 	bl	800e5bc <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	4618      	mov	r0, r3
 800dd78:	3710      	adds	r7, #16
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bd80      	pop	{r7, pc}
 800dd7e:	bf00      	nop
 800dd80:	08026430 	.word	0x08026430
 800dd84:	08026634 	.word	0x08026634
 800dd88:	080265e0 	.word	0x080265e0

0800dd8c <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_DEBUG(v); eigen_assert(v == T(Value)); }
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b082      	sub	sp, #8
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
 800dd94:	6039      	str	r1, [r7, #0]
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d005      	beq.n	800dda8 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei+0x1c>
 800dd9c:	4b05      	ldr	r3, [pc, #20]	; (800ddb4 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei+0x28>)
 800dd9e:	4a06      	ldr	r2, [pc, #24]	; (800ddb8 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei+0x2c>)
 800dda0:	2185      	movs	r1, #133	; 0x85
 800dda2:	4806      	ldr	r0, [pc, #24]	; (800ddbc <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei+0x30>)
 800dda4:	f010 f87e 	bl	801dea4 <__assert_func>
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	4618      	mov	r0, r3
 800ddac:	3708      	adds	r7, #8
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	bd80      	pop	{r7, pc}
 800ddb2:	bf00      	nop
 800ddb4:	08022248 	.word	0x08022248
 800ddb8:	08026738 	.word	0x08026738
 800ddbc:	080222c0 	.word	0x080222c0

0800ddc0 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE4initEv>:
    void init()
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b082      	sub	sp, #8
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	689b      	ldr	r3, [r3, #8]
 800ddcc:	4618      	mov	r0, r3
 800ddce:	f7f9 faf9 	bl	80073c4 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 800ddd2:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	615a      	str	r2, [r3, #20]
    }
 800ddd8:	bf00      	nop
 800ddda:	3708      	adds	r7, #8
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bd80      	pop	{r7, pc}

0800dde0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b082      	sub	sp, #8
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
 800dde8:	6039      	str	r1, [r7, #0]
 800ddea:	6878      	ldr	r0, [r7, #4]
 800ddec:	f000 fbf1 	bl	800e5d2 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	6839      	ldr	r1, [r7, #0]
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f000 fbf7 	bl	800e5e8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	3708      	adds	r7, #8
 800de00:	46bd      	mov	sp, r7
 800de02:	bd80      	pop	{r7, pc}

0800de04 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800de04:	b580      	push	{r7, lr}
 800de06:	b082      	sub	sp, #8
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
 800de0c:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800de0e:	2200      	movs	r2, #0
 800de10:	2100      	movs	r1, #0
 800de12:	6878      	ldr	r0, [r7, #4]
 800de14:	f000 fc10 	bl	800e638 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800de18:	eef0 7a40 	vmov.f32	s15, s0
  }
 800de1c:	eeb0 0a67 	vmov.f32	s0, s15
 800de20:	3708      	adds	r7, #8
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}

0800de26 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800de26:	b580      	push	{r7, lr}
 800de28:	b084      	sub	sp, #16
 800de2a:	af00      	add	r7, sp, #0
 800de2c:	6078      	str	r0, [r7, #4]
 800de2e:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800de30:	6839      	ldr	r1, [r7, #0]
 800de32:	6878      	ldr	r0, [r7, #4]
 800de34:	f000 fc13 	bl	800e65e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSM_RKS3_>
 800de38:	eef0 7a40 	vmov.f32	s15, s0
 800de3c:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800de40:	6839      	ldr	r1, [r7, #0]
 800de42:	6878      	ldr	r0, [r7, #4]
 800de44:	f000 fc1c 	bl	800e680 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSM_RKS3_>
 800de48:	eef0 7a40 	vmov.f32	s15, s0
 800de4c:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800de50:	f107 020c 	add.w	r2, r7, #12
 800de54:	f107 0308 	add.w	r3, r7, #8
 800de58:	4619      	mov	r1, r3
 800de5a:	6838      	ldr	r0, [r7, #0]
 800de5c:	f7fb fa99 	bl	8009392 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800de60:	eef0 7a40 	vmov.f32	s15, s0
  }
 800de64:	eeb0 0a67 	vmov.f32	s0, s15
 800de68:	3710      	adds	r7, #16
 800de6a:	46bd      	mov	sp, r7
 800de6c:	bd80      	pop	{r7, pc}

0800de6e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductIS2_S2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800de6e:	b5b0      	push	{r4, r5, r7, lr}
 800de70:	b084      	sub	sp, #16
 800de72:	af00      	add	r7, sp, #0
 800de74:	6078      	str	r0, [r7, #4]
 800de76:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800de78:	6878      	ldr	r0, [r7, #4]
 800de7a:	f7f7 fdcd 	bl	8005a18 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800de7e:	4604      	mov	r4, r0
 800de80:	6838      	ldr	r0, [r7, #0]
 800de82:	f7f7 fdfc 	bl	8005a7e <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE7derivedEv>
 800de86:	4605      	mov	r5, r0
 800de88:	f107 030c 	add.w	r3, r7, #12
 800de8c:	4618      	mov	r0, r3
 800de8e:	f7f9 f920 	bl	80070d2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800de92:	f107 030c 	add.w	r3, r7, #12
 800de96:	461a      	mov	r2, r3
 800de98:	4629      	mov	r1, r5
 800de9a:	4620      	mov	r0, r4
 800de9c:	f000 fc01 	bl	800e6a2 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800dea0:	6878      	ldr	r0, [r7, #4]
 800dea2:	f7f7 fdb9 	bl	8005a18 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800dea6:	4603      	mov	r3, r0
    }
 800dea8:	4618      	mov	r0, r3
 800deaa:	3710      	adds	r7, #16
 800deac:	46bd      	mov	sp, r7
 800deae:	bdb0      	pop	{r4, r5, r7, pc}

0800deb0 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 800deb0:	b480      	push	{r7}
 800deb2:	b083      	sub	sp, #12
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	4618      	mov	r0, r3
 800debe:	370c      	adds	r7, #12
 800dec0:	46bd      	mov	sp, r7
 800dec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec6:	4770      	bx	lr

0800dec8 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800dec8:	b480      	push	{r7}
 800deca:	b083      	sub	sp, #12
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	4618      	mov	r0, r3
 800ded4:	370c      	adds	r7, #12
 800ded6:	46bd      	mov	sp, r7
 800ded8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dedc:	4770      	bx	lr

0800dede <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEE8coeffRefEii>:
  Scalar& coeffRef(Index row, Index col)
 800dede:	b590      	push	{r4, r7, lr}
 800dee0:	b085      	sub	sp, #20
 800dee2:	af00      	add	r7, sp, #0
 800dee4:	60f8      	str	r0, [r7, #12]
 800dee6:	60b9      	str	r1, [r7, #8]
 800dee8:	607a      	str	r2, [r7, #4]
      return const_cast<Scalar*>(m_d.data)[row * m_d.outerStride() + col];
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	681c      	ldr	r4, [r3, #0]
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	4618      	mov	r0, r3
 800def2:	f7fb fa08 	bl	8009306 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>
 800def6:	4602      	mov	r2, r0
 800def8:	68bb      	ldr	r3, [r7, #8]
 800defa:	fb03 f202 	mul.w	r2, r3, r2
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	4413      	add	r3, r2
 800df02:	009b      	lsls	r3, r3, #2
 800df04:	4423      	add	r3, r4
  }
 800df06:	4618      	mov	r0, r3
 800df08:	3714      	adds	r7, #20
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd90      	pop	{r4, r7, pc}

0800df0e <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 800df0e:	b580      	push	{r7, lr}
 800df10:	b0a4      	sub	sp, #144	; 0x90
 800df12:	af00      	add	r7, sp, #0
 800df14:	60f8      	str	r0, [r7, #12]
 800df16:	60b9      	str	r1, [r7, #8]
 800df18:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800df1a:	68f9      	ldr	r1, [r7, #12]
 800df1c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800df20:	68ba      	ldr	r2, [r7, #8]
 800df22:	4618      	mov	r0, r3
 800df24:	f7fd f844 	bl	800afb0 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 800df28:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800df2c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800df30:	4611      	mov	r1, r2
 800df32:	4618      	mov	r0, r3
 800df34:	f7fd f84f 	bl	800afd6 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800df3e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800df42:	687a      	ldr	r2, [r7, #4]
 800df44:	4618      	mov	r0, r3
 800df46:	f000 fbbd 	bl	800e6c4 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE3colEi>
 800df4a:	f107 0314 	add.w	r3, r7, #20
 800df4e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800df52:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800df56:	4618      	mov	r0, r3
 800df58:	f000 fbc7 	bl	800e6ea <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS1_IS4_EELi3ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 800df5c:	f107 0314 	add.w	r3, r7, #20
 800df60:	4618      	mov	r0, r3
 800df62:	f000 fbf0 	bl	800e746 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE3sumEv>
 800df66:	eef0 7a40 	vmov.f32	s15, s0
  }
 800df6a:	eeb0 0a67 	vmov.f32	s0, s15
 800df6e:	3790      	adds	r7, #144	; 0x90
 800df70:	46bd      	mov	sp, r7
 800df72:	bd80      	pop	{r7, pc}

0800df74 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800df74:	b580      	push	{r7, lr}
 800df76:	b082      	sub	sp, #8
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800df7c:	2200      	movs	r2, #0
 800df7e:	2101      	movs	r1, #1
 800df80:	6878      	ldr	r0, [r7, #4]
 800df82:	f7fe fe58 	bl	800cc36 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800df86:	6878      	ldr	r0, [r7, #4]
 800df88:	f000 fbf8 	bl	800e77c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSG_>
  }
 800df8c:	bf00      	nop
 800df8e:	3708      	adds	r7, #8
 800df90:	46bd      	mov	sp, r7
 800df92:	bd80      	pop	{r7, pc}

0800df94 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductINS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS9_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 800df94:	b590      	push	{r4, r7, lr}
 800df96:	b085      	sub	sp, #20
 800df98:	af00      	add	r7, sp, #0
 800df9a:	60f8      	str	r0, [r7, #12]
 800df9c:	60b9      	str	r1, [r7, #8]
 800df9e:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 800dfa0:	68b8      	ldr	r0, [r7, #8]
 800dfa2:	f7f7 fc70 	bl	8005886 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800dfa6:	4604      	mov	r4, r0
 800dfa8:	6878      	ldr	r0, [r7, #4]
 800dfaa:	f7f7 fed1 	bl	8005d50 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	461a      	mov	r2, r3
 800dfb2:	4621      	mov	r1, r4
 800dfb4:	68f8      	ldr	r0, [r7, #12]
 800dfb6:	f000 fc15 	bl	800e7e4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_>
}
 800dfba:	68f8      	ldr	r0, [r7, #12]
 800dfbc:	3714      	adds	r7, #20
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	bd90      	pop	{r4, r7, pc}

0800dfc2 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800dfc2:	b580      	push	{r7, lr}
 800dfc4:	b086      	sub	sp, #24
 800dfc6:	af00      	add	r7, sp, #0
 800dfc8:	60f8      	str	r0, [r7, #12]
 800dfca:	60b9      	str	r1, [r7, #8]
 800dfcc:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800dfd2:	687a      	ldr	r2, [r7, #4]
 800dfd4:	68b9      	ldr	r1, [r7, #8]
 800dfd6:	6978      	ldr	r0, [r7, #20]
 800dfd8:	f000 fc32 	bl	800e840 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>
}
 800dfdc:	bf00      	nop
 800dfde:	3718      	adds	r7, #24
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	bd80      	pop	{r7, pc}

0800dfe4 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE6resizeEiii>:
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
 800dfe4:	b480      	push	{r7}
 800dfe6:	b085      	sub	sp, #20
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	60f8      	str	r0, [r7, #12]
 800dfec:	60b9      	str	r1, [r7, #8]
 800dfee:	607a      	str	r2, [r7, #4]
 800dff0:	603b      	str	r3, [r7, #0]
 800dff2:	bf00      	nop
 800dff4:	3714      	adds	r7, #20
 800dff6:	46bd      	mov	sp, r7
 800dff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffc:	4770      	bx	lr

0800dffe <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS2_EESI_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800dffe:	b580      	push	{r7, lr}
 800e000:	b082      	sub	sp, #8
 800e002:	af00      	add	r7, sp, #0
 800e004:	6078      	str	r0, [r7, #4]
 800e006:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800e008:	6839      	ldr	r1, [r7, #0]
 800e00a:	6878      	ldr	r0, [r7, #4]
 800e00c:	f000 fc2b 	bl	800e866 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS2_EEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800e010:	bf00      	nop
 800e012:	3708      	adds	r7, #8
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}

0800e018 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800e018:	b590      	push	{r4, r7, lr}
 800e01a:	b085      	sub	sp, #20
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	60f8      	str	r0, [r7, #12]
 800e020:	60b9      	str	r1, [r7, #8]
 800e022:	607a      	str	r2, [r7, #4]
      return m_d.data[row + col * m_d.outerStride()];
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	681c      	ldr	r4, [r3, #0]
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	4618      	mov	r0, r3
 800e02c:	f7f9 f846 	bl	80070bc <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>
 800e030:	4602      	mov	r2, r0
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	fb03 f202 	mul.w	r2, r3, r2
 800e038:	68bb      	ldr	r3, [r7, #8]
 800e03a:	4413      	add	r3, r2
 800e03c:	009b      	lsls	r3, r3, #2
 800e03e:	4423      	add	r3, r4
  }
 800e040:	4618      	mov	r0, r3
 800e042:	3714      	adds	r7, #20
 800e044:	46bd      	mov	sp, r7
 800e046:	bd90      	pop	{r4, r7, pc}

0800e048 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>:
 800e048:	b580      	push	{r7, lr}
 800e04a:	b082      	sub	sp, #8
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
 800e050:	6878      	ldr	r0, [r7, #4]
 800e052:	f000 fc29 	bl	800e8a8 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	4618      	mov	r0, r3
 800e05a:	3708      	adds	r7, #8
 800e05c:	46bd      	mov	sp, r7
 800e05e:	bd80      	pop	{r7, pc}

0800e060 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800e060:	b580      	push	{r7, lr}
 800e062:	b084      	sub	sp, #16
 800e064:	af00      	add	r7, sp, #0
 800e066:	60f8      	str	r0, [r7, #12]
 800e068:	60b9      	str	r1, [r7, #8]
 800e06a:	607a      	str	r2, [r7, #4]
 800e06c:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800e06e:	68f8      	ldr	r0, [r7, #12]
 800e070:	f7ff ffea 	bl	800e048 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	68ba      	ldr	r2, [r7, #8]
 800e078:	601a      	str	r2, [r3, #0]
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	3304      	adds	r3, #4
 800e07e:	6879      	ldr	r1, [r7, #4]
 800e080:	4618      	mov	r0, r3
 800e082:	f7f8 fd9b 	bl	8006bbc <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	3305      	adds	r3, #5
 800e08a:	6839      	ldr	r1, [r7, #0]
 800e08c:	4618      	mov	r0, r3
 800e08e:	f7f8 fd95 	bl	8006bbc <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800e092:	68bb      	ldr	r3, [r7, #8]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d011      	beq.n	800e0bc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	db08      	blt.n	800e0b0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	2b01      	cmp	r3, #1
 800e0a2:	d105      	bne.n	800e0b0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800e0a4:	683b      	ldr	r3, [r7, #0]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	db02      	blt.n	800e0b0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800e0aa:	683b      	ldr	r3, [r7, #0]
 800e0ac:	2b01      	cmp	r3, #1
 800e0ae:	d005      	beq.n	800e0bc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 800e0b0:	4b07      	ldr	r3, [pc, #28]	; (800e0d0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x70>)
 800e0b2:	4a08      	ldr	r2, [pc, #32]	; (800e0d4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x74>)
 800e0b4:	21b0      	movs	r1, #176	; 0xb0
 800e0b6:	4808      	ldr	r0, [pc, #32]	; (800e0d8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x78>)
 800e0b8:	f00f fef4 	bl	801dea4 <__assert_func>
      checkSanity<Derived>();
 800e0bc:	2100      	movs	r1, #0
 800e0be:	68f8      	ldr	r0, [r7, #12]
 800e0c0:	f000 fbfd 	bl	800e8be <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	3710      	adds	r7, #16
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}
 800e0ce:	bf00      	nop
 800e0d0:	08026430 	.word	0x08026430
 800e0d4:	080267a0 	.word	0x080267a0
 800e0d8:	080265e0 	.word	0x080265e0

0800e0dc <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE4initEv>:
    void init()
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b082      	sub	sp, #8
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	689b      	ldr	r3, [r3, #8]
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	f7f9 f96b 	bl	80073c4 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 800e0ee:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	615a      	str	r2, [r3, #20]
    }
 800e0f4:	bf00      	nop
 800e0f6:	3708      	adds	r7, #8
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}

0800e0fc <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11innerStrideEv>:
 800e0fc:	b480      	push	{r7}
 800e0fe:	b083      	sub	sp, #12
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
 800e104:	2301      	movs	r3, #1
 800e106:	4618      	mov	r0, r3
 800e108:	370c      	adds	r7, #12
 800e10a:	46bd      	mov	sp, r7
 800e10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e110:	4770      	bx	lr

0800e112 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>:
 800e112:	b580      	push	{r7, lr}
 800e114:	b082      	sub	sp, #8
 800e116:	af00      	add	r7, sp, #0
 800e118:	6078      	str	r0, [r7, #4]
 800e11a:	6878      	ldr	r0, [r7, #4]
 800e11c:	f000 fbda 	bl	800e8d4 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	4618      	mov	r0, r3
 800e124:	3708      	adds	r7, #8
 800e126:	46bd      	mov	sp, r7
 800e128:	bd80      	pop	{r7, pc}
	...

0800e12c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b084      	sub	sp, #16
 800e130:	af00      	add	r7, sp, #0
 800e132:	60f8      	str	r0, [r7, #12]
 800e134:	60b9      	str	r1, [r7, #8]
 800e136:	607a      	str	r2, [r7, #4]
 800e138:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800e13a:	68f8      	ldr	r0, [r7, #12]
 800e13c:	f7ff ffe9 	bl	800e112 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	68ba      	ldr	r2, [r7, #8]
 800e144:	601a      	str	r2, [r3, #0]
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	3304      	adds	r3, #4
 800e14a:	6879      	ldr	r1, [r7, #4]
 800e14c:	4618      	mov	r0, r3
 800e14e:	f7f8 fd35 	bl	8006bbc <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	3305      	adds	r3, #5
 800e156:	6839      	ldr	r1, [r7, #0]
 800e158:	4618      	mov	r0, r3
 800e15a:	f7f8 fd2f 	bl	8006bbc <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800e15e:	68bb      	ldr	r3, [r7, #8]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d011      	beq.n	800e188 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2b00      	cmp	r3, #0
 800e168:	db08      	blt.n	800e17c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	2b01      	cmp	r3, #1
 800e16e:	d105      	bne.n	800e17c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	2b00      	cmp	r3, #0
 800e174:	db02      	blt.n	800e17c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	2b01      	cmp	r3, #1
 800e17a:	d005      	beq.n	800e188 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800e17c:	4b07      	ldr	r3, [pc, #28]	; (800e19c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x70>)
 800e17e:	4a08      	ldr	r2, [pc, #32]	; (800e1a0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x74>)
 800e180:	21b0      	movs	r1, #176	; 0xb0
 800e182:	4808      	ldr	r0, [pc, #32]	; (800e1a4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x78>)
 800e184:	f00f fe8e 	bl	801dea4 <__assert_func>
      checkSanity<Derived>();
 800e188:	2100      	movs	r1, #0
 800e18a:	68f8      	ldr	r0, [r7, #12]
 800e18c:	f000 fbad 	bl	800e8ea <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	4618      	mov	r0, r3
 800e194:	3710      	adds	r7, #16
 800e196:	46bd      	mov	sp, r7
 800e198:	bd80      	pop	{r7, pc}
 800e19a:	bf00      	nop
 800e19c:	08026430 	.word	0x08026430
 800e1a0:	080268a4 	.word	0x080268a4
 800e1a4:	080265e0 	.word	0x080265e0

0800e1a8 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE4initEv>:
    void init()
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b082      	sub	sp, #8
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	689b      	ldr	r3, [r3, #8]
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	f7fd fe3d 	bl	800be34 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11outerStrideEv>
 800e1ba:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	611a      	str	r2, [r3, #16]
    }
 800e1c0:	bf00      	nop
 800e1c2:	3708      	adds	r7, #8
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	bd80      	pop	{r7, pc}

0800e1c8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b082      	sub	sp, #8
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
 800e1d0:	6039      	str	r1, [r7, #0]
 800e1d2:	6878      	ldr	r0, [r7, #4]
 800e1d4:	f000 fb94 	bl	800e900 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	6839      	ldr	r1, [r7, #0]
 800e1dc:	4618      	mov	r0, r3
 800e1de:	f000 fb9a 	bl	800e916 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	3708      	adds	r7, #8
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}

0800e1ec <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b084      	sub	sp, #16
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	60f8      	str	r0, [r7, #12]
 800e1f4:	60b9      	str	r1, [r7, #8]
 800e1f6:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	687a      	ldr	r2, [r7, #4]
 800e1fc:	68b9      	ldr	r1, [r7, #8]
 800e1fe:	4618      	mov	r0, r3
 800e200:	f000 fbb1 	bl	800e966 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 800e204:	eef0 7a40 	vmov.f32	s15, s0
 800e208:	eeb0 0a67 	vmov.f32	s0, s15
 800e20c:	3710      	adds	r7, #16
 800e20e:	46bd      	mov	sp, r7
 800e210:	bd80      	pop	{r7, pc}

0800e212 <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_9assign_opIffEENS0_13sub_assign_opIffEEE3runINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KS7_EES9_EEvRS3_RKT_RKT0_>:
  void run(DstXprType &dst, const SrcXprType &src, const InitialFunc& /*func*/)
 800e212:	b590      	push	{r4, r7, lr}
 800e214:	b087      	sub	sp, #28
 800e216:	af00      	add	r7, sp, #0
 800e218:	60f8      	str	r0, [r7, #12]
 800e21a:	60b9      	str	r1, [r7, #8]
 800e21c:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, src.lhs(), Func1());
 800e21e:	68b8      	ldr	r0, [r7, #8]
 800e220:	f000 fbd1 	bl	800e9c6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE3lhsEv>
 800e224:	4604      	mov	r4, r0
 800e226:	f107 0310 	add.w	r3, r7, #16
 800e22a:	4618      	mov	r0, r3
 800e22c:	f7f8 ff51 	bl	80070d2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800e230:	f107 0310 	add.w	r3, r7, #16
 800e234:	461a      	mov	r2, r3
 800e236:	4621      	mov	r1, r4
 800e238:	68f8      	ldr	r0, [r7, #12]
 800e23a:	f000 fbd0 	bl	800e9de <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
    call_assignment_no_alias(dst, src.rhs(), Func2());
 800e23e:	68b8      	ldr	r0, [r7, #8]
 800e240:	f000 fbde 	bl	800ea00 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE3rhsEv>
 800e244:	4604      	mov	r4, r0
 800e246:	f107 0314 	add.w	r3, r7, #20
 800e24a:	4618      	mov	r0, r3
 800e24c:	f7ff fbb0 	bl	800d9b0 <_ZN5Eigen8internal13sub_assign_opIffEC1Ev>
 800e250:	f107 0314 	add.w	r3, r7, #20
 800e254:	461a      	mov	r2, r3
 800e256:	4621      	mov	r1, r4
 800e258:	68f8      	ldr	r0, [r7, #12]
 800e25a:	f000 fbdd 	bl	800ea18 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800e25e:	bf00      	nop
 800e260:	371c      	adds	r7, #28
 800e262:	46bd      	mov	sp, r7
 800e264:	bd90      	pop	{r4, r7, pc}
	...

0800e268 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::sub_assign_op<Scalar,Scalar> &)
 800e268:	b590      	push	{r4, r7, lr}
 800e26a:	b085      	sub	sp, #20
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	60f8      	str	r0, [r7, #12]
 800e270:	60b9      	str	r1, [r7, #8]
 800e272:	607a      	str	r2, [r7, #4]
    eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	4618      	mov	r0, r3
 800e278:	f7f6 fefb 	bl	8005072 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800e27c:	4604      	mov	r4, r0
 800e27e:	68b8      	ldr	r0, [r7, #8]
 800e280:	f7f8 fa95 	bl	80067ae <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4rowsEv>
 800e284:	4603      	mov	r3, r0
 800e286:	429c      	cmp	r4, r3
 800e288:	d10a      	bne.n	800e2a0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x38>
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	4618      	mov	r0, r3
 800e28e:	f7f6 fee5 	bl	800505c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800e292:	4604      	mov	r4, r0
 800e294:	68b8      	ldr	r0, [r7, #8]
 800e296:	f7f8 fa98 	bl	80067ca <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4colsEv>
 800e29a:	4603      	mov	r3, r0
 800e29c:	429c      	cmp	r4, r3
 800e29e:	d005      	beq.n	800e2ac <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x44>
 800e2a0:	4b0b      	ldr	r3, [pc, #44]	; (800e2d0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x68>)
 800e2a2:	4a0c      	ldr	r2, [pc, #48]	; (800e2d4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x6c>)
 800e2a4:	21b0      	movs	r1, #176	; 0xb0
 800e2a6:	480c      	ldr	r0, [pc, #48]	; (800e2d8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x70>)
 800e2a8:	f00f fdfc 	bl	801dea4 <__assert_func>
    generic_product_impl<Lhs, Rhs>::subTo(dst, src.lhs(), src.rhs());
 800e2ac:	68b8      	ldr	r0, [r7, #8]
 800e2ae:	f000 fbc4 	bl	800ea3a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE3lhsEv>
 800e2b2:	4604      	mov	r4, r0
 800e2b4:	68b8      	ldr	r0, [r7, #8]
 800e2b6:	f000 fbcc 	bl	800ea52 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE3rhsEv>
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	461a      	mov	r2, r3
 800e2be:	4621      	mov	r1, r4
 800e2c0:	68f8      	ldr	r0, [r7, #12]
 800e2c2:	f000 fbd2 	bl	800ea6a <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEENS_10DenseShapeES5_Li3EE5subToINS2_IfLi3ELi3ELi0ELi3ELi3EEEEEvRT_RKS3_RKS4_>
  }
 800e2c6:	bf00      	nop
 800e2c8:	3714      	adds	r7, #20
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bd90      	pop	{r4, r7, pc}
 800e2ce:	bf00      	nop
 800e2d0:	08022aa0 	.word	0x08022aa0
 800e2d4:	080269a8 	.word	0x080269a8
 800e2d8:	08022f98 	.word	0x08022f98

0800e2dc <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800e2dc:	b5b0      	push	{r4, r5, r7, lr}
 800e2de:	b084      	sub	sp, #16
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	60f8      	str	r0, [r7, #12]
 800e2e4:	60b9      	str	r1, [r7, #8]
 800e2e6:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800e2e8:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800e2ea:	68bb      	ldr	r3, [r7, #8]
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	f7f9 fff9 	bl	80082e4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 800e2f2:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800e2f4:	68b8      	ldr	r0, [r7, #8]
 800e2f6:	f7fa fa2f 	bl	8008758 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 800e2fa:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	fb02 f303 	mul.w	r3, r2, r3
 800e302:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800e304:	441d      	add	r5, r3
 800e306:	68bb      	ldr	r3, [r7, #8]
 800e308:	4618      	mov	r0, r3
 800e30a:	f7f6 feb2 	bl	8005072 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800e30e:	4602      	mov	r2, r0
 800e310:	2301      	movs	r3, #1
 800e312:	4629      	mov	r1, r5
 800e314:	4620      	mov	r0, r4
 800e316:	f000 fbd3 	bl	800eac0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii>
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	68ba      	ldr	r2, [r7, #8]
 800e31e:	609a      	str	r2, [r3, #8]
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	330c      	adds	r3, #12
 800e324:	2100      	movs	r1, #0
 800e326:	4618      	mov	r0, r3
 800e328:	f7ff fcbc 	bl	800dca4 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	3310      	adds	r3, #16
 800e330:	6879      	ldr	r1, [r7, #4]
 800e332:	4618      	mov	r0, r3
 800e334:	f7ff fcb6 	bl	800dca4 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 800e338:	68f8      	ldr	r0, [r7, #12]
 800e33a:	f000 fbff 	bl	800eb3c <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE4initEv>
    }
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	4618      	mov	r0, r3
 800e342:	3710      	adds	r7, #16
 800e344:	46bd      	mov	sp, r7
 800e346:	bdb0      	pop	{r4, r5, r7, pc}

0800e348 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1ERKSG_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800e348:	b580      	push	{r7, lr}
 800e34a:	b082      	sub	sp, #8
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
 800e350:	6039      	str	r1, [r7, #0]
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	6839      	ldr	r1, [r7, #0]
 800e356:	4618      	mov	r0, r3
 800e358:	f000 fc00 	bl	800eb5c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffEC1ERKSG_>
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	4618      	mov	r0, r3
 800e360:	3708      	adds	r7, #8
 800e362:	46bd      	mov	sp, r7
 800e364:	bd80      	pop	{r7, pc}

0800e366 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi3EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800e366:	b580      	push	{r7, lr}
 800e368:	b084      	sub	sp, #16
 800e36a:	af00      	add	r7, sp, #0
 800e36c:	6078      	str	r0, [r7, #4]
 800e36e:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800e370:	6839      	ldr	r1, [r7, #0]
 800e372:	6878      	ldr	r0, [r7, #4]
 800e374:	f000 fc04 	bl	800eb80 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi1EE3runERKSK_RKS3_>
 800e378:	eef0 7a40 	vmov.f32	s15, s0
 800e37c:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800e380:	6839      	ldr	r1, [r7, #0]
 800e382:	6878      	ldr	r0, [r7, #4]
 800e384:	f000 fc0d 	bl	800eba2 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi1ELi2EE3runERKSK_RKS3_>
 800e388:	eef0 7a40 	vmov.f32	s15, s0
 800e38c:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800e390:	f107 020c 	add.w	r2, r7, #12
 800e394:	f107 0308 	add.w	r3, r7, #8
 800e398:	4619      	mov	r1, r3
 800e39a:	6838      	ldr	r0, [r7, #0]
 800e39c:	f7fa fff9 	bl	8009392 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800e3a0:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e3a4:	eeb0 0a67 	vmov.f32	s0, s15
 800e3a8:	3710      	adds	r7, #16
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	bd80      	pop	{r7, pc}

0800e3ae <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800e3ae:	b580      	push	{r7, lr}
 800e3b0:	b082      	sub	sp, #8
 800e3b2:	af00      	add	r7, sp, #0
 800e3b4:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800e3b6:	2201      	movs	r2, #1
 800e3b8:	2102      	movs	r1, #2
 800e3ba:	6878      	ldr	r0, [r7, #4]
 800e3bc:	f7fc fa4c 	bl	800a858 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800e3c0:	6878      	ldr	r0, [r7, #4]
 800e3c2:	f000 fc12 	bl	800ebea <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSL_>
  }
 800e3c6:	bf00      	nop
 800e3c8:	3708      	adds	r7, #8
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd80      	pop	{r7, pc}

0800e3ce <_ZN5Eigen9DenseBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800e3ce:	b480      	push	{r7}
 800e3d0:	b083      	sub	sp, #12
 800e3d2:	af00      	add	r7, sp, #0
 800e3d4:	6078      	str	r0, [r7, #4]
    }
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	4618      	mov	r0, r3
 800e3da:	370c      	adds	r7, #12
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e2:	4770      	bx	lr

0800e3e4 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE4dataEv>:
    const Scalar* data() const { return derived().nestedExpression().data(); }
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b082      	sub	sp, #8
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
 800e3ec:	6878      	ldr	r0, [r7, #4]
 800e3ee:	f7f7 f9b5 	bl	800575c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	f7fc fd77 	bl	800aee8 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	f7f8 ff10 	bl	8007222 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>
 800e402:	4603      	mov	r3, r0
 800e404:	4618      	mov	r0, r3
 800e406:	3708      	adds	r7, #8
 800e408:	46bd      	mov	sp, r7
 800e40a:	bd80      	pop	{r7, pc}

0800e40c <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11innerStrideEv>:
    Index innerStride() const { return derived().nestedExpression().innerStride(); }
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b082      	sub	sp, #8
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
 800e414:	6878      	ldr	r0, [r7, #4]
 800e416:	f7f7 f9a1 	bl	800575c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800e41a:	4603      	mov	r3, r0
 800e41c:	4618      	mov	r0, r3
 800e41e:	f7fc fd63 	bl	800aee8 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>
 800e422:	4603      	mov	r3, r0
 800e424:	4618      	mov	r0, r3
 800e426:	f7ff fc5c 	bl	800dce2 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>
 800e42a:	4603      	mov	r3, r0
 800e42c:	4618      	mov	r0, r3
 800e42e:	3708      	adds	r7, #8
 800e430:	46bd      	mov	sp, r7
 800e432:	bd80      	pop	{r7, pc}

0800e434 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11outerStrideEv>:
    Index outerStride() const { return derived().nestedExpression().outerStride(); }
 800e434:	b580      	push	{r7, lr}
 800e436:	b082      	sub	sp, #8
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
 800e43c:	6878      	ldr	r0, [r7, #4]
 800e43e:	f7f7 f98d 	bl	800575c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800e442:	4603      	mov	r3, r0
 800e444:	4618      	mov	r0, r3
 800e446:	f7fc fd4f 	bl	800aee8 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>
 800e44a:	4603      	mov	r3, r0
 800e44c:	4618      	mov	r0, r3
 800e44e:	f7f8 ffb9 	bl	80073c4 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 800e452:	4603      	mov	r3, r0
 800e454:	4618      	mov	r0, r3
 800e456:	3708      	adds	r7, #8
 800e458:	46bd      	mov	sp, r7
 800e45a:	bd80      	pop	{r7, pc}

0800e45c <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>:
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b082      	sub	sp, #8
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
 800e464:	6878      	ldr	r0, [r7, #4]
 800e466:	f000 fbd0 	bl	800ec0a <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	4618      	mov	r0, r3
 800e46e:	3708      	adds	r7, #8
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}

0800e474 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800e474:	b580      	push	{r7, lr}
 800e476:	b084      	sub	sp, #16
 800e478:	af00      	add	r7, sp, #0
 800e47a:	60f8      	str	r0, [r7, #12]
 800e47c:	60b9      	str	r1, [r7, #8]
 800e47e:	607a      	str	r2, [r7, #4]
 800e480:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800e482:	68f8      	ldr	r0, [r7, #12]
 800e484:	f7ff ffea 	bl	800e45c <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	68ba      	ldr	r2, [r7, #8]
 800e48c:	601a      	str	r2, [r3, #0]
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	3304      	adds	r3, #4
 800e492:	6879      	ldr	r1, [r7, #4]
 800e494:	4618      	mov	r0, r3
 800e496:	f7f8 fb91 	bl	8006bbc <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	3305      	adds	r3, #5
 800e49e:	6839      	ldr	r1, [r7, #0]
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	f7f8 fb8b 	bl	8006bbc <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800e4a6:	68bb      	ldr	r3, [r7, #8]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d011      	beq.n	800e4d0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	db08      	blt.n	800e4c4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	2b01      	cmp	r3, #1
 800e4b6:	d105      	bne.n	800e4c4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800e4b8:	683b      	ldr	r3, [r7, #0]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	db02      	blt.n	800e4c4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800e4be:	683b      	ldr	r3, [r7, #0]
 800e4c0:	2b01      	cmp	r3, #1
 800e4c2:	d005      	beq.n	800e4d0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 800e4c4:	4b07      	ldr	r3, [pc, #28]	; (800e4e4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x70>)
 800e4c6:	4a08      	ldr	r2, [pc, #32]	; (800e4e8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x74>)
 800e4c8:	21b0      	movs	r1, #176	; 0xb0
 800e4ca:	4808      	ldr	r0, [pc, #32]	; (800e4ec <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x78>)
 800e4cc:	f00f fcea 	bl	801dea4 <__assert_func>
      checkSanity<Derived>();
 800e4d0:	2100      	movs	r1, #0
 800e4d2:	68f8      	ldr	r0, [r7, #12]
 800e4d4:	f000 fba4 	bl	800ec20 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	4618      	mov	r0, r3
 800e4dc:	3710      	adds	r7, #16
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	bd80      	pop	{r7, pc}
 800e4e2:	bf00      	nop
 800e4e4:	08026430 	.word	0x08026430
 800e4e8:	08026d24 	.word	0x08026d24
 800e4ec:	080265e0 	.word	0x080265e0

0800e4f0 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE4initEv>:
    void init()
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b082      	sub	sp, #8
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	3308      	adds	r3, #8
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f7ff ff99 	bl	800e434 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11outerStrideEv>
 800e502:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	615a      	str	r2, [r3, #20]
    }
 800e508:	bf00      	nop
 800e50a:	3708      	adds	r7, #8
 800e50c:	46bd      	mov	sp, r7
 800e50e:	bd80      	pop	{r7, pc}

0800e510 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffEC1ERKSP_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800e510:	b580      	push	{r7, lr}
 800e512:	b082      	sub	sp, #8
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
 800e518:	6039      	str	r1, [r7, #0]
 800e51a:	6878      	ldr	r0, [r7, #4]
 800e51c:	f000 fb8b 	bl	800ec36 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	6839      	ldr	r1, [r7, #0]
 800e524:	4618      	mov	r0, r3
 800e526:	f000 fb91 	bl	800ec4c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4DataC1ERKSP_>
  }
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	4618      	mov	r0, r3
 800e52e:	3708      	adds	r7, #8
 800e530:	46bd      	mov	sp, r7
 800e532:	bd80      	pop	{r7, pc}

0800e534 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 800e534:	b580      	push	{r7, lr}
 800e536:	b084      	sub	sp, #16
 800e538:	af00      	add	r7, sp, #0
 800e53a:	60f8      	str	r0, [r7, #12]
 800e53c:	60b9      	str	r1, [r7, #8]
 800e53e:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	687a      	ldr	r2, [r7, #4]
 800e544:	68b9      	ldr	r1, [r7, #8]
 800e546:	4618      	mov	r0, r3
 800e548:	f000 fba8 	bl	800ec9c <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE5coeffEii>
 800e54c:	eef0 7a40 	vmov.f32	s15, s0
 800e550:	eeb0 0a67 	vmov.f32	s0, s15
 800e554:	3710      	adds	r7, #16
 800e556:	46bd      	mov	sp, r7
 800e558:	bd80      	pop	{r7, pc}

0800e55a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800e55a:	b580      	push	{r7, lr}
 800e55c:	b082      	sub	sp, #8
 800e55e:	af00      	add	r7, sp, #0
 800e560:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800e562:	2202      	movs	r2, #2
 800e564:	2102      	movs	r1, #2
 800e566:	6878      	ldr	r0, [r7, #4]
 800e568:	f7fb feaf 	bl	800a2ca <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800e56c:	6878      	ldr	r0, [r7, #4]
 800e56e:	f000 fbc5 	bl	800ecfc <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSP_>
  }
 800e572:	bf00      	nop
 800e574:	3708      	adds	r7, #8
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}

0800e57a <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800e57a:	b480      	push	{r7}
 800e57c:	b083      	sub	sp, #12
 800e57e:	af00      	add	r7, sp, #0
 800e580:	6078      	str	r0, [r7, #4]
    }
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	4618      	mov	r0, r3
 800e586:	370c      	adds	r7, #12
 800e588:	46bd      	mov	sp, r7
 800e58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58e:	4770      	bx	lr

0800e590 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
#endif
    }

    template<typename T>
    EIGEN_DEVICE_FUNC
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800e590:	b480      	push	{r7}
 800e592:	b083      	sub	sp, #12
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
 800e598:	6039      	str	r1, [r7, #0]
    {}
 800e59a:	bf00      	nop
 800e59c:	370c      	adds	r7, #12
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a4:	4770      	bx	lr

0800e5a6 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800e5a6:	b480      	push	{r7}
 800e5a8:	b083      	sub	sp, #12
 800e5aa:	af00      	add	r7, sp, #0
 800e5ac:	6078      	str	r0, [r7, #4]
    }
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	370c      	adds	r7, #12
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ba:	4770      	bx	lr

0800e5bc <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800e5bc:	b480      	push	{r7}
 800e5be:	b083      	sub	sp, #12
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
 800e5c4:	6039      	str	r1, [r7, #0]
    {}
 800e5c6:	bf00      	nop
 800e5c8:	370c      	adds	r7, #12
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d0:	4770      	bx	lr

0800e5d2 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800e5d2:	b480      	push	{r7}
 800e5d4:	b083      	sub	sp, #12
 800e5d6:	af00      	add	r7, sp, #0
 800e5d8:	6078      	str	r0, [r7, #4]
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	4618      	mov	r0, r3
 800e5de:	370c      	adds	r7, #12
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e6:	4770      	bx	lr

0800e5e8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800e5e8:	b590      	push	{r4, r7, lr}
 800e5ea:	b083      	sub	sp, #12
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
 800e5f0:	6039      	str	r1, [r7, #0]
 800e5f2:	687c      	ldr	r4, [r7, #4]
 800e5f4:	6838      	ldr	r0, [r7, #0]
 800e5f6:	f000 fb8b 	bl	800ed10 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE7functorEv>
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	4619      	mov	r1, r3
 800e5fe:	4620      	mov	r0, r4
 800e600:	f7f7 f862 	bl	80056c8 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	1d1c      	adds	r4, r3, #4
 800e608:	6838      	ldr	r0, [r7, #0]
 800e60a:	f000 fb8d 	bl	800ed28 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE3lhsEv>
 800e60e:	4603      	mov	r3, r0
 800e610:	4619      	mov	r1, r3
 800e612:	4620      	mov	r0, r4
 800e614:	f000 fb9f 	bl	800ed56 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	f103 040c 	add.w	r4, r3, #12
 800e61e:	6838      	ldr	r0, [r7, #0]
 800e620:	f000 fb8d 	bl	800ed3e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE3rhsEv>
 800e624:	4603      	mov	r3, r0
 800e626:	4619      	mov	r1, r3
 800e628:	4620      	mov	r0, r4
 800e62a:	f000 fba3 	bl	800ed74 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERS7_>
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	4618      	mov	r0, r3
 800e632:	370c      	adds	r7, #12
 800e634:	46bd      	mov	sp, r7
 800e636:	bd90      	pop	{r4, r7, pc}

0800e638 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 800e638:	b580      	push	{r7, lr}
 800e63a:	b084      	sub	sp, #16
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	60f8      	str	r0, [r7, #12]
 800e640:	60b9      	str	r1, [r7, #8]
 800e642:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	68ba      	ldr	r2, [r7, #8]
 800e648:	6879      	ldr	r1, [r7, #4]
 800e64a:	4618      	mov	r0, r3
 800e64c:	f000 fba1 	bl	800ed92 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 800e650:	eef0 7a40 	vmov.f32	s15, s0
 800e654:	eeb0 0a67 	vmov.f32	s0, s15
 800e658:	3710      	adds	r7, #16
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}

0800e65e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800e65e:	b580      	push	{r7, lr}
 800e660:	b082      	sub	sp, #8
 800e662:	af00      	add	r7, sp, #0
 800e664:	6078      	str	r0, [r7, #4]
 800e666:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800e668:	2201      	movs	r2, #1
 800e66a:	2100      	movs	r1, #0
 800e66c:	6878      	ldr	r0, [r7, #4]
 800e66e:	f7ff ffe3 	bl	800e638 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800e672:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e676:	eeb0 0a67 	vmov.f32	s0, s15
 800e67a:	3708      	adds	r7, #8
 800e67c:	46bd      	mov	sp, r7
 800e67e:	bd80      	pop	{r7, pc}

0800e680 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800e680:	b580      	push	{r7, lr}
 800e682:	b082      	sub	sp, #8
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
 800e688:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800e68a:	2202      	movs	r2, #2
 800e68c:	2100      	movs	r1, #0
 800e68e:	6878      	ldr	r0, [r7, #4]
 800e690:	f7ff ffd2 	bl	800e638 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800e694:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e698:	eeb0 0a67 	vmov.f32	s0, s15
 800e69c:	3708      	adds	r7, #8
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bd80      	pop	{r7, pc}

0800e6a2 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800e6a2:	b580      	push	{r7, lr}
 800e6a4:	b086      	sub	sp, #24
 800e6a6:	af00      	add	r7, sp, #0
 800e6a8:	60f8      	str	r0, [r7, #12]
 800e6aa:	60b9      	str	r1, [r7, #8]
 800e6ac:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800e6b2:	687a      	ldr	r2, [r7, #4]
 800e6b4:	68b9      	ldr	r1, [r7, #8]
 800e6b6:	6978      	ldr	r0, [r7, #20]
 800e6b8:	f000 fb9b 	bl	800edf2 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_>
}
 800e6bc:	bf00      	nop
 800e6be:	3718      	adds	r7, #24
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	bd80      	pop	{r7, pc}

0800e6c4 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE3colEi>:
ConstColXpr col(Index i) const
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b084      	sub	sp, #16
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	60f8      	str	r0, [r7, #12]
 800e6cc:	60b9      	str	r1, [r7, #8]
 800e6ce:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800e6d0:	68b8      	ldr	r0, [r7, #8]
 800e6d2:	f7f7 f9df 	bl	8005a94 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 800e6d6:	4603      	mov	r3, r0
 800e6d8:	687a      	ldr	r2, [r7, #4]
 800e6da:	4619      	mov	r1, r3
 800e6dc:	68f8      	ldr	r0, [r7, #12]
 800e6de:	f000 fbc3 	bl	800ee68 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i>
}
 800e6e2:	68f8      	ldr	r0, [r7, #12]
 800e6e4:	3710      	adds	r7, #16
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	bd80      	pop	{r7, pc}

0800e6ea <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS1_IS4_EELi3ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800e6ea:	b5b0      	push	{r4, r5, r7, lr}
 800e6ec:	b086      	sub	sp, #24
 800e6ee:	af00      	add	r7, sp, #0
 800e6f0:	60f8      	str	r0, [r7, #12]
 800e6f2:	60b9      	str	r1, [r7, #8]
 800e6f4:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800e6f6:	68b8      	ldr	r0, [r7, #8]
 800e6f8:	f7fd f924 	bl	800b944 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>
 800e6fc:	4604      	mov	r4, r0
 800e6fe:	6878      	ldr	r0, [r7, #4]
 800e700:	f000 fbda 	bl	800eeb8 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEE7derivedEv>
 800e704:	4605      	mov	r5, r0
 800e706:	f107 0314 	add.w	r3, r7, #20
 800e70a:	4618      	mov	r0, r3
 800e70c:	f7f6 ff52 	bl	80055b4 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800e710:	f107 0314 	add.w	r3, r7, #20
 800e714:	462a      	mov	r2, r5
 800e716:	4621      	mov	r1, r4
 800e718:	68f8      	ldr	r0, [r7, #12]
 800e71a:	f000 fc07 	bl	800ef2c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_>
}
 800e71e:	68f8      	ldr	r0, [r7, #12]
 800e720:	3718      	adds	r7, #24
 800e722:	46bd      	mov	sp, r7
 800e724:	bdb0      	pop	{r4, r5, r7, pc}

0800e726 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800e726:	b580      	push	{r7, lr}
 800e728:	b082      	sub	sp, #8
 800e72a:	af00      	add	r7, sp, #0
 800e72c:	6078      	str	r0, [r7, #4]
 800e72e:	6878      	ldr	r0, [r7, #4]
 800e730:	f000 fc5a 	bl	800efe8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800e734:	4603      	mov	r3, r0
 800e736:	4618      	mov	r0, r3
 800e738:	f000 fc61 	bl	800effe <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE4rowsEv>
 800e73c:	4603      	mov	r3, r0
 800e73e:	4618      	mov	r0, r3
 800e740:	3708      	adds	r7, #8
 800e742:	46bd      	mov	sp, r7
 800e744:	bd80      	pop	{r7, pc}

0800e746 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 800e746:	b590      	push	{r4, r7, lr}
 800e748:	b085      	sub	sp, #20
 800e74a:	af00      	add	r7, sp, #0
 800e74c:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800e74e:	6878      	ldr	r0, [r7, #4]
 800e750:	f000 fc4a 	bl	800efe8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800e754:	4604      	mov	r4, r0
 800e756:	f107 030c 	add.w	r3, r7, #12
 800e75a:	4618      	mov	r0, r3
 800e75c:	f7f7 fa21 	bl	8005ba2 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800e760:	f107 030c 	add.w	r3, r7, #12
 800e764:	4619      	mov	r1, r3
 800e766:	4620      	mov	r0, r4
 800e768:	f000 fcc6 	bl	800f0f8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800e76c:	eef0 7a40 	vmov.f32	s15, s0
 800e770:	bf00      	nop
}
 800e772:	eeb0 0a67 	vmov.f32	s0, s15
 800e776:	3714      	adds	r7, #20
 800e778:	46bd      	mov	sp, r7
 800e77a:	bd90      	pop	{r4, r7, pc}

0800e77c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800e77c:	b580      	push	{r7, lr}
 800e77e:	b082      	sub	sp, #8
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800e784:	2201      	movs	r2, #1
 800e786:	2101      	movs	r1, #1
 800e788:	6878      	ldr	r0, [r7, #4]
 800e78a:	f7fe fa54 	bl	800cc36 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800e78e:	6878      	ldr	r0, [r7, #4]
 800e790:	f000 fcf8 	bl	800f184 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSG_>
  }
 800e794:	bf00      	nop
 800e796:	3708      	adds	r7, #8
 800e798:	46bd      	mov	sp, r7
 800e79a:	bd80      	pop	{r7, pc}

0800e79c <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>:
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b082      	sub	sp, #8
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
 800e7a4:	6878      	ldr	r0, [r7, #4]
 800e7a6:	f000 fcfd 	bl	800f1a4 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	3708      	adds	r7, #8
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	bd80      	pop	{r7, pc}

0800e7b4 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1ELi3EEC1Ev>:
class dense_product_base
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b082      	sub	sp, #8
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
 800e7bc:	6878      	ldr	r0, [r7, #4]
 800e7be:	f7ff ffed 	bl	800e79c <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	3708      	adds	r7, #8
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	bd80      	pop	{r7, pc}

0800e7cc <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b082      	sub	sp, #8
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]
 800e7d4:	6878      	ldr	r0, [r7, #4]
 800e7d6:	f7ff ffed 	bl	800e7b4 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1ELi3EEC1Ev>
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	4618      	mov	r0, r3
 800e7de:	3708      	adds	r7, #8
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	bd80      	pop	{r7, pc}

0800e7e4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 800e7e4:	b590      	push	{r4, r7, lr}
 800e7e6:	b085      	sub	sp, #20
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	60f8      	str	r0, [r7, #12]
 800e7ec:	60b9      	str	r1, [r7, #8]
 800e7ee:	607a      	str	r2, [r7, #4]
 800e7f0:	68f8      	ldr	r0, [r7, #12]
 800e7f2:	f7ff ffeb 	bl	800e7cc <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1ENS_5DenseEEC1Ev>
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	68ba      	ldr	r2, [r7, #8]
 800e7fa:	601a      	str	r2, [r3, #0]
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	3304      	adds	r3, #4
 800e800:	687a      	ldr	r2, [r7, #4]
 800e802:	6812      	ldr	r2, [r2, #0]
 800e804:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 800e806:	68bb      	ldr	r3, [r7, #8]
 800e808:	4618      	mov	r0, r3
 800e80a:	f7f6 fc27 	bl	800505c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800e80e:	4604      	mov	r4, r0
 800e810:	6878      	ldr	r0, [r7, #4]
 800e812:	f7f7 facc 	bl	8005dae <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 800e816:	4603      	mov	r3, r0
 800e818:	429c      	cmp	r4, r3
 800e81a:	d005      	beq.n	800e828 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_+0x44>
 800e81c:	4b05      	ldr	r3, [pc, #20]	; (800e834 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_+0x50>)
 800e81e:	4a06      	ldr	r2, [pc, #24]	; (800e838 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_+0x54>)
 800e820:	2160      	movs	r1, #96	; 0x60
 800e822:	4806      	ldr	r0, [pc, #24]	; (800e83c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_+0x58>)
 800e824:	f00f fb3e 	bl	801dea4 <__assert_func>
 800e828:	bf00      	nop
    }
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	4618      	mov	r0, r3
 800e82e:	3714      	adds	r7, #20
 800e830:	46bd      	mov	sp, r7
 800e832:	bd90      	pop	{r4, r7, pc}
 800e834:	0801ffcc 	.word	0x0801ffcc
 800e838:	08026e3c 	.word	0x08026e3c
 800e83c:	0802031c 	.word	0x0802031c

0800e840 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800e840:	b580      	push	{r7, lr}
 800e842:	b084      	sub	sp, #16
 800e844:	af00      	add	r7, sp, #0
 800e846:	60f8      	str	r0, [r7, #12]
 800e848:	60b9      	str	r1, [r7, #8]
 800e84a:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800e84c:	68b9      	ldr	r1, [r7, #8]
 800e84e:	68f8      	ldr	r0, [r7, #12]
 800e850:	f000 fcb3 	bl	800f1ba <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800e854:	687a      	ldr	r2, [r7, #4]
 800e856:	68b9      	ldr	r1, [r7, #8]
 800e858:	68f8      	ldr	r0, [r7, #12]
 800e85a:	f000 fd12 	bl	800f282 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800e85e:	bf00      	nop
 800e860:	3710      	adds	r7, #16
 800e862:	46bd      	mov	sp, r7
 800e864:	bd80      	pop	{r7, pc}

0800e866 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS2_EEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800e866:	b5b0      	push	{r4, r5, r7, lr}
 800e868:	b084      	sub	sp, #16
 800e86a:	af00      	add	r7, sp, #0
 800e86c:	6078      	str	r0, [r7, #4]
 800e86e:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800e870:	6878      	ldr	r0, [r7, #4]
 800e872:	f7fd fab8 	bl	800bde6 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800e876:	4604      	mov	r4, r0
 800e878:	6838      	ldr	r0, [r7, #0]
 800e87a:	f7f7 fc41 	bl	8006100 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>
 800e87e:	4605      	mov	r5, r0
 800e880:	f107 030c 	add.w	r3, r7, #12
 800e884:	4618      	mov	r0, r3
 800e886:	f7f8 fc24 	bl	80070d2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800e88a:	f107 030c 	add.w	r3, r7, #12
 800e88e:	461a      	mov	r2, r3
 800e890:	4629      	mov	r1, r5
 800e892:	4620      	mov	r0, r4
 800e894:	f000 fd2d 	bl	800f2f2 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800e898:	6878      	ldr	r0, [r7, #4]
 800e89a:	f7fd faa4 	bl	800bde6 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800e89e:	4603      	mov	r3, r0
    }
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	3710      	adds	r7, #16
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bdb0      	pop	{r4, r5, r7, pc}

0800e8a8 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800e8a8:	b480      	push	{r7}
 800e8aa:	b083      	sub	sp, #12
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
    }
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	370c      	adds	r7, #12
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8bc:	4770      	bx	lr

0800e8be <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800e8be:	b480      	push	{r7}
 800e8c0:	b083      	sub	sp, #12
 800e8c2:	af00      	add	r7, sp, #0
 800e8c4:	6078      	str	r0, [r7, #4]
 800e8c6:	6039      	str	r1, [r7, #0]
    {}
 800e8c8:	bf00      	nop
 800e8ca:	370c      	adds	r7, #12
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d2:	4770      	bx	lr

0800e8d4 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800e8d4:	b480      	push	{r7}
 800e8d6:	b083      	sub	sp, #12
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
    }
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	4618      	mov	r0, r3
 800e8e0:	370c      	adds	r7, #12
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e8:	4770      	bx	lr

0800e8ea <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800e8ea:	b480      	push	{r7}
 800e8ec:	b083      	sub	sp, #12
 800e8ee:	af00      	add	r7, sp, #0
 800e8f0:	6078      	str	r0, [r7, #4]
 800e8f2:	6039      	str	r1, [r7, #0]
    {}
 800e8f4:	bf00      	nop
 800e8f6:	370c      	adds	r7, #12
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fe:	4770      	bx	lr

0800e900 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800e900:	b480      	push	{r7}
 800e902:	b083      	sub	sp, #12
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	4618      	mov	r0, r3
 800e90c:	370c      	adds	r7, #12
 800e90e:	46bd      	mov	sp, r7
 800e910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e914:	4770      	bx	lr

0800e916 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800e916:	b590      	push	{r4, r7, lr}
 800e918:	b083      	sub	sp, #12
 800e91a:	af00      	add	r7, sp, #0
 800e91c:	6078      	str	r0, [r7, #4]
 800e91e:	6039      	str	r1, [r7, #0]
 800e920:	687c      	ldr	r4, [r7, #4]
 800e922:	6838      	ldr	r0, [r7, #0]
 800e924:	f000 fcf6 	bl	800f314 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE7functorEv>
 800e928:	4603      	mov	r3, r0
 800e92a:	4619      	mov	r1, r3
 800e92c:	4620      	mov	r0, r4
 800e92e:	f7f6 fecb 	bl	80056c8 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	1d1c      	adds	r4, r3, #4
 800e936:	6838      	ldr	r0, [r7, #0]
 800e938:	f000 fcf8 	bl	800f32c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE3lhsEv>
 800e93c:	4603      	mov	r3, r0
 800e93e:	4619      	mov	r1, r3
 800e940:	4620      	mov	r0, r4
 800e942:	f000 fd0a 	bl	800f35a <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERSA_>
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	f103 040c 	add.w	r4, r3, #12
 800e94c:	6838      	ldr	r0, [r7, #0]
 800e94e:	f000 fcf8 	bl	800f342 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE3rhsEv>
 800e952:	4603      	mov	r3, r0
 800e954:	4619      	mov	r1, r3
 800e956:	4620      	mov	r0, r4
 800e958:	f000 fd0e 	bl	800f378 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERS7_>
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	4618      	mov	r0, r3
 800e960:	370c      	adds	r7, #12
 800e962:	46bd      	mov	sp, r7
 800e964:	bd90      	pop	{r4, r7, pc}

0800e966 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800e966:	b590      	push	{r4, r7, lr}
 800e968:	b087      	sub	sp, #28
 800e96a:	af00      	add	r7, sp, #0
 800e96c:	60f8      	str	r0, [r7, #12]
 800e96e:	60b9      	str	r1, [r7, #8]
 800e970:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	4618      	mov	r0, r3
 800e976:	f000 fd0e 	bl	800f396 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 800e97a:	4604      	mov	r4, r0
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	3304      	adds	r3, #4
 800e980:	687a      	ldr	r2, [r7, #4]
 800e982:	68b9      	ldr	r1, [r7, #8]
 800e984:	4618      	mov	r0, r3
 800e986:	f000 fd11 	bl	800f3ac <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 800e98a:	eef0 7a40 	vmov.f32	s15, s0
 800e98e:	edc7 7a04 	vstr	s15, [r7, #16]
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	330c      	adds	r3, #12
 800e996:	687a      	ldr	r2, [r7, #4]
 800e998:	68b9      	ldr	r1, [r7, #8]
 800e99a:	4618      	mov	r0, r3
 800e99c:	f000 fd19 	bl	800f3d2 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E5coeffEii>
 800e9a0:	eef0 7a40 	vmov.f32	s15, s0
 800e9a4:	edc7 7a05 	vstr	s15, [r7, #20]
 800e9a8:	f107 0214 	add.w	r2, r7, #20
 800e9ac:	f107 0310 	add.w	r3, r7, #16
 800e9b0:	4619      	mov	r1, r3
 800e9b2:	4620      	mov	r0, r4
 800e9b4:	f000 fd2e 	bl	800f414 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 800e9b8:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e9bc:	eeb0 0a67 	vmov.f32	s0, s15
 800e9c0:	371c      	adds	r7, #28
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	bd90      	pop	{r4, r7, pc}

0800e9c6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800e9c6:	b480      	push	{r7}
 800e9c8:	b083      	sub	sp, #12
 800e9ca:	af00      	add	r7, sp, #0
 800e9cc:	6078      	str	r0, [r7, #4]
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	370c      	adds	r7, #12
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9dc:	4770      	bx	lr

0800e9de <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800e9de:	b580      	push	{r7, lr}
 800e9e0:	b086      	sub	sp, #24
 800e9e2:	af00      	add	r7, sp, #0
 800e9e4:	60f8      	str	r0, [r7, #12]
 800e9e6:	60b9      	str	r1, [r7, #8]
 800e9e8:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800e9ee:	687a      	ldr	r2, [r7, #4]
 800e9f0:	68b9      	ldr	r1, [r7, #8]
 800e9f2:	6978      	ldr	r0, [r7, #20]
 800e9f4:	f000 fd23 	bl	800f43e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>
}
 800e9f8:	bf00      	nop
 800e9fa:	3718      	adds	r7, #24
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	bd80      	pop	{r7, pc}

0800ea00 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800ea00:	b480      	push	{r7}
 800ea02:	b083      	sub	sp, #12
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	3304      	adds	r3, #4
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	370c      	adds	r7, #12
 800ea10:	46bd      	mov	sp, r7
 800ea12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea16:	4770      	bx	lr

0800ea18 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b086      	sub	sp, #24
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	60f8      	str	r0, [r7, #12]
 800ea20:	60b9      	str	r1, [r7, #8]
 800ea22:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800ea28:	687a      	ldr	r2, [r7, #4]
 800ea2a:	68b9      	ldr	r1, [r7, #8]
 800ea2c:	6978      	ldr	r0, [r7, #20]
 800ea2e:	f000 fd19 	bl	800f464 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>
}
 800ea32:	bf00      	nop
 800ea34:	3718      	adds	r7, #24
 800ea36:	46bd      	mov	sp, r7
 800ea38:	bd80      	pop	{r7, pc}

0800ea3a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800ea3a:	b480      	push	{r7}
 800ea3c:	b083      	sub	sp, #12
 800ea3e:	af00      	add	r7, sp, #0
 800ea40:	6078      	str	r0, [r7, #4]
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	4618      	mov	r0, r3
 800ea48:	370c      	adds	r7, #12
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea50:	4770      	bx	lr

0800ea52 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800ea52:	b480      	push	{r7}
 800ea54:	b083      	sub	sp, #12
 800ea56:	af00      	add	r7, sp, #0
 800ea58:	6078      	str	r0, [r7, #4]
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	685b      	ldr	r3, [r3, #4]
 800ea5e:	4618      	mov	r0, r3
 800ea60:	370c      	adds	r7, #12
 800ea62:	46bd      	mov	sp, r7
 800ea64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea68:	4770      	bx	lr

0800ea6a <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEENS_10DenseShapeES5_Li3EE5subToINS2_IfLi3ELi3ELi0ELi3ELi3EEEEEvRT_RKS3_RKS4_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void subTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800ea6a:	b580      	push	{r7, lr}
 800ea6c:	b088      	sub	sp, #32
 800ea6e:	af00      	add	r7, sp, #0
 800ea70:	60f8      	str	r0, [r7, #12]
 800ea72:	60b9      	str	r1, [r7, #8]
 800ea74:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::sub_assign_op<typename Dst::Scalar,Scalar>());
 800ea76:	f107 0314 	add.w	r3, r7, #20
 800ea7a:	687a      	ldr	r2, [r7, #4]
 800ea7c:	68b9      	ldr	r1, [r7, #8]
 800ea7e:	4618      	mov	r0, r3
 800ea80:	f000 fd2a 	bl	800f4d8 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE11lazyProductINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>
 800ea84:	f107 031c 	add.w	r3, r7, #28
 800ea88:	4618      	mov	r0, r3
 800ea8a:	f7fe ff91 	bl	800d9b0 <_ZN5Eigen8internal13sub_assign_opIffEC1Ev>
 800ea8e:	f107 021c 	add.w	r2, r7, #28
 800ea92:	f107 0314 	add.w	r3, r7, #20
 800ea96:	4619      	mov	r1, r3
 800ea98:	68f8      	ldr	r0, [r7, #12]
 800ea9a:	f000 fd34 	bl	800f506 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800ea9e:	bf00      	nop
 800eaa0:	3720      	adds	r7, #32
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	bd80      	pop	{r7, pc}

0800eaa6 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>:
 800eaa6:	b580      	push	{r7, lr}
 800eaa8:	b082      	sub	sp, #8
 800eaaa:	af00      	add	r7, sp, #0
 800eaac:	6078      	str	r0, [r7, #4]
 800eaae:	6878      	ldr	r0, [r7, #4]
 800eab0:	f000 fd3a 	bl	800f528 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	4618      	mov	r0, r3
 800eab8:	3708      	adds	r7, #8
 800eaba:	46bd      	mov	sp, r7
 800eabc:	bd80      	pop	{r7, pc}
	...

0800eac0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b084      	sub	sp, #16
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	60f8      	str	r0, [r7, #12]
 800eac8:	60b9      	str	r1, [r7, #8]
 800eaca:	607a      	str	r2, [r7, #4]
 800eacc:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800eace:	68f8      	ldr	r0, [r7, #12]
 800ead0:	f7ff ffe9 	bl	800eaa6 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	68ba      	ldr	r2, [r7, #8]
 800ead8:	601a      	str	r2, [r3, #0]
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	3304      	adds	r3, #4
 800eade:	6879      	ldr	r1, [r7, #4]
 800eae0:	4618      	mov	r0, r3
 800eae2:	f7f8 f851 	bl	8006b88 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	3305      	adds	r3, #5
 800eaea:	6839      	ldr	r1, [r7, #0]
 800eaec:	4618      	mov	r0, r3
 800eaee:	f7f8 f865 	bl	8006bbc <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800eaf2:	68bb      	ldr	r3, [r7, #8]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d011      	beq.n	800eb1c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	db08      	blt.n	800eb10 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	2b03      	cmp	r3, #3
 800eb02:	d105      	bne.n	800eb10 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800eb04:	683b      	ldr	r3, [r7, #0]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	db02      	blt.n	800eb10 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800eb0a:	683b      	ldr	r3, [r7, #0]
 800eb0c:	2b01      	cmp	r3, #1
 800eb0e:	d005      	beq.n	800eb1c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800eb10:	4b07      	ldr	r3, [pc, #28]	; (800eb30 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x70>)
 800eb12:	4a08      	ldr	r2, [pc, #32]	; (800eb34 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x74>)
 800eb14:	21b0      	movs	r1, #176	; 0xb0
 800eb16:	4808      	ldr	r0, [pc, #32]	; (800eb38 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x78>)
 800eb18:	f00f f9c4 	bl	801dea4 <__assert_func>
      checkSanity<Derived>();
 800eb1c:	2100      	movs	r1, #0
 800eb1e:	68f8      	ldr	r0, [r7, #12]
 800eb20:	f000 fd0d 	bl	800f53e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	4618      	mov	r0, r3
 800eb28:	3710      	adds	r7, #16
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	bd80      	pop	{r7, pc}
 800eb2e:	bf00      	nop
 800eb30:	08026430 	.word	0x08026430
 800eb34:	08026f88 	.word	0x08026f88
 800eb38:	080265e0 	.word	0x080265e0

0800eb3c <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE4initEv>:
    void init()
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b082      	sub	sp, #8
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	689b      	ldr	r3, [r3, #8]
 800eb48:	4618      	mov	r0, r3
 800eb4a:	f7f9 fe05 	bl	8008758 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 800eb4e:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	615a      	str	r2, [r3, #20]
    }
 800eb54:	bf00      	nop
 800eb56:	3708      	adds	r7, #8
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	bd80      	pop	{r7, pc}

0800eb5c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffEC1ERKSG_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b082      	sub	sp, #8
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
 800eb64:	6039      	str	r1, [r7, #0]
 800eb66:	6878      	ldr	r0, [r7, #4]
 800eb68:	f000 fcf4 	bl	800f554 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	6839      	ldr	r1, [r7, #0]
 800eb70:	4618      	mov	r0, r3
 800eb72:	f000 fcfa 	bl	800f56a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>
  }
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	4618      	mov	r0, r3
 800eb7a:	3708      	adds	r7, #8
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	bd80      	pop	{r7, pc}

0800eb80 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b082      	sub	sp, #8
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	6078      	str	r0, [r7, #4]
 800eb88:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	2100      	movs	r1, #0
 800eb8e:	6878      	ldr	r0, [r7, #4]
 800eb90:	f000 fd13 	bl	800f5ba <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800eb94:	eef0 7a40 	vmov.f32	s15, s0
  }
 800eb98:	eeb0 0a67 	vmov.f32	s0, s15
 800eb9c:	3708      	adds	r7, #8
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	bd80      	pop	{r7, pc}

0800eba2 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi1ELi2EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800eba2:	b580      	push	{r7, lr}
 800eba4:	b084      	sub	sp, #16
 800eba6:	af00      	add	r7, sp, #0
 800eba8:	6078      	str	r0, [r7, #4]
 800ebaa:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800ebac:	6839      	ldr	r1, [r7, #0]
 800ebae:	6878      	ldr	r0, [r7, #4]
 800ebb0:	f000 fd16 	bl	800f5e0 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi1ELi1EE3runERKSK_RKS3_>
 800ebb4:	eef0 7a40 	vmov.f32	s15, s0
 800ebb8:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800ebbc:	6839      	ldr	r1, [r7, #0]
 800ebbe:	6878      	ldr	r0, [r7, #4]
 800ebc0:	f000 fd1f 	bl	800f602 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi2ELi1EE3runERKSK_RKS3_>
 800ebc4:	eef0 7a40 	vmov.f32	s15, s0
 800ebc8:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800ebcc:	f107 020c 	add.w	r2, r7, #12
 800ebd0:	f107 0308 	add.w	r3, r7, #8
 800ebd4:	4619      	mov	r1, r3
 800ebd6:	6838      	ldr	r0, [r7, #0]
 800ebd8:	f7fa fbdb 	bl	8009392 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800ebdc:	eef0 7a40 	vmov.f32	s15, s0
  }
 800ebe0:	eeb0 0a67 	vmov.f32	s0, s15
 800ebe4:	3710      	adds	r7, #16
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	bd80      	pop	{r7, pc}

0800ebea <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800ebea:	b580      	push	{r7, lr}
 800ebec:	b082      	sub	sp, #8
 800ebee:	af00      	add	r7, sp, #0
 800ebf0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800ebf2:	2202      	movs	r2, #2
 800ebf4:	2102      	movs	r1, #2
 800ebf6:	6878      	ldr	r0, [r7, #4]
 800ebf8:	f7fb fe2e 	bl	800a858 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800ebfc:	6878      	ldr	r0, [r7, #4]
 800ebfe:	f000 fd11 	bl	800f624 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSL_>
  }
 800ec02:	bf00      	nop
 800ec04:	3708      	adds	r7, #8
 800ec06:	46bd      	mov	sp, r7
 800ec08:	bd80      	pop	{r7, pc}

0800ec0a <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800ec0a:	b480      	push	{r7}
 800ec0c:	b083      	sub	sp, #12
 800ec0e:	af00      	add	r7, sp, #0
 800ec10:	6078      	str	r0, [r7, #4]
    }
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	4618      	mov	r0, r3
 800ec16:	370c      	adds	r7, #12
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1e:	4770      	bx	lr

0800ec20 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800ec20:	b480      	push	{r7}
 800ec22:	b083      	sub	sp, #12
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
 800ec28:	6039      	str	r1, [r7, #0]
    {}
 800ec2a:	bf00      	nop
 800ec2c:	370c      	adds	r7, #12
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec34:	4770      	bx	lr

0800ec36 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800ec36:	b480      	push	{r7}
 800ec38:	b083      	sub	sp, #12
 800ec3a:	af00      	add	r7, sp, #0
 800ec3c:	6078      	str	r0, [r7, #4]
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	4618      	mov	r0, r3
 800ec42:	370c      	adds	r7, #12
 800ec44:	46bd      	mov	sp, r7
 800ec46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4a:	4770      	bx	lr

0800ec4c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4DataC1ERKSP_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800ec4c:	b590      	push	{r4, r7, lr}
 800ec4e:	b083      	sub	sp, #12
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
 800ec54:	6039      	str	r1, [r7, #0]
 800ec56:	687c      	ldr	r4, [r7, #4]
 800ec58:	6838      	ldr	r0, [r7, #0]
 800ec5a:	f000 fced 	bl	800f638 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE7functorEv>
 800ec5e:	4603      	mov	r3, r0
 800ec60:	4619      	mov	r1, r3
 800ec62:	4620      	mov	r0, r4
 800ec64:	f7f6 fd30 	bl	80056c8 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	1d1c      	adds	r4, r3, #4
 800ec6c:	6838      	ldr	r0, [r7, #0]
 800ec6e:	f000 fcef 	bl	800f650 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE3lhsEv>
 800ec72:	4603      	mov	r3, r0
 800ec74:	4619      	mov	r1, r3
 800ec76:	4620      	mov	r0, r4
 800ec78:	f000 fd02 	bl	800f680 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1ERSK_>
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	f103 0420 	add.w	r4, r3, #32
 800ec82:	6838      	ldr	r0, [r7, #0]
 800ec84:	f000 fcf0 	bl	800f668 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE3rhsEv>
 800ec88:	4603      	mov	r3, r0
 800ec8a:	4619      	mov	r1, r3
 800ec8c:	4620      	mov	r0, r4
 800ec8e:	f000 fd06 	bl	800f69e <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1ERS9_>
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	4618      	mov	r0, r3
 800ec96:	370c      	adds	r7, #12
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	bd90      	pop	{r4, r7, pc}

0800ec9c <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800ec9c:	b590      	push	{r4, r7, lr}
 800ec9e:	b087      	sub	sp, #28
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	60f8      	str	r0, [r7, #12]
 800eca4:	60b9      	str	r1, [r7, #8]
 800eca6:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	4618      	mov	r0, r3
 800ecac:	f000 fd06 	bl	800f6bc <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4Data4funcEv>
 800ecb0:	4604      	mov	r4, r0
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	3304      	adds	r3, #4
 800ecb6:	687a      	ldr	r2, [r7, #4]
 800ecb8:	68b9      	ldr	r1, [r7, #8]
 800ecba:	4618      	mov	r0, r3
 800ecbc:	f000 fd09 	bl	800f6d2 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 800ecc0:	eef0 7a40 	vmov.f32	s15, s0
 800ecc4:	edc7 7a04 	vstr	s15, [r7, #16]
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	3320      	adds	r3, #32
 800eccc:	687a      	ldr	r2, [r7, #4]
 800ecce:	68b9      	ldr	r1, [r7, #8]
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	f000 fd11 	bl	800f6f8 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE5coeffEii>
 800ecd6:	eef0 7a40 	vmov.f32	s15, s0
 800ecda:	edc7 7a05 	vstr	s15, [r7, #20]
 800ecde:	f107 0214 	add.w	r2, r7, #20
 800ece2:	f107 0310 	add.w	r3, r7, #16
 800ece6:	4619      	mov	r1, r3
 800ece8:	4620      	mov	r0, r4
 800ecea:	f000 fb93 	bl	800f414 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 800ecee:	eef0 7a40 	vmov.f32	s15, s0
  }
 800ecf2:	eeb0 0a67 	vmov.f32	s0, s15
 800ecf6:	371c      	adds	r7, #28
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	bd90      	pop	{r4, r7, pc}

0800ecfc <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800ecfc:	b480      	push	{r7}
 800ecfe:	b083      	sub	sp, #12
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
 800ed04:	bf00      	nop
 800ed06:	370c      	adds	r7, #12
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0e:	4770      	bx	lr

0800ed10 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800ed10:	b480      	push	{r7}
 800ed12:	b083      	sub	sp, #12
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	6078      	str	r0, [r7, #4]
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	3330      	adds	r3, #48	; 0x30
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	370c      	adds	r7, #12
 800ed20:	46bd      	mov	sp, r7
 800ed22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed26:	4770      	bx	lr

0800ed28 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800ed28:	b480      	push	{r7}
 800ed2a:	b083      	sub	sp, #12
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	4618      	mov	r0, r3
 800ed34:	370c      	adds	r7, #12
 800ed36:	46bd      	mov	sp, r7
 800ed38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3c:	4770      	bx	lr

0800ed3e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800ed3e:	b480      	push	{r7}
 800ed40:	b083      	sub	sp, #12
 800ed42:	af00      	add	r7, sp, #0
 800ed44:	6078      	str	r0, [r7, #4]
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	3318      	adds	r3, #24
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	370c      	adds	r7, #12
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed54:	4770      	bx	lr

0800ed56 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800ed56:	b580      	push	{r7, lr}
 800ed58:	b082      	sub	sp, #8
 800ed5a:	af00      	add	r7, sp, #0
 800ed5c:	6078      	str	r0, [r7, #4]
 800ed5e:	6039      	str	r1, [r7, #0]
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	6839      	ldr	r1, [r7, #0]
 800ed64:	4618      	mov	r0, r3
 800ed66:	f000 fce8 	bl	800f73a <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERKS9_>
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	3708      	adds	r7, #8
 800ed70:	46bd      	mov	sp, r7
 800ed72:	bd80      	pop	{r7, pc}

0800ed74 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERS7_>:
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b082      	sub	sp, #8
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
 800ed7c:	6039      	str	r1, [r7, #0]
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	6839      	ldr	r1, [r7, #0]
 800ed82:	4618      	mov	r0, r3
 800ed84:	f000 fce8 	bl	800f758 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERKS6_>
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	3708      	adds	r7, #8
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	bd80      	pop	{r7, pc}

0800ed92 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800ed92:	b590      	push	{r4, r7, lr}
 800ed94:	b087      	sub	sp, #28
 800ed96:	af00      	add	r7, sp, #0
 800ed98:	60f8      	str	r0, [r7, #12]
 800ed9a:	60b9      	str	r1, [r7, #8]
 800ed9c:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	4618      	mov	r0, r3
 800eda2:	f000 fce8 	bl	800f776 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 800eda6:	4604      	mov	r4, r0
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	3304      	adds	r3, #4
 800edac:	687a      	ldr	r2, [r7, #4]
 800edae:	68b9      	ldr	r1, [r7, #8]
 800edb0:	4618      	mov	r0, r3
 800edb2:	f000 fceb 	bl	800f78c <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 800edb6:	eef0 7a40 	vmov.f32	s15, s0
 800edba:	edc7 7a04 	vstr	s15, [r7, #16]
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	330c      	adds	r3, #12
 800edc2:	687a      	ldr	r2, [r7, #4]
 800edc4:	68b9      	ldr	r1, [r7, #8]
 800edc6:	4618      	mov	r0, r3
 800edc8:	f000 fcf3 	bl	800f7b2 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E5coeffEii>
 800edcc:	eef0 7a40 	vmov.f32	s15, s0
 800edd0:	edc7 7a05 	vstr	s15, [r7, #20]
 800edd4:	f107 0214 	add.w	r2, r7, #20
 800edd8:	f107 0310 	add.w	r3, r7, #16
 800eddc:	4619      	mov	r1, r3
 800edde:	4620      	mov	r0, r4
 800ede0:	f000 fb18 	bl	800f414 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 800ede4:	eef0 7a40 	vmov.f32	s15, s0
  }
 800ede8:	eeb0 0a67 	vmov.f32	s0, s15
 800edec:	371c      	adds	r7, #28
 800edee:	46bd      	mov	sp, r7
 800edf0:	bd90      	pop	{r4, r7, pc}

0800edf2 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 800edf2:	b590      	push	{r4, r7, lr}
 800edf4:	b087      	sub	sp, #28
 800edf6:	af00      	add	r7, sp, #0
 800edf8:	60f8      	str	r0, [r7, #12]
 800edfa:	60b9      	str	r1, [r7, #8]
 800edfc:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 800edfe:	68b8      	ldr	r0, [r7, #8]
 800ee00:	f7f7 ff9e 	bl	8006d40 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4rowsEv>
 800ee04:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 800ee06:	68b8      	ldr	r0, [r7, #8]
 800ee08:	f7f6 fe73 	bl	8005af2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>
 800ee0c:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	4618      	mov	r0, r3
 800ee12:	f7f6 f92e 	bl	8005072 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800ee16:	4602      	mov	r2, r0
 800ee18:	697b      	ldr	r3, [r7, #20]
 800ee1a:	4293      	cmp	r3, r2
 800ee1c:	d107      	bne.n	800ee2e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0x3c>
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	4618      	mov	r0, r3
 800ee22:	f7f6 f91b 	bl	800505c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800ee26:	4602      	mov	r2, r0
 800ee28:	693b      	ldr	r3, [r7, #16]
 800ee2a:	4293      	cmp	r3, r2
 800ee2c:	d001      	beq.n	800ee32 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0x40>
 800ee2e:	2301      	movs	r3, #1
 800ee30:	e000      	b.n	800ee34 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0x42>
 800ee32:	2300      	movs	r3, #0
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d005      	beq.n	800ee44 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0x52>
      dst.resize(dstRows, dstCols);
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	693a      	ldr	r2, [r7, #16]
 800ee3c:	6979      	ldr	r1, [r7, #20]
 800ee3e:	4618      	mov	r0, r3
 800ee40:	f7f9 f830 	bl	8007ea4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 800ee44:	68b8      	ldr	r0, [r7, #8]
 800ee46:	f000 fcd5 	bl	800f7f4 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE3lhsEv>
 800ee4a:	4604      	mov	r4, r0
 800ee4c:	68b8      	ldr	r0, [r7, #8]
 800ee4e:	f000 fcdd 	bl	800f80c <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE3rhsEv>
 800ee52:	4603      	mov	r3, r0
 800ee54:	461a      	mov	r2, r3
 800ee56:	4621      	mov	r1, r4
 800ee58:	68f8      	ldr	r0, [r7, #12]
 800ee5a:	f000 fce3 	bl	800f824 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS_10DenseShapeES4_Li3EE6evalToIS3_EEvRT_RKS3_SA_>
  }
 800ee5e:	bf00      	nop
 800ee60:	371c      	adds	r7, #28
 800ee62:	46bd      	mov	sp, r7
 800ee64:	bd90      	pop	{r4, r7, pc}
	...

0800ee68 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b084      	sub	sp, #16
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	60f8      	str	r0, [r7, #12]
 800ee70:	60b9      	str	r1, [r7, #8]
 800ee72:	607a      	str	r2, [r7, #4]
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	687a      	ldr	r2, [r7, #4]
 800ee78:	68b9      	ldr	r1, [r7, #8]
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	f000 fcf0 	bl	800f860 <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ENS_5DenseEEC1ERS5_i>
      eigen_assert( (i>=0) && (
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	db06      	blt.n	800ee94 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x2c>
 800ee86:	68b8      	ldr	r0, [r7, #8]
 800ee88:	f7f7 ff68 	bl	8006d5c <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800ee8c:	4602      	mov	r2, r0
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	4293      	cmp	r3, r2
 800ee92:	db05      	blt.n	800eea0 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x38>
 800ee94:	4b05      	ldr	r3, [pc, #20]	; (800eeac <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x44>)
 800ee96:	4a06      	ldr	r2, [pc, #24]	; (800eeb0 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x48>)
 800ee98:	2178      	movs	r1, #120	; 0x78
 800ee9a:	4806      	ldr	r0, [pc, #24]	; (800eeb4 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x4c>)
 800ee9c:	f00f f802 	bl	801dea4 <__assert_func>
    }
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	4618      	mov	r0, r3
 800eea4:	3710      	adds	r7, #16
 800eea6:	46bd      	mov	sp, r7
 800eea8:	bd80      	pop	{r7, pc}
 800eeaa:	bf00      	nop
 800eeac:	08024890 	.word	0x08024890
 800eeb0:	0802708c 	.word	0x0802708c
 800eeb4:	08024a14 	.word	0x08024a14

0800eeb8 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800eeb8:	b480      	push	{r7}
 800eeba:	b083      	sub	sp, #12
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	4618      	mov	r0, r3
 800eec4:	370c      	adds	r7, #12
 800eec6:	46bd      	mov	sp, r7
 800eec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eecc:	4770      	bx	lr

0800eece <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>:
 800eece:	b580      	push	{r7, lr}
 800eed0:	b082      	sub	sp, #8
 800eed2:	af00      	add	r7, sp, #0
 800eed4:	6078      	str	r0, [r7, #4]
 800eed6:	6878      	ldr	r0, [r7, #4]
 800eed8:	f000 fcd3 	bl	800f882 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	4618      	mov	r0, r3
 800eee0:	3708      	adds	r7, #8
 800eee2:	46bd      	mov	sp, r7
 800eee4:	bd80      	pop	{r7, pc}

0800eee6 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800eee6:	b580      	push	{r7, lr}
 800eee8:	b082      	sub	sp, #8
 800eeea:	af00      	add	r7, sp, #0
 800eeec:	6078      	str	r0, [r7, #4]
 800eeee:	6878      	ldr	r0, [r7, #4]
 800eef0:	f7ff ffed 	bl	800eece <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	4618      	mov	r0, r3
 800eef8:	3708      	adds	r7, #8
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bd80      	pop	{r7, pc}

0800eefe <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800eefe:	b580      	push	{r7, lr}
 800ef00:	b082      	sub	sp, #8
 800ef02:	af00      	add	r7, sp, #0
 800ef04:	6078      	str	r0, [r7, #4]
 800ef06:	f7f7 fe7e 	bl	8006c06 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	3708      	adds	r7, #8
 800ef10:	46bd      	mov	sp, r7
 800ef12:	bd80      	pop	{r7, pc}

0800ef14 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b082      	sub	sp, #8
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
 800ef1c:	f7f7 fe7b 	bl	8006c16 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800ef20:	4603      	mov	r3, r0
 800ef22:	4618      	mov	r0, r3
 800ef24:	3708      	adds	r7, #8
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd80      	pop	{r7, pc}
	...

0800ef2c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800ef2c:	b5b0      	push	{r4, r5, r7, lr}
 800ef2e:	b084      	sub	sp, #16
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	60f8      	str	r0, [r7, #12]
 800ef34:	60b9      	str	r1, [r7, #8]
 800ef36:	607a      	str	r2, [r7, #4]
 800ef38:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800ef3a:	68f8      	ldr	r0, [r7, #12]
 800ef3c:	f7ff ffd3 	bl	800eee6 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEENS_5DenseEEC1Ev>
 800ef40:	68fa      	ldr	r2, [r7, #12]
 800ef42:	68bb      	ldr	r3, [r7, #8]
 800ef44:	4614      	mov	r4, r2
 800ef46:	461d      	mov	r5, r3
 800ef48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ef4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ef4c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ef50:	e884 0003 	stmia.w	r4, {r0, r1}
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	f103 0218 	add.w	r2, r3, #24
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	4614      	mov	r4, r2
 800ef5e:	461d      	mov	r5, r3
 800ef60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ef62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ef64:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ef68:	e884 0003 	stmia.w	r4, {r0, r1}
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	3330      	adds	r3, #48	; 0x30
 800ef70:	6839      	ldr	r1, [r7, #0]
 800ef72:	4618      	mov	r0, r3
 800ef74:	f7f6 fba8 	bl	80056c8 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800ef78:	68b8      	ldr	r0, [r7, #8]
 800ef7a:	f7fc fd11 	bl	800b9a0 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800ef7e:	4604      	mov	r4, r0
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	4618      	mov	r0, r3
 800ef84:	f7ff ffbb 	bl	800eefe <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4rowsEv>
 800ef88:	4603      	mov	r3, r0
 800ef8a:	429c      	cmp	r4, r3
 800ef8c:	d10a      	bne.n	800efa4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x78>
 800ef8e:	68b8      	ldr	r0, [r7, #8]
 800ef90:	f7fc fd13 	bl	800b9ba <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800ef94:	4604      	mov	r4, r0
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	4618      	mov	r0, r3
 800ef9a:	f7ff ffbb 	bl	800ef14 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4colsEv>
 800ef9e:	4603      	mov	r3, r0
 800efa0:	429c      	cmp	r4, r3
 800efa2:	d005      	beq.n	800efb0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x84>
 800efa4:	4b05      	ldr	r3, [pc, #20]	; (800efbc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x90>)
 800efa6:	4a06      	ldr	r2, [pc, #24]	; (800efc0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x94>)
 800efa8:	2174      	movs	r1, #116	; 0x74
 800efaa:	4806      	ldr	r0, [pc, #24]	; (800efc4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x98>)
 800efac:	f00e ff7a 	bl	801dea4 <__assert_func>
    }
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	4618      	mov	r0, r3
 800efb4:	3710      	adds	r7, #16
 800efb6:	46bd      	mov	sp, r7
 800efb8:	bdb0      	pop	{r4, r5, r7, pc}
 800efba:	bf00      	nop
 800efbc:	0801fd0c 	.word	0x0801fd0c
 800efc0:	0802717c 	.word	0x0802717c
 800efc4:	0801ff70 	.word	0x0801ff70

0800efc8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800efc8:	b580      	push	{r7, lr}
 800efca:	b082      	sub	sp, #8
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
 800efd0:	6878      	ldr	r0, [r7, #4]
 800efd2:	f000 f809 	bl	800efe8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800efd6:	4603      	mov	r3, r0
 800efd8:	4618      	mov	r0, r3
 800efda:	f000 fc5d 	bl	800f898 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE4colsEv>
 800efde:	4603      	mov	r3, r0
 800efe0:	4618      	mov	r0, r3
 800efe2:	3708      	adds	r7, #8
 800efe4:	46bd      	mov	sp, r7
 800efe6:	bd80      	pop	{r7, pc}

0800efe8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800efe8:	b480      	push	{r7}
 800efea:	b083      	sub	sp, #12
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	4618      	mov	r0, r3
 800eff4:	370c      	adds	r7, #12
 800eff6:	46bd      	mov	sp, r7
 800eff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effc:	4770      	bx	lr

0800effe <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800effe:	b580      	push	{r7, lr}
 800f000:	b082      	sub	sp, #8
 800f002:	af00      	add	r7, sp, #0
 800f004:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	4618      	mov	r0, r3
 800f00a:	f7fc fcc9 	bl	800b9a0 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800f00e:	4603      	mov	r3, r0
    }
 800f010:	4618      	mov	r0, r3
 800f012:	3708      	adds	r7, #8
 800f014:	46bd      	mov	sp, r7
 800f016:	bd80      	pop	{r7, pc}

0800f018 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800f018:	b580      	push	{r7, lr}
 800f01a:	b082      	sub	sp, #8
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]
 800f020:	6878      	ldr	r0, [r7, #4]
 800f022:	f000 fc60 	bl	800f8e6 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	4618      	mov	r0, r3
 800f02a:	3708      	adds	r7, #8
 800f02c:	46bd      	mov	sp, r7
 800f02e:	bd80      	pop	{r7, pc}

0800f030 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800f030:	b580      	push	{r7, lr}
 800f032:	b082      	sub	sp, #8
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	4618      	mov	r0, r3
 800f03c:	f7ff ffec 	bl	800f018 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	4618      	mov	r0, r3
 800f044:	3708      	adds	r7, #8
 800f046:	46bd      	mov	sp, r7
 800f048:	bd80      	pop	{r7, pc}

0800f04a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800f04a:	b580      	push	{r7, lr}
 800f04c:	b082      	sub	sp, #8
 800f04e:	af00      	add	r7, sp, #0
 800f050:	6078      	str	r0, [r7, #4]
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	4618      	mov	r0, r3
 800f056:	f7ff ffeb 	bl	800f030 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EED1Ev>
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	4618      	mov	r0, r3
 800f05e:	3708      	adds	r7, #8
 800f060:	46bd      	mov	sp, r7
 800f062:	bd80      	pop	{r7, pc}

0800f064 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 800f064:	b580      	push	{r7, lr}
 800f066:	b082      	sub	sp, #8
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	4618      	mov	r0, r3
 800f070:	f7ff ffeb 	bl	800f04a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	4618      	mov	r0, r3
 800f078:	3708      	adds	r7, #8
 800f07a:	46bd      	mov	sp, r7
 800f07c:	bd80      	pop	{r7, pc}

0800f07e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 800f07e:	b580      	push	{r7, lr}
 800f080:	b082      	sub	sp, #8
 800f082:	af00      	add	r7, sp, #0
 800f084:	6078      	str	r0, [r7, #4]
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	330c      	adds	r3, #12
 800f08a:	4618      	mov	r0, r3
 800f08c:	f7ff ffea 	bl	800f064 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	3304      	adds	r3, #4
 800f094:	4618      	mov	r0, r3
 800f096:	f7fc fd79 	bl	800bb8c <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	4618      	mov	r0, r3
 800f09e:	3708      	adds	r7, #8
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	bd80      	pop	{r7, pc}

0800f0a4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	b082      	sub	sp, #8
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	f7ff ffe5 	bl	800f07e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 800f0b4:	6878      	ldr	r0, [r7, #4]
 800f0b6:	f000 fc0b 	bl	800f8d0 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	4618      	mov	r0, r3
 800f0be:	3708      	adds	r7, #8
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	bd80      	pop	{r7, pc}

0800f0c4 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b082      	sub	sp, #8
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	f7ff ffe8 	bl	800f0a4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffED1Ev>
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	3708      	adds	r7, #8
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	bd80      	pop	{r7, pc}

0800f0de <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800f0de:	b580      	push	{r7, lr}
 800f0e0:	b082      	sub	sp, #8
 800f0e2:	af00      	add	r7, sp, #0
 800f0e4:	6078      	str	r0, [r7, #4]
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	f7ff ffeb 	bl	800f0c4 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	3708      	adds	r7, #8
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	bd80      	pop	{r7, pc}

0800f0f8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	ed2d 8b02 	vpush	{d8}
 800f0fe:	b088      	sub	sp, #32
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
 800f104:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800f106:	6878      	ldr	r0, [r7, #4]
 800f108:	f7ff fb0d 	bl	800e726 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE4rowsEv>
 800f10c:	4603      	mov	r3, r0
 800f10e:	2b00      	cmp	r3, #0
 800f110:	dd05      	ble.n	800f11e <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800f112:	6878      	ldr	r0, [r7, #4]
 800f114:	f7ff ff58 	bl	800efc8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE4colsEv>
 800f118:	4603      	mov	r3, r0
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	dc06      	bgt.n	800f12c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800f11e:	4b16      	ldr	r3, [pc, #88]	; (800f178 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800f120:	4a16      	ldr	r2, [pc, #88]	; (800f17c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800f122:	f240 119b 	movw	r1, #411	; 0x19b
 800f126:	4816      	ldr	r0, [pc, #88]	; (800f180 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800f128:	f00e febc 	bl	801dea4 <__assert_func>
 800f12c:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800f12e:	6878      	ldr	r0, [r7, #4]
 800f130:	f7ff ff5a 	bl	800efe8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800f134:	4602      	mov	r2, r0
 800f136:	f107 030c 	add.w	r3, r7, #12
 800f13a:	4611      	mov	r1, r2
 800f13c:	4618      	mov	r0, r3
 800f13e:	f000 fbb8 	bl	800f8b2 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800f142:	6878      	ldr	r0, [r7, #4]
 800f144:	f7ff ff50 	bl	800efe8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800f148:	4602      	mov	r2, r0
 800f14a:	f107 030c 	add.w	r3, r7, #12
 800f14e:	6839      	ldr	r1, [r7, #0]
 800f150:	4618      	mov	r0, r3
 800f152:	f000 fbd3 	bl	800f8fc <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 800f156:	eeb0 8a40 	vmov.f32	s16, s0
 800f15a:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800f15c:	f107 030c 	add.w	r3, r7, #12
 800f160:	4618      	mov	r0, r3
 800f162:	f7ff ffbc 	bl	800f0de <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800f166:	eef0 7a48 	vmov.f32	s15, s16
}
 800f16a:	eeb0 0a67 	vmov.f32	s0, s15
 800f16e:	3720      	adds	r7, #32
 800f170:	46bd      	mov	sp, r7
 800f172:	ecbd 8b02 	vpop	{d8}
 800f176:	bd80      	pop	{r7, pc}
 800f178:	08024d8c 	.word	0x08024d8c
 800f17c:	080273ec 	.word	0x080273ec
 800f180:	08024f98 	.word	0x08024f98

0800f184 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800f184:	b580      	push	{r7, lr}
 800f186:	b082      	sub	sp, #8
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800f18c:	2202      	movs	r2, #2
 800f18e:	2101      	movs	r1, #1
 800f190:	6878      	ldr	r0, [r7, #4]
 800f192:	f7fd fd50 	bl	800cc36 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800f196:	6878      	ldr	r0, [r7, #4]
 800f198:	f000 fbc1 	bl	800f91e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSG_>
  }
 800f19c:	bf00      	nop
 800f19e:	3708      	adds	r7, #8
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	bd80      	pop	{r7, pc}

0800f1a4 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800f1a4:	b480      	push	{r7}
 800f1a6:	b083      	sub	sp, #12
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6078      	str	r0, [r7, #4]
    }
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	370c      	adds	r7, #12
 800f1b2:	46bd      	mov	sp, r7
 800f1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b8:	4770      	bx	lr

0800f1ba <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800f1ba:	b480      	push	{r7}
 800f1bc:	b083      	sub	sp, #12
 800f1be:	af00      	add	r7, sp, #0
 800f1c0:	6078      	str	r0, [r7, #4]
 800f1c2:	6039      	str	r1, [r7, #0]
}
 800f1c4:	bf00      	nop
 800f1c6:	370c      	adds	r7, #12
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ce:	4770      	bx	lr

0800f1d0 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
struct evaluator<PlainObjectBase<Derived> >
 800f1d0:	b580      	push	{r7, lr}
 800f1d2:	b082      	sub	sp, #8
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	6078      	str	r0, [r7, #4]
 800f1d8:	6878      	ldr	r0, [r7, #4]
 800f1da:	f000 fbd5 	bl	800f988 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	3708      	adds	r7, #8
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	bd80      	pop	{r7, pc}

0800f1e8 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b082      	sub	sp, #8
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	f7ff ffec 	bl	800f1d0 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	3708      	adds	r7, #8
 800f1fe:	46bd      	mov	sp, r7
 800f200:	bd80      	pop	{r7, pc}

0800f202 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800f202:	b580      	push	{r7, lr}
 800f204:	b082      	sub	sp, #8
 800f206:	af00      	add	r7, sp, #0
 800f208:	6078      	str	r0, [r7, #4]
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	4618      	mov	r0, r3
 800f20e:	f7ff ffeb 	bl	800f1e8 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 800f212:	6878      	ldr	r0, [r7, #4]
 800f214:	f000 fbad 	bl	800f972 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	4618      	mov	r0, r3
 800f21c:	3708      	adds	r7, #8
 800f21e:	46bd      	mov	sp, r7
 800f220:	bd80      	pop	{r7, pc}

0800f222 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800f222:	b580      	push	{r7, lr}
 800f224:	b082      	sub	sp, #8
 800f226:	af00      	add	r7, sp, #0
 800f228:	6078      	str	r0, [r7, #4]
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	4618      	mov	r0, r3
 800f22e:	f7ff ffe8 	bl	800f202 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfED1Ev>
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	4618      	mov	r0, r3
 800f236:	3708      	adds	r7, #8
 800f238:	46bd      	mov	sp, r7
 800f23a:	bd80      	pop	{r7, pc}

0800f23c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b082      	sub	sp, #8
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	330c      	adds	r3, #12
 800f248:	4618      	mov	r0, r3
 800f24a:	f7ff ffea 	bl	800f222 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	3308      	adds	r3, #8
 800f252:	4618      	mov	r0, r3
 800f254:	f7f8 f995 	bl	8007582 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 800f258:	6878      	ldr	r0, [r7, #4]
 800f25a:	f000 fb7f 	bl	800f95c <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEED1Ev>
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	4618      	mov	r0, r3
 800f262:	3708      	adds	r7, #8
 800f264:	46bd      	mov	sp, r7
 800f266:	bd80      	pop	{r7, pc}

0800f268 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 800f268:	b580      	push	{r7, lr}
 800f26a:	b082      	sub	sp, #8
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	4618      	mov	r0, r3
 800f274:	f7ff ffe2 	bl	800f23c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffED1Ev>
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	4618      	mov	r0, r3
 800f27c:	3708      	adds	r7, #8
 800f27e:	46bd      	mov	sp, r7
 800f280:	bd80      	pop	{r7, pc}

0800f282 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800f282:	b580      	push	{r7, lr}
 800f284:	b090      	sub	sp, #64	; 0x40
 800f286:	af02      	add	r7, sp, #8
 800f288:	60f8      	str	r0, [r7, #12]
 800f28a:	60b9      	str	r1, [r7, #8]
 800f28c:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800f28e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f292:	68b9      	ldr	r1, [r7, #8]
 800f294:	4618      	mov	r0, r3
 800f296:	f000 fb52 	bl	800f93e <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1ERKS8_>
  resize_if_allowed(dst, src, func);
 800f29a:	687a      	ldr	r2, [r7, #4]
 800f29c:	68b9      	ldr	r1, [r7, #8]
 800f29e:	68f8      	ldr	r0, [r7, #12]
 800f2a0:	f000 fb9a 	bl	800f9d8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800f2a4:	f107 0320 	add.w	r3, r7, #32
 800f2a8:	68f9      	ldr	r1, [r7, #12]
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	f7f7 fc2d 	bl	8006b0a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800f2b0:	68f8      	ldr	r0, [r7, #12]
 800f2b2:	f7f8 fc6b 	bl	8007b8c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f2bc:	f107 0120 	add.w	r1, r7, #32
 800f2c0:	f107 0010 	add.w	r0, r7, #16
 800f2c4:	9300      	str	r3, [sp, #0]
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	f000 fbd0 	bl	800fa6c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSC_RKSE_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800f2cc:	f107 0310 	add.w	r3, r7, #16
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	f000 fbe5 	bl	800faa0 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSG_>
  DstEvaluatorType dstEvaluator(dst);
 800f2d6:	f107 0320 	add.w	r3, r7, #32
 800f2da:	4618      	mov	r0, r3
 800f2dc:	f7f6 f8db 	bl	8005496 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800f2e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	f7ff ffbf 	bl	800f268 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEED1Ev>
}
 800f2ea:	bf00      	nop
 800f2ec:	3738      	adds	r7, #56	; 0x38
 800f2ee:	46bd      	mov	sp, r7
 800f2f0:	bd80      	pop	{r7, pc}

0800f2f2 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800f2f2:	b580      	push	{r7, lr}
 800f2f4:	b086      	sub	sp, #24
 800f2f6:	af00      	add	r7, sp, #0
 800f2f8:	60f8      	str	r0, [r7, #12]
 800f2fa:	60b9      	str	r1, [r7, #8]
 800f2fc:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800f302:	687a      	ldr	r2, [r7, #4]
 800f304:	68b9      	ldr	r1, [r7, #8]
 800f306:	6978      	ldr	r0, [r7, #20]
 800f308:	f000 fbd5 	bl	800fab6 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSG_RKSI_>
}
 800f30c:	bf00      	nop
 800f30e:	3718      	adds	r7, #24
 800f310:	46bd      	mov	sp, r7
 800f312:	bd80      	pop	{r7, pc}

0800f314 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800f314:	b480      	push	{r7}
 800f316:	b083      	sub	sp, #12
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	332c      	adds	r3, #44	; 0x2c
 800f320:	4618      	mov	r0, r3
 800f322:	370c      	adds	r7, #12
 800f324:	46bd      	mov	sp, r7
 800f326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32a:	4770      	bx	lr

0800f32c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800f32c:	b480      	push	{r7}
 800f32e:	b083      	sub	sp, #12
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	4618      	mov	r0, r3
 800f338:	370c      	adds	r7, #12
 800f33a:	46bd      	mov	sp, r7
 800f33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f340:	4770      	bx	lr

0800f342 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800f342:	b480      	push	{r7}
 800f344:	b083      	sub	sp, #12
 800f346:	af00      	add	r7, sp, #0
 800f348:	6078      	str	r0, [r7, #4]
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	3318      	adds	r3, #24
 800f34e:	4618      	mov	r0, r3
 800f350:	370c      	adds	r7, #12
 800f352:	46bd      	mov	sp, r7
 800f354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f358:	4770      	bx	lr

0800f35a <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800f35a:	b580      	push	{r7, lr}
 800f35c:	b082      	sub	sp, #8
 800f35e:	af00      	add	r7, sp, #0
 800f360:	6078      	str	r0, [r7, #4]
 800f362:	6039      	str	r1, [r7, #0]
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	6839      	ldr	r1, [r7, #0]
 800f368:	4618      	mov	r0, r3
 800f36a:	f000 fbb7 	bl	800fadc <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERKS9_>
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	4618      	mov	r0, r3
 800f372:	3708      	adds	r7, #8
 800f374:	46bd      	mov	sp, r7
 800f376:	bd80      	pop	{r7, pc}

0800f378 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERS7_>:
 800f378:	b580      	push	{r7, lr}
 800f37a:	b082      	sub	sp, #8
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	6078      	str	r0, [r7, #4]
 800f380:	6039      	str	r1, [r7, #0]
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	6839      	ldr	r1, [r7, #0]
 800f386:	4618      	mov	r0, r3
 800f388:	f000 fbb7 	bl	800fafa <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERKS6_>
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	4618      	mov	r0, r3
 800f390:	3708      	adds	r7, #8
 800f392:	46bd      	mov	sp, r7
 800f394:	bd80      	pop	{r7, pc}

0800f396 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 800f396:	b480      	push	{r7}
 800f398:	b083      	sub	sp, #12
 800f39a:	af00      	add	r7, sp, #0
 800f39c:	6078      	str	r0, [r7, #4]
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	370c      	adds	r7, #12
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3aa:	4770      	bx	lr

0800f3ac <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b084      	sub	sp, #16
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	60f8      	str	r0, [r7, #12]
 800f3b4:	60b9      	str	r1, [r7, #8]
 800f3b6:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	68ba      	ldr	r2, [r7, #8]
 800f3bc:	6879      	ldr	r1, [r7, #4]
 800f3be:	4618      	mov	r0, r3
 800f3c0:	f000 fbaa 	bl	800fb18 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE5coeffEii>
 800f3c4:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f3c8:	eeb0 0a67 	vmov.f32	s0, s15
 800f3cc:	3710      	adds	r7, #16
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	bd80      	pop	{r7, pc}

0800f3d2 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f3d2:	b5b0      	push	{r4, r5, r7, lr}
 800f3d4:	b084      	sub	sp, #16
 800f3d6:	af00      	add	r7, sp, #0
 800f3d8:	60f8      	str	r0, [r7, #12]
 800f3da:	60b9      	str	r1, [r7, #8]
 800f3dc:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	681c      	ldr	r4, [r3, #0]
 800f3e2:	68f8      	ldr	r0, [r7, #12]
 800f3e4:	f000 fbb9 	bl	800fb5a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E9colStrideEv>
 800f3e8:	4602      	mov	r2, r0
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	fb03 f502 	mul.w	r5, r3, r2
 800f3f0:	68f8      	ldr	r0, [r7, #12]
 800f3f2:	f000 fbbd 	bl	800fb70 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E9rowStrideEv>
 800f3f6:	4602      	mov	r2, r0
 800f3f8:	68bb      	ldr	r3, [r7, #8]
 800f3fa:	fb02 f303 	mul.w	r3, r2, r3
 800f3fe:	442b      	add	r3, r5
 800f400:	009b      	lsls	r3, r3, #2
 800f402:	4423      	add	r3, r4
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	ee07 3a90 	vmov	s15, r3
  }
 800f40a:	eeb0 0a67 	vmov.f32	s0, s15
 800f40e:	3710      	adds	r7, #16
 800f410:	46bd      	mov	sp, r7
 800f412:	bdb0      	pop	{r4, r5, r7, pc}

0800f414 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 800f414:	b480      	push	{r7}
 800f416:	b085      	sub	sp, #20
 800f418:	af00      	add	r7, sp, #0
 800f41a:	60f8      	str	r0, [r7, #12]
 800f41c:	60b9      	str	r1, [r7, #8]
 800f41e:	607a      	str	r2, [r7, #4]
 800f420:	68bb      	ldr	r3, [r7, #8]
 800f422:	ed93 7a00 	vldr	s14, [r3]
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	edd3 7a00 	vldr	s15, [r3]
 800f42c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f430:	eeb0 0a67 	vmov.f32	s0, s15
 800f434:	3714      	adds	r7, #20
 800f436:	46bd      	mov	sp, r7
 800f438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43c:	4770      	bx	lr

0800f43e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800f43e:	b580      	push	{r7, lr}
 800f440:	b084      	sub	sp, #16
 800f442:	af00      	add	r7, sp, #0
 800f444:	60f8      	str	r0, [r7, #12]
 800f446:	60b9      	str	r1, [r7, #8]
 800f448:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800f44a:	68b9      	ldr	r1, [r7, #8]
 800f44c:	68f8      	ldr	r0, [r7, #12]
 800f44e:	f000 fb9a 	bl	800fb86 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_EEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800f452:	687a      	ldr	r2, [r7, #4]
 800f454:	68b9      	ldr	r1, [r7, #8]
 800f456:	68f8      	ldr	r0, [r7, #12]
 800f458:	f000 fba0 	bl	800fb9c <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800f45c:	bf00      	nop
 800f45e:	3710      	adds	r7, #16
 800f460:	46bd      	mov	sp, r7
 800f462:	bd80      	pop	{r7, pc}

0800f464 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::sub_assign_op<Scalar,Scalar> &)
 800f464:	b590      	push	{r4, r7, lr}
 800f466:	b085      	sub	sp, #20
 800f468:	af00      	add	r7, sp, #0
 800f46a:	60f8      	str	r0, [r7, #12]
 800f46c:	60b9      	str	r1, [r7, #8]
 800f46e:	607a      	str	r2, [r7, #4]
    eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	4618      	mov	r0, r3
 800f474:	f7f6 fded 	bl	8006052 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800f478:	4604      	mov	r4, r0
 800f47a:	68b8      	ldr	r0, [r7, #8]
 800f47c:	f7f6 ffb0 	bl	80063e0 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>
 800f480:	4603      	mov	r3, r0
 800f482:	429c      	cmp	r4, r3
 800f484:	d10a      	bne.n	800f49c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x38>
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	4618      	mov	r0, r3
 800f48a:	f7f6 fded 	bl	8006068 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800f48e:	4604      	mov	r4, r0
 800f490:	68b8      	ldr	r0, [r7, #8]
 800f492:	f7f6 ffb3 	bl	80063fc <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>
 800f496:	4603      	mov	r3, r0
 800f498:	429c      	cmp	r4, r3
 800f49a:	d005      	beq.n	800f4a8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x44>
 800f49c:	4b0b      	ldr	r3, [pc, #44]	; (800f4cc <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x68>)
 800f49e:	4a0c      	ldr	r2, [pc, #48]	; (800f4d0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x6c>)
 800f4a0:	21b0      	movs	r1, #176	; 0xb0
 800f4a2:	480c      	ldr	r0, [pc, #48]	; (800f4d4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x70>)
 800f4a4:	f00e fcfe 	bl	801dea4 <__assert_func>
    generic_product_impl<Lhs, Rhs>::subTo(dst, src.lhs(), src.rhs());
 800f4a8:	68b8      	ldr	r0, [r7, #8]
 800f4aa:	f000 fbaf 	bl	800fc0c <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3lhsEv>
 800f4ae:	4604      	mov	r4, r0
 800f4b0:	68b8      	ldr	r0, [r7, #8]
 800f4b2:	f000 fbb7 	bl	800fc24 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3rhsEv>
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	461a      	mov	r2, r3
 800f4ba:	4621      	mov	r1, r4
 800f4bc:	68f8      	ldr	r0, [r7, #12]
 800f4be:	f000 fbbd 	bl	800fc3c <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEENS_10DenseShapeES5_Li6EE5subToINS2_IfLi1ELi1ELi0ELi1ELi1EEEEEvRT_RKS3_RKS4_>
  }
 800f4c2:	bf00      	nop
 800f4c4:	3714      	adds	r7, #20
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	bd90      	pop	{r4, r7, pc}
 800f4ca:	bf00      	nop
 800f4cc:	08022aa0 	.word	0x08022aa0
 800f4d0:	080275c8 	.word	0x080275c8
 800f4d4:	08022f98 	.word	0x08022f98

0800f4d8 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE11lazyProductINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 800f4d8:	b590      	push	{r4, r7, lr}
 800f4da:	b085      	sub	sp, #20
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	60f8      	str	r0, [r7, #12]
 800f4e0:	60b9      	str	r1, [r7, #8]
 800f4e2:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 800f4e4:	68b8      	ldr	r0, [r7, #8]
 800f4e6:	f7f6 f806 	bl	80054f6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800f4ea:	4604      	mov	r4, r0
 800f4ec:	6878      	ldr	r0, [r7, #4]
 800f4ee:	f7f6 fc9b 	bl	8005e28 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	461a      	mov	r2, r3
 800f4f6:	4621      	mov	r1, r4
 800f4f8:	68f8      	ldr	r0, [r7, #12]
 800f4fa:	f000 fbf3 	bl	800fce4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_>
}
 800f4fe:	68f8      	ldr	r0, [r7, #12]
 800f500:	3714      	adds	r7, #20
 800f502:	46bd      	mov	sp, r7
 800f504:	bd90      	pop	{r4, r7, pc}

0800f506 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800f506:	b580      	push	{r7, lr}
 800f508:	b086      	sub	sp, #24
 800f50a:	af00      	add	r7, sp, #0
 800f50c:	60f8      	str	r0, [r7, #12]
 800f50e:	60b9      	str	r1, [r7, #8]
 800f510:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800f516:	687a      	ldr	r2, [r7, #4]
 800f518:	68b9      	ldr	r1, [r7, #8]
 800f51a:	6978      	ldr	r0, [r7, #20]
 800f51c:	f000 fc10 	bl	800fd40 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>
}
 800f520:	bf00      	nop
 800f522:	3718      	adds	r7, #24
 800f524:	46bd      	mov	sp, r7
 800f526:	bd80      	pop	{r7, pc}

0800f528 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800f528:	b480      	push	{r7}
 800f52a:	b083      	sub	sp, #12
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
    }
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	4618      	mov	r0, r3
 800f534:	370c      	adds	r7, #12
 800f536:	46bd      	mov	sp, r7
 800f538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53c:	4770      	bx	lr

0800f53e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800f53e:	b480      	push	{r7}
 800f540:	b083      	sub	sp, #12
 800f542:	af00      	add	r7, sp, #0
 800f544:	6078      	str	r0, [r7, #4]
 800f546:	6039      	str	r1, [r7, #0]
    {}
 800f548:	bf00      	nop
 800f54a:	370c      	adds	r7, #12
 800f54c:	46bd      	mov	sp, r7
 800f54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f552:	4770      	bx	lr

0800f554 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800f554:	b480      	push	{r7}
 800f556:	b083      	sub	sp, #12
 800f558:	af00      	add	r7, sp, #0
 800f55a:	6078      	str	r0, [r7, #4]
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	4618      	mov	r0, r3
 800f560:	370c      	adds	r7, #12
 800f562:	46bd      	mov	sp, r7
 800f564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f568:	4770      	bx	lr

0800f56a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800f56a:	b590      	push	{r4, r7, lr}
 800f56c:	b083      	sub	sp, #12
 800f56e:	af00      	add	r7, sp, #0
 800f570:	6078      	str	r0, [r7, #4]
 800f572:	6039      	str	r1, [r7, #0]
 800f574:	687c      	ldr	r4, [r7, #4]
 800f576:	6838      	ldr	r0, [r7, #0]
 800f578:	f000 fbf5 	bl	800fd66 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE7functorEv>
 800f57c:	4603      	mov	r3, r0
 800f57e:	4619      	mov	r1, r3
 800f580:	4620      	mov	r0, r4
 800f582:	f7f6 f8a1 	bl	80056c8 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	1d1c      	adds	r4, r3, #4
 800f58a:	6838      	ldr	r0, [r7, #0]
 800f58c:	f000 fbf7 	bl	800fd7e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE3lhsEv>
 800f590:	4603      	mov	r3, r0
 800f592:	4619      	mov	r1, r3
 800f594:	4620      	mov	r0, r4
 800f596:	f7ff fbde 	bl	800ed56 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	f103 040c 	add.w	r4, r3, #12
 800f5a0:	6838      	ldr	r0, [r7, #0]
 800f5a2:	f000 fbf7 	bl	800fd94 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE3rhsEv>
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	4619      	mov	r1, r3
 800f5aa:	4620      	mov	r0, r4
 800f5ac:	f000 fbfe 	bl	800fdac <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERS7_>
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	370c      	adds	r7, #12
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	bd90      	pop	{r4, r7, pc}

0800f5ba <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 800f5ba:	b580      	push	{r7, lr}
 800f5bc:	b084      	sub	sp, #16
 800f5be:	af00      	add	r7, sp, #0
 800f5c0:	60f8      	str	r0, [r7, #12]
 800f5c2:	60b9      	str	r1, [r7, #8]
 800f5c4:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	68ba      	ldr	r2, [r7, #8]
 800f5ca:	6879      	ldr	r1, [r7, #4]
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	f000 fbfc 	bl	800fdca <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE5coeffEii>
 800f5d2:	eef0 7a40 	vmov.f32	s15, s0
 800f5d6:	eeb0 0a67 	vmov.f32	s0, s15
 800f5da:	3710      	adds	r7, #16
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	bd80      	pop	{r7, pc}

0800f5e0 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi1ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b082      	sub	sp, #8
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
 800f5e8:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800f5ea:	2201      	movs	r2, #1
 800f5ec:	2100      	movs	r1, #0
 800f5ee:	6878      	ldr	r0, [r7, #4]
 800f5f0:	f7ff ffe3 	bl	800f5ba <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800f5f4:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f5f8:	eeb0 0a67 	vmov.f32	s0, s15
 800f5fc:	3708      	adds	r7, #8
 800f5fe:	46bd      	mov	sp, r7
 800f600:	bd80      	pop	{r7, pc}

0800f602 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi2ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800f602:	b580      	push	{r7, lr}
 800f604:	b082      	sub	sp, #8
 800f606:	af00      	add	r7, sp, #0
 800f608:	6078      	str	r0, [r7, #4]
 800f60a:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800f60c:	2202      	movs	r2, #2
 800f60e:	2100      	movs	r1, #0
 800f610:	6878      	ldr	r0, [r7, #4]
 800f612:	f7ff ffd2 	bl	800f5ba <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800f616:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f61a:	eeb0 0a67 	vmov.f32	s0, s15
 800f61e:	3708      	adds	r7, #8
 800f620:	46bd      	mov	sp, r7
 800f622:	bd80      	pop	{r7, pc}

0800f624 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800f624:	b480      	push	{r7}
 800f626:	b083      	sub	sp, #12
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
 800f62c:	bf00      	nop
 800f62e:	370c      	adds	r7, #12
 800f630:	46bd      	mov	sp, r7
 800f632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f636:	4770      	bx	lr

0800f638 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800f638:	b480      	push	{r7}
 800f63a:	b083      	sub	sp, #12
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	3334      	adds	r3, #52	; 0x34
 800f644:	4618      	mov	r0, r3
 800f646:	370c      	adds	r7, #12
 800f648:	46bd      	mov	sp, r7
 800f64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64e:	4770      	bx	lr

0800f650 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800f650:	b480      	push	{r7}
 800f652:	b083      	sub	sp, #12
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	3304      	adds	r3, #4
 800f65c:	4618      	mov	r0, r3
 800f65e:	370c      	adds	r7, #12
 800f660:	46bd      	mov	sp, r7
 800f662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f666:	4770      	bx	lr

0800f668 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800f668:	b480      	push	{r7}
 800f66a:	b083      	sub	sp, #12
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	6078      	str	r0, [r7, #4]
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	331c      	adds	r3, #28
 800f674:	4618      	mov	r0, r3
 800f676:	370c      	adds	r7, #12
 800f678:	46bd      	mov	sp, r7
 800f67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67e:	4770      	bx	lr

0800f680 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1ERSK_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800f680:	b580      	push	{r7, lr}
 800f682:	b082      	sub	sp, #8
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
 800f688:	6039      	str	r1, [r7, #0]
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	6839      	ldr	r1, [r7, #0]
 800f68e:	4618      	mov	r0, r3
 800f690:	f000 fbcb 	bl	800fe2a <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1ERKSJ_>
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	4618      	mov	r0, r3
 800f698:	3708      	adds	r7, #8
 800f69a:	46bd      	mov	sp, r7
 800f69c:	bd80      	pop	{r7, pc}

0800f69e <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1ERS9_>:
 800f69e:	b580      	push	{r7, lr}
 800f6a0:	b082      	sub	sp, #8
 800f6a2:	af00      	add	r7, sp, #0
 800f6a4:	6078      	str	r0, [r7, #4]
 800f6a6:	6039      	str	r1, [r7, #0]
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	6839      	ldr	r1, [r7, #0]
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	f000 fbcb 	bl	800fe48 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1ERKS8_>
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	3708      	adds	r7, #8
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	bd80      	pop	{r7, pc}

0800f6bc <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 800f6bc:	b480      	push	{r7}
 800f6be:	b083      	sub	sp, #12
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	370c      	adds	r7, #12
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d0:	4770      	bx	lr

0800f6d2 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f6d2:	b580      	push	{r7, lr}
 800f6d4:	b084      	sub	sp, #16
 800f6d6:	af00      	add	r7, sp, #0
 800f6d8:	60f8      	str	r0, [r7, #12]
 800f6da:	60b9      	str	r1, [r7, #8]
 800f6dc:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	68ba      	ldr	r2, [r7, #8]
 800f6e2:	6879      	ldr	r1, [r7, #4]
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	f000 fbc6 	bl	800fe76 <_ZNK5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfE5coeffEii>
 800f6ea:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f6ee:	eeb0 0a67 	vmov.f32	s0, s15
 800f6f2:	3710      	adds	r7, #16
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	bd80      	pop	{r7, pc}

0800f6f8 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f6f8:	b5b0      	push	{r4, r5, r7, lr}
 800f6fa:	b084      	sub	sp, #16
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	60f8      	str	r0, [r7, #12]
 800f700:	60b9      	str	r1, [r7, #8]
 800f702:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	681c      	ldr	r4, [r3, #0]
 800f708:	68f8      	ldr	r0, [r7, #12]
 800f70a:	f000 fbd4 	bl	800feb6 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE9colStrideEv>
 800f70e:	4602      	mov	r2, r0
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	fb03 f502 	mul.w	r5, r3, r2
 800f716:	68f8      	ldr	r0, [r7, #12]
 800f718:	f000 fbd8 	bl	800fecc <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE9rowStrideEv>
 800f71c:	4602      	mov	r2, r0
 800f71e:	68bb      	ldr	r3, [r7, #8]
 800f720:	fb02 f303 	mul.w	r3, r2, r3
 800f724:	442b      	add	r3, r5
 800f726:	009b      	lsls	r3, r3, #2
 800f728:	4423      	add	r3, r4
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	ee07 3a90 	vmov	s15, r3
  }
 800f730:	eeb0 0a67 	vmov.f32	s0, s15
 800f734:	3710      	adds	r7, #16
 800f736:	46bd      	mov	sp, r7
 800f738:	bdb0      	pop	{r4, r5, r7, pc}

0800f73a <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERKS9_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800f73a:	b580      	push	{r7, lr}
 800f73c:	b082      	sub	sp, #8
 800f73e:	af00      	add	r7, sp, #0
 800f740:	6078      	str	r0, [r7, #4]
 800f742:	6039      	str	r1, [r7, #0]
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	6839      	ldr	r1, [r7, #0]
 800f748:	4618      	mov	r0, r3
 800f74a:	f000 fbca 	bl	800fee2 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfEC1ERKS9_>
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	4618      	mov	r0, r3
 800f752:	3708      	adds	r7, #8
 800f754:	46bd      	mov	sp, r7
 800f756:	bd80      	pop	{r7, pc}

0800f758 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 800f758:	b580      	push	{r7, lr}
 800f75a:	b082      	sub	sp, #8
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
 800f760:	6039      	str	r1, [r7, #0]
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	6839      	ldr	r1, [r7, #0]
 800f766:	4618      	mov	r0, r3
 800f768:	f000 fbd1 	bl	800ff0e <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li3ELi1ELb1EEE>
  }
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	4618      	mov	r0, r3
 800f770:	3708      	adds	r7, #8
 800f772:	46bd      	mov	sp, r7
 800f774:	bd80      	pop	{r7, pc}

0800f776 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 800f776:	b480      	push	{r7}
 800f778:	b083      	sub	sp, #12
 800f77a:	af00      	add	r7, sp, #0
 800f77c:	6078      	str	r0, [r7, #4]
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	4618      	mov	r0, r3
 800f782:	370c      	adds	r7, #12
 800f784:	46bd      	mov	sp, r7
 800f786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78a:	4770      	bx	lr

0800f78c <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b084      	sub	sp, #16
 800f790:	af00      	add	r7, sp, #0
 800f792:	60f8      	str	r0, [r7, #12]
 800f794:	60b9      	str	r1, [r7, #8]
 800f796:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	68ba      	ldr	r2, [r7, #8]
 800f79c:	6879      	ldr	r1, [r7, #4]
 800f79e:	4618      	mov	r0, r3
 800f7a0:	f000 fbc9 	bl	800ff36 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE5coeffEii>
 800f7a4:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f7a8:	eeb0 0a67 	vmov.f32	s0, s15
 800f7ac:	3710      	adds	r7, #16
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	bd80      	pop	{r7, pc}

0800f7b2 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f7b2:	b5b0      	push	{r4, r5, r7, lr}
 800f7b4:	b084      	sub	sp, #16
 800f7b6:	af00      	add	r7, sp, #0
 800f7b8:	60f8      	str	r0, [r7, #12]
 800f7ba:	60b9      	str	r1, [r7, #8]
 800f7bc:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	681c      	ldr	r4, [r3, #0]
 800f7c2:	68f8      	ldr	r0, [r7, #12]
 800f7c4:	f000 fbd8 	bl	800ff78 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E9colStrideEv>
 800f7c8:	4602      	mov	r2, r0
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	fb03 f502 	mul.w	r5, r3, r2
 800f7d0:	68f8      	ldr	r0, [r7, #12]
 800f7d2:	f000 fbdc 	bl	800ff8e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E9rowStrideEv>
 800f7d6:	4602      	mov	r2, r0
 800f7d8:	68bb      	ldr	r3, [r7, #8]
 800f7da:	fb02 f303 	mul.w	r3, r2, r3
 800f7de:	442b      	add	r3, r5
 800f7e0:	009b      	lsls	r3, r3, #2
 800f7e2:	4423      	add	r3, r4
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	ee07 3a90 	vmov	s15, r3
  }
 800f7ea:	eeb0 0a67 	vmov.f32	s0, s15
 800f7ee:	3710      	adds	r7, #16
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	bdb0      	pop	{r4, r5, r7, pc}

0800f7f4 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800f7f4:	b480      	push	{r7}
 800f7f6:	b083      	sub	sp, #12
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	4618      	mov	r0, r3
 800f802:	370c      	adds	r7, #12
 800f804:	46bd      	mov	sp, r7
 800f806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80a:	4770      	bx	lr

0800f80c <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800f80c:	b480      	push	{r7}
 800f80e:	b083      	sub	sp, #12
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	685b      	ldr	r3, [r3, #4]
 800f818:	4618      	mov	r0, r3
 800f81a:	370c      	adds	r7, #12
 800f81c:	46bd      	mov	sp, r7
 800f81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f822:	4770      	bx	lr

0800f824 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS_10DenseShapeES4_Li3EE6evalToIS3_EEvRT_RKS3_SA_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800f824:	b580      	push	{r7, lr}
 800f826:	b088      	sub	sp, #32
 800f828:	af00      	add	r7, sp, #0
 800f82a:	60f8      	str	r0, [r7, #12]
 800f82c:	60b9      	str	r1, [r7, #8]
 800f82e:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 800f830:	f107 0314 	add.w	r3, r7, #20
 800f834:	687a      	ldr	r2, [r7, #4]
 800f836:	68b9      	ldr	r1, [r7, #8]
 800f838:	4618      	mov	r0, r3
 800f83a:	f000 fbb3 	bl	800ffa4 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductIS2_EEKNS_7ProductIS2_T_Li1EEERKNS0_IS6_EE>
 800f83e:	f107 031c 	add.w	r3, r7, #28
 800f842:	4618      	mov	r0, r3
 800f844:	f7f7 fc45 	bl	80070d2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800f848:	f107 021c 	add.w	r2, r7, #28
 800f84c:	f107 0314 	add.w	r3, r7, #20
 800f850:	4619      	mov	r1, r3
 800f852:	68f8      	ldr	r0, [r7, #12]
 800f854:	f000 fbbd 	bl	800ffd2 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800f858:	bf00      	nop
 800f85a:	3720      	adds	r7, #32
 800f85c:	46bd      	mov	sp, r7
 800f85e:	bd80      	pop	{r7, pc}

0800f860 <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ENS_5DenseEEC1ERS5_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 800f860:	b580      	push	{r7, lr}
 800f862:	b084      	sub	sp, #16
 800f864:	af00      	add	r7, sp, #0
 800f866:	60f8      	str	r0, [r7, #12]
 800f868:	60b9      	str	r1, [r7, #8]
 800f86a:	607a      	str	r2, [r7, #4]
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	687a      	ldr	r2, [r7, #4]
 800f870:	68b9      	ldr	r1, [r7, #8]
 800f872:	4618      	mov	r0, r3
 800f874:	f000 fbbe 	bl	800fff4 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EEC1ERS6_i>
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	4618      	mov	r0, r3
 800f87c:	3710      	adds	r7, #16
 800f87e:	46bd      	mov	sp, r7
 800f880:	bd80      	pop	{r7, pc}

0800f882 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800f882:	b480      	push	{r7}
 800f884:	b083      	sub	sp, #12
 800f886:	af00      	add	r7, sp, #0
 800f888:	6078      	str	r0, [r7, #4]
    }
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	4618      	mov	r0, r3
 800f88e:	370c      	adds	r7, #12
 800f890:	46bd      	mov	sp, r7
 800f892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f896:	4770      	bx	lr

0800f898 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800f898:	b580      	push	{r7, lr}
 800f89a:	b082      	sub	sp, #8
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	f7fc f889 	bl	800b9ba <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800f8a8:	4603      	mov	r3, r0
    }
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	3708      	adds	r7, #8
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	bd80      	pop	{r7, pc}

0800f8b2 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800f8b2:	b580      	push	{r7, lr}
 800f8b4:	b082      	sub	sp, #8
 800f8b6:	af00      	add	r7, sp, #0
 800f8b8:	6078      	str	r0, [r7, #4]
 800f8ba:	6039      	str	r1, [r7, #0]
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	6839      	ldr	r1, [r7, #0]
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	f000 fbcd 	bl	8010060 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1ERKSI_>
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	3708      	adds	r7, #8
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	bd80      	pop	{r7, pc}

0800f8d0 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800f8d0:	b480      	push	{r7}
 800f8d2:	b083      	sub	sp, #12
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	6078      	str	r0, [r7, #4]
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	4618      	mov	r0, r3
 800f8dc:	370c      	adds	r7, #12
 800f8de:	46bd      	mov	sp, r7
 800f8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e4:	4770      	bx	lr

0800f8e6 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>:
 800f8e6:	b480      	push	{r7}
 800f8e8:	b083      	sub	sp, #12
 800f8ea:	af00      	add	r7, sp, #0
 800f8ec:	6078      	str	r0, [r7, #4]
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	370c      	adds	r7, #12
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8fa:	4770      	bx	lr

0800f8fc <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b084      	sub	sp, #16
 800f900:	af00      	add	r7, sp, #0
 800f902:	60f8      	str	r0, [r7, #12]
 800f904:	60b9      	str	r1, [r7, #8]
 800f906:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800f908:	68b9      	ldr	r1, [r7, #8]
 800f90a:	68f8      	ldr	r0, [r7, #12]
 800f90c:	f000 fbb7 	bl	801007e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi3EE3runERKSM_RKS3_>
 800f910:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f914:	eeb0 0a67 	vmov.f32	s0, s15
 800f918:	3710      	adds	r7, #16
 800f91a:	46bd      	mov	sp, r7
 800f91c:	bd80      	pop	{r7, pc}

0800f91e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800f91e:	b580      	push	{r7, lr}
 800f920:	b082      	sub	sp, #8
 800f922:	af00      	add	r7, sp, #0
 800f924:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800f926:	2200      	movs	r2, #0
 800f928:	2102      	movs	r1, #2
 800f92a:	6878      	ldr	r0, [r7, #4]
 800f92c:	f7fd f983 	bl	800cc36 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800f930:	6878      	ldr	r0, [r7, #4]
 800f932:	f000 fbc8 	bl	80100c6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSG_>
  }
 800f936:	bf00      	nop
 800f938:	3708      	adds	r7, #8
 800f93a:	46bd      	mov	sp, r7
 800f93c:	bd80      	pop	{r7, pc}

0800f93e <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1ERKS8_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800f93e:	b580      	push	{r7, lr}
 800f940:	b082      	sub	sp, #8
 800f942:	af00      	add	r7, sp, #0
 800f944:	6078      	str	r0, [r7, #4]
 800f946:	6039      	str	r1, [r7, #0]
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	6839      	ldr	r1, [r7, #0]
 800f94c:	4618      	mov	r0, r3
 800f94e:	f000 fbca 	bl	80100e6 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	4618      	mov	r0, r3
 800f956:	3708      	adds	r7, #8
 800f958:	46bd      	mov	sp, r7
 800f95a:	bd80      	pop	{r7, pc}

0800f95c <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEED1Ev>:
 800f95c:	b480      	push	{r7}
 800f95e:	b083      	sub	sp, #12
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	4618      	mov	r0, r3
 800f968:	370c      	adds	r7, #12
 800f96a:	46bd      	mov	sp, r7
 800f96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f970:	4770      	bx	lr

0800f972 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
 800f972:	b480      	push	{r7}
 800f974:	b083      	sub	sp, #12
 800f976:	af00      	add	r7, sp, #0
 800f978:	6078      	str	r0, [r7, #4]
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	4618      	mov	r0, r3
 800f97e:	370c      	adds	r7, #12
 800f980:	46bd      	mov	sp, r7
 800f982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f986:	4770      	bx	lr

0800f988 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
 800f988:	b480      	push	{r7}
 800f98a:	b083      	sub	sp, #12
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	4618      	mov	r0, r3
 800f994:	370c      	adds	r7, #12
 800f996:	46bd      	mov	sp, r7
 800f998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99c:	4770      	bx	lr

0800f99e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800f99e:	b580      	push	{r7, lr}
 800f9a0:	b082      	sub	sp, #8
 800f9a2:	af00      	add	r7, sp, #0
 800f9a4:	6078      	str	r0, [r7, #4]
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	f7f5 fb61 	bl	8005072 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800f9b0:	4603      	mov	r3, r0
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	3708      	adds	r7, #8
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	bd80      	pop	{r7, pc}

0800f9ba <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800f9ba:	b580      	push	{r7, lr}
 800f9bc:	b082      	sub	sp, #8
 800f9be:	af00      	add	r7, sp, #0
 800f9c0:	6078      	str	r0, [r7, #4]
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	3304      	adds	r3, #4
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	f7f7 fa3b 	bl	8006e42 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 800f9cc:	4603      	mov	r3, r0
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	3708      	adds	r7, #8
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	bd80      	pop	{r7, pc}
	...

0800f9d8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b086      	sub	sp, #24
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	60f8      	str	r0, [r7, #12]
 800f9e0:	60b9      	str	r1, [r7, #8]
 800f9e2:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 800f9e4:	68b8      	ldr	r0, [r7, #8]
 800f9e6:	f7ff ffda 	bl	800f99e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE4rowsEv>
 800f9ea:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 800f9ec:	68b8      	ldr	r0, [r7, #8]
 800f9ee:	f7ff ffe4 	bl	800f9ba <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE4colsEv>
 800f9f2:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f7f5 fbe1 	bl	80051be <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800f9fc:	4602      	mov	r2, r0
 800f9fe:	697b      	ldr	r3, [r7, #20]
 800fa00:	4293      	cmp	r3, r2
 800fa02:	d107      	bne.n	800fa14 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	4618      	mov	r0, r3
 800fa08:	f7f5 fbce 	bl	80051a8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800fa0c:	4602      	mov	r2, r0
 800fa0e:	693b      	ldr	r3, [r7, #16]
 800fa10:	4293      	cmp	r3, r2
 800fa12:	d001      	beq.n	800fa18 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 800fa14:	2301      	movs	r3, #1
 800fa16:	e000      	b.n	800fa1a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 800fa18:	2300      	movs	r3, #0
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d005      	beq.n	800fa2a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	693a      	ldr	r2, [r7, #16]
 800fa22:	6979      	ldr	r1, [r7, #20]
 800fa24:	4618      	mov	r0, r3
 800fa26:	f7f8 fad5 	bl	8007fd4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	f7f5 fbc6 	bl	80051be <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800fa32:	4602      	mov	r2, r0
 800fa34:	697b      	ldr	r3, [r7, #20]
 800fa36:	4293      	cmp	r3, r2
 800fa38:	d107      	bne.n	800fa4a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	f7f5 fbb3 	bl	80051a8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800fa42:	4602      	mov	r2, r0
 800fa44:	693b      	ldr	r3, [r7, #16]
 800fa46:	4293      	cmp	r3, r2
 800fa48:	d006      	beq.n	800fa58 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 800fa4a:	4b05      	ldr	r3, [pc, #20]	; (800fa60 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 800fa4c:	4a05      	ldr	r2, [pc, #20]	; (800fa64 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 800fa4e:	f240 21fd 	movw	r1, #765	; 0x2fd
 800fa52:	4805      	ldr	r0, [pc, #20]	; (800fa68 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 800fa54:	f00e fa26 	bl	801dea4 <__assert_func>
}
 800fa58:	bf00      	nop
 800fa5a:	3718      	adds	r7, #24
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	bd80      	pop	{r7, pc}
 800fa60:	08022384 	.word	0x08022384
 800fa64:	08027944 	.word	0x08027944
 800fa68:	08022498 	.word	0x08022498

0800fa6c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSC_RKSE_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 800fa6c:	b480      	push	{r7}
 800fa6e:	b085      	sub	sp, #20
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	60f8      	str	r0, [r7, #12]
 800fa74:	60b9      	str	r1, [r7, #8]
 800fa76:	607a      	str	r2, [r7, #4]
 800fa78:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	68ba      	ldr	r2, [r7, #8]
 800fa7e:	601a      	str	r2, [r3, #0]
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	687a      	ldr	r2, [r7, #4]
 800fa84:	605a      	str	r2, [r3, #4]
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	683a      	ldr	r2, [r7, #0]
 800fa8a:	609a      	str	r2, [r3, #8]
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	69ba      	ldr	r2, [r7, #24]
 800fa90:	60da      	str	r2, [r3, #12]
  }
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	4618      	mov	r0, r3
 800fa96:	3714      	adds	r7, #20
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9e:	4770      	bx	lr

0800faa0 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b082      	sub	sp, #8
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 800faa8:	6878      	ldr	r0, [r7, #4]
 800faaa:	f000 fb53 	bl	8010154 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSG_>
  }
 800faae:	bf00      	nop
 800fab0:	3708      	adds	r7, #8
 800fab2:	46bd      	mov	sp, r7
 800fab4:	bd80      	pop	{r7, pc}

0800fab6 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSG_RKSI_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800fab6:	b580      	push	{r7, lr}
 800fab8:	b084      	sub	sp, #16
 800faba:	af00      	add	r7, sp, #0
 800fabc:	60f8      	str	r0, [r7, #12]
 800fabe:	60b9      	str	r1, [r7, #8]
 800fac0:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800fac2:	68b9      	ldr	r1, [r7, #8]
 800fac4:	68f8      	ldr	r0, [r7, #12]
 800fac6:	f000 fb54 	bl	8010172 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800faca:	687a      	ldr	r2, [r7, #4]
 800facc:	68b9      	ldr	r1, [r7, #8]
 800face:	68f8      	ldr	r0, [r7, #12]
 800fad0:	f000 fbbe 	bl	8010250 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800fad4:	bf00      	nop
 800fad6:	3710      	adds	r7, #16
 800fad8:	46bd      	mov	sp, r7
 800fada:	bd80      	pop	{r7, pc}

0800fadc <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERKS9_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800fadc:	b580      	push	{r7, lr}
 800fade:	b082      	sub	sp, #8
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	6078      	str	r0, [r7, #4]
 800fae4:	6039      	str	r1, [r7, #0]
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	6839      	ldr	r1, [r7, #0]
 800faea:	4618      	mov	r0, r3
 800faec:	f000 fbe8 	bl	80102c0 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfEC1ERKS9_>
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	4618      	mov	r0, r3
 800faf4:	3708      	adds	r7, #8
 800faf6:	46bd      	mov	sp, r7
 800faf8:	bd80      	pop	{r7, pc}

0800fafa <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 800fafa:	b580      	push	{r7, lr}
 800fafc:	b082      	sub	sp, #8
 800fafe:	af00      	add	r7, sp, #0
 800fb00:	6078      	str	r0, [r7, #4]
 800fb02:	6039      	str	r1, [r7, #0]
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	6839      	ldr	r1, [r7, #0]
 800fb08:	4618      	mov	r0, r3
 800fb0a:	f000 fbef 	bl	80102ec <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb1EEE>
  }
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	4618      	mov	r0, r3
 800fb12:	3708      	adds	r7, #8
 800fb14:	46bd      	mov	sp, r7
 800fb16:	bd80      	pop	{r7, pc}

0800fb18 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800fb18:	b5b0      	push	{r4, r5, r7, lr}
 800fb1a:	b084      	sub	sp, #16
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	60f8      	str	r0, [r7, #12]
 800fb20:	60b9      	str	r1, [r7, #8]
 800fb22:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	681c      	ldr	r4, [r3, #0]
 800fb28:	68f8      	ldr	r0, [r7, #12]
 800fb2a:	f000 fbf3 	bl	8010314 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE9colStrideEv>
 800fb2e:	4602      	mov	r2, r0
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	fb03 f502 	mul.w	r5, r3, r2
 800fb36:	68f8      	ldr	r0, [r7, #12]
 800fb38:	f000 fbf7 	bl	801032a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE9rowStrideEv>
 800fb3c:	4602      	mov	r2, r0
 800fb3e:	68bb      	ldr	r3, [r7, #8]
 800fb40:	fb02 f303 	mul.w	r3, r2, r3
 800fb44:	442b      	add	r3, r5
 800fb46:	009b      	lsls	r3, r3, #2
 800fb48:	4423      	add	r3, r4
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	ee07 3a90 	vmov	s15, r3
  }
 800fb50:	eeb0 0a67 	vmov.f32	s0, s15
 800fb54:	3710      	adds	r7, #16
 800fb56:	46bd      	mov	sp, r7
 800fb58:	bdb0      	pop	{r4, r5, r7, pc}

0800fb5a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 800fb5a:	b580      	push	{r7, lr}
 800fb5c:	b082      	sub	sp, #8
 800fb5e:	af00      	add	r7, sp, #0
 800fb60:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 800fb62:	f7f7 f858 	bl	8006c16 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800fb66:	4603      	mov	r3, r0
  }
 800fb68:	4618      	mov	r0, r3
 800fb6a:	3708      	adds	r7, #8
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	bd80      	pop	{r7, pc}

0800fb70 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b082      	sub	sp, #8
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 800fb78:	f7f7 f84d 	bl	8006c16 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800fb7c:	4603      	mov	r3, r0
  }
 800fb7e:	4618      	mov	r0, r3
 800fb80:	3708      	adds	r7, #8
 800fb82:	46bd      	mov	sp, r7
 800fb84:	bd80      	pop	{r7, pc}

0800fb86 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_EEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800fb86:	b480      	push	{r7}
 800fb88:	b083      	sub	sp, #12
 800fb8a:	af00      	add	r7, sp, #0
 800fb8c:	6078      	str	r0, [r7, #4]
 800fb8e:	6039      	str	r1, [r7, #0]
}
 800fb90:	bf00      	nop
 800fb92:	370c      	adds	r7, #12
 800fb94:	46bd      	mov	sp, r7
 800fb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9a:	4770      	bx	lr

0800fb9c <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	b08c      	sub	sp, #48	; 0x30
 800fba0:	af02      	add	r7, sp, #8
 800fba2:	60f8      	str	r0, [r7, #12]
 800fba4:	60b9      	str	r1, [r7, #8]
 800fba6:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800fba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fbac:	68b9      	ldr	r1, [r7, #8]
 800fbae:	4618      	mov	r0, r3
 800fbb0:	f7fa fd4f 	bl	800a652 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
  resize_if_allowed(dst, src, func);
 800fbb4:	687a      	ldr	r2, [r7, #4]
 800fbb6:	68b9      	ldr	r1, [r7, #8]
 800fbb8:	68f8      	ldr	r0, [r7, #12]
 800fbba:	f000 fbc1 	bl	8010340 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800fbbe:	f107 0320 	add.w	r3, r7, #32
 800fbc2:	68f9      	ldr	r1, [r7, #12]
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	f7fa fd44 	bl	800a652 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800fbca:	68f8      	ldr	r0, [r7, #12]
 800fbcc:	f000 fc04 	bl	80103d8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE18const_cast_derivedEv>
 800fbd0:	4603      	mov	r3, r0
 800fbd2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800fbd6:	f107 0120 	add.w	r1, r7, #32
 800fbda:	f107 0010 	add.w	r0, r7, #16
 800fbde:	9300      	str	r3, [sp, #0]
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	f000 fc04 	bl	80103ee <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800fbe6:	f107 0310 	add.w	r3, r7, #16
 800fbea:	4618      	mov	r0, r3
 800fbec:	f000 fc19 	bl	8010422 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>
  DstEvaluatorType dstEvaluator(dst);
 800fbf0:	f107 0320 	add.w	r3, r7, #32
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	f7f9 fc13 	bl	8009420 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800fbfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fbfe:	4618      	mov	r0, r3
 800fc00:	f7f9 fc0e 	bl	8009420 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
}
 800fc04:	bf00      	nop
 800fc06:	3728      	adds	r7, #40	; 0x28
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	bd80      	pop	{r7, pc}

0800fc0c <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800fc0c:	b480      	push	{r7}
 800fc0e:	b083      	sub	sp, #12
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	4618      	mov	r0, r3
 800fc1a:	370c      	adds	r7, #12
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc22:	4770      	bx	lr

0800fc24 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800fc24:	b480      	push	{r7}
 800fc26:	b083      	sub	sp, #12
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	6078      	str	r0, [r7, #4]
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	685b      	ldr	r3, [r3, #4]
 800fc30:	4618      	mov	r0, r3
 800fc32:	370c      	adds	r7, #12
 800fc34:	46bd      	mov	sp, r7
 800fc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc3a:	4770      	bx	lr

0800fc3c <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEENS_10DenseShapeES5_Li6EE5subToINS2_IfLi1ELi1ELi0ELi1ELi1EEEEEvRT_RKS3_RKS4_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void subTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	ed2d 8b02 	vpush	{d8}
 800fc42:	b088      	sub	sp, #32
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	60f8      	str	r0, [r7, #12]
 800fc48:	60b9      	str	r1, [r7, #8]
 800fc4a:	607a      	str	r2, [r7, #4]
  { dst.coeffRef(0,0) -= (lhs.transpose().cwiseProduct(rhs)).sum(); }
 800fc4c:	68b8      	ldr	r0, [r7, #8]
 800fc4e:	f000 fbf3 	bl	8010438 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>
 800fc52:	4603      	mov	r3, r0
 800fc54:	61fb      	str	r3, [r7, #28]
 800fc56:	f107 0310 	add.w	r3, r7, #16
 800fc5a:	f107 011c 	add.w	r1, r7, #28
 800fc5e:	687a      	ldr	r2, [r7, #4]
 800fc60:	4618      	mov	r0, r3
 800fc62:	f000 fbfc 	bl	801045e <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE12cwiseProductINS2_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSA_6traitsIT_E6ScalarEEEKS5_KSD_EERKNS0_ISD_EE>
 800fc66:	f107 0310 	add.w	r3, r7, #16
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	f000 fc25 	bl	80104ba <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE3sumEv>
 800fc70:	eeb0 8a40 	vmov.f32	s16, s0
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	2200      	movs	r2, #0
 800fc78:	2100      	movs	r1, #0
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	f7f6 ff11 	bl	8006aa2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>
 800fc80:	4603      	mov	r3, r0
 800fc82:	edd3 7a00 	vldr	s15, [r3]
 800fc86:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800fc8a:	edc3 7a00 	vstr	s15, [r3]
 800fc8e:	bf00      	nop
 800fc90:	3720      	adds	r7, #32
 800fc92:	46bd      	mov	sp, r7
 800fc94:	ecbd 8b02 	vpop	{d8}
 800fc98:	bd80      	pop	{r7, pc}

0800fc9a <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>:
 800fc9a:	b580      	push	{r7, lr}
 800fc9c:	b082      	sub	sp, #8
 800fc9e:	af00      	add	r7, sp, #0
 800fca0:	6078      	str	r0, [r7, #4]
 800fca2:	6878      	ldr	r0, [r7, #4]
 800fca4:	f000 fc24 	bl	80104f0 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	4618      	mov	r0, r3
 800fcac:	3708      	adds	r7, #8
 800fcae:	46bd      	mov	sp, r7
 800fcb0:	bd80      	pop	{r7, pc}

0800fcb2 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi4EEC1Ev>:
class dense_product_base
 800fcb2:	b580      	push	{r7, lr}
 800fcb4:	b082      	sub	sp, #8
 800fcb6:	af00      	add	r7, sp, #0
 800fcb8:	6078      	str	r0, [r7, #4]
 800fcba:	6878      	ldr	r0, [r7, #4]
 800fcbc:	f7ff ffed 	bl	800fc9a <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	3708      	adds	r7, #8
 800fcc6:	46bd      	mov	sp, r7
 800fcc8:	bd80      	pop	{r7, pc}

0800fcca <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800fcca:	b580      	push	{r7, lr}
 800fccc:	b082      	sub	sp, #8
 800fcce:	af00      	add	r7, sp, #0
 800fcd0:	6078      	str	r0, [r7, #4]
 800fcd2:	6878      	ldr	r0, [r7, #4]
 800fcd4:	f7ff ffed 	bl	800fcb2 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi4EEC1Ev>
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	4618      	mov	r0, r3
 800fcdc:	3708      	adds	r7, #8
 800fcde:	46bd      	mov	sp, r7
 800fce0:	bd80      	pop	{r7, pc}
	...

0800fce4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 800fce4:	b590      	push	{r4, r7, lr}
 800fce6:	b085      	sub	sp, #20
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	60f8      	str	r0, [r7, #12]
 800fcec:	60b9      	str	r1, [r7, #8]
 800fcee:	607a      	str	r2, [r7, #4]
 800fcf0:	68f8      	ldr	r0, [r7, #12]
 800fcf2:	f7ff ffea 	bl	800fcca <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1ENS_5DenseEEC1Ev>
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	68ba      	ldr	r2, [r7, #8]
 800fcfa:	601a      	str	r2, [r3, #0]
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	687a      	ldr	r2, [r7, #4]
 800fd00:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 800fd02:	68bb      	ldr	r3, [r7, #8]
 800fd04:	4618      	mov	r0, r3
 800fd06:	f7f5 fa4f 	bl	80051a8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800fd0a:	4604      	mov	r4, r0
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	4618      	mov	r0, r3
 800fd10:	f7f5 fb71 	bl	80053f6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 800fd14:	4603      	mov	r3, r0
 800fd16:	429c      	cmp	r4, r3
 800fd18:	d005      	beq.n	800fd26 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_+0x42>
 800fd1a:	4b06      	ldr	r3, [pc, #24]	; (800fd34 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_+0x50>)
 800fd1c:	4a06      	ldr	r2, [pc, #24]	; (800fd38 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_+0x54>)
 800fd1e:	2160      	movs	r1, #96	; 0x60
 800fd20:	4806      	ldr	r0, [pc, #24]	; (800fd3c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_+0x58>)
 800fd22:	f00e f8bf 	bl	801dea4 <__assert_func>
 800fd26:	bf00      	nop
    }
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	3714      	adds	r7, #20
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	bd90      	pop	{r4, r7, pc}
 800fd32:	bf00      	nop
 800fd34:	0801ffcc 	.word	0x0801ffcc
 800fd38:	08027a6c 	.word	0x08027a6c
 800fd3c:	0802031c 	.word	0x0802031c

0800fd40 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b084      	sub	sp, #16
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	60f8      	str	r0, [r7, #12]
 800fd48:	60b9      	str	r1, [r7, #8]
 800fd4a:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800fd4c:	68b9      	ldr	r1, [r7, #8]
 800fd4e:	68f8      	ldr	r0, [r7, #12]
 800fd50:	f000 fbd9 	bl	8010506 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800fd54:	687a      	ldr	r2, [r7, #4]
 800fd56:	68b9      	ldr	r1, [r7, #8]
 800fd58:	68f8      	ldr	r0, [r7, #12]
 800fd5a:	f000 fc17 	bl	801058c <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800fd5e:	bf00      	nop
 800fd60:	3710      	adds	r7, #16
 800fd62:	46bd      	mov	sp, r7
 800fd64:	bd80      	pop	{r7, pc}

0800fd66 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800fd66:	b480      	push	{r7}
 800fd68:	b083      	sub	sp, #12
 800fd6a:	af00      	add	r7, sp, #0
 800fd6c:	6078      	str	r0, [r7, #4]
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	3330      	adds	r3, #48	; 0x30
 800fd72:	4618      	mov	r0, r3
 800fd74:	370c      	adds	r7, #12
 800fd76:	46bd      	mov	sp, r7
 800fd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7c:	4770      	bx	lr

0800fd7e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800fd7e:	b480      	push	{r7}
 800fd80:	b083      	sub	sp, #12
 800fd82:	af00      	add	r7, sp, #0
 800fd84:	6078      	str	r0, [r7, #4]
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	4618      	mov	r0, r3
 800fd8a:	370c      	adds	r7, #12
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd92:	4770      	bx	lr

0800fd94 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800fd94:	b480      	push	{r7}
 800fd96:	b083      	sub	sp, #12
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	3318      	adds	r3, #24
 800fda0:	4618      	mov	r0, r3
 800fda2:	370c      	adds	r7, #12
 800fda4:	46bd      	mov	sp, r7
 800fda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdaa:	4770      	bx	lr

0800fdac <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b082      	sub	sp, #8
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	6078      	str	r0, [r7, #4]
 800fdb4:	6039      	str	r1, [r7, #0]
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	6839      	ldr	r1, [r7, #0]
 800fdba:	4618      	mov	r0, r3
 800fdbc:	f000 fc1e 	bl	80105fc <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERKS6_>
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	3708      	adds	r7, #8
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	bd80      	pop	{r7, pc}

0800fdca <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800fdca:	b590      	push	{r4, r7, lr}
 800fdcc:	b087      	sub	sp, #28
 800fdce:	af00      	add	r7, sp, #0
 800fdd0:	60f8      	str	r0, [r7, #12]
 800fdd2:	60b9      	str	r1, [r7, #8]
 800fdd4:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	4618      	mov	r0, r3
 800fdda:	f000 fc1e 	bl	801061a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4Data4funcEv>
 800fdde:	4604      	mov	r4, r0
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	3304      	adds	r3, #4
 800fde4:	687a      	ldr	r2, [r7, #4]
 800fde6:	68b9      	ldr	r1, [r7, #8]
 800fde8:	4618      	mov	r0, r3
 800fdea:	f7ff fccf 	bl	800f78c <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 800fdee:	eef0 7a40 	vmov.f32	s15, s0
 800fdf2:	edc7 7a04 	vstr	s15, [r7, #16]
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	330c      	adds	r3, #12
 800fdfa:	687a      	ldr	r2, [r7, #4]
 800fdfc:	68b9      	ldr	r1, [r7, #8]
 800fdfe:	4618      	mov	r0, r3
 800fe00:	f000 fc16 	bl	8010630 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>
 800fe04:	eef0 7a40 	vmov.f32	s15, s0
 800fe08:	edc7 7a05 	vstr	s15, [r7, #20]
 800fe0c:	f107 0214 	add.w	r2, r7, #20
 800fe10:	f107 0310 	add.w	r3, r7, #16
 800fe14:	4619      	mov	r1, r3
 800fe16:	4620      	mov	r0, r4
 800fe18:	f7ff fafc 	bl	800f414 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 800fe1c:	eef0 7a40 	vmov.f32	s15, s0
  }
 800fe20:	eeb0 0a67 	vmov.f32	s0, s15
 800fe24:	371c      	adds	r7, #28
 800fe26:	46bd      	mov	sp, r7
 800fe28:	bd90      	pop	{r4, r7, pc}

0800fe2a <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1ERKSJ_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800fe2a:	b580      	push	{r7, lr}
 800fe2c:	b082      	sub	sp, #8
 800fe2e:	af00      	add	r7, sp, #0
 800fe30:	6078      	str	r0, [r7, #4]
 800fe32:	6039      	str	r1, [r7, #0]
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	6839      	ldr	r1, [r7, #0]
 800fe38:	4618      	mov	r0, r3
 800fe3a:	f000 fc1a 	bl	8010672 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfEC1ERKSJ_>
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	4618      	mov	r0, r3
 800fe42:	3708      	adds	r7, #8
 800fe44:	46bd      	mov	sp, r7
 800fe46:	bd80      	pop	{r7, pc}

0800fe48 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1ERKS8_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b082      	sub	sp, #8
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
 800fe50:	6039      	str	r1, [r7, #0]
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	6839      	ldr	r1, [r7, #0]
 800fe56:	4618      	mov	r0, r3
 800fe58:	f000 fc21 	bl	801069e <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS6_Li1ELi1ELb0EEE>
  }
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	4618      	mov	r0, r3
 800fe60:	3708      	adds	r7, #8
 800fe62:	46bd      	mov	sp, r7
 800fe64:	bd80      	pop	{r7, pc}

0800fe66 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EE5valueEv>:
    T value() { return T(Value); }
 800fe66:	b480      	push	{r7}
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	46bd      	mov	sp, r7
 800fe70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe74:	4770      	bx	lr

0800fe76 <_ZNK5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800fe76:	b5b0      	push	{r4, r5, r7, lr}
 800fe78:	b084      	sub	sp, #16
 800fe7a:	af00      	add	r7, sp, #0
 800fe7c:	60f8      	str	r0, [r7, #12]
 800fe7e:	60b9      	str	r1, [r7, #8]
 800fe80:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(m_startRow.value() + row, m_startCol.value() + col);
 800fe82:	68fc      	ldr	r4, [r7, #12]
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	3310      	adds	r3, #16
 800fe88:	4618      	mov	r0, r3
 800fe8a:	f000 fc1c 	bl	80106c6 <_ZNK5Eigen8internal19variable_if_dynamicIiLin1EE5valueEv>
 800fe8e:	4602      	mov	r2, r0
 800fe90:	68bb      	ldr	r3, [r7, #8]
 800fe92:	18d5      	adds	r5, r2, r3
 800fe94:	f7ff ffe7 	bl	800fe66 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EE5valueEv>
 800fe98:	4602      	mov	r2, r0
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	4413      	add	r3, r2
 800fe9e:	461a      	mov	r2, r3
 800fea0:	4629      	mov	r1, r5
 800fea2:	4620      	mov	r0, r4
 800fea4:	f000 fc1b 	bl	80106de <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE5coeffEii>
 800fea8:	eef0 7a40 	vmov.f32	s15, s0
  }
 800feac:	eeb0 0a67 	vmov.f32	s0, s15
 800feb0:	3710      	adds	r7, #16
 800feb2:	46bd      	mov	sp, r7
 800feb4:	bdb0      	pop	{r4, r5, r7, pc}

0800feb6 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 800feb6:	b580      	push	{r7, lr}
 800feb8:	b082      	sub	sp, #8
 800feba:	af00      	add	r7, sp, #0
 800febc:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 800febe:	f7f6 feaa 	bl	8006c16 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800fec2:	4603      	mov	r3, r0
  }
 800fec4:	4618      	mov	r0, r3
 800fec6:	3708      	adds	r7, #8
 800fec8:	46bd      	mov	sp, r7
 800feca:	bd80      	pop	{r7, pc}

0800fecc <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 800fecc:	b580      	push	{r7, lr}
 800fece:	b082      	sub	sp, #8
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 800fed4:	f7f6 fe97 	bl	8006c06 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800fed8:	4603      	mov	r3, r0
  }
 800feda:	4618      	mov	r0, r3
 800fedc:	3708      	adds	r7, #8
 800fede:	46bd      	mov	sp, r7
 800fee0:	bd80      	pop	{r7, pc}

0800fee2 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfEC1ERKS9_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 800fee2:	b590      	push	{r4, r7, lr}
 800fee4:	b083      	sub	sp, #12
 800fee6:	af00      	add	r7, sp, #0
 800fee8:	6078      	str	r0, [r7, #4]
 800feea:	6039      	str	r1, [r7, #0]
 800feec:	6878      	ldr	r0, [r7, #4]
 800feee:	f000 fc2d 	bl	801074c <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>
 800fef2:	687c      	ldr	r4, [r7, #4]
 800fef4:	6838      	ldr	r0, [r7, #0]
 800fef6:	f000 fc1e 	bl	8010736 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE16nestedExpressionEv>
 800fefa:	4603      	mov	r3, r0
 800fefc:	4619      	mov	r1, r3
 800fefe:	4620      	mov	r0, r4
 800ff00:	f000 fc2f 	bl	8010762 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS7_>
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	4618      	mov	r0, r3
 800ff08:	370c      	adds	r7, #12
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	bd90      	pop	{r4, r7, pc}

0800ff0e <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li3ELi1ELb1EEE>:
{
  typedef Block<ArgType, BlockRows, BlockCols, InnerPanel> XprType;
  typedef typename XprType::Scalar Scalar;

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  explicit block_evaluator(const XprType& block)
 800ff0e:	b580      	push	{r7, lr}
 800ff10:	b082      	sub	sp, #8
 800ff12:	af00      	add	r7, sp, #0
 800ff14:	6078      	str	r0, [r7, #4]
 800ff16:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	6839      	ldr	r1, [r7, #0]
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	f000 fc2f 	bl	8010780 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_EC1ERKS6_>
  {
    // TODO: for the 3.3 release, this should be turned to an internal assertion, but let's keep it as is for the beta lifetime
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 800ff22:	683b      	ldr	r3, [r7, #0]
 800ff24:	4618      	mov	r0, r3
 800ff26:	f000 fc55 	bl	80107d4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4dataEv>
 800ff2a:	bf00      	nop
  }
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	4618      	mov	r0, r3
 800ff30:	3708      	adds	r7, #8
 800ff32:	46bd      	mov	sp, r7
 800ff34:	bd80      	pop	{r7, pc}

0800ff36 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800ff36:	b5b0      	push	{r4, r5, r7, lr}
 800ff38:	b084      	sub	sp, #16
 800ff3a:	af00      	add	r7, sp, #0
 800ff3c:	60f8      	str	r0, [r7, #12]
 800ff3e:	60b9      	str	r1, [r7, #8]
 800ff40:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	681c      	ldr	r4, [r3, #0]
 800ff46:	68f8      	ldr	r0, [r7, #12]
 800ff48:	f000 fc50 	bl	80107ec <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE9colStrideEv>
 800ff4c:	4602      	mov	r2, r0
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	fb03 f502 	mul.w	r5, r3, r2
 800ff54:	68f8      	ldr	r0, [r7, #12]
 800ff56:	f000 fc54 	bl	8010802 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE9rowStrideEv>
 800ff5a:	4602      	mov	r2, r0
 800ff5c:	68bb      	ldr	r3, [r7, #8]
 800ff5e:	fb02 f303 	mul.w	r3, r2, r3
 800ff62:	442b      	add	r3, r5
 800ff64:	009b      	lsls	r3, r3, #2
 800ff66:	4423      	add	r3, r4
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	ee07 3a90 	vmov	s15, r3
  }
 800ff6e:	eeb0 0a67 	vmov.f32	s0, s15
 800ff72:	3710      	adds	r7, #16
 800ff74:	46bd      	mov	sp, r7
 800ff76:	bdb0      	pop	{r4, r5, r7, pc}

0800ff78 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b082      	sub	sp, #8
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 800ff80:	f7f6 fe41 	bl	8006c06 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800ff84:	4603      	mov	r3, r0
  }
 800ff86:	4618      	mov	r0, r3
 800ff88:	3708      	adds	r7, #8
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	bd80      	pop	{r7, pc}

0800ff8e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 800ff8e:	b580      	push	{r7, lr}
 800ff90:	b082      	sub	sp, #8
 800ff92:	af00      	add	r7, sp, #0
 800ff94:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 800ff96:	f7f6 fe3e 	bl	8006c16 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800ff9a:	4603      	mov	r3, r0
  }
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	3708      	adds	r7, #8
 800ffa0:	46bd      	mov	sp, r7
 800ffa2:	bd80      	pop	{r7, pc}

0800ffa4 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductIS2_EEKNS_7ProductIS2_T_Li1EEERKNS0_IS6_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 800ffa4:	b590      	push	{r4, r7, lr}
 800ffa6:	b085      	sub	sp, #20
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	60f8      	str	r0, [r7, #12]
 800ffac:	60b9      	str	r1, [r7, #8]
 800ffae:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 800ffb0:	68b8      	ldr	r0, [r7, #8]
 800ffb2:	f7f5 fc68 	bl	8005886 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800ffb6:	4604      	mov	r4, r0
 800ffb8:	6878      	ldr	r0, [r7, #4]
 800ffba:	f7f5 fc64 	bl	8005886 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800ffbe:	4603      	mov	r3, r0
 800ffc0:	461a      	mov	r2, r3
 800ffc2:	4621      	mov	r1, r4
 800ffc4:	68f8      	ldr	r0, [r7, #12]
 800ffc6:	f000 fc4b 	bl	8010860 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_>
}
 800ffca:	68f8      	ldr	r0, [r7, #12]
 800ffcc:	3714      	adds	r7, #20
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	bd90      	pop	{r4, r7, pc}

0800ffd2 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800ffd2:	b580      	push	{r7, lr}
 800ffd4:	b086      	sub	sp, #24
 800ffd6:	af00      	add	r7, sp, #0
 800ffd8:	60f8      	str	r0, [r7, #12]
 800ffda:	60b9      	str	r1, [r7, #8]
 800ffdc:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800ffe2:	687a      	ldr	r2, [r7, #4]
 800ffe4:	68b9      	ldr	r1, [r7, #8]
 800ffe6:	6978      	ldr	r0, [r7, #20]
 800ffe8:	f000 fc68 	bl	80108bc <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_>
}
 800ffec:	bf00      	nop
 800ffee:	3718      	adds	r7, #24
 800fff0:	46bd      	mov	sp, r7
 800fff2:	bd80      	pop	{r7, pc}

0800fff4 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EEC1ERS6_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800fff4:	b5b0      	push	{r4, r5, r7, lr}
 800fff6:	b084      	sub	sp, #16
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	60f8      	str	r0, [r7, #12]
 800fffc:	60b9      	str	r1, [r7, #8]
 800fffe:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8010000:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8010002:	68b8      	ldr	r0, [r7, #8]
 8010004:	f000 fc6d 	bl	80108e2 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE4dataEv>
 8010008:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 801000a:	68b8      	ldr	r0, [r7, #8]
 801000c:	f000 fc7d 	bl	801090a <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11innerStrideEv>
 8010010:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	fb02 f303 	mul.w	r3, r2, r3
 8010018:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 801001a:	441d      	add	r5, r3
 801001c:	68b8      	ldr	r0, [r7, #8]
 801001e:	f7f5 fd76 	bl	8005b0e <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8010022:	4602      	mov	r2, r0
 8010024:	2301      	movs	r3, #1
 8010026:	4629      	mov	r1, r5
 8010028:	4620      	mov	r0, r4
 801002a:	f000 fca3 	bl	8010974 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii>
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	3308      	adds	r3, #8
 8010032:	68ba      	ldr	r2, [r7, #8]
 8010034:	6812      	ldr	r2, [r2, #0]
 8010036:	601a      	str	r2, [r3, #0]
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	330c      	adds	r3, #12
 801003c:	2100      	movs	r1, #0
 801003e:	4618      	mov	r0, r3
 8010040:	f7fd fe30 	bl	800dca4 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	3310      	adds	r3, #16
 8010048:	6879      	ldr	r1, [r7, #4]
 801004a:	4618      	mov	r0, r3
 801004c:	f7fd fe2a 	bl	800dca4 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 8010050:	68f8      	ldr	r0, [r7, #12]
 8010052:	f000 fccd 	bl	80109f0 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE4initEv>
    }
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	4618      	mov	r0, r3
 801005a:	3710      	adds	r7, #16
 801005c:	46bd      	mov	sp, r7
 801005e:	bdb0      	pop	{r4, r5, r7, pc}

08010060 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8010060:	b580      	push	{r7, lr}
 8010062:	b082      	sub	sp, #8
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
 8010068:	6039      	str	r1, [r7, #0]
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	6839      	ldr	r1, [r7, #0]
 801006e:	4618      	mov	r0, r3
 8010070:	f000 fcce 	bl	8010a10 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	4618      	mov	r0, r3
 8010078:	3708      	adds	r7, #8
 801007a:	46bd      	mov	sp, r7
 801007c:	bd80      	pop	{r7, pc}

0801007e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi3EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 801007e:	b580      	push	{r7, lr}
 8010080:	b084      	sub	sp, #16
 8010082:	af00      	add	r7, sp, #0
 8010084:	6078      	str	r0, [r7, #4]
 8010086:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8010088:	6839      	ldr	r1, [r7, #0]
 801008a:	6878      	ldr	r0, [r7, #4]
 801008c:	f000 fcd2 	bl	8010a34 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 8010090:	eef0 7a40 	vmov.f32	s15, s0
 8010094:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8010098:	6839      	ldr	r1, [r7, #0]
 801009a:	6878      	ldr	r0, [r7, #4]
 801009c:	f000 fcdb 	bl	8010a56 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi1ELi2EE3runERKSM_RKS3_>
 80100a0:	eef0 7a40 	vmov.f32	s15, s0
 80100a4:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80100a8:	f107 020c 	add.w	r2, r7, #12
 80100ac:	f107 0308 	add.w	r3, r7, #8
 80100b0:	4619      	mov	r1, r3
 80100b2:	6838      	ldr	r0, [r7, #0]
 80100b4:	f7f9 f96d 	bl	8009392 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 80100b8:	eef0 7a40 	vmov.f32	s15, s0
  }
 80100bc:	eeb0 0a67 	vmov.f32	s0, s15
 80100c0:	3710      	adds	r7, #16
 80100c2:	46bd      	mov	sp, r7
 80100c4:	bd80      	pop	{r7, pc}

080100c6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80100c6:	b580      	push	{r7, lr}
 80100c8:	b082      	sub	sp, #8
 80100ca:	af00      	add	r7, sp, #0
 80100cc:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80100ce:	2201      	movs	r2, #1
 80100d0:	2102      	movs	r1, #2
 80100d2:	6878      	ldr	r0, [r7, #4]
 80100d4:	f7fc fdaf 	bl	800cc36 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80100d8:	6878      	ldr	r0, [r7, #4]
 80100da:	f000 fce0 	bl	8010a9e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSG_>
  }
 80100de:	bf00      	nop
 80100e0:	3708      	adds	r7, #8
 80100e2:	46bd      	mov	sp, r7
 80100e4:	bd80      	pop	{r7, pc}

080100e6 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>:
  explicit product_evaluator(const XprType& xpr)
 80100e6:	b580      	push	{r7, lr}
 80100e8:	b082      	sub	sp, #8
 80100ea:	af00      	add	r7, sp, #0
 80100ec:	6078      	str	r0, [r7, #4]
 80100ee:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 80100f0:	6878      	ldr	r0, [r7, #4]
 80100f2:	f000 fcfc 	bl	8010aee <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 80100f6:	6838      	ldr	r0, [r7, #0]
 80100f8:	f000 fce1 	bl	8010abe <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3lhsEv>
 80100fc:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 8010102:	6838      	ldr	r0, [r7, #0]
 8010104:	f000 fce7 	bl	8010ad6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3rhsEv>
 8010108:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	3304      	adds	r3, #4
 801010e:	6812      	ldr	r2, [r2, #0]
 8010110:	601a      	str	r2, [r3, #0]
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 801011c:	4619      	mov	r1, r3
 801011e:	4610      	mov	r0, r2
 8010120:	f7f7 fc3e 	bl	80079a0 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	3304      	adds	r3, #4
      m_innerDim(xpr.lhs().cols())
 801012e:	4619      	mov	r1, r3
 8010130:	4610      	mov	r0, r2
 8010132:	f000 fce7 	bl	8010b04 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>
 8010136:	6838      	ldr	r0, [r7, #0]
 8010138:	f000 fcc1 	bl	8010abe <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3lhsEv>
 801013c:	4603      	mov	r3, r0
 801013e:	4618      	mov	r0, r3
 8010140:	f7f4 ff8c 	bl	800505c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8010144:	4602      	mov	r2, r0
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	611a      	str	r2, [r3, #16]
  }
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	4618      	mov	r0, r3
 801014e:	3708      	adds	r7, #8
 8010150:	46bd      	mov	sp, r7
 8010152:	bd80      	pop	{r7, pc}

08010154 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8010154:	b580      	push	{r7, lr}
 8010156:	b082      	sub	sp, #8
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 801015c:	2100      	movs	r1, #0
 801015e:	6878      	ldr	r0, [r7, #4]
 8010160:	f000 fcdf 	bl	8010b22 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8010164:	6878      	ldr	r0, [r7, #4]
 8010166:	f000 fcff 	bl	8010b68 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSG_>
  }
 801016a:	bf00      	nop
 801016c:	3708      	adds	r7, #8
 801016e:	46bd      	mov	sp, r7
 8010170:	bd80      	pop	{r7, pc}

08010172 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8010172:	b480      	push	{r7}
 8010174:	b083      	sub	sp, #12
 8010176:	af00      	add	r7, sp, #0
 8010178:	6078      	str	r0, [r7, #4]
 801017a:	6039      	str	r1, [r7, #0]
}
 801017c:	bf00      	nop
 801017e:	370c      	adds	r7, #12
 8010180:	46bd      	mov	sp, r7
 8010182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010186:	4770      	bx	lr

08010188 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEELi6ENS_10DenseShapeESA_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, Options>, ProductTag, LhsShape, RhsShape>
 8010188:	b580      	push	{r7, lr}
 801018a:	b082      	sub	sp, #8
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	4618      	mov	r0, r3
 8010194:	f7f9 f944 	bl	8009420 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	4618      	mov	r0, r3
 801019c:	3708      	adds	r7, #8
 801019e:	46bd      	mov	sp, r7
 80101a0:	bd80      	pop	{r7, pc}

080101a2 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 80101a2:	b580      	push	{r7, lr}
 80101a4:	b082      	sub	sp, #8
 80101a6:	af00      	add	r7, sp, #0
 80101a8:	6078      	str	r0, [r7, #4]
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	4618      	mov	r0, r3
 80101ae:	f7ff ffeb 	bl	8010188 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEELi6ENS_10DenseShapeESA_ffED1Ev>
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	4618      	mov	r0, r3
 80101b6:	3708      	adds	r7, #8
 80101b8:	46bd      	mov	sp, r7
 80101ba:	bd80      	pop	{r7, pc}

080101bc <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEED1Ev>:
struct evaluator<const T>
 80101bc:	b580      	push	{r7, lr}
 80101be:	b082      	sub	sp, #8
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	6078      	str	r0, [r7, #4]
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	4618      	mov	r0, r3
 80101c8:	f7ff ffeb 	bl	80101a2 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEED1Ev>
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	4618      	mov	r0, r3
 80101d0:	3708      	adds	r7, #8
 80101d2:	46bd      	mov	sp, r7
 80101d4:	bd80      	pop	{r7, pc}

080101d6 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
 80101d6:	b580      	push	{r7, lr}
 80101d8:	b082      	sub	sp, #8
 80101da:	af00      	add	r7, sp, #0
 80101dc:	6078      	str	r0, [r7, #4]
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	4618      	mov	r0, r3
 80101e2:	f7f9 f91d 	bl	8009420 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	4618      	mov	r0, r3
 80101ea:	3708      	adds	r7, #8
 80101ec:	46bd      	mov	sp, r7
 80101ee:	bd80      	pop	{r7, pc}

080101f0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4DataD1Ev>:
  struct Data
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b082      	sub	sp, #8
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	6078      	str	r0, [r7, #4]
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	330c      	adds	r3, #12
 80101fc:	4618      	mov	r0, r3
 80101fe:	f7ff ffea 	bl	80101d6 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	3304      	adds	r3, #4
 8010206:	4618      	mov	r0, r3
 8010208:	f7ff ffd8 	bl	80101bc <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEED1Ev>
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	4618      	mov	r0, r3
 8010210:	3708      	adds	r7, #8
 8010212:	46bd      	mov	sp, r7
 8010214:	bd80      	pop	{r7, pc}

08010216 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8010216:	b580      	push	{r7, lr}
 8010218:	b082      	sub	sp, #8
 801021a:	af00      	add	r7, sp, #0
 801021c:	6078      	str	r0, [r7, #4]
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	4618      	mov	r0, r3
 8010222:	f7ff ffe5 	bl	80101f0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4DataD1Ev>
 8010226:	6878      	ldr	r0, [r7, #4]
 8010228:	f000 fcbc 	bl	8010ba4 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	4618      	mov	r0, r3
 8010230:	3708      	adds	r7, #8
 8010232:	46bd      	mov	sp, r7
 8010234:	bd80      	pop	{r7, pc}

08010236 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8010236:	b580      	push	{r7, lr}
 8010238:	b082      	sub	sp, #8
 801023a:	af00      	add	r7, sp, #0
 801023c:	6078      	str	r0, [r7, #4]
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	4618      	mov	r0, r3
 8010242:	f7ff ffe8 	bl	8010216 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffED1Ev>
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	4618      	mov	r0, r3
 801024a:	3708      	adds	r7, #8
 801024c:	46bd      	mov	sp, r7
 801024e:	bd80      	pop	{r7, pc}

08010250 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8010250:	b580      	push	{r7, lr}
 8010252:	b090      	sub	sp, #64	; 0x40
 8010254:	af02      	add	r7, sp, #8
 8010256:	60f8      	str	r0, [r7, #12]
 8010258:	60b9      	str	r1, [r7, #8]
 801025a:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 801025c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010260:	68b9      	ldr	r1, [r7, #8]
 8010262:	4618      	mov	r0, r3
 8010264:	f000 fc8f 	bl	8010b86 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSG_>
  resize_if_allowed(dst, src, func);
 8010268:	687a      	ldr	r2, [r7, #4]
 801026a:	68b9      	ldr	r1, [r7, #8]
 801026c:	68f8      	ldr	r0, [r7, #12]
 801026e:	f000 fca5 	bl	8010bbc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8010272:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010276:	68f9      	ldr	r1, [r7, #12]
 8010278:	4618      	mov	r0, r3
 801027a:	f7fa f9ea 	bl	800a652 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 801027e:	68f8      	ldr	r0, [r7, #12]
 8010280:	f000 f8aa 	bl	80103d8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE18const_cast_derivedEv>
 8010284:	4603      	mov	r3, r0
 8010286:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801028a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 801028e:	f107 0014 	add.w	r0, r7, #20
 8010292:	9300      	str	r3, [sp, #0]
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	f000 fcdb 	bl	8010c50 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_INS3_IfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EEC1ERS5_RKSJ_RKSL_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 801029a:	f107 0314 	add.w	r3, r7, #20
 801029e:	4618      	mov	r0, r3
 80102a0:	f000 fcf0 	bl	8010c84 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSN_>
  DstEvaluatorType dstEvaluator(dst);
 80102a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80102a8:	4618      	mov	r0, r3
 80102aa:	f7f9 f8b9 	bl	8009420 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 80102ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80102b2:	4618      	mov	r0, r3
 80102b4:	f7ff ffbf 	bl	8010236 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>
}
 80102b8:	bf00      	nop
 80102ba:	3738      	adds	r7, #56	; 0x38
 80102bc:	46bd      	mov	sp, r7
 80102be:	bd80      	pop	{r7, pc}

080102c0 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfEC1ERKS9_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 80102c0:	b590      	push	{r4, r7, lr}
 80102c2:	b083      	sub	sp, #12
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	6078      	str	r0, [r7, #4]
 80102c8:	6039      	str	r1, [r7, #0]
 80102ca:	6878      	ldr	r0, [r7, #4]
 80102cc:	f000 fcf0 	bl	8010cb0 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>
 80102d0:	687c      	ldr	r4, [r7, #4]
 80102d2:	6838      	ldr	r0, [r7, #0]
 80102d4:	f000 fce1 	bl	8010c9a <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE16nestedExpressionEv>
 80102d8:	4603      	mov	r3, r0
 80102da:	4619      	mov	r1, r3
 80102dc:	4620      	mov	r0, r4
 80102de:	f000 fcf2 	bl	8010cc6 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERS7_>
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	4618      	mov	r0, r3
 80102e6:	370c      	adds	r7, #12
 80102e8:	46bd      	mov	sp, r7
 80102ea:	bd90      	pop	{r4, r7, pc}

080102ec <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb1EEE>:
  explicit block_evaluator(const XprType& block)
 80102ec:	b580      	push	{r7, lr}
 80102ee:	b082      	sub	sp, #8
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	6078      	str	r0, [r7, #4]
 80102f4:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	6839      	ldr	r1, [r7, #0]
 80102fa:	4618      	mov	r0, r3
 80102fc:	f000 fcf2 	bl	8010ce4 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_EC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8010300:	683b      	ldr	r3, [r7, #0]
 8010302:	4618      	mov	r0, r3
 8010304:	f000 fd18 	bl	8010d38 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4dataEv>
 8010308:	bf00      	nop
  }
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	4618      	mov	r0, r3
 801030e:	3708      	adds	r7, #8
 8010310:	46bd      	mov	sp, r7
 8010312:	bd80      	pop	{r7, pc}

08010314 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 8010314:	b580      	push	{r7, lr}
 8010316:	b082      	sub	sp, #8
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 801031c:	f7f6 fc73 	bl	8006c06 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8010320:	4603      	mov	r3, r0
  }
 8010322:	4618      	mov	r0, r3
 8010324:	3708      	adds	r7, #8
 8010326:	46bd      	mov	sp, r7
 8010328:	bd80      	pop	{r7, pc}

0801032a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 801032a:	b580      	push	{r7, lr}
 801032c:	b082      	sub	sp, #8
 801032e:	af00      	add	r7, sp, #0
 8010330:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 8010332:	f7f6 fc70 	bl	8006c16 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8010336:	4603      	mov	r3, r0
  }
 8010338:	4618      	mov	r0, r3
 801033a:	3708      	adds	r7, #8
 801033c:	46bd      	mov	sp, r7
 801033e:	bd80      	pop	{r7, pc}

08010340 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8010340:	b580      	push	{r7, lr}
 8010342:	b086      	sub	sp, #24
 8010344:	af00      	add	r7, sp, #0
 8010346:	60f8      	str	r0, [r7, #12]
 8010348:	60b9      	str	r1, [r7, #8]
 801034a:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 801034c:	68bb      	ldr	r3, [r7, #8]
 801034e:	4618      	mov	r0, r3
 8010350:	f7f5 fe7f 	bl	8006052 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8010354:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8010356:	68bb      	ldr	r3, [r7, #8]
 8010358:	4618      	mov	r0, r3
 801035a:	f7f5 fe85 	bl	8006068 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 801035e:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	4618      	mov	r0, r3
 8010364:	f7f5 fe75 	bl	8006052 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8010368:	4602      	mov	r2, r0
 801036a:	697b      	ldr	r3, [r7, #20]
 801036c:	4293      	cmp	r3, r2
 801036e:	d107      	bne.n	8010380 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	4618      	mov	r0, r3
 8010374:	f7f5 fe78 	bl	8006068 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8010378:	4602      	mov	r2, r0
 801037a:	693b      	ldr	r3, [r7, #16]
 801037c:	4293      	cmp	r3, r2
 801037e:	d001      	beq.n	8010384 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x44>
 8010380:	2301      	movs	r3, #1
 8010382:	e000      	b.n	8010386 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x46>
 8010384:	2300      	movs	r3, #0
 8010386:	2b00      	cmp	r3, #0
 8010388:	d005      	beq.n	8010396 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x56>
    dst.resize(dstRows, dstCols);
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	693a      	ldr	r2, [r7, #16]
 801038e:	6979      	ldr	r1, [r7, #20]
 8010390:	4618      	mov	r0, r3
 8010392:	f7fd f9af 	bl	800d6f4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	4618      	mov	r0, r3
 801039a:	f7f5 fe5a 	bl	8006052 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 801039e:	4602      	mov	r2, r0
 80103a0:	697b      	ldr	r3, [r7, #20]
 80103a2:	4293      	cmp	r3, r2
 80103a4:	d107      	bne.n	80103b6 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x76>
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	4618      	mov	r0, r3
 80103aa:	f7f5 fe5d 	bl	8006068 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 80103ae:	4602      	mov	r2, r0
 80103b0:	693b      	ldr	r3, [r7, #16]
 80103b2:	4293      	cmp	r3, r2
 80103b4:	d006      	beq.n	80103c4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x84>
 80103b6:	4b05      	ldr	r3, [pc, #20]	; (80103cc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 80103b8:	4a05      	ldr	r2, [pc, #20]	; (80103d0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 80103ba:	f240 21fd 	movw	r1, #765	; 0x2fd
 80103be:	4805      	ldr	r0, [pc, #20]	; (80103d4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x94>)
 80103c0:	f00d fd70 	bl	801dea4 <__assert_func>
}
 80103c4:	bf00      	nop
 80103c6:	3718      	adds	r7, #24
 80103c8:	46bd      	mov	sp, r7
 80103ca:	bd80      	pop	{r7, pc}
 80103cc:	08022384 	.word	0x08022384
 80103d0:	08027b94 	.word	0x08027b94
 80103d4:	08022498 	.word	0x08022498

080103d8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 80103d8:	b480      	push	{r7}
 80103da:	b083      	sub	sp, #12
 80103dc:	af00      	add	r7, sp, #0
 80103de:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	4618      	mov	r0, r3
 80103e4:	370c      	adds	r7, #12
 80103e6:	46bd      	mov	sp, r7
 80103e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ec:	4770      	bx	lr

080103ee <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 80103ee:	b480      	push	{r7}
 80103f0:	b085      	sub	sp, #20
 80103f2:	af00      	add	r7, sp, #0
 80103f4:	60f8      	str	r0, [r7, #12]
 80103f6:	60b9      	str	r1, [r7, #8]
 80103f8:	607a      	str	r2, [r7, #4]
 80103fa:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	68ba      	ldr	r2, [r7, #8]
 8010400:	601a      	str	r2, [r3, #0]
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	687a      	ldr	r2, [r7, #4]
 8010406:	605a      	str	r2, [r3, #4]
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	683a      	ldr	r2, [r7, #0]
 801040c:	609a      	str	r2, [r3, #8]
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	69ba      	ldr	r2, [r7, #24]
 8010412:	60da      	str	r2, [r3, #12]
  }
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	4618      	mov	r0, r3
 8010418:	3714      	adds	r7, #20
 801041a:	46bd      	mov	sp, r7
 801041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010420:	4770      	bx	lr

08010422 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8010422:	b580      	push	{r7, lr}
 8010424:	b082      	sub	sp, #8
 8010426:	af00      	add	r7, sp, #0
 8010428:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 801042a:	6878      	ldr	r0, [r7, #4]
 801042c:	f000 fc90 	bl	8010d50 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi1EE3runERS9_>
  }
 8010430:	bf00      	nop
 8010432:	3708      	adds	r7, #8
 8010434:	46bd      	mov	sp, r7
 8010436:	bd80      	pop	{r7, pc}

08010438 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 8010438:	b580      	push	{r7, lr}
 801043a:	b084      	sub	sp, #16
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
  return ConstTransposeReturnType(derived());
 8010440:	6878      	ldr	r0, [r7, #4]
 8010442:	f7f5 fcf1 	bl	8005e28 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8010446:	4602      	mov	r2, r0
 8010448:	f107 030c 	add.w	r3, r7, #12
 801044c:	4611      	mov	r1, r2
 801044e:	4618      	mov	r0, r3
 8010450:	f000 fca5 	bl	8010d9e <_ZN5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS3_>
 8010454:	68fb      	ldr	r3, [r7, #12]
}
 8010456:	4618      	mov	r0, r3
 8010458:	3710      	adds	r7, #16
 801045a:	46bd      	mov	sp, r7
 801045c:	bd80      	pop	{r7, pc}

0801045e <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE12cwiseProductINS2_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSA_6traitsIT_E6ScalarEEEKS5_KSD_EERKNS0_ISD_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 801045e:	b5b0      	push	{r4, r5, r7, lr}
 8010460:	b086      	sub	sp, #24
 8010462:	af00      	add	r7, sp, #0
 8010464:	60f8      	str	r0, [r7, #12]
 8010466:	60b9      	str	r1, [r7, #8]
 8010468:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 801046a:	68b8      	ldr	r0, [r7, #8]
 801046c:	f000 fca7 	bl	8010dbe <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8010470:	4604      	mov	r4, r0
 8010472:	6878      	ldr	r0, [r7, #4]
 8010474:	f7f5 f83f 	bl	80054f6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8010478:	4605      	mov	r5, r0
 801047a:	f107 0314 	add.w	r3, r7, #20
 801047e:	4618      	mov	r0, r3
 8010480:	f7f5 f898 	bl	80055b4 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 8010484:	f107 0314 	add.w	r3, r7, #20
 8010488:	462a      	mov	r2, r5
 801048a:	4621      	mov	r1, r4
 801048c:	68f8      	ldr	r0, [r7, #12]
 801048e:	f000 fcd5 	bl	8010e3c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_>
}
 8010492:	68f8      	ldr	r0, [r7, #12]
 8010494:	3718      	adds	r7, #24
 8010496:	46bd      	mov	sp, r7
 8010498:	bdb0      	pop	{r4, r5, r7, pc}

0801049a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 801049a:	b580      	push	{r7, lr}
 801049c:	b082      	sub	sp, #8
 801049e:	af00      	add	r7, sp, #0
 80104a0:	6078      	str	r0, [r7, #4]
 80104a2:	6878      	ldr	r0, [r7, #4]
 80104a4:	f000 fd18 	bl	8010ed8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 80104a8:	4603      	mov	r3, r0
 80104aa:	4618      	mov	r0, r3
 80104ac:	f000 fd1f 	bl	8010eee <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80104b0:	4603      	mov	r3, r0
 80104b2:	4618      	mov	r0, r3
 80104b4:	3708      	adds	r7, #8
 80104b6:	46bd      	mov	sp, r7
 80104b8:	bd80      	pop	{r7, pc}

080104ba <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 80104ba:	b590      	push	{r4, r7, lr}
 80104bc:	b085      	sub	sp, #20
 80104be:	af00      	add	r7, sp, #0
 80104c0:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 80104c2:	6878      	ldr	r0, [r7, #4]
 80104c4:	f000 fd08 	bl	8010ed8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 80104c8:	4604      	mov	r4, r0
 80104ca:	f107 030c 	add.w	r3, r7, #12
 80104ce:	4618      	mov	r0, r3
 80104d0:	f7f5 fb67 	bl	8005ba2 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 80104d4:	f107 030c 	add.w	r3, r7, #12
 80104d8:	4619      	mov	r1, r3
 80104da:	4620      	mov	r0, r4
 80104dc:	f000 fd88 	bl	8010ff0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 80104e0:	eef0 7a40 	vmov.f32	s15, s0
 80104e4:	bf00      	nop
}
 80104e6:	eeb0 0a67 	vmov.f32	s0, s15
 80104ea:	3714      	adds	r7, #20
 80104ec:	46bd      	mov	sp, r7
 80104ee:	bd90      	pop	{r4, r7, pc}

080104f0 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80104f0:	b480      	push	{r7}
 80104f2:	b083      	sub	sp, #12
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]
    }
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	4618      	mov	r0, r3
 80104fc:	370c      	adds	r7, #12
 80104fe:	46bd      	mov	sp, r7
 8010500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010504:	4770      	bx	lr

08010506 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8010506:	b580      	push	{r7, lr}
 8010508:	b082      	sub	sp, #8
 801050a:	af00      	add	r7, sp, #0
 801050c:	6078      	str	r0, [r7, #4]
 801050e:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	4618      	mov	r0, r3
 8010514:	f7f4 fdad 	bl	8005072 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8010518:	4603      	mov	r3, r0
 801051a:	2b01      	cmp	r3, #1
 801051c:	dd08      	ble.n	8010530 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_+0x2a>
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	4618      	mov	r0, r3
 8010522:	f7f4 fd9b 	bl	800505c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8010526:	4603      	mov	r3, r0
 8010528:	2b01      	cmp	r3, #1
 801052a:	dd01      	ble.n	8010530 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_+0x2a>
 801052c:	2301      	movs	r3, #1
 801052e:	e000      	b.n	8010532 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_+0x2c>
 8010530:	2300      	movs	r3, #0
 8010532:	2b00      	cmp	r3, #0
 8010534:	d003      	beq.n	801053e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 8010536:	6839      	ldr	r1, [r7, #0]
 8010538:	6878      	ldr	r0, [r7, #4]
 801053a:	f000 fd9f 	bl	801107c <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELb0EE3runERKS3_RKS7_>
}
 801053e:	bf00      	nop
 8010540:	3708      	adds	r7, #8
 8010542:	46bd      	mov	sp, r7
 8010544:	bd80      	pop	{r7, pc}

08010546 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 8010546:	b580      	push	{r7, lr}
 8010548:	b082      	sub	sp, #8
 801054a:	af00      	add	r7, sp, #0
 801054c:	6078      	str	r0, [r7, #4]
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	330c      	adds	r3, #12
 8010552:	4618      	mov	r0, r3
 8010554:	f7fe fe48 	bl	800f1e8 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	3308      	adds	r3, #8
 801055c:	4618      	mov	r0, r3
 801055e:	f7f4 ff9a 	bl	8005496 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8010562:	6878      	ldr	r0, [r7, #4]
 8010564:	f000 fda4 	bl	80110b0 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEED1Ev>
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	4618      	mov	r0, r3
 801056c:	3708      	adds	r7, #8
 801056e:	46bd      	mov	sp, r7
 8010570:	bd80      	pop	{r7, pc}

08010572 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8010572:	b580      	push	{r7, lr}
 8010574:	b082      	sub	sp, #8
 8010576:	af00      	add	r7, sp, #0
 8010578:	6078      	str	r0, [r7, #4]
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	4618      	mov	r0, r3
 801057e:	f7ff ffe2 	bl	8010546 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffED1Ev>
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	4618      	mov	r0, r3
 8010586:	3708      	adds	r7, #8
 8010588:	46bd      	mov	sp, r7
 801058a:	bd80      	pop	{r7, pc}

0801058c <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 801058c:	b580      	push	{r7, lr}
 801058e:	b090      	sub	sp, #64	; 0x40
 8010590:	af02      	add	r7, sp, #8
 8010592:	60f8      	str	r0, [r7, #12]
 8010594:	60b9      	str	r1, [r7, #8]
 8010596:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8010598:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801059c:	68b9      	ldr	r1, [r7, #8]
 801059e:	4618      	mov	r0, r3
 80105a0:	f000 fd77 	bl	8011092 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1ERKS6_>
  resize_if_allowed(dst, src, func);
 80105a4:	687a      	ldr	r2, [r7, #4]
 80105a6:	68b9      	ldr	r1, [r7, #8]
 80105a8:	68f8      	ldr	r0, [r7, #12]
 80105aa:	f000 fda9 	bl	8011100 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  DstEvaluatorType dstEvaluator(dst);
 80105ae:	f107 0320 	add.w	r3, r7, #32
 80105b2:	68f9      	ldr	r1, [r7, #12]
 80105b4:	4618      	mov	r0, r3
 80105b6:	f7f7 f9f3 	bl	80079a0 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 80105ba:	68f8      	ldr	r0, [r7, #12]
 80105bc:	f7f7 fa58 	bl	8007a70 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 80105c0:	4603      	mov	r3, r0
 80105c2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80105c6:	f107 0120 	add.w	r1, r7, #32
 80105ca:	f107 0010 	add.w	r0, r7, #16
 80105ce:	9300      	str	r3, [sp, #0]
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	f000 fdc3 	bl	801115c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEC1ERS5_RKSA_RKSC_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 80105d6:	f107 0310 	add.w	r3, r7, #16
 80105da:	4618      	mov	r0, r3
 80105dc:	f000 fdd8 	bl	8011190 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi0ELi2EE3runERSE_>
  DstEvaluatorType dstEvaluator(dst);
 80105e0:	f107 0320 	add.w	r3, r7, #32
 80105e4:	4618      	mov	r0, r3
 80105e6:	f7f6 ffcc 	bl	8007582 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 80105ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80105ee:	4618      	mov	r0, r3
 80105f0:	f7ff ffbf 	bl	8010572 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEED1Ev>
}
 80105f4:	bf00      	nop
 80105f6:	3738      	adds	r7, #56	; 0x38
 80105f8:	46bd      	mov	sp, r7
 80105fa:	bd80      	pop	{r7, pc}

080105fc <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b082      	sub	sp, #8
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
 8010604:	6039      	str	r1, [r7, #0]
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	6839      	ldr	r1, [r7, #0]
 801060a:	4618      	mov	r0, r3
 801060c:	f000 fdcb 	bl	80111a6 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li3ELi1ELb1EEE>
  }
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	4618      	mov	r0, r3
 8010614:	3708      	adds	r7, #8
 8010616:	46bd      	mov	sp, r7
 8010618:	bd80      	pop	{r7, pc}

0801061a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 801061a:	b480      	push	{r7}
 801061c:	b083      	sub	sp, #12
 801061e:	af00      	add	r7, sp, #0
 8010620:	6078      	str	r0, [r7, #4]
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	4618      	mov	r0, r3
 8010626:	370c      	adds	r7, #12
 8010628:	46bd      	mov	sp, r7
 801062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062e:	4770      	bx	lr

08010630 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8010630:	b5b0      	push	{r4, r5, r7, lr}
 8010632:	b084      	sub	sp, #16
 8010634:	af00      	add	r7, sp, #0
 8010636:	60f8      	str	r0, [r7, #12]
 8010638:	60b9      	str	r1, [r7, #8]
 801063a:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	681c      	ldr	r4, [r3, #0]
 8010640:	68f8      	ldr	r0, [r7, #12]
 8010642:	f000 fdc4 	bl	80111ce <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>
 8010646:	4602      	mov	r2, r0
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	fb03 f502 	mul.w	r5, r3, r2
 801064e:	68f8      	ldr	r0, [r7, #12]
 8010650:	f000 fdc8 	bl	80111e4 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>
 8010654:	4602      	mov	r2, r0
 8010656:	68bb      	ldr	r3, [r7, #8]
 8010658:	fb02 f303 	mul.w	r3, r2, r3
 801065c:	442b      	add	r3, r5
 801065e:	009b      	lsls	r3, r3, #2
 8010660:	4423      	add	r3, r4
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	ee07 3a90 	vmov	s15, r3
  }
 8010668:	eeb0 0a67 	vmov.f32	s0, s15
 801066c:	3710      	adds	r7, #16
 801066e:	46bd      	mov	sp, r7
 8010670:	bdb0      	pop	{r4, r5, r7, pc}

08010672 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfEC1ERKSJ_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 8010672:	b590      	push	{r4, r7, lr}
 8010674:	b083      	sub	sp, #12
 8010676:	af00      	add	r7, sp, #0
 8010678:	6078      	str	r0, [r7, #4]
 801067a:	6039      	str	r1, [r7, #0]
 801067c:	6878      	ldr	r0, [r7, #4]
 801067e:	f000 fdc7 	bl	8011210 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>
 8010682:	687c      	ldr	r4, [r7, #4]
 8010684:	6838      	ldr	r0, [r7, #0]
 8010686:	f000 fdb8 	bl	80111fa <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE16nestedExpressionEv>
 801068a:	4603      	mov	r3, r0
 801068c:	4619      	mov	r1, r3
 801068e:	4620      	mov	r0, r4
 8010690:	f000 fdc9 	bl	8011226 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERSH_>
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	4618      	mov	r0, r3
 8010698:	370c      	adds	r7, #12
 801069a:	46bd      	mov	sp, r7
 801069c:	bd90      	pop	{r4, r7, pc}

0801069e <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS6_Li1ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 801069e:	b580      	push	{r7, lr}
 80106a0:	b082      	sub	sp, #8
 80106a2:	af00      	add	r7, sp, #0
 80106a4:	6078      	str	r0, [r7, #4]
 80106a6:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	6839      	ldr	r1, [r7, #0]
 80106ac:	4618      	mov	r0, r3
 80106ae:	f000 fdc9 	bl	8011244 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEEC1ERKS8_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 80106b2:	683b      	ldr	r3, [r7, #0]
 80106b4:	4618      	mov	r0, r3
 80106b6:	f000 fdef 	bl	8011298 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4dataEv>
 80106ba:	bf00      	nop
  }
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	4618      	mov	r0, r3
 80106c0:	3708      	adds	r7, #8
 80106c2:	46bd      	mov	sp, r7
 80106c4:	bd80      	pop	{r7, pc}

080106c6 <_ZNK5Eigen8internal19variable_if_dynamicIiLin1EE5valueEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T value() const { return m_value; }
 80106c6:	b480      	push	{r7}
 80106c8:	b083      	sub	sp, #12
 80106ca:	af00      	add	r7, sp, #0
 80106cc:	6078      	str	r0, [r7, #4]
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	4618      	mov	r0, r3
 80106d4:	370c      	adds	r7, #12
 80106d6:	46bd      	mov	sp, r7
 80106d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106dc:	4770      	bx	lr

080106de <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 80106de:	b5b0      	push	{r4, r5, r7, lr}
 80106e0:	b086      	sub	sp, #24
 80106e2:	af00      	add	r7, sp, #0
 80106e4:	60f8      	str	r0, [r7, #12]
 80106e6:	60b9      	str	r1, [r7, #8]
 80106e8:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	4618      	mov	r0, r3
 80106ee:	f000 fddf 	bl	80112b0 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4Data4funcEv>
 80106f2:	4604      	mov	r4, r0
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	3304      	adds	r3, #4
 80106f8:	687a      	ldr	r2, [r7, #4]
 80106fa:	68b9      	ldr	r1, [r7, #8]
 80106fc:	4618      	mov	r0, r3
 80106fe:	f000 fde2 	bl	80112c6 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEii>
 8010702:	4605      	mov	r5, r0
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	3308      	adds	r3, #8
 8010708:	687a      	ldr	r2, [r7, #4]
 801070a:	68b9      	ldr	r1, [r7, #8]
 801070c:	4618      	mov	r0, r3
 801070e:	f000 fdf2 	bl	80112f6 <_ZNK5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffIiEEfT_SB_>
 8010712:	eef0 7a40 	vmov.f32	s15, s0
 8010716:	edc7 7a05 	vstr	s15, [r7, #20]
 801071a:	f107 0314 	add.w	r3, r7, #20
 801071e:	461a      	mov	r2, r3
 8010720:	4629      	mov	r1, r5
 8010722:	4620      	mov	r0, r4
 8010724:	f7fe fe76 	bl	800f414 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 8010728:	eef0 7a40 	vmov.f32	s15, s0
  }
 801072c:	eeb0 0a67 	vmov.f32	s0, s15
 8010730:	3718      	adds	r7, #24
 8010732:	46bd      	mov	sp, r7
 8010734:	bdb0      	pop	{r4, r5, r7, pc}

08010736 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 8010736:	b480      	push	{r7}
 8010738:	b083      	sub	sp, #12
 801073a:	af00      	add	r7, sp, #0
 801073c:	6078      	str	r0, [r7, #4]
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	4618      	mov	r0, r3
 8010742:	370c      	adds	r7, #12
 8010744:	46bd      	mov	sp, r7
 8010746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801074a:	4770      	bx	lr

0801074c <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 801074c:	b480      	push	{r7}
 801074e:	b083      	sub	sp, #12
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	4618      	mov	r0, r3
 8010758:	370c      	adds	r7, #12
 801075a:	46bd      	mov	sp, r7
 801075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010760:	4770      	bx	lr

08010762 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8010762:	b580      	push	{r7, lr}
 8010764:	b082      	sub	sp, #8
 8010766:	af00      	add	r7, sp, #0
 8010768:	6078      	str	r0, [r7, #4]
 801076a:	6039      	str	r1, [r7, #0]
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	6839      	ldr	r1, [r7, #0]
 8010770:	4618      	mov	r0, r3
 8010772:	f000 fdd4 	bl	801131e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERKS6_>
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	4618      	mov	r0, r3
 801077a:	3708      	adds	r7, #8
 801077c:	46bd      	mov	sp, r7
 801077e:	bd80      	pop	{r7, pc}

08010780 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_EC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 8010780:	b590      	push	{r4, r7, lr}
 8010782:	b083      	sub	sp, #12
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
 8010788:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 801078a:	6878      	ldr	r0, [r7, #4]
 801078c:	f000 fdf2 	bl	8011374 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8010790:	683b      	ldr	r3, [r7, #0]
 8010792:	4618      	mov	r0, r3
 8010794:	f000 f81e 	bl	80107d4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4dataEv>
 8010798:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	601a      	str	r2, [r3, #0]
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	1d1c      	adds	r4, r3, #4
 80107a2:	683b      	ldr	r3, [r7, #0]
 80107a4:	4618      	mov	r0, r3
 80107a6:	f000 fdc9 	bl	801133c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE11innerStrideEv>
 80107aa:	4603      	mov	r3, r0
 80107ac:	4619      	mov	r1, r3
 80107ae:	4620      	mov	r0, r4
 80107b0:	f7f6 fa04 	bl	8006bbc <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	1d5c      	adds	r4, r3, #5
 80107b8:	683b      	ldr	r3, [r7, #0]
 80107ba:	4618      	mov	r0, r3
 80107bc:	f000 fdcc 	bl	8011358 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE11outerStrideEv>
 80107c0:	4603      	mov	r3, r0
 80107c2:	4619      	mov	r1, r3
 80107c4:	4620      	mov	r0, r4
 80107c6:	f7f6 f9df 	bl	8006b88 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	4618      	mov	r0, r3
 80107ce:	370c      	adds	r7, #12
 80107d0:	46bd      	mov	sp, r7
 80107d2:	bd90      	pop	{r4, r7, pc}

080107d4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 80107d4:	b480      	push	{r7}
 80107d6:	b083      	sub	sp, #12
 80107d8:	af00      	add	r7, sp, #0
 80107da:	6078      	str	r0, [r7, #4]
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	4618      	mov	r0, r3
 80107e2:	370c      	adds	r7, #12
 80107e4:	46bd      	mov	sp, r7
 80107e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ea:	4770      	bx	lr

080107ec <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 80107ec:	b580      	push	{r7, lr}
 80107ee:	b082      	sub	sp, #8
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 80107f4:	f7f6 fa07 	bl	8006c06 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 80107f8:	4603      	mov	r3, r0
  }
 80107fa:	4618      	mov	r0, r3
 80107fc:	3708      	adds	r7, #8
 80107fe:	46bd      	mov	sp, r7
 8010800:	bd80      	pop	{r7, pc}

08010802 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 8010802:	b580      	push	{r7, lr}
 8010804:	b082      	sub	sp, #8
 8010806:	af00      	add	r7, sp, #0
 8010808:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 801080a:	f7f6 fa04 	bl	8006c16 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 801080e:	4603      	mov	r3, r0
  }
 8010810:	4618      	mov	r0, r3
 8010812:	3708      	adds	r7, #8
 8010814:	46bd      	mov	sp, r7
 8010816:	bd80      	pop	{r7, pc}

08010818 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEC1Ev>:
 8010818:	b580      	push	{r7, lr}
 801081a:	b082      	sub	sp, #8
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
 8010820:	6878      	ldr	r0, [r7, #4]
 8010822:	f000 fdb2 	bl	801138a <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEC1Ev>
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	4618      	mov	r0, r3
 801082a:	3708      	adds	r7, #8
 801082c:	46bd      	mov	sp, r7
 801082e:	bd80      	pop	{r7, pc}

08010830 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1ELi3EEC1Ev>:
class dense_product_base
 8010830:	b580      	push	{r7, lr}
 8010832:	b082      	sub	sp, #8
 8010834:	af00      	add	r7, sp, #0
 8010836:	6078      	str	r0, [r7, #4]
 8010838:	6878      	ldr	r0, [r7, #4]
 801083a:	f7ff ffed 	bl	8010818 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEC1Ev>
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	4618      	mov	r0, r3
 8010842:	3708      	adds	r7, #8
 8010844:	46bd      	mov	sp, r7
 8010846:	bd80      	pop	{r7, pc}

08010848 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8010848:	b580      	push	{r7, lr}
 801084a:	b082      	sub	sp, #8
 801084c:	af00      	add	r7, sp, #0
 801084e:	6078      	str	r0, [r7, #4]
 8010850:	6878      	ldr	r0, [r7, #4]
 8010852:	f7ff ffed 	bl	8010830 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1ELi3EEC1Ev>
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	4618      	mov	r0, r3
 801085a:	3708      	adds	r7, #8
 801085c:	46bd      	mov	sp, r7
 801085e:	bd80      	pop	{r7, pc}

08010860 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8010860:	b590      	push	{r4, r7, lr}
 8010862:	b085      	sub	sp, #20
 8010864:	af00      	add	r7, sp, #0
 8010866:	60f8      	str	r0, [r7, #12]
 8010868:	60b9      	str	r1, [r7, #8]
 801086a:	607a      	str	r2, [r7, #4]
 801086c:	68f8      	ldr	r0, [r7, #12]
 801086e:	f7ff ffeb 	bl	8010848 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1ENS_5DenseEEC1Ev>
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	68ba      	ldr	r2, [r7, #8]
 8010876:	601a      	str	r2, [r3, #0]
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	687a      	ldr	r2, [r7, #4]
 801087c:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 801087e:	68bb      	ldr	r3, [r7, #8]
 8010880:	4618      	mov	r0, r3
 8010882:	f7f4 fbeb 	bl	800505c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8010886:	4604      	mov	r4, r0
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	4618      	mov	r0, r3
 801088c:	f7f4 fbf1 	bl	8005072 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8010890:	4603      	mov	r3, r0
 8010892:	429c      	cmp	r4, r3
 8010894:	d005      	beq.n	80108a2 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_+0x42>
 8010896:	4b06      	ldr	r3, [pc, #24]	; (80108b0 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_+0x50>)
 8010898:	4a06      	ldr	r2, [pc, #24]	; (80108b4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_+0x54>)
 801089a:	2160      	movs	r1, #96	; 0x60
 801089c:	4806      	ldr	r0, [pc, #24]	; (80108b8 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_+0x58>)
 801089e:	f00d fb01 	bl	801dea4 <__assert_func>
 80108a2:	bf00      	nop
    }
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	4618      	mov	r0, r3
 80108a8:	3714      	adds	r7, #20
 80108aa:	46bd      	mov	sp, r7
 80108ac:	bd90      	pop	{r4, r7, pc}
 80108ae:	bf00      	nop
 80108b0:	0801ffcc 	.word	0x0801ffcc
 80108b4:	08027c78 	.word	0x08027c78
 80108b8:	0802031c 	.word	0x0802031c

080108bc <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 80108bc:	b580      	push	{r7, lr}
 80108be:	b084      	sub	sp, #16
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	60f8      	str	r0, [r7, #12]
 80108c4:	60b9      	str	r1, [r7, #8]
 80108c6:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 80108c8:	68b9      	ldr	r1, [r7, #8]
 80108ca:	68f8      	ldr	r0, [r7, #12]
 80108cc:	f000 fd68 	bl	80113a0 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 80108d0:	687a      	ldr	r2, [r7, #4]
 80108d2:	68b9      	ldr	r1, [r7, #8]
 80108d4:	68f8      	ldr	r0, [r7, #12]
 80108d6:	f000 fda6 	bl	8011426 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 80108da:	bf00      	nop
 80108dc:	3710      	adds	r7, #16
 80108de:	46bd      	mov	sp, r7
 80108e0:	bd80      	pop	{r7, pc}

080108e2 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE4dataEv>:
    const Scalar* data() const { return derived().nestedExpression().data(); }
 80108e2:	b580      	push	{r7, lr}
 80108e4:	b082      	sub	sp, #8
 80108e6:	af00      	add	r7, sp, #0
 80108e8:	6078      	str	r0, [r7, #4]
 80108ea:	6878      	ldr	r0, [r7, #4]
 80108ec:	f7f5 f8d2 	bl	8005a94 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 80108f0:	4603      	mov	r3, r0
 80108f2:	4618      	mov	r0, r3
 80108f4:	f7fd fadc 	bl	800deb0 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>
 80108f8:	4603      	mov	r3, r0
 80108fa:	4618      	mov	r0, r3
 80108fc:	f7f7 fcf2 	bl	80082e4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 8010900:	4603      	mov	r3, r0
 8010902:	4618      	mov	r0, r3
 8010904:	3708      	adds	r7, #8
 8010906:	46bd      	mov	sp, r7
 8010908:	bd80      	pop	{r7, pc}

0801090a <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11innerStrideEv>:
    Index innerStride() const { return derived().nestedExpression().innerStride(); }
 801090a:	b580      	push	{r7, lr}
 801090c:	b082      	sub	sp, #8
 801090e:	af00      	add	r7, sp, #0
 8010910:	6078      	str	r0, [r7, #4]
 8010912:	6878      	ldr	r0, [r7, #4]
 8010914:	f7f5 f8be 	bl	8005a94 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 8010918:	4603      	mov	r3, r0
 801091a:	4618      	mov	r0, r3
 801091c:	f7fd fac8 	bl	800deb0 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>
 8010920:	4603      	mov	r3, r0
 8010922:	4618      	mov	r0, r3
 8010924:	f7fd f968 	bl	800dbf8 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 8010928:	4603      	mov	r3, r0
 801092a:	4618      	mov	r0, r3
 801092c:	3708      	adds	r7, #8
 801092e:	46bd      	mov	sp, r7
 8010930:	bd80      	pop	{r7, pc}

08010932 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11outerStrideEv>:
    Index outerStride() const { return derived().nestedExpression().outerStride(); }
 8010932:	b580      	push	{r7, lr}
 8010934:	b082      	sub	sp, #8
 8010936:	af00      	add	r7, sp, #0
 8010938:	6078      	str	r0, [r7, #4]
 801093a:	6878      	ldr	r0, [r7, #4]
 801093c:	f7f5 f8aa 	bl	8005a94 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 8010940:	4603      	mov	r3, r0
 8010942:	4618      	mov	r0, r3
 8010944:	f7fd fab4 	bl	800deb0 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>
 8010948:	4603      	mov	r3, r0
 801094a:	4618      	mov	r0, r3
 801094c:	f7f7 ff04 	bl	8008758 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 8010950:	4603      	mov	r3, r0
 8010952:	4618      	mov	r0, r3
 8010954:	3708      	adds	r7, #8
 8010956:	46bd      	mov	sp, r7
 8010958:	bd80      	pop	{r7, pc}

0801095a <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>:
 801095a:	b580      	push	{r7, lr}
 801095c:	b082      	sub	sp, #8
 801095e:	af00      	add	r7, sp, #0
 8010960:	6078      	str	r0, [r7, #4]
 8010962:	6878      	ldr	r0, [r7, #4]
 8010964:	f000 fd97 	bl	8011496 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	4618      	mov	r0, r3
 801096c:	3708      	adds	r7, #8
 801096e:	46bd      	mov	sp, r7
 8010970:	bd80      	pop	{r7, pc}
	...

08010974 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 8010974:	b580      	push	{r7, lr}
 8010976:	b084      	sub	sp, #16
 8010978:	af00      	add	r7, sp, #0
 801097a:	60f8      	str	r0, [r7, #12]
 801097c:	60b9      	str	r1, [r7, #8]
 801097e:	607a      	str	r2, [r7, #4]
 8010980:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 8010982:	68f8      	ldr	r0, [r7, #12]
 8010984:	f7ff ffe9 	bl	801095a <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	68ba      	ldr	r2, [r7, #8]
 801098c:	601a      	str	r2, [r3, #0]
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	3304      	adds	r3, #4
 8010992:	6879      	ldr	r1, [r7, #4]
 8010994:	4618      	mov	r0, r3
 8010996:	f7f6 f8f7 	bl	8006b88 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	3305      	adds	r3, #5
 801099e:	6839      	ldr	r1, [r7, #0]
 80109a0:	4618      	mov	r0, r3
 80109a2:	f7f6 f90b 	bl	8006bbc <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 80109a6:	68bb      	ldr	r3, [r7, #8]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d011      	beq.n	80109d0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	db08      	blt.n	80109c4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x50>
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	2b03      	cmp	r3, #3
 80109b6:	d105      	bne.n	80109c4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x50>
 80109b8:	683b      	ldr	r3, [r7, #0]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	db02      	blt.n	80109c4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x50>
 80109be:	683b      	ldr	r3, [r7, #0]
 80109c0:	2b01      	cmp	r3, #1
 80109c2:	d005      	beq.n	80109d0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 80109c4:	4b07      	ldr	r3, [pc, #28]	; (80109e4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x70>)
 80109c6:	4a08      	ldr	r2, [pc, #32]	; (80109e8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x74>)
 80109c8:	21b0      	movs	r1, #176	; 0xb0
 80109ca:	4808      	ldr	r0, [pc, #32]	; (80109ec <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x78>)
 80109cc:	f00d fa6a 	bl	801dea4 <__assert_func>
      checkSanity<Derived>();
 80109d0:	2100      	movs	r1, #0
 80109d2:	68f8      	ldr	r0, [r7, #12]
 80109d4:	f000 fd6a 	bl	80114ac <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	4618      	mov	r0, r3
 80109dc:	3710      	adds	r7, #16
 80109de:	46bd      	mov	sp, r7
 80109e0:	bd80      	pop	{r7, pc}
 80109e2:	bf00      	nop
 80109e4:	08026430 	.word	0x08026430
 80109e8:	08027da0 	.word	0x08027da0
 80109ec:	080265e0 	.word	0x080265e0

080109f0 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE4initEv>:
    void init()
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b082      	sub	sp, #8
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	6078      	str	r0, [r7, #4]
                    : m_xpr.innerStride();
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	3308      	adds	r3, #8
                    ? m_xpr.outerStride()
 80109fc:	4618      	mov	r0, r3
 80109fe:	f7ff ff84 	bl	801090a <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11innerStrideEv>
 8010a02:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	615a      	str	r2, [r3, #20]
    }
 8010a08:	bf00      	nop
 8010a0a:	3708      	adds	r7, #8
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	bd80      	pop	{r7, pc}

08010a10 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8010a10:	b580      	push	{r7, lr}
 8010a12:	b082      	sub	sp, #8
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	6078      	str	r0, [r7, #4]
 8010a18:	6039      	str	r1, [r7, #0]
 8010a1a:	6878      	ldr	r0, [r7, #4]
 8010a1c:	f000 fd51 	bl	80114c2 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	6839      	ldr	r1, [r7, #0]
 8010a24:	4618      	mov	r0, r3
 8010a26:	f000 fd57 	bl	80114d8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	3708      	adds	r7, #8
 8010a30:	46bd      	mov	sp, r7
 8010a32:	bd80      	pop	{r7, pc}

08010a34 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b082      	sub	sp, #8
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
 8010a3c:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8010a3e:	2200      	movs	r2, #0
 8010a40:	2100      	movs	r1, #0
 8010a42:	6878      	ldr	r0, [r7, #4]
 8010a44:	f000 fd70 	bl	8011528 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 8010a48:	eef0 7a40 	vmov.f32	s15, s0
  }
 8010a4c:	eeb0 0a67 	vmov.f32	s0, s15
 8010a50:	3708      	adds	r7, #8
 8010a52:	46bd      	mov	sp, r7
 8010a54:	bd80      	pop	{r7, pc}

08010a56 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi1ELi2EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8010a56:	b580      	push	{r7, lr}
 8010a58:	b084      	sub	sp, #16
 8010a5a:	af00      	add	r7, sp, #0
 8010a5c:	6078      	str	r0, [r7, #4]
 8010a5e:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8010a60:	6839      	ldr	r1, [r7, #0]
 8010a62:	6878      	ldr	r0, [r7, #4]
 8010a64:	f000 fd73 	bl	801154e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi1ELi1EE3runERKSM_RKS3_>
 8010a68:	eef0 7a40 	vmov.f32	s15, s0
 8010a6c:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8010a70:	6839      	ldr	r1, [r7, #0]
 8010a72:	6878      	ldr	r0, [r7, #4]
 8010a74:	f000 fd7c 	bl	8011570 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi2ELi1EE3runERKSM_RKS3_>
 8010a78:	eef0 7a40 	vmov.f32	s15, s0
 8010a7c:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8010a80:	f107 020c 	add.w	r2, r7, #12
 8010a84:	f107 0308 	add.w	r3, r7, #8
 8010a88:	4619      	mov	r1, r3
 8010a8a:	6838      	ldr	r0, [r7, #0]
 8010a8c:	f7f8 fc81 	bl	8009392 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8010a90:	eef0 7a40 	vmov.f32	s15, s0
  }
 8010a94:	eeb0 0a67 	vmov.f32	s0, s15
 8010a98:	3710      	adds	r7, #16
 8010a9a:	46bd      	mov	sp, r7
 8010a9c:	bd80      	pop	{r7, pc}

08010a9e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8010a9e:	b580      	push	{r7, lr}
 8010aa0:	b082      	sub	sp, #8
 8010aa2:	af00      	add	r7, sp, #0
 8010aa4:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8010aa6:	2202      	movs	r2, #2
 8010aa8:	2102      	movs	r1, #2
 8010aaa:	6878      	ldr	r0, [r7, #4]
 8010aac:	f7fc f8c3 	bl	800cc36 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8010ab0:	6878      	ldr	r0, [r7, #4]
 8010ab2:	f000 fd6e 	bl	8011592 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSG_>
  }
 8010ab6:	bf00      	nop
 8010ab8:	3708      	adds	r7, #8
 8010aba:	46bd      	mov	sp, r7
 8010abc:	bd80      	pop	{r7, pc}

08010abe <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8010abe:	b480      	push	{r7}
 8010ac0:	b083      	sub	sp, #12
 8010ac2:	af00      	add	r7, sp, #0
 8010ac4:	6078      	str	r0, [r7, #4]
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	4618      	mov	r0, r3
 8010acc:	370c      	adds	r7, #12
 8010ace:	46bd      	mov	sp, r7
 8010ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad4:	4770      	bx	lr

08010ad6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8010ad6:	b480      	push	{r7}
 8010ad8:	b083      	sub	sp, #12
 8010ada:	af00      	add	r7, sp, #0
 8010adc:	6078      	str	r0, [r7, #4]
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	3304      	adds	r3, #4
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	370c      	adds	r7, #12
 8010ae6:	46bd      	mov	sp, r7
 8010ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aec:	4770      	bx	lr

08010aee <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8010aee:	b480      	push	{r7}
 8010af0:	b083      	sub	sp, #12
 8010af2:	af00      	add	r7, sp, #0
 8010af4:	6078      	str	r0, [r7, #4]
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	4618      	mov	r0, r3
 8010afa:	370c      	adds	r7, #12
 8010afc:	46bd      	mov	sp, r7
 8010afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b02:	4770      	bx	lr

08010b04 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b082      	sub	sp, #8
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	6078      	str	r0, [r7, #4]
 8010b0c:	6039      	str	r1, [r7, #0]
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	6839      	ldr	r1, [r7, #0]
 8010b12:	4618      	mov	r0, r3
 8010b14:	f000 fd47 	bl	80115a6 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfEC1ERKS5_>
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	4618      	mov	r0, r3
 8010b1c:	3708      	adds	r7, #8
 8010b1e:	46bd      	mov	sp, r7
 8010b20:	bd80      	pop	{r7, pc}

08010b22 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8010b22:	b5b0      	push	{r4, r5, r7, lr}
 8010b24:	b084      	sub	sp, #16
 8010b26:	af00      	add	r7, sp, #0
 8010b28:	6078      	str	r0, [r7, #4]
 8010b2a:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	689c      	ldr	r4, [r3, #8]
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	6839      	ldr	r1, [r7, #0]
 8010b36:	4618      	mov	r0, r3
 8010b38:	f7f7 fe81 	bl	800883e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 8010b3c:	4605      	mov	r5, r0
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	685b      	ldr	r3, [r3, #4]
 8010b42:	6839      	ldr	r1, [r7, #0]
 8010b44:	4618      	mov	r0, r3
 8010b46:	f000 fd44 	bl	80115d2 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffE5coeffEi>
 8010b4a:	eef0 7a40 	vmov.f32	s15, s0
 8010b4e:	edc7 7a03 	vstr	s15, [r7, #12]
 8010b52:	f107 030c 	add.w	r3, r7, #12
 8010b56:	461a      	mov	r2, r3
 8010b58:	4629      	mov	r1, r5
 8010b5a:	4620      	mov	r0, r4
 8010b5c:	f7f7 fe28 	bl	80087b0 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8010b60:	bf00      	nop
 8010b62:	3710      	adds	r7, #16
 8010b64:	46bd      	mov	sp, r7
 8010b66:	bdb0      	pop	{r4, r5, r7, pc}

08010b68 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b082      	sub	sp, #8
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8010b70:	2101      	movs	r1, #1
 8010b72:	6878      	ldr	r0, [r7, #4]
 8010b74:	f7ff ffd5 	bl	8010b22 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8010b78:	6878      	ldr	r0, [r7, #4]
 8010b7a:	f000 fd63 	bl	8011644 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSG_>
  }
 8010b7e:	bf00      	nop
 8010b80:	3708      	adds	r7, #8
 8010b82:	46bd      	mov	sp, r7
 8010b84:	bd80      	pop	{r7, pc}

08010b86 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSG_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8010b86:	b580      	push	{r7, lr}
 8010b88:	b082      	sub	sp, #8
 8010b8a:	af00      	add	r7, sp, #0
 8010b8c:	6078      	str	r0, [r7, #4]
 8010b8e:	6039      	str	r1, [r7, #0]
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	6839      	ldr	r1, [r7, #0]
 8010b94:	4618      	mov	r0, r3
 8010b96:	f000 fd64 	bl	8011662 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffEC1ERKSG_>
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	3708      	adds	r7, #8
 8010ba0:	46bd      	mov	sp, r7
 8010ba2:	bd80      	pop	{r7, pc}

08010ba4 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8010ba4:	b480      	push	{r7}
 8010ba6:	b083      	sub	sp, #12
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	6078      	str	r0, [r7, #4]
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	4618      	mov	r0, r3
 8010bb0:	370c      	adds	r7, #12
 8010bb2:	46bd      	mov	sp, r7
 8010bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb8:	4770      	bx	lr
	...

08010bbc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8010bbc:	b580      	push	{r7, lr}
 8010bbe:	b086      	sub	sp, #24
 8010bc0:	af00      	add	r7, sp, #0
 8010bc2:	60f8      	str	r0, [r7, #12]
 8010bc4:	60b9      	str	r1, [r7, #8]
 8010bc6:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8010bc8:	68b8      	ldr	r0, [r7, #8]
 8010bca:	f7f5 faa4 	bl	8006116 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8010bce:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8010bd0:	68b8      	ldr	r0, [r7, #8]
 8010bd2:	f7f5 faad 	bl	8006130 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8010bd6:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	4618      	mov	r0, r3
 8010bdc:	f7f5 fa39 	bl	8006052 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8010be0:	4602      	mov	r2, r0
 8010be2:	697b      	ldr	r3, [r7, #20]
 8010be4:	4293      	cmp	r3, r2
 8010be6:	d107      	bne.n	8010bf8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	4618      	mov	r0, r3
 8010bec:	f7f5 fa3c 	bl	8006068 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8010bf0:	4602      	mov	r2, r0
 8010bf2:	693b      	ldr	r3, [r7, #16]
 8010bf4:	4293      	cmp	r3, r2
 8010bf6:	d001      	beq.n	8010bfc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8010bf8:	2301      	movs	r3, #1
 8010bfa:	e000      	b.n	8010bfe <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8010bfc:	2300      	movs	r3, #0
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d005      	beq.n	8010c0e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	693a      	ldr	r2, [r7, #16]
 8010c06:	6979      	ldr	r1, [r7, #20]
 8010c08:	4618      	mov	r0, r3
 8010c0a:	f7fc fd73 	bl	800d6f4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	4618      	mov	r0, r3
 8010c12:	f7f5 fa1e 	bl	8006052 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8010c16:	4602      	mov	r2, r0
 8010c18:	697b      	ldr	r3, [r7, #20]
 8010c1a:	4293      	cmp	r3, r2
 8010c1c:	d107      	bne.n	8010c2e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	4618      	mov	r0, r3
 8010c22:	f7f5 fa21 	bl	8006068 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8010c26:	4602      	mov	r2, r0
 8010c28:	693b      	ldr	r3, [r7, #16]
 8010c2a:	4293      	cmp	r3, r2
 8010c2c:	d006      	beq.n	8010c3c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8010c2e:	4b05      	ldr	r3, [pc, #20]	; (8010c44 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8010c30:	4a05      	ldr	r2, [pc, #20]	; (8010c48 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8010c32:	f240 21fd 	movw	r1, #765	; 0x2fd
 8010c36:	4805      	ldr	r0, [pc, #20]	; (8010c4c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8010c38:	f00d f934 	bl	801dea4 <__assert_func>
}
 8010c3c:	bf00      	nop
 8010c3e:	3718      	adds	r7, #24
 8010c40:	46bd      	mov	sp, r7
 8010c42:	bd80      	pop	{r7, pc}
 8010c44:	08022384 	.word	0x08022384
 8010c48:	08027eb8 	.word	0x08027eb8
 8010c4c:	08022498 	.word	0x08022498

08010c50 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_INS3_IfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EEC1ERS5_RKSJ_RKSL_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8010c50:	b480      	push	{r7}
 8010c52:	b085      	sub	sp, #20
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	60f8      	str	r0, [r7, #12]
 8010c58:	60b9      	str	r1, [r7, #8]
 8010c5a:	607a      	str	r2, [r7, #4]
 8010c5c:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	68ba      	ldr	r2, [r7, #8]
 8010c62:	601a      	str	r2, [r3, #0]
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	687a      	ldr	r2, [r7, #4]
 8010c68:	605a      	str	r2, [r3, #4]
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	683a      	ldr	r2, [r7, #0]
 8010c6e:	609a      	str	r2, [r3, #8]
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	69ba      	ldr	r2, [r7, #24]
 8010c74:	60da      	str	r2, [r3, #12]
  }
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	4618      	mov	r0, r3
 8010c7a:	3714      	adds	r7, #20
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c82:	4770      	bx	lr

08010c84 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSN_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8010c84:	b580      	push	{r7, lr}
 8010c86:	b082      	sub	sp, #8
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8010c8c:	6878      	ldr	r0, [r7, #4]
 8010c8e:	f000 fcfa 	bl	8011686 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi1EE3runERSN_>
  }
 8010c92:	bf00      	nop
 8010c94:	3708      	adds	r7, #8
 8010c96:	46bd      	mov	sp, r7
 8010c98:	bd80      	pop	{r7, pc}

08010c9a <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 8010c9a:	b480      	push	{r7}
 8010c9c:	b083      	sub	sp, #12
 8010c9e:	af00      	add	r7, sp, #0
 8010ca0:	6078      	str	r0, [r7, #4]
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	370c      	adds	r7, #12
 8010ca8:	46bd      	mov	sp, r7
 8010caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cae:	4770      	bx	lr

08010cb0 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8010cb0:	b480      	push	{r7}
 8010cb2:	b083      	sub	sp, #12
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	6078      	str	r0, [r7, #4]
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	4618      	mov	r0, r3
 8010cbc:	370c      	adds	r7, #12
 8010cbe:	46bd      	mov	sp, r7
 8010cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc4:	4770      	bx	lr

08010cc6 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8010cc6:	b580      	push	{r7, lr}
 8010cc8:	b082      	sub	sp, #8
 8010cca:	af00      	add	r7, sp, #0
 8010ccc:	6078      	str	r0, [r7, #4]
 8010cce:	6039      	str	r1, [r7, #0]
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	6839      	ldr	r1, [r7, #0]
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	f000 fce5 	bl	80116a4 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERKS6_>
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	4618      	mov	r0, r3
 8010cde:	3708      	adds	r7, #8
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	bd80      	pop	{r7, pc}

08010ce4 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_EC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 8010ce4:	b590      	push	{r4, r7, lr}
 8010ce6:	b083      	sub	sp, #12
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
 8010cec:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8010cee:	6878      	ldr	r0, [r7, #4]
 8010cf0:	f000 fd03 	bl	80116fa <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8010cf4:	683b      	ldr	r3, [r7, #0]
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	f000 f81e 	bl	8010d38 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4dataEv>
 8010cfc:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	601a      	str	r2, [r3, #0]
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	1d1c      	adds	r4, r3, #4
 8010d06:	683b      	ldr	r3, [r7, #0]
 8010d08:	4618      	mov	r0, r3
 8010d0a:	f000 fcda 	bl	80116c2 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE11innerStrideEv>
 8010d0e:	4603      	mov	r3, r0
 8010d10:	4619      	mov	r1, r3
 8010d12:	4620      	mov	r0, r4
 8010d14:	f7f5 ff52 	bl	8006bbc <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	1d5c      	adds	r4, r3, #5
 8010d1c:	683b      	ldr	r3, [r7, #0]
 8010d1e:	4618      	mov	r0, r3
 8010d20:	f000 fcdd 	bl	80116de <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE11outerStrideEv>
 8010d24:	4603      	mov	r3, r0
 8010d26:	4619      	mov	r1, r3
 8010d28:	4620      	mov	r0, r4
 8010d2a:	f7f5 ff47 	bl	8006bbc <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
  }
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	4618      	mov	r0, r3
 8010d32:	370c      	adds	r7, #12
 8010d34:	46bd      	mov	sp, r7
 8010d36:	bd90      	pop	{r4, r7, pc}

08010d38 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 8010d38:	b480      	push	{r7}
 8010d3a:	b083      	sub	sp, #12
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	6078      	str	r0, [r7, #4]
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	4618      	mov	r0, r3
 8010d46:	370c      	adds	r7, #12
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d4e:	4770      	bx	lr

08010d50 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi1EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b082      	sub	sp, #8
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8010d58:	2100      	movs	r1, #0
 8010d5a:	6878      	ldr	r0, [r7, #4]
 8010d5c:	f000 fcd8 	bl	8011710 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8010d60:	6878      	ldr	r0, [r7, #4]
 8010d62:	f000 fcf3 	bl	801174c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi1EE3runERS9_>
  }
 8010d66:	bf00      	nop
 8010d68:	3708      	adds	r7, #8
 8010d6a:	46bd      	mov	sp, r7
 8010d6c:	bd80      	pop	{r7, pc}

08010d6e <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
 8010d6e:	b580      	push	{r7, lr}
 8010d70:	b082      	sub	sp, #8
 8010d72:	af00      	add	r7, sp, #0
 8010d74:	6078      	str	r0, [r7, #4]
 8010d76:	6878      	ldr	r0, [r7, #4]
 8010d78:	f000 fcf2 	bl	8011760 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	4618      	mov	r0, r3
 8010d80:	3708      	adds	r7, #8
 8010d82:	46bd      	mov	sp, r7
 8010d84:	bd80      	pop	{r7, pc}

08010d86 <_ZN5Eigen13TransposeImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 8010d86:	b580      	push	{r7, lr}
 8010d88:	b082      	sub	sp, #8
 8010d8a:	af00      	add	r7, sp, #0
 8010d8c:	6078      	str	r0, [r7, #4]
 8010d8e:	6878      	ldr	r0, [r7, #4]
 8010d90:	f7ff ffed 	bl	8010d6e <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	4618      	mov	r0, r3
 8010d98:	3708      	adds	r7, #8
 8010d9a:	46bd      	mov	sp, r7
 8010d9c:	bd80      	pop	{r7, pc}

08010d9e <_ZN5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS3_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 8010d9e:	b580      	push	{r7, lr}
 8010da0:	b082      	sub	sp, #8
 8010da2:	af00      	add	r7, sp, #0
 8010da4:	6078      	str	r0, [r7, #4]
 8010da6:	6039      	str	r1, [r7, #0]
 8010da8:	6878      	ldr	r0, [r7, #4]
 8010daa:	f7ff ffec 	bl	8010d86 <_ZN5Eigen13TransposeImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEEC1Ev>
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	683a      	ldr	r2, [r7, #0]
 8010db2:	601a      	str	r2, [r3, #0]
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	4618      	mov	r0, r3
 8010db8:	3708      	adds	r7, #8
 8010dba:	46bd      	mov	sp, r7
 8010dbc:	bd80      	pop	{r7, pc}

08010dbe <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8010dbe:	b480      	push	{r7}
 8010dc0:	b083      	sub	sp, #12
 8010dc2:	af00      	add	r7, sp, #0
 8010dc4:	6078      	str	r0, [r7, #4]
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	4618      	mov	r0, r3
 8010dca:	370c      	adds	r7, #12
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd2:	4770      	bx	lr

08010dd4 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
 8010dd4:	b580      	push	{r7, lr}
 8010dd6:	b082      	sub	sp, #8
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	6078      	str	r0, [r7, #4]
 8010ddc:	6878      	ldr	r0, [r7, #4]
 8010dde:	f000 fcca 	bl	8011776 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	4618      	mov	r0, r3
 8010de6:	3708      	adds	r7, #8
 8010de8:	46bd      	mov	sp, r7
 8010dea:	bd80      	pop	{r7, pc}

08010dec <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8010dec:	b580      	push	{r7, lr}
 8010dee:	b082      	sub	sp, #8
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	6078      	str	r0, [r7, #4]
 8010df4:	6878      	ldr	r0, [r7, #4]
 8010df6:	f7ff ffed 	bl	8010dd4 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	3708      	adds	r7, #8
 8010e00:	46bd      	mov	sp, r7
 8010e02:	bd80      	pop	{r7, pc}

08010e04 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 8010e04:	b580      	push	{r7, lr}
 8010e06:	b082      	sub	sp, #8
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	6078      	str	r0, [r7, #4]
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	4618      	mov	r0, r3
 8010e12:	f7f4 fae5 	bl	80053e0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8010e16:	4603      	mov	r3, r0
 8010e18:	4618      	mov	r0, r3
 8010e1a:	3708      	adds	r7, #8
 8010e1c:	46bd      	mov	sp, r7
 8010e1e:	bd80      	pop	{r7, pc}

08010e20 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b082      	sub	sp, #8
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	f7f4 fae2 	bl	80053f6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8010e32:	4603      	mov	r3, r0
 8010e34:	4618      	mov	r0, r3
 8010e36:	3708      	adds	r7, #8
 8010e38:	46bd      	mov	sp, r7
 8010e3a:	bd80      	pop	{r7, pc}

08010e3c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8010e3c:	b590      	push	{r4, r7, lr}
 8010e3e:	b085      	sub	sp, #20
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	60f8      	str	r0, [r7, #12]
 8010e44:	60b9      	str	r1, [r7, #8]
 8010e46:	607a      	str	r2, [r7, #4]
 8010e48:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8010e4a:	68f8      	ldr	r0, [r7, #12]
 8010e4c:	f7ff ffce 	bl	8010dec <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEEC1Ev>
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	68ba      	ldr	r2, [r7, #8]
 8010e54:	6812      	ldr	r2, [r2, #0]
 8010e56:	601a      	str	r2, [r3, #0]
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	687a      	ldr	r2, [r7, #4]
 8010e5c:	605a      	str	r2, [r3, #4]
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	3308      	adds	r3, #8
 8010e62:	6839      	ldr	r1, [r7, #0]
 8010e64:	4618      	mov	r0, r3
 8010e66:	f7f4 fc2f 	bl	80056c8 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8010e6a:	68b8      	ldr	r0, [r7, #8]
 8010e6c:	f7ff ffca 	bl	8010e04 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8010e70:	4604      	mov	r4, r0
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	4618      	mov	r0, r3
 8010e76:	f7f4 f9a2 	bl	80051be <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8010e7a:	4603      	mov	r3, r0
 8010e7c:	429c      	cmp	r4, r3
 8010e7e:	d10a      	bne.n	8010e96 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x5a>
 8010e80:	68b8      	ldr	r0, [r7, #8]
 8010e82:	f7ff ffcd 	bl	8010e20 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8010e86:	4604      	mov	r4, r0
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	f7f4 f98c 	bl	80051a8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8010e90:	4603      	mov	r3, r0
 8010e92:	429c      	cmp	r4, r3
 8010e94:	d005      	beq.n	8010ea2 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x66>
 8010e96:	4b05      	ldr	r3, [pc, #20]	; (8010eac <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x70>)
 8010e98:	4a05      	ldr	r2, [pc, #20]	; (8010eb0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x74>)
 8010e9a:	2174      	movs	r1, #116	; 0x74
 8010e9c:	4805      	ldr	r0, [pc, #20]	; (8010eb4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x78>)
 8010e9e:	f00d f801 	bl	801dea4 <__assert_func>
    }
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	3714      	adds	r7, #20
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	bd90      	pop	{r4, r7, pc}
 8010eac:	0801fd0c 	.word	0x0801fd0c
 8010eb0:	0802807c 	.word	0x0802807c
 8010eb4:	0801ff70 	.word	0x0801ff70

08010eb8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	b082      	sub	sp, #8
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]
 8010ec0:	6878      	ldr	r0, [r7, #4]
 8010ec2:	f000 f809 	bl	8010ed8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 8010ec6:	4603      	mov	r3, r0
 8010ec8:	4618      	mov	r0, r3
 8010eca:	f000 fc5f 	bl	801178c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8010ece:	4603      	mov	r3, r0
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	3708      	adds	r7, #8
 8010ed4:	46bd      	mov	sp, r7
 8010ed6:	bd80      	pop	{r7, pc}

08010ed8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8010ed8:	b480      	push	{r7}
 8010eda:	b083      	sub	sp, #12
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	6078      	str	r0, [r7, #4]
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	370c      	adds	r7, #12
 8010ee6:	46bd      	mov	sp, r7
 8010ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eec:	4770      	bx	lr

08010eee <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8010eee:	b580      	push	{r7, lr}
 8010ef0:	b082      	sub	sp, #8
 8010ef2:	af00      	add	r7, sp, #0
 8010ef4:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	4618      	mov	r0, r3
 8010efa:	f7ff ff83 	bl	8010e04 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8010efe:	4603      	mov	r3, r0
    }
 8010f00:	4618      	mov	r0, r3
 8010f02:	3708      	adds	r7, #8
 8010f04:	46bd      	mov	sp, r7
 8010f06:	bd80      	pop	{r7, pc}

08010f08 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
struct evaluator<const T>
 8010f08:	b580      	push	{r7, lr}
 8010f0a:	b082      	sub	sp, #8
 8010f0c:	af00      	add	r7, sp, #0
 8010f0e:	6078      	str	r0, [r7, #4]
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	4618      	mov	r0, r3
 8010f14:	f7fe f968 	bl	800f1e8 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	3708      	adds	r7, #8
 8010f1e:	46bd      	mov	sp, r7
 8010f20:	bd80      	pop	{r7, pc}

08010f22 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 8010f22:	b580      	push	{r7, lr}
 8010f24:	b082      	sub	sp, #8
 8010f26:	af00      	add	r7, sp, #0
 8010f28:	6078      	str	r0, [r7, #4]
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	f7ff ffeb 	bl	8010f08 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 8010f32:	6878      	ldr	r0, [r7, #4]
 8010f34:	f000 fc51 	bl	80117da <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	3708      	adds	r7, #8
 8010f3e:	46bd      	mov	sp, r7
 8010f40:	bd80      	pop	{r7, pc}

08010f42 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 8010f42:	b580      	push	{r7, lr}
 8010f44:	b082      	sub	sp, #8
 8010f46:	af00      	add	r7, sp, #0
 8010f48:	6078      	str	r0, [r7, #4]
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	f7ff ffe8 	bl	8010f22 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfED1Ev>
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	4618      	mov	r0, r3
 8010f56:	3708      	adds	r7, #8
 8010f58:	46bd      	mov	sp, r7
 8010f5a:	bd80      	pop	{r7, pc}

08010f5c <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
struct evaluator<const T>
 8010f5c:	b580      	push	{r7, lr}
 8010f5e:	b082      	sub	sp, #8
 8010f60:	af00      	add	r7, sp, #0
 8010f62:	6078      	str	r0, [r7, #4]
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	4618      	mov	r0, r3
 8010f68:	f7ff ffeb 	bl	8010f42 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	4618      	mov	r0, r3
 8010f70:	3708      	adds	r7, #8
 8010f72:	46bd      	mov	sp, r7
 8010f74:	bd80      	pop	{r7, pc}

08010f76 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4DataD1Ev>:
  struct Data
 8010f76:	b580      	push	{r7, lr}
 8010f78:	b082      	sub	sp, #8
 8010f7a:	af00      	add	r7, sp, #0
 8010f7c:	6078      	str	r0, [r7, #4]
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	3308      	adds	r3, #8
 8010f82:	4618      	mov	r0, r3
 8010f84:	f7f8 f824 	bl	8008fd0 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	3304      	adds	r3, #4
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	f7ff ffe5 	bl	8010f5c <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	4618      	mov	r0, r3
 8010f96:	3708      	adds	r7, #8
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	bd80      	pop	{r7, pc}

08010f9c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	b082      	sub	sp, #8
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	6078      	str	r0, [r7, #4]
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	f7ff ffe5 	bl	8010f76 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4DataD1Ev>
 8010fac:	6878      	ldr	r0, [r7, #4]
 8010fae:	f000 fc09 	bl	80117c4 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	4618      	mov	r0, r3
 8010fb6:	3708      	adds	r7, #8
 8010fb8:	46bd      	mov	sp, r7
 8010fba:	bd80      	pop	{r7, pc}

08010fbc <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8010fbc:	b580      	push	{r7, lr}
 8010fbe:	b082      	sub	sp, #8
 8010fc0:	af00      	add	r7, sp, #0
 8010fc2:	6078      	str	r0, [r7, #4]
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	f7ff ffe8 	bl	8010f9c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffED1Ev>
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	4618      	mov	r0, r3
 8010fd0:	3708      	adds	r7, #8
 8010fd2:	46bd      	mov	sp, r7
 8010fd4:	bd80      	pop	{r7, pc}

08010fd6 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 8010fd6:	b580      	push	{r7, lr}
 8010fd8:	b082      	sub	sp, #8
 8010fda:	af00      	add	r7, sp, #0
 8010fdc:	6078      	str	r0, [r7, #4]
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	f7ff ffeb 	bl	8010fbc <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	4618      	mov	r0, r3
 8010fea:	3708      	adds	r7, #8
 8010fec:	46bd      	mov	sp, r7
 8010fee:	bd80      	pop	{r7, pc}

08010ff0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 8010ff0:	b580      	push	{r7, lr}
 8010ff2:	ed2d 8b02 	vpush	{d8}
 8010ff6:	b086      	sub	sp, #24
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	6078      	str	r0, [r7, #4]
 8010ffc:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 8010ffe:	6878      	ldr	r0, [r7, #4]
 8011000:	f7ff fa4b 	bl	801049a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE4rowsEv>
 8011004:	4603      	mov	r3, r0
 8011006:	2b00      	cmp	r3, #0
 8011008:	dd05      	ble.n	8011016 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 801100a:	6878      	ldr	r0, [r7, #4]
 801100c:	f7ff ff54 	bl	8010eb8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE4colsEv>
 8011010:	4603      	mov	r3, r0
 8011012:	2b00      	cmp	r3, #0
 8011014:	dc06      	bgt.n	8011024 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 8011016:	4b16      	ldr	r3, [pc, #88]	; (8011070 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 8011018:	4a16      	ldr	r2, [pc, #88]	; (8011074 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 801101a:	f240 119b 	movw	r1, #411	; 0x19b
 801101e:	4816      	ldr	r0, [pc, #88]	; (8011078 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 8011020:	f00c ff40 	bl	801dea4 <__assert_func>
 8011024:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8011026:	6878      	ldr	r0, [r7, #4]
 8011028:	f7ff ff56 	bl	8010ed8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 801102c:	4602      	mov	r2, r0
 801102e:	f107 030c 	add.w	r3, r7, #12
 8011032:	4611      	mov	r1, r2
 8011034:	4618      	mov	r0, r3
 8011036:	f000 fbb6 	bl	80117a6 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKSD_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 801103a:	6878      	ldr	r0, [r7, #4]
 801103c:	f7ff ff4c 	bl	8010ed8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 8011040:	4602      	mov	r2, r0
 8011042:	f107 030c 	add.w	r3, r7, #12
 8011046:	6839      	ldr	r1, [r7, #0]
 8011048:	4618      	mov	r0, r3
 801104a:	f000 fbd1 	bl	80117f0 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi2EE3runISG_EEfRKSH_RKS3_RKT_>
 801104e:	eeb0 8a40 	vmov.f32	s16, s0
 8011052:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8011054:	f107 030c 	add.w	r3, r7, #12
 8011058:	4618      	mov	r0, r3
 801105a:	f7ff ffbc 	bl	8010fd6 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 801105e:	eef0 7a48 	vmov.f32	s15, s16
}
 8011062:	eeb0 0a67 	vmov.f32	s0, s15
 8011066:	3718      	adds	r7, #24
 8011068:	46bd      	mov	sp, r7
 801106a:	ecbd 8b02 	vpop	{d8}
 801106e:	bd80      	pop	{r7, pc}
 8011070:	08024d8c 	.word	0x08024d8c
 8011074:	08028244 	.word	0x08028244
 8011078:	08024f98 	.word	0x08024f98

0801107c <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELb0EE3runERKS3_RKS7_>:
    static void run(const Derived&, const OtherDerived&)
 801107c:	b480      	push	{r7}
 801107e:	b083      	sub	sp, #12
 8011080:	af00      	add	r7, sp, #0
 8011082:	6078      	str	r0, [r7, #4]
 8011084:	6039      	str	r1, [r7, #0]
    }
 8011086:	bf00      	nop
 8011088:	370c      	adds	r7, #12
 801108a:	46bd      	mov	sp, r7
 801108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011090:	4770      	bx	lr

08011092 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1ERKS6_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8011092:	b580      	push	{r7, lr}
 8011094:	b082      	sub	sp, #8
 8011096:	af00      	add	r7, sp, #0
 8011098:	6078      	str	r0, [r7, #4]
 801109a:	6039      	str	r1, [r7, #0]
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	6839      	ldr	r1, [r7, #0]
 80110a0:	4618      	mov	r0, r3
 80110a2:	f000 fbb6 	bl	8011812 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffEC1ERKS6_>
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	4618      	mov	r0, r3
 80110aa:	3708      	adds	r7, #8
 80110ac:	46bd      	mov	sp, r7
 80110ae:	bd80      	pop	{r7, pc}

080110b0 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 80110b0:	b480      	push	{r7}
 80110b2:	b083      	sub	sp, #12
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	4618      	mov	r0, r3
 80110bc:	370c      	adds	r7, #12
 80110be:	46bd      	mov	sp, r7
 80110c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c4:	4770      	bx	lr

080110c6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 80110c6:	b580      	push	{r7, lr}
 80110c8:	b082      	sub	sp, #8
 80110ca:	af00      	add	r7, sp, #0
 80110cc:	6078      	str	r0, [r7, #4]
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	4618      	mov	r0, r3
 80110d4:	f7f4 f873 	bl	80051be <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80110d8:	4603      	mov	r3, r0
 80110da:	4618      	mov	r0, r3
 80110dc:	3708      	adds	r7, #8
 80110de:	46bd      	mov	sp, r7
 80110e0:	bd80      	pop	{r7, pc}

080110e2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80110e2:	b580      	push	{r7, lr}
 80110e4:	b082      	sub	sp, #8
 80110e6:	af00      	add	r7, sp, #0
 80110e8:	6078      	str	r0, [r7, #4]
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	685b      	ldr	r3, [r3, #4]
 80110ee:	4618      	mov	r0, r3
 80110f0:	f7f4 f976 	bl	80053e0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80110f4:	4603      	mov	r3, r0
 80110f6:	4618      	mov	r0, r3
 80110f8:	3708      	adds	r7, #8
 80110fa:	46bd      	mov	sp, r7
 80110fc:	bd80      	pop	{r7, pc}
	...

08011100 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const Functor &/*func*/)
 8011100:	b590      	push	{r4, r7, lr}
 8011102:	b085      	sub	sp, #20
 8011104:	af00      	add	r7, sp, #0
 8011106:	60f8      	str	r0, [r7, #12]
 8011108:	60b9      	str	r1, [r7, #8]
 801110a:	607a      	str	r2, [r7, #4]
  eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	4618      	mov	r0, r3
 8011110:	f7f3 ffaf 	bl	8005072 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8011114:	4604      	mov	r4, r0
 8011116:	68b8      	ldr	r0, [r7, #8]
 8011118:	f7ff ffd5 	bl	80110c6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE4rowsEv>
 801111c:	4603      	mov	r3, r0
 801111e:	429c      	cmp	r4, r3
 8011120:	d10a      	bne.n	8011138 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x38>
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	4618      	mov	r0, r3
 8011126:	f7f3 ff99 	bl	800505c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 801112a:	4604      	mov	r4, r0
 801112c:	68b8      	ldr	r0, [r7, #8]
 801112e:	f7ff ffd8 	bl	80110e2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE4colsEv>
 8011132:	4603      	mov	r3, r0
 8011134:	429c      	cmp	r4, r3
 8011136:	d006      	beq.n	8011146 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x46>
 8011138:	4b05      	ldr	r3, [pc, #20]	; (8011150 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x50>)
 801113a:	4a06      	ldr	r2, [pc, #24]	; (8011154 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x54>)
 801113c:	f240 21f2 	movw	r1, #754	; 0x2f2
 8011140:	4805      	ldr	r0, [pc, #20]	; (8011158 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x58>)
 8011142:	f00c feaf 	bl	801dea4 <__assert_func>
}
 8011146:	bf00      	nop
 8011148:	3714      	adds	r7, #20
 801114a:	46bd      	mov	sp, r7
 801114c:	bd90      	pop	{r4, r7, pc}
 801114e:	bf00      	nop
 8011150:	08022aa0 	.word	0x08022aa0
 8011154:	080283c8 	.word	0x080283c8
 8011158:	08022498 	.word	0x08022498

0801115c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEC1ERS5_RKSA_RKSC_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 801115c:	b480      	push	{r7}
 801115e:	b085      	sub	sp, #20
 8011160:	af00      	add	r7, sp, #0
 8011162:	60f8      	str	r0, [r7, #12]
 8011164:	60b9      	str	r1, [r7, #8]
 8011166:	607a      	str	r2, [r7, #4]
 8011168:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	68ba      	ldr	r2, [r7, #8]
 801116e:	601a      	str	r2, [r3, #0]
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	687a      	ldr	r2, [r7, #4]
 8011174:	605a      	str	r2, [r3, #4]
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	683a      	ldr	r2, [r7, #0]
 801117a:	609a      	str	r2, [r3, #8]
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	69ba      	ldr	r2, [r7, #24]
 8011180:	60da      	str	r2, [r3, #12]
  }
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	4618      	mov	r0, r3
 8011186:	3714      	adds	r7, #20
 8011188:	46bd      	mov	sp, r7
 801118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801118e:	4770      	bx	lr

08011190 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi0ELi2EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8011190:	b580      	push	{r7, lr}
 8011192:	b082      	sub	sp, #8
 8011194:	af00      	add	r7, sp, #0
 8011196:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8011198:	6878      	ldr	r0, [r7, #4]
 801119a:	f000 fb6f 	bl	801187c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi0ELi9EE3runERSE_>
  }
 801119e:	bf00      	nop
 80111a0:	3708      	adds	r7, #8
 80111a2:	46bd      	mov	sp, r7
 80111a4:	bd80      	pop	{r7, pc}

080111a6 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li3ELi1ELb1EEE>:
  explicit block_evaluator(const XprType& block)
 80111a6:	b580      	push	{r7, lr}
 80111a8:	b082      	sub	sp, #8
 80111aa:	af00      	add	r7, sp, #0
 80111ac:	6078      	str	r0, [r7, #4]
 80111ae:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	6839      	ldr	r1, [r7, #0]
 80111b4:	4618      	mov	r0, r3
 80111b6:	f000 fb71 	bl	801189c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 80111ba:	683b      	ldr	r3, [r7, #0]
 80111bc:	4618      	mov	r0, r3
 80111be:	f000 fb97 	bl	80118f0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4dataEv>
 80111c2:	bf00      	nop
  }
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	4618      	mov	r0, r3
 80111c8:	3708      	adds	r7, #8
 80111ca:	46bd      	mov	sp, r7
 80111cc:	bd80      	pop	{r7, pc}

080111ce <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 80111ce:	b580      	push	{r7, lr}
 80111d0:	b082      	sub	sp, #8
 80111d2:	af00      	add	r7, sp, #0
 80111d4:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 80111d6:	f7f5 fd16 	bl	8006c06 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 80111da:	4603      	mov	r3, r0
  }
 80111dc:	4618      	mov	r0, r3
 80111de:	3708      	adds	r7, #8
 80111e0:	46bd      	mov	sp, r7
 80111e2:	bd80      	pop	{r7, pc}

080111e4 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 80111e4:	b580      	push	{r7, lr}
 80111e6:	b082      	sub	sp, #8
 80111e8:	af00      	add	r7, sp, #0
 80111ea:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 80111ec:	f7f5 fd13 	bl	8006c16 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 80111f0:	4603      	mov	r3, r0
  }
 80111f2:	4618      	mov	r0, r3
 80111f4:	3708      	adds	r7, #8
 80111f6:	46bd      	mov	sp, r7
 80111f8:	bd80      	pop	{r7, pc}

080111fa <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 80111fa:	b480      	push	{r7}
 80111fc:	b083      	sub	sp, #12
 80111fe:	af00      	add	r7, sp, #0
 8011200:	6078      	str	r0, [r7, #4]
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	4618      	mov	r0, r3
 8011206:	370c      	adds	r7, #12
 8011208:	46bd      	mov	sp, r7
 801120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801120e:	4770      	bx	lr

08011210 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8011210:	b480      	push	{r7}
 8011212:	b083      	sub	sp, #12
 8011214:	af00      	add	r7, sp, #0
 8011216:	6078      	str	r0, [r7, #4]
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	4618      	mov	r0, r3
 801121c:	370c      	adds	r7, #12
 801121e:	46bd      	mov	sp, r7
 8011220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011224:	4770      	bx	lr

08011226 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERSH_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8011226:	b580      	push	{r7, lr}
 8011228:	b082      	sub	sp, #8
 801122a:	af00      	add	r7, sp, #0
 801122c:	6078      	str	r0, [r7, #4]
 801122e:	6039      	str	r1, [r7, #0]
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	6839      	ldr	r1, [r7, #0]
 8011234:	4618      	mov	r0, r3
 8011236:	f000 fb67 	bl	8011908 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERKSG_>
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	4618      	mov	r0, r3
 801123e:	3708      	adds	r7, #8
 8011240:	46bd      	mov	sp, r7
 8011242:	bd80      	pop	{r7, pc}

08011244 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEEC1ERKS8_>:
  explicit mapbase_evaluator(const XprType& map)
 8011244:	b590      	push	{r4, r7, lr}
 8011246:	b083      	sub	sp, #12
 8011248:	af00      	add	r7, sp, #0
 801124a:	6078      	str	r0, [r7, #4]
 801124c:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 801124e:	6878      	ldr	r0, [r7, #4]
 8011250:	f000 fb85 	bl	801195e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8011254:	683b      	ldr	r3, [r7, #0]
 8011256:	4618      	mov	r0, r3
 8011258:	f000 f81e 	bl	8011298 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4dataEv>
 801125c:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	601a      	str	r2, [r3, #0]
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	1d1c      	adds	r4, r3, #4
 8011266:	683b      	ldr	r3, [r7, #0]
 8011268:	4618      	mov	r0, r3
 801126a:	f000 fb5c 	bl	8011926 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE11innerStrideEv>
 801126e:	4603      	mov	r3, r0
 8011270:	4619      	mov	r1, r3
 8011272:	4620      	mov	r0, r4
 8011274:	f7f5 fca2 	bl	8006bbc <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	1d5c      	adds	r4, r3, #5
 801127c:	683b      	ldr	r3, [r7, #0]
 801127e:	4618      	mov	r0, r3
 8011280:	f000 fb5f 	bl	8011942 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE11outerStrideEv>
 8011284:	4603      	mov	r3, r0
 8011286:	4619      	mov	r1, r3
 8011288:	4620      	mov	r0, r4
 801128a:	f7f5 fc7d 	bl	8006b88 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	4618      	mov	r0, r3
 8011292:	370c      	adds	r7, #12
 8011294:	46bd      	mov	sp, r7
 8011296:	bd90      	pop	{r4, r7, pc}

08011298 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4dataEv>:
 8011298:	b480      	push	{r7}
 801129a:	b083      	sub	sp, #12
 801129c:	af00      	add	r7, sp, #0
 801129e:	6078      	str	r0, [r7, #4]
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	4618      	mov	r0, r3
 80112a6:	370c      	adds	r7, #12
 80112a8:	46bd      	mov	sp, r7
 80112aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ae:	4770      	bx	lr

080112b0 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 80112b0:	b480      	push	{r7}
 80112b2:	b083      	sub	sp, #12
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	6078      	str	r0, [r7, #4]
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	4618      	mov	r0, r3
 80112bc:	370c      	adds	r7, #12
 80112be:	46bd      	mov	sp, r7
 80112c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c4:	4770      	bx	lr

080112c6 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 80112c6:	b590      	push	{r4, r7, lr}
 80112c8:	b085      	sub	sp, #20
 80112ca:	af00      	add	r7, sp, #0
 80112cc:	60f8      	str	r0, [r7, #12]
 80112ce:	60b9      	str	r1, [r7, #8]
 80112d0:	607a      	str	r2, [r7, #4]
      return m_d.data[row + col * m_d.outerStride()];
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	681c      	ldr	r4, [r3, #0]
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	4618      	mov	r0, r3
 80112da:	f7f5 feef 	bl	80070bc <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>
 80112de:	4602      	mov	r2, r0
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	fb03 f202 	mul.w	r2, r3, r2
 80112e6:	68bb      	ldr	r3, [r7, #8]
 80112e8:	4413      	add	r3, r2
 80112ea:	009b      	lsls	r3, r3, #2
 80112ec:	4423      	add	r3, r4
  }
 80112ee:	4618      	mov	r0, r3
 80112f0:	3714      	adds	r7, #20
 80112f2:	46bd      	mov	sp, r7
 80112f4:	bd90      	pop	{r4, r7, pc}

080112f6 <_ZNK5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffIiEEfT_SB_>:
  CoeffReturnType coeff(IndexType row, IndexType col) const
 80112f6:	b580      	push	{r7, lr}
 80112f8:	b084      	sub	sp, #16
 80112fa:	af00      	add	r7, sp, #0
 80112fc:	60f8      	str	r0, [r7, #12]
 80112fe:	60b9      	str	r1, [r7, #8]
 8011300:	607a      	str	r2, [r7, #4]
    return m_wrapper(m_functor, row, col);
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	1d18      	adds	r0, r3, #4
 8011306:	68f9      	ldr	r1, [r7, #12]
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	68ba      	ldr	r2, [r7, #8]
 801130c:	f000 fb32 	bl	8011974 <_ZNK5Eigen8internal15nullary_wrapperIfNS0_18scalar_constant_opIfEELb1ELb0ELb0EEclIiEEfRKS3_T_S8_>
 8011310:	eef0 7a40 	vmov.f32	s15, s0
  }
 8011314:	eeb0 0a67 	vmov.f32	s0, s15
 8011318:	3710      	adds	r7, #16
 801131a:	46bd      	mov	sp, r7
 801131c:	bd80      	pop	{r7, pc}

0801131e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 801131e:	b580      	push	{r7, lr}
 8011320:	b082      	sub	sp, #8
 8011322:	af00      	add	r7, sp, #0
 8011324:	6078      	str	r0, [r7, #4]
 8011326:	6039      	str	r1, [r7, #0]
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	6839      	ldr	r1, [r7, #0]
 801132c:	4618      	mov	r0, r3
 801132e:	f000 fb32 	bl	8011996 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi3ELb0EEE>
  }
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	4618      	mov	r0, r3
 8011336:	3708      	adds	r7, #8
 8011338:	46bd      	mov	sp, r7
 801133a:	bd80      	pop	{r7, pc}

0801133c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 801133c:	b580      	push	{r7, lr}
 801133e:	b082      	sub	sp, #8
 8011340:	af00      	add	r7, sp, #0
 8011342:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	689b      	ldr	r3, [r3, #8]
 8011348:	4618      	mov	r0, r3
 801134a:	f7fc fcca 	bl	800dce2 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>
 801134e:	4603      	mov	r3, r0
    }
 8011350:	4618      	mov	r0, r3
 8011352:	3708      	adds	r7, #8
 8011354:	46bd      	mov	sp, r7
 8011356:	bd80      	pop	{r7, pc}

08011358 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8011358:	b580      	push	{r7, lr}
 801135a:	b082      	sub	sp, #8
 801135c:	af00      	add	r7, sp, #0
 801135e:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	689b      	ldr	r3, [r3, #8]
 8011364:	4618      	mov	r0, r3
 8011366:	f7f6 f82d 	bl	80073c4 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 801136a:	4603      	mov	r3, r0
    }
 801136c:	4618      	mov	r0, r3
 801136e:	3708      	adds	r7, #8
 8011370:	46bd      	mov	sp, r7
 8011372:	bd80      	pop	{r7, pc}

08011374 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8011374:	b480      	push	{r7}
 8011376:	b083      	sub	sp, #12
 8011378:	af00      	add	r7, sp, #0
 801137a:	6078      	str	r0, [r7, #4]
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	4618      	mov	r0, r3
 8011380:	370c      	adds	r7, #12
 8011382:	46bd      	mov	sp, r7
 8011384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011388:	4770      	bx	lr

0801138a <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 801138a:	b480      	push	{r7}
 801138c:	b083      	sub	sp, #12
 801138e:	af00      	add	r7, sp, #0
 8011390:	6078      	str	r0, [r7, #4]
    }
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	4618      	mov	r0, r3
 8011396:	370c      	adds	r7, #12
 8011398:	46bd      	mov	sp, r7
 801139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801139e:	4770      	bx	lr

080113a0 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 80113a0:	b580      	push	{r7, lr}
 80113a2:	b082      	sub	sp, #8
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	6078      	str	r0, [r7, #4]
 80113a8:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	4618      	mov	r0, r3
 80113ae:	f7f3 fe60 	bl	8005072 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80113b2:	4603      	mov	r3, r0
 80113b4:	2b01      	cmp	r3, #1
 80113b6:	dd08      	ble.n	80113ca <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_+0x2a>
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	4618      	mov	r0, r3
 80113bc:	f7f3 fe4e 	bl	800505c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80113c0:	4603      	mov	r3, r0
 80113c2:	2b01      	cmp	r3, #1
 80113c4:	dd01      	ble.n	80113ca <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_+0x2a>
 80113c6:	2301      	movs	r3, #1
 80113c8:	e000      	b.n	80113cc <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_+0x2c>
 80113ca:	2300      	movs	r3, #0
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d003      	beq.n	80113d8 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 80113d0:	6839      	ldr	r1, [r7, #0]
 80113d2:	6878      	ldr	r0, [r7, #4]
 80113d4:	f000 faf3 	bl	80119be <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEELb0EE3runERKS3_RKS5_>
}
 80113d8:	bf00      	nop
 80113da:	3708      	adds	r7, #8
 80113dc:	46bd      	mov	sp, r7
 80113de:	bd80      	pop	{r7, pc}

080113e0 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 80113e0:	b580      	push	{r7, lr}
 80113e2:	b082      	sub	sp, #8
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	6078      	str	r0, [r7, #4]
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	330c      	adds	r3, #12
 80113ec:	4618      	mov	r0, r3
 80113ee:	f7f6 f8c8 	bl	8007582 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	3308      	adds	r3, #8
 80113f6:	4618      	mov	r0, r3
 80113f8:	f7f6 f8c3 	bl	8007582 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 80113fc:	6878      	ldr	r0, [r7, #4]
 80113fe:	f000 faf8 	bl	80119f2 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEED1Ev>
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	4618      	mov	r0, r3
 8011406:	3708      	adds	r7, #8
 8011408:	46bd      	mov	sp, r7
 801140a:	bd80      	pop	{r7, pc}

0801140c <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 801140c:	b580      	push	{r7, lr}
 801140e:	b082      	sub	sp, #8
 8011410:	af00      	add	r7, sp, #0
 8011412:	6078      	str	r0, [r7, #4]
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	4618      	mov	r0, r3
 8011418:	f7ff ffe2 	bl	80113e0 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffED1Ev>
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	4618      	mov	r0, r3
 8011420:	3708      	adds	r7, #8
 8011422:	46bd      	mov	sp, r7
 8011424:	bd80      	pop	{r7, pc}

08011426 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8011426:	b580      	push	{r7, lr}
 8011428:	b090      	sub	sp, #64	; 0x40
 801142a:	af02      	add	r7, sp, #8
 801142c:	60f8      	str	r0, [r7, #12]
 801142e:	60b9      	str	r1, [r7, #8]
 8011430:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8011432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011436:	68b9      	ldr	r1, [r7, #8]
 8011438:	4618      	mov	r0, r3
 801143a:	f000 facb 	bl	80119d4 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEC1ERKS5_>
  resize_if_allowed(dst, src, func);
 801143e:	687a      	ldr	r2, [r7, #4]
 8011440:	68b9      	ldr	r1, [r7, #8]
 8011442:	68f8      	ldr	r0, [r7, #12]
 8011444:	f000 fafc 	bl	8011a40 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8011448:	f107 0320 	add.w	r3, r7, #32
 801144c:	68f9      	ldr	r1, [r7, #12]
 801144e:	4618      	mov	r0, r3
 8011450:	f7f6 faa6 	bl	80079a0 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8011454:	68f8      	ldr	r0, [r7, #12]
 8011456:	f7f6 fb0b 	bl	8007a70 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 801145a:	4603      	mov	r3, r0
 801145c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011460:	f107 0120 	add.w	r1, r7, #32
 8011464:	f107 0010 	add.w	r0, r7, #16
 8011468:	9300      	str	r3, [sp, #0]
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	f000 fb32 	bl	8011ad4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS8_RKSA_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8011470:	f107 0310 	add.w	r3, r7, #16
 8011474:	4618      	mov	r0, r3
 8011476:	f000 fb47 	bl	8011b08 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSC_>
  DstEvaluatorType dstEvaluator(dst);
 801147a:	f107 0320 	add.w	r3, r7, #32
 801147e:	4618      	mov	r0, r3
 8011480:	f7f6 f87f 	bl	8007582 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8011484:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011488:	4618      	mov	r0, r3
 801148a:	f7ff ffbf 	bl	801140c <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEED1Ev>
}
 801148e:	bf00      	nop
 8011490:	3738      	adds	r7, #56	; 0x38
 8011492:	46bd      	mov	sp, r7
 8011494:	bd80      	pop	{r7, pc}

08011496 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8011496:	b480      	push	{r7}
 8011498:	b083      	sub	sp, #12
 801149a:	af00      	add	r7, sp, #0
 801149c:	6078      	str	r0, [r7, #4]
    }
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	4618      	mov	r0, r3
 80114a2:	370c      	adds	r7, #12
 80114a4:	46bd      	mov	sp, r7
 80114a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114aa:	4770      	bx	lr

080114ac <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 80114ac:	b480      	push	{r7}
 80114ae:	b083      	sub	sp, #12
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	6078      	str	r0, [r7, #4]
 80114b4:	6039      	str	r1, [r7, #0]
    {}
 80114b6:	bf00      	nop
 80114b8:	370c      	adds	r7, #12
 80114ba:	46bd      	mov	sp, r7
 80114bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c0:	4770      	bx	lr

080114c2 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>:
 80114c2:	b480      	push	{r7}
 80114c4:	b083      	sub	sp, #12
 80114c6:	af00      	add	r7, sp, #0
 80114c8:	6078      	str	r0, [r7, #4]
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	4618      	mov	r0, r3
 80114ce:	370c      	adds	r7, #12
 80114d0:	46bd      	mov	sp, r7
 80114d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d6:	4770      	bx	lr

080114d8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 80114d8:	b590      	push	{r4, r7, lr}
 80114da:	b083      	sub	sp, #12
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
 80114e0:	6039      	str	r1, [r7, #0]
 80114e2:	687c      	ldr	r4, [r7, #4]
 80114e4:	6838      	ldr	r0, [r7, #0]
 80114e6:	f000 fb1a 	bl	8011b1e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE7functorEv>
 80114ea:	4603      	mov	r3, r0
 80114ec:	4619      	mov	r1, r3
 80114ee:	4620      	mov	r0, r4
 80114f0:	f7f4 f8ea 	bl	80056c8 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	1d1c      	adds	r4, r3, #4
 80114f8:	6838      	ldr	r0, [r7, #0]
 80114fa:	f000 fb1c 	bl	8011b36 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE3lhsEv>
 80114fe:	4603      	mov	r3, r0
 8011500:	4619      	mov	r1, r3
 8011502:	4620      	mov	r0, r4
 8011504:	f7fd fc27 	bl	800ed56 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	f103 040c 	add.w	r4, r3, #12
 801150e:	6838      	ldr	r0, [r7, #0]
 8011510:	f000 fb1c 	bl	8011b4c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE3rhsEv>
 8011514:	4603      	mov	r3, r0
 8011516:	4619      	mov	r1, r3
 8011518:	4620      	mov	r0, r4
 801151a:	f000 fb23 	bl	8011b64 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1ERS9_>
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	4618      	mov	r0, r3
 8011522:	370c      	adds	r7, #12
 8011524:	46bd      	mov	sp, r7
 8011526:	bd90      	pop	{r4, r7, pc}

08011528 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8011528:	b580      	push	{r7, lr}
 801152a:	b084      	sub	sp, #16
 801152c:	af00      	add	r7, sp, #0
 801152e:	60f8      	str	r0, [r7, #12]
 8011530:	60b9      	str	r1, [r7, #8]
 8011532:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	68ba      	ldr	r2, [r7, #8]
 8011538:	6879      	ldr	r1, [r7, #4]
 801153a:	4618      	mov	r0, r3
 801153c:	f000 fb21 	bl	8011b82 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 8011540:	eef0 7a40 	vmov.f32	s15, s0
 8011544:	eeb0 0a67 	vmov.f32	s0, s15
 8011548:	3710      	adds	r7, #16
 801154a:	46bd      	mov	sp, r7
 801154c:	bd80      	pop	{r7, pc}

0801154e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi1ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 801154e:	b580      	push	{r7, lr}
 8011550:	b082      	sub	sp, #8
 8011552:	af00      	add	r7, sp, #0
 8011554:	6078      	str	r0, [r7, #4]
 8011556:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8011558:	2201      	movs	r2, #1
 801155a:	2100      	movs	r1, #0
 801155c:	6878      	ldr	r0, [r7, #4]
 801155e:	f7ff ffe3 	bl	8011528 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 8011562:	eef0 7a40 	vmov.f32	s15, s0
  }
 8011566:	eeb0 0a67 	vmov.f32	s0, s15
 801156a:	3708      	adds	r7, #8
 801156c:	46bd      	mov	sp, r7
 801156e:	bd80      	pop	{r7, pc}

08011570 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi2ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8011570:	b580      	push	{r7, lr}
 8011572:	b082      	sub	sp, #8
 8011574:	af00      	add	r7, sp, #0
 8011576:	6078      	str	r0, [r7, #4]
 8011578:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 801157a:	2202      	movs	r2, #2
 801157c:	2100      	movs	r1, #0
 801157e:	6878      	ldr	r0, [r7, #4]
 8011580:	f7ff ffd2 	bl	8011528 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 8011584:	eef0 7a40 	vmov.f32	s15, s0
  }
 8011588:	eeb0 0a67 	vmov.f32	s0, s15
 801158c:	3708      	adds	r7, #8
 801158e:	46bd      	mov	sp, r7
 8011590:	bd80      	pop	{r7, pc}

08011592 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8011592:	b480      	push	{r7}
 8011594:	b083      	sub	sp, #12
 8011596:	af00      	add	r7, sp, #0
 8011598:	6078      	str	r0, [r7, #4]
 801159a:	bf00      	nop
 801159c:	370c      	adds	r7, #12
 801159e:	46bd      	mov	sp, r7
 80115a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115a4:	4770      	bx	lr

080115a6 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfEC1ERKS5_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 80115a6:	b590      	push	{r4, r7, lr}
 80115a8:	b083      	sub	sp, #12
 80115aa:	af00      	add	r7, sp, #0
 80115ac:	6078      	str	r0, [r7, #4]
 80115ae:	6039      	str	r1, [r7, #0]
 80115b0:	6878      	ldr	r0, [r7, #4]
 80115b2:	f000 fb22 	bl	8011bfa <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 80115b6:	687c      	ldr	r4, [r7, #4]
 80115b8:	6838      	ldr	r0, [r7, #0]
 80115ba:	f000 fb12 	bl	8011be2 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 80115be:	4603      	mov	r3, r0
 80115c0:	4619      	mov	r1, r3
 80115c2:	4620      	mov	r0, r4
 80115c4:	f000 fb24 	bl	8011c10 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	4618      	mov	r0, r3
 80115cc:	370c      	adds	r7, #12
 80115ce:	46bd      	mov	sp, r7
 80115d0:	bd90      	pop	{r4, r7, pc}

080115d2 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffE5coeffEi>:
  const CoeffReturnType coeff(Index index) const
 80115d2:	b580      	push	{r7, lr}
 80115d4:	b0a4      	sub	sp, #144	; 0x90
 80115d6:	af00      	add	r7, sp, #0
 80115d8:	6078      	str	r0, [r7, #4]
 80115da:	6039      	str	r1, [r7, #0]
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 80115dc:	683b      	ldr	r3, [r7, #0]
 80115de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 80115e2:	2300      	movs	r3, #0
 80115e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	6819      	ldr	r1, [r3, #0]
 80115ec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80115f0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80115f4:	4618      	mov	r0, r3
 80115f6:	f7f9 fcdb 	bl	800afb0 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 80115fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80115fe:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8011602:	4611      	mov	r1, r2
 8011604:	4618      	mov	r0, r3
 8011606:	f7f9 fce6 	bl	800afd6 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	1d19      	adds	r1, r3, #4
 801160e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8011612:	2200      	movs	r2, #0
 8011614:	4618      	mov	r0, r3
 8011616:	f000 fb0b 	bl	8011c30 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE3colEi>
 801161a:	f107 030c 	add.w	r3, r7, #12
 801161e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8011622:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8011626:	4618      	mov	r0, r3
 8011628:	f000 fb15 	bl	8011c56 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS1_INS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSG_6traitsIT_E6ScalarEEEKS8_KSJ_EERKNS0_ISJ_EE>
 801162c:	f107 030c 	add.w	r3, r7, #12
 8011630:	4618      	mov	r0, r3
 8011632:	f000 fb3e 	bl	8011cb2 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE3sumEv>
 8011636:	eef0 7a40 	vmov.f32	s15, s0
  }
 801163a:	eeb0 0a67 	vmov.f32	s0, s15
 801163e:	3790      	adds	r7, #144	; 0x90
 8011640:	46bd      	mov	sp, r7
 8011642:	bd80      	pop	{r7, pc}

08011644 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8011644:	b580      	push	{r7, lr}
 8011646:	b082      	sub	sp, #8
 8011648:	af00      	add	r7, sp, #0
 801164a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 801164c:	2102      	movs	r1, #2
 801164e:	6878      	ldr	r0, [r7, #4]
 8011650:	f7ff fa67 	bl	8010b22 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8011654:	6878      	ldr	r0, [r7, #4]
 8011656:	f000 fb47 	bl	8011ce8 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSG_>
  }
 801165a:	bf00      	nop
 801165c:	3708      	adds	r7, #8
 801165e:	46bd      	mov	sp, r7
 8011660:	bd80      	pop	{r7, pc}

08011662 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffEC1ERKSG_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8011662:	b580      	push	{r7, lr}
 8011664:	b082      	sub	sp, #8
 8011666:	af00      	add	r7, sp, #0
 8011668:	6078      	str	r0, [r7, #4]
 801166a:	6039      	str	r1, [r7, #0]
 801166c:	6878      	ldr	r0, [r7, #4]
 801166e:	f000 fb45 	bl	8011cfc <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	6839      	ldr	r1, [r7, #0]
 8011676:	4618      	mov	r0, r3
 8011678:	f000 fb4b 	bl	8011d12 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>
  }
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	4618      	mov	r0, r3
 8011680:	3708      	adds	r7, #8
 8011682:	46bd      	mov	sp, r7
 8011684:	bd80      	pop	{r7, pc}

08011686 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi1EE3runERSN_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8011686:	b580      	push	{r7, lr}
 8011688:	b082      	sub	sp, #8
 801168a:	af00      	add	r7, sp, #0
 801168c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 801168e:	2100      	movs	r1, #0
 8011690:	6878      	ldr	r0, [r7, #4]
 8011692:	f000 fb66 	bl	8011d62 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_INS3_IfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8011696:	6878      	ldr	r0, [r7, #4]
 8011698:	f000 fb86 	bl	8011da8 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi1EE3runERSN_>
  }
 801169c:	bf00      	nop
 801169e:	3708      	adds	r7, #8
 80116a0:	46bd      	mov	sp, r7
 80116a2:	bd80      	pop	{r7, pc}

080116a4 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 80116a4:	b580      	push	{r7, lr}
 80116a6:	b082      	sub	sp, #8
 80116a8:	af00      	add	r7, sp, #0
 80116aa:	6078      	str	r0, [r7, #4]
 80116ac:	6039      	str	r1, [r7, #0]
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	6839      	ldr	r1, [r7, #0]
 80116b2:	4618      	mov	r0, r3
 80116b4:	f000 fb82 	bl	8011dbc <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb0EEE>
  }
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	4618      	mov	r0, r3
 80116bc:	3708      	adds	r7, #8
 80116be:	46bd      	mov	sp, r7
 80116c0:	bd80      	pop	{r7, pc}

080116c2 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 80116c2:	b580      	push	{r7, lr}
 80116c4:	b082      	sub	sp, #8
 80116c6:	af00      	add	r7, sp, #0
 80116c8:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	689b      	ldr	r3, [r3, #8]
 80116ce:	4618      	mov	r0, r3
 80116d0:	f7fc fd14 	bl	800e0fc <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11innerStrideEv>
 80116d4:	4603      	mov	r3, r0
    }
 80116d6:	4618      	mov	r0, r3
 80116d8:	3708      	adds	r7, #8
 80116da:	46bd      	mov	sp, r7
 80116dc:	bd80      	pop	{r7, pc}

080116de <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 80116de:	b580      	push	{r7, lr}
 80116e0:	b082      	sub	sp, #8
 80116e2:	af00      	add	r7, sp, #0
 80116e4:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	689b      	ldr	r3, [r3, #8]
 80116ea:	4618      	mov	r0, r3
 80116ec:	f7fa fba2 	bl	800be34 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11outerStrideEv>
 80116f0:	4603      	mov	r3, r0
    }
 80116f2:	4618      	mov	r0, r3
 80116f4:	3708      	adds	r7, #8
 80116f6:	46bd      	mov	sp, r7
 80116f8:	bd80      	pop	{r7, pc}

080116fa <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80116fa:	b480      	push	{r7}
 80116fc:	b083      	sub	sp, #12
 80116fe:	af00      	add	r7, sp, #0
 8011700:	6078      	str	r0, [r7, #4]
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	4618      	mov	r0, r3
 8011706:	370c      	adds	r7, #12
 8011708:	46bd      	mov	sp, r7
 801170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801170e:	4770      	bx	lr

08011710 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8011710:	b5b0      	push	{r4, r5, r7, lr}
 8011712:	b082      	sub	sp, #8
 8011714:	af00      	add	r7, sp, #0
 8011716:	6078      	str	r0, [r7, #4]
 8011718:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	689c      	ldr	r4, [r3, #8]
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	6839      	ldr	r1, [r7, #0]
 8011724:	4618      	mov	r0, r3
 8011726:	f000 fb5d 	bl	8011de4 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE8coeffRefEi>
 801172a:	4605      	mov	r5, r0
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	685b      	ldr	r3, [r3, #4]
 8011730:	6839      	ldr	r1, [r7, #0]
 8011732:	4618      	mov	r0, r3
 8011734:	f000 fb66 	bl	8011e04 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEi>
 8011738:	4603      	mov	r3, r0
 801173a:	461a      	mov	r2, r3
 801173c:	4629      	mov	r1, r5
 801173e:	4620      	mov	r0, r4
 8011740:	f7f7 f836 	bl	80087b0 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8011744:	bf00      	nop
 8011746:	3708      	adds	r7, #8
 8011748:	46bd      	mov	sp, r7
 801174a:	bdb0      	pop	{r4, r5, r7, pc}

0801174c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi1EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 801174c:	b480      	push	{r7}
 801174e:	b083      	sub	sp, #12
 8011750:	af00      	add	r7, sp, #0
 8011752:	6078      	str	r0, [r7, #4]
 8011754:	bf00      	nop
 8011756:	370c      	adds	r7, #12
 8011758:	46bd      	mov	sp, r7
 801175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801175e:	4770      	bx	lr

08011760 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8011760:	b480      	push	{r7}
 8011762:	b083      	sub	sp, #12
 8011764:	af00      	add	r7, sp, #0
 8011766:	6078      	str	r0, [r7, #4]
    }
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	4618      	mov	r0, r3
 801176c:	370c      	adds	r7, #12
 801176e:	46bd      	mov	sp, r7
 8011770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011774:	4770      	bx	lr

08011776 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8011776:	b480      	push	{r7}
 8011778:	b083      	sub	sp, #12
 801177a:	af00      	add	r7, sp, #0
 801177c:	6078      	str	r0, [r7, #4]
    }
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	4618      	mov	r0, r3
 8011782:	370c      	adds	r7, #12
 8011784:	46bd      	mov	sp, r7
 8011786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801178a:	4770      	bx	lr

0801178c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 801178c:	b580      	push	{r7, lr}
 801178e:	b082      	sub	sp, #8
 8011790:	af00      	add	r7, sp, #0
 8011792:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	4618      	mov	r0, r3
 8011798:	f7ff fb42 	bl	8010e20 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 801179c:	4603      	mov	r3, r0
    }
 801179e:	4618      	mov	r0, r3
 80117a0:	3708      	adds	r7, #8
 80117a2:	46bd      	mov	sp, r7
 80117a4:	bd80      	pop	{r7, pc}

080117a6 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKSD_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 80117a6:	b580      	push	{r7, lr}
 80117a8:	b082      	sub	sp, #8
 80117aa:	af00      	add	r7, sp, #0
 80117ac:	6078      	str	r0, [r7, #4]
 80117ae:	6039      	str	r1, [r7, #0]
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	6839      	ldr	r1, [r7, #0]
 80117b4:	4618      	mov	r0, r3
 80117b6:	f000 fb35 	bl	8011e24 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKSD_>
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	4618      	mov	r0, r3
 80117be:	3708      	adds	r7, #8
 80117c0:	46bd      	mov	sp, r7
 80117c2:	bd80      	pop	{r7, pc}

080117c4 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 80117c4:	b480      	push	{r7}
 80117c6:	b083      	sub	sp, #12
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	6078      	str	r0, [r7, #4]
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	4618      	mov	r0, r3
 80117d0:	370c      	adds	r7, #12
 80117d2:	46bd      	mov	sp, r7
 80117d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d8:	4770      	bx	lr

080117da <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
 80117da:	b480      	push	{r7}
 80117dc:	b083      	sub	sp, #12
 80117de:	af00      	add	r7, sp, #0
 80117e0:	6078      	str	r0, [r7, #4]
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	4618      	mov	r0, r3
 80117e6:	370c      	adds	r7, #12
 80117e8:	46bd      	mov	sp, r7
 80117ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ee:	4770      	bx	lr

080117f0 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi2EE3runISG_EEfRKSH_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 80117f0:	b580      	push	{r7, lr}
 80117f2:	b084      	sub	sp, #16
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	60f8      	str	r0, [r7, #12]
 80117f8:	60b9      	str	r1, [r7, #8]
 80117fa:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 80117fc:	68b9      	ldr	r1, [r7, #8]
 80117fe:	68f8      	ldr	r0, [r7, #12]
 8011800:	f000 fb1f 	bl	8011e42 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi3EE3runERKSH_RKS3_>
 8011804:	eef0 7a40 	vmov.f32	s15, s0
  }
 8011808:	eeb0 0a67 	vmov.f32	s0, s15
 801180c:	3710      	adds	r7, #16
 801180e:	46bd      	mov	sp, r7
 8011810:	bd80      	pop	{r7, pc}

08011812 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffEC1ERKS6_>:
  explicit product_evaluator(const XprType& xpr)
 8011812:	b580      	push	{r7, lr}
 8011814:	b082      	sub	sp, #8
 8011816:	af00      	add	r7, sp, #0
 8011818:	6078      	str	r0, [r7, #4]
 801181a:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 801181c:	6878      	ldr	r0, [r7, #4]
 801181e:	f000 fb4c 	bl	8011eba <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 8011822:	6838      	ldr	r0, [r7, #0]
 8011824:	f000 fb31 	bl	8011e8a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3lhsEv>
 8011828:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 801182e:	6838      	ldr	r0, [r7, #0]
 8011830:	f000 fb37 	bl	8011ea2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3rhsEv>
 8011834:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	605a      	str	r2, [r3, #4]
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 8011844:	4619      	mov	r1, r3
 8011846:	4610      	mov	r0, r2
 8011848:	f7f5 f95f 	bl	8006b0a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	685b      	ldr	r3, [r3, #4]
      m_innerDim(xpr.lhs().cols())
 8011856:	4619      	mov	r1, r3
 8011858:	4610      	mov	r0, r2
 801185a:	f000 f9d9 	bl	8011c10 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
 801185e:	6838      	ldr	r0, [r7, #0]
 8011860:	f000 fb13 	bl	8011e8a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3lhsEv>
 8011864:	4603      	mov	r3, r0
 8011866:	4618      	mov	r0, r3
 8011868:	f7f3 fc9e 	bl	80051a8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 801186c:	4602      	mov	r2, r0
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	611a      	str	r2, [r3, #16]
  }
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	4618      	mov	r0, r3
 8011876:	3708      	adds	r7, #8
 8011878:	46bd      	mov	sp, r7
 801187a:	bd80      	pop	{r7, pc}

0801187c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi0ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 801187c:	b580      	push	{r7, lr}
 801187e:	b082      	sub	sp, #8
 8011880:	af00      	add	r7, sp, #0
 8011882:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8011884:	2200      	movs	r2, #0
 8011886:	2100      	movs	r1, #0
 8011888:	6878      	ldr	r0, [r7, #4]
 801188a:	f000 fb21 	bl	8011ed0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 801188e:	6878      	ldr	r0, [r7, #4]
 8011890:	f000 fb37 	bl	8011f02 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi1ELi9EE3runERSE_>
  }
 8011894:	bf00      	nop
 8011896:	3708      	adds	r7, #8
 8011898:	46bd      	mov	sp, r7
 801189a:	bd80      	pop	{r7, pc}

0801189c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 801189c:	b590      	push	{r4, r7, lr}
 801189e:	b083      	sub	sp, #12
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	6078      	str	r0, [r7, #4]
 80118a4:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 80118a6:	6878      	ldr	r0, [r7, #4]
 80118a8:	f000 fb57 	bl	8011f5a <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 80118ac:	683b      	ldr	r3, [r7, #0]
 80118ae:	4618      	mov	r0, r3
 80118b0:	f000 f81e 	bl	80118f0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4dataEv>
 80118b4:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	601a      	str	r2, [r3, #0]
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	1d1c      	adds	r4, r3, #4
 80118be:	683b      	ldr	r3, [r7, #0]
 80118c0:	4618      	mov	r0, r3
 80118c2:	f000 fb2e 	bl	8011f22 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE11innerStrideEv>
 80118c6:	4603      	mov	r3, r0
 80118c8:	4619      	mov	r1, r3
 80118ca:	4620      	mov	r0, r4
 80118cc:	f7f5 f976 	bl	8006bbc <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	1d5c      	adds	r4, r3, #5
 80118d4:	683b      	ldr	r3, [r7, #0]
 80118d6:	4618      	mov	r0, r3
 80118d8:	f000 fb31 	bl	8011f3e <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE11outerStrideEv>
 80118dc:	4603      	mov	r3, r0
 80118de:	4619      	mov	r1, r3
 80118e0:	4620      	mov	r0, r4
 80118e2:	f7f5 f951 	bl	8006b88 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	4618      	mov	r0, r3
 80118ea:	370c      	adds	r7, #12
 80118ec:	46bd      	mov	sp, r7
 80118ee:	bd90      	pop	{r4, r7, pc}

080118f0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 80118f0:	b480      	push	{r7}
 80118f2:	b083      	sub	sp, #12
 80118f4:	af00      	add	r7, sp, #0
 80118f6:	6078      	str	r0, [r7, #4]
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	4618      	mov	r0, r3
 80118fe:	370c      	adds	r7, #12
 8011900:	46bd      	mov	sp, r7
 8011902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011906:	4770      	bx	lr

08011908 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERKSG_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8011908:	b580      	push	{r7, lr}
 801190a:	b082      	sub	sp, #8
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]
 8011910:	6039      	str	r1, [r7, #0]
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	6839      	ldr	r1, [r7, #0]
 8011916:	4618      	mov	r0, r3
 8011918:	f000 fb2a 	bl	8011f70 <_ZN5Eigen8internal15block_evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERKNS_5BlockISE_Li1ELi1ELb0EEE>
  }
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	4618      	mov	r0, r3
 8011920:	3708      	adds	r7, #8
 8011922:	46bd      	mov	sp, r7
 8011924:	bd80      	pop	{r7, pc}

08011926 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8011926:	b580      	push	{r7, lr}
 8011928:	b082      	sub	sp, #8
 801192a:	af00      	add	r7, sp, #0
 801192c:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	3308      	adds	r3, #8
 8011932:	4618      	mov	r0, r3
 8011934:	f7fc fd6a 	bl	800e40c <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11innerStrideEv>
 8011938:	4603      	mov	r3, r0
    }
 801193a:	4618      	mov	r0, r3
 801193c:	3708      	adds	r7, #8
 801193e:	46bd      	mov	sp, r7
 8011940:	bd80      	pop	{r7, pc}

08011942 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8011942:	b580      	push	{r7, lr}
 8011944:	b082      	sub	sp, #8
 8011946:	af00      	add	r7, sp, #0
 8011948:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	3308      	adds	r3, #8
 801194e:	4618      	mov	r0, r3
 8011950:	f7fc fd70 	bl	800e434 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11outerStrideEv>
 8011954:	4603      	mov	r3, r0
    }
 8011956:	4618      	mov	r0, r3
 8011958:	3708      	adds	r7, #8
 801195a:	46bd      	mov	sp, r7
 801195c:	bd80      	pop	{r7, pc}

0801195e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 801195e:	b480      	push	{r7}
 8011960:	b083      	sub	sp, #12
 8011962:	af00      	add	r7, sp, #0
 8011964:	6078      	str	r0, [r7, #4]
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	4618      	mov	r0, r3
 801196a:	370c      	adds	r7, #12
 801196c:	46bd      	mov	sp, r7
 801196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011972:	4770      	bx	lr

08011974 <_ZNK5Eigen8internal15nullary_wrapperIfNS0_18scalar_constant_opIfEELb1ELb0ELb0EEclIiEEfRKS3_T_S8_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar operator()(const NullaryOp& op, IndexType=0, IndexType=0) const { return op(); }
 8011974:	b580      	push	{r7, lr}
 8011976:	b084      	sub	sp, #16
 8011978:	af00      	add	r7, sp, #0
 801197a:	60f8      	str	r0, [r7, #12]
 801197c:	60b9      	str	r1, [r7, #8]
 801197e:	607a      	str	r2, [r7, #4]
 8011980:	603b      	str	r3, [r7, #0]
 8011982:	68b8      	ldr	r0, [r7, #8]
 8011984:	f000 fb03 	bl	8011f8e <_ZNK5Eigen8internal18scalar_constant_opIfEclEv>
 8011988:	eef0 7a40 	vmov.f32	s15, s0
 801198c:	eeb0 0a67 	vmov.f32	s0, s15
 8011990:	3710      	adds	r7, #16
 8011992:	46bd      	mov	sp, r7
 8011994:	bd80      	pop	{r7, pc}

08011996 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi3ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 8011996:	b580      	push	{r7, lr}
 8011998:	b082      	sub	sp, #8
 801199a:	af00      	add	r7, sp, #0
 801199c:	6078      	str	r0, [r7, #4]
 801199e:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	6839      	ldr	r1, [r7, #0]
 80119a4:	4618      	mov	r0, r3
 80119a6:	f000 fb01 	bl	8011fac <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 80119aa:	683b      	ldr	r3, [r7, #0]
 80119ac:	4618      	mov	r0, r3
 80119ae:	f000 fb27 	bl	8012000 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4dataEv>
 80119b2:	bf00      	nop
  }
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	4618      	mov	r0, r3
 80119b8:	3708      	adds	r7, #8
 80119ba:	46bd      	mov	sp, r7
 80119bc:	bd80      	pop	{r7, pc}

080119be <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEELb0EE3runERKS3_RKS5_>:
    static void run(const Derived&, const OtherDerived&)
 80119be:	b480      	push	{r7}
 80119c0:	b083      	sub	sp, #12
 80119c2:	af00      	add	r7, sp, #0
 80119c4:	6078      	str	r0, [r7, #4]
 80119c6:	6039      	str	r1, [r7, #0]
    }
 80119c8:	bf00      	nop
 80119ca:	370c      	adds	r7, #12
 80119cc:	46bd      	mov	sp, r7
 80119ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d2:	4770      	bx	lr

080119d4 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEC1ERKS5_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b082      	sub	sp, #8
 80119d8:	af00      	add	r7, sp, #0
 80119da:	6078      	str	r0, [r7, #4]
 80119dc:	6039      	str	r1, [r7, #0]
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	6839      	ldr	r1, [r7, #0]
 80119e2:	4618      	mov	r0, r3
 80119e4:	f000 fb18 	bl	8012018 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffEC1ERKS5_>
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	4618      	mov	r0, r3
 80119ec:	3708      	adds	r7, #8
 80119ee:	46bd      	mov	sp, r7
 80119f0:	bd80      	pop	{r7, pc}

080119f2 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 80119f2:	b480      	push	{r7}
 80119f4:	b083      	sub	sp, #12
 80119f6:	af00      	add	r7, sp, #0
 80119f8:	6078      	str	r0, [r7, #4]
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	4618      	mov	r0, r3
 80119fe:	370c      	adds	r7, #12
 8011a00:	46bd      	mov	sp, r7
 8011a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a06:	4770      	bx	lr

08011a08 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8011a08:	b580      	push	{r7, lr}
 8011a0a:	b082      	sub	sp, #8
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	6078      	str	r0, [r7, #4]
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	4618      	mov	r0, r3
 8011a16:	f7f3 fb2c 	bl	8005072 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8011a1a:	4603      	mov	r3, r0
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	3708      	adds	r7, #8
 8011a20:	46bd      	mov	sp, r7
 8011a22:	bd80      	pop	{r7, pc}

08011a24 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8011a24:	b580      	push	{r7, lr}
 8011a26:	b082      	sub	sp, #8
 8011a28:	af00      	add	r7, sp, #0
 8011a2a:	6078      	str	r0, [r7, #4]
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	685b      	ldr	r3, [r3, #4]
 8011a30:	4618      	mov	r0, r3
 8011a32:	f7f3 fb13 	bl	800505c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8011a36:	4603      	mov	r3, r0
 8011a38:	4618      	mov	r0, r3
 8011a3a:	3708      	adds	r7, #8
 8011a3c:	46bd      	mov	sp, r7
 8011a3e:	bd80      	pop	{r7, pc}

08011a40 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8011a40:	b580      	push	{r7, lr}
 8011a42:	b086      	sub	sp, #24
 8011a44:	af00      	add	r7, sp, #0
 8011a46:	60f8      	str	r0, [r7, #12]
 8011a48:	60b9      	str	r1, [r7, #8]
 8011a4a:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8011a4c:	68b8      	ldr	r0, [r7, #8]
 8011a4e:	f7ff ffdb 	bl	8011a08 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE4rowsEv>
 8011a52:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8011a54:	68b8      	ldr	r0, [r7, #8]
 8011a56:	f7ff ffe5 	bl	8011a24 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE4colsEv>
 8011a5a:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	4618      	mov	r0, r3
 8011a60:	f7f3 fb07 	bl	8005072 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8011a64:	4602      	mov	r2, r0
 8011a66:	697b      	ldr	r3, [r7, #20]
 8011a68:	4293      	cmp	r3, r2
 8011a6a:	d107      	bne.n	8011a7c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	4618      	mov	r0, r3
 8011a70:	f7f3 faf4 	bl	800505c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8011a74:	4602      	mov	r2, r0
 8011a76:	693b      	ldr	r3, [r7, #16]
 8011a78:	4293      	cmp	r3, r2
 8011a7a:	d001      	beq.n	8011a80 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8011a7c:	2301      	movs	r3, #1
 8011a7e:	e000      	b.n	8011a82 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8011a80:	2300      	movs	r3, #0
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d005      	beq.n	8011a92 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	693a      	ldr	r2, [r7, #16]
 8011a8a:	6979      	ldr	r1, [r7, #20]
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	f7f6 fa09 	bl	8007ea4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	4618      	mov	r0, r3
 8011a96:	f7f3 faec 	bl	8005072 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8011a9a:	4602      	mov	r2, r0
 8011a9c:	697b      	ldr	r3, [r7, #20]
 8011a9e:	4293      	cmp	r3, r2
 8011aa0:	d107      	bne.n	8011ab2 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	4618      	mov	r0, r3
 8011aa6:	f7f3 fad9 	bl	800505c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8011aaa:	4602      	mov	r2, r0
 8011aac:	693b      	ldr	r3, [r7, #16]
 8011aae:	4293      	cmp	r3, r2
 8011ab0:	d006      	beq.n	8011ac0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8011ab2:	4b05      	ldr	r3, [pc, #20]	; (8011ac8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8011ab4:	4a05      	ldr	r2, [pc, #20]	; (8011acc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8011ab6:	f240 21fd 	movw	r1, #765	; 0x2fd
 8011aba:	4805      	ldr	r0, [pc, #20]	; (8011ad0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8011abc:	f00c f9f2 	bl	801dea4 <__assert_func>
}
 8011ac0:	bf00      	nop
 8011ac2:	3718      	adds	r7, #24
 8011ac4:	46bd      	mov	sp, r7
 8011ac6:	bd80      	pop	{r7, pc}
 8011ac8:	08022384 	.word	0x08022384
 8011acc:	080284e0 	.word	0x080284e0
 8011ad0:	08022498 	.word	0x08022498

08011ad4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS8_RKSA_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8011ad4:	b480      	push	{r7}
 8011ad6:	b085      	sub	sp, #20
 8011ad8:	af00      	add	r7, sp, #0
 8011ada:	60f8      	str	r0, [r7, #12]
 8011adc:	60b9      	str	r1, [r7, #8]
 8011ade:	607a      	str	r2, [r7, #4]
 8011ae0:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	68ba      	ldr	r2, [r7, #8]
 8011ae6:	601a      	str	r2, [r3, #0]
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	687a      	ldr	r2, [r7, #4]
 8011aec:	605a      	str	r2, [r3, #4]
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	683a      	ldr	r2, [r7, #0]
 8011af2:	609a      	str	r2, [r3, #8]
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	69ba      	ldr	r2, [r7, #24]
 8011af8:	60da      	str	r2, [r3, #12]
  }
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	4618      	mov	r0, r3
 8011afe:	3714      	adds	r7, #20
 8011b00:	46bd      	mov	sp, r7
 8011b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b06:	4770      	bx	lr

08011b08 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8011b08:	b580      	push	{r7, lr}
 8011b0a:	b082      	sub	sp, #8
 8011b0c:	af00      	add	r7, sp, #0
 8011b0e:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8011b10:	6878      	ldr	r0, [r7, #4]
 8011b12:	f000 fab6 	bl	8012082 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSC_>
  }
 8011b16:	bf00      	nop
 8011b18:	3708      	adds	r7, #8
 8011b1a:	46bd      	mov	sp, r7
 8011b1c:	bd80      	pop	{r7, pc}

08011b1e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8011b1e:	b480      	push	{r7}
 8011b20:	b083      	sub	sp, #12
 8011b22:	af00      	add	r7, sp, #0
 8011b24:	6078      	str	r0, [r7, #4]
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	3330      	adds	r3, #48	; 0x30
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	370c      	adds	r7, #12
 8011b2e:	46bd      	mov	sp, r7
 8011b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b34:	4770      	bx	lr

08011b36 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8011b36:	b480      	push	{r7}
 8011b38:	b083      	sub	sp, #12
 8011b3a:	af00      	add	r7, sp, #0
 8011b3c:	6078      	str	r0, [r7, #4]
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	4618      	mov	r0, r3
 8011b42:	370c      	adds	r7, #12
 8011b44:	46bd      	mov	sp, r7
 8011b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b4a:	4770      	bx	lr

08011b4c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8011b4c:	b480      	push	{r7}
 8011b4e:	b083      	sub	sp, #12
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	6078      	str	r0, [r7, #4]
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	3318      	adds	r3, #24
 8011b58:	4618      	mov	r0, r3
 8011b5a:	370c      	adds	r7, #12
 8011b5c:	46bd      	mov	sp, r7
 8011b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b62:	4770      	bx	lr

08011b64 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1ERS9_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8011b64:	b580      	push	{r7, lr}
 8011b66:	b082      	sub	sp, #8
 8011b68:	af00      	add	r7, sp, #0
 8011b6a:	6078      	str	r0, [r7, #4]
 8011b6c:	6039      	str	r1, [r7, #0]
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	6839      	ldr	r1, [r7, #0]
 8011b72:	4618      	mov	r0, r3
 8011b74:	f000 fa95 	bl	80120a2 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1ERKS8_>
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	3708      	adds	r7, #8
 8011b7e:	46bd      	mov	sp, r7
 8011b80:	bd80      	pop	{r7, pc}

08011b82 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8011b82:	b590      	push	{r4, r7, lr}
 8011b84:	b087      	sub	sp, #28
 8011b86:	af00      	add	r7, sp, #0
 8011b88:	60f8      	str	r0, [r7, #12]
 8011b8a:	60b9      	str	r1, [r7, #8]
 8011b8c:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	4618      	mov	r0, r3
 8011b92:	f000 fa95 	bl	80120c0 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 8011b96:	4604      	mov	r4, r0
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	3304      	adds	r3, #4
 8011b9c:	687a      	ldr	r2, [r7, #4]
 8011b9e:	68b9      	ldr	r1, [r7, #8]
 8011ba0:	4618      	mov	r0, r3
 8011ba2:	f7fd fdf3 	bl	800f78c <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 8011ba6:	eef0 7a40 	vmov.f32	s15, s0
 8011baa:	edc7 7a04 	vstr	s15, [r7, #16]
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	330c      	adds	r3, #12
 8011bb2:	687a      	ldr	r2, [r7, #4]
 8011bb4:	68b9      	ldr	r1, [r7, #8]
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	f000 fa8d 	bl	80120d6 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>
 8011bbc:	eef0 7a40 	vmov.f32	s15, s0
 8011bc0:	edc7 7a05 	vstr	s15, [r7, #20]
 8011bc4:	f107 0214 	add.w	r2, r7, #20
 8011bc8:	f107 0310 	add.w	r3, r7, #16
 8011bcc:	4619      	mov	r1, r3
 8011bce:	4620      	mov	r0, r4
 8011bd0:	f7fd fc20 	bl	800f414 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 8011bd4:	eef0 7a40 	vmov.f32	s15, s0
  }
 8011bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8011bdc:	371c      	adds	r7, #28
 8011bde:	46bd      	mov	sp, r7
 8011be0:	bd90      	pop	{r4, r7, pc}

08011be2 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 8011be2:	b480      	push	{r7}
 8011be4:	b083      	sub	sp, #12
 8011be6:	af00      	add	r7, sp, #0
 8011be8:	6078      	str	r0, [r7, #4]
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	4618      	mov	r0, r3
 8011bf0:	370c      	adds	r7, #12
 8011bf2:	46bd      	mov	sp, r7
 8011bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf8:	4770      	bx	lr

08011bfa <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8011bfa:	b480      	push	{r7}
 8011bfc:	b083      	sub	sp, #12
 8011bfe:	af00      	add	r7, sp, #0
 8011c00:	6078      	str	r0, [r7, #4]
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	4618      	mov	r0, r3
 8011c06:	370c      	adds	r7, #12
 8011c08:	46bd      	mov	sp, r7
 8011c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c0e:	4770      	bx	lr

08011c10 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>:
  explicit evaluator(const XprType& m)
 8011c10:	b580      	push	{r7, lr}
 8011c12:	b082      	sub	sp, #8
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	6078      	str	r0, [r7, #4]
 8011c18:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	683a      	ldr	r2, [r7, #0]
 8011c1e:	4611      	mov	r1, r2
 8011c20:	4618      	mov	r0, r3
 8011c22:	f000 fa79 	bl	8012118 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>
  { }
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	4618      	mov	r0, r3
 8011c2a:	3708      	adds	r7, #8
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	bd80      	pop	{r7, pc}

08011c30 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE3colEi>:
ConstColXpr col(Index i) const
 8011c30:	b580      	push	{r7, lr}
 8011c32:	b084      	sub	sp, #16
 8011c34:	af00      	add	r7, sp, #0
 8011c36:	60f8      	str	r0, [r7, #12]
 8011c38:	60b9      	str	r1, [r7, #8]
 8011c3a:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 8011c3c:	68b8      	ldr	r0, [r7, #8]
 8011c3e:	f7f4 f887 	bl	8005d50 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8011c42:	4603      	mov	r3, r0
 8011c44:	687a      	ldr	r2, [r7, #4]
 8011c46:	4619      	mov	r1, r3
 8011c48:	68f8      	ldr	r0, [r7, #12]
 8011c4a:	f000 fa7d 	bl	8012148 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i>
}
 8011c4e:	68f8      	ldr	r0, [r7, #12]
 8011c50:	3710      	adds	r7, #16
 8011c52:	46bd      	mov	sp, r7
 8011c54:	bd80      	pop	{r7, pc}

08011c56 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS1_INS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSG_6traitsIT_E6ScalarEEEKS8_KSJ_EERKNS0_ISJ_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 8011c56:	b5b0      	push	{r4, r5, r7, lr}
 8011c58:	b086      	sub	sp, #24
 8011c5a:	af00      	add	r7, sp, #0
 8011c5c:	60f8      	str	r0, [r7, #12]
 8011c5e:	60b9      	str	r1, [r7, #8]
 8011c60:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 8011c62:	68b8      	ldr	r0, [r7, #8]
 8011c64:	f7f9 fe6e 	bl	800b944 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>
 8011c68:	4604      	mov	r4, r0
 8011c6a:	6878      	ldr	r0, [r7, #4]
 8011c6c:	f000 fa94 	bl	8012198 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE7derivedEv>
 8011c70:	4605      	mov	r5, r0
 8011c72:	f107 0314 	add.w	r3, r7, #20
 8011c76:	4618      	mov	r0, r3
 8011c78:	f7f3 fc9c 	bl	80055b4 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 8011c7c:	f107 0314 	add.w	r3, r7, #20
 8011c80:	462a      	mov	r2, r5
 8011c82:	4621      	mov	r1, r4
 8011c84:	68f8      	ldr	r0, [r7, #12]
 8011c86:	f000 fac1 	bl	801220c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_>
}
 8011c8a:	68f8      	ldr	r0, [r7, #12]
 8011c8c:	3718      	adds	r7, #24
 8011c8e:	46bd      	mov	sp, r7
 8011c90:	bdb0      	pop	{r4, r5, r7, pc}

08011c92 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8011c92:	b580      	push	{r7, lr}
 8011c94:	b082      	sub	sp, #8
 8011c96:	af00      	add	r7, sp, #0
 8011c98:	6078      	str	r0, [r7, #4]
 8011c9a:	6878      	ldr	r0, [r7, #4]
 8011c9c:	f000 fb14 	bl	80122c8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 8011ca0:	4603      	mov	r3, r0
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	f000 fb1b 	bl	80122de <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE4rowsEv>
 8011ca8:	4603      	mov	r3, r0
 8011caa:	4618      	mov	r0, r3
 8011cac:	3708      	adds	r7, #8
 8011cae:	46bd      	mov	sp, r7
 8011cb0:	bd80      	pop	{r7, pc}

08011cb2 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 8011cb2:	b590      	push	{r4, r7, lr}
 8011cb4:	b085      	sub	sp, #20
 8011cb6:	af00      	add	r7, sp, #0
 8011cb8:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 8011cba:	6878      	ldr	r0, [r7, #4]
 8011cbc:	f000 fb04 	bl	80122c8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 8011cc0:	4604      	mov	r4, r0
 8011cc2:	f107 030c 	add.w	r3, r7, #12
 8011cc6:	4618      	mov	r0, r3
 8011cc8:	f7f3 ff6b 	bl	8005ba2 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8011ccc:	f107 030c 	add.w	r3, r7, #12
 8011cd0:	4619      	mov	r1, r3
 8011cd2:	4620      	mov	r0, r4
 8011cd4:	f000 fb80 	bl	80123d8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 8011cd8:	eef0 7a40 	vmov.f32	s15, s0
 8011cdc:	bf00      	nop
}
 8011cde:	eeb0 0a67 	vmov.f32	s0, s15
 8011ce2:	3714      	adds	r7, #20
 8011ce4:	46bd      	mov	sp, r7
 8011ce6:	bd90      	pop	{r4, r7, pc}

08011ce8 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8011ce8:	b480      	push	{r7}
 8011cea:	b083      	sub	sp, #12
 8011cec:	af00      	add	r7, sp, #0
 8011cee:	6078      	str	r0, [r7, #4]
 8011cf0:	bf00      	nop
 8011cf2:	370c      	adds	r7, #12
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cfa:	4770      	bx	lr

08011cfc <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8011cfc:	b480      	push	{r7}
 8011cfe:	b083      	sub	sp, #12
 8011d00:	af00      	add	r7, sp, #0
 8011d02:	6078      	str	r0, [r7, #4]
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	4618      	mov	r0, r3
 8011d08:	370c      	adds	r7, #12
 8011d0a:	46bd      	mov	sp, r7
 8011d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d10:	4770      	bx	lr

08011d12 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8011d12:	b590      	push	{r4, r7, lr}
 8011d14:	b083      	sub	sp, #12
 8011d16:	af00      	add	r7, sp, #0
 8011d18:	6078      	str	r0, [r7, #4]
 8011d1a:	6039      	str	r1, [r7, #0]
 8011d1c:	687c      	ldr	r4, [r7, #4]
 8011d1e:	6838      	ldr	r0, [r7, #0]
 8011d20:	f000 fba0 	bl	8012464 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE7functorEv>
 8011d24:	4603      	mov	r3, r0
 8011d26:	4619      	mov	r1, r3
 8011d28:	4620      	mov	r0, r4
 8011d2a:	f7f3 ffb9 	bl	8005ca0 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	1d1c      	adds	r4, r3, #4
 8011d32:	6838      	ldr	r0, [r7, #0]
 8011d34:	f000 fba2 	bl	801247c <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE3lhsEv>
 8011d38:	4603      	mov	r3, r0
 8011d3a:	4619      	mov	r1, r3
 8011d3c:	4620      	mov	r0, r4
 8011d3e:	f000 fbb4 	bl	80124aa <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEEC1ERSA_>
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	f103 040c 	add.w	r4, r3, #12
 8011d48:	6838      	ldr	r0, [r7, #0]
 8011d4a:	f000 fba2 	bl	8012492 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE3rhsEv>
 8011d4e:	4603      	mov	r3, r0
 8011d50:	4619      	mov	r1, r3
 8011d52:	4620      	mov	r0, r4
 8011d54:	f000 fbb8 	bl	80124c8 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS4_>
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	370c      	adds	r7, #12
 8011d5e:	46bd      	mov	sp, r7
 8011d60:	bd90      	pop	{r4, r7, pc}

08011d62 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_INS3_IfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8011d62:	b5b0      	push	{r4, r5, r7, lr}
 8011d64:	b084      	sub	sp, #16
 8011d66:	af00      	add	r7, sp, #0
 8011d68:	6078      	str	r0, [r7, #4]
 8011d6a:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	689c      	ldr	r4, [r3, #8]
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	6839      	ldr	r1, [r7, #0]
 8011d76:	4618      	mov	r0, r3
 8011d78:	f000 f834 	bl	8011de4 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE8coeffRefEi>
 8011d7c:	4605      	mov	r5, r0
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	685b      	ldr	r3, [r3, #4]
 8011d82:	6839      	ldr	r1, [r7, #0]
 8011d84:	4618      	mov	r0, r3
 8011d86:	f000 fbae 	bl	80124e6 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE5coeffEi>
 8011d8a:	eef0 7a40 	vmov.f32	s15, s0
 8011d8e:	edc7 7a03 	vstr	s15, [r7, #12]
 8011d92:	f107 030c 	add.w	r3, r7, #12
 8011d96:	461a      	mov	r2, r3
 8011d98:	4629      	mov	r1, r5
 8011d9a:	4620      	mov	r0, r4
 8011d9c:	f7f6 fd08 	bl	80087b0 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8011da0:	bf00      	nop
 8011da2:	3710      	adds	r7, #16
 8011da4:	46bd      	mov	sp, r7
 8011da6:	bdb0      	pop	{r4, r5, r7, pc}

08011da8 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi1EE3runERSN_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8011da8:	b480      	push	{r7}
 8011daa:	b083      	sub	sp, #12
 8011dac:	af00      	add	r7, sp, #0
 8011dae:	6078      	str	r0, [r7, #4]
 8011db0:	bf00      	nop
 8011db2:	370c      	adds	r7, #12
 8011db4:	46bd      	mov	sp, r7
 8011db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dba:	4770      	bx	lr

08011dbc <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 8011dbc:	b580      	push	{r7, lr}
 8011dbe:	b082      	sub	sp, #8
 8011dc0:	af00      	add	r7, sp, #0
 8011dc2:	6078      	str	r0, [r7, #4]
 8011dc4:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	6839      	ldr	r1, [r7, #0]
 8011dca:	4618      	mov	r0, r3
 8011dcc:	f000 fbaf 	bl	801252e <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8011dd0:	683b      	ldr	r3, [r7, #0]
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	f000 fbd5 	bl	8012582 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4dataEv>
 8011dd8:	bf00      	nop
  }
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	4618      	mov	r0, r3
 8011dde:	3708      	adds	r7, #8
 8011de0:	46bd      	mov	sp, r7
 8011de2:	bd80      	pop	{r7, pc}

08011de4 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE8coeffRefEi>:
  Scalar& coeffRef(Index index)
 8011de4:	b480      	push	{r7}
 8011de6:	b083      	sub	sp, #12
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	6078      	str	r0, [r7, #4]
 8011dec:	6039      	str	r1, [r7, #0]
    return const_cast<Scalar*>(m_d.data)[index];
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	681a      	ldr	r2, [r3, #0]
 8011df2:	683b      	ldr	r3, [r7, #0]
 8011df4:	009b      	lsls	r3, r3, #2
 8011df6:	4413      	add	r3, r2
  }
 8011df8:	4618      	mov	r0, r3
 8011dfa:	370c      	adds	r7, #12
 8011dfc:	46bd      	mov	sp, r7
 8011dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e02:	4770      	bx	lr

08011e04 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEi>:
  CoeffReturnType coeff(Index index) const
 8011e04:	b480      	push	{r7}
 8011e06:	b083      	sub	sp, #12
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	6078      	str	r0, [r7, #4]
 8011e0c:	6039      	str	r1, [r7, #0]
    return m_d.data[index];
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	681a      	ldr	r2, [r3, #0]
 8011e12:	683b      	ldr	r3, [r7, #0]
 8011e14:	009b      	lsls	r3, r3, #2
 8011e16:	4413      	add	r3, r2
  }
 8011e18:	4618      	mov	r0, r3
 8011e1a:	370c      	adds	r7, #12
 8011e1c:	46bd      	mov	sp, r7
 8011e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e22:	4770      	bx	lr

08011e24 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKSD_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8011e24:	b580      	push	{r7, lr}
 8011e26:	b082      	sub	sp, #8
 8011e28:	af00      	add	r7, sp, #0
 8011e2a:	6078      	str	r0, [r7, #4]
 8011e2c:	6039      	str	r1, [r7, #0]
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	6839      	ldr	r1, [r7, #0]
 8011e32:	4618      	mov	r0, r3
 8011e34:	f000 fbb1 	bl	801259a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffEC1ERKSD_>
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	3708      	adds	r7, #8
 8011e3e:	46bd      	mov	sp, r7
 8011e40:	bd80      	pop	{r7, pc}

08011e42 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi3EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8011e42:	b580      	push	{r7, lr}
 8011e44:	b084      	sub	sp, #16
 8011e46:	af00      	add	r7, sp, #0
 8011e48:	6078      	str	r0, [r7, #4]
 8011e4a:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8011e4c:	6839      	ldr	r1, [r7, #0]
 8011e4e:	6878      	ldr	r0, [r7, #4]
 8011e50:	f000 fbb5 	bl	80125be <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi1EE3runERKSH_RKS3_>
 8011e54:	eef0 7a40 	vmov.f32	s15, s0
 8011e58:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8011e5c:	6839      	ldr	r1, [r7, #0]
 8011e5e:	6878      	ldr	r0, [r7, #4]
 8011e60:	f000 fbbe 	bl	80125e0 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi1ELi2EE3runERKSH_RKS3_>
 8011e64:	eef0 7a40 	vmov.f32	s15, s0
 8011e68:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8011e6c:	f107 020c 	add.w	r2, r7, #12
 8011e70:	f107 0308 	add.w	r3, r7, #8
 8011e74:	4619      	mov	r1, r3
 8011e76:	6838      	ldr	r0, [r7, #0]
 8011e78:	f7f7 fa8b 	bl	8009392 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8011e7c:	eef0 7a40 	vmov.f32	s15, s0
  }
 8011e80:	eeb0 0a67 	vmov.f32	s0, s15
 8011e84:	3710      	adds	r7, #16
 8011e86:	46bd      	mov	sp, r7
 8011e88:	bd80      	pop	{r7, pc}

08011e8a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8011e8a:	b480      	push	{r7}
 8011e8c:	b083      	sub	sp, #12
 8011e8e:	af00      	add	r7, sp, #0
 8011e90:	6078      	str	r0, [r7, #4]
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	4618      	mov	r0, r3
 8011e98:	370c      	adds	r7, #12
 8011e9a:	46bd      	mov	sp, r7
 8011e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea0:	4770      	bx	lr

08011ea2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8011ea2:	b480      	push	{r7}
 8011ea4:	b083      	sub	sp, #12
 8011ea6:	af00      	add	r7, sp, #0
 8011ea8:	6078      	str	r0, [r7, #4]
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	685b      	ldr	r3, [r3, #4]
 8011eae:	4618      	mov	r0, r3
 8011eb0:	370c      	adds	r7, #12
 8011eb2:	46bd      	mov	sp, r7
 8011eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb8:	4770      	bx	lr

08011eba <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8011eba:	b480      	push	{r7}
 8011ebc:	b083      	sub	sp, #12
 8011ebe:	af00      	add	r7, sp, #0
 8011ec0:	6078      	str	r0, [r7, #4]
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	4618      	mov	r0, r3
 8011ec6:	370c      	adds	r7, #12
 8011ec8:	46bd      	mov	sp, r7
 8011eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ece:	4770      	bx	lr

08011ed0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 8011ed0:	b580      	push	{r7, lr}
 8011ed2:	b086      	sub	sp, #24
 8011ed4:	af00      	add	r7, sp, #0
 8011ed6:	60f8      	str	r0, [r7, #12]
 8011ed8:	60b9      	str	r1, [r7, #8]
 8011eda:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 8011edc:	6879      	ldr	r1, [r7, #4]
 8011ede:	68b8      	ldr	r0, [r7, #8]
 8011ee0:	f000 fba2 	bl	8012628 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 8011ee4:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 8011ee6:	6879      	ldr	r1, [r7, #4]
 8011ee8:	68b8      	ldr	r0, [r7, #8]
 8011eea:	f000 fba9 	bl	8012640 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE20colIndexByOuterInnerEii>
 8011eee:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 8011ef0:	693a      	ldr	r2, [r7, #16]
 8011ef2:	6979      	ldr	r1, [r7, #20]
 8011ef4:	68f8      	ldr	r0, [r7, #12]
 8011ef6:	f000 fbaf 	bl	8012658 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE11assignCoeffEii>
  }
 8011efa:	bf00      	nop
 8011efc:	3718      	adds	r7, #24
 8011efe:	46bd      	mov	sp, r7
 8011f00:	bd80      	pop	{r7, pc}

08011f02 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi1ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8011f02:	b580      	push	{r7, lr}
 8011f04:	b082      	sub	sp, #8
 8011f06:	af00      	add	r7, sp, #0
 8011f08:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8011f0a:	2201      	movs	r2, #1
 8011f0c:	2100      	movs	r1, #0
 8011f0e:	6878      	ldr	r0, [r7, #4]
 8011f10:	f7ff ffde 	bl	8011ed0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8011f14:	6878      	ldr	r0, [r7, #4]
 8011f16:	f000 fbc5 	bl	80126a4 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi2ELi9EE3runERSE_>
  }
 8011f1a:	bf00      	nop
 8011f1c:	3708      	adds	r7, #8
 8011f1e:	46bd      	mov	sp, r7
 8011f20:	bd80      	pop	{r7, pc}

08011f22 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8011f22:	b580      	push	{r7, lr}
 8011f24:	b082      	sub	sp, #8
 8011f26:	af00      	add	r7, sp, #0
 8011f28:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	689b      	ldr	r3, [r3, #8]
 8011f2e:	4618      	mov	r0, r3
 8011f30:	f7fb fe62 	bl	800dbf8 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 8011f34:	4603      	mov	r3, r0
    }
 8011f36:	4618      	mov	r0, r3
 8011f38:	3708      	adds	r7, #8
 8011f3a:	46bd      	mov	sp, r7
 8011f3c:	bd80      	pop	{r7, pc}

08011f3e <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8011f3e:	b580      	push	{r7, lr}
 8011f40:	b082      	sub	sp, #8
 8011f42:	af00      	add	r7, sp, #0
 8011f44:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	689b      	ldr	r3, [r3, #8]
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	f7f6 fc04 	bl	8008758 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 8011f50:	4603      	mov	r3, r0
    }
 8011f52:	4618      	mov	r0, r3
 8011f54:	3708      	adds	r7, #8
 8011f56:	46bd      	mov	sp, r7
 8011f58:	bd80      	pop	{r7, pc}

08011f5a <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>:
 8011f5a:	b480      	push	{r7}
 8011f5c:	b083      	sub	sp, #12
 8011f5e:	af00      	add	r7, sp, #0
 8011f60:	6078      	str	r0, [r7, #4]
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	4618      	mov	r0, r3
 8011f66:	370c      	adds	r7, #12
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f6e:	4770      	bx	lr

08011f70 <_ZN5Eigen8internal15block_evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERKNS_5BlockISE_Li1ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 8011f70:	b580      	push	{r7, lr}
 8011f72:	b082      	sub	sp, #8
 8011f74:	af00      	add	r7, sp, #0
 8011f76:	6078      	str	r0, [r7, #4]
 8011f78:	6039      	str	r1, [r7, #0]
    : unary_evaluator<XprType>(block)
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	6839      	ldr	r1, [r7, #0]
 8011f7e:	4618      	mov	r0, r3
 8011f80:	f000 fbb9 	bl	80126f6 <_ZN5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfEC1ERKSG_>
  {}
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	4618      	mov	r0, r3
 8011f88:	3708      	adds	r7, #8
 8011f8a:	46bd      	mov	sp, r7
 8011f8c:	bd80      	pop	{r7, pc}

08011f8e <_ZNK5Eigen8internal18scalar_constant_opIfEclEv>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar operator() () const { return m_other; }
 8011f8e:	b480      	push	{r7}
 8011f90:	b083      	sub	sp, #12
 8011f92:	af00      	add	r7, sp, #0
 8011f94:	6078      	str	r0, [r7, #4]
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	ee07 3a90 	vmov	s15, r3
 8011f9e:	eeb0 0a67 	vmov.f32	s0, s15
 8011fa2:	370c      	adds	r7, #12
 8011fa4:	46bd      	mov	sp, r7
 8011fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011faa:	4770      	bx	lr

08011fac <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 8011fac:	b590      	push	{r4, r7, lr}
 8011fae:	b083      	sub	sp, #12
 8011fb0:	af00      	add	r7, sp, #0
 8011fb2:	6078      	str	r0, [r7, #4]
 8011fb4:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8011fb6:	6878      	ldr	r0, [r7, #4]
 8011fb8:	f000 fc05 	bl	80127c6 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8011fbc:	683b      	ldr	r3, [r7, #0]
 8011fbe:	4618      	mov	r0, r3
 8011fc0:	f000 f81e 	bl	8012000 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4dataEv>
 8011fc4:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	601a      	str	r2, [r3, #0]
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	1d1c      	adds	r4, r3, #4
 8011fce:	683b      	ldr	r3, [r7, #0]
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	f000 fbdc 	bl	801278e <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11innerStrideEv>
 8011fd6:	4603      	mov	r3, r0
 8011fd8:	4619      	mov	r1, r3
 8011fda:	4620      	mov	r0, r4
 8011fdc:	f7f4 fdd4 	bl	8006b88 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	1d5c      	adds	r4, r3, #5
 8011fe4:	683b      	ldr	r3, [r7, #0]
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	f000 fbdf 	bl	80127aa <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11outerStrideEv>
 8011fec:	4603      	mov	r3, r0
 8011fee:	4619      	mov	r1, r3
 8011ff0:	4620      	mov	r0, r4
 8011ff2:	f7f4 fde3 	bl	8006bbc <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
  }
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	370c      	adds	r7, #12
 8011ffc:	46bd      	mov	sp, r7
 8011ffe:	bd90      	pop	{r4, r7, pc}

08012000 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4dataEv>:
 8012000:	b480      	push	{r7}
 8012002:	b083      	sub	sp, #12
 8012004:	af00      	add	r7, sp, #0
 8012006:	6078      	str	r0, [r7, #4]
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	4618      	mov	r0, r3
 801200e:	370c      	adds	r7, #12
 8012010:	46bd      	mov	sp, r7
 8012012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012016:	4770      	bx	lr

08012018 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffEC1ERKS5_>:
  explicit product_evaluator(const XprType& xpr)
 8012018:	b580      	push	{r7, lr}
 801201a:	b082      	sub	sp, #8
 801201c:	af00      	add	r7, sp, #0
 801201e:	6078      	str	r0, [r7, #4]
 8012020:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 8012022:	6878      	ldr	r0, [r7, #4]
 8012024:	f000 fbf2 	bl	801280c <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 8012028:	6838      	ldr	r0, [r7, #0]
 801202a:	f000 fbd7 	bl	80127dc <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3lhsEv>
 801202e:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 8012034:	6838      	ldr	r0, [r7, #0]
 8012036:	f000 fbdd 	bl	80127f4 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3rhsEv>
 801203a:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	605a      	str	r2, [r3, #4]
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 801204a:	4619      	mov	r1, r3
 801204c:	4610      	mov	r0, r2
 801204e:	f7f5 fca7 	bl	80079a0 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	685b      	ldr	r3, [r3, #4]
      m_innerDim(xpr.lhs().cols())
 801205c:	4619      	mov	r1, r3
 801205e:	4610      	mov	r0, r2
 8012060:	f7f5 fc9e 	bl	80079a0 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 8012064:	6838      	ldr	r0, [r7, #0]
 8012066:	f000 fbb9 	bl	80127dc <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3lhsEv>
 801206a:	4603      	mov	r3, r0
 801206c:	4618      	mov	r0, r3
 801206e:	f7f2 fff5 	bl	800505c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8012072:	4602      	mov	r2, r0
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	611a      	str	r2, [r3, #16]
  }
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	4618      	mov	r0, r3
 801207c:	3708      	adds	r7, #8
 801207e:	46bd      	mov	sp, r7
 8012080:	bd80      	pop	{r7, pc}

08012082 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8012082:	b580      	push	{r7, lr}
 8012084:	b082      	sub	sp, #8
 8012086:	af00      	add	r7, sp, #0
 8012088:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 801208a:	2200      	movs	r2, #0
 801208c:	2100      	movs	r1, #0
 801208e:	6878      	ldr	r0, [r7, #4]
 8012090:	f000 fbc7 	bl	8012822 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8012094:	6878      	ldr	r0, [r7, #4]
 8012096:	f000 fbdd 	bl	8012854 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSC_>
  }
 801209a:	bf00      	nop
 801209c:	3708      	adds	r7, #8
 801209e:	46bd      	mov	sp, r7
 80120a0:	bd80      	pop	{r7, pc}

080120a2 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1ERKS8_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 80120a2:	b580      	push	{r7, lr}
 80120a4:	b082      	sub	sp, #8
 80120a6:	af00      	add	r7, sp, #0
 80120a8:	6078      	str	r0, [r7, #4]
 80120aa:	6039      	str	r1, [r7, #0]
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	6839      	ldr	r1, [r7, #0]
 80120b0:	4618      	mov	r0, r3
 80120b2:	f000 fbdf 	bl	8012874 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EEC1ERKNS_5BlockIS6_Li3ELi1ELb0EEE>
  }
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	4618      	mov	r0, r3
 80120ba:	3708      	adds	r7, #8
 80120bc:	46bd      	mov	sp, r7
 80120be:	bd80      	pop	{r7, pc}

080120c0 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 80120c0:	b480      	push	{r7}
 80120c2:	b083      	sub	sp, #12
 80120c4:	af00      	add	r7, sp, #0
 80120c6:	6078      	str	r0, [r7, #4]
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	4618      	mov	r0, r3
 80120cc:	370c      	adds	r7, #12
 80120ce:	46bd      	mov	sp, r7
 80120d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120d4:	4770      	bx	lr

080120d6 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 80120d6:	b5b0      	push	{r4, r5, r7, lr}
 80120d8:	b084      	sub	sp, #16
 80120da:	af00      	add	r7, sp, #0
 80120dc:	60f8      	str	r0, [r7, #12]
 80120de:	60b9      	str	r1, [r7, #8]
 80120e0:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	681c      	ldr	r4, [r3, #0]
 80120e6:	68f8      	ldr	r0, [r7, #12]
 80120e8:	f000 fbd8 	bl	801289c <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>
 80120ec:	4602      	mov	r2, r0
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	fb03 f502 	mul.w	r5, r3, r2
 80120f4:	68f8      	ldr	r0, [r7, #12]
 80120f6:	f000 fbdc 	bl	80128b2 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>
 80120fa:	4602      	mov	r2, r0
 80120fc:	68bb      	ldr	r3, [r7, #8]
 80120fe:	fb02 f303 	mul.w	r3, r2, r3
 8012102:	442b      	add	r3, r5
 8012104:	009b      	lsls	r3, r3, #2
 8012106:	4423      	add	r3, r4
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	ee07 3a90 	vmov	s15, r3
  }
 801210e:	eeb0 0a67 	vmov.f32	s0, s15
 8012112:	3710      	adds	r7, #16
 8012114:	46bd      	mov	sp, r7
 8012116:	bdb0      	pop	{r4, r5, r7, pc}

08012118 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 8012118:	b590      	push	{r4, r7, lr}
 801211a:	b083      	sub	sp, #12
 801211c:	af00      	add	r7, sp, #0
 801211e:	6078      	str	r0, [r7, #4]
 8012120:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 8012122:	6878      	ldr	r0, [r7, #4]
 8012124:	f000 fbdd 	bl	80128e2 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 8012128:	687c      	ldr	r4, [r7, #4]
 801212a:	6838      	ldr	r0, [r7, #0]
 801212c:	f000 fbcc 	bl	80128c8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>
 8012130:	4603      	mov	r3, r0
 8012132:	2200      	movs	r2, #0
 8012134:	4619      	mov	r1, r3
 8012136:	4620      	mov	r0, r4
 8012138:	f7f5 f88b 	bl	8007252 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	4618      	mov	r0, r3
 8012140:	370c      	adds	r7, #12
 8012142:	46bd      	mov	sp, r7
 8012144:	bd90      	pop	{r4, r7, pc}
	...

08012148 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 8012148:	b580      	push	{r7, lr}
 801214a:	b084      	sub	sp, #16
 801214c:	af00      	add	r7, sp, #0
 801214e:	60f8      	str	r0, [r7, #12]
 8012150:	60b9      	str	r1, [r7, #8]
 8012152:	607a      	str	r2, [r7, #4]
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	687a      	ldr	r2, [r7, #4]
 8012158:	68b9      	ldr	r1, [r7, #8]
 801215a:	4618      	mov	r0, r3
 801215c:	f000 fbcc 	bl	80128f8 <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ENS_5DenseEEC1ERS5_i>
      eigen_assert( (i>=0) && (
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	2b00      	cmp	r3, #0
 8012164:	db06      	blt.n	8012174 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x2c>
 8012166:	68b8      	ldr	r0, [r7, #8]
 8012168:	f7f4 fe6b 	bl	8006e42 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 801216c:	4602      	mov	r2, r0
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	4293      	cmp	r3, r2
 8012172:	db05      	blt.n	8012180 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x38>
 8012174:	4b05      	ldr	r3, [pc, #20]	; (801218c <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x44>)
 8012176:	4a06      	ldr	r2, [pc, #24]	; (8012190 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x48>)
 8012178:	2178      	movs	r1, #120	; 0x78
 801217a:	4806      	ldr	r0, [pc, #24]	; (8012194 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x4c>)
 801217c:	f00b fe92 	bl	801dea4 <__assert_func>
    }
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	4618      	mov	r0, r3
 8012184:	3710      	adds	r7, #16
 8012186:	46bd      	mov	sp, r7
 8012188:	bd80      	pop	{r7, pc}
 801218a:	bf00      	nop
 801218c:	08024890 	.word	0x08024890
 8012190:	080285f4 	.word	0x080285f4
 8012194:	08024a14 	.word	0x08024a14

08012198 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8012198:	b480      	push	{r7}
 801219a:	b083      	sub	sp, #12
 801219c:	af00      	add	r7, sp, #0
 801219e:	6078      	str	r0, [r7, #4]
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	4618      	mov	r0, r3
 80121a4:	370c      	adds	r7, #12
 80121a6:	46bd      	mov	sp, r7
 80121a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ac:	4770      	bx	lr

080121ae <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>:
 80121ae:	b580      	push	{r7, lr}
 80121b0:	b082      	sub	sp, #8
 80121b2:	af00      	add	r7, sp, #0
 80121b4:	6078      	str	r0, [r7, #4]
 80121b6:	6878      	ldr	r0, [r7, #4]
 80121b8:	f000 fbaf 	bl	801291a <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	4618      	mov	r0, r3
 80121c0:	3708      	adds	r7, #8
 80121c2:	46bd      	mov	sp, r7
 80121c4:	bd80      	pop	{r7, pc}

080121c6 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 80121c6:	b580      	push	{r7, lr}
 80121c8:	b082      	sub	sp, #8
 80121ca:	af00      	add	r7, sp, #0
 80121cc:	6078      	str	r0, [r7, #4]
 80121ce:	6878      	ldr	r0, [r7, #4]
 80121d0:	f7ff ffed 	bl	80121ae <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	4618      	mov	r0, r3
 80121d8:	3708      	adds	r7, #8
 80121da:	46bd      	mov	sp, r7
 80121dc:	bd80      	pop	{r7, pc}

080121de <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 80121de:	b580      	push	{r7, lr}
 80121e0:	b082      	sub	sp, #8
 80121e2:	af00      	add	r7, sp, #0
 80121e4:	6078      	str	r0, [r7, #4]
 80121e6:	f7f4 fd0e 	bl	8006c06 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 80121ea:	4603      	mov	r3, r0
 80121ec:	4618      	mov	r0, r3
 80121ee:	3708      	adds	r7, #8
 80121f0:	46bd      	mov	sp, r7
 80121f2:	bd80      	pop	{r7, pc}

080121f4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 80121f4:	b580      	push	{r7, lr}
 80121f6:	b082      	sub	sp, #8
 80121f8:	af00      	add	r7, sp, #0
 80121fa:	6078      	str	r0, [r7, #4]
 80121fc:	f7f4 fd0b 	bl	8006c16 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8012200:	4603      	mov	r3, r0
 8012202:	4618      	mov	r0, r3
 8012204:	3708      	adds	r7, #8
 8012206:	46bd      	mov	sp, r7
 8012208:	bd80      	pop	{r7, pc}
	...

0801220c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 801220c:	b5b0      	push	{r4, r5, r7, lr}
 801220e:	b084      	sub	sp, #16
 8012210:	af00      	add	r7, sp, #0
 8012212:	60f8      	str	r0, [r7, #12]
 8012214:	60b9      	str	r1, [r7, #8]
 8012216:	607a      	str	r2, [r7, #4]
 8012218:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 801221a:	68f8      	ldr	r0, [r7, #12]
 801221c:	f7ff ffd3 	bl	80121c6 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS_5DenseEEC1Ev>
 8012220:	68fa      	ldr	r2, [r7, #12]
 8012222:	68bb      	ldr	r3, [r7, #8]
 8012224:	4614      	mov	r4, r2
 8012226:	461d      	mov	r5, r3
 8012228:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801222a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801222c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012230:	e884 0003 	stmia.w	r4, {r0, r1}
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	f103 0218 	add.w	r2, r3, #24
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	4614      	mov	r4, r2
 801223e:	461d      	mov	r5, r3
 8012240:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012242:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012244:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012248:	e884 0003 	stmia.w	r4, {r0, r1}
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	3330      	adds	r3, #48	; 0x30
 8012250:	6839      	ldr	r1, [r7, #0]
 8012252:	4618      	mov	r0, r3
 8012254:	f7f3 fa38 	bl	80056c8 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8012258:	68b8      	ldr	r0, [r7, #8]
 801225a:	f7f9 fba1 	bl	800b9a0 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 801225e:	4604      	mov	r4, r0
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	4618      	mov	r0, r3
 8012264:	f7ff ffbb 	bl	80121de <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4rowsEv>
 8012268:	4603      	mov	r3, r0
 801226a:	429c      	cmp	r4, r3
 801226c:	d10a      	bne.n	8012284 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x78>
 801226e:	68b8      	ldr	r0, [r7, #8]
 8012270:	f7f9 fba3 	bl	800b9ba <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 8012274:	4604      	mov	r4, r0
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	4618      	mov	r0, r3
 801227a:	f7ff ffbb 	bl	80121f4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4colsEv>
 801227e:	4603      	mov	r3, r0
 8012280:	429c      	cmp	r4, r3
 8012282:	d005      	beq.n	8012290 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x84>
 8012284:	4b05      	ldr	r3, [pc, #20]	; (801229c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x90>)
 8012286:	4a06      	ldr	r2, [pc, #24]	; (80122a0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x94>)
 8012288:	2174      	movs	r1, #116	; 0x74
 801228a:	4806      	ldr	r0, [pc, #24]	; (80122a4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x98>)
 801228c:	f00b fe0a 	bl	801dea4 <__assert_func>
    }
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	4618      	mov	r0, r3
 8012294:	3710      	adds	r7, #16
 8012296:	46bd      	mov	sp, r7
 8012298:	bdb0      	pop	{r4, r5, r7, pc}
 801229a:	bf00      	nop
 801229c:	0801fd0c 	.word	0x0801fd0c
 80122a0:	080286e4 	.word	0x080286e4
 80122a4:	0801ff70 	.word	0x0801ff70

080122a8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 80122a8:	b580      	push	{r7, lr}
 80122aa:	b082      	sub	sp, #8
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	6078      	str	r0, [r7, #4]
 80122b0:	6878      	ldr	r0, [r7, #4]
 80122b2:	f000 f809 	bl	80122c8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 80122b6:	4603      	mov	r3, r0
 80122b8:	4618      	mov	r0, r3
 80122ba:	f000 fb39 	bl	8012930 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE4colsEv>
 80122be:	4603      	mov	r3, r0
 80122c0:	4618      	mov	r0, r3
 80122c2:	3708      	adds	r7, #8
 80122c4:	46bd      	mov	sp, r7
 80122c6:	bd80      	pop	{r7, pc}

080122c8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 80122c8:	b480      	push	{r7}
 80122ca:	b083      	sub	sp, #12
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	6078      	str	r0, [r7, #4]
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	4618      	mov	r0, r3
 80122d4:	370c      	adds	r7, #12
 80122d6:	46bd      	mov	sp, r7
 80122d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122dc:	4770      	bx	lr

080122de <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 80122de:	b580      	push	{r7, lr}
 80122e0:	b082      	sub	sp, #8
 80122e2:	af00      	add	r7, sp, #0
 80122e4:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	4618      	mov	r0, r3
 80122ea:	f7f9 fb59 	bl	800b9a0 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 80122ee:	4603      	mov	r3, r0
    }
 80122f0:	4618      	mov	r0, r3
 80122f2:	3708      	adds	r7, #8
 80122f4:	46bd      	mov	sp, r7
 80122f6:	bd80      	pop	{r7, pc}

080122f8 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 80122f8:	b580      	push	{r7, lr}
 80122fa:	b082      	sub	sp, #8
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	6078      	str	r0, [r7, #4]
 8012300:	6878      	ldr	r0, [r7, #4]
 8012302:	f000 fb3c 	bl	801297e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	4618      	mov	r0, r3
 801230a:	3708      	adds	r7, #8
 801230c:	46bd      	mov	sp, r7
 801230e:	bd80      	pop	{r7, pc}

08012310 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 8012310:	b580      	push	{r7, lr}
 8012312:	b082      	sub	sp, #8
 8012314:	af00      	add	r7, sp, #0
 8012316:	6078      	str	r0, [r7, #4]
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	4618      	mov	r0, r3
 801231c:	f7ff ffec 	bl	80122f8 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	4618      	mov	r0, r3
 8012324:	3708      	adds	r7, #8
 8012326:	46bd      	mov	sp, r7
 8012328:	bd80      	pop	{r7, pc}

0801232a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 801232a:	b580      	push	{r7, lr}
 801232c:	b082      	sub	sp, #8
 801232e:	af00      	add	r7, sp, #0
 8012330:	6078      	str	r0, [r7, #4]
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	4618      	mov	r0, r3
 8012336:	f7ff ffeb 	bl	8012310 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EED1Ev>
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	4618      	mov	r0, r3
 801233e:	3708      	adds	r7, #8
 8012340:	46bd      	mov	sp, r7
 8012342:	bd80      	pop	{r7, pc}

08012344 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<const T>
 8012344:	b580      	push	{r7, lr}
 8012346:	b082      	sub	sp, #8
 8012348:	af00      	add	r7, sp, #0
 801234a:	6078      	str	r0, [r7, #4]
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	4618      	mov	r0, r3
 8012350:	f7ff ffeb 	bl	801232a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	4618      	mov	r0, r3
 8012358:	3708      	adds	r7, #8
 801235a:	46bd      	mov	sp, r7
 801235c:	bd80      	pop	{r7, pc}

0801235e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4DataD1Ev>:
  struct Data
 801235e:	b580      	push	{r7, lr}
 8012360:	b082      	sub	sp, #8
 8012362:	af00      	add	r7, sp, #0
 8012364:	6078      	str	r0, [r7, #4]
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	330c      	adds	r3, #12
 801236a:	4618      	mov	r0, r3
 801236c:	f7ff ffea 	bl	8012344 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	3304      	adds	r3, #4
 8012374:	4618      	mov	r0, r3
 8012376:	f7f9 fc09 	bl	800bb8c <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	4618      	mov	r0, r3
 801237e:	3708      	adds	r7, #8
 8012380:	46bd      	mov	sp, r7
 8012382:	bd80      	pop	{r7, pc}

08012384 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8012384:	b580      	push	{r7, lr}
 8012386:	b082      	sub	sp, #8
 8012388:	af00      	add	r7, sp, #0
 801238a:	6078      	str	r0, [r7, #4]
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	4618      	mov	r0, r3
 8012390:	f7ff ffe5 	bl	801235e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4DataD1Ev>
 8012394:	6878      	ldr	r0, [r7, #4]
 8012396:	f000 fae7 	bl	8012968 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	4618      	mov	r0, r3
 801239e:	3708      	adds	r7, #8
 80123a0:	46bd      	mov	sp, r7
 80123a2:	bd80      	pop	{r7, pc}

080123a4 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b082      	sub	sp, #8
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	6078      	str	r0, [r7, #4]
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	4618      	mov	r0, r3
 80123b0:	f7ff ffe8 	bl	8012384 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffED1Ev>
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	4618      	mov	r0, r3
 80123b8:	3708      	adds	r7, #8
 80123ba:	46bd      	mov	sp, r7
 80123bc:	bd80      	pop	{r7, pc}

080123be <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 80123be:	b580      	push	{r7, lr}
 80123c0:	b082      	sub	sp, #8
 80123c2:	af00      	add	r7, sp, #0
 80123c4:	6078      	str	r0, [r7, #4]
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	4618      	mov	r0, r3
 80123ca:	f7ff ffeb 	bl	80123a4 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	4618      	mov	r0, r3
 80123d2:	3708      	adds	r7, #8
 80123d4:	46bd      	mov	sp, r7
 80123d6:	bd80      	pop	{r7, pc}

080123d8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 80123d8:	b580      	push	{r7, lr}
 80123da:	ed2d 8b02 	vpush	{d8}
 80123de:	b088      	sub	sp, #32
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	6078      	str	r0, [r7, #4]
 80123e4:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 80123e6:	6878      	ldr	r0, [r7, #4]
 80123e8:	f7ff fc53 	bl	8011c92 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE4rowsEv>
 80123ec:	4603      	mov	r3, r0
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	dd05      	ble.n	80123fe <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 80123f2:	6878      	ldr	r0, [r7, #4]
 80123f4:	f7ff ff58 	bl	80122a8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE4colsEv>
 80123f8:	4603      	mov	r3, r0
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	dc06      	bgt.n	801240c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 80123fe:	4b16      	ldr	r3, [pc, #88]	; (8012458 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 8012400:	4a16      	ldr	r2, [pc, #88]	; (801245c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 8012402:	f240 119b 	movw	r1, #411	; 0x19b
 8012406:	4816      	ldr	r0, [pc, #88]	; (8012460 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 8012408:	f00b fd4c 	bl	801dea4 <__assert_func>
 801240c:	bf00      	nop
  ThisEvaluator thisEval(derived());
 801240e:	6878      	ldr	r0, [r7, #4]
 8012410:	f7ff ff5a 	bl	80122c8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 8012414:	4602      	mov	r2, r0
 8012416:	f107 030c 	add.w	r3, r7, #12
 801241a:	4611      	mov	r1, r2
 801241c:	4618      	mov	r0, r3
 801241e:	f000 fa94 	bl	801294a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1ERKSJ_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8012422:	6878      	ldr	r0, [r7, #4]
 8012424:	f7ff ff50 	bl	80122c8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 8012428:	4602      	mov	r2, r0
 801242a:	f107 030c 	add.w	r3, r7, #12
 801242e:	6839      	ldr	r1, [r7, #0]
 8012430:	4618      	mov	r0, r3
 8012432:	f000 faaf 	bl	8012994 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISM_EEfRKSN_RKS3_RKT_>
 8012436:	eeb0 8a40 	vmov.f32	s16, s0
 801243a:	bf00      	nop
  ThisEvaluator thisEval(derived());
 801243c:	f107 030c 	add.w	r3, r7, #12
 8012440:	4618      	mov	r0, r3
 8012442:	f7ff ffbc 	bl	80123be <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8012446:	eef0 7a48 	vmov.f32	s15, s16
}
 801244a:	eeb0 0a67 	vmov.f32	s0, s15
 801244e:	3720      	adds	r7, #32
 8012450:	46bd      	mov	sp, r7
 8012452:	ecbd 8b02 	vpop	{d8}
 8012456:	bd80      	pop	{r7, pc}
 8012458:	08024d8c 	.word	0x08024d8c
 801245c:	08028954 	.word	0x08028954
 8012460:	08024f98 	.word	0x08024f98

08012464 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8012464:	b480      	push	{r7}
 8012466:	b083      	sub	sp, #12
 8012468:	af00      	add	r7, sp, #0
 801246a:	6078      	str	r0, [r7, #4]
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	3310      	adds	r3, #16
 8012470:	4618      	mov	r0, r3
 8012472:	370c      	adds	r7, #12
 8012474:	46bd      	mov	sp, r7
 8012476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801247a:	4770      	bx	lr

0801247c <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 801247c:	b480      	push	{r7}
 801247e:	b083      	sub	sp, #12
 8012480:	af00      	add	r7, sp, #0
 8012482:	6078      	str	r0, [r7, #4]
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	4618      	mov	r0, r3
 8012488:	370c      	adds	r7, #12
 801248a:	46bd      	mov	sp, r7
 801248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012490:	4770      	bx	lr

08012492 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8012492:	b480      	push	{r7}
 8012494:	b083      	sub	sp, #12
 8012496:	af00      	add	r7, sp, #0
 8012498:	6078      	str	r0, [r7, #4]
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	68db      	ldr	r3, [r3, #12]
 801249e:	4618      	mov	r0, r3
 80124a0:	370c      	adds	r7, #12
 80124a2:	46bd      	mov	sp, r7
 80124a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a8:	4770      	bx	lr

080124aa <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 80124aa:	b580      	push	{r7, lr}
 80124ac:	b082      	sub	sp, #8
 80124ae:	af00      	add	r7, sp, #0
 80124b0:	6078      	str	r0, [r7, #4]
 80124b2:	6039      	str	r1, [r7, #0]
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	6839      	ldr	r1, [r7, #0]
 80124b8:	4618      	mov	r0, r3
 80124ba:	f000 fa7c 	bl	80129b6 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEEC1ERKS9_>
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	4618      	mov	r0, r3
 80124c2:	3708      	adds	r7, #8
 80124c4:	46bd      	mov	sp, r7
 80124c6:	bd80      	pop	{r7, pc}

080124c8 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS4_>:
 80124c8:	b580      	push	{r7, lr}
 80124ca:	b082      	sub	sp, #8
 80124cc:	af00      	add	r7, sp, #0
 80124ce:	6078      	str	r0, [r7, #4]
 80124d0:	6039      	str	r1, [r7, #0]
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	6839      	ldr	r1, [r7, #0]
 80124d6:	4618      	mov	r0, r3
 80124d8:	f7f8 f8bb 	bl	800a652 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	4618      	mov	r0, r3
 80124e0:	3708      	adds	r7, #8
 80124e2:	46bd      	mov	sp, r7
 80124e4:	bd80      	pop	{r7, pc}

080124e6 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE5coeffEi>:
  CoeffReturnType coeff(Index index) const
 80124e6:	b5b0      	push	{r4, r5, r7, lr}
 80124e8:	b082      	sub	sp, #8
 80124ea:	af00      	add	r7, sp, #0
 80124ec:	6078      	str	r0, [r7, #4]
 80124ee:	6039      	str	r1, [r7, #0]
    return m_d.func()(m_d.lhsImpl.coeff(index), m_d.rhsImpl.coeff(index));
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	4618      	mov	r0, r3
 80124f4:	f000 fa6e 	bl	80129d4 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4Data4funcEv>
 80124f8:	4604      	mov	r4, r0
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	3304      	adds	r3, #4
 80124fe:	6839      	ldr	r1, [r7, #0]
 8012500:	4618      	mov	r0, r3
 8012502:	f7ff fc7f 	bl	8011e04 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEi>
 8012506:	4605      	mov	r5, r0
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	330c      	adds	r3, #12
 801250c:	6839      	ldr	r1, [r7, #0]
 801250e:	4618      	mov	r0, r3
 8012510:	f7ff fc78 	bl	8011e04 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEi>
 8012514:	4603      	mov	r3, r0
 8012516:	461a      	mov	r2, r3
 8012518:	4629      	mov	r1, r5
 801251a:	4620      	mov	r0, r4
 801251c:	f7f6 ff39 	bl	8009392 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8012520:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012524:	eeb0 0a67 	vmov.f32	s0, s15
 8012528:	3708      	adds	r7, #8
 801252a:	46bd      	mov	sp, r7
 801252c:	bdb0      	pop	{r4, r5, r7, pc}

0801252e <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 801252e:	b590      	push	{r4, r7, lr}
 8012530:	b083      	sub	sp, #12
 8012532:	af00      	add	r7, sp, #0
 8012534:	6078      	str	r0, [r7, #4]
 8012536:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8012538:	6878      	ldr	r0, [r7, #4]
 801253a:	f000 fa72 	bl	8012a22 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 801253e:	683b      	ldr	r3, [r7, #0]
 8012540:	4618      	mov	r0, r3
 8012542:	f000 f81e 	bl	8012582 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4dataEv>
 8012546:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	601a      	str	r2, [r3, #0]
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	1d1c      	adds	r4, r3, #4
 8012550:	683b      	ldr	r3, [r7, #0]
 8012552:	4618      	mov	r0, r3
 8012554:	f000 fa49 	bl	80129ea <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE11innerStrideEv>
 8012558:	4603      	mov	r3, r0
 801255a:	4619      	mov	r1, r3
 801255c:	4620      	mov	r0, r4
 801255e:	f7f4 fb2d 	bl	8006bbc <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	1d5c      	adds	r4, r3, #5
 8012566:	683b      	ldr	r3, [r7, #0]
 8012568:	4618      	mov	r0, r3
 801256a:	f000 fa4c 	bl	8012a06 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE11outerStrideEv>
 801256e:	4603      	mov	r3, r0
 8012570:	4619      	mov	r1, r3
 8012572:	4620      	mov	r0, r4
 8012574:	f7f4 fb08 	bl	8006b88 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	4618      	mov	r0, r3
 801257c:	370c      	adds	r7, #12
 801257e:	46bd      	mov	sp, r7
 8012580:	bd90      	pop	{r4, r7, pc}

08012582 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 8012582:	b480      	push	{r7}
 8012584:	b083      	sub	sp, #12
 8012586:	af00      	add	r7, sp, #0
 8012588:	6078      	str	r0, [r7, #4]
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	4618      	mov	r0, r3
 8012590:	370c      	adds	r7, #12
 8012592:	46bd      	mov	sp, r7
 8012594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012598:	4770      	bx	lr

0801259a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffEC1ERKSD_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 801259a:	b580      	push	{r7, lr}
 801259c:	b082      	sub	sp, #8
 801259e:	af00      	add	r7, sp, #0
 80125a0:	6078      	str	r0, [r7, #4]
 80125a2:	6039      	str	r1, [r7, #0]
 80125a4:	6878      	ldr	r0, [r7, #4]
 80125a6:	f000 fa47 	bl	8012a38 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	6839      	ldr	r1, [r7, #0]
 80125ae:	4618      	mov	r0, r3
 80125b0:	f000 fa4d 	bl	8012a4e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4DataC1ERKSD_>
  }
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	4618      	mov	r0, r3
 80125b8:	3708      	adds	r7, #8
 80125ba:	46bd      	mov	sp, r7
 80125bc:	bd80      	pop	{r7, pc}

080125be <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi1EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 80125be:	b580      	push	{r7, lr}
 80125c0:	b082      	sub	sp, #8
 80125c2:	af00      	add	r7, sp, #0
 80125c4:	6078      	str	r0, [r7, #4]
 80125c6:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 80125c8:	2200      	movs	r2, #0
 80125ca:	2100      	movs	r1, #0
 80125cc:	6878      	ldr	r0, [r7, #4]
 80125ce:	f000 fa66 	bl	8012a9e <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE17coeffByOuterInnerEii>
 80125d2:	eef0 7a40 	vmov.f32	s15, s0
  }
 80125d6:	eeb0 0a67 	vmov.f32	s0, s15
 80125da:	3708      	adds	r7, #8
 80125dc:	46bd      	mov	sp, r7
 80125de:	bd80      	pop	{r7, pc}

080125e0 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi1ELi2EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 80125e0:	b580      	push	{r7, lr}
 80125e2:	b084      	sub	sp, #16
 80125e4:	af00      	add	r7, sp, #0
 80125e6:	6078      	str	r0, [r7, #4]
 80125e8:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80125ea:	6839      	ldr	r1, [r7, #0]
 80125ec:	6878      	ldr	r0, [r7, #4]
 80125ee:	f000 fa69 	bl	8012ac4 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi1ELi1EE3runERKSH_RKS3_>
 80125f2:	eef0 7a40 	vmov.f32	s15, s0
 80125f6:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 80125fa:	6839      	ldr	r1, [r7, #0]
 80125fc:	6878      	ldr	r0, [r7, #4]
 80125fe:	f000 fa72 	bl	8012ae6 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi2ELi1EE3runERKSH_RKS3_>
 8012602:	eef0 7a40 	vmov.f32	s15, s0
 8012606:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 801260a:	f107 020c 	add.w	r2, r7, #12
 801260e:	f107 0308 	add.w	r3, r7, #8
 8012612:	4619      	mov	r1, r3
 8012614:	6838      	ldr	r0, [r7, #0]
 8012616:	f7f6 febc 	bl	8009392 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 801261a:	eef0 7a40 	vmov.f32	s15, s0
  }
 801261e:	eeb0 0a67 	vmov.f32	s0, s15
 8012622:	3710      	adds	r7, #16
 8012624:	46bd      	mov	sp, r7
 8012626:	bd80      	pop	{r7, pc}

08012628 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 8012628:	b480      	push	{r7}
 801262a:	b083      	sub	sp, #12
 801262c:	af00      	add	r7, sp, #0
 801262e:	6078      	str	r0, [r7, #4]
 8012630:	6039      	str	r1, [r7, #0]
      : inner;
 8012632:	683b      	ldr	r3, [r7, #0]
  }
 8012634:	4618      	mov	r0, r3
 8012636:	370c      	adds	r7, #12
 8012638:	46bd      	mov	sp, r7
 801263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801263e:	4770      	bx	lr

08012640 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 8012640:	b480      	push	{r7}
 8012642:	b083      	sub	sp, #12
 8012644:	af00      	add	r7, sp, #0
 8012646:	6078      	str	r0, [r7, #4]
 8012648:	6039      	str	r1, [r7, #0]
      : outer;
 801264a:	687b      	ldr	r3, [r7, #4]
  }
 801264c:	4618      	mov	r0, r3
 801264e:	370c      	adds	r7, #12
 8012650:	46bd      	mov	sp, r7
 8012652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012656:	4770      	bx	lr

08012658 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 8012658:	b5b0      	push	{r4, r5, r7, lr}
 801265a:	b086      	sub	sp, #24
 801265c:	af00      	add	r7, sp, #0
 801265e:	60f8      	str	r0, [r7, #12]
 8012660:	60b9      	str	r1, [r7, #8]
 8012662:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	689c      	ldr	r4, [r3, #8]
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	687a      	ldr	r2, [r7, #4]
 801266e:	68b9      	ldr	r1, [r7, #8]
 8012670:	4618      	mov	r0, r3
 8012672:	f7f6 fb2d 	bl	8008cd0 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 8012676:	4605      	mov	r5, r0
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	685b      	ldr	r3, [r3, #4]
 801267c:	687a      	ldr	r2, [r7, #4]
 801267e:	68b9      	ldr	r1, [r7, #8]
 8012680:	4618      	mov	r0, r3
 8012682:	f000 fa41 	bl	8012b08 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffE5coeffEii>
 8012686:	eef0 7a40 	vmov.f32	s15, s0
 801268a:	edc7 7a05 	vstr	s15, [r7, #20]
 801268e:	f107 0314 	add.w	r3, r7, #20
 8012692:	461a      	mov	r2, r3
 8012694:	4629      	mov	r1, r5
 8012696:	4620      	mov	r0, r4
 8012698:	f000 fa69 	bl	8012b6e <_ZNK5Eigen8internal13sub_assign_opIffE11assignCoeffERfRKf>
  }
 801269c:	bf00      	nop
 801269e:	3718      	adds	r7, #24
 80126a0:	46bd      	mov	sp, r7
 80126a2:	bdb0      	pop	{r4, r5, r7, pc}

080126a4 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi2ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80126a4:	b580      	push	{r7, lr}
 80126a6:	b082      	sub	sp, #8
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80126ac:	2202      	movs	r2, #2
 80126ae:	2100      	movs	r1, #0
 80126b0:	6878      	ldr	r0, [r7, #4]
 80126b2:	f7ff fc0d 	bl	8011ed0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80126b6:	6878      	ldr	r0, [r7, #4]
 80126b8:	f000 fa70 	bl	8012b9c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi3ELi9EE3runERSE_>
  }
 80126bc:	bf00      	nop
 80126be:	3708      	adds	r7, #8
 80126c0:	46bd      	mov	sp, r7
 80126c2:	bd80      	pop	{r7, pc}

080126c4 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startRowEv>:
    StorageIndex startRow() const EIGEN_NOEXCEPT
 80126c4:	b580      	push	{r7, lr}
 80126c6:	b082      	sub	sp, #8
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	6078      	str	r0, [r7, #4]
      return m_startRow.value();
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	3310      	adds	r3, #16
 80126d0:	4618      	mov	r0, r3
 80126d2:	f7fd fff8 	bl	80106c6 <_ZNK5Eigen8internal19variable_if_dynamicIiLin1EE5valueEv>
 80126d6:	4603      	mov	r3, r0
    }
 80126d8:	4618      	mov	r0, r3
 80126da:	3708      	adds	r7, #8
 80126dc:	46bd      	mov	sp, r7
 80126de:	bd80      	pop	{r7, pc}

080126e0 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startColEv>:
    StorageIndex startCol() const EIGEN_NOEXCEPT
 80126e0:	b580      	push	{r7, lr}
 80126e2:	b082      	sub	sp, #8
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	6078      	str	r0, [r7, #4]
      return m_startCol.value();
 80126e8:	f7fd fbbd 	bl	800fe66 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EE5valueEv>
 80126ec:	4603      	mov	r3, r0
    }
 80126ee:	4618      	mov	r0, r3
 80126f0:	3708      	adds	r7, #8
 80126f2:	46bd      	mov	sp, r7
 80126f4:	bd80      	pop	{r7, pc}

080126f6 <_ZN5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfEC1ERKSG_>:
  explicit unary_evaluator(const XprType& block)
 80126f6:	b5b0      	push	{r4, r5, r7, lr}
 80126f8:	b082      	sub	sp, #8
 80126fa:	af00      	add	r7, sp, #0
 80126fc:	6078      	str	r0, [r7, #4]
 80126fe:	6039      	str	r1, [r7, #0]
      m_linear_offset(ForwardLinearAccess?(ArgType::IsRowMajor ? block.startRow()*block.nestedExpression().cols() + block.startCol() : block.startCol()*block.nestedExpression().rows() + block.startRow()):0)
 8012700:	6878      	ldr	r0, [r7, #4]
 8012702:	f000 fa66 	bl	8012bd2 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>
 8012706:	687c      	ldr	r4, [r7, #4]
    : m_argImpl(block.nestedExpression()),
 8012708:	683b      	ldr	r3, [r7, #0]
 801270a:	4618      	mov	r0, r3
 801270c:	f000 fa56 	bl	8012bbc <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE16nestedExpressionEv>
 8012710:	4603      	mov	r3, r0
      m_linear_offset(ForwardLinearAccess?(ArgType::IsRowMajor ? block.startRow()*block.nestedExpression().cols() + block.startCol() : block.startCol()*block.nestedExpression().rows() + block.startRow()):0)
 8012712:	4619      	mov	r1, r3
 8012714:	4620      	mov	r0, r4
 8012716:	f000 fa67 	bl	8012be8 <_ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERSE_>
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	f103 0410 	add.w	r4, r3, #16
 8012720:	683b      	ldr	r3, [r7, #0]
 8012722:	4618      	mov	r0, r3
 8012724:	f7ff ffce 	bl	80126c4 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startRowEv>
 8012728:	4603      	mov	r3, r0
 801272a:	4619      	mov	r1, r3
 801272c:	4620      	mov	r0, r4
 801272e:	f7fb fab9 	bl	800dca4 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	f103 0414 	add.w	r4, r3, #20
 8012738:	683b      	ldr	r3, [r7, #0]
 801273a:	4618      	mov	r0, r3
 801273c:	f7ff ffd0 	bl	80126e0 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startColEv>
 8012740:	4603      	mov	r3, r0
 8012742:	4619      	mov	r1, r3
 8012744:	4620      	mov	r0, r4
 8012746:	f7fb fb21 	bl	800dd8c <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	f103 0518 	add.w	r5, r3, #24
 8012750:	683b      	ldr	r3, [r7, #0]
 8012752:	4618      	mov	r0, r3
 8012754:	f7ff ffc4 	bl	80126e0 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startColEv>
 8012758:	4604      	mov	r4, r0
 801275a:	683b      	ldr	r3, [r7, #0]
 801275c:	4618      	mov	r0, r3
 801275e:	f000 fa2d 	bl	8012bbc <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE16nestedExpressionEv>
 8012762:	4603      	mov	r3, r0
 8012764:	4618      	mov	r0, r3
 8012766:	f7f5 fd6c 	bl	8008242 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>
 801276a:	4603      	mov	r3, r0
 801276c:	fb03 f404 	mul.w	r4, r3, r4
 8012770:	683b      	ldr	r3, [r7, #0]
 8012772:	4618      	mov	r0, r3
 8012774:	f7ff ffa6 	bl	80126c4 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startRowEv>
 8012778:	4603      	mov	r3, r0
 801277a:	4423      	add	r3, r4
 801277c:	4619      	mov	r1, r3
 801277e:	4628      	mov	r0, r5
 8012780:	f7fb fa90 	bl	800dca4 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
  { }
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	4618      	mov	r0, r3
 8012788:	3708      	adds	r7, #8
 801278a:	46bd      	mov	sp, r7
 801278c:	bdb0      	pop	{r4, r5, r7, pc}

0801278e <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 801278e:	b580      	push	{r7, lr}
 8012790:	b082      	sub	sp, #8
 8012792:	af00      	add	r7, sp, #0
 8012794:	6078      	str	r0, [r7, #4]
             : m_xpr.outerStride();
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	689b      	ldr	r3, [r3, #8]
             ? m_xpr.innerStride()
 801279a:	4618      	mov	r0, r3
 801279c:	f7f5 ffdc 	bl	8008758 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 80127a0:	4603      	mov	r3, r0
    }
 80127a2:	4618      	mov	r0, r3
 80127a4:	3708      	adds	r7, #8
 80127a6:	46bd      	mov	sp, r7
 80127a8:	bd80      	pop	{r7, pc}

080127aa <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 80127aa:	b580      	push	{r7, lr}
 80127ac:	b082      	sub	sp, #8
 80127ae:	af00      	add	r7, sp, #0
 80127b0:	6078      	str	r0, [r7, #4]
                    : m_xpr.innerStride();
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	689b      	ldr	r3, [r3, #8]
                    ? m_xpr.outerStride()
 80127b6:	4618      	mov	r0, r3
 80127b8:	f7fb fa1e 	bl	800dbf8 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 80127bc:	4603      	mov	r3, r0
    }
 80127be:	4618      	mov	r0, r3
 80127c0:	3708      	adds	r7, #8
 80127c2:	46bd      	mov	sp, r7
 80127c4:	bd80      	pop	{r7, pc}

080127c6 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80127c6:	b480      	push	{r7}
 80127c8:	b083      	sub	sp, #12
 80127ca:	af00      	add	r7, sp, #0
 80127cc:	6078      	str	r0, [r7, #4]
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	4618      	mov	r0, r3
 80127d2:	370c      	adds	r7, #12
 80127d4:	46bd      	mov	sp, r7
 80127d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127da:	4770      	bx	lr

080127dc <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 80127dc:	b480      	push	{r7}
 80127de:	b083      	sub	sp, #12
 80127e0:	af00      	add	r7, sp, #0
 80127e2:	6078      	str	r0, [r7, #4]
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	4618      	mov	r0, r3
 80127ea:	370c      	adds	r7, #12
 80127ec:	46bd      	mov	sp, r7
 80127ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f2:	4770      	bx	lr

080127f4 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 80127f4:	b480      	push	{r7}
 80127f6:	b083      	sub	sp, #12
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	6078      	str	r0, [r7, #4]
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	685b      	ldr	r3, [r3, #4]
 8012800:	4618      	mov	r0, r3
 8012802:	370c      	adds	r7, #12
 8012804:	46bd      	mov	sp, r7
 8012806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801280a:	4770      	bx	lr

0801280c <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEC1Ev>:
 801280c:	b480      	push	{r7}
 801280e:	b083      	sub	sp, #12
 8012810:	af00      	add	r7, sp, #0
 8012812:	6078      	str	r0, [r7, #4]
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	4618      	mov	r0, r3
 8012818:	370c      	adds	r7, #12
 801281a:	46bd      	mov	sp, r7
 801281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012820:	4770      	bx	lr

08012822 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 8012822:	b580      	push	{r7, lr}
 8012824:	b086      	sub	sp, #24
 8012826:	af00      	add	r7, sp, #0
 8012828:	60f8      	str	r0, [r7, #12]
 801282a:	60b9      	str	r1, [r7, #8]
 801282c:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 801282e:	6879      	ldr	r1, [r7, #4]
 8012830:	68b8      	ldr	r0, [r7, #8]
 8012832:	f000 f9e8 	bl	8012c06 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 8012836:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 8012838:	6879      	ldr	r1, [r7, #4]
 801283a:	68b8      	ldr	r0, [r7, #8]
 801283c:	f000 f9ef 	bl	8012c1e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 8012840:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 8012842:	693a      	ldr	r2, [r7, #16]
 8012844:	6979      	ldr	r1, [r7, #20]
 8012846:	68f8      	ldr	r0, [r7, #12]
 8012848:	f000 f9f5 	bl	8012c36 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 801284c:	bf00      	nop
 801284e:	3718      	adds	r7, #24
 8012850:	46bd      	mov	sp, r7
 8012852:	bd80      	pop	{r7, pc}

08012854 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8012854:	b580      	push	{r7, lr}
 8012856:	b082      	sub	sp, #8
 8012858:	af00      	add	r7, sp, #0
 801285a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 801285c:	2201      	movs	r2, #1
 801285e:	2100      	movs	r1, #0
 8012860:	6878      	ldr	r0, [r7, #4]
 8012862:	f7ff ffde 	bl	8012822 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8012866:	6878      	ldr	r0, [r7, #4]
 8012868:	f000 fa0b 	bl	8012c82 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSC_>
  }
 801286c:	bf00      	nop
 801286e:	3708      	adds	r7, #8
 8012870:	46bd      	mov	sp, r7
 8012872:	bd80      	pop	{r7, pc}

08012874 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EEC1ERKNS_5BlockIS6_Li3ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 8012874:	b580      	push	{r7, lr}
 8012876:	b082      	sub	sp, #8
 8012878:	af00      	add	r7, sp, #0
 801287a:	6078      	str	r0, [r7, #4]
 801287c:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	6839      	ldr	r1, [r7, #0]
 8012882:	4618      	mov	r0, r3
 8012884:	f000 fa0d 	bl	8012ca2 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS8_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8012888:	683b      	ldr	r3, [r7, #0]
 801288a:	4618      	mov	r0, r3
 801288c:	f000 fa33 	bl	8012cf6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4dataEv>
 8012890:	bf00      	nop
  }
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	4618      	mov	r0, r3
 8012896:	3708      	adds	r7, #8
 8012898:	46bd      	mov	sp, r7
 801289a:	bd80      	pop	{r7, pc}

0801289c <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 801289c:	b580      	push	{r7, lr}
 801289e:	b082      	sub	sp, #8
 80128a0:	af00      	add	r7, sp, #0
 80128a2:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 80128a4:	f7f4 f9b7 	bl	8006c16 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 80128a8:	4603      	mov	r3, r0
  }
 80128aa:	4618      	mov	r0, r3
 80128ac:	3708      	adds	r7, #8
 80128ae:	46bd      	mov	sp, r7
 80128b0:	bd80      	pop	{r7, pc}

080128b2 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 80128b2:	b580      	push	{r7, lr}
 80128b4:	b082      	sub	sp, #8
 80128b6:	af00      	add	r7, sp, #0
 80128b8:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 80128ba:	f7f4 f9a4 	bl	8006c06 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 80128be:	4603      	mov	r3, r0
  }
 80128c0:	4618      	mov	r0, r3
 80128c2:	3708      	adds	r7, #8
 80128c4:	46bd      	mov	sp, r7
 80128c6:	bd80      	pop	{r7, pc}

080128c8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 80128c8:	b580      	push	{r7, lr}
 80128ca:	b082      	sub	sp, #8
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	4618      	mov	r0, r3
 80128d4:	f000 fa1b 	bl	8012d0e <_ZNK5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4dataEv>
 80128d8:	4603      	mov	r3, r0
 80128da:	4618      	mov	r0, r3
 80128dc:	3708      	adds	r7, #8
 80128de:	46bd      	mov	sp, r7
 80128e0:	bd80      	pop	{r7, pc}

080128e2 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80128e2:	b480      	push	{r7}
 80128e4:	b083      	sub	sp, #12
 80128e6:	af00      	add	r7, sp, #0
 80128e8:	6078      	str	r0, [r7, #4]
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	4618      	mov	r0, r3
 80128ee:	370c      	adds	r7, #12
 80128f0:	46bd      	mov	sp, r7
 80128f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f6:	4770      	bx	lr

080128f8 <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ENS_5DenseEEC1ERS5_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 80128f8:	b580      	push	{r7, lr}
 80128fa:	b084      	sub	sp, #16
 80128fc:	af00      	add	r7, sp, #0
 80128fe:	60f8      	str	r0, [r7, #12]
 8012900:	60b9      	str	r1, [r7, #8]
 8012902:	607a      	str	r2, [r7, #4]
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	687a      	ldr	r2, [r7, #4]
 8012908:	68b9      	ldr	r1, [r7, #8]
 801290a:	4618      	mov	r0, r3
 801290c:	f000 fa16 	bl	8012d3c <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EEC1ERS6_i>
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	4618      	mov	r0, r3
 8012914:	3710      	adds	r7, #16
 8012916:	46bd      	mov	sp, r7
 8012918:	bd80      	pop	{r7, pc}

0801291a <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 801291a:	b480      	push	{r7}
 801291c:	b083      	sub	sp, #12
 801291e:	af00      	add	r7, sp, #0
 8012920:	6078      	str	r0, [r7, #4]
    }
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	4618      	mov	r0, r3
 8012926:	370c      	adds	r7, #12
 8012928:	46bd      	mov	sp, r7
 801292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801292e:	4770      	bx	lr

08012930 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8012930:	b580      	push	{r7, lr}
 8012932:	b082      	sub	sp, #8
 8012934:	af00      	add	r7, sp, #0
 8012936:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	4618      	mov	r0, r3
 801293c:	f7f9 f83d 	bl	800b9ba <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 8012940:	4603      	mov	r3, r0
    }
 8012942:	4618      	mov	r0, r3
 8012944:	3708      	adds	r7, #8
 8012946:	46bd      	mov	sp, r7
 8012948:	bd80      	pop	{r7, pc}

0801294a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1ERKSJ_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 801294a:	b580      	push	{r7, lr}
 801294c:	b082      	sub	sp, #8
 801294e:	af00      	add	r7, sp, #0
 8012950:	6078      	str	r0, [r7, #4]
 8012952:	6039      	str	r1, [r7, #0]
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	6839      	ldr	r1, [r7, #0]
 8012958:	4618      	mov	r0, r3
 801295a:	f000 fa25 	bl	8012da8 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1ERKSJ_>
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	4618      	mov	r0, r3
 8012962:	3708      	adds	r7, #8
 8012964:	46bd      	mov	sp, r7
 8012966:	bd80      	pop	{r7, pc}

08012968 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8012968:	b480      	push	{r7}
 801296a:	b083      	sub	sp, #12
 801296c:	af00      	add	r7, sp, #0
 801296e:	6078      	str	r0, [r7, #4]
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	4618      	mov	r0, r3
 8012974:	370c      	adds	r7, #12
 8012976:	46bd      	mov	sp, r7
 8012978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801297c:	4770      	bx	lr

0801297e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>:
 801297e:	b480      	push	{r7}
 8012980:	b083      	sub	sp, #12
 8012982:	af00      	add	r7, sp, #0
 8012984:	6078      	str	r0, [r7, #4]
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	4618      	mov	r0, r3
 801298a:	370c      	adds	r7, #12
 801298c:	46bd      	mov	sp, r7
 801298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012992:	4770      	bx	lr

08012994 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISM_EEfRKSN_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 8012994:	b580      	push	{r7, lr}
 8012996:	b084      	sub	sp, #16
 8012998:	af00      	add	r7, sp, #0
 801299a:	60f8      	str	r0, [r7, #12]
 801299c:	60b9      	str	r1, [r7, #8]
 801299e:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 80129a0:	68b9      	ldr	r1, [r7, #8]
 80129a2:	68f8      	ldr	r0, [r7, #12]
 80129a4:	f000 fa0f 	bl	8012dc6 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSN_RKS3_>
 80129a8:	eef0 7a40 	vmov.f32	s15, s0
  }
 80129ac:	eeb0 0a67 	vmov.f32	s0, s15
 80129b0:	3710      	adds	r7, #16
 80129b2:	46bd      	mov	sp, r7
 80129b4:	bd80      	pop	{r7, pc}

080129b6 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEEC1ERKS9_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 80129b6:	b580      	push	{r7, lr}
 80129b8:	b082      	sub	sp, #8
 80129ba:	af00      	add	r7, sp, #0
 80129bc:	6078      	str	r0, [r7, #4]
 80129be:	6039      	str	r1, [r7, #0]
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	6839      	ldr	r1, [r7, #0]
 80129c4:	4618      	mov	r0, r3
 80129c6:	f000 fa22 	bl	8012e0e <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEELi6ENS_10DenseShapeESA_ffEC1ERKS9_>
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	4618      	mov	r0, r3
 80129ce:	3708      	adds	r7, #8
 80129d0:	46bd      	mov	sp, r7
 80129d2:	bd80      	pop	{r7, pc}

080129d4 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 80129d4:	b480      	push	{r7}
 80129d6:	b083      	sub	sp, #12
 80129d8:	af00      	add	r7, sp, #0
 80129da:	6078      	str	r0, [r7, #4]
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	4618      	mov	r0, r3
 80129e0:	370c      	adds	r7, #12
 80129e2:	46bd      	mov	sp, r7
 80129e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129e8:	4770      	bx	lr

080129ea <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 80129ea:	b580      	push	{r7, lr}
 80129ec:	b082      	sub	sp, #8
 80129ee:	af00      	add	r7, sp, #0
 80129f0:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	689b      	ldr	r3, [r3, #8]
 80129f6:	4618      	mov	r0, r3
 80129f8:	f7fb f973 	bl	800dce2 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>
 80129fc:	4603      	mov	r3, r0
    }
 80129fe:	4618      	mov	r0, r3
 8012a00:	3708      	adds	r7, #8
 8012a02:	46bd      	mov	sp, r7
 8012a04:	bd80      	pop	{r7, pc}

08012a06 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8012a06:	b580      	push	{r7, lr}
 8012a08:	b082      	sub	sp, #8
 8012a0a:	af00      	add	r7, sp, #0
 8012a0c:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	689b      	ldr	r3, [r3, #8]
 8012a12:	4618      	mov	r0, r3
 8012a14:	f7f4 fcd6 	bl	80073c4 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 8012a18:	4603      	mov	r3, r0
    }
 8012a1a:	4618      	mov	r0, r3
 8012a1c:	3708      	adds	r7, #8
 8012a1e:	46bd      	mov	sp, r7
 8012a20:	bd80      	pop	{r7, pc}

08012a22 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8012a22:	b480      	push	{r7}
 8012a24:	b083      	sub	sp, #12
 8012a26:	af00      	add	r7, sp, #0
 8012a28:	6078      	str	r0, [r7, #4]
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	4618      	mov	r0, r3
 8012a2e:	370c      	adds	r7, #12
 8012a30:	46bd      	mov	sp, r7
 8012a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a36:	4770      	bx	lr

08012a38 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
 8012a38:	b480      	push	{r7}
 8012a3a:	b083      	sub	sp, #12
 8012a3c:	af00      	add	r7, sp, #0
 8012a3e:	6078      	str	r0, [r7, #4]
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	4618      	mov	r0, r3
 8012a44:	370c      	adds	r7, #12
 8012a46:	46bd      	mov	sp, r7
 8012a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a4c:	4770      	bx	lr

08012a4e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4DataC1ERKSD_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8012a4e:	b590      	push	{r4, r7, lr}
 8012a50:	b083      	sub	sp, #12
 8012a52:	af00      	add	r7, sp, #0
 8012a54:	6078      	str	r0, [r7, #4]
 8012a56:	6039      	str	r1, [r7, #0]
 8012a58:	687c      	ldr	r4, [r7, #4]
 8012a5a:	6838      	ldr	r0, [r7, #0]
 8012a5c:	f000 fa14 	bl	8012e88 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE7functorEv>
 8012a60:	4603      	mov	r3, r0
 8012a62:	4619      	mov	r1, r3
 8012a64:	4620      	mov	r0, r4
 8012a66:	f7f2 fe2f 	bl	80056c8 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	1d1c      	adds	r4, r3, #4
 8012a6e:	6838      	ldr	r0, [r7, #0]
 8012a70:	f000 fa16 	bl	8012ea0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE3lhsEv>
 8012a74:	4603      	mov	r3, r0
 8012a76:	4619      	mov	r1, r3
 8012a78:	4620      	mov	r0, r4
 8012a7a:	f000 fa28 	bl	8012ece <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERS7_>
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	f103 0408 	add.w	r4, r3, #8
 8012a84:	6838      	ldr	r0, [r7, #0]
 8012a86:	f000 fa16 	bl	8012eb6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE3rhsEv>
 8012a8a:	4603      	mov	r3, r0
 8012a8c:	4619      	mov	r1, r3
 8012a8e:	4620      	mov	r0, r4
 8012a90:	f7f8 fdd9 	bl	800b646 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS4_>
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	4618      	mov	r0, r3
 8012a98:	370c      	adds	r7, #12
 8012a9a:	46bd      	mov	sp, r7
 8012a9c:	bd90      	pop	{r4, r7, pc}

08012a9e <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8012a9e:	b580      	push	{r7, lr}
 8012aa0:	b084      	sub	sp, #16
 8012aa2:	af00      	add	r7, sp, #0
 8012aa4:	60f8      	str	r0, [r7, #12]
 8012aa6:	60b9      	str	r1, [r7, #8]
 8012aa8:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	68ba      	ldr	r2, [r7, #8]
 8012aae:	6879      	ldr	r1, [r7, #4]
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	f000 fa1b 	bl	8012eec <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE5coeffEii>
 8012ab6:	eef0 7a40 	vmov.f32	s15, s0
 8012aba:	eeb0 0a67 	vmov.f32	s0, s15
 8012abe:	3710      	adds	r7, #16
 8012ac0:	46bd      	mov	sp, r7
 8012ac2:	bd80      	pop	{r7, pc}

08012ac4 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi1ELi1EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8012ac4:	b580      	push	{r7, lr}
 8012ac6:	b082      	sub	sp, #8
 8012ac8:	af00      	add	r7, sp, #0
 8012aca:	6078      	str	r0, [r7, #4]
 8012acc:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8012ace:	2201      	movs	r2, #1
 8012ad0:	2100      	movs	r1, #0
 8012ad2:	6878      	ldr	r0, [r7, #4]
 8012ad4:	f7ff ffe3 	bl	8012a9e <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE17coeffByOuterInnerEii>
 8012ad8:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012adc:	eeb0 0a67 	vmov.f32	s0, s15
 8012ae0:	3708      	adds	r7, #8
 8012ae2:	46bd      	mov	sp, r7
 8012ae4:	bd80      	pop	{r7, pc}

08012ae6 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi2ELi1EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8012ae6:	b580      	push	{r7, lr}
 8012ae8:	b082      	sub	sp, #8
 8012aea:	af00      	add	r7, sp, #0
 8012aec:	6078      	str	r0, [r7, #4]
 8012aee:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8012af0:	2202      	movs	r2, #2
 8012af2:	2100      	movs	r1, #0
 8012af4:	6878      	ldr	r0, [r7, #4]
 8012af6:	f7ff ffd2 	bl	8012a9e <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE17coeffByOuterInnerEii>
 8012afa:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012afe:	eeb0 0a67 	vmov.f32	s0, s15
 8012b02:	3708      	adds	r7, #8
 8012b04:	46bd      	mov	sp, r7
 8012b06:	bd80      	pop	{r7, pc}

08012b08 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 8012b08:	b580      	push	{r7, lr}
 8012b0a:	b0a4      	sub	sp, #144	; 0x90
 8012b0c:	af00      	add	r7, sp, #0
 8012b0e:	60f8      	str	r0, [r7, #12]
 8012b10:	60b9      	str	r1, [r7, #8]
 8012b12:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	6819      	ldr	r1, [r3, #0]
 8012b18:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8012b1c:	68ba      	ldr	r2, [r7, #8]
 8012b1e:	4618      	mov	r0, r3
 8012b20:	f7f8 fc16 	bl	800b350 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3rowEi>
 8012b24:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012b28:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8012b2c:	4611      	mov	r1, r2
 8012b2e:	4618      	mov	r0, r3
 8012b30:	f7f8 fc21 	bl	800b376 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE9transposeEv>
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	6859      	ldr	r1, [r3, #4]
 8012b38:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8012b3c:	687a      	ldr	r2, [r7, #4]
 8012b3e:	4618      	mov	r0, r3
 8012b40:	f000 f9ff 	bl	8012f42 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE3colEi>
 8012b44:	f107 0314 	add.w	r3, r7, #20
 8012b48:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8012b4c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8012b50:	4618      	mov	r0, r3
 8012b52:	f000 fa09 	bl	8012f68 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 8012b56:	f107 0314 	add.w	r3, r7, #20
 8012b5a:	4618      	mov	r0, r3
 8012b5c:	f000 fa32 	bl	8012fc4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE3sumEv>
 8012b60:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012b64:	eeb0 0a67 	vmov.f32	s0, s15
 8012b68:	3790      	adds	r7, #144	; 0x90
 8012b6a:	46bd      	mov	sp, r7
 8012b6c:	bd80      	pop	{r7, pc}

08012b6e <_ZNK5Eigen8internal13sub_assign_opIffE11assignCoeffERfRKf>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a -= b; }
 8012b6e:	b480      	push	{r7}
 8012b70:	b085      	sub	sp, #20
 8012b72:	af00      	add	r7, sp, #0
 8012b74:	60f8      	str	r0, [r7, #12]
 8012b76:	60b9      	str	r1, [r7, #8]
 8012b78:	607a      	str	r2, [r7, #4]
 8012b7a:	68bb      	ldr	r3, [r7, #8]
 8012b7c:	ed93 7a00 	vldr	s14, [r3]
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	edd3 7a00 	vldr	s15, [r3]
 8012b86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012b8a:	68bb      	ldr	r3, [r7, #8]
 8012b8c:	edc3 7a00 	vstr	s15, [r3]
 8012b90:	bf00      	nop
 8012b92:	3714      	adds	r7, #20
 8012b94:	46bd      	mov	sp, r7
 8012b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b9a:	4770      	bx	lr

08012b9c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi3ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8012b9c:	b580      	push	{r7, lr}
 8012b9e:	b082      	sub	sp, #8
 8012ba0:	af00      	add	r7, sp, #0
 8012ba2:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8012ba4:	2200      	movs	r2, #0
 8012ba6:	2101      	movs	r1, #1
 8012ba8:	6878      	ldr	r0, [r7, #4]
 8012baa:	f7ff f991 	bl	8011ed0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8012bae:	6878      	ldr	r0, [r7, #4]
 8012bb0:	f000 fa23 	bl	8012ffa <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi4ELi9EE3runERSE_>
  }
 8012bb4:	bf00      	nop
 8012bb6:	3708      	adds	r7, #8
 8012bb8:	46bd      	mov	sp, r7
 8012bba:	bd80      	pop	{r7, pc}

08012bbc <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE16nestedExpressionEv>:
    const typename internal::remove_all<XprTypeNested>::type& nestedExpression() const
 8012bbc:	b480      	push	{r7}
 8012bbe:	b083      	sub	sp, #12
 8012bc0:	af00      	add	r7, sp, #0
 8012bc2:	6078      	str	r0, [r7, #4]
      return m_xpr;
 8012bc4:	687b      	ldr	r3, [r7, #4]
    }
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	370c      	adds	r7, #12
 8012bca:	46bd      	mov	sp, r7
 8012bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd0:	4770      	bx	lr

08012bd2 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8012bd2:	b480      	push	{r7}
 8012bd4:	b083      	sub	sp, #12
 8012bd6:	af00      	add	r7, sp, #0
 8012bd8:	6078      	str	r0, [r7, #4]
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	4618      	mov	r0, r3
 8012bde:	370c      	adds	r7, #12
 8012be0:	46bd      	mov	sp, r7
 8012be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012be6:	4770      	bx	lr

08012be8 <_ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERSE_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8012be8:	b580      	push	{r7, lr}
 8012bea:	b082      	sub	sp, #8
 8012bec:	af00      	add	r7, sp, #0
 8012bee:	6078      	str	r0, [r7, #4]
 8012bf0:	6039      	str	r1, [r7, #0]
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	6839      	ldr	r1, [r7, #0]
 8012bf6:	4618      	mov	r0, r3
 8012bf8:	f7f7 fb49 	bl	800a28e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERKSD_>
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	4618      	mov	r0, r3
 8012c00:	3708      	adds	r7, #8
 8012c02:	46bd      	mov	sp, r7
 8012c04:	bd80      	pop	{r7, pc}

08012c06 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 8012c06:	b480      	push	{r7}
 8012c08:	b083      	sub	sp, #12
 8012c0a:	af00      	add	r7, sp, #0
 8012c0c:	6078      	str	r0, [r7, #4]
 8012c0e:	6039      	str	r1, [r7, #0]
      : inner;
 8012c10:	683b      	ldr	r3, [r7, #0]
  }
 8012c12:	4618      	mov	r0, r3
 8012c14:	370c      	adds	r7, #12
 8012c16:	46bd      	mov	sp, r7
 8012c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c1c:	4770      	bx	lr

08012c1e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 8012c1e:	b480      	push	{r7}
 8012c20:	b083      	sub	sp, #12
 8012c22:	af00      	add	r7, sp, #0
 8012c24:	6078      	str	r0, [r7, #4]
 8012c26:	6039      	str	r1, [r7, #0]
      : outer;
 8012c28:	687b      	ldr	r3, [r7, #4]
  }
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	370c      	adds	r7, #12
 8012c2e:	46bd      	mov	sp, r7
 8012c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c34:	4770      	bx	lr

08012c36 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 8012c36:	b5b0      	push	{r4, r5, r7, lr}
 8012c38:	b086      	sub	sp, #24
 8012c3a:	af00      	add	r7, sp, #0
 8012c3c:	60f8      	str	r0, [r7, #12]
 8012c3e:	60b9      	str	r1, [r7, #8]
 8012c40:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	689c      	ldr	r4, [r3, #8]
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	687a      	ldr	r2, [r7, #4]
 8012c4c:	68b9      	ldr	r1, [r7, #8]
 8012c4e:	4618      	mov	r0, r3
 8012c50:	f7f6 f83e 	bl	8008cd0 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 8012c54:	4605      	mov	r5, r0
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	685b      	ldr	r3, [r3, #4]
 8012c5a:	687a      	ldr	r2, [r7, #4]
 8012c5c:	68b9      	ldr	r1, [r7, #8]
 8012c5e:	4618      	mov	r0, r3
 8012c60:	f000 f9db 	bl	801301a <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffE5coeffEii>
 8012c64:	eef0 7a40 	vmov.f32	s15, s0
 8012c68:	edc7 7a05 	vstr	s15, [r7, #20]
 8012c6c:	f107 0314 	add.w	r3, r7, #20
 8012c70:	461a      	mov	r2, r3
 8012c72:	4629      	mov	r1, r5
 8012c74:	4620      	mov	r0, r4
 8012c76:	f7f5 fd9b 	bl	80087b0 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8012c7a:	bf00      	nop
 8012c7c:	3718      	adds	r7, #24
 8012c7e:	46bd      	mov	sp, r7
 8012c80:	bdb0      	pop	{r4, r5, r7, pc}

08012c82 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8012c82:	b580      	push	{r7, lr}
 8012c84:	b082      	sub	sp, #8
 8012c86:	af00      	add	r7, sp, #0
 8012c88:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8012c8a:	2202      	movs	r2, #2
 8012c8c:	2100      	movs	r1, #0
 8012c8e:	6878      	ldr	r0, [r7, #4]
 8012c90:	f7ff fdc7 	bl	8012822 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8012c94:	6878      	ldr	r0, [r7, #4]
 8012c96:	f000 f9f3 	bl	8013080 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSC_>
  }
 8012c9a:	bf00      	nop
 8012c9c:	3708      	adds	r7, #8
 8012c9e:	46bd      	mov	sp, r7
 8012ca0:	bd80      	pop	{r7, pc}

08012ca2 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS8_>:
  explicit mapbase_evaluator(const XprType& map)
 8012ca2:	b590      	push	{r4, r7, lr}
 8012ca4:	b083      	sub	sp, #12
 8012ca6:	af00      	add	r7, sp, #0
 8012ca8:	6078      	str	r0, [r7, #4]
 8012caa:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8012cac:	6878      	ldr	r0, [r7, #4]
 8012cae:	f000 fa13 	bl	80130d8 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8012cb2:	683b      	ldr	r3, [r7, #0]
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	f000 f81e 	bl	8012cf6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4dataEv>
 8012cba:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	601a      	str	r2, [r3, #0]
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	1d1c      	adds	r4, r3, #4
 8012cc4:	683b      	ldr	r3, [r7, #0]
 8012cc6:	4618      	mov	r0, r3
 8012cc8:	f000 f9ea 	bl	80130a0 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE11innerStrideEv>
 8012ccc:	4603      	mov	r3, r0
 8012cce:	4619      	mov	r1, r3
 8012cd0:	4620      	mov	r0, r4
 8012cd2:	f7f3 ff59 	bl	8006b88 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	1d5c      	adds	r4, r3, #5
 8012cda:	683b      	ldr	r3, [r7, #0]
 8012cdc:	4618      	mov	r0, r3
 8012cde:	f000 f9ed 	bl	80130bc <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE11outerStrideEv>
 8012ce2:	4603      	mov	r3, r0
 8012ce4:	4619      	mov	r1, r3
 8012ce6:	4620      	mov	r0, r4
 8012ce8:	f7f3 ff68 	bl	8006bbc <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
  }
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	4618      	mov	r0, r3
 8012cf0:	370c      	adds	r7, #12
 8012cf2:	46bd      	mov	sp, r7
 8012cf4:	bd90      	pop	{r4, r7, pc}

08012cf6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4dataEv>:
 8012cf6:	b480      	push	{r7}
 8012cf8:	b083      	sub	sp, #12
 8012cfa:	af00      	add	r7, sp, #0
 8012cfc:	6078      	str	r0, [r7, #4]
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	4618      	mov	r0, r3
 8012d04:	370c      	adds	r7, #12
 8012d06:	46bd      	mov	sp, r7
 8012d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d0c:	4770      	bx	lr

08012d0e <_ZNK5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 8012d0e:	b480      	push	{r7}
 8012d10:	b083      	sub	sp, #12
 8012d12:	af00      	add	r7, sp, #0
 8012d14:	6078      	str	r0, [r7, #4]
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	4618      	mov	r0, r3
 8012d1a:	370c      	adds	r7, #12
 8012d1c:	46bd      	mov	sp, r7
 8012d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d22:	4770      	bx	lr

08012d24 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>:
    inline Index outerStride() const EIGEN_NOEXCEPT { return this->innerSize(); }
 8012d24:	b580      	push	{r7, lr}
 8012d26:	b082      	sub	sp, #8
 8012d28:	af00      	add	r7, sp, #0
 8012d2a:	6078      	str	r0, [r7, #4]
 8012d2c:	6878      	ldr	r0, [r7, #4]
 8012d2e:	f000 f9de 	bl	80130ee <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9innerSizeEv>
 8012d32:	4603      	mov	r3, r0
 8012d34:	4618      	mov	r0, r3
 8012d36:	3708      	adds	r7, #8
 8012d38:	46bd      	mov	sp, r7
 8012d3a:	bd80      	pop	{r7, pc}

08012d3c <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EEC1ERS6_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 8012d3c:	b5b0      	push	{r4, r5, r7, lr}
 8012d3e:	b084      	sub	sp, #16
 8012d40:	af00      	add	r7, sp, #0
 8012d42:	60f8      	str	r0, [r7, #12]
 8012d44:	60b9      	str	r1, [r7, #8]
 8012d46:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8012d48:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8012d4a:	68b8      	ldr	r0, [r7, #8]
 8012d4c:	f000 f9db 	bl	8013106 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE4dataEv>
 8012d50:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 8012d52:	68b8      	ldr	r0, [r7, #8]
 8012d54:	f000 f9ff 	bl	8013156 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11outerStrideEv>
 8012d58:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	fb02 f303 	mul.w	r3, r2, r3
 8012d60:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8012d62:	441d      	add	r5, r3
 8012d64:	68b8      	ldr	r0, [r7, #8]
 8012d66:	f7f3 f822 	bl	8005dae <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8012d6a:	4602      	mov	r2, r0
 8012d6c:	2301      	movs	r3, #1
 8012d6e:	4629      	mov	r1, r5
 8012d70:	4620      	mov	r0, r4
 8012d72:	f000 fa11 	bl	8013198 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii>
 8012d76:	68fb      	ldr	r3, [r7, #12]
 8012d78:	3308      	adds	r3, #8
 8012d7a:	68ba      	ldr	r2, [r7, #8]
 8012d7c:	6812      	ldr	r2, [r2, #0]
 8012d7e:	601a      	str	r2, [r3, #0]
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	330c      	adds	r3, #12
 8012d84:	2100      	movs	r1, #0
 8012d86:	4618      	mov	r0, r3
 8012d88:	f7fa ff8c 	bl	800dca4 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	3310      	adds	r3, #16
 8012d90:	6879      	ldr	r1, [r7, #4]
 8012d92:	4618      	mov	r0, r3
 8012d94:	f7fa fffa 	bl	800dd8c <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
      init();
 8012d98:	68f8      	ldr	r0, [r7, #12]
 8012d9a:	f000 fa3b 	bl	8013214 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE4initEv>
    }
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	4618      	mov	r0, r3
 8012da2:	3710      	adds	r7, #16
 8012da4:	46bd      	mov	sp, r7
 8012da6:	bdb0      	pop	{r4, r5, r7, pc}

08012da8 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1ERKSJ_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8012da8:	b580      	push	{r7, lr}
 8012daa:	b082      	sub	sp, #8
 8012dac:	af00      	add	r7, sp, #0
 8012dae:	6078      	str	r0, [r7, #4]
 8012db0:	6039      	str	r1, [r7, #0]
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	6839      	ldr	r1, [r7, #0]
 8012db6:	4618      	mov	r0, r3
 8012db8:	f000 fa3c 	bl	8013234 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffEC1ERKSJ_>
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	4618      	mov	r0, r3
 8012dc0:	3708      	adds	r7, #8
 8012dc2:	46bd      	mov	sp, r7
 8012dc4:	bd80      	pop	{r7, pc}

08012dc6 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8012dc6:	b580      	push	{r7, lr}
 8012dc8:	b084      	sub	sp, #16
 8012dca:	af00      	add	r7, sp, #0
 8012dcc:	6078      	str	r0, [r7, #4]
 8012dce:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8012dd0:	6839      	ldr	r1, [r7, #0]
 8012dd2:	6878      	ldr	r0, [r7, #4]
 8012dd4:	f000 fa40 	bl	8013258 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSN_RKS3_>
 8012dd8:	eef0 7a40 	vmov.f32	s15, s0
 8012ddc:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8012de0:	6839      	ldr	r1, [r7, #0]
 8012de2:	6878      	ldr	r0, [r7, #4]
 8012de4:	f000 fa49 	bl	801327a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSN_RKS3_>
 8012de8:	eef0 7a40 	vmov.f32	s15, s0
 8012dec:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8012df0:	f107 020c 	add.w	r2, r7, #12
 8012df4:	f107 0308 	add.w	r3, r7, #8
 8012df8:	4619      	mov	r1, r3
 8012dfa:	6838      	ldr	r0, [r7, #0]
 8012dfc:	f7f6 fac9 	bl	8009392 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8012e00:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012e04:	eeb0 0a67 	vmov.f32	s0, s15
 8012e08:	3710      	adds	r7, #16
 8012e0a:	46bd      	mov	sp, r7
 8012e0c:	bd80      	pop	{r7, pc}

08012e0e <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEELi6ENS_10DenseShapeESA_ffEC1ERKS9_>:
  explicit product_evaluator(const XprType& xpr)
 8012e0e:	b5b0      	push	{r4, r5, r7, lr}
 8012e10:	b084      	sub	sp, #16
 8012e12:	af00      	add	r7, sp, #0
 8012e14:	6078      	str	r0, [r7, #4]
 8012e16:	6039      	str	r1, [r7, #0]
    : m_result(xpr.rows(), xpr.cols())
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	f000 fa51 	bl	80132c2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	1d1c      	adds	r4, r3, #4
 8012e24:	6838      	ldr	r0, [r7, #0]
 8012e26:	f7f3 f8f9 	bl	800601c <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 8012e2a:	4603      	mov	r3, r0
 8012e2c:	60bb      	str	r3, [r7, #8]
 8012e2e:	6838      	ldr	r0, [r7, #0]
 8012e30:	f7f3 f901 	bl	8006036 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4colsEv>
 8012e34:	4603      	mov	r3, r0
 8012e36:	60fb      	str	r3, [r7, #12]
 8012e38:	f107 020c 	add.w	r2, r7, #12
 8012e3c:	f107 0308 	add.w	r3, r7, #8
 8012e40:	4619      	mov	r1, r3
 8012e42:	4620      	mov	r0, r4
 8012e44:	f000 fa4a 	bl	80132dc <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1IiiEERKT_RKT0_>
    ::new (static_cast<Base*>(this)) Base(m_result);
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	4619      	mov	r1, r3
 8012e4c:	2004      	movs	r0, #4
 8012e4e:	f7ee f875 	bl	8000f3c <_ZnwjPv>
 8012e52:	4602      	mov	r2, r0
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	3304      	adds	r3, #4
 8012e58:	4619      	mov	r1, r3
 8012e5a:	4610      	mov	r0, r2
 8012e5c:	f7f7 fbf9 	bl	800a652 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
    generic_product_impl<Lhs, Rhs, LhsShape, RhsShape, ProductTag>::evalTo(m_result, xpr.lhs(), xpr.rhs());
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	1d1c      	adds	r4, r3, #4
 8012e64:	6838      	ldr	r0, [r7, #0]
 8012e66:	f000 fa52 	bl	801330e <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE3lhsEv>
 8012e6a:	4605      	mov	r5, r0
 8012e6c:	6838      	ldr	r0, [r7, #0]
 8012e6e:	f000 fa59 	bl	8013324 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE3rhsEv>
 8012e72:	4603      	mov	r3, r0
 8012e74:	461a      	mov	r2, r3
 8012e76:	4629      	mov	r1, r5
 8012e78:	4620      	mov	r0, r4
 8012e7a:	f000 fa5f 	bl	801333c <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EENS_10DenseShapeES9_Li6EE6evalToINS3_IfLi1ELi1ELi0ELi1ELi1EEEEEvRT_RKS6_RKS8_>
  }
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	4618      	mov	r0, r3
 8012e82:	3710      	adds	r7, #16
 8012e84:	46bd      	mov	sp, r7
 8012e86:	bdb0      	pop	{r4, r5, r7, pc}

08012e88 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8012e88:	b480      	push	{r7}
 8012e8a:	b083      	sub	sp, #12
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	6078      	str	r0, [r7, #4]
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	3308      	adds	r3, #8
 8012e94:	4618      	mov	r0, r3
 8012e96:	370c      	adds	r7, #12
 8012e98:	46bd      	mov	sp, r7
 8012e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e9e:	4770      	bx	lr

08012ea0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8012ea0:	b480      	push	{r7}
 8012ea2:	b083      	sub	sp, #12
 8012ea4:	af00      	add	r7, sp, #0
 8012ea6:	6078      	str	r0, [r7, #4]
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	4618      	mov	r0, r3
 8012eac:	370c      	adds	r7, #12
 8012eae:	46bd      	mov	sp, r7
 8012eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb4:	4770      	bx	lr

08012eb6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8012eb6:	b480      	push	{r7}
 8012eb8:	b083      	sub	sp, #12
 8012eba:	af00      	add	r7, sp, #0
 8012ebc:	6078      	str	r0, [r7, #4]
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	685b      	ldr	r3, [r3, #4]
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	370c      	adds	r7, #12
 8012ec6:	46bd      	mov	sp, r7
 8012ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ecc:	4770      	bx	lr

08012ece <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8012ece:	b580      	push	{r7, lr}
 8012ed0:	b082      	sub	sp, #8
 8012ed2:	af00      	add	r7, sp, #0
 8012ed4:	6078      	str	r0, [r7, #4]
 8012ed6:	6039      	str	r1, [r7, #0]
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	6839      	ldr	r1, [r7, #0]
 8012edc:	4618      	mov	r0, r3
 8012ede:	f000 fa55 	bl	801338c <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS6_>
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	4618      	mov	r0, r3
 8012ee6:	3708      	adds	r7, #8
 8012ee8:	46bd      	mov	sp, r7
 8012eea:	bd80      	pop	{r7, pc}

08012eec <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8012eec:	b590      	push	{r4, r7, lr}
 8012eee:	b087      	sub	sp, #28
 8012ef0:	af00      	add	r7, sp, #0
 8012ef2:	60f8      	str	r0, [r7, #12]
 8012ef4:	60b9      	str	r1, [r7, #8]
 8012ef6:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	4618      	mov	r0, r3
 8012efc:	f000 fa55 	bl	80133aa <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4Data4funcEv>
 8012f00:	4604      	mov	r4, r0
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	3304      	adds	r3, #4
 8012f06:	687a      	ldr	r2, [r7, #4]
 8012f08:	68b9      	ldr	r1, [r7, #8]
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	f000 fa58 	bl	80133c0 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfE5coeffEii>
 8012f10:	eef0 7a40 	vmov.f32	s15, s0
 8012f14:	edc7 7a05 	vstr	s15, [r7, #20]
 8012f18:	68fb      	ldr	r3, [r7, #12]
 8012f1a:	3308      	adds	r3, #8
 8012f1c:	687a      	ldr	r2, [r7, #4]
 8012f1e:	68b9      	ldr	r1, [r7, #8]
 8012f20:	4618      	mov	r0, r3
 8012f22:	f7fe f9d0 	bl	80112c6 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEii>
 8012f26:	4602      	mov	r2, r0
 8012f28:	f107 0314 	add.w	r3, r7, #20
 8012f2c:	4619      	mov	r1, r3
 8012f2e:	4620      	mov	r0, r4
 8012f30:	f7fc fa70 	bl	800f414 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 8012f34:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012f38:	eeb0 0a67 	vmov.f32	s0, s15
 8012f3c:	371c      	adds	r7, #28
 8012f3e:	46bd      	mov	sp, r7
 8012f40:	bd90      	pop	{r4, r7, pc}

08012f42 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE3colEi>:
ConstColXpr col(Index i) const
 8012f42:	b580      	push	{r7, lr}
 8012f44:	b084      	sub	sp, #16
 8012f46:	af00      	add	r7, sp, #0
 8012f48:	60f8      	str	r0, [r7, #12]
 8012f4a:	60b9      	str	r1, [r7, #8]
 8012f4c:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 8012f4e:	68b8      	ldr	r0, [r7, #8]
 8012f50:	f7f2 ff6a 	bl	8005e28 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8012f54:	4603      	mov	r3, r0
 8012f56:	687a      	ldr	r2, [r7, #4]
 8012f58:	4619      	mov	r1, r3
 8012f5a:	68f8      	ldr	r0, [r7, #12]
 8012f5c:	f000 fa46 	bl	80133ec <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i>
}
 8012f60:	68f8      	ldr	r0, [r7, #12]
 8012f62:	3710      	adds	r7, #16
 8012f64:	46bd      	mov	sp, r7
 8012f66:	bd80      	pop	{r7, pc}

08012f68 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 8012f68:	b5b0      	push	{r4, r5, r7, lr}
 8012f6a:	b086      	sub	sp, #24
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	60f8      	str	r0, [r7, #12]
 8012f70:	60b9      	str	r1, [r7, #8]
 8012f72:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 8012f74:	68b8      	ldr	r0, [r7, #8]
 8012f76:	f7f8 ffff 	bl	800bf78 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE7derivedEv>
 8012f7a:	4604      	mov	r4, r0
 8012f7c:	6878      	ldr	r0, [r7, #4]
 8012f7e:	f000 fa5d 	bl	801343c <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE7derivedEv>
 8012f82:	4605      	mov	r5, r0
 8012f84:	f107 0314 	add.w	r3, r7, #20
 8012f88:	4618      	mov	r0, r3
 8012f8a:	f7f2 fb13 	bl	80055b4 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 8012f8e:	f107 0314 	add.w	r3, r7, #20
 8012f92:	462a      	mov	r2, r5
 8012f94:	4621      	mov	r1, r4
 8012f96:	68f8      	ldr	r0, [r7, #12]
 8012f98:	f000 fa8a 	bl	80134b0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_>
}
 8012f9c:	68f8      	ldr	r0, [r7, #12]
 8012f9e:	3718      	adds	r7, #24
 8012fa0:	46bd      	mov	sp, r7
 8012fa2:	bdb0      	pop	{r4, r5, r7, pc}

08012fa4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8012fa4:	b580      	push	{r7, lr}
 8012fa6:	b082      	sub	sp, #8
 8012fa8:	af00      	add	r7, sp, #0
 8012faa:	6078      	str	r0, [r7, #4]
 8012fac:	6878      	ldr	r0, [r7, #4]
 8012fae:	f000 fadd 	bl	801356c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 8012fb2:	4603      	mov	r3, r0
 8012fb4:	4618      	mov	r0, r3
 8012fb6:	f000 fae4 	bl	8013582 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE4rowsEv>
 8012fba:	4603      	mov	r3, r0
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	3708      	adds	r7, #8
 8012fc0:	46bd      	mov	sp, r7
 8012fc2:	bd80      	pop	{r7, pc}

08012fc4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 8012fc4:	b590      	push	{r4, r7, lr}
 8012fc6:	b085      	sub	sp, #20
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 8012fcc:	6878      	ldr	r0, [r7, #4]
 8012fce:	f000 facd 	bl	801356c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 8012fd2:	4604      	mov	r4, r0
 8012fd4:	f107 030c 	add.w	r3, r7, #12
 8012fd8:	4618      	mov	r0, r3
 8012fda:	f7f2 fde2 	bl	8005ba2 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8012fde:	f107 030c 	add.w	r3, r7, #12
 8012fe2:	4619      	mov	r1, r3
 8012fe4:	4620      	mov	r0, r4
 8012fe6:	f000 fb49 	bl	801367c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 8012fea:	eef0 7a40 	vmov.f32	s15, s0
 8012fee:	bf00      	nop
}
 8012ff0:	eeb0 0a67 	vmov.f32	s0, s15
 8012ff4:	3714      	adds	r7, #20
 8012ff6:	46bd      	mov	sp, r7
 8012ff8:	bd90      	pop	{r4, r7, pc}

08012ffa <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi4ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8012ffa:	b580      	push	{r7, lr}
 8012ffc:	b082      	sub	sp, #8
 8012ffe:	af00      	add	r7, sp, #0
 8013000:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013002:	2201      	movs	r2, #1
 8013004:	2101      	movs	r1, #1
 8013006:	6878      	ldr	r0, [r7, #4]
 8013008:	f7fe ff62 	bl	8011ed0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 801300c:	6878      	ldr	r0, [r7, #4]
 801300e:	f000 fb7b 	bl	8013708 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi5ELi9EE3runERSE_>
  }
 8013012:	bf00      	nop
 8013014:	3708      	adds	r7, #8
 8013016:	46bd      	mov	sp, r7
 8013018:	bd80      	pop	{r7, pc}

0801301a <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 801301a:	b580      	push	{r7, lr}
 801301c:	b0a4      	sub	sp, #144	; 0x90
 801301e:	af00      	add	r7, sp, #0
 8013020:	60f8      	str	r0, [r7, #12]
 8013022:	60b9      	str	r1, [r7, #8]
 8013024:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	6819      	ldr	r1, [r3, #0]
 801302a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801302e:	68ba      	ldr	r2, [r7, #8]
 8013030:	4618      	mov	r0, r3
 8013032:	f7f7 ffbd 	bl	800afb0 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 8013036:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801303a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 801303e:	4611      	mov	r1, r2
 8013040:	4618      	mov	r0, r3
 8013042:	f7f7 ffc8 	bl	800afd6 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	6859      	ldr	r1, [r3, #4]
 801304a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801304e:	687a      	ldr	r2, [r7, #4]
 8013050:	4618      	mov	r0, r3
 8013052:	f7f9 f9f4 	bl	800c43e <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3colEi>
 8013056:	f107 0314 	add.w	r3, r7, #20
 801305a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801305e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8013062:	4618      	mov	r0, r3
 8013064:	f7f9 f9fe 	bl	800c464 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IS5_Li3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>
 8013068:	f107 0314 	add.w	r3, r7, #20
 801306c:	4618      	mov	r0, r3
 801306e:	f7f9 fa27 	bl	800c4c0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE3sumEv>
 8013072:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013076:	eeb0 0a67 	vmov.f32	s0, s15
 801307a:	3790      	adds	r7, #144	; 0x90
 801307c:	46bd      	mov	sp, r7
 801307e:	bd80      	pop	{r7, pc}

08013080 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8013080:	b580      	push	{r7, lr}
 8013082:	b082      	sub	sp, #8
 8013084:	af00      	add	r7, sp, #0
 8013086:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013088:	2200      	movs	r2, #0
 801308a:	2101      	movs	r1, #1
 801308c:	6878      	ldr	r0, [r7, #4]
 801308e:	f7ff fbc8 	bl	8012822 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8013092:	6878      	ldr	r0, [r7, #4]
 8013094:	f000 fb48 	bl	8013728 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSC_>
  }
 8013098:	bf00      	nop
 801309a:	3708      	adds	r7, #8
 801309c:	46bd      	mov	sp, r7
 801309e:	bd80      	pop	{r7, pc}

080130a0 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 80130a0:	b580      	push	{r7, lr}
 80130a2:	b082      	sub	sp, #8
 80130a4:	af00      	add	r7, sp, #0
 80130a6:	6078      	str	r0, [r7, #4]
             : m_xpr.outerStride();
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	3308      	adds	r3, #8
             ? m_xpr.innerStride()
 80130ac:	4618      	mov	r0, r3
 80130ae:	f7fd fc40 	bl	8010932 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11outerStrideEv>
 80130b2:	4603      	mov	r3, r0
    }
 80130b4:	4618      	mov	r0, r3
 80130b6:	3708      	adds	r7, #8
 80130b8:	46bd      	mov	sp, r7
 80130ba:	bd80      	pop	{r7, pc}

080130bc <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 80130bc:	b580      	push	{r7, lr}
 80130be:	b082      	sub	sp, #8
 80130c0:	af00      	add	r7, sp, #0
 80130c2:	6078      	str	r0, [r7, #4]
                    : m_xpr.innerStride();
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	3308      	adds	r3, #8
                    ? m_xpr.outerStride()
 80130c8:	4618      	mov	r0, r3
 80130ca:	f7fd fc1e 	bl	801090a <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11innerStrideEv>
 80130ce:	4603      	mov	r3, r0
    }
 80130d0:	4618      	mov	r0, r3
 80130d2:	3708      	adds	r7, #8
 80130d4:	46bd      	mov	sp, r7
 80130d6:	bd80      	pop	{r7, pc}

080130d8 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80130d8:	b480      	push	{r7}
 80130da:	b083      	sub	sp, #12
 80130dc:	af00      	add	r7, sp, #0
 80130de:	6078      	str	r0, [r7, #4]
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	4618      	mov	r0, r3
 80130e4:	370c      	adds	r7, #12
 80130e6:	46bd      	mov	sp, r7
 80130e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ec:	4770      	bx	lr

080130ee <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9innerSizeEv>:
    Index innerSize() const
 80130ee:	b580      	push	{r7, lr}
 80130f0:	b082      	sub	sp, #8
 80130f2:	af00      	add	r7, sp, #0
 80130f4:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 80130f6:	6878      	ldr	r0, [r7, #4]
 80130f8:	f000 fb36 	bl	8013768 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4sizeEv>
 80130fc:	4603      	mov	r3, r0
    }
 80130fe:	4618      	mov	r0, r3
 8013100:	3708      	adds	r7, #8
 8013102:	46bd      	mov	sp, r7
 8013104:	bd80      	pop	{r7, pc}

08013106 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE4dataEv>:
    const Scalar* data() const { return derived().nestedExpression().data(); }
 8013106:	b580      	push	{r7, lr}
 8013108:	b082      	sub	sp, #8
 801310a:	af00      	add	r7, sp, #0
 801310c:	6078      	str	r0, [r7, #4]
 801310e:	6878      	ldr	r0, [r7, #4]
 8013110:	f7f2 fe1e 	bl	8005d50 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8013114:	4603      	mov	r3, r0
 8013116:	4618      	mov	r0, r3
 8013118:	f7fe fd63 	bl	8011be2 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 801311c:	4603      	mov	r3, r0
 801311e:	4618      	mov	r0, r3
 8013120:	f7ff fbd2 	bl	80128c8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>
 8013124:	4603      	mov	r3, r0
 8013126:	4618      	mov	r0, r3
 8013128:	3708      	adds	r7, #8
 801312a:	46bd      	mov	sp, r7
 801312c:	bd80      	pop	{r7, pc}

0801312e <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11innerStrideEv>:
    Index innerStride() const { return derived().nestedExpression().innerStride(); }
 801312e:	b580      	push	{r7, lr}
 8013130:	b082      	sub	sp, #8
 8013132:	af00      	add	r7, sp, #0
 8013134:	6078      	str	r0, [r7, #4]
 8013136:	6878      	ldr	r0, [r7, #4]
 8013138:	f7f2 fe0a 	bl	8005d50 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 801313c:	4603      	mov	r3, r0
 801313e:	4618      	mov	r0, r3
 8013140:	f7fe fd4f 	bl	8011be2 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 8013144:	4603      	mov	r3, r0
 8013146:	4618      	mov	r0, r3
 8013148:	f000 fb30 	bl	80137ac <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>
 801314c:	4603      	mov	r3, r0
 801314e:	4618      	mov	r0, r3
 8013150:	3708      	adds	r7, #8
 8013152:	46bd      	mov	sp, r7
 8013154:	bd80      	pop	{r7, pc}

08013156 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11outerStrideEv>:
    Index outerStride() const { return derived().nestedExpression().outerStride(); }
 8013156:	b580      	push	{r7, lr}
 8013158:	b082      	sub	sp, #8
 801315a:	af00      	add	r7, sp, #0
 801315c:	6078      	str	r0, [r7, #4]
 801315e:	6878      	ldr	r0, [r7, #4]
 8013160:	f7f2 fdf6 	bl	8005d50 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8013164:	4603      	mov	r3, r0
 8013166:	4618      	mov	r0, r3
 8013168:	f7fe fd3b 	bl	8011be2 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 801316c:	4603      	mov	r3, r0
 801316e:	4618      	mov	r0, r3
 8013170:	f7ff fdd8 	bl	8012d24 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 8013174:	4603      	mov	r3, r0
 8013176:	4618      	mov	r0, r3
 8013178:	3708      	adds	r7, #8
 801317a:	46bd      	mov	sp, r7
 801317c:	bd80      	pop	{r7, pc}

0801317e <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>:
 801317e:	b580      	push	{r7, lr}
 8013180:	b082      	sub	sp, #8
 8013182:	af00      	add	r7, sp, #0
 8013184:	6078      	str	r0, [r7, #4]
 8013186:	6878      	ldr	r0, [r7, #4]
 8013188:	f000 fb1b 	bl	80137c2 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	4618      	mov	r0, r3
 8013190:	3708      	adds	r7, #8
 8013192:	46bd      	mov	sp, r7
 8013194:	bd80      	pop	{r7, pc}
	...

08013198 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 8013198:	b580      	push	{r7, lr}
 801319a:	b084      	sub	sp, #16
 801319c:	af00      	add	r7, sp, #0
 801319e:	60f8      	str	r0, [r7, #12]
 80131a0:	60b9      	str	r1, [r7, #8]
 80131a2:	607a      	str	r2, [r7, #4]
 80131a4:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 80131a6:	68f8      	ldr	r0, [r7, #12]
 80131a8:	f7ff ffe9 	bl	801317e <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	68ba      	ldr	r2, [r7, #8]
 80131b0:	601a      	str	r2, [r3, #0]
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	3304      	adds	r3, #4
 80131b6:	6879      	ldr	r1, [r7, #4]
 80131b8:	4618      	mov	r0, r3
 80131ba:	f7f3 fce5 	bl	8006b88 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	3305      	adds	r3, #5
 80131c2:	6839      	ldr	r1, [r7, #0]
 80131c4:	4618      	mov	r0, r3
 80131c6:	f7f3 fcf9 	bl	8006bbc <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 80131ca:	68bb      	ldr	r3, [r7, #8]
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d011      	beq.n	80131f4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	db08      	blt.n	80131e8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	2b03      	cmp	r3, #3
 80131da:	d105      	bne.n	80131e8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 80131dc:	683b      	ldr	r3, [r7, #0]
 80131de:	2b00      	cmp	r3, #0
 80131e0:	db02      	blt.n	80131e8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 80131e2:	683b      	ldr	r3, [r7, #0]
 80131e4:	2b01      	cmp	r3, #1
 80131e6:	d005      	beq.n	80131f4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 80131e8:	4b07      	ldr	r3, [pc, #28]	; (8013208 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x70>)
 80131ea:	4a08      	ldr	r2, [pc, #32]	; (801320c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x74>)
 80131ec:	21b0      	movs	r1, #176	; 0xb0
 80131ee:	4808      	ldr	r0, [pc, #32]	; (8013210 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x78>)
 80131f0:	f00a fe58 	bl	801dea4 <__assert_func>
      checkSanity<Derived>();
 80131f4:	2100      	movs	r1, #0
 80131f6:	68f8      	ldr	r0, [r7, #12]
 80131f8:	f000 faee 	bl	80137d8 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 80131fc:	68fb      	ldr	r3, [r7, #12]
 80131fe:	4618      	mov	r0, r3
 8013200:	3710      	adds	r7, #16
 8013202:	46bd      	mov	sp, r7
 8013204:	bd80      	pop	{r7, pc}
 8013206:	bf00      	nop
 8013208:	08026430 	.word	0x08026430
 801320c:	08028b2c 	.word	0x08028b2c
 8013210:	080265e0 	.word	0x080265e0

08013214 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE4initEv>:
    void init()
 8013214:	b580      	push	{r7, lr}
 8013216:	b082      	sub	sp, #8
 8013218:	af00      	add	r7, sp, #0
 801321a:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	3308      	adds	r3, #8
 8013220:	4618      	mov	r0, r3
 8013222:	f7ff ff98 	bl	8013156 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11outerStrideEv>
 8013226:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	615a      	str	r2, [r3, #20]
    }
 801322c:	bf00      	nop
 801322e:	3708      	adds	r7, #8
 8013230:	46bd      	mov	sp, r7
 8013232:	bd80      	pop	{r7, pc}

08013234 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffEC1ERKSJ_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8013234:	b580      	push	{r7, lr}
 8013236:	b082      	sub	sp, #8
 8013238:	af00      	add	r7, sp, #0
 801323a:	6078      	str	r0, [r7, #4]
 801323c:	6039      	str	r1, [r7, #0]
 801323e:	6878      	ldr	r0, [r7, #4]
 8013240:	f000 fad5 	bl	80137ee <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	6839      	ldr	r1, [r7, #0]
 8013248:	4618      	mov	r0, r3
 801324a:	f000 fadb 	bl	8013804 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4DataC1ERKSJ_>
  }
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	4618      	mov	r0, r3
 8013252:	3708      	adds	r7, #8
 8013254:	46bd      	mov	sp, r7
 8013256:	bd80      	pop	{r7, pc}

08013258 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8013258:	b580      	push	{r7, lr}
 801325a:	b082      	sub	sp, #8
 801325c:	af00      	add	r7, sp, #0
 801325e:	6078      	str	r0, [r7, #4]
 8013260:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8013262:	2200      	movs	r2, #0
 8013264:	2100      	movs	r1, #0
 8013266:	6878      	ldr	r0, [r7, #4]
 8013268:	f000 faf4 	bl	8013854 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 801326c:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013270:	eeb0 0a67 	vmov.f32	s0, s15
 8013274:	3708      	adds	r7, #8
 8013276:	46bd      	mov	sp, r7
 8013278:	bd80      	pop	{r7, pc}

0801327a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 801327a:	b580      	push	{r7, lr}
 801327c:	b084      	sub	sp, #16
 801327e:	af00      	add	r7, sp, #0
 8013280:	6078      	str	r0, [r7, #4]
 8013282:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8013284:	6839      	ldr	r1, [r7, #0]
 8013286:	6878      	ldr	r0, [r7, #4]
 8013288:	f000 faf7 	bl	801387a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSN_RKS3_>
 801328c:	eef0 7a40 	vmov.f32	s15, s0
 8013290:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8013294:	6839      	ldr	r1, [r7, #0]
 8013296:	6878      	ldr	r0, [r7, #4]
 8013298:	f000 fb00 	bl	801389c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSN_RKS3_>
 801329c:	eef0 7a40 	vmov.f32	s15, s0
 80132a0:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80132a4:	f107 020c 	add.w	r2, r7, #12
 80132a8:	f107 0308 	add.w	r3, r7, #8
 80132ac:	4619      	mov	r1, r3
 80132ae:	6838      	ldr	r0, [r7, #0]
 80132b0:	f7f6 f86f 	bl	8009392 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 80132b4:	eef0 7a40 	vmov.f32	s15, s0
  }
 80132b8:	eeb0 0a67 	vmov.f32	s0, s15
 80132bc:	3710      	adds	r7, #16
 80132be:	46bd      	mov	sp, r7
 80132c0:	bd80      	pop	{r7, pc}

080132c2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
  evaluator() {}
 80132c2:	b580      	push	{r7, lr}
 80132c4:	b082      	sub	sp, #8
 80132c6:	af00      	add	r7, sp, #0
 80132c8:	6078      	str	r0, [r7, #4]
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	4618      	mov	r0, r3
 80132ce:	f000 faf6 	bl	80138be <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	4618      	mov	r0, r3
 80132d6:	3708      	adds	r7, #8
 80132d8:	46bd      	mov	sp, r7
 80132da:	bd80      	pop	{r7, pc}

080132dc <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1IiiEERKT_RKT0_>:
    Matrix(const T0& x, const T1& y)
 80132dc:	b580      	push	{r7, lr}
 80132de:	b084      	sub	sp, #16
 80132e0:	af00      	add	r7, sp, #0
 80132e2:	60f8      	str	r0, [r7, #12]
 80132e4:	60b9      	str	r1, [r7, #8]
 80132e6:	607a      	str	r2, [r7, #4]
    {
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	4618      	mov	r0, r3
 80132ec:	f7f1 fde2 	bl	8004eb4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 80132f0:	f7f1 fdf0 	bl	8004ed4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
      Base::template _init2<T0,T1>(x, y);
 80132f4:	68f8      	ldr	r0, [r7, #12]
 80132f6:	68bb      	ldr	r3, [r7, #8]
 80132f8:	6819      	ldr	r1, [r3, #0]
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	681a      	ldr	r2, [r3, #0]
 80132fe:	2300      	movs	r3, #0
 8013300:	f000 faef 	bl	80138e2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>
    }
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	4618      	mov	r0, r3
 8013308:	3710      	adds	r7, #16
 801330a:	46bd      	mov	sp, r7
 801330c:	bd80      	pop	{r7, pc}

0801330e <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 801330e:	b480      	push	{r7}
 8013310:	b083      	sub	sp, #12
 8013312:	af00      	add	r7, sp, #0
 8013314:	6078      	str	r0, [r7, #4]
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	4618      	mov	r0, r3
 801331a:	370c      	adds	r7, #12
 801331c:	46bd      	mov	sp, r7
 801331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013322:	4770      	bx	lr

08013324 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8013324:	b480      	push	{r7}
 8013326:	b083      	sub	sp, #12
 8013328:	af00      	add	r7, sp, #0
 801332a:	6078      	str	r0, [r7, #4]
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	3308      	adds	r3, #8
 8013330:	4618      	mov	r0, r3
 8013332:	370c      	adds	r7, #12
 8013334:	46bd      	mov	sp, r7
 8013336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801333a:	4770      	bx	lr

0801333c <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EENS_10DenseShapeES9_Li6EE6evalToINS3_IfLi1ELi1ELi0ELi1ELi1EEEEEvRT_RKS6_RKS8_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 801333c:	b590      	push	{r4, r7, lr}
 801333e:	b08b      	sub	sp, #44	; 0x2c
 8013340:	af00      	add	r7, sp, #0
 8013342:	60f8      	str	r0, [r7, #12]
 8013344:	60b9      	str	r1, [r7, #8]
 8013346:	607a      	str	r2, [r7, #4]
    dst.coeffRef(0,0) = (lhs.transpose().cwiseProduct(rhs)).sum();
 8013348:	f107 0320 	add.w	r3, r7, #32
 801334c:	68b9      	ldr	r1, [r7, #8]
 801334e:	4618      	mov	r0, r3
 8013350:	f000 fadb 	bl	801390a <_ZNK5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE9transposeEv>
 8013354:	f107 0310 	add.w	r3, r7, #16
 8013358:	f107 0120 	add.w	r1, r7, #32
 801335c:	687a      	ldr	r2, [r7, #4]
 801335e:	4618      	mov	r0, r3
 8013360:	f000 fae4 	bl	801392c <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEE12cwiseProductINS1_IS4_EEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	2200      	movs	r2, #0
 8013368:	2100      	movs	r1, #0
 801336a:	4618      	mov	r0, r3
 801336c:	f7f3 fb99 	bl	8006aa2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>
 8013370:	4604      	mov	r4, r0
 8013372:	f107 0310 	add.w	r3, r7, #16
 8013376:	4618      	mov	r0, r3
 8013378:	f000 fb06 	bl	8013988 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE3sumEv>
 801337c:	eef0 7a40 	vmov.f32	s15, s0
 8013380:	edc4 7a00 	vstr	s15, [r4]
  }
 8013384:	bf00      	nop
 8013386:	372c      	adds	r7, #44	; 0x2c
 8013388:	46bd      	mov	sp, r7
 801338a:	bd90      	pop	{r4, r7, pc}

0801338c <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS6_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 801338c:	b580      	push	{r7, lr}
 801338e:	b082      	sub	sp, #8
 8013390:	af00      	add	r7, sp, #0
 8013392:	6078      	str	r0, [r7, #4]
 8013394:	6039      	str	r1, [r7, #0]
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	6839      	ldr	r1, [r7, #0]
 801339a:	4618      	mov	r0, r3
 801339c:	f000 fb0f 	bl	80139be <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfEC1ERKS6_>
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	4618      	mov	r0, r3
 80133a4:	3708      	adds	r7, #8
 80133a6:	46bd      	mov	sp, r7
 80133a8:	bd80      	pop	{r7, pc}

080133aa <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 80133aa:	b480      	push	{r7}
 80133ac:	b083      	sub	sp, #12
 80133ae:	af00      	add	r7, sp, #0
 80133b0:	6078      	str	r0, [r7, #4]
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	4618      	mov	r0, r3
 80133b6:	370c      	adds	r7, #12
 80133b8:	46bd      	mov	sp, r7
 80133ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133be:	4770      	bx	lr

080133c0 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 80133c0:	b580      	push	{r7, lr}
 80133c2:	b084      	sub	sp, #16
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	60f8      	str	r0, [r7, #12]
 80133c8:	60b9      	str	r1, [r7, #8]
 80133ca:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	68ba      	ldr	r2, [r7, #8]
 80133d0:	6879      	ldr	r1, [r7, #4]
 80133d2:	4618      	mov	r0, r3
 80133d4:	f000 fb09 	bl	80139ea <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE5coeffEii>
 80133d8:	4603      	mov	r3, r0
 80133da:	681b      	ldr	r3, [r3, #0]
 80133dc:	ee07 3a90 	vmov	s15, r3
  }
 80133e0:	eeb0 0a67 	vmov.f32	s0, s15
 80133e4:	3710      	adds	r7, #16
 80133e6:	46bd      	mov	sp, r7
 80133e8:	bd80      	pop	{r7, pc}
	...

080133ec <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 80133ec:	b580      	push	{r7, lr}
 80133ee:	b084      	sub	sp, #16
 80133f0:	af00      	add	r7, sp, #0
 80133f2:	60f8      	str	r0, [r7, #12]
 80133f4:	60b9      	str	r1, [r7, #8]
 80133f6:	607a      	str	r2, [r7, #4]
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	687a      	ldr	r2, [r7, #4]
 80133fc:	68b9      	ldr	r1, [r7, #8]
 80133fe:	4618      	mov	r0, r3
 8013400:	f000 fb0b 	bl	8013a1a <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	2b00      	cmp	r3, #0
 8013408:	db07      	blt.n	801341a <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x2e>
 801340a:	68bb      	ldr	r3, [r7, #8]
 801340c:	4618      	mov	r0, r3
 801340e:	f7f1 ffe7 	bl	80053e0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8013412:	4602      	mov	r2, r0
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	4293      	cmp	r3, r2
 8013418:	db05      	blt.n	8013426 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x3a>
 801341a:	4b05      	ldr	r3, [pc, #20]	; (8013430 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x44>)
 801341c:	4a05      	ldr	r2, [pc, #20]	; (8013434 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x48>)
 801341e:	2178      	movs	r1, #120	; 0x78
 8013420:	4805      	ldr	r0, [pc, #20]	; (8013438 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x4c>)
 8013422:	f00a fd3f 	bl	801dea4 <__assert_func>
    }
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	4618      	mov	r0, r3
 801342a:	3710      	adds	r7, #16
 801342c:	46bd      	mov	sp, r7
 801342e:	bd80      	pop	{r7, pc}
 8013430:	08024890 	.word	0x08024890
 8013434:	08028c40 	.word	0x08028c40
 8013438:	08024a14 	.word	0x08024a14

0801343c <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 801343c:	b480      	push	{r7}
 801343e:	b083      	sub	sp, #12
 8013440:	af00      	add	r7, sp, #0
 8013442:	6078      	str	r0, [r7, #4]
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	4618      	mov	r0, r3
 8013448:	370c      	adds	r7, #12
 801344a:	46bd      	mov	sp, r7
 801344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013450:	4770      	bx	lr

08013452 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>:
 8013452:	b580      	push	{r7, lr}
 8013454:	b082      	sub	sp, #8
 8013456:	af00      	add	r7, sp, #0
 8013458:	6078      	str	r0, [r7, #4]
 801345a:	6878      	ldr	r0, [r7, #4]
 801345c:	f000 faee 	bl	8013a3c <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	4618      	mov	r0, r3
 8013464:	3708      	adds	r7, #8
 8013466:	46bd      	mov	sp, r7
 8013468:	bd80      	pop	{r7, pc}

0801346a <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 801346a:	b580      	push	{r7, lr}
 801346c:	b082      	sub	sp, #8
 801346e:	af00      	add	r7, sp, #0
 8013470:	6078      	str	r0, [r7, #4]
 8013472:	6878      	ldr	r0, [r7, #4]
 8013474:	f7ff ffed 	bl	8013452 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	4618      	mov	r0, r3
 801347c:	3708      	adds	r7, #8
 801347e:	46bd      	mov	sp, r7
 8013480:	bd80      	pop	{r7, pc}

08013482 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 8013482:	b580      	push	{r7, lr}
 8013484:	b082      	sub	sp, #8
 8013486:	af00      	add	r7, sp, #0
 8013488:	6078      	str	r0, [r7, #4]
 801348a:	f7f3 fbc4 	bl	8006c16 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 801348e:	4603      	mov	r3, r0
 8013490:	4618      	mov	r0, r3
 8013492:	3708      	adds	r7, #8
 8013494:	46bd      	mov	sp, r7
 8013496:	bd80      	pop	{r7, pc}

08013498 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 8013498:	b580      	push	{r7, lr}
 801349a:	b082      	sub	sp, #8
 801349c:	af00      	add	r7, sp, #0
 801349e:	6078      	str	r0, [r7, #4]
 80134a0:	f7f3 fbb9 	bl	8006c16 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 80134a4:	4603      	mov	r3, r0
 80134a6:	4618      	mov	r0, r3
 80134a8:	3708      	adds	r7, #8
 80134aa:	46bd      	mov	sp, r7
 80134ac:	bd80      	pop	{r7, pc}
	...

080134b0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 80134b0:	b5b0      	push	{r4, r5, r7, lr}
 80134b2:	b084      	sub	sp, #16
 80134b4:	af00      	add	r7, sp, #0
 80134b6:	60f8      	str	r0, [r7, #12]
 80134b8:	60b9      	str	r1, [r7, #8]
 80134ba:	607a      	str	r2, [r7, #4]
 80134bc:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 80134be:	68f8      	ldr	r0, [r7, #12]
 80134c0:	f7ff ffd3 	bl	801346a <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS_5DenseEEC1Ev>
 80134c4:	68fa      	ldr	r2, [r7, #12]
 80134c6:	68bb      	ldr	r3, [r7, #8]
 80134c8:	4614      	mov	r4, r2
 80134ca:	461d      	mov	r5, r3
 80134cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80134ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80134d0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80134d4:	e884 0003 	stmia.w	r4, {r0, r1}
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	f103 0218 	add.w	r2, r3, #24
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	4614      	mov	r4, r2
 80134e2:	461d      	mov	r5, r3
 80134e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80134e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80134e8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80134ec:	e884 0003 	stmia.w	r4, {r0, r1}
 80134f0:	68fb      	ldr	r3, [r7, #12]
 80134f2:	3330      	adds	r3, #48	; 0x30
 80134f4:	6839      	ldr	r1, [r7, #0]
 80134f6:	4618      	mov	r0, r3
 80134f8:	f7f2 f8e6 	bl	80056c8 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 80134fc:	68b8      	ldr	r0, [r7, #8]
 80134fe:	f7f8 fd69 	bl	800bfd4 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>
 8013502:	4604      	mov	r4, r0
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	4618      	mov	r0, r3
 8013508:	f7ff ffbb 	bl	8013482 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4rowsEv>
 801350c:	4603      	mov	r3, r0
 801350e:	429c      	cmp	r4, r3
 8013510:	d10a      	bne.n	8013528 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x78>
 8013512:	68b8      	ldr	r0, [r7, #8]
 8013514:	f7f8 fd6b 	bl	800bfee <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>
 8013518:	4604      	mov	r4, r0
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	4618      	mov	r0, r3
 801351e:	f7ff ffbb 	bl	8013498 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4colsEv>
 8013522:	4603      	mov	r3, r0
 8013524:	429c      	cmp	r4, r3
 8013526:	d005      	beq.n	8013534 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x84>
 8013528:	4b05      	ldr	r3, [pc, #20]	; (8013540 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x90>)
 801352a:	4a06      	ldr	r2, [pc, #24]	; (8013544 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x94>)
 801352c:	2174      	movs	r1, #116	; 0x74
 801352e:	4806      	ldr	r0, [pc, #24]	; (8013548 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x98>)
 8013530:	f00a fcb8 	bl	801dea4 <__assert_func>
    }
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	4618      	mov	r0, r3
 8013538:	3710      	adds	r7, #16
 801353a:	46bd      	mov	sp, r7
 801353c:	bdb0      	pop	{r4, r5, r7, pc}
 801353e:	bf00      	nop
 8013540:	0801fd0c 	.word	0x0801fd0c
 8013544:	08028d1c 	.word	0x08028d1c
 8013548:	0801ff70 	.word	0x0801ff70

0801354c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 801354c:	b580      	push	{r7, lr}
 801354e:	b082      	sub	sp, #8
 8013550:	af00      	add	r7, sp, #0
 8013552:	6078      	str	r0, [r7, #4]
 8013554:	6878      	ldr	r0, [r7, #4]
 8013556:	f000 f809 	bl	801356c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 801355a:	4603      	mov	r3, r0
 801355c:	4618      	mov	r0, r3
 801355e:	f000 fa78 	bl	8013a52 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE4colsEv>
 8013562:	4603      	mov	r3, r0
 8013564:	4618      	mov	r0, r3
 8013566:	3708      	adds	r7, #8
 8013568:	46bd      	mov	sp, r7
 801356a:	bd80      	pop	{r7, pc}

0801356c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 801356c:	b480      	push	{r7}
 801356e:	b083      	sub	sp, #12
 8013570:	af00      	add	r7, sp, #0
 8013572:	6078      	str	r0, [r7, #4]
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	4618      	mov	r0, r3
 8013578:	370c      	adds	r7, #12
 801357a:	46bd      	mov	sp, r7
 801357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013580:	4770      	bx	lr

08013582 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8013582:	b580      	push	{r7, lr}
 8013584:	b082      	sub	sp, #8
 8013586:	af00      	add	r7, sp, #0
 8013588:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	4618      	mov	r0, r3
 801358e:	f7f8 fd21 	bl	800bfd4 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>
 8013592:	4603      	mov	r3, r0
    }
 8013594:	4618      	mov	r0, r3
 8013596:	3708      	adds	r7, #8
 8013598:	46bd      	mov	sp, r7
 801359a:	bd80      	pop	{r7, pc}

0801359c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 801359c:	b580      	push	{r7, lr}
 801359e:	b082      	sub	sp, #8
 80135a0:	af00      	add	r7, sp, #0
 80135a2:	6078      	str	r0, [r7, #4]
 80135a4:	6878      	ldr	r0, [r7, #4]
 80135a6:	f000 fa7b 	bl	8013aa0 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	4618      	mov	r0, r3
 80135ae:	3708      	adds	r7, #8
 80135b0:	46bd      	mov	sp, r7
 80135b2:	bd80      	pop	{r7, pc}

080135b4 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 80135b4:	b580      	push	{r7, lr}
 80135b6:	b082      	sub	sp, #8
 80135b8:	af00      	add	r7, sp, #0
 80135ba:	6078      	str	r0, [r7, #4]
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	4618      	mov	r0, r3
 80135c0:	f7ff ffec 	bl	801359c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEED1Ev>
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	4618      	mov	r0, r3
 80135c8:	3708      	adds	r7, #8
 80135ca:	46bd      	mov	sp, r7
 80135cc:	bd80      	pop	{r7, pc}

080135ce <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 80135ce:	b580      	push	{r7, lr}
 80135d0:	b082      	sub	sp, #8
 80135d2:	af00      	add	r7, sp, #0
 80135d4:	6078      	str	r0, [r7, #4]
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	4618      	mov	r0, r3
 80135da:	f7ff ffeb 	bl	80135b4 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EED1Ev>
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	4618      	mov	r0, r3
 80135e2:	3708      	adds	r7, #8
 80135e4:	46bd      	mov	sp, r7
 80135e6:	bd80      	pop	{r7, pc}

080135e8 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 80135e8:	b580      	push	{r7, lr}
 80135ea:	b082      	sub	sp, #8
 80135ec:	af00      	add	r7, sp, #0
 80135ee:	6078      	str	r0, [r7, #4]
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	4618      	mov	r0, r3
 80135f4:	f7ff ffeb 	bl	80135ce <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	4618      	mov	r0, r3
 80135fc:	3708      	adds	r7, #8
 80135fe:	46bd      	mov	sp, r7
 8013600:	bd80      	pop	{r7, pc}

08013602 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 8013602:	b580      	push	{r7, lr}
 8013604:	b082      	sub	sp, #8
 8013606:	af00      	add	r7, sp, #0
 8013608:	6078      	str	r0, [r7, #4]
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	330c      	adds	r3, #12
 801360e:	4618      	mov	r0, r3
 8013610:	f7ff ffea 	bl	80135e8 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	3304      	adds	r3, #4
 8013618:	4618      	mov	r0, r3
 801361a:	f7f8 fdcf 	bl	800c1bc <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	4618      	mov	r0, r3
 8013622:	3708      	adds	r7, #8
 8013624:	46bd      	mov	sp, r7
 8013626:	bd80      	pop	{r7, pc}

08013628 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8013628:	b580      	push	{r7, lr}
 801362a:	b082      	sub	sp, #8
 801362c:	af00      	add	r7, sp, #0
 801362e:	6078      	str	r0, [r7, #4]
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	4618      	mov	r0, r3
 8013634:	f7ff ffe5 	bl	8013602 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 8013638:	6878      	ldr	r0, [r7, #4]
 801363a:	f000 fa26 	bl	8013a8a <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	4618      	mov	r0, r3
 8013642:	3708      	adds	r7, #8
 8013644:	46bd      	mov	sp, r7
 8013646:	bd80      	pop	{r7, pc}

08013648 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8013648:	b580      	push	{r7, lr}
 801364a:	b082      	sub	sp, #8
 801364c:	af00      	add	r7, sp, #0
 801364e:	6078      	str	r0, [r7, #4]
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	4618      	mov	r0, r3
 8013654:	f7ff ffe8 	bl	8013628 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffED1Ev>
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	4618      	mov	r0, r3
 801365c:	3708      	adds	r7, #8
 801365e:	46bd      	mov	sp, r7
 8013660:	bd80      	pop	{r7, pc}

08013662 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 8013662:	b580      	push	{r7, lr}
 8013664:	b082      	sub	sp, #8
 8013666:	af00      	add	r7, sp, #0
 8013668:	6078      	str	r0, [r7, #4]
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	4618      	mov	r0, r3
 801366e:	f7ff ffeb 	bl	8013648 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	4618      	mov	r0, r3
 8013676:	3708      	adds	r7, #8
 8013678:	46bd      	mov	sp, r7
 801367a:	bd80      	pop	{r7, pc}

0801367c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 801367c:	b580      	push	{r7, lr}
 801367e:	ed2d 8b02 	vpush	{d8}
 8013682:	b088      	sub	sp, #32
 8013684:	af00      	add	r7, sp, #0
 8013686:	6078      	str	r0, [r7, #4]
 8013688:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 801368a:	6878      	ldr	r0, [r7, #4]
 801368c:	f7ff fc8a 	bl	8012fa4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE4rowsEv>
 8013690:	4603      	mov	r3, r0
 8013692:	2b00      	cmp	r3, #0
 8013694:	dd05      	ble.n	80136a2 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 8013696:	6878      	ldr	r0, [r7, #4]
 8013698:	f7ff ff58 	bl	801354c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE4colsEv>
 801369c:	4603      	mov	r3, r0
 801369e:	2b00      	cmp	r3, #0
 80136a0:	dc06      	bgt.n	80136b0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 80136a2:	4b16      	ldr	r3, [pc, #88]	; (80136fc <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 80136a4:	4a16      	ldr	r2, [pc, #88]	; (8013700 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 80136a6:	f240 119b 	movw	r1, #411	; 0x19b
 80136aa:	4816      	ldr	r0, [pc, #88]	; (8013704 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 80136ac:	f00a fbfa 	bl	801dea4 <__assert_func>
 80136b0:	bf00      	nop
  ThisEvaluator thisEval(derived());
 80136b2:	6878      	ldr	r0, [r7, #4]
 80136b4:	f7ff ff5a 	bl	801356c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 80136b8:	4602      	mov	r2, r0
 80136ba:	f107 030c 	add.w	r3, r7, #12
 80136be:	4611      	mov	r1, r2
 80136c0:	4618      	mov	r0, r3
 80136c2:	f000 f9d3 	bl	8013a6c <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 80136c6:	6878      	ldr	r0, [r7, #4]
 80136c8:	f7ff ff50 	bl	801356c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 80136cc:	4602      	mov	r2, r0
 80136ce:	f107 030c 	add.w	r3, r7, #12
 80136d2:	6839      	ldr	r1, [r7, #0]
 80136d4:	4618      	mov	r0, r3
 80136d6:	f000 f9ee 	bl	8013ab6 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 80136da:	eeb0 8a40 	vmov.f32	s16, s0
 80136de:	bf00      	nop
  ThisEvaluator thisEval(derived());
 80136e0:	f107 030c 	add.w	r3, r7, #12
 80136e4:	4618      	mov	r0, r3
 80136e6:	f7ff ffbc 	bl	8013662 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 80136ea:	eef0 7a48 	vmov.f32	s15, s16
}
 80136ee:	eeb0 0a67 	vmov.f32	s0, s15
 80136f2:	3720      	adds	r7, #32
 80136f4:	46bd      	mov	sp, r7
 80136f6:	ecbd 8b02 	vpop	{d8}
 80136fa:	bd80      	pop	{r7, pc}
 80136fc:	08024d8c 	.word	0x08024d8c
 8013700:	08028f68 	.word	0x08028f68
 8013704:	08024f98 	.word	0x08024f98

08013708 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi5ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8013708:	b580      	push	{r7, lr}
 801370a:	b082      	sub	sp, #8
 801370c:	af00      	add	r7, sp, #0
 801370e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013710:	2202      	movs	r2, #2
 8013712:	2101      	movs	r1, #1
 8013714:	6878      	ldr	r0, [r7, #4]
 8013716:	f7fe fbdb 	bl	8011ed0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 801371a:	6878      	ldr	r0, [r7, #4]
 801371c:	f000 f9dc 	bl	8013ad8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi6ELi9EE3runERSE_>
  }
 8013720:	bf00      	nop
 8013722:	3708      	adds	r7, #8
 8013724:	46bd      	mov	sp, r7
 8013726:	bd80      	pop	{r7, pc}

08013728 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8013728:	b580      	push	{r7, lr}
 801372a:	b082      	sub	sp, #8
 801372c:	af00      	add	r7, sp, #0
 801372e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013730:	2201      	movs	r2, #1
 8013732:	2101      	movs	r1, #1
 8013734:	6878      	ldr	r0, [r7, #4]
 8013736:	f7ff f874 	bl	8012822 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 801373a:	6878      	ldr	r0, [r7, #4]
 801373c:	f000 f9dc 	bl	8013af8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSC_>
  }
 8013740:	bf00      	nop
 8013742:	3708      	adds	r7, #8
 8013744:	46bd      	mov	sp, r7
 8013746:	bd80      	pop	{r7, pc}

08013748 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8013748:	b580      	push	{r7, lr}
 801374a:	b082      	sub	sp, #8
 801374c:	af00      	add	r7, sp, #0
 801374e:	6078      	str	r0, [r7, #4]
 8013750:	6878      	ldr	r0, [r7, #4]
 8013752:	f7f2 fb69 	bl	8005e28 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8013756:	4603      	mov	r3, r0
 8013758:	4618      	mov	r0, r3
 801375a:	f7f1 fe4c 	bl	80053f6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 801375e:	4603      	mov	r3, r0
 8013760:	4618      	mov	r0, r3
 8013762:	3708      	adds	r7, #8
 8013764:	46bd      	mov	sp, r7
 8013766:	bd80      	pop	{r7, pc}

08013768 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4sizeEv>:
  inline Index size() const EIGEN_NOEXCEPT { return rows() * cols(); }
 8013768:	b590      	push	{r4, r7, lr}
 801376a:	b083      	sub	sp, #12
 801376c:	af00      	add	r7, sp, #0
 801376e:	6078      	str	r0, [r7, #4]
 8013770:	6878      	ldr	r0, [r7, #4]
 8013772:	f7ff ffe9 	bl	8013748 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8013776:	4604      	mov	r4, r0
 8013778:	6878      	ldr	r0, [r7, #4]
 801377a:	f000 f807 	bl	801378c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 801377e:	4603      	mov	r3, r0
 8013780:	fb04 f303 	mul.w	r3, r4, r3
 8013784:	4618      	mov	r0, r3
 8013786:	370c      	adds	r7, #12
 8013788:	46bd      	mov	sp, r7
 801378a:	bd90      	pop	{r4, r7, pc}

0801378c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 801378c:	b580      	push	{r7, lr}
 801378e:	b082      	sub	sp, #8
 8013790:	af00      	add	r7, sp, #0
 8013792:	6078      	str	r0, [r7, #4]
 8013794:	6878      	ldr	r0, [r7, #4]
 8013796:	f7f2 fb47 	bl	8005e28 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 801379a:	4603      	mov	r3, r0
 801379c:	4618      	mov	r0, r3
 801379e:	f7f1 fe1f 	bl	80053e0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80137a2:	4603      	mov	r3, r0
 80137a4:	4618      	mov	r0, r3
 80137a6:	3708      	adds	r7, #8
 80137a8:	46bd      	mov	sp, r7
 80137aa:	bd80      	pop	{r7, pc}

080137ac <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>:
    inline Index innerStride() const EIGEN_NOEXCEPT { return 1; }
 80137ac:	b480      	push	{r7}
 80137ae:	b083      	sub	sp, #12
 80137b0:	af00      	add	r7, sp, #0
 80137b2:	6078      	str	r0, [r7, #4]
 80137b4:	2301      	movs	r3, #1
 80137b6:	4618      	mov	r0, r3
 80137b8:	370c      	adds	r7, #12
 80137ba:	46bd      	mov	sp, r7
 80137bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137c0:	4770      	bx	lr

080137c2 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80137c2:	b480      	push	{r7}
 80137c4:	b083      	sub	sp, #12
 80137c6:	af00      	add	r7, sp, #0
 80137c8:	6078      	str	r0, [r7, #4]
    }
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	4618      	mov	r0, r3
 80137ce:	370c      	adds	r7, #12
 80137d0:	46bd      	mov	sp, r7
 80137d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137d6:	4770      	bx	lr

080137d8 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 80137d8:	b480      	push	{r7}
 80137da:	b083      	sub	sp, #12
 80137dc:	af00      	add	r7, sp, #0
 80137de:	6078      	str	r0, [r7, #4]
 80137e0:	6039      	str	r1, [r7, #0]
    {}
 80137e2:	bf00      	nop
 80137e4:	370c      	adds	r7, #12
 80137e6:	46bd      	mov	sp, r7
 80137e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ec:	4770      	bx	lr

080137ee <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80137ee:	b480      	push	{r7}
 80137f0:	b083      	sub	sp, #12
 80137f2:	af00      	add	r7, sp, #0
 80137f4:	6078      	str	r0, [r7, #4]
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	4618      	mov	r0, r3
 80137fa:	370c      	adds	r7, #12
 80137fc:	46bd      	mov	sp, r7
 80137fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013802:	4770      	bx	lr

08013804 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4DataC1ERKSJ_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8013804:	b590      	push	{r4, r7, lr}
 8013806:	b083      	sub	sp, #12
 8013808:	af00      	add	r7, sp, #0
 801380a:	6078      	str	r0, [r7, #4]
 801380c:	6039      	str	r1, [r7, #0]
 801380e:	687c      	ldr	r4, [r7, #4]
 8013810:	6838      	ldr	r0, [r7, #0]
 8013812:	f000 f981 	bl	8013b18 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE7functorEv>
 8013816:	4603      	mov	r3, r0
 8013818:	4619      	mov	r1, r3
 801381a:	4620      	mov	r0, r4
 801381c:	f7f1 ff54 	bl	80056c8 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	1d1c      	adds	r4, r3, #4
 8013824:	6838      	ldr	r0, [r7, #0]
 8013826:	f000 f983 	bl	8013b30 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE3lhsEv>
 801382a:	4603      	mov	r3, r0
 801382c:	4619      	mov	r1, r3
 801382e:	4620      	mov	r0, r4
 8013830:	f7fb fa91 	bl	800ed56 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	f103 040c 	add.w	r4, r3, #12
 801383a:	6838      	ldr	r0, [r7, #0]
 801383c:	f000 f983 	bl	8013b46 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE3rhsEv>
 8013840:	4603      	mov	r3, r0
 8013842:	4619      	mov	r1, r3
 8013844:	4620      	mov	r0, r4
 8013846:	f000 f98a 	bl	8013b5e <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERS9_>
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	4618      	mov	r0, r3
 801384e:	370c      	adds	r7, #12
 8013850:	46bd      	mov	sp, r7
 8013852:	bd90      	pop	{r4, r7, pc}

08013854 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8013854:	b580      	push	{r7, lr}
 8013856:	b084      	sub	sp, #16
 8013858:	af00      	add	r7, sp, #0
 801385a:	60f8      	str	r0, [r7, #12]
 801385c:	60b9      	str	r1, [r7, #8]
 801385e:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	68ba      	ldr	r2, [r7, #8]
 8013864:	6879      	ldr	r1, [r7, #4]
 8013866:	4618      	mov	r0, r3
 8013868:	f000 f988 	bl	8013b7c <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE5coeffEii>
 801386c:	eef0 7a40 	vmov.f32	s15, s0
 8013870:	eeb0 0a67 	vmov.f32	s0, s15
 8013874:	3710      	adds	r7, #16
 8013876:	46bd      	mov	sp, r7
 8013878:	bd80      	pop	{r7, pc}

0801387a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 801387a:	b580      	push	{r7, lr}
 801387c:	b082      	sub	sp, #8
 801387e:	af00      	add	r7, sp, #0
 8013880:	6078      	str	r0, [r7, #4]
 8013882:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8013884:	2201      	movs	r2, #1
 8013886:	2100      	movs	r1, #0
 8013888:	6878      	ldr	r0, [r7, #4]
 801388a:	f7ff ffe3 	bl	8013854 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 801388e:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013892:	eeb0 0a67 	vmov.f32	s0, s15
 8013896:	3708      	adds	r7, #8
 8013898:	46bd      	mov	sp, r7
 801389a:	bd80      	pop	{r7, pc}

0801389c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 801389c:	b580      	push	{r7, lr}
 801389e:	b082      	sub	sp, #8
 80138a0:	af00      	add	r7, sp, #0
 80138a2:	6078      	str	r0, [r7, #4]
 80138a4:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 80138a6:	2202      	movs	r2, #2
 80138a8:	2100      	movs	r1, #0
 80138aa:	6878      	ldr	r0, [r7, #4]
 80138ac:	f7ff ffd2 	bl	8013854 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 80138b0:	eef0 7a40 	vmov.f32	s15, s0
  }
 80138b4:	eeb0 0a67 	vmov.f32	s0, s15
 80138b8:	3708      	adds	r7, #8
 80138ba:	46bd      	mov	sp, r7
 80138bc:	bd80      	pop	{r7, pc}

080138be <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>:
  evaluator()
 80138be:	b580      	push	{r7, lr}
 80138c0:	b082      	sub	sp, #8
 80138c2:	af00      	add	r7, sp, #0
 80138c4:	6078      	str	r0, [r7, #4]
    : m_d(0,OuterStrideAtCompileTime)
 80138c6:	6878      	ldr	r0, [r7, #4]
 80138c8:	f7f7 fd37 	bl	800b33a <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	2200      	movs	r2, #0
 80138d0:	2100      	movs	r1, #0
 80138d2:	4618      	mov	r0, r3
 80138d4:	f7f3 fcbd 	bl	8007252 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	4618      	mov	r0, r3
 80138dc:	3708      	adds	r7, #8
 80138de:	46bd      	mov	sp, r7
 80138e0:	bd80      	pop	{r7, pc}

080138e2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>:
    EIGEN_STRONG_INLINE void _init2(Index rows, Index cols, typename internal::enable_if<Base::SizeAtCompileTime!=2,T0>::type* = 0)
 80138e2:	b580      	push	{r7, lr}
 80138e4:	b086      	sub	sp, #24
 80138e6:	af00      	add	r7, sp, #0
 80138e8:	60f8      	str	r0, [r7, #12]
 80138ea:	60b9      	str	r1, [r7, #8]
 80138ec:	607a      	str	r2, [r7, #4]
 80138ee:	603b      	str	r3, [r7, #0]
      const bool t0_is_integer_alike = internal::is_valid_index_type<T0>::value;
 80138f0:	2301      	movs	r3, #1
 80138f2:	75fb      	strb	r3, [r7, #23]
      const bool t1_is_integer_alike = internal::is_valid_index_type<T1>::value;
 80138f4:	2301      	movs	r3, #1
 80138f6:	75bb      	strb	r3, [r7, #22]
      resize(rows,cols);
 80138f8:	687a      	ldr	r2, [r7, #4]
 80138fa:	68b9      	ldr	r1, [r7, #8]
 80138fc:	68f8      	ldr	r0, [r7, #12]
 80138fe:	f7f9 fef9 	bl	800d6f4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>
    }
 8013902:	bf00      	nop
 8013904:	3718      	adds	r7, #24
 8013906:	46bd      	mov	sp, r7
 8013908:	bd80      	pop	{r7, pc}

0801390a <_ZNK5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 801390a:	b580      	push	{r7, lr}
 801390c:	b082      	sub	sp, #8
 801390e:	af00      	add	r7, sp, #0
 8013910:	6078      	str	r0, [r7, #4]
 8013912:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 8013914:	6838      	ldr	r0, [r7, #0]
 8013916:	f7f2 fae5 	bl	8005ee4 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE7derivedEv>
 801391a:	4603      	mov	r3, r0
 801391c:	4619      	mov	r1, r3
 801391e:	6878      	ldr	r0, [r7, #4]
 8013920:	f000 f974 	bl	8013c0c <_ZN5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERS6_>
}
 8013924:	6878      	ldr	r0, [r7, #4]
 8013926:	3708      	adds	r7, #8
 8013928:	46bd      	mov	sp, r7
 801392a:	bd80      	pop	{r7, pc}

0801392c <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEE12cwiseProductINS1_IS4_EEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 801392c:	b5b0      	push	{r4, r5, r7, lr}
 801392e:	b086      	sub	sp, #24
 8013930:	af00      	add	r7, sp, #0
 8013932:	60f8      	str	r0, [r7, #12]
 8013934:	60b9      	str	r1, [r7, #8]
 8013936:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 8013938:	68b8      	ldr	r0, [r7, #8]
 801393a:	f000 f97a 	bl	8013c32 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEE7derivedEv>
 801393e:	4604      	mov	r4, r0
 8013940:	6878      	ldr	r0, [r7, #4]
 8013942:	f7f2 fa05 	bl	8005d50 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8013946:	4605      	mov	r5, r0
 8013948:	f107 0314 	add.w	r3, r7, #20
 801394c:	4618      	mov	r0, r3
 801394e:	f7f1 fe31 	bl	80055b4 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 8013952:	f107 0314 	add.w	r3, r7, #20
 8013956:	462a      	mov	r2, r5
 8013958:	4621      	mov	r1, r4
 801395a:	68f8      	ldr	r0, [r7, #12]
 801395c:	f000 f9a6 	bl	8013cac <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_>
}
 8013960:	68f8      	ldr	r0, [r7, #12]
 8013962:	3718      	adds	r7, #24
 8013964:	46bd      	mov	sp, r7
 8013966:	bdb0      	pop	{r4, r5, r7, pc}

08013968 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8013968:	b580      	push	{r7, lr}
 801396a:	b082      	sub	sp, #8
 801396c:	af00      	add	r7, sp, #0
 801396e:	6078      	str	r0, [r7, #4]
 8013970:	6878      	ldr	r0, [r7, #4]
 8013972:	f000 f9eb 	bl	8013d4c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 8013976:	4603      	mov	r3, r0
 8013978:	4618      	mov	r0, r3
 801397a:	f000 f9f2 	bl	8013d62 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE4rowsEv>
 801397e:	4603      	mov	r3, r0
 8013980:	4618      	mov	r0, r3
 8013982:	3708      	adds	r7, #8
 8013984:	46bd      	mov	sp, r7
 8013986:	bd80      	pop	{r7, pc}

08013988 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE3sumEv>:
DenseBase<Derived>::sum() const
 8013988:	b590      	push	{r4, r7, lr}
 801398a:	b085      	sub	sp, #20
 801398c:	af00      	add	r7, sp, #0
 801398e:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 8013990:	6878      	ldr	r0, [r7, #4]
 8013992:	f000 f9db 	bl	8013d4c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 8013996:	4604      	mov	r4, r0
 8013998:	f107 030c 	add.w	r3, r7, #12
 801399c:	4618      	mov	r0, r3
 801399e:	f7f2 f900 	bl	8005ba2 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 80139a2:	f107 030c 	add.w	r3, r7, #12
 80139a6:	4619      	mov	r1, r3
 80139a8:	4620      	mov	r0, r4
 80139aa:	f000 fa83 	bl	8013eb4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 80139ae:	eef0 7a40 	vmov.f32	s15, s0
 80139b2:	bf00      	nop
}
 80139b4:	eeb0 0a67 	vmov.f32	s0, s15
 80139b8:	3714      	adds	r7, #20
 80139ba:	46bd      	mov	sp, r7
 80139bc:	bd90      	pop	{r4, r7, pc}

080139be <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfEC1ERKS6_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 80139be:	b590      	push	{r4, r7, lr}
 80139c0:	b083      	sub	sp, #12
 80139c2:	af00      	add	r7, sp, #0
 80139c4:	6078      	str	r0, [r7, #4]
 80139c6:	6039      	str	r1, [r7, #0]
 80139c8:	6878      	ldr	r0, [r7, #4]
 80139ca:	f000 fac5 	bl	8013f58 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 80139ce:	687c      	ldr	r4, [r7, #4]
 80139d0:	6838      	ldr	r0, [r7, #0]
 80139d2:	f000 fab5 	bl	8013f40 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 80139d6:	4603      	mov	r3, r0
 80139d8:	4619      	mov	r1, r3
 80139da:	4620      	mov	r0, r4
 80139dc:	f000 fac7 	bl	8013f6e <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS4_>
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	4618      	mov	r0, r3
 80139e4:	370c      	adds	r7, #12
 80139e6:	46bd      	mov	sp, r7
 80139e8:	bd90      	pop	{r4, r7, pc}

080139ea <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 80139ea:	b590      	push	{r4, r7, lr}
 80139ec:	b085      	sub	sp, #20
 80139ee:	af00      	add	r7, sp, #0
 80139f0:	60f8      	str	r0, [r7, #12]
 80139f2:	60b9      	str	r1, [r7, #8]
 80139f4:	607a      	str	r2, [r7, #4]
      return m_d.data[row * m_d.outerStride() + col];
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	681c      	ldr	r4, [r3, #0]
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	4618      	mov	r0, r3
 80139fe:	f7f3 fb5d 	bl	80070bc <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>
 8013a02:	4602      	mov	r2, r0
 8013a04:	68bb      	ldr	r3, [r7, #8]
 8013a06:	fb03 f202 	mul.w	r2, r3, r2
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	4413      	add	r3, r2
 8013a0e:	009b      	lsls	r3, r3, #2
 8013a10:	4423      	add	r3, r4
  }
 8013a12:	4618      	mov	r0, r3
 8013a14:	3714      	adds	r7, #20
 8013a16:	46bd      	mov	sp, r7
 8013a18:	bd90      	pop	{r4, r7, pc}

08013a1a <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ENS_5DenseEEC1ERS3_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 8013a1a:	b580      	push	{r7, lr}
 8013a1c:	b084      	sub	sp, #16
 8013a1e:	af00      	add	r7, sp, #0
 8013a20:	60f8      	str	r0, [r7, #12]
 8013a22:	60b9      	str	r1, [r7, #8]
 8013a24:	607a      	str	r2, [r7, #4]
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	687a      	ldr	r2, [r7, #4]
 8013a2a:	68b9      	ldr	r1, [r7, #8]
 8013a2c:	4618      	mov	r0, r3
 8013a2e:	f000 faad 	bl	8013f8c <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EEC1ERS4_i>
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	4618      	mov	r0, r3
 8013a36:	3710      	adds	r7, #16
 8013a38:	46bd      	mov	sp, r7
 8013a3a:	bd80      	pop	{r7, pc}

08013a3c <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8013a3c:	b480      	push	{r7}
 8013a3e:	b083      	sub	sp, #12
 8013a40:	af00      	add	r7, sp, #0
 8013a42:	6078      	str	r0, [r7, #4]
    }
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	4618      	mov	r0, r3
 8013a48:	370c      	adds	r7, #12
 8013a4a:	46bd      	mov	sp, r7
 8013a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a50:	4770      	bx	lr

08013a52 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8013a52:	b580      	push	{r7, lr}
 8013a54:	b082      	sub	sp, #8
 8013a56:	af00      	add	r7, sp, #0
 8013a58:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	4618      	mov	r0, r3
 8013a5e:	f7f8 fac6 	bl	800bfee <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>
 8013a62:	4603      	mov	r3, r0
    }
 8013a64:	4618      	mov	r0, r3
 8013a66:	3708      	adds	r7, #8
 8013a68:	46bd      	mov	sp, r7
 8013a6a:	bd80      	pop	{r7, pc}

08013a6c <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 8013a6c:	b580      	push	{r7, lr}
 8013a6e:	b082      	sub	sp, #8
 8013a70:	af00      	add	r7, sp, #0
 8013a72:	6078      	str	r0, [r7, #4]
 8013a74:	6039      	str	r1, [r7, #0]
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	6839      	ldr	r1, [r7, #0]
 8013a7a:	4618      	mov	r0, r3
 8013a7c:	f000 fab7 	bl	8013fee <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1ERKSI_>
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	4618      	mov	r0, r3
 8013a84:	3708      	adds	r7, #8
 8013a86:	46bd      	mov	sp, r7
 8013a88:	bd80      	pop	{r7, pc}

08013a8a <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8013a8a:	b480      	push	{r7}
 8013a8c:	b083      	sub	sp, #12
 8013a8e:	af00      	add	r7, sp, #0
 8013a90:	6078      	str	r0, [r7, #4]
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	4618      	mov	r0, r3
 8013a96:	370c      	adds	r7, #12
 8013a98:	46bd      	mov	sp, r7
 8013a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a9e:	4770      	bx	lr

08013aa0 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>:
 8013aa0:	b480      	push	{r7}
 8013aa2:	b083      	sub	sp, #12
 8013aa4:	af00      	add	r7, sp, #0
 8013aa6:	6078      	str	r0, [r7, #4]
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	4618      	mov	r0, r3
 8013aac:	370c      	adds	r7, #12
 8013aae:	46bd      	mov	sp, r7
 8013ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ab4:	4770      	bx	lr

08013ab6 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 8013ab6:	b580      	push	{r7, lr}
 8013ab8:	b084      	sub	sp, #16
 8013aba:	af00      	add	r7, sp, #0
 8013abc:	60f8      	str	r0, [r7, #12]
 8013abe:	60b9      	str	r1, [r7, #8]
 8013ac0:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 8013ac2:	68b9      	ldr	r1, [r7, #8]
 8013ac4:	68f8      	ldr	r0, [r7, #12]
 8013ac6:	f000 faa1 	bl	801400c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 8013aca:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013ace:	eeb0 0a67 	vmov.f32	s0, s15
 8013ad2:	3710      	adds	r7, #16
 8013ad4:	46bd      	mov	sp, r7
 8013ad6:	bd80      	pop	{r7, pc}

08013ad8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi6ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8013ad8:	b580      	push	{r7, lr}
 8013ada:	b082      	sub	sp, #8
 8013adc:	af00      	add	r7, sp, #0
 8013ade:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013ae0:	2200      	movs	r2, #0
 8013ae2:	2102      	movs	r1, #2
 8013ae4:	6878      	ldr	r0, [r7, #4]
 8013ae6:	f7fe f9f3 	bl	8011ed0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8013aea:	6878      	ldr	r0, [r7, #4]
 8013aec:	f000 fa9f 	bl	801402e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi7ELi9EE3runERSE_>
  }
 8013af0:	bf00      	nop
 8013af2:	3708      	adds	r7, #8
 8013af4:	46bd      	mov	sp, r7
 8013af6:	bd80      	pop	{r7, pc}

08013af8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8013af8:	b580      	push	{r7, lr}
 8013afa:	b082      	sub	sp, #8
 8013afc:	af00      	add	r7, sp, #0
 8013afe:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013b00:	2202      	movs	r2, #2
 8013b02:	2101      	movs	r1, #1
 8013b04:	6878      	ldr	r0, [r7, #4]
 8013b06:	f7fe fe8c 	bl	8012822 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8013b0a:	6878      	ldr	r0, [r7, #4]
 8013b0c:	f000 fa9f 	bl	801404e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSC_>
  }
 8013b10:	bf00      	nop
 8013b12:	3708      	adds	r7, #8
 8013b14:	46bd      	mov	sp, r7
 8013b16:	bd80      	pop	{r7, pc}

08013b18 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8013b18:	b480      	push	{r7}
 8013b1a:	b083      	sub	sp, #12
 8013b1c:	af00      	add	r7, sp, #0
 8013b1e:	6078      	str	r0, [r7, #4]
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	3330      	adds	r3, #48	; 0x30
 8013b24:	4618      	mov	r0, r3
 8013b26:	370c      	adds	r7, #12
 8013b28:	46bd      	mov	sp, r7
 8013b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b2e:	4770      	bx	lr

08013b30 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8013b30:	b480      	push	{r7}
 8013b32:	b083      	sub	sp, #12
 8013b34:	af00      	add	r7, sp, #0
 8013b36:	6078      	str	r0, [r7, #4]
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	4618      	mov	r0, r3
 8013b3c:	370c      	adds	r7, #12
 8013b3e:	46bd      	mov	sp, r7
 8013b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b44:	4770      	bx	lr

08013b46 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8013b46:	b480      	push	{r7}
 8013b48:	b083      	sub	sp, #12
 8013b4a:	af00      	add	r7, sp, #0
 8013b4c:	6078      	str	r0, [r7, #4]
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	3318      	adds	r3, #24
 8013b52:	4618      	mov	r0, r3
 8013b54:	370c      	adds	r7, #12
 8013b56:	46bd      	mov	sp, r7
 8013b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b5c:	4770      	bx	lr

08013b5e <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERS9_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8013b5e:	b580      	push	{r7, lr}
 8013b60:	b082      	sub	sp, #8
 8013b62:	af00      	add	r7, sp, #0
 8013b64:	6078      	str	r0, [r7, #4]
 8013b66:	6039      	str	r1, [r7, #0]
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	6839      	ldr	r1, [r7, #0]
 8013b6c:	4618      	mov	r0, r3
 8013b6e:	f000 fa7e 	bl	801406e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERKS8_>
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	4618      	mov	r0, r3
 8013b76:	3708      	adds	r7, #8
 8013b78:	46bd      	mov	sp, r7
 8013b7a:	bd80      	pop	{r7, pc}

08013b7c <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8013b7c:	b590      	push	{r4, r7, lr}
 8013b7e:	b087      	sub	sp, #28
 8013b80:	af00      	add	r7, sp, #0
 8013b82:	60f8      	str	r0, [r7, #12]
 8013b84:	60b9      	str	r1, [r7, #8]
 8013b86:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8013b88:	68fb      	ldr	r3, [r7, #12]
 8013b8a:	4618      	mov	r0, r3
 8013b8c:	f000 fa7e 	bl	801408c <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4Data4funcEv>
 8013b90:	4604      	mov	r4, r0
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	3304      	adds	r3, #4
 8013b96:	687a      	ldr	r2, [r7, #4]
 8013b98:	68b9      	ldr	r1, [r7, #8]
 8013b9a:	4618      	mov	r0, r3
 8013b9c:	f7fb fdf6 	bl	800f78c <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 8013ba0:	eef0 7a40 	vmov.f32	s15, s0
 8013ba4:	edc7 7a04 	vstr	s15, [r7, #16]
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	330c      	adds	r3, #12
 8013bac:	687a      	ldr	r2, [r7, #4]
 8013bae:	68b9      	ldr	r1, [r7, #8]
 8013bb0:	4618      	mov	r0, r3
 8013bb2:	f000 fa76 	bl	80140a2 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>
 8013bb6:	eef0 7a40 	vmov.f32	s15, s0
 8013bba:	edc7 7a05 	vstr	s15, [r7, #20]
 8013bbe:	f107 0214 	add.w	r2, r7, #20
 8013bc2:	f107 0310 	add.w	r3, r7, #16
 8013bc6:	4619      	mov	r1, r3
 8013bc8:	4620      	mov	r0, r4
 8013bca:	f7fb fc23 	bl	800f414 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 8013bce:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013bd2:	eeb0 0a67 	vmov.f32	s0, s15
 8013bd6:	371c      	adds	r7, #28
 8013bd8:	46bd      	mov	sp, r7
 8013bda:	bd90      	pop	{r4, r7, pc}

08013bdc <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>:
 8013bdc:	b580      	push	{r7, lr}
 8013bde:	b082      	sub	sp, #8
 8013be0:	af00      	add	r7, sp, #0
 8013be2:	6078      	str	r0, [r7, #4]
 8013be4:	6878      	ldr	r0, [r7, #4]
 8013be6:	f000 fa7d 	bl	80140e4 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	4618      	mov	r0, r3
 8013bee:	3708      	adds	r7, #8
 8013bf0:	46bd      	mov	sp, r7
 8013bf2:	bd80      	pop	{r7, pc}

08013bf4 <_ZN5Eigen13TransposeImplIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 8013bf4:	b580      	push	{r7, lr}
 8013bf6:	b082      	sub	sp, #8
 8013bf8:	af00      	add	r7, sp, #0
 8013bfa:	6078      	str	r0, [r7, #4]
 8013bfc:	6878      	ldr	r0, [r7, #4]
 8013bfe:	f7ff ffed 	bl	8013bdc <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	4618      	mov	r0, r3
 8013c06:	3708      	adds	r7, #8
 8013c08:	46bd      	mov	sp, r7
 8013c0a:	bd80      	pop	{r7, pc}

08013c0c <_ZN5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERS6_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 8013c0c:	b580      	push	{r7, lr}
 8013c0e:	b082      	sub	sp, #8
 8013c10:	af00      	add	r7, sp, #0
 8013c12:	6078      	str	r0, [r7, #4]
 8013c14:	6039      	str	r1, [r7, #0]
 8013c16:	6878      	ldr	r0, [r7, #4]
 8013c18:	f7ff ffec 	bl	8013bf4 <_ZN5Eigen13TransposeImplIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_5DenseEEC1Ev>
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	683a      	ldr	r2, [r7, #0]
 8013c20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013c24:	e883 0003 	stmia.w	r3, {r0, r1}
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	4618      	mov	r0, r3
 8013c2c:	3708      	adds	r7, #8
 8013c2e:	46bd      	mov	sp, r7
 8013c30:	bd80      	pop	{r7, pc}

08013c32 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8013c32:	b480      	push	{r7}
 8013c34:	b083      	sub	sp, #12
 8013c36:	af00      	add	r7, sp, #0
 8013c38:	6078      	str	r0, [r7, #4]
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	4618      	mov	r0, r3
 8013c3e:	370c      	adds	r7, #12
 8013c40:	46bd      	mov	sp, r7
 8013c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c46:	4770      	bx	lr

08013c48 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>:
 8013c48:	b580      	push	{r7, lr}
 8013c4a:	b082      	sub	sp, #8
 8013c4c:	af00      	add	r7, sp, #0
 8013c4e:	6078      	str	r0, [r7, #4]
 8013c50:	6878      	ldr	r0, [r7, #4]
 8013c52:	f000 fa52 	bl	80140fa <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	4618      	mov	r0, r3
 8013c5a:	3708      	adds	r7, #8
 8013c5c:	46bd      	mov	sp, r7
 8013c5e:	bd80      	pop	{r7, pc}

08013c60 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8013c60:	b580      	push	{r7, lr}
 8013c62:	b082      	sub	sp, #8
 8013c64:	af00      	add	r7, sp, #0
 8013c66:	6078      	str	r0, [r7, #4]
 8013c68:	6878      	ldr	r0, [r7, #4]
 8013c6a:	f7ff ffed 	bl	8013c48 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	4618      	mov	r0, r3
 8013c72:	3708      	adds	r7, #8
 8013c74:	46bd      	mov	sp, r7
 8013c76:	bd80      	pop	{r7, pc}

08013c78 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 8013c78:	b580      	push	{r7, lr}
 8013c7a:	b082      	sub	sp, #8
 8013c7c:	af00      	add	r7, sp, #0
 8013c7e:	6078      	str	r0, [r7, #4]
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	4618      	mov	r0, r3
 8013c84:	f7f2 f95d 	bl	8005f42 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4colsEv>
 8013c88:	4603      	mov	r3, r0
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	3708      	adds	r7, #8
 8013c8e:	46bd      	mov	sp, r7
 8013c90:	bd80      	pop	{r7, pc}

08013c92 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 8013c92:	b580      	push	{r7, lr}
 8013c94:	b082      	sub	sp, #8
 8013c96:	af00      	add	r7, sp, #0
 8013c98:	6078      	str	r0, [r7, #4]
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	f7f3 f8c2 	bl	8006e26 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4rowsEv>
 8013ca2:	4603      	mov	r3, r0
 8013ca4:	4618      	mov	r0, r3
 8013ca6:	3708      	adds	r7, #8
 8013ca8:	46bd      	mov	sp, r7
 8013caa:	bd80      	pop	{r7, pc}

08013cac <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8013cac:	b590      	push	{r4, r7, lr}
 8013cae:	b085      	sub	sp, #20
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	60f8      	str	r0, [r7, #12]
 8013cb4:	60b9      	str	r1, [r7, #8]
 8013cb6:	607a      	str	r2, [r7, #4]
 8013cb8:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8013cba:	68f8      	ldr	r0, [r7, #12]
 8013cbc:	f7ff ffd0 	bl	8013c60 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EENS_5DenseEEC1Ev>
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	68ba      	ldr	r2, [r7, #8]
 8013cc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013cc8:	e883 0003 	stmia.w	r3, {r0, r1}
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	3308      	adds	r3, #8
 8013cd0:	687a      	ldr	r2, [r7, #4]
 8013cd2:	6812      	ldr	r2, [r2, #0]
 8013cd4:	601a      	str	r2, [r3, #0]
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	330c      	adds	r3, #12
 8013cda:	6839      	ldr	r1, [r7, #0]
 8013cdc:	4618      	mov	r0, r3
 8013cde:	f7f1 fcf3 	bl	80056c8 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8013ce2:	68b8      	ldr	r0, [r7, #8]
 8013ce4:	f7ff ffc8 	bl	8013c78 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4rowsEv>
 8013ce8:	4604      	mov	r4, r0
 8013cea:	6878      	ldr	r0, [r7, #4]
 8013cec:	f7f2 f85f 	bl	8005dae <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8013cf0:	4603      	mov	r3, r0
 8013cf2:	429c      	cmp	r4, r3
 8013cf4:	d109      	bne.n	8013d0a <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x5e>
 8013cf6:	68b8      	ldr	r0, [r7, #8]
 8013cf8:	f7ff ffcb 	bl	8013c92 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4colsEv>
 8013cfc:	4604      	mov	r4, r0
 8013cfe:	6878      	ldr	r0, [r7, #4]
 8013d00:	f7f3 f89f 	bl	8006e42 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8013d04:	4603      	mov	r3, r0
 8013d06:	429c      	cmp	r4, r3
 8013d08:	d005      	beq.n	8013d16 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x6a>
 8013d0a:	4b05      	ldr	r3, [pc, #20]	; (8013d20 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x74>)
 8013d0c:	4a05      	ldr	r2, [pc, #20]	; (8013d24 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x78>)
 8013d0e:	2174      	movs	r1, #116	; 0x74
 8013d10:	4805      	ldr	r0, [pc, #20]	; (8013d28 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x7c>)
 8013d12:	f00a f8c7 	bl	801dea4 <__assert_func>
    }
 8013d16:	68fb      	ldr	r3, [r7, #12]
 8013d18:	4618      	mov	r0, r3
 8013d1a:	3714      	adds	r7, #20
 8013d1c:	46bd      	mov	sp, r7
 8013d1e:	bd90      	pop	{r4, r7, pc}
 8013d20:	0801fd0c 	.word	0x0801fd0c
 8013d24:	08029130 	.word	0x08029130
 8013d28:	0801ff70 	.word	0x0801ff70

08013d2c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8013d2c:	b580      	push	{r7, lr}
 8013d2e:	b082      	sub	sp, #8
 8013d30:	af00      	add	r7, sp, #0
 8013d32:	6078      	str	r0, [r7, #4]
 8013d34:	6878      	ldr	r0, [r7, #4]
 8013d36:	f000 f809 	bl	8013d4c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 8013d3a:	4603      	mov	r3, r0
 8013d3c:	4618      	mov	r0, r3
 8013d3e:	f000 f9e7 	bl	8014110 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE4colsEv>
 8013d42:	4603      	mov	r3, r0
 8013d44:	4618      	mov	r0, r3
 8013d46:	3708      	adds	r7, #8
 8013d48:	46bd      	mov	sp, r7
 8013d4a:	bd80      	pop	{r7, pc}

08013d4c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8013d4c:	b480      	push	{r7}
 8013d4e:	b083      	sub	sp, #12
 8013d50:	af00      	add	r7, sp, #0
 8013d52:	6078      	str	r0, [r7, #4]
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	4618      	mov	r0, r3
 8013d58:	370c      	adds	r7, #12
 8013d5a:	46bd      	mov	sp, r7
 8013d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d60:	4770      	bx	lr

08013d62 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8013d62:	b580      	push	{r7, lr}
 8013d64:	b082      	sub	sp, #8
 8013d66:	af00      	add	r7, sp, #0
 8013d68:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	4618      	mov	r0, r3
 8013d6e:	f7ff ff83 	bl	8013c78 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4rowsEv>
 8013d72:	4603      	mov	r3, r0
    }
 8013d74:	4618      	mov	r0, r3
 8013d76:	3708      	adds	r7, #8
 8013d78:	46bd      	mov	sp, r7
 8013d7a:	bd80      	pop	{r7, pc}

08013d7c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEELi3ENS_10DenseShapeES7_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, Options>, ProductTag, LhsShape, RhsShape>
 8013d7c:	b580      	push	{r7, lr}
 8013d7e:	b082      	sub	sp, #8
 8013d80:	af00      	add	r7, sp, #0
 8013d82:	6078      	str	r0, [r7, #4]
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	4618      	mov	r0, r3
 8013d88:	f7fb fa2e 	bl	800f1e8 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	4618      	mov	r0, r3
 8013d90:	3708      	adds	r7, #8
 8013d92:	46bd      	mov	sp, r7
 8013d94:	bd80      	pop	{r7, pc}

08013d96 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8013d96:	b580      	push	{r7, lr}
 8013d98:	b082      	sub	sp, #8
 8013d9a:	af00      	add	r7, sp, #0
 8013d9c:	6078      	str	r0, [r7, #4]
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	4618      	mov	r0, r3
 8013da2:	f7ff ffeb 	bl	8013d7c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEELi3ENS_10DenseShapeES7_ffED1Ev>
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	4618      	mov	r0, r3
 8013daa:	3708      	adds	r7, #8
 8013dac:	46bd      	mov	sp, r7
 8013dae:	bd80      	pop	{r7, pc}

08013db0 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEED1Ev>:
struct evaluator<const T>
 8013db0:	b580      	push	{r7, lr}
 8013db2:	b082      	sub	sp, #8
 8013db4:	af00      	add	r7, sp, #0
 8013db6:	6078      	str	r0, [r7, #4]
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	4618      	mov	r0, r3
 8013dbc:	f7ff ffeb 	bl	8013d96 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEED1Ev>
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	4618      	mov	r0, r3
 8013dc4:	3708      	adds	r7, #8
 8013dc6:	46bd      	mov	sp, r7
 8013dc8:	bd80      	pop	{r7, pc}

08013dca <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 8013dca:	b580      	push	{r7, lr}
 8013dcc:	b082      	sub	sp, #8
 8013dce:	af00      	add	r7, sp, #0
 8013dd0:	6078      	str	r0, [r7, #4]
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	f7ff ffeb 	bl	8013db0 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEED1Ev>
 8013dda:	6878      	ldr	r0, [r7, #4]
 8013ddc:	f000 f9bf 	bl	801415e <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	4618      	mov	r0, r3
 8013de4:	3708      	adds	r7, #8
 8013de6:	46bd      	mov	sp, r7
 8013de8:	bd80      	pop	{r7, pc}

08013dea <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 8013dea:	b580      	push	{r7, lr}
 8013dec:	b082      	sub	sp, #8
 8013dee:	af00      	add	r7, sp, #0
 8013df0:	6078      	str	r0, [r7, #4]
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	4618      	mov	r0, r3
 8013df6:	f7ff ffe8 	bl	8013dca <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfED1Ev>
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	4618      	mov	r0, r3
 8013dfe:	3708      	adds	r7, #8
 8013e00:	46bd      	mov	sp, r7
 8013e02:	bd80      	pop	{r7, pc}

08013e04 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>:
struct evaluator<const T>
 8013e04:	b580      	push	{r7, lr}
 8013e06:	b082      	sub	sp, #8
 8013e08:	af00      	add	r7, sp, #0
 8013e0a:	6078      	str	r0, [r7, #4]
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	4618      	mov	r0, r3
 8013e10:	f7ff ffeb 	bl	8013dea <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	4618      	mov	r0, r3
 8013e18:	3708      	adds	r7, #8
 8013e1a:	46bd      	mov	sp, r7
 8013e1c:	bd80      	pop	{r7, pc}

08013e1e <_ZN5Eigen8internal9evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
 8013e1e:	b580      	push	{r7, lr}
 8013e20:	b082      	sub	sp, #8
 8013e22:	af00      	add	r7, sp, #0
 8013e24:	6078      	str	r0, [r7, #4]
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	4618      	mov	r0, r3
 8013e2a:	f7fb f9fa 	bl	800f222 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	4618      	mov	r0, r3
 8013e32:	3708      	adds	r7, #8
 8013e34:	46bd      	mov	sp, r7
 8013e36:	bd80      	pop	{r7, pc}

08013e38 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4DataD1Ev>:
  struct Data
 8013e38:	b580      	push	{r7, lr}
 8013e3a:	b082      	sub	sp, #8
 8013e3c:	af00      	add	r7, sp, #0
 8013e3e:	6078      	str	r0, [r7, #4]
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	3314      	adds	r3, #20
 8013e44:	4618      	mov	r0, r3
 8013e46:	f7ff ffea 	bl	8013e1e <_ZN5Eigen8internal9evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	3304      	adds	r3, #4
 8013e4e:	4618      	mov	r0, r3
 8013e50:	f7ff ffd8 	bl	8013e04 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	4618      	mov	r0, r3
 8013e58:	3708      	adds	r7, #8
 8013e5a:	46bd      	mov	sp, r7
 8013e5c:	bd80      	pop	{r7, pc}

08013e5e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8013e5e:	b580      	push	{r7, lr}
 8013e60:	b082      	sub	sp, #8
 8013e62:	af00      	add	r7, sp, #0
 8013e64:	6078      	str	r0, [r7, #4]
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	4618      	mov	r0, r3
 8013e6a:	f7ff ffe5 	bl	8013e38 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4DataD1Ev>
 8013e6e:	6878      	ldr	r0, [r7, #4]
 8013e70:	f000 f96a 	bl	8014148 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	4618      	mov	r0, r3
 8013e78:	3708      	adds	r7, #8
 8013e7a:	46bd      	mov	sp, r7
 8013e7c:	bd80      	pop	{r7, pc}

08013e7e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8013e7e:	b580      	push	{r7, lr}
 8013e80:	b082      	sub	sp, #8
 8013e82:	af00      	add	r7, sp, #0
 8013e84:	6078      	str	r0, [r7, #4]
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	4618      	mov	r0, r3
 8013e8a:	f7ff ffe8 	bl	8013e5e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffED1Ev>
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	4618      	mov	r0, r3
 8013e92:	3708      	adds	r7, #8
 8013e94:	46bd      	mov	sp, r7
 8013e96:	bd80      	pop	{r7, pc}

08013e98 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 8013e98:	b580      	push	{r7, lr}
 8013e9a:	b082      	sub	sp, #8
 8013e9c:	af00      	add	r7, sp, #0
 8013e9e:	6078      	str	r0, [r7, #4]
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	4618      	mov	r0, r3
 8013ea4:	f7ff ffeb 	bl	8013e7e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	4618      	mov	r0, r3
 8013eac:	3708      	adds	r7, #8
 8013eae:	46bd      	mov	sp, r7
 8013eb0:	bd80      	pop	{r7, pc}
	...

08013eb4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 8013eb4:	b580      	push	{r7, lr}
 8013eb6:	ed2d 8b02 	vpush	{d8}
 8013eba:	b088      	sub	sp, #32
 8013ebc:	af00      	add	r7, sp, #0
 8013ebe:	6078      	str	r0, [r7, #4]
 8013ec0:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 8013ec2:	6878      	ldr	r0, [r7, #4]
 8013ec4:	f7ff fd50 	bl	8013968 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE4rowsEv>
 8013ec8:	4603      	mov	r3, r0
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	dd05      	ble.n	8013eda <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 8013ece:	6878      	ldr	r0, [r7, #4]
 8013ed0:	f7ff ff2c 	bl	8013d2c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE4colsEv>
 8013ed4:	4603      	mov	r3, r0
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	dc06      	bgt.n	8013ee8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 8013eda:	4b16      	ldr	r3, [pc, #88]	; (8013f34 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 8013edc:	4a16      	ldr	r2, [pc, #88]	; (8013f38 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 8013ede:	f240 119b 	movw	r1, #411	; 0x19b
 8013ee2:	4816      	ldr	r0, [pc, #88]	; (8013f3c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 8013ee4:	f009 ffde 	bl	801dea4 <__assert_func>
 8013ee8:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8013eea:	6878      	ldr	r0, [r7, #4]
 8013eec:	f7ff ff2e 	bl	8013d4c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 8013ef0:	4602      	mov	r2, r0
 8013ef2:	f107 0308 	add.w	r3, r7, #8
 8013ef6:	4611      	mov	r1, r2
 8013ef8:	4618      	mov	r0, r3
 8013efa:	f000 f916 	bl	801412a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1ERKSG_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8013efe:	6878      	ldr	r0, [r7, #4]
 8013f00:	f7ff ff24 	bl	8013d4c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 8013f04:	4602      	mov	r2, r0
 8013f06:	f107 0308 	add.w	r3, r7, #8
 8013f0a:	6839      	ldr	r1, [r7, #0]
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	f000 f931 	bl	8014174 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi2EE3runISJ_EEfRKSK_RKS3_RKT_>
 8013f12:	eeb0 8a40 	vmov.f32	s16, s0
 8013f16:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8013f18:	f107 0308 	add.w	r3, r7, #8
 8013f1c:	4618      	mov	r0, r3
 8013f1e:	f7ff ffbb 	bl	8013e98 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8013f22:	eef0 7a48 	vmov.f32	s15, s16
}
 8013f26:	eeb0 0a67 	vmov.f32	s0, s15
 8013f2a:	3720      	adds	r7, #32
 8013f2c:	46bd      	mov	sp, r7
 8013f2e:	ecbd 8b02 	vpop	{d8}
 8013f32:	bd80      	pop	{r7, pc}
 8013f34:	08024d8c 	.word	0x08024d8c
 8013f38:	0802937c 	.word	0x0802937c
 8013f3c:	08024f98 	.word	0x08024f98

08013f40 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 8013f40:	b480      	push	{r7}
 8013f42:	b083      	sub	sp, #12
 8013f44:	af00      	add	r7, sp, #0
 8013f46:	6078      	str	r0, [r7, #4]
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	681b      	ldr	r3, [r3, #0]
 8013f4c:	4618      	mov	r0, r3
 8013f4e:	370c      	adds	r7, #12
 8013f50:	46bd      	mov	sp, r7
 8013f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f56:	4770      	bx	lr

08013f58 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8013f58:	b480      	push	{r7}
 8013f5a:	b083      	sub	sp, #12
 8013f5c:	af00      	add	r7, sp, #0
 8013f5e:	6078      	str	r0, [r7, #4]
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	4618      	mov	r0, r3
 8013f64:	370c      	adds	r7, #12
 8013f66:	46bd      	mov	sp, r7
 8013f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f6c:	4770      	bx	lr

08013f6e <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS4_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8013f6e:	b580      	push	{r7, lr}
 8013f70:	b082      	sub	sp, #8
 8013f72:	af00      	add	r7, sp, #0
 8013f74:	6078      	str	r0, [r7, #4]
 8013f76:	6039      	str	r1, [r7, #0]
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	6839      	ldr	r1, [r7, #0]
 8013f7c:	4618      	mov	r0, r3
 8013f7e:	f7fd fe47 	bl	8011c10 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	4618      	mov	r0, r3
 8013f86:	3708      	adds	r7, #8
 8013f88:	46bd      	mov	sp, r7
 8013f8a:	bd80      	pop	{r7, pc}

08013f8c <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 8013f8c:	b5b0      	push	{r4, r5, r7, lr}
 8013f8e:	b084      	sub	sp, #16
 8013f90:	af00      	add	r7, sp, #0
 8013f92:	60f8      	str	r0, [r7, #12]
 8013f94:	60b9      	str	r1, [r7, #8]
 8013f96:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8013f98:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8013f9a:	68bb      	ldr	r3, [r7, #8]
 8013f9c:	4618      	mov	r0, r3
 8013f9e:	f7fe fc93 	bl	80128c8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>
 8013fa2:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 8013fa4:	68b8      	ldr	r0, [r7, #8]
 8013fa6:	f7ff fc01 	bl	80137ac <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>
 8013faa:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	fb02 f303 	mul.w	r3, r2, r3
 8013fb2:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8013fb4:	18e9      	adds	r1, r5, r3
 8013fb6:	2301      	movs	r3, #1
 8013fb8:	2201      	movs	r2, #1
 8013fba:	4620      	mov	r0, r4
 8013fbc:	f000 f8f8 	bl	80141b0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii>
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	68ba      	ldr	r2, [r7, #8]
 8013fc4:	609a      	str	r2, [r3, #8]
 8013fc6:	68fb      	ldr	r3, [r7, #12]
 8013fc8:	330c      	adds	r3, #12
 8013fca:	2100      	movs	r1, #0
 8013fcc:	4618      	mov	r0, r3
 8013fce:	f7f9 fedd 	bl	800dd8c <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 8013fd2:	68fb      	ldr	r3, [r7, #12]
 8013fd4:	3310      	adds	r3, #16
 8013fd6:	6879      	ldr	r1, [r7, #4]
 8013fd8:	4618      	mov	r0, r3
 8013fda:	f7f9 fe63 	bl	800dca4 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 8013fde:	68f8      	ldr	r0, [r7, #12]
 8013fe0:	f000 f924 	bl	801422c <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE4initEv>
    }
 8013fe4:	68fb      	ldr	r3, [r7, #12]
 8013fe6:	4618      	mov	r0, r3
 8013fe8:	3710      	adds	r7, #16
 8013fea:	46bd      	mov	sp, r7
 8013fec:	bdb0      	pop	{r4, r5, r7, pc}

08013fee <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8013fee:	b580      	push	{r7, lr}
 8013ff0:	b082      	sub	sp, #8
 8013ff2:	af00      	add	r7, sp, #0
 8013ff4:	6078      	str	r0, [r7, #4]
 8013ff6:	6039      	str	r1, [r7, #0]
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	6839      	ldr	r1, [r7, #0]
 8013ffc:	4618      	mov	r0, r3
 8013ffe:	f000 f925 	bl	801424c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	4618      	mov	r0, r3
 8014006:	3708      	adds	r7, #8
 8014008:	46bd      	mov	sp, r7
 801400a:	bd80      	pop	{r7, pc}

0801400c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 801400c:	b580      	push	{r7, lr}
 801400e:	b082      	sub	sp, #8
 8014010:	af00      	add	r7, sp, #0
 8014012:	6078      	str	r0, [r7, #4]
 8014014:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8014016:	2200      	movs	r2, #0
 8014018:	2100      	movs	r1, #0
 801401a:	6878      	ldr	r0, [r7, #4]
 801401c:	f000 f928 	bl	8014270 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 8014020:	eef0 7a40 	vmov.f32	s15, s0
  }
 8014024:	eeb0 0a67 	vmov.f32	s0, s15
 8014028:	3708      	adds	r7, #8
 801402a:	46bd      	mov	sp, r7
 801402c:	bd80      	pop	{r7, pc}

0801402e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi7ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 801402e:	b580      	push	{r7, lr}
 8014030:	b082      	sub	sp, #8
 8014032:	af00      	add	r7, sp, #0
 8014034:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8014036:	2201      	movs	r2, #1
 8014038:	2102      	movs	r1, #2
 801403a:	6878      	ldr	r0, [r7, #4]
 801403c:	f7fd ff48 	bl	8011ed0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8014040:	6878      	ldr	r0, [r7, #4]
 8014042:	f000 f928 	bl	8014296 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi8ELi9EE3runERSE_>
  }
 8014046:	bf00      	nop
 8014048:	3708      	adds	r7, #8
 801404a:	46bd      	mov	sp, r7
 801404c:	bd80      	pop	{r7, pc}

0801404e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 801404e:	b580      	push	{r7, lr}
 8014050:	b082      	sub	sp, #8
 8014052:	af00      	add	r7, sp, #0
 8014054:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8014056:	2200      	movs	r2, #0
 8014058:	2102      	movs	r1, #2
 801405a:	6878      	ldr	r0, [r7, #4]
 801405c:	f7fe fbe1 	bl	8012822 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8014060:	6878      	ldr	r0, [r7, #4]
 8014062:	f000 f928 	bl	80142b6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSC_>
  }
 8014066:	bf00      	nop
 8014068:	3708      	adds	r7, #8
 801406a:	46bd      	mov	sp, r7
 801406c:	bd80      	pop	{r7, pc}

0801406e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERKS8_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 801406e:	b580      	push	{r7, lr}
 8014070:	b082      	sub	sp, #8
 8014072:	af00      	add	r7, sp, #0
 8014074:	6078      	str	r0, [r7, #4]
 8014076:	6039      	str	r1, [r7, #0]
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	6839      	ldr	r1, [r7, #0]
 801407c:	4618      	mov	r0, r3
 801407e:	f000 f92a 	bl	80142d6 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS6_Li3ELi1ELb1EEE>
  }
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	4618      	mov	r0, r3
 8014086:	3708      	adds	r7, #8
 8014088:	46bd      	mov	sp, r7
 801408a:	bd80      	pop	{r7, pc}

0801408c <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 801408c:	b480      	push	{r7}
 801408e:	b083      	sub	sp, #12
 8014090:	af00      	add	r7, sp, #0
 8014092:	6078      	str	r0, [r7, #4]
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	4618      	mov	r0, r3
 8014098:	370c      	adds	r7, #12
 801409a:	46bd      	mov	sp, r7
 801409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140a0:	4770      	bx	lr

080140a2 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 80140a2:	b5b0      	push	{r4, r5, r7, lr}
 80140a4:	b084      	sub	sp, #16
 80140a6:	af00      	add	r7, sp, #0
 80140a8:	60f8      	str	r0, [r7, #12]
 80140aa:	60b9      	str	r1, [r7, #8]
 80140ac:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 80140ae:	68fb      	ldr	r3, [r7, #12]
 80140b0:	681c      	ldr	r4, [r3, #0]
 80140b2:	68f8      	ldr	r0, [r7, #12]
 80140b4:	f000 f923 	bl	80142fe <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>
 80140b8:	4602      	mov	r2, r0
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	fb03 f502 	mul.w	r5, r3, r2
 80140c0:	68f8      	ldr	r0, [r7, #12]
 80140c2:	f000 f927 	bl	8014314 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>
 80140c6:	4602      	mov	r2, r0
 80140c8:	68bb      	ldr	r3, [r7, #8]
 80140ca:	fb02 f303 	mul.w	r3, r2, r3
 80140ce:	442b      	add	r3, r5
 80140d0:	009b      	lsls	r3, r3, #2
 80140d2:	4423      	add	r3, r4
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	ee07 3a90 	vmov	s15, r3
  }
 80140da:	eeb0 0a67 	vmov.f32	s0, s15
 80140de:	3710      	adds	r7, #16
 80140e0:	46bd      	mov	sp, r7
 80140e2:	bdb0      	pop	{r4, r5, r7, pc}

080140e4 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80140e4:	b480      	push	{r7}
 80140e6:	b083      	sub	sp, #12
 80140e8:	af00      	add	r7, sp, #0
 80140ea:	6078      	str	r0, [r7, #4]
    }
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	4618      	mov	r0, r3
 80140f0:	370c      	adds	r7, #12
 80140f2:	46bd      	mov	sp, r7
 80140f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140f8:	4770      	bx	lr

080140fa <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80140fa:	b480      	push	{r7}
 80140fc:	b083      	sub	sp, #12
 80140fe:	af00      	add	r7, sp, #0
 8014100:	6078      	str	r0, [r7, #4]
    }
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	4618      	mov	r0, r3
 8014106:	370c      	adds	r7, #12
 8014108:	46bd      	mov	sp, r7
 801410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801410e:	4770      	bx	lr

08014110 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8014110:	b580      	push	{r7, lr}
 8014112:	b082      	sub	sp, #8
 8014114:	af00      	add	r7, sp, #0
 8014116:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	4618      	mov	r0, r3
 801411c:	f7ff fdb9 	bl	8013c92 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4colsEv>
 8014120:	4603      	mov	r3, r0
    }
 8014122:	4618      	mov	r0, r3
 8014124:	3708      	adds	r7, #8
 8014126:	46bd      	mov	sp, r7
 8014128:	bd80      	pop	{r7, pc}

0801412a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1ERKSG_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 801412a:	b580      	push	{r7, lr}
 801412c:	b082      	sub	sp, #8
 801412e:	af00      	add	r7, sp, #0
 8014130:	6078      	str	r0, [r7, #4]
 8014132:	6039      	str	r1, [r7, #0]
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	6839      	ldr	r1, [r7, #0]
 8014138:	4618      	mov	r0, r3
 801413a:	f000 f8f6 	bl	801432a <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1ERKSG_>
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	4618      	mov	r0, r3
 8014142:	3708      	adds	r7, #8
 8014144:	46bd      	mov	sp, r7
 8014146:	bd80      	pop	{r7, pc}

08014148 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8014148:	b480      	push	{r7}
 801414a:	b083      	sub	sp, #12
 801414c:	af00      	add	r7, sp, #0
 801414e:	6078      	str	r0, [r7, #4]
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	4618      	mov	r0, r3
 8014154:	370c      	adds	r7, #12
 8014156:	46bd      	mov	sp, r7
 8014158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801415c:	4770      	bx	lr

0801415e <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>:
 801415e:	b480      	push	{r7}
 8014160:	b083      	sub	sp, #12
 8014162:	af00      	add	r7, sp, #0
 8014164:	6078      	str	r0, [r7, #4]
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	4618      	mov	r0, r3
 801416a:	370c      	adds	r7, #12
 801416c:	46bd      	mov	sp, r7
 801416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014172:	4770      	bx	lr

08014174 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi2EE3runISJ_EEfRKSK_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 8014174:	b580      	push	{r7, lr}
 8014176:	b084      	sub	sp, #16
 8014178:	af00      	add	r7, sp, #0
 801417a:	60f8      	str	r0, [r7, #12]
 801417c:	60b9      	str	r1, [r7, #8]
 801417e:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 8014180:	68b9      	ldr	r1, [r7, #8]
 8014182:	68f8      	ldr	r0, [r7, #12]
 8014184:	f000 f8e0 	bl	8014348 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi3EE3runERKSK_RKS3_>
 8014188:	eef0 7a40 	vmov.f32	s15, s0
  }
 801418c:	eeb0 0a67 	vmov.f32	s0, s15
 8014190:	3710      	adds	r7, #16
 8014192:	46bd      	mov	sp, r7
 8014194:	bd80      	pop	{r7, pc}

08014196 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>:
 8014196:	b580      	push	{r7, lr}
 8014198:	b082      	sub	sp, #8
 801419a:	af00      	add	r7, sp, #0
 801419c:	6078      	str	r0, [r7, #4]
 801419e:	6878      	ldr	r0, [r7, #4]
 80141a0:	f000 f8f6 	bl	8014390 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	4618      	mov	r0, r3
 80141a8:	3708      	adds	r7, #8
 80141aa:	46bd      	mov	sp, r7
 80141ac:	bd80      	pop	{r7, pc}
	...

080141b0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 80141b0:	b580      	push	{r7, lr}
 80141b2:	b084      	sub	sp, #16
 80141b4:	af00      	add	r7, sp, #0
 80141b6:	60f8      	str	r0, [r7, #12]
 80141b8:	60b9      	str	r1, [r7, #8]
 80141ba:	607a      	str	r2, [r7, #4]
 80141bc:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 80141be:	68f8      	ldr	r0, [r7, #12]
 80141c0:	f7ff ffe9 	bl	8014196 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	68ba      	ldr	r2, [r7, #8]
 80141c8:	601a      	str	r2, [r3, #0]
 80141ca:	68fb      	ldr	r3, [r7, #12]
 80141cc:	3304      	adds	r3, #4
 80141ce:	6879      	ldr	r1, [r7, #4]
 80141d0:	4618      	mov	r0, r3
 80141d2:	f7f2 fcf3 	bl	8006bbc <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 80141d6:	68fb      	ldr	r3, [r7, #12]
 80141d8:	3305      	adds	r3, #5
 80141da:	6839      	ldr	r1, [r7, #0]
 80141dc:	4618      	mov	r0, r3
 80141de:	f7f2 fced 	bl	8006bbc <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 80141e2:	68bb      	ldr	r3, [r7, #8]
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d011      	beq.n	801420c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	db08      	blt.n	8014200 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	2b01      	cmp	r3, #1
 80141f2:	d105      	bne.n	8014200 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 80141f4:	683b      	ldr	r3, [r7, #0]
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	db02      	blt.n	8014200 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 80141fa:	683b      	ldr	r3, [r7, #0]
 80141fc:	2b01      	cmp	r3, #1
 80141fe:	d005      	beq.n	801420c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 8014200:	4b07      	ldr	r3, [pc, #28]	; (8014220 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x70>)
 8014202:	4a08      	ldr	r2, [pc, #32]	; (8014224 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x74>)
 8014204:	21b0      	movs	r1, #176	; 0xb0
 8014206:	4808      	ldr	r0, [pc, #32]	; (8014228 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x78>)
 8014208:	f009 fe4c 	bl	801dea4 <__assert_func>
      checkSanity<Derived>();
 801420c:	2100      	movs	r1, #0
 801420e:	68f8      	ldr	r0, [r7, #12]
 8014210:	f000 f8c9 	bl	80143a6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 8014214:	68fb      	ldr	r3, [r7, #12]
 8014216:	4618      	mov	r0, r3
 8014218:	3710      	adds	r7, #16
 801421a:	46bd      	mov	sp, r7
 801421c:	bd80      	pop	{r7, pc}
 801421e:	bf00      	nop
 8014220:	08026430 	.word	0x08026430
 8014224:	08029544 	.word	0x08029544
 8014228:	080265e0 	.word	0x080265e0

0801422c <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE4initEv>:
    void init()
 801422c:	b580      	push	{r7, lr}
 801422e:	b082      	sub	sp, #8
 8014230:	af00      	add	r7, sp, #0
 8014232:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	689b      	ldr	r3, [r3, #8]
 8014238:	4618      	mov	r0, r3
 801423a:	f7fe fd73 	bl	8012d24 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 801423e:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	615a      	str	r2, [r3, #20]
    }
 8014244:	bf00      	nop
 8014246:	3708      	adds	r7, #8
 8014248:	46bd      	mov	sp, r7
 801424a:	bd80      	pop	{r7, pc}

0801424c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 801424c:	b580      	push	{r7, lr}
 801424e:	b082      	sub	sp, #8
 8014250:	af00      	add	r7, sp, #0
 8014252:	6078      	str	r0, [r7, #4]
 8014254:	6039      	str	r1, [r7, #0]
 8014256:	6878      	ldr	r0, [r7, #4]
 8014258:	f000 f8b0 	bl	80143bc <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	6839      	ldr	r1, [r7, #0]
 8014260:	4618      	mov	r0, r3
 8014262:	f000 f8b6 	bl	80143d2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	4618      	mov	r0, r3
 801426a:	3708      	adds	r7, #8
 801426c:	46bd      	mov	sp, r7
 801426e:	bd80      	pop	{r7, pc}

08014270 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8014270:	b580      	push	{r7, lr}
 8014272:	b084      	sub	sp, #16
 8014274:	af00      	add	r7, sp, #0
 8014276:	60f8      	str	r0, [r7, #12]
 8014278:	60b9      	str	r1, [r7, #8]
 801427a:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	687a      	ldr	r2, [r7, #4]
 8014280:	68b9      	ldr	r1, [r7, #8]
 8014282:	4618      	mov	r0, r3
 8014284:	f000 f8cd 	bl	8014422 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 8014288:	eef0 7a40 	vmov.f32	s15, s0
 801428c:	eeb0 0a67 	vmov.f32	s0, s15
 8014290:	3710      	adds	r7, #16
 8014292:	46bd      	mov	sp, r7
 8014294:	bd80      	pop	{r7, pc}

08014296 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi8ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8014296:	b580      	push	{r7, lr}
 8014298:	b082      	sub	sp, #8
 801429a:	af00      	add	r7, sp, #0
 801429c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 801429e:	2202      	movs	r2, #2
 80142a0:	2102      	movs	r1, #2
 80142a2:	6878      	ldr	r0, [r7, #4]
 80142a4:	f7fd fe14 	bl	8011ed0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80142a8:	6878      	ldr	r0, [r7, #4]
 80142aa:	f000 f8ea 	bl	8014482 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi9ELi9EE3runERSE_>
  }
 80142ae:	bf00      	nop
 80142b0:	3708      	adds	r7, #8
 80142b2:	46bd      	mov	sp, r7
 80142b4:	bd80      	pop	{r7, pc}

080142b6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80142b6:	b580      	push	{r7, lr}
 80142b8:	b082      	sub	sp, #8
 80142ba:	af00      	add	r7, sp, #0
 80142bc:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80142be:	2201      	movs	r2, #1
 80142c0:	2102      	movs	r1, #2
 80142c2:	6878      	ldr	r0, [r7, #4]
 80142c4:	f7fe faad 	bl	8012822 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80142c8:	6878      	ldr	r0, [r7, #4]
 80142ca:	f000 f8e4 	bl	8014496 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSC_>
  }
 80142ce:	bf00      	nop
 80142d0:	3708      	adds	r7, #8
 80142d2:	46bd      	mov	sp, r7
 80142d4:	bd80      	pop	{r7, pc}

080142d6 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS6_Li3ELi1ELb1EEE>:
  explicit block_evaluator(const XprType& block)
 80142d6:	b580      	push	{r7, lr}
 80142d8:	b082      	sub	sp, #8
 80142da:	af00      	add	r7, sp, #0
 80142dc:	6078      	str	r0, [r7, #4]
 80142de:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	6839      	ldr	r1, [r7, #0]
 80142e4:	4618      	mov	r0, r3
 80142e6:	f000 f8e6 	bl	80144b6 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS8_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 80142ea:	683b      	ldr	r3, [r7, #0]
 80142ec:	4618      	mov	r0, r3
 80142ee:	f000 f90c 	bl	801450a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4dataEv>
 80142f2:	bf00      	nop
  }
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	4618      	mov	r0, r3
 80142f8:	3708      	adds	r7, #8
 80142fa:	46bd      	mov	sp, r7
 80142fc:	bd80      	pop	{r7, pc}

080142fe <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 80142fe:	b580      	push	{r7, lr}
 8014300:	b082      	sub	sp, #8
 8014302:	af00      	add	r7, sp, #0
 8014304:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 8014306:	f7f2 fc7e 	bl	8006c06 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 801430a:	4603      	mov	r3, r0
  }
 801430c:	4618      	mov	r0, r3
 801430e:	3708      	adds	r7, #8
 8014310:	46bd      	mov	sp, r7
 8014312:	bd80      	pop	{r7, pc}

08014314 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 8014314:	b580      	push	{r7, lr}
 8014316:	b082      	sub	sp, #8
 8014318:	af00      	add	r7, sp, #0
 801431a:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 801431c:	f7f2 fc7b 	bl	8006c16 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8014320:	4603      	mov	r3, r0
  }
 8014322:	4618      	mov	r0, r3
 8014324:	3708      	adds	r7, #8
 8014326:	46bd      	mov	sp, r7
 8014328:	bd80      	pop	{r7, pc}

0801432a <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1ERKSG_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 801432a:	b580      	push	{r7, lr}
 801432c:	b082      	sub	sp, #8
 801432e:	af00      	add	r7, sp, #0
 8014330:	6078      	str	r0, [r7, #4]
 8014332:	6039      	str	r1, [r7, #0]
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	6839      	ldr	r1, [r7, #0]
 8014338:	4618      	mov	r0, r3
 801433a:	f000 f8f2 	bl	8014522 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffEC1ERKSG_>
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	4618      	mov	r0, r3
 8014342:	3708      	adds	r7, #8
 8014344:	46bd      	mov	sp, r7
 8014346:	bd80      	pop	{r7, pc}

08014348 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi3EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8014348:	b580      	push	{r7, lr}
 801434a:	b084      	sub	sp, #16
 801434c:	af00      	add	r7, sp, #0
 801434e:	6078      	str	r0, [r7, #4]
 8014350:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8014352:	6839      	ldr	r1, [r7, #0]
 8014354:	6878      	ldr	r0, [r7, #4]
 8014356:	f000 f8f6 	bl	8014546 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi1EE3runERKSK_RKS3_>
 801435a:	eef0 7a40 	vmov.f32	s15, s0
 801435e:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8014362:	6839      	ldr	r1, [r7, #0]
 8014364:	6878      	ldr	r0, [r7, #4]
 8014366:	f000 f8ff 	bl	8014568 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi1ELi2EE3runERKSK_RKS3_>
 801436a:	eef0 7a40 	vmov.f32	s15, s0
 801436e:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8014372:	f107 020c 	add.w	r2, r7, #12
 8014376:	f107 0308 	add.w	r3, r7, #8
 801437a:	4619      	mov	r1, r3
 801437c:	6838      	ldr	r0, [r7, #0]
 801437e:	f7f5 f808 	bl	8009392 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8014382:	eef0 7a40 	vmov.f32	s15, s0
  }
 8014386:	eeb0 0a67 	vmov.f32	s0, s15
 801438a:	3710      	adds	r7, #16
 801438c:	46bd      	mov	sp, r7
 801438e:	bd80      	pop	{r7, pc}

08014390 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8014390:	b480      	push	{r7}
 8014392:	b083      	sub	sp, #12
 8014394:	af00      	add	r7, sp, #0
 8014396:	6078      	str	r0, [r7, #4]
    }
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	4618      	mov	r0, r3
 801439c:	370c      	adds	r7, #12
 801439e:	46bd      	mov	sp, r7
 80143a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143a4:	4770      	bx	lr

080143a6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 80143a6:	b480      	push	{r7}
 80143a8:	b083      	sub	sp, #12
 80143aa:	af00      	add	r7, sp, #0
 80143ac:	6078      	str	r0, [r7, #4]
 80143ae:	6039      	str	r1, [r7, #0]
    {}
 80143b0:	bf00      	nop
 80143b2:	370c      	adds	r7, #12
 80143b4:	46bd      	mov	sp, r7
 80143b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ba:	4770      	bx	lr

080143bc <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80143bc:	b480      	push	{r7}
 80143be:	b083      	sub	sp, #12
 80143c0:	af00      	add	r7, sp, #0
 80143c2:	6078      	str	r0, [r7, #4]
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	4618      	mov	r0, r3
 80143c8:	370c      	adds	r7, #12
 80143ca:	46bd      	mov	sp, r7
 80143cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143d0:	4770      	bx	lr

080143d2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 80143d2:	b590      	push	{r4, r7, lr}
 80143d4:	b083      	sub	sp, #12
 80143d6:	af00      	add	r7, sp, #0
 80143d8:	6078      	str	r0, [r7, #4]
 80143da:	6039      	str	r1, [r7, #0]
 80143dc:	687c      	ldr	r4, [r7, #4]
 80143de:	6838      	ldr	r0, [r7, #0]
 80143e0:	f000 f8e6 	bl	80145b0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE7functorEv>
 80143e4:	4603      	mov	r3, r0
 80143e6:	4619      	mov	r1, r3
 80143e8:	4620      	mov	r0, r4
 80143ea:	f7f1 f96d 	bl	80056c8 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	1d1c      	adds	r4, r3, #4
 80143f2:	6838      	ldr	r0, [r7, #0]
 80143f4:	f000 f8e8 	bl	80145c8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE3lhsEv>
 80143f8:	4603      	mov	r3, r0
 80143fa:	4619      	mov	r1, r3
 80143fc:	4620      	mov	r0, r4
 80143fe:	f7fa ffac 	bl	800f35a <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERSA_>
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	f103 040c 	add.w	r4, r3, #12
 8014408:	6838      	ldr	r0, [r7, #0]
 801440a:	f000 f8e8 	bl	80145de <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE3rhsEv>
 801440e:	4603      	mov	r3, r0
 8014410:	4619      	mov	r1, r3
 8014412:	4620      	mov	r0, r4
 8014414:	f000 f8ef 	bl	80145f6 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERS7_>
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	4618      	mov	r0, r3
 801441c:	370c      	adds	r7, #12
 801441e:	46bd      	mov	sp, r7
 8014420:	bd90      	pop	{r4, r7, pc}

08014422 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8014422:	b590      	push	{r4, r7, lr}
 8014424:	b087      	sub	sp, #28
 8014426:	af00      	add	r7, sp, #0
 8014428:	60f8      	str	r0, [r7, #12]
 801442a:	60b9      	str	r1, [r7, #8]
 801442c:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 801442e:	68fb      	ldr	r3, [r7, #12]
 8014430:	4618      	mov	r0, r3
 8014432:	f000 f8ef 	bl	8014614 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 8014436:	4604      	mov	r4, r0
 8014438:	68fb      	ldr	r3, [r7, #12]
 801443a:	3304      	adds	r3, #4
 801443c:	687a      	ldr	r2, [r7, #4]
 801443e:	68b9      	ldr	r1, [r7, #8]
 8014440:	4618      	mov	r0, r3
 8014442:	f7fa ffb3 	bl	800f3ac <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 8014446:	eef0 7a40 	vmov.f32	s15, s0
 801444a:	edc7 7a04 	vstr	s15, [r7, #16]
 801444e:	68fb      	ldr	r3, [r7, #12]
 8014450:	330c      	adds	r3, #12
 8014452:	687a      	ldr	r2, [r7, #4]
 8014454:	68b9      	ldr	r1, [r7, #8]
 8014456:	4618      	mov	r0, r3
 8014458:	f000 f8e7 	bl	801462a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE5coeffEii>
 801445c:	eef0 7a40 	vmov.f32	s15, s0
 8014460:	edc7 7a05 	vstr	s15, [r7, #20]
 8014464:	f107 0214 	add.w	r2, r7, #20
 8014468:	f107 0310 	add.w	r3, r7, #16
 801446c:	4619      	mov	r1, r3
 801446e:	4620      	mov	r0, r4
 8014470:	f7fa ffd0 	bl	800f414 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 8014474:	eef0 7a40 	vmov.f32	s15, s0
  }
 8014478:	eeb0 0a67 	vmov.f32	s0, s15
 801447c:	371c      	adds	r7, #28
 801447e:	46bd      	mov	sp, r7
 8014480:	bd90      	pop	{r4, r7, pc}

08014482 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi9ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8014482:	b480      	push	{r7}
 8014484:	b083      	sub	sp, #12
 8014486:	af00      	add	r7, sp, #0
 8014488:	6078      	str	r0, [r7, #4]
 801448a:	bf00      	nop
 801448c:	370c      	adds	r7, #12
 801448e:	46bd      	mov	sp, r7
 8014490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014494:	4770      	bx	lr

08014496 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8014496:	b580      	push	{r7, lr}
 8014498:	b082      	sub	sp, #8
 801449a:	af00      	add	r7, sp, #0
 801449c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 801449e:	2202      	movs	r2, #2
 80144a0:	2102      	movs	r1, #2
 80144a2:	6878      	ldr	r0, [r7, #4]
 80144a4:	f7fe f9bd 	bl	8012822 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80144a8:	6878      	ldr	r0, [r7, #4]
 80144aa:	f000 f8df 	bl	801466c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSC_>
  }
 80144ae:	bf00      	nop
 80144b0:	3708      	adds	r7, #8
 80144b2:	46bd      	mov	sp, r7
 80144b4:	bd80      	pop	{r7, pc}

080144b6 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS8_>:
  explicit mapbase_evaluator(const XprType& map)
 80144b6:	b590      	push	{r4, r7, lr}
 80144b8:	b083      	sub	sp, #12
 80144ba:	af00      	add	r7, sp, #0
 80144bc:	6078      	str	r0, [r7, #4]
 80144be:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 80144c0:	6878      	ldr	r0, [r7, #4]
 80144c2:	f000 f8f9 	bl	80146b8 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 80144c6:	683b      	ldr	r3, [r7, #0]
 80144c8:	4618      	mov	r0, r3
 80144ca:	f000 f81e 	bl	801450a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4dataEv>
 80144ce:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	601a      	str	r2, [r3, #0]
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	1d1c      	adds	r4, r3, #4
 80144d8:	683b      	ldr	r3, [r7, #0]
 80144da:	4618      	mov	r0, r3
 80144dc:	f000 f8d0 	bl	8014680 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE11innerStrideEv>
 80144e0:	4603      	mov	r3, r0
 80144e2:	4619      	mov	r1, r3
 80144e4:	4620      	mov	r0, r4
 80144e6:	f7f2 fb69 	bl	8006bbc <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	1d5c      	adds	r4, r3, #5
 80144ee:	683b      	ldr	r3, [r7, #0]
 80144f0:	4618      	mov	r0, r3
 80144f2:	f000 f8d3 	bl	801469c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE11outerStrideEv>
 80144f6:	4603      	mov	r3, r0
 80144f8:	4619      	mov	r1, r3
 80144fa:	4620      	mov	r0, r4
 80144fc:	f7f2 fb44 	bl	8006b88 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	4618      	mov	r0, r3
 8014504:	370c      	adds	r7, #12
 8014506:	46bd      	mov	sp, r7
 8014508:	bd90      	pop	{r4, r7, pc}

0801450a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 801450a:	b480      	push	{r7}
 801450c:	b083      	sub	sp, #12
 801450e:	af00      	add	r7, sp, #0
 8014510:	6078      	str	r0, [r7, #4]
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	681b      	ldr	r3, [r3, #0]
 8014516:	4618      	mov	r0, r3
 8014518:	370c      	adds	r7, #12
 801451a:	46bd      	mov	sp, r7
 801451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014520:	4770      	bx	lr

08014522 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffEC1ERKSG_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8014522:	b580      	push	{r7, lr}
 8014524:	b082      	sub	sp, #8
 8014526:	af00      	add	r7, sp, #0
 8014528:	6078      	str	r0, [r7, #4]
 801452a:	6039      	str	r1, [r7, #0]
 801452c:	6878      	ldr	r0, [r7, #4]
 801452e:	f000 f8ce 	bl	80146ce <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	6839      	ldr	r1, [r7, #0]
 8014536:	4618      	mov	r0, r3
 8014538:	f000 f8d4 	bl	80146e4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>
  }
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	4618      	mov	r0, r3
 8014540:	3708      	adds	r7, #8
 8014542:	46bd      	mov	sp, r7
 8014544:	bd80      	pop	{r7, pc}

08014546 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8014546:	b580      	push	{r7, lr}
 8014548:	b082      	sub	sp, #8
 801454a:	af00      	add	r7, sp, #0
 801454c:	6078      	str	r0, [r7, #4]
 801454e:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8014550:	2200      	movs	r2, #0
 8014552:	2100      	movs	r1, #0
 8014554:	6878      	ldr	r0, [r7, #4]
 8014556:	f000 f8ed 	bl	8014734 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE17coeffByOuterInnerEii>
 801455a:	eef0 7a40 	vmov.f32	s15, s0
  }
 801455e:	eeb0 0a67 	vmov.f32	s0, s15
 8014562:	3708      	adds	r7, #8
 8014564:	46bd      	mov	sp, r7
 8014566:	bd80      	pop	{r7, pc}

08014568 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi1ELi2EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8014568:	b580      	push	{r7, lr}
 801456a:	b084      	sub	sp, #16
 801456c:	af00      	add	r7, sp, #0
 801456e:	6078      	str	r0, [r7, #4]
 8014570:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8014572:	6839      	ldr	r1, [r7, #0]
 8014574:	6878      	ldr	r0, [r7, #4]
 8014576:	f000 f8f0 	bl	801475a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi1ELi1EE3runERKSK_RKS3_>
 801457a:	eef0 7a40 	vmov.f32	s15, s0
 801457e:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8014582:	6839      	ldr	r1, [r7, #0]
 8014584:	6878      	ldr	r0, [r7, #4]
 8014586:	f000 f8f9 	bl	801477c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi2ELi1EE3runERKSK_RKS3_>
 801458a:	eef0 7a40 	vmov.f32	s15, s0
 801458e:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8014592:	f107 020c 	add.w	r2, r7, #12
 8014596:	f107 0308 	add.w	r3, r7, #8
 801459a:	4619      	mov	r1, r3
 801459c:	6838      	ldr	r0, [r7, #0]
 801459e:	f7f4 fef8 	bl	8009392 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 80145a2:	eef0 7a40 	vmov.f32	s15, s0
  }
 80145a6:	eeb0 0a67 	vmov.f32	s0, s15
 80145aa:	3710      	adds	r7, #16
 80145ac:	46bd      	mov	sp, r7
 80145ae:	bd80      	pop	{r7, pc}

080145b0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 80145b0:	b480      	push	{r7}
 80145b2:	b083      	sub	sp, #12
 80145b4:	af00      	add	r7, sp, #0
 80145b6:	6078      	str	r0, [r7, #4]
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	3330      	adds	r3, #48	; 0x30
 80145bc:	4618      	mov	r0, r3
 80145be:	370c      	adds	r7, #12
 80145c0:	46bd      	mov	sp, r7
 80145c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145c6:	4770      	bx	lr

080145c8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 80145c8:	b480      	push	{r7}
 80145ca:	b083      	sub	sp, #12
 80145cc:	af00      	add	r7, sp, #0
 80145ce:	6078      	str	r0, [r7, #4]
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	4618      	mov	r0, r3
 80145d4:	370c      	adds	r7, #12
 80145d6:	46bd      	mov	sp, r7
 80145d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145dc:	4770      	bx	lr

080145de <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 80145de:	b480      	push	{r7}
 80145e0:	b083      	sub	sp, #12
 80145e2:	af00      	add	r7, sp, #0
 80145e4:	6078      	str	r0, [r7, #4]
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	3318      	adds	r3, #24
 80145ea:	4618      	mov	r0, r3
 80145ec:	370c      	adds	r7, #12
 80145ee:	46bd      	mov	sp, r7
 80145f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145f4:	4770      	bx	lr

080145f6 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 80145f6:	b580      	push	{r7, lr}
 80145f8:	b082      	sub	sp, #8
 80145fa:	af00      	add	r7, sp, #0
 80145fc:	6078      	str	r0, [r7, #4]
 80145fe:	6039      	str	r1, [r7, #0]
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	6839      	ldr	r1, [r7, #0]
 8014604:	4618      	mov	r0, r3
 8014606:	f000 f8ca 	bl	801479e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERKS6_>
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	4618      	mov	r0, r3
 801460e:	3708      	adds	r7, #8
 8014610:	46bd      	mov	sp, r7
 8014612:	bd80      	pop	{r7, pc}

08014614 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8014614:	b480      	push	{r7}
 8014616:	b083      	sub	sp, #12
 8014618:	af00      	add	r7, sp, #0
 801461a:	6078      	str	r0, [r7, #4]
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	4618      	mov	r0, r3
 8014620:	370c      	adds	r7, #12
 8014622:	46bd      	mov	sp, r7
 8014624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014628:	4770      	bx	lr

0801462a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 801462a:	b5b0      	push	{r4, r5, r7, lr}
 801462c:	b084      	sub	sp, #16
 801462e:	af00      	add	r7, sp, #0
 8014630:	60f8      	str	r0, [r7, #12]
 8014632:	60b9      	str	r1, [r7, #8]
 8014634:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 8014636:	68fb      	ldr	r3, [r7, #12]
 8014638:	681c      	ldr	r4, [r3, #0]
 801463a:	68f8      	ldr	r0, [r7, #12]
 801463c:	f000 f8be 	bl	80147bc <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE9colStrideEv>
 8014640:	4602      	mov	r2, r0
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	fb03 f502 	mul.w	r5, r3, r2
 8014648:	68f8      	ldr	r0, [r7, #12]
 801464a:	f000 f8c2 	bl	80147d2 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE9rowStrideEv>
 801464e:	4602      	mov	r2, r0
 8014650:	68bb      	ldr	r3, [r7, #8]
 8014652:	fb02 f303 	mul.w	r3, r2, r3
 8014656:	442b      	add	r3, r5
 8014658:	009b      	lsls	r3, r3, #2
 801465a:	4423      	add	r3, r4
 801465c:	681b      	ldr	r3, [r3, #0]
 801465e:	ee07 3a90 	vmov	s15, r3
  }
 8014662:	eeb0 0a67 	vmov.f32	s0, s15
 8014666:	3710      	adds	r7, #16
 8014668:	46bd      	mov	sp, r7
 801466a:	bdb0      	pop	{r4, r5, r7, pc}

0801466c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 801466c:	b480      	push	{r7}
 801466e:	b083      	sub	sp, #12
 8014670:	af00      	add	r7, sp, #0
 8014672:	6078      	str	r0, [r7, #4]
 8014674:	bf00      	nop
 8014676:	370c      	adds	r7, #12
 8014678:	46bd      	mov	sp, r7
 801467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801467e:	4770      	bx	lr

08014680 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8014680:	b580      	push	{r7, lr}
 8014682:	b082      	sub	sp, #8
 8014684:	af00      	add	r7, sp, #0
 8014686:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	3308      	adds	r3, #8
 801468c:	4618      	mov	r0, r3
 801468e:	f7fe fd4e 	bl	801312e <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11innerStrideEv>
 8014692:	4603      	mov	r3, r0
    }
 8014694:	4618      	mov	r0, r3
 8014696:	3708      	adds	r7, #8
 8014698:	46bd      	mov	sp, r7
 801469a:	bd80      	pop	{r7, pc}

0801469c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 801469c:	b580      	push	{r7, lr}
 801469e:	b082      	sub	sp, #8
 80146a0:	af00      	add	r7, sp, #0
 80146a2:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	3308      	adds	r3, #8
 80146a8:	4618      	mov	r0, r3
 80146aa:	f7fe fd54 	bl	8013156 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11outerStrideEv>
 80146ae:	4603      	mov	r3, r0
    }
 80146b0:	4618      	mov	r0, r3
 80146b2:	3708      	adds	r7, #8
 80146b4:	46bd      	mov	sp, r7
 80146b6:	bd80      	pop	{r7, pc}

080146b8 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80146b8:	b480      	push	{r7}
 80146ba:	b083      	sub	sp, #12
 80146bc:	af00      	add	r7, sp, #0
 80146be:	6078      	str	r0, [r7, #4]
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	4618      	mov	r0, r3
 80146c4:	370c      	adds	r7, #12
 80146c6:	46bd      	mov	sp, r7
 80146c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146cc:	4770      	bx	lr

080146ce <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>:
 80146ce:	b480      	push	{r7}
 80146d0:	b083      	sub	sp, #12
 80146d2:	af00      	add	r7, sp, #0
 80146d4:	6078      	str	r0, [r7, #4]
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	4618      	mov	r0, r3
 80146da:	370c      	adds	r7, #12
 80146dc:	46bd      	mov	sp, r7
 80146de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146e2:	4770      	bx	lr

080146e4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 80146e4:	b590      	push	{r4, r7, lr}
 80146e6:	b083      	sub	sp, #12
 80146e8:	af00      	add	r7, sp, #0
 80146ea:	6078      	str	r0, [r7, #4]
 80146ec:	6039      	str	r1, [r7, #0]
 80146ee:	687c      	ldr	r4, [r7, #4]
 80146f0:	6838      	ldr	r0, [r7, #0]
 80146f2:	f000 f879 	bl	80147e8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE7functorEv>
 80146f6:	4603      	mov	r3, r0
 80146f8:	4619      	mov	r1, r3
 80146fa:	4620      	mov	r0, r4
 80146fc:	f7f0 ffe4 	bl	80056c8 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	1d1c      	adds	r4, r3, #4
 8014704:	6838      	ldr	r0, [r7, #0]
 8014706:	f000 f87b 	bl	8014800 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE3lhsEv>
 801470a:	4603      	mov	r3, r0
 801470c:	4619      	mov	r1, r3
 801470e:	4620      	mov	r0, r4
 8014710:	f000 f88d 	bl	801482e <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1ERSA_>
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	f103 0414 	add.w	r4, r3, #20
 801471a:	6838      	ldr	r0, [r7, #0]
 801471c:	f000 f87b 	bl	8014816 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE3rhsEv>
 8014720:	4603      	mov	r3, r0
 8014722:	4619      	mov	r1, r3
 8014724:	4620      	mov	r0, r4
 8014726:	f000 f891 	bl	801484c <_ZN5Eigen8internal9evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERS6_>
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	4618      	mov	r0, r3
 801472e:	370c      	adds	r7, #12
 8014730:	46bd      	mov	sp, r7
 8014732:	bd90      	pop	{r4, r7, pc}

08014734 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8014734:	b580      	push	{r7, lr}
 8014736:	b084      	sub	sp, #16
 8014738:	af00      	add	r7, sp, #0
 801473a:	60f8      	str	r0, [r7, #12]
 801473c:	60b9      	str	r1, [r7, #8]
 801473e:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 8014740:	68fb      	ldr	r3, [r7, #12]
 8014742:	68ba      	ldr	r2, [r7, #8]
 8014744:	6879      	ldr	r1, [r7, #4]
 8014746:	4618      	mov	r0, r3
 8014748:	f000 f88f 	bl	801486a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE5coeffEii>
 801474c:	eef0 7a40 	vmov.f32	s15, s0
 8014750:	eeb0 0a67 	vmov.f32	s0, s15
 8014754:	3710      	adds	r7, #16
 8014756:	46bd      	mov	sp, r7
 8014758:	bd80      	pop	{r7, pc}

0801475a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi1ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 801475a:	b580      	push	{r7, lr}
 801475c:	b082      	sub	sp, #8
 801475e:	af00      	add	r7, sp, #0
 8014760:	6078      	str	r0, [r7, #4]
 8014762:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8014764:	2201      	movs	r2, #1
 8014766:	2100      	movs	r1, #0
 8014768:	6878      	ldr	r0, [r7, #4]
 801476a:	f7ff ffe3 	bl	8014734 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE17coeffByOuterInnerEii>
 801476e:	eef0 7a40 	vmov.f32	s15, s0
  }
 8014772:	eeb0 0a67 	vmov.f32	s0, s15
 8014776:	3708      	adds	r7, #8
 8014778:	46bd      	mov	sp, r7
 801477a:	bd80      	pop	{r7, pc}

0801477c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi2ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 801477c:	b580      	push	{r7, lr}
 801477e:	b082      	sub	sp, #8
 8014780:	af00      	add	r7, sp, #0
 8014782:	6078      	str	r0, [r7, #4]
 8014784:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8014786:	2202      	movs	r2, #2
 8014788:	2100      	movs	r1, #0
 801478a:	6878      	ldr	r0, [r7, #4]
 801478c:	f7ff ffd2 	bl	8014734 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE17coeffByOuterInnerEii>
 8014790:	eef0 7a40 	vmov.f32	s15, s0
  }
 8014794:	eeb0 0a67 	vmov.f32	s0, s15
 8014798:	3708      	adds	r7, #8
 801479a:	46bd      	mov	sp, r7
 801479c:	bd80      	pop	{r7, pc}

0801479e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 801479e:	b580      	push	{r7, lr}
 80147a0:	b082      	sub	sp, #8
 80147a2:	af00      	add	r7, sp, #0
 80147a4:	6078      	str	r0, [r7, #4]
 80147a6:	6039      	str	r1, [r7, #0]
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	6839      	ldr	r1, [r7, #0]
 80147ac:	4618      	mov	r0, r3
 80147ae:	f000 f887 	bl	80148c0 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb0EEE>
  }
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	4618      	mov	r0, r3
 80147b6:	3708      	adds	r7, #8
 80147b8:	46bd      	mov	sp, r7
 80147ba:	bd80      	pop	{r7, pc}

080147bc <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 80147bc:	b580      	push	{r7, lr}
 80147be:	b082      	sub	sp, #8
 80147c0:	af00      	add	r7, sp, #0
 80147c2:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 80147c4:	f7f2 fa27 	bl	8006c16 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 80147c8:	4603      	mov	r3, r0
  }
 80147ca:	4618      	mov	r0, r3
 80147cc:	3708      	adds	r7, #8
 80147ce:	46bd      	mov	sp, r7
 80147d0:	bd80      	pop	{r7, pc}

080147d2 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 80147d2:	b580      	push	{r7, lr}
 80147d4:	b082      	sub	sp, #8
 80147d6:	af00      	add	r7, sp, #0
 80147d8:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 80147da:	f7f2 fa14 	bl	8006c06 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 80147de:	4603      	mov	r3, r0
  }
 80147e0:	4618      	mov	r0, r3
 80147e2:	3708      	adds	r7, #8
 80147e4:	46bd      	mov	sp, r7
 80147e6:	bd80      	pop	{r7, pc}

080147e8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 80147e8:	b480      	push	{r7}
 80147ea:	b083      	sub	sp, #12
 80147ec:	af00      	add	r7, sp, #0
 80147ee:	6078      	str	r0, [r7, #4]
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	330c      	adds	r3, #12
 80147f4:	4618      	mov	r0, r3
 80147f6:	370c      	adds	r7, #12
 80147f8:	46bd      	mov	sp, r7
 80147fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147fe:	4770      	bx	lr

08014800 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8014800:	b480      	push	{r7}
 8014802:	b083      	sub	sp, #12
 8014804:	af00      	add	r7, sp, #0
 8014806:	6078      	str	r0, [r7, #4]
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	4618      	mov	r0, r3
 801480c:	370c      	adds	r7, #12
 801480e:	46bd      	mov	sp, r7
 8014810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014814:	4770      	bx	lr

08014816 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8014816:	b480      	push	{r7}
 8014818:	b083      	sub	sp, #12
 801481a:	af00      	add	r7, sp, #0
 801481c:	6078      	str	r0, [r7, #4]
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	3308      	adds	r3, #8
 8014822:	4618      	mov	r0, r3
 8014824:	370c      	adds	r7, #12
 8014826:	46bd      	mov	sp, r7
 8014828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801482c:	4770      	bx	lr

0801482e <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 801482e:	b580      	push	{r7, lr}
 8014830:	b082      	sub	sp, #8
 8014832:	af00      	add	r7, sp, #0
 8014834:	6078      	str	r0, [r7, #4]
 8014836:	6039      	str	r1, [r7, #0]
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	6839      	ldr	r1, [r7, #0]
 801483c:	4618      	mov	r0, r3
 801483e:	f000 f853 	bl	80148e8 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1ERKS9_>
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	4618      	mov	r0, r3
 8014846:	3708      	adds	r7, #8
 8014848:	46bd      	mov	sp, r7
 801484a:	bd80      	pop	{r7, pc}

0801484c <_ZN5Eigen8internal9evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERS6_>:
 801484c:	b580      	push	{r7, lr}
 801484e:	b082      	sub	sp, #8
 8014850:	af00      	add	r7, sp, #0
 8014852:	6078      	str	r0, [r7, #4]
 8014854:	6039      	str	r1, [r7, #0]
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	6839      	ldr	r1, [r7, #0]
 801485a:	4618      	mov	r0, r3
 801485c:	f7fc f952 	bl	8010b04 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	4618      	mov	r0, r3
 8014864:	3708      	adds	r7, #8
 8014866:	46bd      	mov	sp, r7
 8014868:	bd80      	pop	{r7, pc}

0801486a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 801486a:	b590      	push	{r4, r7, lr}
 801486c:	b087      	sub	sp, #28
 801486e:	af00      	add	r7, sp, #0
 8014870:	60f8      	str	r0, [r7, #12]
 8014872:	60b9      	str	r1, [r7, #8]
 8014874:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	4618      	mov	r0, r3
 801487a:	f000 f844 	bl	8014906 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4Data4funcEv>
 801487e:	4604      	mov	r4, r0
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	3304      	adds	r3, #4
 8014884:	687a      	ldr	r2, [r7, #4]
 8014886:	68b9      	ldr	r1, [r7, #8]
 8014888:	4618      	mov	r0, r3
 801488a:	f000 f847 	bl	801491c <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfE5coeffEii>
 801488e:	eef0 7a40 	vmov.f32	s15, s0
 8014892:	edc7 7a05 	vstr	s15, [r7, #20]
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	3314      	adds	r3, #20
 801489a:	687a      	ldr	r2, [r7, #4]
 801489c:	68b9      	ldr	r1, [r7, #8]
 801489e:	4618      	mov	r0, r3
 80148a0:	f000 f851 	bl	8014946 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfE5coeffEii>
 80148a4:	4602      	mov	r2, r0
 80148a6:	f107 0314 	add.w	r3, r7, #20
 80148aa:	4619      	mov	r1, r3
 80148ac:	4620      	mov	r0, r4
 80148ae:	f7fa fdb1 	bl	800f414 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 80148b2:	eef0 7a40 	vmov.f32	s15, s0
  }
 80148b6:	eeb0 0a67 	vmov.f32	s0, s15
 80148ba:	371c      	adds	r7, #28
 80148bc:	46bd      	mov	sp, r7
 80148be:	bd90      	pop	{r4, r7, pc}

080148c0 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 80148c0:	b580      	push	{r7, lr}
 80148c2:	b082      	sub	sp, #8
 80148c4:	af00      	add	r7, sp, #0
 80148c6:	6078      	str	r0, [r7, #4]
 80148c8:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	6839      	ldr	r1, [r7, #0]
 80148ce:	4618      	mov	r0, r3
 80148d0:	f000 f84a 	bl	8014968 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEEC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 80148d4:	683b      	ldr	r3, [r7, #0]
 80148d6:	4618      	mov	r0, r3
 80148d8:	f000 f870 	bl	80149bc <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4dataEv>
 80148dc:	bf00      	nop
  }
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	4618      	mov	r0, r3
 80148e2:	3708      	adds	r7, #8
 80148e4:	46bd      	mov	sp, r7
 80148e6:	bd80      	pop	{r7, pc}

080148e8 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1ERKS9_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 80148e8:	b580      	push	{r7, lr}
 80148ea:	b082      	sub	sp, #8
 80148ec:	af00      	add	r7, sp, #0
 80148ee:	6078      	str	r0, [r7, #4]
 80148f0:	6039      	str	r1, [r7, #0]
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	6839      	ldr	r1, [r7, #0]
 80148f6:	4618      	mov	r0, r3
 80148f8:	f000 f86c 	bl	80149d4 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfEC1ERKS9_>
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	4618      	mov	r0, r3
 8014900:	3708      	adds	r7, #8
 8014902:	46bd      	mov	sp, r7
 8014904:	bd80      	pop	{r7, pc}

08014906 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8014906:	b480      	push	{r7}
 8014908:	b083      	sub	sp, #12
 801490a:	af00      	add	r7, sp, #0
 801490c:	6078      	str	r0, [r7, #4]
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	4618      	mov	r0, r3
 8014912:	370c      	adds	r7, #12
 8014914:	46bd      	mov	sp, r7
 8014916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801491a:	4770      	bx	lr

0801491c <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 801491c:	b580      	push	{r7, lr}
 801491e:	b084      	sub	sp, #16
 8014920:	af00      	add	r7, sp, #0
 8014922:	60f8      	str	r0, [r7, #12]
 8014924:	60b9      	str	r1, [r7, #8]
 8014926:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	68ba      	ldr	r2, [r7, #8]
 801492c:	6879      	ldr	r1, [r7, #4]
 801492e:	4618      	mov	r0, r3
 8014930:	f7ff f85b 	bl	80139ea <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE5coeffEii>
 8014934:	4603      	mov	r3, r0
 8014936:	681b      	ldr	r3, [r3, #0]
 8014938:	ee07 3a90 	vmov	s15, r3
  }
 801493c:	eeb0 0a67 	vmov.f32	s0, s15
 8014940:	3710      	adds	r7, #16
 8014942:	46bd      	mov	sp, r7
 8014944:	bd80      	pop	{r7, pc}

08014946 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8014946:	b580      	push	{r7, lr}
 8014948:	b084      	sub	sp, #16
 801494a:	af00      	add	r7, sp, #0
 801494c:	60f8      	str	r0, [r7, #12]
 801494e:	60b9      	str	r1, [r7, #8]
 8014950:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	68ba      	ldr	r2, [r7, #8]
 8014956:	6879      	ldr	r1, [r7, #4]
 8014958:	4618      	mov	r0, r3
 801495a:	f7ff f846 	bl	80139ea <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE5coeffEii>
 801495e:	4603      	mov	r3, r0
  }
 8014960:	4618      	mov	r0, r3
 8014962:	3710      	adds	r7, #16
 8014964:	46bd      	mov	sp, r7
 8014966:	bd80      	pop	{r7, pc}

08014968 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEEC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 8014968:	b590      	push	{r4, r7, lr}
 801496a:	b083      	sub	sp, #12
 801496c:	af00      	add	r7, sp, #0
 801496e:	6078      	str	r0, [r7, #4]
 8014970:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8014972:	6878      	ldr	r0, [r7, #4]
 8014974:	f000 f860 	bl	8014a38 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8014978:	683b      	ldr	r3, [r7, #0]
 801497a:	4618      	mov	r0, r3
 801497c:	f000 f81e 	bl	80149bc <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4dataEv>
 8014980:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	601a      	str	r2, [r3, #0]
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	1d1c      	adds	r4, r3, #4
 801498a:	683b      	ldr	r3, [r7, #0]
 801498c:	4618      	mov	r0, r3
 801498e:	f000 f837 	bl	8014a00 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE11innerStrideEv>
 8014992:	4603      	mov	r3, r0
 8014994:	4619      	mov	r1, r3
 8014996:	4620      	mov	r0, r4
 8014998:	f7f2 f910 	bl	8006bbc <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	1d5c      	adds	r4, r3, #5
 80149a0:	683b      	ldr	r3, [r7, #0]
 80149a2:	4618      	mov	r0, r3
 80149a4:	f000 f83a 	bl	8014a1c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE11outerStrideEv>
 80149a8:	4603      	mov	r3, r0
 80149aa:	4619      	mov	r1, r3
 80149ac:	4620      	mov	r0, r4
 80149ae:	f7f2 f8eb 	bl	8006b88 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	4618      	mov	r0, r3
 80149b6:	370c      	adds	r7, #12
 80149b8:	46bd      	mov	sp, r7
 80149ba:	bd90      	pop	{r4, r7, pc}

080149bc <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4dataEv>:
 80149bc:	b480      	push	{r7}
 80149be:	b083      	sub	sp, #12
 80149c0:	af00      	add	r7, sp, #0
 80149c2:	6078      	str	r0, [r7, #4]
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	681b      	ldr	r3, [r3, #0]
 80149c8:	4618      	mov	r0, r3
 80149ca:	370c      	adds	r7, #12
 80149cc:	46bd      	mov	sp, r7
 80149ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149d2:	4770      	bx	lr

080149d4 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfEC1ERKS9_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 80149d4:	b590      	push	{r4, r7, lr}
 80149d6:	b083      	sub	sp, #12
 80149d8:	af00      	add	r7, sp, #0
 80149da:	6078      	str	r0, [r7, #4]
 80149dc:	6039      	str	r1, [r7, #0]
 80149de:	6878      	ldr	r0, [r7, #4]
 80149e0:	f000 f840 	bl	8014a64 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>
 80149e4:	687c      	ldr	r4, [r7, #4]
 80149e6:	6838      	ldr	r0, [r7, #0]
 80149e8:	f000 f831 	bl	8014a4e <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE16nestedExpressionEv>
 80149ec:	4603      	mov	r3, r0
 80149ee:	4619      	mov	r1, r3
 80149f0:	4620      	mov	r0, r4
 80149f2:	f000 f842 	bl	8014a7a <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERS7_>
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	4618      	mov	r0, r3
 80149fa:	370c      	adds	r7, #12
 80149fc:	46bd      	mov	sp, r7
 80149fe:	bd90      	pop	{r4, r7, pc}

08014a00 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8014a00:	b580      	push	{r7, lr}
 8014a02:	b082      	sub	sp, #8
 8014a04:	af00      	add	r7, sp, #0
 8014a06:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	689b      	ldr	r3, [r3, #8]
 8014a0c:	4618      	mov	r0, r3
 8014a0e:	f7fe fecd 	bl	80137ac <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>
 8014a12:	4603      	mov	r3, r0
    }
 8014a14:	4618      	mov	r0, r3
 8014a16:	3708      	adds	r7, #8
 8014a18:	46bd      	mov	sp, r7
 8014a1a:	bd80      	pop	{r7, pc}

08014a1c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8014a1c:	b580      	push	{r7, lr}
 8014a1e:	b082      	sub	sp, #8
 8014a20:	af00      	add	r7, sp, #0
 8014a22:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	689b      	ldr	r3, [r3, #8]
 8014a28:	4618      	mov	r0, r3
 8014a2a:	f7fe f97b 	bl	8012d24 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 8014a2e:	4603      	mov	r3, r0
    }
 8014a30:	4618      	mov	r0, r3
 8014a32:	3708      	adds	r7, #8
 8014a34:	46bd      	mov	sp, r7
 8014a36:	bd80      	pop	{r7, pc}

08014a38 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8014a38:	b480      	push	{r7}
 8014a3a:	b083      	sub	sp, #12
 8014a3c:	af00      	add	r7, sp, #0
 8014a3e:	6078      	str	r0, [r7, #4]
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	4618      	mov	r0, r3
 8014a44:	370c      	adds	r7, #12
 8014a46:	46bd      	mov	sp, r7
 8014a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a4c:	4770      	bx	lr

08014a4e <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE16nestedExpressionEv>:
 8014a4e:	b480      	push	{r7}
 8014a50:	b083      	sub	sp, #12
 8014a52:	af00      	add	r7, sp, #0
 8014a54:	6078      	str	r0, [r7, #4]
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	4618      	mov	r0, r3
 8014a5a:	370c      	adds	r7, #12
 8014a5c:	46bd      	mov	sp, r7
 8014a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a62:	4770      	bx	lr

08014a64 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>:
 8014a64:	b480      	push	{r7}
 8014a66:	b083      	sub	sp, #12
 8014a68:	af00      	add	r7, sp, #0
 8014a6a:	6078      	str	r0, [r7, #4]
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	4618      	mov	r0, r3
 8014a70:	370c      	adds	r7, #12
 8014a72:	46bd      	mov	sp, r7
 8014a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a78:	4770      	bx	lr

08014a7a <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8014a7a:	b580      	push	{r7, lr}
 8014a7c:	b082      	sub	sp, #8
 8014a7e:	af00      	add	r7, sp, #0
 8014a80:	6078      	str	r0, [r7, #4]
 8014a82:	6039      	str	r1, [r7, #0]
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	6839      	ldr	r1, [r7, #0]
 8014a88:	4618      	mov	r0, r3
 8014a8a:	f000 f805 	bl	8014a98 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERKS6_>
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	4618      	mov	r0, r3
 8014a92:	3708      	adds	r7, #8
 8014a94:	46bd      	mov	sp, r7
 8014a96:	bd80      	pop	{r7, pc}

08014a98 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERKS6_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8014a98:	b580      	push	{r7, lr}
 8014a9a:	b082      	sub	sp, #8
 8014a9c:	af00      	add	r7, sp, #0
 8014a9e:	6078      	str	r0, [r7, #4]
 8014aa0:	6039      	str	r1, [r7, #0]
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	6839      	ldr	r1, [r7, #0]
 8014aa6:	4618      	mov	r0, r3
 8014aa8:	f000 f805 	bl	8014ab6 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	4618      	mov	r0, r3
 8014ab0:	3708      	adds	r7, #8
 8014ab2:	46bd      	mov	sp, r7
 8014ab4:	bd80      	pop	{r7, pc}

08014ab6 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>:
  explicit product_evaluator(const XprType& xpr)
 8014ab6:	b5b0      	push	{r4, r5, r7, lr}
 8014ab8:	b084      	sub	sp, #16
 8014aba:	af00      	add	r7, sp, #0
 8014abc:	6078      	str	r0, [r7, #4]
 8014abe:	6039      	str	r1, [r7, #0]
    : m_result(xpr.rows(), xpr.cols())
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	4618      	mov	r0, r3
 8014ac4:	f000 f834 	bl	8014b30 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	1d1c      	adds	r4, r3, #4
 8014acc:	6838      	ldr	r0, [r7, #0]
 8014ace:	f7f2 f9aa 	bl	8006e26 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4rowsEv>
 8014ad2:	4603      	mov	r3, r0
 8014ad4:	60bb      	str	r3, [r7, #8]
 8014ad6:	6838      	ldr	r0, [r7, #0]
 8014ad8:	f7f1 fa33 	bl	8005f42 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4colsEv>
 8014adc:	4603      	mov	r3, r0
 8014ade:	60fb      	str	r3, [r7, #12]
 8014ae0:	f107 020c 	add.w	r2, r7, #12
 8014ae4:	f107 0308 	add.w	r3, r7, #8
 8014ae8:	4619      	mov	r1, r3
 8014aea:	4620      	mov	r0, r4
 8014aec:	f000 f82d 	bl	8014b4a <_ZN5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EEC1IiiEERKT_RKT0_>
    ::new (static_cast<Base*>(this)) Base(m_result);
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	4619      	mov	r1, r3
 8014af4:	2004      	movs	r0, #4
 8014af6:	f7ec fa21 	bl	8000f3c <_ZnwjPv>
 8014afa:	4602      	mov	r2, r0
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	3304      	adds	r3, #4
 8014b00:	4619      	mov	r1, r3
 8014b02:	4610      	mov	r0, r2
 8014b04:	f7fd f884 	bl	8011c10 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
    generic_product_impl<Lhs, Rhs, LhsShape, RhsShape, ProductTag>::evalTo(m_result, xpr.lhs(), xpr.rhs());
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	1d1c      	adds	r4, r3, #4
 8014b0c:	6838      	ldr	r0, [r7, #0]
 8014b0e:	f000 f835 	bl	8014b7c <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE3lhsEv>
 8014b12:	4605      	mov	r5, r0
 8014b14:	6838      	ldr	r0, [r7, #0]
 8014b16:	f000 f83d 	bl	8014b94 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE3rhsEv>
 8014b1a:	4603      	mov	r3, r0
 8014b1c:	461a      	mov	r2, r3
 8014b1e:	4629      	mov	r1, r5
 8014b20:	4620      	mov	r0, r4
 8014b22:	f000 f843 	bl	8014bac <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEENS_10DenseShapeES5_Li3EE6evalToIS3_EEvRT_RKS3_RKS4_>
  }
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	4618      	mov	r0, r3
 8014b2a:	3710      	adds	r7, #16
 8014b2c:	46bd      	mov	sp, r7
 8014b2e:	bdb0      	pop	{r4, r5, r7, pc}

08014b30 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
  evaluator() {}
 8014b30:	b580      	push	{r7, lr}
 8014b32:	b082      	sub	sp, #8
 8014b34:	af00      	add	r7, sp, #0
 8014b36:	6078      	str	r0, [r7, #4]
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	f000 f854 	bl	8014be8 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	4618      	mov	r0, r3
 8014b44:	3708      	adds	r7, #8
 8014b46:	46bd      	mov	sp, r7
 8014b48:	bd80      	pop	{r7, pc}

08014b4a <_ZN5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EEC1IiiEERKT_RKT0_>:
    Matrix(const T0& x, const T1& y)
 8014b4a:	b580      	push	{r7, lr}
 8014b4c:	b084      	sub	sp, #16
 8014b4e:	af00      	add	r7, sp, #0
 8014b50:	60f8      	str	r0, [r7, #12]
 8014b52:	60b9      	str	r1, [r7, #8]
 8014b54:	607a      	str	r2, [r7, #4]
    {
 8014b56:	68fb      	ldr	r3, [r7, #12]
 8014b58:	4618      	mov	r0, r3
 8014b5a:	f7f0 f9f1 	bl	8004f40 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
      Base::_check_template_params();
 8014b5e:	f7f0 f9ff 	bl	8004f60 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE22_check_template_paramsEv>
      Base::template _init2<T0,T1>(x, y);
 8014b62:	68f8      	ldr	r0, [r7, #12]
 8014b64:	68bb      	ldr	r3, [r7, #8]
 8014b66:	6819      	ldr	r1, [r3, #0]
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	681a      	ldr	r2, [r3, #0]
 8014b6c:	2300      	movs	r3, #0
 8014b6e:	f000 f84d 	bl	8014c0c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>
    }
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	4618      	mov	r0, r3
 8014b76:	3710      	adds	r7, #16
 8014b78:	46bd      	mov	sp, r7
 8014b7a:	bd80      	pop	{r7, pc}

08014b7c <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8014b7c:	b480      	push	{r7}
 8014b7e:	b083      	sub	sp, #12
 8014b80:	af00      	add	r7, sp, #0
 8014b82:	6078      	str	r0, [r7, #4]
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	681b      	ldr	r3, [r3, #0]
 8014b88:	4618      	mov	r0, r3
 8014b8a:	370c      	adds	r7, #12
 8014b8c:	46bd      	mov	sp, r7
 8014b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b92:	4770      	bx	lr

08014b94 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8014b94:	b480      	push	{r7}
 8014b96:	b083      	sub	sp, #12
 8014b98:	af00      	add	r7, sp, #0
 8014b9a:	6078      	str	r0, [r7, #4]
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	685b      	ldr	r3, [r3, #4]
 8014ba0:	4618      	mov	r0, r3
 8014ba2:	370c      	adds	r7, #12
 8014ba4:	46bd      	mov	sp, r7
 8014ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014baa:	4770      	bx	lr

08014bac <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEENS_10DenseShapeES5_Li3EE6evalToIS3_EEvRT_RKS3_RKS4_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8014bac:	b580      	push	{r7, lr}
 8014bae:	b088      	sub	sp, #32
 8014bb0:	af00      	add	r7, sp, #0
 8014bb2:	60f8      	str	r0, [r7, #12]
 8014bb4:	60b9      	str	r1, [r7, #8]
 8014bb6:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 8014bb8:	f107 0314 	add.w	r3, r7, #20
 8014bbc:	687a      	ldr	r2, [r7, #4]
 8014bbe:	68b9      	ldr	r1, [r7, #8]
 8014bc0:	4618      	mov	r0, r3
 8014bc2:	f000 f837 	bl	8014c34 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE11lazyProductINS1_IfLi3ELi3ELi0ELi3ELi3EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>
 8014bc6:	f107 031c 	add.w	r3, r7, #28
 8014bca:	4618      	mov	r0, r3
 8014bcc:	f7f2 fa81 	bl	80070d2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8014bd0:	f107 021c 	add.w	r2, r7, #28
 8014bd4:	f107 0314 	add.w	r3, r7, #20
 8014bd8:	4619      	mov	r1, r3
 8014bda:	68f8      	ldr	r0, [r7, #12]
 8014bdc:	f000 f841 	bl	8014c62 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8014be0:	bf00      	nop
 8014be2:	3720      	adds	r7, #32
 8014be4:	46bd      	mov	sp, r7
 8014be6:	bd80      	pop	{r7, pc}

08014be8 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
  evaluator()
 8014be8:	b580      	push	{r7, lr}
 8014bea:	b082      	sub	sp, #8
 8014bec:	af00      	add	r7, sp, #0
 8014bee:	6078      	str	r0, [r7, #4]
    : m_d(0,OuterStrideAtCompileTime)
 8014bf0:	6878      	ldr	r0, [r7, #4]
 8014bf2:	f7fd fe76 	bl	80128e2 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	2200      	movs	r2, #0
 8014bfa:	2100      	movs	r1, #0
 8014bfc:	4618      	mov	r0, r3
 8014bfe:	f7f2 fb28 	bl	8007252 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	4618      	mov	r0, r3
 8014c06:	3708      	adds	r7, #8
 8014c08:	46bd      	mov	sp, r7
 8014c0a:	bd80      	pop	{r7, pc}

08014c0c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>:
    EIGEN_STRONG_INLINE void _init2(Index rows, Index cols, typename internal::enable_if<Base::SizeAtCompileTime!=2,T0>::type* = 0)
 8014c0c:	b580      	push	{r7, lr}
 8014c0e:	b086      	sub	sp, #24
 8014c10:	af00      	add	r7, sp, #0
 8014c12:	60f8      	str	r0, [r7, #12]
 8014c14:	60b9      	str	r1, [r7, #8]
 8014c16:	607a      	str	r2, [r7, #4]
 8014c18:	603b      	str	r3, [r7, #0]
      const bool t0_is_integer_alike = internal::is_valid_index_type<T0>::value;
 8014c1a:	2301      	movs	r3, #1
 8014c1c:	75fb      	strb	r3, [r7, #23]
      const bool t1_is_integer_alike = internal::is_valid_index_type<T1>::value;
 8014c1e:	2301      	movs	r3, #1
 8014c20:	75bb      	strb	r3, [r7, #22]
      resize(rows,cols);
 8014c22:	687a      	ldr	r2, [r7, #4]
 8014c24:	68b9      	ldr	r1, [r7, #8]
 8014c26:	68f8      	ldr	r0, [r7, #12]
 8014c28:	f000 f82c 	bl	8014c84 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii>
    }
 8014c2c:	bf00      	nop
 8014c2e:	3718      	adds	r7, #24
 8014c30:	46bd      	mov	sp, r7
 8014c32:	bd80      	pop	{r7, pc}

08014c34 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE11lazyProductINS1_IfLi3ELi3ELi0ELi3ELi3EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 8014c34:	b590      	push	{r4, r7, lr}
 8014c36:	b085      	sub	sp, #20
 8014c38:	af00      	add	r7, sp, #0
 8014c3a:	60f8      	str	r0, [r7, #12]
 8014c3c:	60b9      	str	r1, [r7, #8]
 8014c3e:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 8014c40:	68b8      	ldr	r0, [r7, #8]
 8014c42:	f7f1 f8f1 	bl	8005e28 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8014c46:	4604      	mov	r4, r0
 8014c48:	6878      	ldr	r0, [r7, #4]
 8014c4a:	f7f0 fe1c 	bl	8005886 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8014c4e:	4603      	mov	r3, r0
 8014c50:	461a      	mov	r2, r3
 8014c52:	4621      	mov	r1, r4
 8014c54:	68f8      	ldr	r0, [r7, #12]
 8014c56:	f000 f86b 	bl	8014d30 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_>
}
 8014c5a:	68f8      	ldr	r0, [r7, #12]
 8014c5c:	3714      	adds	r7, #20
 8014c5e:	46bd      	mov	sp, r7
 8014c60:	bd90      	pop	{r4, r7, pc}

08014c62 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8014c62:	b580      	push	{r7, lr}
 8014c64:	b086      	sub	sp, #24
 8014c66:	af00      	add	r7, sp, #0
 8014c68:	60f8      	str	r0, [r7, #12]
 8014c6a:	60b9      	str	r1, [r7, #8]
 8014c6c:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8014c72:	687a      	ldr	r2, [r7, #4]
 8014c74:	68b9      	ldr	r1, [r7, #8]
 8014c76:	6978      	ldr	r0, [r7, #20]
 8014c78:	f000 f888 	bl	8014d8c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>
}
 8014c7c:	bf00      	nop
 8014c7e:	3718      	adds	r7, #24
 8014c80:	46bd      	mov	sp, r7
 8014c82:	bd80      	pop	{r7, pc}

08014c84 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 8014c84:	b580      	push	{r7, lr}
 8014c86:	b086      	sub	sp, #24
 8014c88:	af00      	add	r7, sp, #0
 8014c8a:	60f8      	str	r0, [r7, #12]
 8014c8c:	60b9      	str	r1, [r7, #8]
 8014c8e:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 8014c90:	68bb      	ldr	r3, [r7, #8]
 8014c92:	2b01      	cmp	r3, #1
 8014c94:	d108      	bne.n	8014ca8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x24>
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	2b03      	cmp	r3, #3
 8014c9a:	d105      	bne.n	8014ca8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x24>
 8014c9c:	68bb      	ldr	r3, [r7, #8]
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	db02      	blt.n	8014ca8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x24>
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	da06      	bge.n	8014cb6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x32>
 8014ca8:	4b0c      	ldr	r3, [pc, #48]	; (8014cdc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x58>)
 8014caa:	4a0d      	ldr	r2, [pc, #52]	; (8014ce0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x5c>)
 8014cac:	f240 1111 	movw	r1, #273	; 0x111
 8014cb0:	480c      	ldr	r0, [pc, #48]	; (8014ce4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x60>)
 8014cb2:	f009 f8f7 	bl	801dea4 <__assert_func>
 8014cb6:	68bb      	ldr	r3, [r7, #8]
 8014cb8:	617b      	str	r3, [r7, #20]
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	613b      	str	r3, [r7, #16]
  }
 8014cbe:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 8014cc0:	68f8      	ldr	r0, [r7, #12]
 8014cc2:	68bb      	ldr	r3, [r7, #8]
 8014cc4:	687a      	ldr	r2, [r7, #4]
 8014cc6:	fb02 f103 	mul.w	r1, r2, r3
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	68ba      	ldr	r2, [r7, #8]
 8014cce:	f000 f870 	bl	8014db2 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE6resizeEiii>
    }
 8014cd2:	bf00      	nop
 8014cd4:	3718      	adds	r7, #24
 8014cd6:	46bd      	mov	sp, r7
 8014cd8:	bd80      	pop	{r7, pc}
 8014cda:	bf00      	nop
 8014cdc:	0802279c 	.word	0x0802279c
 8014ce0:	08029648 	.word	0x08029648
 8014ce4:	080229b8 	.word	0x080229b8

08014ce8 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>:
 8014ce8:	b580      	push	{r7, lr}
 8014cea:	b082      	sub	sp, #8
 8014cec:	af00      	add	r7, sp, #0
 8014cee:	6078      	str	r0, [r7, #4]
 8014cf0:	6878      	ldr	r0, [r7, #4]
 8014cf2:	f000 f86b 	bl	8014dcc <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	4618      	mov	r0, r3
 8014cfa:	3708      	adds	r7, #8
 8014cfc:	46bd      	mov	sp, r7
 8014cfe:	bd80      	pop	{r7, pc}

08014d00 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1ELi3EEC1Ev>:
class dense_product_base
 8014d00:	b580      	push	{r7, lr}
 8014d02:	b082      	sub	sp, #8
 8014d04:	af00      	add	r7, sp, #0
 8014d06:	6078      	str	r0, [r7, #4]
 8014d08:	6878      	ldr	r0, [r7, #4]
 8014d0a:	f7ff ffed 	bl	8014ce8 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	4618      	mov	r0, r3
 8014d12:	3708      	adds	r7, #8
 8014d14:	46bd      	mov	sp, r7
 8014d16:	bd80      	pop	{r7, pc}

08014d18 <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8014d18:	b580      	push	{r7, lr}
 8014d1a:	b082      	sub	sp, #8
 8014d1c:	af00      	add	r7, sp, #0
 8014d1e:	6078      	str	r0, [r7, #4]
 8014d20:	6878      	ldr	r0, [r7, #4]
 8014d22:	f7ff ffed 	bl	8014d00 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1ELi3EEC1Ev>
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	4618      	mov	r0, r3
 8014d2a:	3708      	adds	r7, #8
 8014d2c:	46bd      	mov	sp, r7
 8014d2e:	bd80      	pop	{r7, pc}

08014d30 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8014d30:	b590      	push	{r4, r7, lr}
 8014d32:	b085      	sub	sp, #20
 8014d34:	af00      	add	r7, sp, #0
 8014d36:	60f8      	str	r0, [r7, #12]
 8014d38:	60b9      	str	r1, [r7, #8]
 8014d3a:	607a      	str	r2, [r7, #4]
 8014d3c:	68f8      	ldr	r0, [r7, #12]
 8014d3e:	f7ff ffeb 	bl	8014d18 <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1ENS_5DenseEEC1Ev>
 8014d42:	68fb      	ldr	r3, [r7, #12]
 8014d44:	68ba      	ldr	r2, [r7, #8]
 8014d46:	601a      	str	r2, [r3, #0]
 8014d48:	68fb      	ldr	r3, [r7, #12]
 8014d4a:	687a      	ldr	r2, [r7, #4]
 8014d4c:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8014d4e:	68bb      	ldr	r3, [r7, #8]
 8014d50:	4618      	mov	r0, r3
 8014d52:	f7f0 fb45 	bl	80053e0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8014d56:	4604      	mov	r4, r0
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	f7f0 f989 	bl	8005072 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8014d60:	4603      	mov	r3, r0
 8014d62:	429c      	cmp	r4, r3
 8014d64:	d005      	beq.n	8014d72 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_+0x42>
 8014d66:	4b06      	ldr	r3, [pc, #24]	; (8014d80 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_+0x50>)
 8014d68:	4a06      	ldr	r2, [pc, #24]	; (8014d84 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_+0x54>)
 8014d6a:	2160      	movs	r1, #96	; 0x60
 8014d6c:	4806      	ldr	r0, [pc, #24]	; (8014d88 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_+0x58>)
 8014d6e:	f009 f899 	bl	801dea4 <__assert_func>
 8014d72:	bf00      	nop
    }
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	4618      	mov	r0, r3
 8014d78:	3714      	adds	r7, #20
 8014d7a:	46bd      	mov	sp, r7
 8014d7c:	bd90      	pop	{r4, r7, pc}
 8014d7e:	bf00      	nop
 8014d80:	0801ffcc 	.word	0x0801ffcc
 8014d84:	080296d4 	.word	0x080296d4
 8014d88:	0802031c 	.word	0x0802031c

08014d8c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8014d8c:	b580      	push	{r7, lr}
 8014d8e:	b084      	sub	sp, #16
 8014d90:	af00      	add	r7, sp, #0
 8014d92:	60f8      	str	r0, [r7, #12]
 8014d94:	60b9      	str	r1, [r7, #8]
 8014d96:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8014d98:	68b9      	ldr	r1, [r7, #8]
 8014d9a:	68f8      	ldr	r0, [r7, #12]
 8014d9c:	f000 f821 	bl	8014de2 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8014da0:	687a      	ldr	r2, [r7, #4]
 8014da2:	68b9      	ldr	r1, [r7, #8]
 8014da4:	68f8      	ldr	r0, [r7, #12]
 8014da6:	f000 f84a 	bl	8014e3e <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8014daa:	bf00      	nop
 8014dac:	3710      	adds	r7, #16
 8014dae:	46bd      	mov	sp, r7
 8014db0:	bd80      	pop	{r7, pc}

08014db2 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE6resizeEiii>:
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
 8014db2:	b480      	push	{r7}
 8014db4:	b085      	sub	sp, #20
 8014db6:	af00      	add	r7, sp, #0
 8014db8:	60f8      	str	r0, [r7, #12]
 8014dba:	60b9      	str	r1, [r7, #8]
 8014dbc:	607a      	str	r2, [r7, #4]
 8014dbe:	603b      	str	r3, [r7, #0]
 8014dc0:	bf00      	nop
 8014dc2:	3714      	adds	r7, #20
 8014dc4:	46bd      	mov	sp, r7
 8014dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dca:	4770      	bx	lr

08014dcc <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8014dcc:	b480      	push	{r7}
 8014dce:	b083      	sub	sp, #12
 8014dd0:	af00      	add	r7, sp, #0
 8014dd2:	6078      	str	r0, [r7, #4]
    }
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	4618      	mov	r0, r3
 8014dd8:	370c      	adds	r7, #12
 8014dda:	46bd      	mov	sp, r7
 8014ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014de0:	4770      	bx	lr

08014de2 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8014de2:	b480      	push	{r7}
 8014de4:	b083      	sub	sp, #12
 8014de6:	af00      	add	r7, sp, #0
 8014de8:	6078      	str	r0, [r7, #4]
 8014dea:	6039      	str	r1, [r7, #0]
}
 8014dec:	bf00      	nop
 8014dee:	370c      	adds	r7, #12
 8014df0:	46bd      	mov	sp, r7
 8014df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014df6:	4770      	bx	lr

08014df8 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 8014df8:	b580      	push	{r7, lr}
 8014dfa:	b082      	sub	sp, #8
 8014dfc:	af00      	add	r7, sp, #0
 8014dfe:	6078      	str	r0, [r7, #4]
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	330c      	adds	r3, #12
 8014e04:	4618      	mov	r0, r3
 8014e06:	f7f2 fbbc 	bl	8007582 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	3308      	adds	r3, #8
 8014e0e:	4618      	mov	r0, r3
 8014e10:	f7fa f9ea 	bl	800f1e8 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 8014e14:	6878      	ldr	r0, [r7, #4]
 8014e16:	f000 f859 	bl	8014ecc <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEED1Ev>
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	4618      	mov	r0, r3
 8014e1e:	3708      	adds	r7, #8
 8014e20:	46bd      	mov	sp, r7
 8014e22:	bd80      	pop	{r7, pc}

08014e24 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8014e24:	b580      	push	{r7, lr}
 8014e26:	b082      	sub	sp, #8
 8014e28:	af00      	add	r7, sp, #0
 8014e2a:	6078      	str	r0, [r7, #4]
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	4618      	mov	r0, r3
 8014e30:	f7ff ffe2 	bl	8014df8 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffED1Ev>
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	4618      	mov	r0, r3
 8014e38:	3708      	adds	r7, #8
 8014e3a:	46bd      	mov	sp, r7
 8014e3c:	bd80      	pop	{r7, pc}

08014e3e <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8014e3e:	b580      	push	{r7, lr}
 8014e40:	b090      	sub	sp, #64	; 0x40
 8014e42:	af02      	add	r7, sp, #8
 8014e44:	60f8      	str	r0, [r7, #12]
 8014e46:	60b9      	str	r1, [r7, #8]
 8014e48:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8014e4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014e4e:	68b9      	ldr	r1, [r7, #8]
 8014e50:	4618      	mov	r0, r3
 8014e52:	f000 f82c 	bl	8014eae <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1ERKS6_>
  resize_if_allowed(dst, src, func);
 8014e56:	687a      	ldr	r2, [r7, #4]
 8014e58:	68b9      	ldr	r1, [r7, #8]
 8014e5a:	68f8      	ldr	r0, [r7, #12]
 8014e5c:	f000 f85e 	bl	8014f1c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8014e60:	f107 0320 	add.w	r3, r7, #32
 8014e64:	68f9      	ldr	r1, [r7, #12]
 8014e66:	4618      	mov	r0, r3
 8014e68:	f7fc fed2 	bl	8011c10 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8014e6c:	68f8      	ldr	r0, [r7, #12]
 8014e6e:	f000 f89f 	bl	8014fb0 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE18const_cast_derivedEv>
 8014e72:	4603      	mov	r3, r0
 8014e74:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8014e78:	f107 0120 	add.w	r1, r7, #32
 8014e7c:	f107 0010 	add.w	r0, r7, #16
 8014e80:	9300      	str	r3, [sp, #0]
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	f000 f89f 	bl	8014fc6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS9_RKSB_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8014e88:	f107 0310 	add.w	r3, r7, #16
 8014e8c:	4618      	mov	r0, r3
 8014e8e:	f000 f8b4 	bl	8014ffa <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSD_>
  DstEvaluatorType dstEvaluator(dst);
 8014e92:	f107 0320 	add.w	r3, r7, #32
 8014e96:	4618      	mov	r0, r3
 8014e98:	f7fa f9a6 	bl	800f1e8 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8014e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014ea0:	4618      	mov	r0, r3
 8014ea2:	f7ff ffbf 	bl	8014e24 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEED1Ev>
}
 8014ea6:	bf00      	nop
 8014ea8:	3738      	adds	r7, #56	; 0x38
 8014eaa:	46bd      	mov	sp, r7
 8014eac:	bd80      	pop	{r7, pc}

08014eae <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1ERKS6_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8014eae:	b580      	push	{r7, lr}
 8014eb0:	b082      	sub	sp, #8
 8014eb2:	af00      	add	r7, sp, #0
 8014eb4:	6078      	str	r0, [r7, #4]
 8014eb6:	6039      	str	r1, [r7, #0]
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	6839      	ldr	r1, [r7, #0]
 8014ebc:	4618      	mov	r0, r3
 8014ebe:	f000 f8a7 	bl	8015010 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	4618      	mov	r0, r3
 8014ec6:	3708      	adds	r7, #8
 8014ec8:	46bd      	mov	sp, r7
 8014eca:	bd80      	pop	{r7, pc}

08014ecc <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8014ecc:	b480      	push	{r7}
 8014ece:	b083      	sub	sp, #12
 8014ed0:	af00      	add	r7, sp, #0
 8014ed2:	6078      	str	r0, [r7, #4]
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	4618      	mov	r0, r3
 8014ed8:	370c      	adds	r7, #12
 8014eda:	46bd      	mov	sp, r7
 8014edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ee0:	4770      	bx	lr

08014ee2 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8014ee2:	b580      	push	{r7, lr}
 8014ee4:	b082      	sub	sp, #8
 8014ee6:	af00      	add	r7, sp, #0
 8014ee8:	6078      	str	r0, [r7, #4]
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	681b      	ldr	r3, [r3, #0]
 8014eee:	4618      	mov	r0, r3
 8014ef0:	f7f0 fa81 	bl	80053f6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8014ef4:	4603      	mov	r3, r0
 8014ef6:	4618      	mov	r0, r3
 8014ef8:	3708      	adds	r7, #8
 8014efa:	46bd      	mov	sp, r7
 8014efc:	bd80      	pop	{r7, pc}

08014efe <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8014efe:	b580      	push	{r7, lr}
 8014f00:	b082      	sub	sp, #8
 8014f02:	af00      	add	r7, sp, #0
 8014f04:	6078      	str	r0, [r7, #4]
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	685b      	ldr	r3, [r3, #4]
 8014f0a:	4618      	mov	r0, r3
 8014f0c:	f7f0 f8a6 	bl	800505c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8014f10:	4603      	mov	r3, r0
 8014f12:	4618      	mov	r0, r3
 8014f14:	3708      	adds	r7, #8
 8014f16:	46bd      	mov	sp, r7
 8014f18:	bd80      	pop	{r7, pc}
	...

08014f1c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8014f1c:	b580      	push	{r7, lr}
 8014f1e:	b086      	sub	sp, #24
 8014f20:	af00      	add	r7, sp, #0
 8014f22:	60f8      	str	r0, [r7, #12]
 8014f24:	60b9      	str	r1, [r7, #8]
 8014f26:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8014f28:	68b8      	ldr	r0, [r7, #8]
 8014f2a:	f7ff ffda 	bl	8014ee2 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE4rowsEv>
 8014f2e:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8014f30:	68b8      	ldr	r0, [r7, #8]
 8014f32:	f7ff ffe4 	bl	8014efe <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE4colsEv>
 8014f36:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	4618      	mov	r0, r3
 8014f3c:	f7f0 fa5b 	bl	80053f6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8014f40:	4602      	mov	r2, r0
 8014f42:	697b      	ldr	r3, [r7, #20]
 8014f44:	4293      	cmp	r3, r2
 8014f46:	d107      	bne.n	8014f58 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8014f48:	68fb      	ldr	r3, [r7, #12]
 8014f4a:	4618      	mov	r0, r3
 8014f4c:	f7f0 fa48 	bl	80053e0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8014f50:	4602      	mov	r2, r0
 8014f52:	693b      	ldr	r3, [r7, #16]
 8014f54:	4293      	cmp	r3, r2
 8014f56:	d001      	beq.n	8014f5c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8014f58:	2301      	movs	r3, #1
 8014f5a:	e000      	b.n	8014f5e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8014f5c:	2300      	movs	r3, #0
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d005      	beq.n	8014f6e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8014f62:	68fb      	ldr	r3, [r7, #12]
 8014f64:	693a      	ldr	r2, [r7, #16]
 8014f66:	6979      	ldr	r1, [r7, #20]
 8014f68:	4618      	mov	r0, r3
 8014f6a:	f7ff fe8b 	bl	8014c84 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8014f6e:	68fb      	ldr	r3, [r7, #12]
 8014f70:	4618      	mov	r0, r3
 8014f72:	f7f0 fa40 	bl	80053f6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8014f76:	4602      	mov	r2, r0
 8014f78:	697b      	ldr	r3, [r7, #20]
 8014f7a:	4293      	cmp	r3, r2
 8014f7c:	d107      	bne.n	8014f8e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8014f7e:	68fb      	ldr	r3, [r7, #12]
 8014f80:	4618      	mov	r0, r3
 8014f82:	f7f0 fa2d 	bl	80053e0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8014f86:	4602      	mov	r2, r0
 8014f88:	693b      	ldr	r3, [r7, #16]
 8014f8a:	4293      	cmp	r3, r2
 8014f8c:	d006      	beq.n	8014f9c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8014f8e:	4b05      	ldr	r3, [pc, #20]	; (8014fa4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8014f90:	4a05      	ldr	r2, [pc, #20]	; (8014fa8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8014f92:	f240 21fd 	movw	r1, #765	; 0x2fd
 8014f96:	4805      	ldr	r0, [pc, #20]	; (8014fac <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8014f98:	f008 ff84 	bl	801dea4 <__assert_func>
}
 8014f9c:	bf00      	nop
 8014f9e:	3718      	adds	r7, #24
 8014fa0:	46bd      	mov	sp, r7
 8014fa2:	bd80      	pop	{r7, pc}
 8014fa4:	08022384 	.word	0x08022384
 8014fa8:	080297fc 	.word	0x080297fc
 8014fac:	08022498 	.word	0x08022498

08014fb0 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 8014fb0:	b480      	push	{r7}
 8014fb2:	b083      	sub	sp, #12
 8014fb4:	af00      	add	r7, sp, #0
 8014fb6:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	4618      	mov	r0, r3
 8014fbc:	370c      	adds	r7, #12
 8014fbe:	46bd      	mov	sp, r7
 8014fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fc4:	4770      	bx	lr

08014fc6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS9_RKSB_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8014fc6:	b480      	push	{r7}
 8014fc8:	b085      	sub	sp, #20
 8014fca:	af00      	add	r7, sp, #0
 8014fcc:	60f8      	str	r0, [r7, #12]
 8014fce:	60b9      	str	r1, [r7, #8]
 8014fd0:	607a      	str	r2, [r7, #4]
 8014fd2:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8014fd4:	68fb      	ldr	r3, [r7, #12]
 8014fd6:	68ba      	ldr	r2, [r7, #8]
 8014fd8:	601a      	str	r2, [r3, #0]
 8014fda:	68fb      	ldr	r3, [r7, #12]
 8014fdc:	687a      	ldr	r2, [r7, #4]
 8014fde:	605a      	str	r2, [r3, #4]
 8014fe0:	68fb      	ldr	r3, [r7, #12]
 8014fe2:	683a      	ldr	r2, [r7, #0]
 8014fe4:	609a      	str	r2, [r3, #8]
 8014fe6:	68fb      	ldr	r3, [r7, #12]
 8014fe8:	69ba      	ldr	r2, [r7, #24]
 8014fea:	60da      	str	r2, [r3, #12]
  }
 8014fec:	68fb      	ldr	r3, [r7, #12]
 8014fee:	4618      	mov	r0, r3
 8014ff0:	3714      	adds	r7, #20
 8014ff2:	46bd      	mov	sp, r7
 8014ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ff8:	4770      	bx	lr

08014ffa <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8014ffa:	b580      	push	{r7, lr}
 8014ffc:	b082      	sub	sp, #8
 8014ffe:	af00      	add	r7, sp, #0
 8015000:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8015002:	6878      	ldr	r0, [r7, #4]
 8015004:	f000 f839 	bl	801507a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSD_>
  }
 8015008:	bf00      	nop
 801500a:	3708      	adds	r7, #8
 801500c:	46bd      	mov	sp, r7
 801500e:	bd80      	pop	{r7, pc}

08015010 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>:
  explicit product_evaluator(const XprType& xpr)
 8015010:	b580      	push	{r7, lr}
 8015012:	b082      	sub	sp, #8
 8015014:	af00      	add	r7, sp, #0
 8015016:	6078      	str	r0, [r7, #4]
 8015018:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 801501a:	6878      	ldr	r0, [r7, #4]
 801501c:	f000 f854 	bl	80150c8 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 8015020:	6838      	ldr	r0, [r7, #0]
 8015022:	f000 f839 	bl	8015098 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3lhsEv>
 8015026:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 801502c:	6838      	ldr	r0, [r7, #0]
 801502e:	f000 f83f 	bl	80150b0 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3rhsEv>
 8015032:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	605a      	str	r2, [r3, #4]
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 8015042:	4619      	mov	r1, r3
 8015044:	4610      	mov	r0, r2
 8015046:	f7fc fde3 	bl	8011c10 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	685b      	ldr	r3, [r3, #4]
      m_innerDim(xpr.lhs().cols())
 8015054:	4619      	mov	r1, r3
 8015056:	4610      	mov	r0, r2
 8015058:	f7f2 fca2 	bl	80079a0 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 801505c:	6838      	ldr	r0, [r7, #0]
 801505e:	f000 f81b 	bl	8015098 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3lhsEv>
 8015062:	4603      	mov	r3, r0
 8015064:	4618      	mov	r0, r3
 8015066:	f7f0 f9bb 	bl	80053e0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 801506a:	4602      	mov	r2, r0
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	611a      	str	r2, [r3, #16]
  }
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	4618      	mov	r0, r3
 8015074:	3708      	adds	r7, #8
 8015076:	46bd      	mov	sp, r7
 8015078:	bd80      	pop	{r7, pc}

0801507a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 801507a:	b580      	push	{r7, lr}
 801507c:	b082      	sub	sp, #8
 801507e:	af00      	add	r7, sp, #0
 8015080:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8015082:	2100      	movs	r1, #0
 8015084:	6878      	ldr	r0, [r7, #4]
 8015086:	f000 f82a 	bl	80150de <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 801508a:	6878      	ldr	r0, [r7, #4]
 801508c:	f000 f84a 	bl	8015124 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSD_>
  }
 8015090:	bf00      	nop
 8015092:	3708      	adds	r7, #8
 8015094:	46bd      	mov	sp, r7
 8015096:	bd80      	pop	{r7, pc}

08015098 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8015098:	b480      	push	{r7}
 801509a:	b083      	sub	sp, #12
 801509c:	af00      	add	r7, sp, #0
 801509e:	6078      	str	r0, [r7, #4]
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	681b      	ldr	r3, [r3, #0]
 80150a4:	4618      	mov	r0, r3
 80150a6:	370c      	adds	r7, #12
 80150a8:	46bd      	mov	sp, r7
 80150aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ae:	4770      	bx	lr

080150b0 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 80150b0:	b480      	push	{r7}
 80150b2:	b083      	sub	sp, #12
 80150b4:	af00      	add	r7, sp, #0
 80150b6:	6078      	str	r0, [r7, #4]
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	685b      	ldr	r3, [r3, #4]
 80150bc:	4618      	mov	r0, r3
 80150be:	370c      	adds	r7, #12
 80150c0:	46bd      	mov	sp, r7
 80150c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150c6:	4770      	bx	lr

080150c8 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80150c8:	b480      	push	{r7}
 80150ca:	b083      	sub	sp, #12
 80150cc:	af00      	add	r7, sp, #0
 80150ce:	6078      	str	r0, [r7, #4]
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	4618      	mov	r0, r3
 80150d4:	370c      	adds	r7, #12
 80150d6:	46bd      	mov	sp, r7
 80150d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150dc:	4770      	bx	lr

080150de <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 80150de:	b5b0      	push	{r4, r5, r7, lr}
 80150e0:	b084      	sub	sp, #16
 80150e2:	af00      	add	r7, sp, #0
 80150e4:	6078      	str	r0, [r7, #4]
 80150e6:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	689c      	ldr	r4, [r3, #8]
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	6839      	ldr	r1, [r7, #0]
 80150f2:	4618      	mov	r0, r3
 80150f4:	f000 f825 	bl	8015142 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE8coeffRefEi>
 80150f8:	4605      	mov	r5, r0
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	685b      	ldr	r3, [r3, #4]
 80150fe:	6839      	ldr	r1, [r7, #0]
 8015100:	4618      	mov	r0, r3
 8015102:	f000 f82e 	bl	8015162 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffE5coeffEi>
 8015106:	eef0 7a40 	vmov.f32	s15, s0
 801510a:	edc7 7a03 	vstr	s15, [r7, #12]
 801510e:	f107 030c 	add.w	r3, r7, #12
 8015112:	461a      	mov	r2, r3
 8015114:	4629      	mov	r1, r5
 8015116:	4620      	mov	r0, r4
 8015118:	f7f3 fb4a 	bl	80087b0 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 801511c:	bf00      	nop
 801511e:	3710      	adds	r7, #16
 8015120:	46bd      	mov	sp, r7
 8015122:	bdb0      	pop	{r4, r5, r7, pc}

08015124 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8015124:	b580      	push	{r7, lr}
 8015126:	b082      	sub	sp, #8
 8015128:	af00      	add	r7, sp, #0
 801512a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 801512c:	2101      	movs	r1, #1
 801512e:	6878      	ldr	r0, [r7, #4]
 8015130:	f7ff ffd5 	bl	80150de <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8015134:	6878      	ldr	r0, [r7, #4]
 8015136:	f000 f84d 	bl	80151d4 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSD_>
  }
 801513a:	bf00      	nop
 801513c:	3708      	adds	r7, #8
 801513e:	46bd      	mov	sp, r7
 8015140:	bd80      	pop	{r7, pc}

08015142 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE8coeffRefEi>:
  Scalar& coeffRef(Index index)
 8015142:	b480      	push	{r7}
 8015144:	b083      	sub	sp, #12
 8015146:	af00      	add	r7, sp, #0
 8015148:	6078      	str	r0, [r7, #4]
 801514a:	6039      	str	r1, [r7, #0]
    return const_cast<Scalar*>(m_d.data)[index];
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	681a      	ldr	r2, [r3, #0]
 8015150:	683b      	ldr	r3, [r7, #0]
 8015152:	009b      	lsls	r3, r3, #2
 8015154:	4413      	add	r3, r2
  }
 8015156:	4618      	mov	r0, r3
 8015158:	370c      	adds	r7, #12
 801515a:	46bd      	mov	sp, r7
 801515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015160:	4770      	bx	lr

08015162 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffE5coeffEi>:
  const CoeffReturnType coeff(Index index) const
 8015162:	b580      	push	{r7, lr}
 8015164:	b0a4      	sub	sp, #144	; 0x90
 8015166:	af00      	add	r7, sp, #0
 8015168:	6078      	str	r0, [r7, #4]
 801516a:	6039      	str	r1, [r7, #0]
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 801516c:	2300      	movs	r3, #0
 801516e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 8015172:	683b      	ldr	r3, [r7, #0]
 8015174:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	6819      	ldr	r1, [r3, #0]
 801517c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015180:	2200      	movs	r2, #0
 8015182:	4618      	mov	r0, r3
 8015184:	f000 f835 	bl	80151f2 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE3rowEi>
 8015188:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801518c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8015190:	4611      	mov	r1, r2
 8015192:	4618      	mov	r0, r3
 8015194:	f000 f840 	bl	8015218 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE9transposeEv>
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	6859      	ldr	r1, [r3, #4]
 801519c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80151a0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80151a4:	4618      	mov	r0, r3
 80151a6:	f7f7 f94a 	bl	800c43e <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3colEi>
 80151aa:	f107 030c 	add.w	r3, r7, #12
 80151ae:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80151b2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80151b6:	4618      	mov	r0, r3
 80151b8:	f000 f83f 	bl	801523a <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEE12cwiseProductINS2_IKNS3_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 80151bc:	f107 030c 	add.w	r3, r7, #12
 80151c0:	4618      	mov	r0, r3
 80151c2:	f000 f868 	bl	8015296 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE3sumEv>
 80151c6:	eef0 7a40 	vmov.f32	s15, s0
  }
 80151ca:	eeb0 0a67 	vmov.f32	s0, s15
 80151ce:	3790      	adds	r7, #144	; 0x90
 80151d0:	46bd      	mov	sp, r7
 80151d2:	bd80      	pop	{r7, pc}

080151d4 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80151d4:	b580      	push	{r7, lr}
 80151d6:	b082      	sub	sp, #8
 80151d8:	af00      	add	r7, sp, #0
 80151da:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80151dc:	2102      	movs	r1, #2
 80151de:	6878      	ldr	r0, [r7, #4]
 80151e0:	f7ff ff7d 	bl	80150de <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80151e4:	6878      	ldr	r0, [r7, #4]
 80151e6:	f000 f871 	bl	80152cc <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSD_>
  }
 80151ea:	bf00      	nop
 80151ec:	3708      	adds	r7, #8
 80151ee:	46bd      	mov	sp, r7
 80151f0:	bd80      	pop	{r7, pc}

080151f2 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE3rowEi>:
ConstRowXpr row(Index i) const
 80151f2:	b580      	push	{r7, lr}
 80151f4:	b084      	sub	sp, #16
 80151f6:	af00      	add	r7, sp, #0
 80151f8:	60f8      	str	r0, [r7, #12]
 80151fa:	60b9      	str	r1, [r7, #8]
 80151fc:	607a      	str	r2, [r7, #4]
  return ConstRowXpr(derived(), i);
 80151fe:	68b8      	ldr	r0, [r7, #8]
 8015200:	f7f0 fe12 	bl	8005e28 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8015204:	4603      	mov	r3, r0
 8015206:	687a      	ldr	r2, [r7, #4]
 8015208:	4619      	mov	r1, r3
 801520a:	68f8      	ldr	r0, [r7, #12]
 801520c:	f000 f868 	bl	80152e0 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i>
}
 8015210:	68f8      	ldr	r0, [r7, #12]
 8015212:	3710      	adds	r7, #16
 8015214:	46bd      	mov	sp, r7
 8015216:	bd80      	pop	{r7, pc}

08015218 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 8015218:	b580      	push	{r7, lr}
 801521a:	b082      	sub	sp, #8
 801521c:	af00      	add	r7, sp, #0
 801521e:	6078      	str	r0, [r7, #4]
 8015220:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 8015222:	6838      	ldr	r0, [r7, #0]
 8015224:	f000 f886 	bl	8015334 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE7derivedEv>
 8015228:	4603      	mov	r3, r0
 801522a:	4619      	mov	r1, r3
 801522c:	6878      	ldr	r0, [r7, #4]
 801522e:	f000 f8a4 	bl	801537a <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERS6_>
}
 8015232:	6878      	ldr	r0, [r7, #4]
 8015234:	3708      	adds	r7, #8
 8015236:	46bd      	mov	sp, r7
 8015238:	bd80      	pop	{r7, pc}

0801523a <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEE12cwiseProductINS2_IKNS3_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 801523a:	b5b0      	push	{r4, r5, r7, lr}
 801523c:	b086      	sub	sp, #24
 801523e:	af00      	add	r7, sp, #0
 8015240:	60f8      	str	r0, [r7, #12]
 8015242:	60b9      	str	r1, [r7, #8]
 8015244:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 8015246:	68b8      	ldr	r0, [r7, #8]
 8015248:	f000 f8ae 	bl	80153a8 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEE7derivedEv>
 801524c:	4604      	mov	r4, r0
 801524e:	6878      	ldr	r0, [r7, #4]
 8015250:	f7f7 fec4 	bl	800cfdc <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7derivedEv>
 8015254:	4605      	mov	r5, r0
 8015256:	f107 0314 	add.w	r3, r7, #20
 801525a:	4618      	mov	r0, r3
 801525c:	f7f0 f9aa 	bl	80055b4 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 8015260:	f107 0314 	add.w	r3, r7, #20
 8015264:	462a      	mov	r2, r5
 8015266:	4621      	mov	r1, r4
 8015268:	68f8      	ldr	r0, [r7, #12]
 801526a:	f000 f8db 	bl	8015424 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_>
}
 801526e:	68f8      	ldr	r0, [r7, #12]
 8015270:	3718      	adds	r7, #24
 8015272:	46bd      	mov	sp, r7
 8015274:	bdb0      	pop	{r4, r5, r7, pc}

08015276 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8015276:	b580      	push	{r7, lr}
 8015278:	b082      	sub	sp, #8
 801527a:	af00      	add	r7, sp, #0
 801527c:	6078      	str	r0, [r7, #4]
 801527e:	6878      	ldr	r0, [r7, #4]
 8015280:	f000 f92e 	bl	80154e0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 8015284:	4603      	mov	r3, r0
 8015286:	4618      	mov	r0, r3
 8015288:	f000 f935 	bl	80154f6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE4rowsEv>
 801528c:	4603      	mov	r3, r0
 801528e:	4618      	mov	r0, r3
 8015290:	3708      	adds	r7, #8
 8015292:	46bd      	mov	sp, r7
 8015294:	bd80      	pop	{r7, pc}

08015296 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 8015296:	b590      	push	{r4, r7, lr}
 8015298:	b085      	sub	sp, #20
 801529a:	af00      	add	r7, sp, #0
 801529c:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 801529e:	6878      	ldr	r0, [r7, #4]
 80152a0:	f000 f91e 	bl	80154e0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 80152a4:	4604      	mov	r4, r0
 80152a6:	f107 030c 	add.w	r3, r7, #12
 80152aa:	4618      	mov	r0, r3
 80152ac:	f7f0 fc79 	bl	8005ba2 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 80152b0:	f107 030c 	add.w	r3, r7, #12
 80152b4:	4619      	mov	r1, r3
 80152b6:	4620      	mov	r0, r4
 80152b8:	f000 f9c4 	bl	8015644 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 80152bc:	eef0 7a40 	vmov.f32	s15, s0
 80152c0:	bf00      	nop
}
 80152c2:	eeb0 0a67 	vmov.f32	s0, s15
 80152c6:	3714      	adds	r7, #20
 80152c8:	46bd      	mov	sp, r7
 80152ca:	bd90      	pop	{r4, r7, pc}

080152cc <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 80152cc:	b480      	push	{r7}
 80152ce:	b083      	sub	sp, #12
 80152d0:	af00      	add	r7, sp, #0
 80152d2:	6078      	str	r0, [r7, #4]
 80152d4:	bf00      	nop
 80152d6:	370c      	adds	r7, #12
 80152d8:	46bd      	mov	sp, r7
 80152da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152de:	4770      	bx	lr

080152e0 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 80152e0:	b580      	push	{r7, lr}
 80152e2:	b084      	sub	sp, #16
 80152e4:	af00      	add	r7, sp, #0
 80152e6:	60f8      	str	r0, [r7, #12]
 80152e8:	60b9      	str	r1, [r7, #8]
 80152ea:	607a      	str	r2, [r7, #4]
 80152ec:	68fb      	ldr	r3, [r7, #12]
 80152ee:	687a      	ldr	r2, [r7, #4]
 80152f0:	68b9      	ldr	r1, [r7, #8]
 80152f2:	4618      	mov	r0, r3
 80152f4:	f000 f9ec 	bl	80156d0 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	db07      	blt.n	801530e <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x2e>
 80152fe:	68bb      	ldr	r3, [r7, #8]
 8015300:	4618      	mov	r0, r3
 8015302:	f7f0 f878 	bl	80053f6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8015306:	4602      	mov	r2, r0
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	4293      	cmp	r3, r2
 801530c:	db05      	blt.n	801531a <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x3a>
 801530e:	4b06      	ldr	r3, [pc, #24]	; (8015328 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x48>)
 8015310:	4a06      	ldr	r2, [pc, #24]	; (801532c <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x4c>)
 8015312:	2178      	movs	r1, #120	; 0x78
 8015314:	4806      	ldr	r0, [pc, #24]	; (8015330 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x50>)
 8015316:	f008 fdc5 	bl	801dea4 <__assert_func>
 801531a:	bf00      	nop
    }
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	4618      	mov	r0, r3
 8015320:	3710      	adds	r7, #16
 8015322:	46bd      	mov	sp, r7
 8015324:	bd80      	pop	{r7, pc}
 8015326:	bf00      	nop
 8015328:	08024890 	.word	0x08024890
 801532c:	08029910 	.word	0x08029910
 8015330:	08024a14 	.word	0x08024a14

08015334 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8015334:	b480      	push	{r7}
 8015336:	b083      	sub	sp, #12
 8015338:	af00      	add	r7, sp, #0
 801533a:	6078      	str	r0, [r7, #4]
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	4618      	mov	r0, r3
 8015340:	370c      	adds	r7, #12
 8015342:	46bd      	mov	sp, r7
 8015344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015348:	4770      	bx	lr

0801534a <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>:
 801534a:	b580      	push	{r7, lr}
 801534c:	b082      	sub	sp, #8
 801534e:	af00      	add	r7, sp, #0
 8015350:	6078      	str	r0, [r7, #4]
 8015352:	6878      	ldr	r0, [r7, #4]
 8015354:	f000 f9cd 	bl	80156f2 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	4618      	mov	r0, r3
 801535c:	3708      	adds	r7, #8
 801535e:	46bd      	mov	sp, r7
 8015360:	bd80      	pop	{r7, pc}

08015362 <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 8015362:	b580      	push	{r7, lr}
 8015364:	b082      	sub	sp, #8
 8015366:	af00      	add	r7, sp, #0
 8015368:	6078      	str	r0, [r7, #4]
 801536a:	6878      	ldr	r0, [r7, #4]
 801536c:	f7ff ffed 	bl	801534a <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	4618      	mov	r0, r3
 8015374:	3708      	adds	r7, #8
 8015376:	46bd      	mov	sp, r7
 8015378:	bd80      	pop	{r7, pc}

0801537a <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERS6_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 801537a:	b5b0      	push	{r4, r5, r7, lr}
 801537c:	b082      	sub	sp, #8
 801537e:	af00      	add	r7, sp, #0
 8015380:	6078      	str	r0, [r7, #4]
 8015382:	6039      	str	r1, [r7, #0]
 8015384:	6878      	ldr	r0, [r7, #4]
 8015386:	f7ff ffec 	bl	8015362 <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEENS_5DenseEEC1Ev>
 801538a:	687a      	ldr	r2, [r7, #4]
 801538c:	683b      	ldr	r3, [r7, #0]
 801538e:	4614      	mov	r4, r2
 8015390:	461d      	mov	r5, r3
 8015392:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015394:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015396:	e895 0003 	ldmia.w	r5, {r0, r1}
 801539a:	e884 0003 	stmia.w	r4, {r0, r1}
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	4618      	mov	r0, r3
 80153a2:	3708      	adds	r7, #8
 80153a4:	46bd      	mov	sp, r7
 80153a6:	bdb0      	pop	{r4, r5, r7, pc}

080153a8 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEE7derivedEv>:
 80153a8:	b480      	push	{r7}
 80153aa:	b083      	sub	sp, #12
 80153ac:	af00      	add	r7, sp, #0
 80153ae:	6078      	str	r0, [r7, #4]
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	4618      	mov	r0, r3
 80153b4:	370c      	adds	r7, #12
 80153b6:	46bd      	mov	sp, r7
 80153b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153bc:	4770      	bx	lr

080153be <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>:
 80153be:	b580      	push	{r7, lr}
 80153c0:	b082      	sub	sp, #8
 80153c2:	af00      	add	r7, sp, #0
 80153c4:	6078      	str	r0, [r7, #4]
 80153c6:	6878      	ldr	r0, [r7, #4]
 80153c8:	f000 f99e 	bl	8015708 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	4618      	mov	r0, r3
 80153d0:	3708      	adds	r7, #8
 80153d2:	46bd      	mov	sp, r7
 80153d4:	bd80      	pop	{r7, pc}

080153d6 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 80153d6:	b580      	push	{r7, lr}
 80153d8:	b082      	sub	sp, #8
 80153da:	af00      	add	r7, sp, #0
 80153dc:	6078      	str	r0, [r7, #4]
 80153de:	6878      	ldr	r0, [r7, #4]
 80153e0:	f7ff ffed 	bl	80153be <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	4618      	mov	r0, r3
 80153e8:	3708      	adds	r7, #8
 80153ea:	46bd      	mov	sp, r7
 80153ec:	bd80      	pop	{r7, pc}

080153ee <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 80153ee:	b580      	push	{r7, lr}
 80153f0:	b082      	sub	sp, #8
 80153f2:	af00      	add	r7, sp, #0
 80153f4:	6078      	str	r0, [r7, #4]
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	4618      	mov	r0, r3
 80153fa:	f000 f990 	bl	801571e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4colsEv>
 80153fe:	4603      	mov	r3, r0
 8015400:	4618      	mov	r0, r3
 8015402:	3708      	adds	r7, #8
 8015404:	46bd      	mov	sp, r7
 8015406:	bd80      	pop	{r7, pc}

08015408 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 8015408:	b580      	push	{r7, lr}
 801540a:	b082      	sub	sp, #8
 801540c:	af00      	add	r7, sp, #0
 801540e:	6078      	str	r0, [r7, #4]
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	4618      	mov	r0, r3
 8015414:	f000 f98e 	bl	8015734 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4rowsEv>
 8015418:	4603      	mov	r3, r0
 801541a:	4618      	mov	r0, r3
 801541c:	3708      	adds	r7, #8
 801541e:	46bd      	mov	sp, r7
 8015420:	bd80      	pop	{r7, pc}
	...

08015424 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8015424:	b5b0      	push	{r4, r5, r7, lr}
 8015426:	b084      	sub	sp, #16
 8015428:	af00      	add	r7, sp, #0
 801542a:	60f8      	str	r0, [r7, #12]
 801542c:	60b9      	str	r1, [r7, #8]
 801542e:	607a      	str	r2, [r7, #4]
 8015430:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8015432:	68f8      	ldr	r0, [r7, #12]
 8015434:	f7ff ffcf 	bl	80153d6 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS_5DenseEEC1Ev>
 8015438:	68fa      	ldr	r2, [r7, #12]
 801543a:	68bb      	ldr	r3, [r7, #8]
 801543c:	4614      	mov	r4, r2
 801543e:	461d      	mov	r5, r3
 8015440:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015442:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015444:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015448:	e884 0003 	stmia.w	r4, {r0, r1}
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	f103 0218 	add.w	r2, r3, #24
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	4614      	mov	r4, r2
 8015456:	461d      	mov	r5, r3
 8015458:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801545a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801545c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015460:	e884 0003 	stmia.w	r4, {r0, r1}
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	3330      	adds	r3, #48	; 0x30
 8015468:	6839      	ldr	r1, [r7, #0]
 801546a:	4618      	mov	r0, r3
 801546c:	f7f0 f92c 	bl	80056c8 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8015470:	68b8      	ldr	r0, [r7, #8]
 8015472:	f7ff ffbc 	bl	80153ee <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4rowsEv>
 8015476:	4604      	mov	r4, r0
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	4618      	mov	r0, r3
 801547c:	f7f7 fdd1 	bl	800d022 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4rowsEv>
 8015480:	4603      	mov	r3, r0
 8015482:	429c      	cmp	r4, r3
 8015484:	d10a      	bne.n	801549c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x78>
 8015486:	68b8      	ldr	r0, [r7, #8]
 8015488:	f7ff ffbe 	bl	8015408 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4colsEv>
 801548c:	4604      	mov	r4, r0
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	4618      	mov	r0, r3
 8015492:	f7f7 fdd1 	bl	800d038 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4colsEv>
 8015496:	4603      	mov	r3, r0
 8015498:	429c      	cmp	r4, r3
 801549a:	d005      	beq.n	80154a8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x84>
 801549c:	4b05      	ldr	r3, [pc, #20]	; (80154b4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x90>)
 801549e:	4a06      	ldr	r2, [pc, #24]	; (80154b8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x94>)
 80154a0:	2174      	movs	r1, #116	; 0x74
 80154a2:	4806      	ldr	r0, [pc, #24]	; (80154bc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x98>)
 80154a4:	f008 fcfe 	bl	801dea4 <__assert_func>
    }
 80154a8:	68fb      	ldr	r3, [r7, #12]
 80154aa:	4618      	mov	r0, r3
 80154ac:	3710      	adds	r7, #16
 80154ae:	46bd      	mov	sp, r7
 80154b0:	bdb0      	pop	{r4, r5, r7, pc}
 80154b2:	bf00      	nop
 80154b4:	0801fd0c 	.word	0x0801fd0c
 80154b8:	080299ec 	.word	0x080299ec
 80154bc:	0801ff70 	.word	0x0801ff70

080154c0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 80154c0:	b580      	push	{r7, lr}
 80154c2:	b082      	sub	sp, #8
 80154c4:	af00      	add	r7, sp, #0
 80154c6:	6078      	str	r0, [r7, #4]
 80154c8:	6878      	ldr	r0, [r7, #4]
 80154ca:	f000 f809 	bl	80154e0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 80154ce:	4603      	mov	r3, r0
 80154d0:	4618      	mov	r0, r3
 80154d2:	f000 f93a 	bl	801574a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE4colsEv>
 80154d6:	4603      	mov	r3, r0
 80154d8:	4618      	mov	r0, r3
 80154da:	3708      	adds	r7, #8
 80154dc:	46bd      	mov	sp, r7
 80154de:	bd80      	pop	{r7, pc}

080154e0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 80154e0:	b480      	push	{r7}
 80154e2:	b083      	sub	sp, #12
 80154e4:	af00      	add	r7, sp, #0
 80154e6:	6078      	str	r0, [r7, #4]
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	4618      	mov	r0, r3
 80154ec:	370c      	adds	r7, #12
 80154ee:	46bd      	mov	sp, r7
 80154f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154f4:	4770      	bx	lr

080154f6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 80154f6:	b580      	push	{r7, lr}
 80154f8:	b082      	sub	sp, #8
 80154fa:	af00      	add	r7, sp, #0
 80154fc:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	4618      	mov	r0, r3
 8015502:	f7ff ff74 	bl	80153ee <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4rowsEv>
 8015506:	4603      	mov	r3, r0
    }
 8015508:	4618      	mov	r0, r3
 801550a:	3708      	adds	r7, #8
 801550c:	46bd      	mov	sp, r7
 801550e:	bd80      	pop	{r7, pc}

08015510 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_ED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 8015510:	b580      	push	{r7, lr}
 8015512:	b082      	sub	sp, #8
 8015514:	af00      	add	r7, sp, #0
 8015516:	6078      	str	r0, [r7, #4]
 8015518:	6878      	ldr	r0, [r7, #4]
 801551a:	f000 f948 	bl	80157ae <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	4618      	mov	r0, r3
 8015522:	3708      	adds	r7, #8
 8015524:	46bd      	mov	sp, r7
 8015526:	bd80      	pop	{r7, pc}

08015528 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 8015528:	b580      	push	{r7, lr}
 801552a:	b082      	sub	sp, #8
 801552c:	af00      	add	r7, sp, #0
 801552e:	6078      	str	r0, [r7, #4]
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	4618      	mov	r0, r3
 8015534:	f7ff ffec 	bl	8015510 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_ED1Ev>
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	4618      	mov	r0, r3
 801553c:	3708      	adds	r7, #8
 801553e:	46bd      	mov	sp, r7
 8015540:	bd80      	pop	{r7, pc}

08015542 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 8015542:	b580      	push	{r7, lr}
 8015544:	b082      	sub	sp, #8
 8015546:	af00      	add	r7, sp, #0
 8015548:	6078      	str	r0, [r7, #4]
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	4618      	mov	r0, r3
 801554e:	f7ff ffeb 	bl	8015528 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EED1Ev>
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	4618      	mov	r0, r3
 8015556:	3708      	adds	r7, #8
 8015558:	46bd      	mov	sp, r7
 801555a:	bd80      	pop	{r7, pc}

0801555c <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>:
struct evaluator<const T>
 801555c:	b580      	push	{r7, lr}
 801555e:	b082      	sub	sp, #8
 8015560:	af00      	add	r7, sp, #0
 8015562:	6078      	str	r0, [r7, #4]
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	4618      	mov	r0, r3
 8015568:	f7ff ffeb 	bl	8015542 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	4618      	mov	r0, r3
 8015570:	3708      	adds	r7, #8
 8015572:	46bd      	mov	sp, r7
 8015574:	bd80      	pop	{r7, pc}

08015576 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 8015576:	b580      	push	{r7, lr}
 8015578:	b082      	sub	sp, #8
 801557a:	af00      	add	r7, sp, #0
 801557c:	6078      	str	r0, [r7, #4]
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	4618      	mov	r0, r3
 8015582:	f7ff ffeb 	bl	801555c <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>
 8015586:	6878      	ldr	r0, [r7, #4]
 8015588:	f000 f906 	bl	8015798 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	4618      	mov	r0, r3
 8015590:	3708      	adds	r7, #8
 8015592:	46bd      	mov	sp, r7
 8015594:	bd80      	pop	{r7, pc}

08015596 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 8015596:	b580      	push	{r7, lr}
 8015598:	b082      	sub	sp, #8
 801559a:	af00      	add	r7, sp, #0
 801559c:	6078      	str	r0, [r7, #4]
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	4618      	mov	r0, r3
 80155a2:	f7ff ffe8 	bl	8015576 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfED1Ev>
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	4618      	mov	r0, r3
 80155aa:	3708      	adds	r7, #8
 80155ac:	46bd      	mov	sp, r7
 80155ae:	bd80      	pop	{r7, pc}

080155b0 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>:
struct evaluator<const T>
 80155b0:	b580      	push	{r7, lr}
 80155b2:	b082      	sub	sp, #8
 80155b4:	af00      	add	r7, sp, #0
 80155b6:	6078      	str	r0, [r7, #4]
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	4618      	mov	r0, r3
 80155bc:	f7ff ffeb 	bl	8015596 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	4618      	mov	r0, r3
 80155c4:	3708      	adds	r7, #8
 80155c6:	46bd      	mov	sp, r7
 80155c8:	bd80      	pop	{r7, pc}

080155ca <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 80155ca:	b580      	push	{r7, lr}
 80155cc:	b082      	sub	sp, #8
 80155ce:	af00      	add	r7, sp, #0
 80155d0:	6078      	str	r0, [r7, #4]
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	330c      	adds	r3, #12
 80155d6:	4618      	mov	r0, r3
 80155d8:	f7f7 fdd6 	bl	800d188 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	3304      	adds	r3, #4
 80155e0:	4618      	mov	r0, r3
 80155e2:	f7ff ffe5 	bl	80155b0 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	4618      	mov	r0, r3
 80155ea:	3708      	adds	r7, #8
 80155ec:	46bd      	mov	sp, r7
 80155ee:	bd80      	pop	{r7, pc}

080155f0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 80155f0:	b580      	push	{r7, lr}
 80155f2:	b082      	sub	sp, #8
 80155f4:	af00      	add	r7, sp, #0
 80155f6:	6078      	str	r0, [r7, #4]
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	4618      	mov	r0, r3
 80155fc:	f7ff ffe5 	bl	80155ca <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 8015600:	6878      	ldr	r0, [r7, #4]
 8015602:	f000 f8be 	bl	8015782 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	4618      	mov	r0, r3
 801560a:	3708      	adds	r7, #8
 801560c:	46bd      	mov	sp, r7
 801560e:	bd80      	pop	{r7, pc}

08015610 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8015610:	b580      	push	{r7, lr}
 8015612:	b082      	sub	sp, #8
 8015614:	af00      	add	r7, sp, #0
 8015616:	6078      	str	r0, [r7, #4]
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	4618      	mov	r0, r3
 801561c:	f7ff ffe8 	bl	80155f0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	4618      	mov	r0, r3
 8015624:	3708      	adds	r7, #8
 8015626:	46bd      	mov	sp, r7
 8015628:	bd80      	pop	{r7, pc}

0801562a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 801562a:	b580      	push	{r7, lr}
 801562c:	b082      	sub	sp, #8
 801562e:	af00      	add	r7, sp, #0
 8015630:	6078      	str	r0, [r7, #4]
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	4618      	mov	r0, r3
 8015636:	f7ff ffeb 	bl	8015610 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	4618      	mov	r0, r3
 801563e:	3708      	adds	r7, #8
 8015640:	46bd      	mov	sp, r7
 8015642:	bd80      	pop	{r7, pc}

08015644 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 8015644:	b580      	push	{r7, lr}
 8015646:	ed2d 8b02 	vpush	{d8}
 801564a:	b088      	sub	sp, #32
 801564c:	af00      	add	r7, sp, #0
 801564e:	6078      	str	r0, [r7, #4]
 8015650:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 8015652:	6878      	ldr	r0, [r7, #4]
 8015654:	f7ff fe0f 	bl	8015276 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE4rowsEv>
 8015658:	4603      	mov	r3, r0
 801565a:	2b00      	cmp	r3, #0
 801565c:	dd05      	ble.n	801566a <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 801565e:	6878      	ldr	r0, [r7, #4]
 8015660:	f7ff ff2e 	bl	80154c0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE4colsEv>
 8015664:	4603      	mov	r3, r0
 8015666:	2b00      	cmp	r3, #0
 8015668:	dc06      	bgt.n	8015678 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 801566a:	4b16      	ldr	r3, [pc, #88]	; (80156c4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 801566c:	4a16      	ldr	r2, [pc, #88]	; (80156c8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 801566e:	f240 119b 	movw	r1, #411	; 0x19b
 8015672:	4816      	ldr	r0, [pc, #88]	; (80156cc <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 8015674:	f008 fc16 	bl	801dea4 <__assert_func>
 8015678:	bf00      	nop
  ThisEvaluator thisEval(derived());
 801567a:	6878      	ldr	r0, [r7, #4]
 801567c:	f7ff ff30 	bl	80154e0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 8015680:	4602      	mov	r2, r0
 8015682:	f107 030c 	add.w	r3, r7, #12
 8015686:	4611      	mov	r1, r2
 8015688:	4618      	mov	r0, r3
 801568a:	f000 f86b 	bl	8015764 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 801568e:	6878      	ldr	r0, [r7, #4]
 8015690:	f7ff ff26 	bl	80154e0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 8015694:	4602      	mov	r2, r0
 8015696:	f107 030c 	add.w	r3, r7, #12
 801569a:	6839      	ldr	r1, [r7, #0]
 801569c:	4618      	mov	r0, r3
 801569e:	f000 f891 	bl	80157c4 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 80156a2:	eeb0 8a40 	vmov.f32	s16, s0
 80156a6:	bf00      	nop
  ThisEvaluator thisEval(derived());
 80156a8:	f107 030c 	add.w	r3, r7, #12
 80156ac:	4618      	mov	r0, r3
 80156ae:	f7ff ffbc 	bl	801562a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 80156b2:	eef0 7a48 	vmov.f32	s15, s16
}
 80156b6:	eeb0 0a67 	vmov.f32	s0, s15
 80156ba:	3720      	adds	r7, #32
 80156bc:	46bd      	mov	sp, r7
 80156be:	ecbd 8b02 	vpop	{d8}
 80156c2:	bd80      	pop	{r7, pc}
 80156c4:	08024d8c 	.word	0x08024d8c
 80156c8:	08029c34 	.word	0x08029c34
 80156cc:	08024f98 	.word	0x08024f98

080156d0 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ENS_5DenseEEC1ERS3_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 80156d0:	b580      	push	{r7, lr}
 80156d2:	b084      	sub	sp, #16
 80156d4:	af00      	add	r7, sp, #0
 80156d6:	60f8      	str	r0, [r7, #12]
 80156d8:	60b9      	str	r1, [r7, #8]
 80156da:	607a      	str	r2, [r7, #4]
 80156dc:	68fb      	ldr	r3, [r7, #12]
 80156de:	687a      	ldr	r2, [r7, #4]
 80156e0:	68b9      	ldr	r1, [r7, #8]
 80156e2:	4618      	mov	r0, r3
 80156e4:	f000 f87f 	bl	80157e6 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EEC1ERS4_i>
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	4618      	mov	r0, r3
 80156ec:	3710      	adds	r7, #16
 80156ee:	46bd      	mov	sp, r7
 80156f0:	bd80      	pop	{r7, pc}

080156f2 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80156f2:	b480      	push	{r7}
 80156f4:	b083      	sub	sp, #12
 80156f6:	af00      	add	r7, sp, #0
 80156f8:	6078      	str	r0, [r7, #4]
    }
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	4618      	mov	r0, r3
 80156fe:	370c      	adds	r7, #12
 8015700:	46bd      	mov	sp, r7
 8015702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015706:	4770      	bx	lr

08015708 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8015708:	b480      	push	{r7}
 801570a:	b083      	sub	sp, #12
 801570c:	af00      	add	r7, sp, #0
 801570e:	6078      	str	r0, [r7, #4]
    }
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	4618      	mov	r0, r3
 8015714:	370c      	adds	r7, #12
 8015716:	46bd      	mov	sp, r7
 8015718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801571c:	4770      	bx	lr

0801571e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 801571e:	b580      	push	{r7, lr}
 8015720:	b082      	sub	sp, #8
 8015722:	af00      	add	r7, sp, #0
 8015724:	6078      	str	r0, [r7, #4]
 8015726:	f7f1 fa6e 	bl	8006c06 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 801572a:	4603      	mov	r3, r0
 801572c:	4618      	mov	r0, r3
 801572e:	3708      	adds	r7, #8
 8015730:	46bd      	mov	sp, r7
 8015732:	bd80      	pop	{r7, pc}

08015734 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 8015734:	b580      	push	{r7, lr}
 8015736:	b082      	sub	sp, #8
 8015738:	af00      	add	r7, sp, #0
 801573a:	6078      	str	r0, [r7, #4]
 801573c:	f7f1 fa6b 	bl	8006c16 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8015740:	4603      	mov	r3, r0
 8015742:	4618      	mov	r0, r3
 8015744:	3708      	adds	r7, #8
 8015746:	46bd      	mov	sp, r7
 8015748:	bd80      	pop	{r7, pc}

0801574a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 801574a:	b580      	push	{r7, lr}
 801574c:	b082      	sub	sp, #8
 801574e:	af00      	add	r7, sp, #0
 8015750:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	4618      	mov	r0, r3
 8015756:	f7ff fe57 	bl	8015408 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4colsEv>
 801575a:	4603      	mov	r3, r0
    }
 801575c:	4618      	mov	r0, r3
 801575e:	3708      	adds	r7, #8
 8015760:	46bd      	mov	sp, r7
 8015762:	bd80      	pop	{r7, pc}

08015764 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 8015764:	b580      	push	{r7, lr}
 8015766:	b082      	sub	sp, #8
 8015768:	af00      	add	r7, sp, #0
 801576a:	6078      	str	r0, [r7, #4]
 801576c:	6039      	str	r1, [r7, #0]
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	6839      	ldr	r1, [r7, #0]
 8015772:	4618      	mov	r0, r3
 8015774:	f000 f86d 	bl	8015852 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1ERKSI_>
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	4618      	mov	r0, r3
 801577c:	3708      	adds	r7, #8
 801577e:	46bd      	mov	sp, r7
 8015780:	bd80      	pop	{r7, pc}

08015782 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8015782:	b480      	push	{r7}
 8015784:	b083      	sub	sp, #12
 8015786:	af00      	add	r7, sp, #0
 8015788:	6078      	str	r0, [r7, #4]
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	4618      	mov	r0, r3
 801578e:	370c      	adds	r7, #12
 8015790:	46bd      	mov	sp, r7
 8015792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015796:	4770      	bx	lr

08015798 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>:
 8015798:	b480      	push	{r7}
 801579a:	b083      	sub	sp, #12
 801579c:	af00      	add	r7, sp, #0
 801579e:	6078      	str	r0, [r7, #4]
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	4618      	mov	r0, r3
 80157a4:	370c      	adds	r7, #12
 80157a6:	46bd      	mov	sp, r7
 80157a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157ac:	4770      	bx	lr

080157ae <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>:
 80157ae:	b480      	push	{r7}
 80157b0:	b083      	sub	sp, #12
 80157b2:	af00      	add	r7, sp, #0
 80157b4:	6078      	str	r0, [r7, #4]
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	4618      	mov	r0, r3
 80157ba:	370c      	adds	r7, #12
 80157bc:	46bd      	mov	sp, r7
 80157be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157c2:	4770      	bx	lr

080157c4 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 80157c4:	b580      	push	{r7, lr}
 80157c6:	b084      	sub	sp, #16
 80157c8:	af00      	add	r7, sp, #0
 80157ca:	60f8      	str	r0, [r7, #12]
 80157cc:	60b9      	str	r1, [r7, #8]
 80157ce:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 80157d0:	68b9      	ldr	r1, [r7, #8]
 80157d2:	68f8      	ldr	r0, [r7, #12]
 80157d4:	f000 f84c 	bl	8015870 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSM_RKS3_>
 80157d8:	eef0 7a40 	vmov.f32	s15, s0
  }
 80157dc:	eeb0 0a67 	vmov.f32	s0, s15
 80157e0:	3710      	adds	r7, #16
 80157e2:	46bd      	mov	sp, r7
 80157e4:	bd80      	pop	{r7, pc}

080157e6 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 80157e6:	b5b0      	push	{r4, r5, r7, lr}
 80157e8:	b084      	sub	sp, #16
 80157ea:	af00      	add	r7, sp, #0
 80157ec:	60f8      	str	r0, [r7, #12]
 80157ee:	60b9      	str	r1, [r7, #8]
 80157f0:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 80157f2:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 80157f4:	68bb      	ldr	r3, [r7, #8]
 80157f6:	4618      	mov	r0, r3
 80157f8:	f7fd f866 	bl	80128c8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>
 80157fc:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 80157fe:	68b8      	ldr	r0, [r7, #8]
 8015800:	f7fd fa90 	bl	8012d24 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 8015804:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	fb02 f303 	mul.w	r3, r2, r3
 801580c:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 801580e:	441d      	add	r5, r3
 8015810:	68bb      	ldr	r3, [r7, #8]
 8015812:	4618      	mov	r0, r3
 8015814:	f7ef fde4 	bl	80053e0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8015818:	4603      	mov	r3, r0
 801581a:	2201      	movs	r2, #1
 801581c:	4629      	mov	r1, r5
 801581e:	4620      	mov	r0, r4
 8015820:	f000 f856 	bl	80158d0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii>
 8015824:	68fb      	ldr	r3, [r7, #12]
 8015826:	68ba      	ldr	r2, [r7, #8]
 8015828:	609a      	str	r2, [r3, #8]
 801582a:	68fb      	ldr	r3, [r7, #12]
 801582c:	330c      	adds	r3, #12
 801582e:	6879      	ldr	r1, [r7, #4]
 8015830:	4618      	mov	r0, r3
 8015832:	f7f8 faab 	bl	800dd8c <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 8015836:	68fb      	ldr	r3, [r7, #12]
 8015838:	3310      	adds	r3, #16
 801583a:	2100      	movs	r1, #0
 801583c:	4618      	mov	r0, r3
 801583e:	f7f8 fa31 	bl	800dca4 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 8015842:	68f8      	ldr	r0, [r7, #12]
 8015844:	f000 f882 	bl	801594c <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE4initEv>
    }
 8015848:	68fb      	ldr	r3, [r7, #12]
 801584a:	4618      	mov	r0, r3
 801584c:	3710      	adds	r7, #16
 801584e:	46bd      	mov	sp, r7
 8015850:	bdb0      	pop	{r4, r5, r7, pc}

08015852 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8015852:	b580      	push	{r7, lr}
 8015854:	b082      	sub	sp, #8
 8015856:	af00      	add	r7, sp, #0
 8015858:	6078      	str	r0, [r7, #4]
 801585a:	6039      	str	r1, [r7, #0]
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	6839      	ldr	r1, [r7, #0]
 8015860:	4618      	mov	r0, r3
 8015862:	f000 f883 	bl	801596c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	4618      	mov	r0, r3
 801586a:	3708      	adds	r7, #8
 801586c:	46bd      	mov	sp, r7
 801586e:	bd80      	pop	{r7, pc}

08015870 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8015870:	b580      	push	{r7, lr}
 8015872:	b084      	sub	sp, #16
 8015874:	af00      	add	r7, sp, #0
 8015876:	6078      	str	r0, [r7, #4]
 8015878:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 801587a:	6839      	ldr	r1, [r7, #0]
 801587c:	6878      	ldr	r0, [r7, #4]
 801587e:	f000 f887 	bl	8015990 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 8015882:	eef0 7a40 	vmov.f32	s15, s0
 8015886:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 801588a:	6839      	ldr	r1, [r7, #0]
 801588c:	6878      	ldr	r0, [r7, #4]
 801588e:	f000 f890 	bl	80159b2 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSM_RKS3_>
 8015892:	eef0 7a40 	vmov.f32	s15, s0
 8015896:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 801589a:	f107 020c 	add.w	r2, r7, #12
 801589e:	f107 0308 	add.w	r3, r7, #8
 80158a2:	4619      	mov	r1, r3
 80158a4:	6838      	ldr	r0, [r7, #0]
 80158a6:	f7f3 fd74 	bl	8009392 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 80158aa:	eef0 7a40 	vmov.f32	s15, s0
  }
 80158ae:	eeb0 0a67 	vmov.f32	s0, s15
 80158b2:	3710      	adds	r7, #16
 80158b4:	46bd      	mov	sp, r7
 80158b6:	bd80      	pop	{r7, pc}

080158b8 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>:
 80158b8:	b580      	push	{r7, lr}
 80158ba:	b082      	sub	sp, #8
 80158bc:	af00      	add	r7, sp, #0
 80158be:	6078      	str	r0, [r7, #4]
 80158c0:	6878      	ldr	r0, [r7, #4]
 80158c2:	f000 f89a 	bl	80159fa <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	4618      	mov	r0, r3
 80158ca:	3708      	adds	r7, #8
 80158cc:	46bd      	mov	sp, r7
 80158ce:	bd80      	pop	{r7, pc}

080158d0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 80158d0:	b580      	push	{r7, lr}
 80158d2:	b084      	sub	sp, #16
 80158d4:	af00      	add	r7, sp, #0
 80158d6:	60f8      	str	r0, [r7, #12]
 80158d8:	60b9      	str	r1, [r7, #8]
 80158da:	607a      	str	r2, [r7, #4]
 80158dc:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 80158de:	68f8      	ldr	r0, [r7, #12]
 80158e0:	f7ff ffea 	bl	80158b8 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>
 80158e4:	68fb      	ldr	r3, [r7, #12]
 80158e6:	68ba      	ldr	r2, [r7, #8]
 80158e8:	601a      	str	r2, [r3, #0]
 80158ea:	68fb      	ldr	r3, [r7, #12]
 80158ec:	3304      	adds	r3, #4
 80158ee:	6879      	ldr	r1, [r7, #4]
 80158f0:	4618      	mov	r0, r3
 80158f2:	f7f1 f963 	bl	8006bbc <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 80158f6:	68fb      	ldr	r3, [r7, #12]
 80158f8:	3305      	adds	r3, #5
 80158fa:	6839      	ldr	r1, [r7, #0]
 80158fc:	4618      	mov	r0, r3
 80158fe:	f7f1 f943 	bl	8006b88 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
      eigen_assert( (dataPtr == 0)
 8015902:	68bb      	ldr	r3, [r7, #8]
 8015904:	2b00      	cmp	r3, #0
 8015906:	d011      	beq.n	801592c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x5c>
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	2b00      	cmp	r3, #0
 801590c:	db08      	blt.n	8015920 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x50>
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	2b01      	cmp	r3, #1
 8015912:	d105      	bne.n	8015920 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x50>
 8015914:	683b      	ldr	r3, [r7, #0]
 8015916:	2b00      	cmp	r3, #0
 8015918:	db02      	blt.n	8015920 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x50>
 801591a:	683b      	ldr	r3, [r7, #0]
 801591c:	2b03      	cmp	r3, #3
 801591e:	d005      	beq.n	801592c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x5c>
 8015920:	4b07      	ldr	r3, [pc, #28]	; (8015940 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x70>)
 8015922:	4a08      	ldr	r2, [pc, #32]	; (8015944 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x74>)
 8015924:	21b0      	movs	r1, #176	; 0xb0
 8015926:	4808      	ldr	r0, [pc, #32]	; (8015948 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x78>)
 8015928:	f008 fabc 	bl	801dea4 <__assert_func>
      checkSanity<Derived>();
 801592c:	2100      	movs	r1, #0
 801592e:	68f8      	ldr	r0, [r7, #12]
 8015930:	f000 f86e 	bl	8015a10 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 8015934:	68fb      	ldr	r3, [r7, #12]
 8015936:	4618      	mov	r0, r3
 8015938:	3710      	adds	r7, #16
 801593a:	46bd      	mov	sp, r7
 801593c:	bd80      	pop	{r7, pc}
 801593e:	bf00      	nop
 8015940:	08026430 	.word	0x08026430
 8015944:	08029df8 	.word	0x08029df8
 8015948:	080265e0 	.word	0x080265e0

0801594c <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE4initEv>:
    void init()
 801594c:	b580      	push	{r7, lr}
 801594e:	b082      	sub	sp, #8
 8015950:	af00      	add	r7, sp, #0
 8015952:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	689b      	ldr	r3, [r3, #8]
 8015958:	4618      	mov	r0, r3
 801595a:	f7fd f9e3 	bl	8012d24 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 801595e:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	615a      	str	r2, [r3, #20]
    }
 8015964:	bf00      	nop
 8015966:	3708      	adds	r7, #8
 8015968:	46bd      	mov	sp, r7
 801596a:	bd80      	pop	{r7, pc}

0801596c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 801596c:	b580      	push	{r7, lr}
 801596e:	b082      	sub	sp, #8
 8015970:	af00      	add	r7, sp, #0
 8015972:	6078      	str	r0, [r7, #4]
 8015974:	6039      	str	r1, [r7, #0]
 8015976:	6878      	ldr	r0, [r7, #4]
 8015978:	f000 f855 	bl	8015a26 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	6839      	ldr	r1, [r7, #0]
 8015980:	4618      	mov	r0, r3
 8015982:	f000 f85b 	bl	8015a3c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	4618      	mov	r0, r3
 801598a:	3708      	adds	r7, #8
 801598c:	46bd      	mov	sp, r7
 801598e:	bd80      	pop	{r7, pc}

08015990 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8015990:	b580      	push	{r7, lr}
 8015992:	b082      	sub	sp, #8
 8015994:	af00      	add	r7, sp, #0
 8015996:	6078      	str	r0, [r7, #4]
 8015998:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 801599a:	2200      	movs	r2, #0
 801599c:	2100      	movs	r1, #0
 801599e:	6878      	ldr	r0, [r7, #4]
 80159a0:	f000 f874 	bl	8015a8c <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 80159a4:	eef0 7a40 	vmov.f32	s15, s0
  }
 80159a8:	eeb0 0a67 	vmov.f32	s0, s15
 80159ac:	3708      	adds	r7, #8
 80159ae:	46bd      	mov	sp, r7
 80159b0:	bd80      	pop	{r7, pc}

080159b2 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 80159b2:	b580      	push	{r7, lr}
 80159b4:	b084      	sub	sp, #16
 80159b6:	af00      	add	r7, sp, #0
 80159b8:	6078      	str	r0, [r7, #4]
 80159ba:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80159bc:	6839      	ldr	r1, [r7, #0]
 80159be:	6878      	ldr	r0, [r7, #4]
 80159c0:	f000 f877 	bl	8015ab2 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSM_RKS3_>
 80159c4:	eef0 7a40 	vmov.f32	s15, s0
 80159c8:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 80159cc:	6839      	ldr	r1, [r7, #0]
 80159ce:	6878      	ldr	r0, [r7, #4]
 80159d0:	f000 f880 	bl	8015ad4 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSM_RKS3_>
 80159d4:	eef0 7a40 	vmov.f32	s15, s0
 80159d8:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80159dc:	f107 020c 	add.w	r2, r7, #12
 80159e0:	f107 0308 	add.w	r3, r7, #8
 80159e4:	4619      	mov	r1, r3
 80159e6:	6838      	ldr	r0, [r7, #0]
 80159e8:	f7f3 fcd3 	bl	8009392 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 80159ec:	eef0 7a40 	vmov.f32	s15, s0
  }
 80159f0:	eeb0 0a67 	vmov.f32	s0, s15
 80159f4:	3710      	adds	r7, #16
 80159f6:	46bd      	mov	sp, r7
 80159f8:	bd80      	pop	{r7, pc}

080159fa <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80159fa:	b480      	push	{r7}
 80159fc:	b083      	sub	sp, #12
 80159fe:	af00      	add	r7, sp, #0
 8015a00:	6078      	str	r0, [r7, #4]
    }
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	4618      	mov	r0, r3
 8015a06:	370c      	adds	r7, #12
 8015a08:	46bd      	mov	sp, r7
 8015a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a0e:	4770      	bx	lr

08015a10 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 8015a10:	b480      	push	{r7}
 8015a12:	b083      	sub	sp, #12
 8015a14:	af00      	add	r7, sp, #0
 8015a16:	6078      	str	r0, [r7, #4]
 8015a18:	6039      	str	r1, [r7, #0]
    {}
 8015a1a:	bf00      	nop
 8015a1c:	370c      	adds	r7, #12
 8015a1e:	46bd      	mov	sp, r7
 8015a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a24:	4770      	bx	lr

08015a26 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8015a26:	b480      	push	{r7}
 8015a28:	b083      	sub	sp, #12
 8015a2a:	af00      	add	r7, sp, #0
 8015a2c:	6078      	str	r0, [r7, #4]
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	4618      	mov	r0, r3
 8015a32:	370c      	adds	r7, #12
 8015a34:	46bd      	mov	sp, r7
 8015a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a3a:	4770      	bx	lr

08015a3c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8015a3c:	b590      	push	{r4, r7, lr}
 8015a3e:	b083      	sub	sp, #12
 8015a40:	af00      	add	r7, sp, #0
 8015a42:	6078      	str	r0, [r7, #4]
 8015a44:	6039      	str	r1, [r7, #0]
 8015a46:	687c      	ldr	r4, [r7, #4]
 8015a48:	6838      	ldr	r0, [r7, #0]
 8015a4a:	f000 f854 	bl	8015af6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7functorEv>
 8015a4e:	4603      	mov	r3, r0
 8015a50:	4619      	mov	r1, r3
 8015a52:	4620      	mov	r0, r4
 8015a54:	f7ef fe38 	bl	80056c8 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	1d1c      	adds	r4, r3, #4
 8015a5c:	6838      	ldr	r0, [r7, #0]
 8015a5e:	f000 f856 	bl	8015b0e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE3lhsEv>
 8015a62:	4603      	mov	r3, r0
 8015a64:	4619      	mov	r1, r3
 8015a66:	4620      	mov	r0, r4
 8015a68:	f000 f868 	bl	8015b3c <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1ERSA_>
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	f103 040c 	add.w	r4, r3, #12
 8015a72:	6838      	ldr	r0, [r7, #0]
 8015a74:	f000 f856 	bl	8015b24 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE3rhsEv>
 8015a78:	4603      	mov	r3, r0
 8015a7a:	4619      	mov	r1, r3
 8015a7c:	4620      	mov	r0, r4
 8015a7e:	f7fa f995 	bl	800fdac <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERS7_>
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	4618      	mov	r0, r3
 8015a86:	370c      	adds	r7, #12
 8015a88:	46bd      	mov	sp, r7
 8015a8a:	bd90      	pop	{r4, r7, pc}

08015a8c <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8015a8c:	b580      	push	{r7, lr}
 8015a8e:	b084      	sub	sp, #16
 8015a90:	af00      	add	r7, sp, #0
 8015a92:	60f8      	str	r0, [r7, #12]
 8015a94:	60b9      	str	r1, [r7, #8]
 8015a96:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 8015a98:	68fb      	ldr	r3, [r7, #12]
 8015a9a:	68ba      	ldr	r2, [r7, #8]
 8015a9c:	6879      	ldr	r1, [r7, #4]
 8015a9e:	4618      	mov	r0, r3
 8015aa0:	f000 f85b 	bl	8015b5a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 8015aa4:	eef0 7a40 	vmov.f32	s15, s0
 8015aa8:	eeb0 0a67 	vmov.f32	s0, s15
 8015aac:	3710      	adds	r7, #16
 8015aae:	46bd      	mov	sp, r7
 8015ab0:	bd80      	pop	{r7, pc}

08015ab2 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8015ab2:	b580      	push	{r7, lr}
 8015ab4:	b082      	sub	sp, #8
 8015ab6:	af00      	add	r7, sp, #0
 8015ab8:	6078      	str	r0, [r7, #4]
 8015aba:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8015abc:	2201      	movs	r2, #1
 8015abe:	2100      	movs	r1, #0
 8015ac0:	6878      	ldr	r0, [r7, #4]
 8015ac2:	f7ff ffe3 	bl	8015a8c <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 8015ac6:	eef0 7a40 	vmov.f32	s15, s0
  }
 8015aca:	eeb0 0a67 	vmov.f32	s0, s15
 8015ace:	3708      	adds	r7, #8
 8015ad0:	46bd      	mov	sp, r7
 8015ad2:	bd80      	pop	{r7, pc}

08015ad4 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8015ad4:	b580      	push	{r7, lr}
 8015ad6:	b082      	sub	sp, #8
 8015ad8:	af00      	add	r7, sp, #0
 8015ada:	6078      	str	r0, [r7, #4]
 8015adc:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8015ade:	2202      	movs	r2, #2
 8015ae0:	2100      	movs	r1, #0
 8015ae2:	6878      	ldr	r0, [r7, #4]
 8015ae4:	f7ff ffd2 	bl	8015a8c <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 8015ae8:	eef0 7a40 	vmov.f32	s15, s0
  }
 8015aec:	eeb0 0a67 	vmov.f32	s0, s15
 8015af0:	3708      	adds	r7, #8
 8015af2:	46bd      	mov	sp, r7
 8015af4:	bd80      	pop	{r7, pc}

08015af6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8015af6:	b480      	push	{r7}
 8015af8:	b083      	sub	sp, #12
 8015afa:	af00      	add	r7, sp, #0
 8015afc:	6078      	str	r0, [r7, #4]
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	3330      	adds	r3, #48	; 0x30
 8015b02:	4618      	mov	r0, r3
 8015b04:	370c      	adds	r7, #12
 8015b06:	46bd      	mov	sp, r7
 8015b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b0c:	4770      	bx	lr

08015b0e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8015b0e:	b480      	push	{r7}
 8015b10:	b083      	sub	sp, #12
 8015b12:	af00      	add	r7, sp, #0
 8015b14:	6078      	str	r0, [r7, #4]
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	4618      	mov	r0, r3
 8015b1a:	370c      	adds	r7, #12
 8015b1c:	46bd      	mov	sp, r7
 8015b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b22:	4770      	bx	lr

08015b24 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8015b24:	b480      	push	{r7}
 8015b26:	b083      	sub	sp, #12
 8015b28:	af00      	add	r7, sp, #0
 8015b2a:	6078      	str	r0, [r7, #4]
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	3318      	adds	r3, #24
 8015b30:	4618      	mov	r0, r3
 8015b32:	370c      	adds	r7, #12
 8015b34:	46bd      	mov	sp, r7
 8015b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b3a:	4770      	bx	lr

08015b3c <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8015b3c:	b580      	push	{r7, lr}
 8015b3e:	b082      	sub	sp, #8
 8015b40:	af00      	add	r7, sp, #0
 8015b42:	6078      	str	r0, [r7, #4]
 8015b44:	6039      	str	r1, [r7, #0]
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	6839      	ldr	r1, [r7, #0]
 8015b4a:	4618      	mov	r0, r3
 8015b4c:	f000 f835 	bl	8015bba <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1ERKS9_>
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	4618      	mov	r0, r3
 8015b54:	3708      	adds	r7, #8
 8015b56:	46bd      	mov	sp, r7
 8015b58:	bd80      	pop	{r7, pc}

08015b5a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8015b5a:	b590      	push	{r4, r7, lr}
 8015b5c:	b087      	sub	sp, #28
 8015b5e:	af00      	add	r7, sp, #0
 8015b60:	60f8      	str	r0, [r7, #12]
 8015b62:	60b9      	str	r1, [r7, #8]
 8015b64:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8015b66:	68fb      	ldr	r3, [r7, #12]
 8015b68:	4618      	mov	r0, r3
 8015b6a:	f000 f835 	bl	8015bd8 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 8015b6e:	4604      	mov	r4, r0
 8015b70:	68fb      	ldr	r3, [r7, #12]
 8015b72:	3304      	adds	r3, #4
 8015b74:	687a      	ldr	r2, [r7, #4]
 8015b76:	68b9      	ldr	r1, [r7, #8]
 8015b78:	4618      	mov	r0, r3
 8015b7a:	f000 f838 	bl	8015bee <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfE5coeffEii>
 8015b7e:	eef0 7a40 	vmov.f32	s15, s0
 8015b82:	edc7 7a04 	vstr	s15, [r7, #16]
 8015b86:	68fb      	ldr	r3, [r7, #12]
 8015b88:	330c      	adds	r3, #12
 8015b8a:	687a      	ldr	r2, [r7, #4]
 8015b8c:	68b9      	ldr	r1, [r7, #8]
 8015b8e:	4618      	mov	r0, r3
 8015b90:	f7fa fd4e 	bl	8010630 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>
 8015b94:	eef0 7a40 	vmov.f32	s15, s0
 8015b98:	edc7 7a05 	vstr	s15, [r7, #20]
 8015b9c:	f107 0214 	add.w	r2, r7, #20
 8015ba0:	f107 0310 	add.w	r3, r7, #16
 8015ba4:	4619      	mov	r1, r3
 8015ba6:	4620      	mov	r0, r4
 8015ba8:	f7f9 fc34 	bl	800f414 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 8015bac:	eef0 7a40 	vmov.f32	s15, s0
  }
 8015bb0:	eeb0 0a67 	vmov.f32	s0, s15
 8015bb4:	371c      	adds	r7, #28
 8015bb6:	46bd      	mov	sp, r7
 8015bb8:	bd90      	pop	{r4, r7, pc}

08015bba <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1ERKS9_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 8015bba:	b580      	push	{r7, lr}
 8015bbc:	b082      	sub	sp, #8
 8015bbe:	af00      	add	r7, sp, #0
 8015bc0:	6078      	str	r0, [r7, #4]
 8015bc2:	6039      	str	r1, [r7, #0]
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	6839      	ldr	r1, [r7, #0]
 8015bc8:	4618      	mov	r0, r3
 8015bca:	f000 f823 	bl	8015c14 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfEC1ERKS9_>
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	4618      	mov	r0, r3
 8015bd2:	3708      	adds	r7, #8
 8015bd4:	46bd      	mov	sp, r7
 8015bd6:	bd80      	pop	{r7, pc}

08015bd8 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8015bd8:	b480      	push	{r7}
 8015bda:	b083      	sub	sp, #12
 8015bdc:	af00      	add	r7, sp, #0
 8015bde:	6078      	str	r0, [r7, #4]
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	4618      	mov	r0, r3
 8015be4:	370c      	adds	r7, #12
 8015be6:	46bd      	mov	sp, r7
 8015be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bec:	4770      	bx	lr

08015bee <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8015bee:	b580      	push	{r7, lr}
 8015bf0:	b084      	sub	sp, #16
 8015bf2:	af00      	add	r7, sp, #0
 8015bf4:	60f8      	str	r0, [r7, #12]
 8015bf6:	60b9      	str	r1, [r7, #8]
 8015bf8:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 8015bfa:	68fb      	ldr	r3, [r7, #12]
 8015bfc:	68ba      	ldr	r2, [r7, #8]
 8015bfe:	6879      	ldr	r1, [r7, #4]
 8015c00:	4618      	mov	r0, r3
 8015c02:	f000 f81d 	bl	8015c40 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E5coeffEii>
 8015c06:	eef0 7a40 	vmov.f32	s15, s0
  }
 8015c0a:	eeb0 0a67 	vmov.f32	s0, s15
 8015c0e:	3710      	adds	r7, #16
 8015c10:	46bd      	mov	sp, r7
 8015c12:	bd80      	pop	{r7, pc}

08015c14 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfEC1ERKS9_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 8015c14:	b590      	push	{r4, r7, lr}
 8015c16:	b083      	sub	sp, #12
 8015c18:	af00      	add	r7, sp, #0
 8015c1a:	6078      	str	r0, [r7, #4]
 8015c1c:	6039      	str	r1, [r7, #0]
 8015c1e:	6878      	ldr	r0, [r7, #4]
 8015c20:	f000 f83a 	bl	8015c98 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>
 8015c24:	687c      	ldr	r4, [r7, #4]
 8015c26:	6838      	ldr	r0, [r7, #0]
 8015c28:	f000 f82b 	bl	8015c82 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE16nestedExpressionEv>
 8015c2c:	4603      	mov	r3, r0
 8015c2e:	4619      	mov	r1, r3
 8015c30:	4620      	mov	r0, r4
 8015c32:	f000 f83c 	bl	8015cae <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERS7_>
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	4618      	mov	r0, r3
 8015c3a:	370c      	adds	r7, #12
 8015c3c:	46bd      	mov	sp, r7
 8015c3e:	bd90      	pop	{r4, r7, pc}

08015c40 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8015c40:	b5b0      	push	{r4, r5, r7, lr}
 8015c42:	b084      	sub	sp, #16
 8015c44:	af00      	add	r7, sp, #0
 8015c46:	60f8      	str	r0, [r7, #12]
 8015c48:	60b9      	str	r1, [r7, #8]
 8015c4a:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 8015c4c:	68fb      	ldr	r3, [r7, #12]
 8015c4e:	681c      	ldr	r4, [r3, #0]
 8015c50:	68f8      	ldr	r0, [r7, #12]
 8015c52:	f000 f83b 	bl	8015ccc <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E9colStrideEv>
 8015c56:	4602      	mov	r2, r0
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	fb03 f502 	mul.w	r5, r3, r2
 8015c5e:	68f8      	ldr	r0, [r7, #12]
 8015c60:	f000 f83f 	bl	8015ce2 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E9rowStrideEv>
 8015c64:	4602      	mov	r2, r0
 8015c66:	68bb      	ldr	r3, [r7, #8]
 8015c68:	fb02 f303 	mul.w	r3, r2, r3
 8015c6c:	442b      	add	r3, r5
 8015c6e:	009b      	lsls	r3, r3, #2
 8015c70:	4423      	add	r3, r4
 8015c72:	681b      	ldr	r3, [r3, #0]
 8015c74:	ee07 3a90 	vmov	s15, r3
  }
 8015c78:	eeb0 0a67 	vmov.f32	s0, s15
 8015c7c:	3710      	adds	r7, #16
 8015c7e:	46bd      	mov	sp, r7
 8015c80:	bdb0      	pop	{r4, r5, r7, pc}

08015c82 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 8015c82:	b480      	push	{r7}
 8015c84:	b083      	sub	sp, #12
 8015c86:	af00      	add	r7, sp, #0
 8015c88:	6078      	str	r0, [r7, #4]
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	4618      	mov	r0, r3
 8015c8e:	370c      	adds	r7, #12
 8015c90:	46bd      	mov	sp, r7
 8015c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c96:	4770      	bx	lr

08015c98 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8015c98:	b480      	push	{r7}
 8015c9a:	b083      	sub	sp, #12
 8015c9c:	af00      	add	r7, sp, #0
 8015c9e:	6078      	str	r0, [r7, #4]
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	4618      	mov	r0, r3
 8015ca4:	370c      	adds	r7, #12
 8015ca6:	46bd      	mov	sp, r7
 8015ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cac:	4770      	bx	lr

08015cae <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8015cae:	b580      	push	{r7, lr}
 8015cb0:	b082      	sub	sp, #8
 8015cb2:	af00      	add	r7, sp, #0
 8015cb4:	6078      	str	r0, [r7, #4]
 8015cb6:	6039      	str	r1, [r7, #0]
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	6839      	ldr	r1, [r7, #0]
 8015cbc:	4618      	mov	r0, r3
 8015cbe:	f000 f81b 	bl	8015cf8 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERKS6_>
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	4618      	mov	r0, r3
 8015cc6:	3708      	adds	r7, #8
 8015cc8:	46bd      	mov	sp, r7
 8015cca:	bd80      	pop	{r7, pc}

08015ccc <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 8015ccc:	b580      	push	{r7, lr}
 8015cce:	b082      	sub	sp, #8
 8015cd0:	af00      	add	r7, sp, #0
 8015cd2:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 8015cd4:	f7f0 ff9f 	bl	8006c16 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8015cd8:	4603      	mov	r3, r0
  }
 8015cda:	4618      	mov	r0, r3
 8015cdc:	3708      	adds	r7, #8
 8015cde:	46bd      	mov	sp, r7
 8015ce0:	bd80      	pop	{r7, pc}

08015ce2 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 8015ce2:	b580      	push	{r7, lr}
 8015ce4:	b082      	sub	sp, #8
 8015ce6:	af00      	add	r7, sp, #0
 8015ce8:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 8015cea:	f7f0 ff8c 	bl	8006c06 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8015cee:	4603      	mov	r3, r0
  }
 8015cf0:	4618      	mov	r0, r3
 8015cf2:	3708      	adds	r7, #8
 8015cf4:	46bd      	mov	sp, r7
 8015cf6:	bd80      	pop	{r7, pc}

08015cf8 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8015cf8:	b580      	push	{r7, lr}
 8015cfa:	b082      	sub	sp, #8
 8015cfc:	af00      	add	r7, sp, #0
 8015cfe:	6078      	str	r0, [r7, #4]
 8015d00:	6039      	str	r1, [r7, #0]
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	6839      	ldr	r1, [r7, #0]
 8015d06:	4618      	mov	r0, r3
 8015d08:	f000 f805 	bl	8015d16 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EEC1ERKNS_5BlockIS4_Li1ELi3ELb1EEE>
  }
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	4618      	mov	r0, r3
 8015d10:	3708      	adds	r7, #8
 8015d12:	46bd      	mov	sp, r7
 8015d14:	bd80      	pop	{r7, pc}

08015d16 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EEC1ERKNS_5BlockIS4_Li1ELi3ELb1EEE>:
  explicit block_evaluator(const XprType& block)
 8015d16:	b580      	push	{r7, lr}
 8015d18:	b082      	sub	sp, #8
 8015d1a:	af00      	add	r7, sp, #0
 8015d1c:	6078      	str	r0, [r7, #4]
 8015d1e:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	6839      	ldr	r1, [r7, #0]
 8015d24:	4618      	mov	r0, r3
 8015d26:	f000 f80a 	bl	8015d3e <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_EC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8015d2a:	683b      	ldr	r3, [r7, #0]
 8015d2c:	4618      	mov	r0, r3
 8015d2e:	f000 f830 	bl	8015d92 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4dataEv>
 8015d32:	bf00      	nop
  }
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	4618      	mov	r0, r3
 8015d38:	3708      	adds	r7, #8
 8015d3a:	46bd      	mov	sp, r7
 8015d3c:	bd80      	pop	{r7, pc}

08015d3e <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_EC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 8015d3e:	b590      	push	{r4, r7, lr}
 8015d40:	b083      	sub	sp, #12
 8015d42:	af00      	add	r7, sp, #0
 8015d44:	6078      	str	r0, [r7, #4]
 8015d46:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8015d48:	6878      	ldr	r0, [r7, #4]
 8015d4a:	f000 f84a 	bl	8015de2 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8015d4e:	683b      	ldr	r3, [r7, #0]
 8015d50:	4618      	mov	r0, r3
 8015d52:	f000 f81e 	bl	8015d92 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4dataEv>
 8015d56:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	601a      	str	r2, [r3, #0]
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	1d1c      	adds	r4, r3, #4
 8015d60:	683b      	ldr	r3, [r7, #0]
 8015d62:	4618      	mov	r0, r3
 8015d64:	f000 f821 	bl	8015daa <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE11innerStrideEv>
 8015d68:	4603      	mov	r3, r0
 8015d6a:	4619      	mov	r1, r3
 8015d6c:	4620      	mov	r0, r4
 8015d6e:	f7f0 ff25 	bl	8006bbc <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	1d5c      	adds	r4, r3, #5
 8015d76:	683b      	ldr	r3, [r7, #0]
 8015d78:	4618      	mov	r0, r3
 8015d7a:	f000 f824 	bl	8015dc6 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE11outerStrideEv>
 8015d7e:	4603      	mov	r3, r0
 8015d80:	4619      	mov	r1, r3
 8015d82:	4620      	mov	r0, r4
 8015d84:	f7f0 ff00 	bl	8006b88 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	4618      	mov	r0, r3
 8015d8c:	370c      	adds	r7, #12
 8015d8e:	46bd      	mov	sp, r7
 8015d90:	bd90      	pop	{r4, r7, pc}

08015d92 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 8015d92:	b480      	push	{r7}
 8015d94:	b083      	sub	sp, #12
 8015d96:	af00      	add	r7, sp, #0
 8015d98:	6078      	str	r0, [r7, #4]
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	681b      	ldr	r3, [r3, #0]
 8015d9e:	4618      	mov	r0, r3
 8015da0:	370c      	adds	r7, #12
 8015da2:	46bd      	mov	sp, r7
 8015da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015da8:	4770      	bx	lr

08015daa <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8015daa:	b580      	push	{r7, lr}
 8015dac:	b082      	sub	sp, #8
 8015dae:	af00      	add	r7, sp, #0
 8015db0:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	689b      	ldr	r3, [r3, #8]
 8015db6:	4618      	mov	r0, r3
 8015db8:	f7fd fcf8 	bl	80137ac <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>
 8015dbc:	4603      	mov	r3, r0
    }
 8015dbe:	4618      	mov	r0, r3
 8015dc0:	3708      	adds	r7, #8
 8015dc2:	46bd      	mov	sp, r7
 8015dc4:	bd80      	pop	{r7, pc}

08015dc6 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8015dc6:	b580      	push	{r7, lr}
 8015dc8:	b082      	sub	sp, #8
 8015dca:	af00      	add	r7, sp, #0
 8015dcc:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	689b      	ldr	r3, [r3, #8]
 8015dd2:	4618      	mov	r0, r3
 8015dd4:	f7fc ffa6 	bl	8012d24 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 8015dd8:	4603      	mov	r3, r0
    }
 8015dda:	4618      	mov	r0, r3
 8015ddc:	3708      	adds	r7, #8
 8015dde:	46bd      	mov	sp, r7
 8015de0:	bd80      	pop	{r7, pc}

08015de2 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8015de2:	b480      	push	{r7}
 8015de4:	b083      	sub	sp, #12
 8015de6:	af00      	add	r7, sp, #0
 8015de8:	6078      	str	r0, [r7, #4]
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	4618      	mov	r0, r3
 8015dee:	370c      	adds	r7, #12
 8015df0:	46bd      	mov	sp, r7
 8015df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015df6:	4770      	bx	lr

08015df8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8015df8:	b590      	push	{r4, r7, lr}
 8015dfa:	b083      	sub	sp, #12
 8015dfc:	af00      	add	r7, sp, #0
 8015dfe:	6078      	str	r0, [r7, #4]
 8015e00:	6039      	str	r1, [r7, #0]
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	2b01      	cmp	r3, #1
 8015e06:	d141      	bne.n	8015e8c <_Z41__static_initialization_and_destruction_0ii+0x94>
 8015e08:	683b      	ldr	r3, [r7, #0]
 8015e0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015e0e:	4293      	cmp	r3, r2
 8015e10:	d13c      	bne.n	8015e8c <_Z41__static_initialization_and_destruction_0ii+0x94>
static const symbolic::SymbolExpr<internal::symbolic_last_tag> last; // PLEASE use Eigen::last   instead of Eigen::placeholders::last
 8015e12:	4820      	ldr	r0, [pc, #128]	; (8015e94 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8015e14:	f7ee fa1b 	bl	800424e <_ZN5Eigen8symbolic10SymbolExprINS_8internal17symbolic_last_tagEEC1Ev>

#ifndef EIGEN_PARSED_BY_DOXYGEN

#if EIGEN_HAS_CXX14_VARIABLE_TEMPLATES
template<int N>
static const internal::FixedInt<N> fix{};
 8015e18:	481f      	ldr	r0, [pc, #124]	; (8015e98 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8015e1a:	f7ee fa23 	bl	8004264 <_ZN5Eigen8internal8FixedIntILi1EEC1Ev>
static const symbolic::AddExpr<symbolic::SymbolExpr<internal::symbolic_last_tag>,symbolic::ValueExpr<Eigen::internal::FixedInt<1> > > lastp1(last+fix<1>());
 8015e1e:	481e      	ldr	r0, [pc, #120]	; (8015e98 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8015e20:	f7ee fa2b 	bl	800427a <_ZNK5Eigen8internal8FixedIntILi1EEclEv>
 8015e24:	4621      	mov	r1, r4
 8015e26:	481b      	ldr	r0, [pc, #108]	; (8015e94 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8015e28:	f7ee fa32 	bl	8004290 <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEEplILi1EEENS0_7AddExprIS5_NS0_9ValueExprINS3_8FixedIntIXT_EEEEEEESB_>

/** \var all
  * \ingroup Core_Module
  * Can be used as a parameter to DenseBase::operator()(const RowIndices&, const ColIndices&) to index all rows or columns
  */
static const Eigen::internal::all_t all; // PLEASE use Eigen::all instead of Eigen::placeholders::all
 8015e2c:	481b      	ldr	r0, [pc, #108]	; (8015e9c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8015e2e:	f7eb f891 	bl	8000f54 <_ZN5Eigen8internal5all_tC1Ev>
Matrix <float,3,3> A ;
 8015e32:	481b      	ldr	r0, [pc, #108]	; (8015ea0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8015e34:	f7ee fa51 	bl	80042da <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Matrix <float,3,3> P ;
 8015e38:	481a      	ldr	r0, [pc, #104]	; (8015ea4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8015e3a:	f7ee fa4e 	bl	80042da <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Matrix <float,3,3> O ;
 8015e3e:	481a      	ldr	r0, [pc, #104]	; (8015ea8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8015e40:	f7ee fa4b 	bl	80042da <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Matrix <float,3,3> I ;
 8015e44:	4819      	ldr	r0, [pc, #100]	; (8015eac <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8015e46:	f7ee fa48 	bl	80042da <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Matrix <float,1,1> S ;
 8015e4a:	4819      	ldr	r0, [pc, #100]	; (8015eb0 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8015e4c:	f7ee fa54 	bl	80042f8 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>
Matrix <float,1,1> R ;
 8015e50:	4818      	ldr	r0, [pc, #96]	; (8015eb4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8015e52:	f7ee fa51 	bl	80042f8 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>
Matrix <float,1,1> D ;
 8015e56:	4818      	ldr	r0, [pc, #96]	; (8015eb8 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8015e58:	f7ee fa4e 	bl	80042f8 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>
Matrix <float,1,1> Z ;
 8015e5c:	4817      	ldr	r0, [pc, #92]	; (8015ebc <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8015e5e:	f7ee fa4b 	bl	80042f8 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>
Matrix <float,3,1> K ;
 8015e62:	4817      	ldr	r0, [pc, #92]	; (8015ec0 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8015e64:	f7ee fa57 	bl	8004316 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
Matrix <float,1,3> C ;
 8015e68:	4816      	ldr	r0, [pc, #88]	; (8015ec4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8015e6a:	f7ee fa63 	bl	8004334 <_ZN5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EEC1Ev>
Matrix <float,3,1> G ;
 8015e6e:	4816      	ldr	r0, [pc, #88]	; (8015ec8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8015e70:	f7ee fa51 	bl	8004316 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
Matrix <float,3,3> Q ;
 8015e74:	4815      	ldr	r0, [pc, #84]	; (8015ecc <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8015e76:	f7ee fa30 	bl	80042da <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Vector3f X;
 8015e7a:	4815      	ldr	r0, [pc, #84]	; (8015ed0 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8015e7c:	f7ee fa4b 	bl	8004316 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
Vector3f X1;
 8015e80:	4814      	ldr	r0, [pc, #80]	; (8015ed4 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8015e82:	f7ee fa48 	bl	8004316 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
Vector3f B;
 8015e86:	4814      	ldr	r0, [pc, #80]	; (8015ed8 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8015e88:	f7ee fa45 	bl	8004316 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
}
 8015e8c:	bf00      	nop
 8015e8e:	370c      	adds	r7, #12
 8015e90:	46bd      	mov	sp, r7
 8015e92:	bd90      	pop	{r4, r7, pc}
 8015e94:	2000026c 	.word	0x2000026c
 8015e98:	200007e4 	.word	0x200007e4
 8015e9c:	20000270 	.word	0x20000270
 8015ea0:	200005b8 	.word	0x200005b8
 8015ea4:	200005dc 	.word	0x200005dc
 8015ea8:	20000600 	.word	0x20000600
 8015eac:	20000624 	.word	0x20000624
 8015eb0:	20000648 	.word	0x20000648
 8015eb4:	2000064c 	.word	0x2000064c
 8015eb8:	20000650 	.word	0x20000650
 8015ebc:	20000654 	.word	0x20000654
 8015ec0:	20000658 	.word	0x20000658
 8015ec4:	20000664 	.word	0x20000664
 8015ec8:	20000670 	.word	0x20000670
 8015ecc:	2000067c 	.word	0x2000067c
 8015ed0:	200006a0 	.word	0x200006a0
 8015ed4:	200006ac 	.word	0x200006ac
 8015ed8:	200006b8 	.word	0x200006b8

08015edc <_GLOBAL__sub_I_hi2c1>:
 8015edc:	b580      	push	{r7, lr}
 8015ede:	af00      	add	r7, sp, #0
 8015ee0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015ee4:	2001      	movs	r0, #1
 8015ee6:	f7ff ff87 	bl	8015df8 <_Z41__static_initialization_and_destruction_0ii>
 8015eea:	bd80      	pop	{r7, pc}

08015eec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8015eec:	b580      	push	{r7, lr}
 8015eee:	b082      	sub	sp, #8
 8015ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8015ef2:	2300      	movs	r3, #0
 8015ef4:	607b      	str	r3, [r7, #4]
 8015ef6:	4b10      	ldr	r3, [pc, #64]	; (8015f38 <HAL_MspInit+0x4c>)
 8015ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015efa:	4a0f      	ldr	r2, [pc, #60]	; (8015f38 <HAL_MspInit+0x4c>)
 8015efc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015f00:	6453      	str	r3, [r2, #68]	; 0x44
 8015f02:	4b0d      	ldr	r3, [pc, #52]	; (8015f38 <HAL_MspInit+0x4c>)
 8015f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015f0a:	607b      	str	r3, [r7, #4]
 8015f0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8015f0e:	2300      	movs	r3, #0
 8015f10:	603b      	str	r3, [r7, #0]
 8015f12:	4b09      	ldr	r3, [pc, #36]	; (8015f38 <HAL_MspInit+0x4c>)
 8015f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f16:	4a08      	ldr	r2, [pc, #32]	; (8015f38 <HAL_MspInit+0x4c>)
 8015f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8015f1e:	4b06      	ldr	r3, [pc, #24]	; (8015f38 <HAL_MspInit+0x4c>)
 8015f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015f26:	603b      	str	r3, [r7, #0]
 8015f28:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8015f2a:	2007      	movs	r0, #7
 8015f2c:	f000 fd14 	bl	8016958 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8015f30:	bf00      	nop
 8015f32:	3708      	adds	r7, #8
 8015f34:	46bd      	mov	sp, r7
 8015f36:	bd80      	pop	{r7, pc}
 8015f38:	40023800 	.word	0x40023800

08015f3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8015f3c:	b580      	push	{r7, lr}
 8015f3e:	b08c      	sub	sp, #48	; 0x30
 8015f40:	af00      	add	r7, sp, #0
 8015f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015f44:	f107 031c 	add.w	r3, r7, #28
 8015f48:	2200      	movs	r2, #0
 8015f4a:	601a      	str	r2, [r3, #0]
 8015f4c:	605a      	str	r2, [r3, #4]
 8015f4e:	609a      	str	r2, [r3, #8]
 8015f50:	60da      	str	r2, [r3, #12]
 8015f52:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	681b      	ldr	r3, [r3, #0]
 8015f58:	4a52      	ldr	r2, [pc, #328]	; (80160a4 <HAL_I2C_MspInit+0x168>)
 8015f5a:	4293      	cmp	r3, r2
 8015f5c:	d13d      	bne.n	8015fda <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8015f5e:	2300      	movs	r3, #0
 8015f60:	61bb      	str	r3, [r7, #24]
 8015f62:	4b51      	ldr	r3, [pc, #324]	; (80160a8 <HAL_I2C_MspInit+0x16c>)
 8015f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f66:	4a50      	ldr	r2, [pc, #320]	; (80160a8 <HAL_I2C_MspInit+0x16c>)
 8015f68:	f043 0302 	orr.w	r3, r3, #2
 8015f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8015f6e:	4b4e      	ldr	r3, [pc, #312]	; (80160a8 <HAL_I2C_MspInit+0x16c>)
 8015f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f72:	f003 0302 	and.w	r3, r3, #2
 8015f76:	61bb      	str	r3, [r7, #24]
 8015f78:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8015f7a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8015f7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8015f80:	2312      	movs	r3, #18
 8015f82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015f84:	2300      	movs	r3, #0
 8015f86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015f88:	2303      	movs	r3, #3
 8015f8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8015f8c:	2304      	movs	r3, #4
 8015f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8015f90:	f107 031c 	add.w	r3, r7, #28
 8015f94:	4619      	mov	r1, r3
 8015f96:	4845      	ldr	r0, [pc, #276]	; (80160ac <HAL_I2C_MspInit+0x170>)
 8015f98:	f001 f930 	bl	80171fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8015f9c:	2300      	movs	r3, #0
 8015f9e:	617b      	str	r3, [r7, #20]
 8015fa0:	4b41      	ldr	r3, [pc, #260]	; (80160a8 <HAL_I2C_MspInit+0x16c>)
 8015fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015fa4:	4a40      	ldr	r2, [pc, #256]	; (80160a8 <HAL_I2C_MspInit+0x16c>)
 8015fa6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8015faa:	6413      	str	r3, [r2, #64]	; 0x40
 8015fac:	4b3e      	ldr	r3, [pc, #248]	; (80160a8 <HAL_I2C_MspInit+0x16c>)
 8015fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015fb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8015fb4:	617b      	str	r3, [r7, #20]
 8015fb6:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8015fb8:	2200      	movs	r2, #0
 8015fba:	2100      	movs	r1, #0
 8015fbc:	201f      	movs	r0, #31
 8015fbe:	f000 fcd6 	bl	801696e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8015fc2:	201f      	movs	r0, #31
 8015fc4:	f000 fcef 	bl	80169a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8015fc8:	2200      	movs	r2, #0
 8015fca:	2100      	movs	r1, #0
 8015fcc:	2020      	movs	r0, #32
 8015fce:	f000 fcce 	bl	801696e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8015fd2:	2020      	movs	r0, #32
 8015fd4:	f000 fce7 	bl	80169a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8015fd8:	e060      	b.n	801609c <HAL_I2C_MspInit+0x160>
  else if(hi2c->Instance==I2C3)
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	681b      	ldr	r3, [r3, #0]
 8015fde:	4a34      	ldr	r2, [pc, #208]	; (80160b0 <HAL_I2C_MspInit+0x174>)
 8015fe0:	4293      	cmp	r3, r2
 8015fe2:	d15b      	bne.n	801609c <HAL_I2C_MspInit+0x160>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8015fe4:	2300      	movs	r3, #0
 8015fe6:	613b      	str	r3, [r7, #16]
 8015fe8:	4b2f      	ldr	r3, [pc, #188]	; (80160a8 <HAL_I2C_MspInit+0x16c>)
 8015fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015fec:	4a2e      	ldr	r2, [pc, #184]	; (80160a8 <HAL_I2C_MspInit+0x16c>)
 8015fee:	f043 0304 	orr.w	r3, r3, #4
 8015ff2:	6313      	str	r3, [r2, #48]	; 0x30
 8015ff4:	4b2c      	ldr	r3, [pc, #176]	; (80160a8 <HAL_I2C_MspInit+0x16c>)
 8015ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ff8:	f003 0304 	and.w	r3, r3, #4
 8015ffc:	613b      	str	r3, [r7, #16]
 8015ffe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8016000:	2300      	movs	r3, #0
 8016002:	60fb      	str	r3, [r7, #12]
 8016004:	4b28      	ldr	r3, [pc, #160]	; (80160a8 <HAL_I2C_MspInit+0x16c>)
 8016006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016008:	4a27      	ldr	r2, [pc, #156]	; (80160a8 <HAL_I2C_MspInit+0x16c>)
 801600a:	f043 0301 	orr.w	r3, r3, #1
 801600e:	6313      	str	r3, [r2, #48]	; 0x30
 8016010:	4b25      	ldr	r3, [pc, #148]	; (80160a8 <HAL_I2C_MspInit+0x16c>)
 8016012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016014:	f003 0301 	and.w	r3, r3, #1
 8016018:	60fb      	str	r3, [r7, #12]
 801601a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 801601c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8016022:	2312      	movs	r3, #18
 8016024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016026:	2300      	movs	r3, #0
 8016028:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801602a:	2303      	movs	r3, #3
 801602c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 801602e:	2304      	movs	r3, #4
 8016030:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8016032:	f107 031c 	add.w	r3, r7, #28
 8016036:	4619      	mov	r1, r3
 8016038:	481e      	ldr	r0, [pc, #120]	; (80160b4 <HAL_I2C_MspInit+0x178>)
 801603a:	f001 f8df 	bl	80171fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 801603e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8016042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8016044:	2312      	movs	r3, #18
 8016046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016048:	2300      	movs	r3, #0
 801604a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801604c:	2303      	movs	r3, #3
 801604e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8016050:	2304      	movs	r3, #4
 8016052:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016054:	f107 031c 	add.w	r3, r7, #28
 8016058:	4619      	mov	r1, r3
 801605a:	4817      	ldr	r0, [pc, #92]	; (80160b8 <HAL_I2C_MspInit+0x17c>)
 801605c:	f001 f8ce 	bl	80171fc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8016060:	2300      	movs	r3, #0
 8016062:	60bb      	str	r3, [r7, #8]
 8016064:	4b10      	ldr	r3, [pc, #64]	; (80160a8 <HAL_I2C_MspInit+0x16c>)
 8016066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016068:	4a0f      	ldr	r2, [pc, #60]	; (80160a8 <HAL_I2C_MspInit+0x16c>)
 801606a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801606e:	6413      	str	r3, [r2, #64]	; 0x40
 8016070:	4b0d      	ldr	r3, [pc, #52]	; (80160a8 <HAL_I2C_MspInit+0x16c>)
 8016072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016074:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016078:	60bb      	str	r3, [r7, #8]
 801607a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 801607c:	2200      	movs	r2, #0
 801607e:	2100      	movs	r1, #0
 8016080:	2048      	movs	r0, #72	; 0x48
 8016082:	f000 fc74 	bl	801696e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8016086:	2048      	movs	r0, #72	; 0x48
 8016088:	f000 fc8d 	bl	80169a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 801608c:	2200      	movs	r2, #0
 801608e:	2100      	movs	r1, #0
 8016090:	2049      	movs	r0, #73	; 0x49
 8016092:	f000 fc6c 	bl	801696e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8016096:	2049      	movs	r0, #73	; 0x49
 8016098:	f000 fc85 	bl	80169a6 <HAL_NVIC_EnableIRQ>
}
 801609c:	bf00      	nop
 801609e:	3730      	adds	r7, #48	; 0x30
 80160a0:	46bd      	mov	sp, r7
 80160a2:	bd80      	pop	{r7, pc}
 80160a4:	40005400 	.word	0x40005400
 80160a8:	40023800 	.word	0x40023800
 80160ac:	40020400 	.word	0x40020400
 80160b0:	40005c00 	.word	0x40005c00
 80160b4:	40020800 	.word	0x40020800
 80160b8:	40020000 	.word	0x40020000

080160bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80160bc:	b580      	push	{r7, lr}
 80160be:	b086      	sub	sp, #24
 80160c0:	af00      	add	r7, sp, #0
 80160c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	681b      	ldr	r3, [r3, #0]
 80160c8:	4a26      	ldr	r2, [pc, #152]	; (8016164 <HAL_TIM_Base_MspInit+0xa8>)
 80160ca:	4293      	cmp	r3, r2
 80160cc:	d10e      	bne.n	80160ec <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80160ce:	2300      	movs	r3, #0
 80160d0:	617b      	str	r3, [r7, #20]
 80160d2:	4b25      	ldr	r3, [pc, #148]	; (8016168 <HAL_TIM_Base_MspInit+0xac>)
 80160d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80160d6:	4a24      	ldr	r2, [pc, #144]	; (8016168 <HAL_TIM_Base_MspInit+0xac>)
 80160d8:	f043 0304 	orr.w	r3, r3, #4
 80160dc:	6413      	str	r3, [r2, #64]	; 0x40
 80160de:	4b22      	ldr	r3, [pc, #136]	; (8016168 <HAL_TIM_Base_MspInit+0xac>)
 80160e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80160e2:	f003 0304 	and.w	r3, r3, #4
 80160e6:	617b      	str	r3, [r7, #20]
 80160e8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80160ea:	e036      	b.n	801615a <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM10)
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	681b      	ldr	r3, [r3, #0]
 80160f0:	4a1e      	ldr	r2, [pc, #120]	; (801616c <HAL_TIM_Base_MspInit+0xb0>)
 80160f2:	4293      	cmp	r3, r2
 80160f4:	d116      	bne.n	8016124 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80160f6:	2300      	movs	r3, #0
 80160f8:	613b      	str	r3, [r7, #16]
 80160fa:	4b1b      	ldr	r3, [pc, #108]	; (8016168 <HAL_TIM_Base_MspInit+0xac>)
 80160fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80160fe:	4a1a      	ldr	r2, [pc, #104]	; (8016168 <HAL_TIM_Base_MspInit+0xac>)
 8016100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8016104:	6453      	str	r3, [r2, #68]	; 0x44
 8016106:	4b18      	ldr	r3, [pc, #96]	; (8016168 <HAL_TIM_Base_MspInit+0xac>)
 8016108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801610a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801610e:	613b      	str	r3, [r7, #16]
 8016110:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8016112:	2200      	movs	r2, #0
 8016114:	2100      	movs	r1, #0
 8016116:	2019      	movs	r0, #25
 8016118:	f000 fc29 	bl	801696e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 801611c:	2019      	movs	r0, #25
 801611e:	f000 fc42 	bl	80169a6 <HAL_NVIC_EnableIRQ>
}
 8016122:	e01a      	b.n	801615a <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM11)
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	681b      	ldr	r3, [r3, #0]
 8016128:	4a11      	ldr	r2, [pc, #68]	; (8016170 <HAL_TIM_Base_MspInit+0xb4>)
 801612a:	4293      	cmp	r3, r2
 801612c:	d115      	bne.n	801615a <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 801612e:	2300      	movs	r3, #0
 8016130:	60fb      	str	r3, [r7, #12]
 8016132:	4b0d      	ldr	r3, [pc, #52]	; (8016168 <HAL_TIM_Base_MspInit+0xac>)
 8016134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016136:	4a0c      	ldr	r2, [pc, #48]	; (8016168 <HAL_TIM_Base_MspInit+0xac>)
 8016138:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801613c:	6453      	str	r3, [r2, #68]	; 0x44
 801613e:	4b0a      	ldr	r3, [pc, #40]	; (8016168 <HAL_TIM_Base_MspInit+0xac>)
 8016140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016142:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8016146:	60fb      	str	r3, [r7, #12]
 8016148:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 801614a:	2200      	movs	r2, #0
 801614c:	2100      	movs	r1, #0
 801614e:	201a      	movs	r0, #26
 8016150:	f000 fc0d 	bl	801696e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8016154:	201a      	movs	r0, #26
 8016156:	f000 fc26 	bl	80169a6 <HAL_NVIC_EnableIRQ>
}
 801615a:	bf00      	nop
 801615c:	3718      	adds	r7, #24
 801615e:	46bd      	mov	sp, r7
 8016160:	bd80      	pop	{r7, pc}
 8016162:	bf00      	nop
 8016164:	40000800 	.word	0x40000800
 8016168:	40023800 	.word	0x40023800
 801616c:	40014400 	.word	0x40014400
 8016170:	40014800 	.word	0x40014800

08016174 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8016174:	b580      	push	{r7, lr}
 8016176:	b088      	sub	sp, #32
 8016178:	af00      	add	r7, sp, #0
 801617a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801617c:	f107 030c 	add.w	r3, r7, #12
 8016180:	2200      	movs	r2, #0
 8016182:	601a      	str	r2, [r3, #0]
 8016184:	605a      	str	r2, [r3, #4]
 8016186:	609a      	str	r2, [r3, #8]
 8016188:	60da      	str	r2, [r3, #12]
 801618a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	681b      	ldr	r3, [r3, #0]
 8016190:	4a12      	ldr	r2, [pc, #72]	; (80161dc <HAL_TIM_MspPostInit+0x68>)
 8016192:	4293      	cmp	r3, r2
 8016194:	d11d      	bne.n	80161d2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8016196:	2300      	movs	r3, #0
 8016198:	60bb      	str	r3, [r7, #8]
 801619a:	4b11      	ldr	r3, [pc, #68]	; (80161e0 <HAL_TIM_MspPostInit+0x6c>)
 801619c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801619e:	4a10      	ldr	r2, [pc, #64]	; (80161e0 <HAL_TIM_MspPostInit+0x6c>)
 80161a0:	f043 0302 	orr.w	r3, r3, #2
 80161a4:	6313      	str	r3, [r2, #48]	; 0x30
 80161a6:	4b0e      	ldr	r3, [pc, #56]	; (80161e0 <HAL_TIM_MspPostInit+0x6c>)
 80161a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80161aa:	f003 0302 	and.w	r3, r3, #2
 80161ae:	60bb      	str	r3, [r7, #8]
 80161b0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = TIM4_CH1_PWMMOT_Pin;
 80161b2:	2340      	movs	r3, #64	; 0x40
 80161b4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80161b6:	2302      	movs	r3, #2
 80161b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80161ba:	2300      	movs	r3, #0
 80161bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80161be:	2300      	movs	r3, #0
 80161c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80161c2:	2302      	movs	r3, #2
 80161c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM4_CH1_PWMMOT_GPIO_Port, &GPIO_InitStruct);
 80161c6:	f107 030c 	add.w	r3, r7, #12
 80161ca:	4619      	mov	r1, r3
 80161cc:	4805      	ldr	r0, [pc, #20]	; (80161e4 <HAL_TIM_MspPostInit+0x70>)
 80161ce:	f001 f815 	bl	80171fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80161d2:	bf00      	nop
 80161d4:	3720      	adds	r7, #32
 80161d6:	46bd      	mov	sp, r7
 80161d8:	bd80      	pop	{r7, pc}
 80161da:	bf00      	nop
 80161dc:	40000800 	.word	0x40000800
 80161e0:	40023800 	.word	0x40023800
 80161e4:	40020400 	.word	0x40020400

080161e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80161e8:	b580      	push	{r7, lr}
 80161ea:	b08a      	sub	sp, #40	; 0x28
 80161ec:	af00      	add	r7, sp, #0
 80161ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80161f0:	f107 0314 	add.w	r3, r7, #20
 80161f4:	2200      	movs	r2, #0
 80161f6:	601a      	str	r2, [r3, #0]
 80161f8:	605a      	str	r2, [r3, #4]
 80161fa:	609a      	str	r2, [r3, #8]
 80161fc:	60da      	str	r2, [r3, #12]
 80161fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	681b      	ldr	r3, [r3, #0]
 8016204:	4a4b      	ldr	r2, [pc, #300]	; (8016334 <HAL_UART_MspInit+0x14c>)
 8016206:	4293      	cmp	r3, r2
 8016208:	f040 8090 	bne.w	801632c <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 801620c:	2300      	movs	r3, #0
 801620e:	613b      	str	r3, [r7, #16]
 8016210:	4b49      	ldr	r3, [pc, #292]	; (8016338 <HAL_UART_MspInit+0x150>)
 8016212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016214:	4a48      	ldr	r2, [pc, #288]	; (8016338 <HAL_UART_MspInit+0x150>)
 8016216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801621a:	6413      	str	r3, [r2, #64]	; 0x40
 801621c:	4b46      	ldr	r3, [pc, #280]	; (8016338 <HAL_UART_MspInit+0x150>)
 801621e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016224:	613b      	str	r3, [r7, #16]
 8016226:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8016228:	2300      	movs	r3, #0
 801622a:	60fb      	str	r3, [r7, #12]
 801622c:	4b42      	ldr	r3, [pc, #264]	; (8016338 <HAL_UART_MspInit+0x150>)
 801622e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016230:	4a41      	ldr	r2, [pc, #260]	; (8016338 <HAL_UART_MspInit+0x150>)
 8016232:	f043 0301 	orr.w	r3, r3, #1
 8016236:	6313      	str	r3, [r2, #48]	; 0x30
 8016238:	4b3f      	ldr	r3, [pc, #252]	; (8016338 <HAL_UART_MspInit+0x150>)
 801623a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801623c:	f003 0301 	and.w	r3, r3, #1
 8016240:	60fb      	str	r3, [r7, #12]
 8016242:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8016244:	230c      	movs	r3, #12
 8016246:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016248:	2302      	movs	r3, #2
 801624a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801624c:	2300      	movs	r3, #0
 801624e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016250:	2303      	movs	r3, #3
 8016252:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8016254:	2307      	movs	r3, #7
 8016256:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016258:	f107 0314 	add.w	r3, r7, #20
 801625c:	4619      	mov	r1, r3
 801625e:	4837      	ldr	r0, [pc, #220]	; (801633c <HAL_UART_MspInit+0x154>)
 8016260:	f000 ffcc 	bl	80171fc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream7;
 8016264:	4b36      	ldr	r3, [pc, #216]	; (8016340 <HAL_UART_MspInit+0x158>)
 8016266:	4a37      	ldr	r2, [pc, #220]	; (8016344 <HAL_UART_MspInit+0x15c>)
 8016268:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_6;
 801626a:	4b35      	ldr	r3, [pc, #212]	; (8016340 <HAL_UART_MspInit+0x158>)
 801626c:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8016270:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8016272:	4b33      	ldr	r3, [pc, #204]	; (8016340 <HAL_UART_MspInit+0x158>)
 8016274:	2200      	movs	r2, #0
 8016276:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8016278:	4b31      	ldr	r3, [pc, #196]	; (8016340 <HAL_UART_MspInit+0x158>)
 801627a:	2200      	movs	r2, #0
 801627c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 801627e:	4b30      	ldr	r3, [pc, #192]	; (8016340 <HAL_UART_MspInit+0x158>)
 8016280:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016284:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8016286:	4b2e      	ldr	r3, [pc, #184]	; (8016340 <HAL_UART_MspInit+0x158>)
 8016288:	2200      	movs	r2, #0
 801628a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 801628c:	4b2c      	ldr	r3, [pc, #176]	; (8016340 <HAL_UART_MspInit+0x158>)
 801628e:	2200      	movs	r2, #0
 8016290:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8016292:	4b2b      	ldr	r3, [pc, #172]	; (8016340 <HAL_UART_MspInit+0x158>)
 8016294:	2200      	movs	r2, #0
 8016296:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8016298:	4b29      	ldr	r3, [pc, #164]	; (8016340 <HAL_UART_MspInit+0x158>)
 801629a:	2200      	movs	r2, #0
 801629c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801629e:	4b28      	ldr	r3, [pc, #160]	; (8016340 <HAL_UART_MspInit+0x158>)
 80162a0:	2200      	movs	r2, #0
 80162a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80162a4:	4826      	ldr	r0, [pc, #152]	; (8016340 <HAL_UART_MspInit+0x158>)
 80162a6:	f000 fb99 	bl	80169dc <HAL_DMA_Init>
 80162aa:	4603      	mov	r3, r0
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d001      	beq.n	80162b4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80162b0:	f7ed ffc8 	bl	8004244 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	4a22      	ldr	r2, [pc, #136]	; (8016340 <HAL_UART_MspInit+0x158>)
 80162b8:	639a      	str	r2, [r3, #56]	; 0x38
 80162ba:	4a21      	ldr	r2, [pc, #132]	; (8016340 <HAL_UART_MspInit+0x158>)
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80162c0:	4b21      	ldr	r3, [pc, #132]	; (8016348 <HAL_UART_MspInit+0x160>)
 80162c2:	4a22      	ldr	r2, [pc, #136]	; (801634c <HAL_UART_MspInit+0x164>)
 80162c4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80162c6:	4b20      	ldr	r3, [pc, #128]	; (8016348 <HAL_UART_MspInit+0x160>)
 80162c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80162cc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80162ce:	4b1e      	ldr	r3, [pc, #120]	; (8016348 <HAL_UART_MspInit+0x160>)
 80162d0:	2240      	movs	r2, #64	; 0x40
 80162d2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80162d4:	4b1c      	ldr	r3, [pc, #112]	; (8016348 <HAL_UART_MspInit+0x160>)
 80162d6:	2200      	movs	r2, #0
 80162d8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80162da:	4b1b      	ldr	r3, [pc, #108]	; (8016348 <HAL_UART_MspInit+0x160>)
 80162dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80162e0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80162e2:	4b19      	ldr	r3, [pc, #100]	; (8016348 <HAL_UART_MspInit+0x160>)
 80162e4:	2200      	movs	r2, #0
 80162e6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80162e8:	4b17      	ldr	r3, [pc, #92]	; (8016348 <HAL_UART_MspInit+0x160>)
 80162ea:	2200      	movs	r2, #0
 80162ec:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80162ee:	4b16      	ldr	r3, [pc, #88]	; (8016348 <HAL_UART_MspInit+0x160>)
 80162f0:	2200      	movs	r2, #0
 80162f2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80162f4:	4b14      	ldr	r3, [pc, #80]	; (8016348 <HAL_UART_MspInit+0x160>)
 80162f6:	2200      	movs	r2, #0
 80162f8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80162fa:	4b13      	ldr	r3, [pc, #76]	; (8016348 <HAL_UART_MspInit+0x160>)
 80162fc:	2200      	movs	r2, #0
 80162fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8016300:	4811      	ldr	r0, [pc, #68]	; (8016348 <HAL_UART_MspInit+0x160>)
 8016302:	f000 fb6b 	bl	80169dc <HAL_DMA_Init>
 8016306:	4603      	mov	r3, r0
 8016308:	2b00      	cmp	r3, #0
 801630a:	d001      	beq.n	8016310 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 801630c:	f7ed ff9a 	bl	8004244 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	4a0d      	ldr	r2, [pc, #52]	; (8016348 <HAL_UART_MspInit+0x160>)
 8016314:	635a      	str	r2, [r3, #52]	; 0x34
 8016316:	4a0c      	ldr	r2, [pc, #48]	; (8016348 <HAL_UART_MspInit+0x160>)
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 801631c:	2200      	movs	r2, #0
 801631e:	2100      	movs	r1, #0
 8016320:	2026      	movs	r0, #38	; 0x26
 8016322:	f000 fb24 	bl	801696e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8016326:	2026      	movs	r0, #38	; 0x26
 8016328:	f000 fb3d 	bl	80169a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 801632c:	bf00      	nop
 801632e:	3728      	adds	r7, #40	; 0x28
 8016330:	46bd      	mov	sp, r7
 8016332:	bd80      	pop	{r7, pc}
 8016334:	40004400 	.word	0x40004400
 8016338:	40023800 	.word	0x40023800
 801633c:	40020000 	.word	0x40020000
 8016340:	20000438 	.word	0x20000438
 8016344:	400260b8 	.word	0x400260b8
 8016348:	20000498 	.word	0x20000498
 801634c:	400260a0 	.word	0x400260a0

08016350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8016350:	b480      	push	{r7}
 8016352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8016354:	e7fe      	b.n	8016354 <NMI_Handler+0x4>

08016356 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8016356:	b480      	push	{r7}
 8016358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801635a:	e7fe      	b.n	801635a <HardFault_Handler+0x4>

0801635c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 801635c:	b480      	push	{r7}
 801635e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8016360:	e7fe      	b.n	8016360 <MemManage_Handler+0x4>

08016362 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8016362:	b480      	push	{r7}
 8016364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8016366:	e7fe      	b.n	8016366 <BusFault_Handler+0x4>

08016368 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8016368:	b480      	push	{r7}
 801636a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801636c:	e7fe      	b.n	801636c <UsageFault_Handler+0x4>

0801636e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 801636e:	b480      	push	{r7}
 8016370:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8016372:	bf00      	nop
 8016374:	46bd      	mov	sp, r7
 8016376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801637a:	4770      	bx	lr

0801637c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801637c:	b480      	push	{r7}
 801637e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8016380:	bf00      	nop
 8016382:	46bd      	mov	sp, r7
 8016384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016388:	4770      	bx	lr

0801638a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 801638a:	b480      	push	{r7}
 801638c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 801638e:	bf00      	nop
 8016390:	46bd      	mov	sp, r7
 8016392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016396:	4770      	bx	lr

08016398 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8016398:	b580      	push	{r7, lr}
 801639a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 801639c:	f000 f9c8 	bl	8016730 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80163a0:	bf00      	nop
 80163a2:	bd80      	pop	{r7, pc}

080163a4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80163a4:	b580      	push	{r7, lr}
 80163a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI2_SetZero_Pin);
 80163a8:	2004      	movs	r0, #4
 80163aa:	f001 f8dd 	bl	8017568 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80163ae:	bf00      	nop
 80163b0:	bd80      	pop	{r7, pc}
	...

080163b4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80163b4:	b580      	push	{r7, lr}
 80163b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80163b8:	4802      	ldr	r0, [pc, #8]	; (80163c4 <DMA1_Stream6_IRQHandler+0x10>)
 80163ba:	f000 fca7 	bl	8016d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80163be:	bf00      	nop
 80163c0:	bd80      	pop	{r7, pc}
 80163c2:	bf00      	nop
 80163c4:	20000498 	.word	0x20000498

080163c8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80163c8:	b580      	push	{r7, lr}
 80163ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80163cc:	4802      	ldr	r0, [pc, #8]	; (80163d8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80163ce:	f004 fdef 	bl	801afb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80163d2:	bf00      	nop
 80163d4:	bd80      	pop	{r7, pc}
 80163d6:	bf00      	nop
 80163d8:	20000364 	.word	0x20000364

080163dc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80163dc:	b580      	push	{r7, lr}
 80163de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80163e0:	4802      	ldr	r0, [pc, #8]	; (80163ec <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80163e2:	f004 fde5 	bl	801afb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80163e6:	bf00      	nop
 80163e8:	bd80      	pop	{r7, pc}
 80163ea:	bf00      	nop
 80163ec:	200003ac 	.word	0x200003ac

080163f0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80163f0:	b580      	push	{r7, lr}
 80163f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80163f4:	4802      	ldr	r0, [pc, #8]	; (8016400 <I2C1_EV_IRQHandler+0x10>)
 80163f6:	f001 fef7 	bl	80181e8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80163fa:	bf00      	nop
 80163fc:	bd80      	pop	{r7, pc}
 80163fe:	bf00      	nop
 8016400:	20000274 	.word	0x20000274

08016404 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8016404:	b580      	push	{r7, lr}
 8016406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8016408:	4802      	ldr	r0, [pc, #8]	; (8016414 <I2C1_ER_IRQHandler+0x10>)
 801640a:	f002 f85e 	bl	80184ca <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 801640e:	bf00      	nop
 8016410:	bd80      	pop	{r7, pc}
 8016412:	bf00      	nop
 8016414:	20000274 	.word	0x20000274

08016418 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8016418:	b580      	push	{r7, lr}
 801641a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 801641c:	4802      	ldr	r0, [pc, #8]	; (8016428 <USART2_IRQHandler+0x10>)
 801641e:	f005 fd13 	bl	801be48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8016422:	bf00      	nop
 8016424:	bd80      	pop	{r7, pc}
 8016426:	bf00      	nop
 8016428:	200003f4 	.word	0x200003f4

0801642c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 801642c:	b580      	push	{r7, lr}
 801642e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI10_Stop_Pin);
 8016430:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8016434:	f001 f898 	bl	8017568 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI11_EMER_Pin);
 8016438:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801643c:	f001 f894 	bl	8017568 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8016440:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8016444:	f001 f890 	bl	8017568 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8016448:	bf00      	nop
 801644a:	bd80      	pop	{r7, pc}

0801644c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 801644c:	b580      	push	{r7, lr}
 801644e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8016450:	4802      	ldr	r0, [pc, #8]	; (801645c <DMA1_Stream7_IRQHandler+0x10>)
 8016452:	f000 fc5b 	bl	8016d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8016456:	bf00      	nop
 8016458:	bd80      	pop	{r7, pc}
 801645a:	bf00      	nop
 801645c:	20000438 	.word	0x20000438

08016460 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8016460:	b580      	push	{r7, lr}
 8016462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8016464:	4802      	ldr	r0, [pc, #8]	; (8016470 <I2C3_EV_IRQHandler+0x10>)
 8016466:	f001 febf 	bl	80181e8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 801646a:	bf00      	nop
 801646c:	bd80      	pop	{r7, pc}
 801646e:	bf00      	nop
 8016470:	200002c8 	.word	0x200002c8

08016474 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8016474:	b580      	push	{r7, lr}
 8016476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8016478:	4802      	ldr	r0, [pc, #8]	; (8016484 <I2C3_ER_IRQHandler+0x10>)
 801647a:	f002 f826 	bl	80184ca <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 801647e:	bf00      	nop
 8016480:	bd80      	pop	{r7, pc}
 8016482:	bf00      	nop
 8016484:	200002c8 	.word	0x200002c8

08016488 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8016488:	b480      	push	{r7}
 801648a:	af00      	add	r7, sp, #0
	return 1;
 801648c:	2301      	movs	r3, #1
}
 801648e:	4618      	mov	r0, r3
 8016490:	46bd      	mov	sp, r7
 8016492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016496:	4770      	bx	lr

08016498 <_kill>:

int _kill(int pid, int sig)
{
 8016498:	b580      	push	{r7, lr}
 801649a:	b082      	sub	sp, #8
 801649c:	af00      	add	r7, sp, #0
 801649e:	6078      	str	r0, [r7, #4]
 80164a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80164a2:	f007 fd1d 	bl	801dee0 <__errno>
 80164a6:	4603      	mov	r3, r0
 80164a8:	2216      	movs	r2, #22
 80164aa:	601a      	str	r2, [r3, #0]
	return -1;
 80164ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80164b0:	4618      	mov	r0, r3
 80164b2:	3708      	adds	r7, #8
 80164b4:	46bd      	mov	sp, r7
 80164b6:	bd80      	pop	{r7, pc}

080164b8 <_exit>:

void _exit (int status)
{
 80164b8:	b580      	push	{r7, lr}
 80164ba:	b082      	sub	sp, #8
 80164bc:	af00      	add	r7, sp, #0
 80164be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80164c0:	f04f 31ff 	mov.w	r1, #4294967295
 80164c4:	6878      	ldr	r0, [r7, #4]
 80164c6:	f7ff ffe7 	bl	8016498 <_kill>
	while (1) {}		/* Make sure we hang here */
 80164ca:	e7fe      	b.n	80164ca <_exit+0x12>

080164cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80164cc:	b580      	push	{r7, lr}
 80164ce:	b086      	sub	sp, #24
 80164d0:	af00      	add	r7, sp, #0
 80164d2:	60f8      	str	r0, [r7, #12]
 80164d4:	60b9      	str	r1, [r7, #8]
 80164d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80164d8:	2300      	movs	r3, #0
 80164da:	617b      	str	r3, [r7, #20]
 80164dc:	e00a      	b.n	80164f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80164de:	f3af 8000 	nop.w
 80164e2:	4601      	mov	r1, r0
 80164e4:	68bb      	ldr	r3, [r7, #8]
 80164e6:	1c5a      	adds	r2, r3, #1
 80164e8:	60ba      	str	r2, [r7, #8]
 80164ea:	b2ca      	uxtb	r2, r1
 80164ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80164ee:	697b      	ldr	r3, [r7, #20]
 80164f0:	3301      	adds	r3, #1
 80164f2:	617b      	str	r3, [r7, #20]
 80164f4:	697a      	ldr	r2, [r7, #20]
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	429a      	cmp	r2, r3
 80164fa:	dbf0      	blt.n	80164de <_read+0x12>
	}

return len;
 80164fc:	687b      	ldr	r3, [r7, #4]
}
 80164fe:	4618      	mov	r0, r3
 8016500:	3718      	adds	r7, #24
 8016502:	46bd      	mov	sp, r7
 8016504:	bd80      	pop	{r7, pc}

08016506 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8016506:	b580      	push	{r7, lr}
 8016508:	b086      	sub	sp, #24
 801650a:	af00      	add	r7, sp, #0
 801650c:	60f8      	str	r0, [r7, #12]
 801650e:	60b9      	str	r1, [r7, #8]
 8016510:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8016512:	2300      	movs	r3, #0
 8016514:	617b      	str	r3, [r7, #20]
 8016516:	e009      	b.n	801652c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8016518:	68bb      	ldr	r3, [r7, #8]
 801651a:	1c5a      	adds	r2, r3, #1
 801651c:	60ba      	str	r2, [r7, #8]
 801651e:	781b      	ldrb	r3, [r3, #0]
 8016520:	4618      	mov	r0, r3
 8016522:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8016526:	697b      	ldr	r3, [r7, #20]
 8016528:	3301      	adds	r3, #1
 801652a:	617b      	str	r3, [r7, #20]
 801652c:	697a      	ldr	r2, [r7, #20]
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	429a      	cmp	r2, r3
 8016532:	dbf1      	blt.n	8016518 <_write+0x12>
	}
	return len;
 8016534:	687b      	ldr	r3, [r7, #4]
}
 8016536:	4618      	mov	r0, r3
 8016538:	3718      	adds	r7, #24
 801653a:	46bd      	mov	sp, r7
 801653c:	bd80      	pop	{r7, pc}

0801653e <_close>:

int _close(int file)
{
 801653e:	b480      	push	{r7}
 8016540:	b083      	sub	sp, #12
 8016542:	af00      	add	r7, sp, #0
 8016544:	6078      	str	r0, [r7, #4]
	return -1;
 8016546:	f04f 33ff 	mov.w	r3, #4294967295
}
 801654a:	4618      	mov	r0, r3
 801654c:	370c      	adds	r7, #12
 801654e:	46bd      	mov	sp, r7
 8016550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016554:	4770      	bx	lr

08016556 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8016556:	b480      	push	{r7}
 8016558:	b083      	sub	sp, #12
 801655a:	af00      	add	r7, sp, #0
 801655c:	6078      	str	r0, [r7, #4]
 801655e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8016560:	683b      	ldr	r3, [r7, #0]
 8016562:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8016566:	605a      	str	r2, [r3, #4]
	return 0;
 8016568:	2300      	movs	r3, #0
}
 801656a:	4618      	mov	r0, r3
 801656c:	370c      	adds	r7, #12
 801656e:	46bd      	mov	sp, r7
 8016570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016574:	4770      	bx	lr

08016576 <_isatty>:

int _isatty(int file)
{
 8016576:	b480      	push	{r7}
 8016578:	b083      	sub	sp, #12
 801657a:	af00      	add	r7, sp, #0
 801657c:	6078      	str	r0, [r7, #4]
	return 1;
 801657e:	2301      	movs	r3, #1
}
 8016580:	4618      	mov	r0, r3
 8016582:	370c      	adds	r7, #12
 8016584:	46bd      	mov	sp, r7
 8016586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801658a:	4770      	bx	lr

0801658c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801658c:	b480      	push	{r7}
 801658e:	b085      	sub	sp, #20
 8016590:	af00      	add	r7, sp, #0
 8016592:	60f8      	str	r0, [r7, #12]
 8016594:	60b9      	str	r1, [r7, #8]
 8016596:	607a      	str	r2, [r7, #4]
	return 0;
 8016598:	2300      	movs	r3, #0
}
 801659a:	4618      	mov	r0, r3
 801659c:	3714      	adds	r7, #20
 801659e:	46bd      	mov	sp, r7
 80165a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165a4:	4770      	bx	lr
	...

080165a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80165a8:	b580      	push	{r7, lr}
 80165aa:	b086      	sub	sp, #24
 80165ac:	af00      	add	r7, sp, #0
 80165ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80165b0:	4a14      	ldr	r2, [pc, #80]	; (8016604 <_sbrk+0x5c>)
 80165b2:	4b15      	ldr	r3, [pc, #84]	; (8016608 <_sbrk+0x60>)
 80165b4:	1ad3      	subs	r3, r2, r3
 80165b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80165b8:	697b      	ldr	r3, [r7, #20]
 80165ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80165bc:	4b13      	ldr	r3, [pc, #76]	; (801660c <_sbrk+0x64>)
 80165be:	681b      	ldr	r3, [r3, #0]
 80165c0:	2b00      	cmp	r3, #0
 80165c2:	d102      	bne.n	80165ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80165c4:	4b11      	ldr	r3, [pc, #68]	; (801660c <_sbrk+0x64>)
 80165c6:	4a12      	ldr	r2, [pc, #72]	; (8016610 <_sbrk+0x68>)
 80165c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80165ca:	4b10      	ldr	r3, [pc, #64]	; (801660c <_sbrk+0x64>)
 80165cc:	681a      	ldr	r2, [r3, #0]
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	4413      	add	r3, r2
 80165d2:	693a      	ldr	r2, [r7, #16]
 80165d4:	429a      	cmp	r2, r3
 80165d6:	d207      	bcs.n	80165e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80165d8:	f007 fc82 	bl	801dee0 <__errno>
 80165dc:	4603      	mov	r3, r0
 80165de:	220c      	movs	r2, #12
 80165e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80165e2:	f04f 33ff 	mov.w	r3, #4294967295
 80165e6:	e009      	b.n	80165fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80165e8:	4b08      	ldr	r3, [pc, #32]	; (801660c <_sbrk+0x64>)
 80165ea:	681b      	ldr	r3, [r3, #0]
 80165ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80165ee:	4b07      	ldr	r3, [pc, #28]	; (801660c <_sbrk+0x64>)
 80165f0:	681a      	ldr	r2, [r3, #0]
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	4413      	add	r3, r2
 80165f6:	4a05      	ldr	r2, [pc, #20]	; (801660c <_sbrk+0x64>)
 80165f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80165fa:	68fb      	ldr	r3, [r7, #12]
}
 80165fc:	4618      	mov	r0, r3
 80165fe:	3718      	adds	r7, #24
 8016600:	46bd      	mov	sp, r7
 8016602:	bd80      	pop	{r7, pc}
 8016604:	20020000 	.word	0x20020000
 8016608:	00000400 	.word	0x00000400
 801660c:	200007e8 	.word	0x200007e8
 8016610:	20000800 	.word	0x20000800

08016614 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8016614:	b480      	push	{r7}
 8016616:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8016618:	4b06      	ldr	r3, [pc, #24]	; (8016634 <SystemInit+0x20>)
 801661a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801661e:	4a05      	ldr	r2, [pc, #20]	; (8016634 <SystemInit+0x20>)
 8016620:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016624:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8016628:	bf00      	nop
 801662a:	46bd      	mov	sp, r7
 801662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016630:	4770      	bx	lr
 8016632:	bf00      	nop
 8016634:	e000ed00 	.word	0xe000ed00

08016638 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8016638:	f8df d034 	ldr.w	sp, [pc, #52]	; 8016670 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 801663c:	480d      	ldr	r0, [pc, #52]	; (8016674 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 801663e:	490e      	ldr	r1, [pc, #56]	; (8016678 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8016640:	4a0e      	ldr	r2, [pc, #56]	; (801667c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8016642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8016644:	e002      	b.n	801664c <LoopCopyDataInit>

08016646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8016646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8016648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801664a:	3304      	adds	r3, #4

0801664c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801664c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801664e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8016650:	d3f9      	bcc.n	8016646 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8016652:	4a0b      	ldr	r2, [pc, #44]	; (8016680 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8016654:	4c0b      	ldr	r4, [pc, #44]	; (8016684 <LoopFillZerobss+0x26>)
  movs r3, #0
 8016656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8016658:	e001      	b.n	801665e <LoopFillZerobss>

0801665a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801665a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801665c:	3204      	adds	r2, #4

0801665e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801665e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8016660:	d3fb      	bcc.n	801665a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8016662:	f7ff ffd7 	bl	8016614 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8016666:	f007 fc53 	bl	801df10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801666a:	f7eb f9ab 	bl	80019c4 <main>
  bx  lr    
 801666e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8016670:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8016674:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8016678:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 801667c:	0802a038 	.word	0x0802a038
  ldr r2, =_sbss
 8016680:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 8016684:	20000800 	.word	0x20000800

08016688 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8016688:	e7fe      	b.n	8016688 <ADC_IRQHandler>
	...

0801668c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801668c:	b580      	push	{r7, lr}
 801668e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8016690:	4b0e      	ldr	r3, [pc, #56]	; (80166cc <HAL_Init+0x40>)
 8016692:	681b      	ldr	r3, [r3, #0]
 8016694:	4a0d      	ldr	r2, [pc, #52]	; (80166cc <HAL_Init+0x40>)
 8016696:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801669a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 801669c:	4b0b      	ldr	r3, [pc, #44]	; (80166cc <HAL_Init+0x40>)
 801669e:	681b      	ldr	r3, [r3, #0]
 80166a0:	4a0a      	ldr	r2, [pc, #40]	; (80166cc <HAL_Init+0x40>)
 80166a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80166a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80166a8:	4b08      	ldr	r3, [pc, #32]	; (80166cc <HAL_Init+0x40>)
 80166aa:	681b      	ldr	r3, [r3, #0]
 80166ac:	4a07      	ldr	r2, [pc, #28]	; (80166cc <HAL_Init+0x40>)
 80166ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80166b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80166b4:	2003      	movs	r0, #3
 80166b6:	f000 f94f 	bl	8016958 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80166ba:	2000      	movs	r0, #0
 80166bc:	f000 f808 	bl	80166d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80166c0:	f7ff fc14 	bl	8015eec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80166c4:	2300      	movs	r3, #0
}
 80166c6:	4618      	mov	r0, r3
 80166c8:	bd80      	pop	{r7, pc}
 80166ca:	bf00      	nop
 80166cc:	40023c00 	.word	0x40023c00

080166d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80166d0:	b580      	push	{r7, lr}
 80166d2:	b082      	sub	sp, #8
 80166d4:	af00      	add	r7, sp, #0
 80166d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80166d8:	4b12      	ldr	r3, [pc, #72]	; (8016724 <HAL_InitTick+0x54>)
 80166da:	681a      	ldr	r2, [r3, #0]
 80166dc:	4b12      	ldr	r3, [pc, #72]	; (8016728 <HAL_InitTick+0x58>)
 80166de:	781b      	ldrb	r3, [r3, #0]
 80166e0:	4619      	mov	r1, r3
 80166e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80166e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80166ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80166ee:	4618      	mov	r0, r3
 80166f0:	f000 f967 	bl	80169c2 <HAL_SYSTICK_Config>
 80166f4:	4603      	mov	r3, r0
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d001      	beq.n	80166fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80166fa:	2301      	movs	r3, #1
 80166fc:	e00e      	b.n	801671c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	2b0f      	cmp	r3, #15
 8016702:	d80a      	bhi.n	801671a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8016704:	2200      	movs	r2, #0
 8016706:	6879      	ldr	r1, [r7, #4]
 8016708:	f04f 30ff 	mov.w	r0, #4294967295
 801670c:	f000 f92f 	bl	801696e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8016710:	4a06      	ldr	r2, [pc, #24]	; (801672c <HAL_InitTick+0x5c>)
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8016716:	2300      	movs	r3, #0
 8016718:	e000      	b.n	801671c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 801671a:	2301      	movs	r3, #1
}
 801671c:	4618      	mov	r0, r3
 801671e:	3708      	adds	r7, #8
 8016720:	46bd      	mov	sp, r7
 8016722:	bd80      	pop	{r7, pc}
 8016724:	200001e0 	.word	0x200001e0
 8016728:	200001e8 	.word	0x200001e8
 801672c:	200001e4 	.word	0x200001e4

08016730 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8016730:	b480      	push	{r7}
 8016732:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8016734:	4b06      	ldr	r3, [pc, #24]	; (8016750 <HAL_IncTick+0x20>)
 8016736:	781b      	ldrb	r3, [r3, #0]
 8016738:	461a      	mov	r2, r3
 801673a:	4b06      	ldr	r3, [pc, #24]	; (8016754 <HAL_IncTick+0x24>)
 801673c:	681b      	ldr	r3, [r3, #0]
 801673e:	4413      	add	r3, r2
 8016740:	4a04      	ldr	r2, [pc, #16]	; (8016754 <HAL_IncTick+0x24>)
 8016742:	6013      	str	r3, [r2, #0]
}
 8016744:	bf00      	nop
 8016746:	46bd      	mov	sp, r7
 8016748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801674c:	4770      	bx	lr
 801674e:	bf00      	nop
 8016750:	200001e8 	.word	0x200001e8
 8016754:	200007ec 	.word	0x200007ec

08016758 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8016758:	b480      	push	{r7}
 801675a:	af00      	add	r7, sp, #0
  return uwTick;
 801675c:	4b03      	ldr	r3, [pc, #12]	; (801676c <HAL_GetTick+0x14>)
 801675e:	681b      	ldr	r3, [r3, #0]
}
 8016760:	4618      	mov	r0, r3
 8016762:	46bd      	mov	sp, r7
 8016764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016768:	4770      	bx	lr
 801676a:	bf00      	nop
 801676c:	200007ec 	.word	0x200007ec

08016770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8016770:	b580      	push	{r7, lr}
 8016772:	b084      	sub	sp, #16
 8016774:	af00      	add	r7, sp, #0
 8016776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8016778:	f7ff ffee 	bl	8016758 <HAL_GetTick>
 801677c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8016782:	68fb      	ldr	r3, [r7, #12]
 8016784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016788:	d005      	beq.n	8016796 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801678a:	4b0a      	ldr	r3, [pc, #40]	; (80167b4 <HAL_Delay+0x44>)
 801678c:	781b      	ldrb	r3, [r3, #0]
 801678e:	461a      	mov	r2, r3
 8016790:	68fb      	ldr	r3, [r7, #12]
 8016792:	4413      	add	r3, r2
 8016794:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8016796:	bf00      	nop
 8016798:	f7ff ffde 	bl	8016758 <HAL_GetTick>
 801679c:	4602      	mov	r2, r0
 801679e:	68bb      	ldr	r3, [r7, #8]
 80167a0:	1ad3      	subs	r3, r2, r3
 80167a2:	68fa      	ldr	r2, [r7, #12]
 80167a4:	429a      	cmp	r2, r3
 80167a6:	d8f7      	bhi.n	8016798 <HAL_Delay+0x28>
  {
  }
}
 80167a8:	bf00      	nop
 80167aa:	bf00      	nop
 80167ac:	3710      	adds	r7, #16
 80167ae:	46bd      	mov	sp, r7
 80167b0:	bd80      	pop	{r7, pc}
 80167b2:	bf00      	nop
 80167b4:	200001e8 	.word	0x200001e8

080167b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80167b8:	b480      	push	{r7}
 80167ba:	b085      	sub	sp, #20
 80167bc:	af00      	add	r7, sp, #0
 80167be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	f003 0307 	and.w	r3, r3, #7
 80167c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80167c8:	4b0c      	ldr	r3, [pc, #48]	; (80167fc <__NVIC_SetPriorityGrouping+0x44>)
 80167ca:	68db      	ldr	r3, [r3, #12]
 80167cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80167ce:	68ba      	ldr	r2, [r7, #8]
 80167d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80167d4:	4013      	ands	r3, r2
 80167d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80167d8:	68fb      	ldr	r3, [r7, #12]
 80167da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80167dc:	68bb      	ldr	r3, [r7, #8]
 80167de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80167e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80167e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80167e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80167ea:	4a04      	ldr	r2, [pc, #16]	; (80167fc <__NVIC_SetPriorityGrouping+0x44>)
 80167ec:	68bb      	ldr	r3, [r7, #8]
 80167ee:	60d3      	str	r3, [r2, #12]
}
 80167f0:	bf00      	nop
 80167f2:	3714      	adds	r7, #20
 80167f4:	46bd      	mov	sp, r7
 80167f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167fa:	4770      	bx	lr
 80167fc:	e000ed00 	.word	0xe000ed00

08016800 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8016800:	b480      	push	{r7}
 8016802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8016804:	4b04      	ldr	r3, [pc, #16]	; (8016818 <__NVIC_GetPriorityGrouping+0x18>)
 8016806:	68db      	ldr	r3, [r3, #12]
 8016808:	0a1b      	lsrs	r3, r3, #8
 801680a:	f003 0307 	and.w	r3, r3, #7
}
 801680e:	4618      	mov	r0, r3
 8016810:	46bd      	mov	sp, r7
 8016812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016816:	4770      	bx	lr
 8016818:	e000ed00 	.word	0xe000ed00

0801681c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801681c:	b480      	push	{r7}
 801681e:	b083      	sub	sp, #12
 8016820:	af00      	add	r7, sp, #0
 8016822:	4603      	mov	r3, r0
 8016824:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801682a:	2b00      	cmp	r3, #0
 801682c:	db0b      	blt.n	8016846 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801682e:	79fb      	ldrb	r3, [r7, #7]
 8016830:	f003 021f 	and.w	r2, r3, #31
 8016834:	4907      	ldr	r1, [pc, #28]	; (8016854 <__NVIC_EnableIRQ+0x38>)
 8016836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801683a:	095b      	lsrs	r3, r3, #5
 801683c:	2001      	movs	r0, #1
 801683e:	fa00 f202 	lsl.w	r2, r0, r2
 8016842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8016846:	bf00      	nop
 8016848:	370c      	adds	r7, #12
 801684a:	46bd      	mov	sp, r7
 801684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016850:	4770      	bx	lr
 8016852:	bf00      	nop
 8016854:	e000e100 	.word	0xe000e100

08016858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8016858:	b480      	push	{r7}
 801685a:	b083      	sub	sp, #12
 801685c:	af00      	add	r7, sp, #0
 801685e:	4603      	mov	r3, r0
 8016860:	6039      	str	r1, [r7, #0]
 8016862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016868:	2b00      	cmp	r3, #0
 801686a:	db0a      	blt.n	8016882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801686c:	683b      	ldr	r3, [r7, #0]
 801686e:	b2da      	uxtb	r2, r3
 8016870:	490c      	ldr	r1, [pc, #48]	; (80168a4 <__NVIC_SetPriority+0x4c>)
 8016872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016876:	0112      	lsls	r2, r2, #4
 8016878:	b2d2      	uxtb	r2, r2
 801687a:	440b      	add	r3, r1
 801687c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8016880:	e00a      	b.n	8016898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016882:	683b      	ldr	r3, [r7, #0]
 8016884:	b2da      	uxtb	r2, r3
 8016886:	4908      	ldr	r1, [pc, #32]	; (80168a8 <__NVIC_SetPriority+0x50>)
 8016888:	79fb      	ldrb	r3, [r7, #7]
 801688a:	f003 030f 	and.w	r3, r3, #15
 801688e:	3b04      	subs	r3, #4
 8016890:	0112      	lsls	r2, r2, #4
 8016892:	b2d2      	uxtb	r2, r2
 8016894:	440b      	add	r3, r1
 8016896:	761a      	strb	r2, [r3, #24]
}
 8016898:	bf00      	nop
 801689a:	370c      	adds	r7, #12
 801689c:	46bd      	mov	sp, r7
 801689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168a2:	4770      	bx	lr
 80168a4:	e000e100 	.word	0xe000e100
 80168a8:	e000ed00 	.word	0xe000ed00

080168ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80168ac:	b480      	push	{r7}
 80168ae:	b089      	sub	sp, #36	; 0x24
 80168b0:	af00      	add	r7, sp, #0
 80168b2:	60f8      	str	r0, [r7, #12]
 80168b4:	60b9      	str	r1, [r7, #8]
 80168b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80168b8:	68fb      	ldr	r3, [r7, #12]
 80168ba:	f003 0307 	and.w	r3, r3, #7
 80168be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80168c0:	69fb      	ldr	r3, [r7, #28]
 80168c2:	f1c3 0307 	rsb	r3, r3, #7
 80168c6:	2b04      	cmp	r3, #4
 80168c8:	bf28      	it	cs
 80168ca:	2304      	movcs	r3, #4
 80168cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80168ce:	69fb      	ldr	r3, [r7, #28]
 80168d0:	3304      	adds	r3, #4
 80168d2:	2b06      	cmp	r3, #6
 80168d4:	d902      	bls.n	80168dc <NVIC_EncodePriority+0x30>
 80168d6:	69fb      	ldr	r3, [r7, #28]
 80168d8:	3b03      	subs	r3, #3
 80168da:	e000      	b.n	80168de <NVIC_EncodePriority+0x32>
 80168dc:	2300      	movs	r3, #0
 80168de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80168e0:	f04f 32ff 	mov.w	r2, #4294967295
 80168e4:	69bb      	ldr	r3, [r7, #24]
 80168e6:	fa02 f303 	lsl.w	r3, r2, r3
 80168ea:	43da      	mvns	r2, r3
 80168ec:	68bb      	ldr	r3, [r7, #8]
 80168ee:	401a      	ands	r2, r3
 80168f0:	697b      	ldr	r3, [r7, #20]
 80168f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80168f4:	f04f 31ff 	mov.w	r1, #4294967295
 80168f8:	697b      	ldr	r3, [r7, #20]
 80168fa:	fa01 f303 	lsl.w	r3, r1, r3
 80168fe:	43d9      	mvns	r1, r3
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8016904:	4313      	orrs	r3, r2
         );
}
 8016906:	4618      	mov	r0, r3
 8016908:	3724      	adds	r7, #36	; 0x24
 801690a:	46bd      	mov	sp, r7
 801690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016910:	4770      	bx	lr
	...

08016914 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8016914:	b580      	push	{r7, lr}
 8016916:	b082      	sub	sp, #8
 8016918:	af00      	add	r7, sp, #0
 801691a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	3b01      	subs	r3, #1
 8016920:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8016924:	d301      	bcc.n	801692a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8016926:	2301      	movs	r3, #1
 8016928:	e00f      	b.n	801694a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801692a:	4a0a      	ldr	r2, [pc, #40]	; (8016954 <SysTick_Config+0x40>)
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	3b01      	subs	r3, #1
 8016930:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8016932:	210f      	movs	r1, #15
 8016934:	f04f 30ff 	mov.w	r0, #4294967295
 8016938:	f7ff ff8e 	bl	8016858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801693c:	4b05      	ldr	r3, [pc, #20]	; (8016954 <SysTick_Config+0x40>)
 801693e:	2200      	movs	r2, #0
 8016940:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8016942:	4b04      	ldr	r3, [pc, #16]	; (8016954 <SysTick_Config+0x40>)
 8016944:	2207      	movs	r2, #7
 8016946:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8016948:	2300      	movs	r3, #0
}
 801694a:	4618      	mov	r0, r3
 801694c:	3708      	adds	r7, #8
 801694e:	46bd      	mov	sp, r7
 8016950:	bd80      	pop	{r7, pc}
 8016952:	bf00      	nop
 8016954:	e000e010 	.word	0xe000e010

08016958 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8016958:	b580      	push	{r7, lr}
 801695a:	b082      	sub	sp, #8
 801695c:	af00      	add	r7, sp, #0
 801695e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8016960:	6878      	ldr	r0, [r7, #4]
 8016962:	f7ff ff29 	bl	80167b8 <__NVIC_SetPriorityGrouping>
}
 8016966:	bf00      	nop
 8016968:	3708      	adds	r7, #8
 801696a:	46bd      	mov	sp, r7
 801696c:	bd80      	pop	{r7, pc}

0801696e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801696e:	b580      	push	{r7, lr}
 8016970:	b086      	sub	sp, #24
 8016972:	af00      	add	r7, sp, #0
 8016974:	4603      	mov	r3, r0
 8016976:	60b9      	str	r1, [r7, #8]
 8016978:	607a      	str	r2, [r7, #4]
 801697a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 801697c:	2300      	movs	r3, #0
 801697e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8016980:	f7ff ff3e 	bl	8016800 <__NVIC_GetPriorityGrouping>
 8016984:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8016986:	687a      	ldr	r2, [r7, #4]
 8016988:	68b9      	ldr	r1, [r7, #8]
 801698a:	6978      	ldr	r0, [r7, #20]
 801698c:	f7ff ff8e 	bl	80168ac <NVIC_EncodePriority>
 8016990:	4602      	mov	r2, r0
 8016992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016996:	4611      	mov	r1, r2
 8016998:	4618      	mov	r0, r3
 801699a:	f7ff ff5d 	bl	8016858 <__NVIC_SetPriority>
}
 801699e:	bf00      	nop
 80169a0:	3718      	adds	r7, #24
 80169a2:	46bd      	mov	sp, r7
 80169a4:	bd80      	pop	{r7, pc}

080169a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80169a6:	b580      	push	{r7, lr}
 80169a8:	b082      	sub	sp, #8
 80169aa:	af00      	add	r7, sp, #0
 80169ac:	4603      	mov	r3, r0
 80169ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80169b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80169b4:	4618      	mov	r0, r3
 80169b6:	f7ff ff31 	bl	801681c <__NVIC_EnableIRQ>
}
 80169ba:	bf00      	nop
 80169bc:	3708      	adds	r7, #8
 80169be:	46bd      	mov	sp, r7
 80169c0:	bd80      	pop	{r7, pc}

080169c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80169c2:	b580      	push	{r7, lr}
 80169c4:	b082      	sub	sp, #8
 80169c6:	af00      	add	r7, sp, #0
 80169c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80169ca:	6878      	ldr	r0, [r7, #4]
 80169cc:	f7ff ffa2 	bl	8016914 <SysTick_Config>
 80169d0:	4603      	mov	r3, r0
}
 80169d2:	4618      	mov	r0, r3
 80169d4:	3708      	adds	r7, #8
 80169d6:	46bd      	mov	sp, r7
 80169d8:	bd80      	pop	{r7, pc}
	...

080169dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80169dc:	b580      	push	{r7, lr}
 80169de:	b086      	sub	sp, #24
 80169e0:	af00      	add	r7, sp, #0
 80169e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80169e4:	2300      	movs	r3, #0
 80169e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80169e8:	f7ff feb6 	bl	8016758 <HAL_GetTick>
 80169ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	d101      	bne.n	80169f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80169f4:	2301      	movs	r3, #1
 80169f6:	e099      	b.n	8016b2c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	2202      	movs	r2, #2
 80169fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	2200      	movs	r2, #0
 8016a04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	681b      	ldr	r3, [r3, #0]
 8016a0c:	681a      	ldr	r2, [r3, #0]
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	681b      	ldr	r3, [r3, #0]
 8016a12:	f022 0201 	bic.w	r2, r2, #1
 8016a16:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8016a18:	e00f      	b.n	8016a3a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8016a1a:	f7ff fe9d 	bl	8016758 <HAL_GetTick>
 8016a1e:	4602      	mov	r2, r0
 8016a20:	693b      	ldr	r3, [r7, #16]
 8016a22:	1ad3      	subs	r3, r2, r3
 8016a24:	2b05      	cmp	r3, #5
 8016a26:	d908      	bls.n	8016a3a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	2220      	movs	r2, #32
 8016a2c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	2203      	movs	r2, #3
 8016a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8016a36:	2303      	movs	r3, #3
 8016a38:	e078      	b.n	8016b2c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	681b      	ldr	r3, [r3, #0]
 8016a3e:	681b      	ldr	r3, [r3, #0]
 8016a40:	f003 0301 	and.w	r3, r3, #1
 8016a44:	2b00      	cmp	r3, #0
 8016a46:	d1e8      	bne.n	8016a1a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	681b      	ldr	r3, [r3, #0]
 8016a4c:	681b      	ldr	r3, [r3, #0]
 8016a4e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8016a50:	697a      	ldr	r2, [r7, #20]
 8016a52:	4b38      	ldr	r3, [pc, #224]	; (8016b34 <HAL_DMA_Init+0x158>)
 8016a54:	4013      	ands	r3, r2
 8016a56:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	685a      	ldr	r2, [r3, #4]
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	689b      	ldr	r3, [r3, #8]
 8016a60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8016a62:	687b      	ldr	r3, [r7, #4]
 8016a64:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8016a66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	691b      	ldr	r3, [r3, #16]
 8016a6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8016a72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	699b      	ldr	r3, [r3, #24]
 8016a78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8016a7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	6a1b      	ldr	r3, [r3, #32]
 8016a84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8016a86:	697a      	ldr	r2, [r7, #20]
 8016a88:	4313      	orrs	r3, r2
 8016a8a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a90:	2b04      	cmp	r3, #4
 8016a92:	d107      	bne.n	8016aa4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016a9c:	4313      	orrs	r3, r2
 8016a9e:	697a      	ldr	r2, [r7, #20]
 8016aa0:	4313      	orrs	r3, r2
 8016aa2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	681b      	ldr	r3, [r3, #0]
 8016aa8:	697a      	ldr	r2, [r7, #20]
 8016aaa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	681b      	ldr	r3, [r3, #0]
 8016ab0:	695b      	ldr	r3, [r3, #20]
 8016ab2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8016ab4:	697b      	ldr	r3, [r7, #20]
 8016ab6:	f023 0307 	bic.w	r3, r3, #7
 8016aba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ac0:	697a      	ldr	r2, [r7, #20]
 8016ac2:	4313      	orrs	r3, r2
 8016ac4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8016ac6:	687b      	ldr	r3, [r7, #4]
 8016ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016aca:	2b04      	cmp	r3, #4
 8016acc:	d117      	bne.n	8016afe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016ad2:	697a      	ldr	r2, [r7, #20]
 8016ad4:	4313      	orrs	r3, r2
 8016ad6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d00e      	beq.n	8016afe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8016ae0:	6878      	ldr	r0, [r7, #4]
 8016ae2:	f000 fb0f 	bl	8017104 <DMA_CheckFifoParam>
 8016ae6:	4603      	mov	r3, r0
 8016ae8:	2b00      	cmp	r3, #0
 8016aea:	d008      	beq.n	8016afe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	2240      	movs	r2, #64	; 0x40
 8016af0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	2201      	movs	r2, #1
 8016af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8016afa:	2301      	movs	r3, #1
 8016afc:	e016      	b.n	8016b2c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	681b      	ldr	r3, [r3, #0]
 8016b02:	697a      	ldr	r2, [r7, #20]
 8016b04:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8016b06:	6878      	ldr	r0, [r7, #4]
 8016b08:	f000 fac6 	bl	8017098 <DMA_CalcBaseAndBitshift>
 8016b0c:	4603      	mov	r3, r0
 8016b0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016b14:	223f      	movs	r2, #63	; 0x3f
 8016b16:	409a      	lsls	r2, r3
 8016b18:	68fb      	ldr	r3, [r7, #12]
 8016b1a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	2200      	movs	r2, #0
 8016b20:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	2201      	movs	r2, #1
 8016b26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8016b2a:	2300      	movs	r3, #0
}
 8016b2c:	4618      	mov	r0, r3
 8016b2e:	3718      	adds	r7, #24
 8016b30:	46bd      	mov	sp, r7
 8016b32:	bd80      	pop	{r7, pc}
 8016b34:	f010803f 	.word	0xf010803f

08016b38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8016b38:	b580      	push	{r7, lr}
 8016b3a:	b086      	sub	sp, #24
 8016b3c:	af00      	add	r7, sp, #0
 8016b3e:	60f8      	str	r0, [r7, #12]
 8016b40:	60b9      	str	r1, [r7, #8]
 8016b42:	607a      	str	r2, [r7, #4]
 8016b44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8016b46:	2300      	movs	r3, #0
 8016b48:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8016b4a:	68fb      	ldr	r3, [r7, #12]
 8016b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016b4e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8016b50:	68fb      	ldr	r3, [r7, #12]
 8016b52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016b56:	2b01      	cmp	r3, #1
 8016b58:	d101      	bne.n	8016b5e <HAL_DMA_Start_IT+0x26>
 8016b5a:	2302      	movs	r3, #2
 8016b5c:	e040      	b.n	8016be0 <HAL_DMA_Start_IT+0xa8>
 8016b5e:	68fb      	ldr	r3, [r7, #12]
 8016b60:	2201      	movs	r2, #1
 8016b62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8016b66:	68fb      	ldr	r3, [r7, #12]
 8016b68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016b6c:	b2db      	uxtb	r3, r3
 8016b6e:	2b01      	cmp	r3, #1
 8016b70:	d12f      	bne.n	8016bd2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8016b72:	68fb      	ldr	r3, [r7, #12]
 8016b74:	2202      	movs	r2, #2
 8016b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8016b7a:	68fb      	ldr	r3, [r7, #12]
 8016b7c:	2200      	movs	r2, #0
 8016b7e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8016b80:	683b      	ldr	r3, [r7, #0]
 8016b82:	687a      	ldr	r2, [r7, #4]
 8016b84:	68b9      	ldr	r1, [r7, #8]
 8016b86:	68f8      	ldr	r0, [r7, #12]
 8016b88:	f000 fa58 	bl	801703c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8016b8c:	68fb      	ldr	r3, [r7, #12]
 8016b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016b90:	223f      	movs	r2, #63	; 0x3f
 8016b92:	409a      	lsls	r2, r3
 8016b94:	693b      	ldr	r3, [r7, #16]
 8016b96:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8016b98:	68fb      	ldr	r3, [r7, #12]
 8016b9a:	681b      	ldr	r3, [r3, #0]
 8016b9c:	681a      	ldr	r2, [r3, #0]
 8016b9e:	68fb      	ldr	r3, [r7, #12]
 8016ba0:	681b      	ldr	r3, [r3, #0]
 8016ba2:	f042 0216 	orr.w	r2, r2, #22
 8016ba6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8016ba8:	68fb      	ldr	r3, [r7, #12]
 8016baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d007      	beq.n	8016bc0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8016bb0:	68fb      	ldr	r3, [r7, #12]
 8016bb2:	681b      	ldr	r3, [r3, #0]
 8016bb4:	681a      	ldr	r2, [r3, #0]
 8016bb6:	68fb      	ldr	r3, [r7, #12]
 8016bb8:	681b      	ldr	r3, [r3, #0]
 8016bba:	f042 0208 	orr.w	r2, r2, #8
 8016bbe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8016bc0:	68fb      	ldr	r3, [r7, #12]
 8016bc2:	681b      	ldr	r3, [r3, #0]
 8016bc4:	681a      	ldr	r2, [r3, #0]
 8016bc6:	68fb      	ldr	r3, [r7, #12]
 8016bc8:	681b      	ldr	r3, [r3, #0]
 8016bca:	f042 0201 	orr.w	r2, r2, #1
 8016bce:	601a      	str	r2, [r3, #0]
 8016bd0:	e005      	b.n	8016bde <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8016bd2:	68fb      	ldr	r3, [r7, #12]
 8016bd4:	2200      	movs	r2, #0
 8016bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8016bda:	2302      	movs	r3, #2
 8016bdc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8016bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8016be0:	4618      	mov	r0, r3
 8016be2:	3718      	adds	r7, #24
 8016be4:	46bd      	mov	sp, r7
 8016be6:	bd80      	pop	{r7, pc}

08016be8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8016be8:	b580      	push	{r7, lr}
 8016bea:	b084      	sub	sp, #16
 8016bec:	af00      	add	r7, sp, #0
 8016bee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016bf4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8016bf6:	f7ff fdaf 	bl	8016758 <HAL_GetTick>
 8016bfa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016c02:	b2db      	uxtb	r3, r3
 8016c04:	2b02      	cmp	r3, #2
 8016c06:	d008      	beq.n	8016c1a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	2280      	movs	r2, #128	; 0x80
 8016c0c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	2200      	movs	r2, #0
 8016c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8016c16:	2301      	movs	r3, #1
 8016c18:	e052      	b.n	8016cc0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	681b      	ldr	r3, [r3, #0]
 8016c1e:	681a      	ldr	r2, [r3, #0]
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	681b      	ldr	r3, [r3, #0]
 8016c24:	f022 0216 	bic.w	r2, r2, #22
 8016c28:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	681b      	ldr	r3, [r3, #0]
 8016c2e:	695a      	ldr	r2, [r3, #20]
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	681b      	ldr	r3, [r3, #0]
 8016c34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016c38:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c3e:	2b00      	cmp	r3, #0
 8016c40:	d103      	bne.n	8016c4a <HAL_DMA_Abort+0x62>
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	d007      	beq.n	8016c5a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	681b      	ldr	r3, [r3, #0]
 8016c4e:	681a      	ldr	r2, [r3, #0]
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	681b      	ldr	r3, [r3, #0]
 8016c54:	f022 0208 	bic.w	r2, r2, #8
 8016c58:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	681b      	ldr	r3, [r3, #0]
 8016c5e:	681a      	ldr	r2, [r3, #0]
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	681b      	ldr	r3, [r3, #0]
 8016c64:	f022 0201 	bic.w	r2, r2, #1
 8016c68:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8016c6a:	e013      	b.n	8016c94 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8016c6c:	f7ff fd74 	bl	8016758 <HAL_GetTick>
 8016c70:	4602      	mov	r2, r0
 8016c72:	68bb      	ldr	r3, [r7, #8]
 8016c74:	1ad3      	subs	r3, r2, r3
 8016c76:	2b05      	cmp	r3, #5
 8016c78:	d90c      	bls.n	8016c94 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	2220      	movs	r2, #32
 8016c7e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	2203      	movs	r2, #3
 8016c84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	2200      	movs	r2, #0
 8016c8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8016c90:	2303      	movs	r3, #3
 8016c92:	e015      	b.n	8016cc0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	681b      	ldr	r3, [r3, #0]
 8016c98:	681b      	ldr	r3, [r3, #0]
 8016c9a:	f003 0301 	and.w	r3, r3, #1
 8016c9e:	2b00      	cmp	r3, #0
 8016ca0:	d1e4      	bne.n	8016c6c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8016ca2:	687b      	ldr	r3, [r7, #4]
 8016ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016ca6:	223f      	movs	r2, #63	; 0x3f
 8016ca8:	409a      	lsls	r2, r3
 8016caa:	68fb      	ldr	r3, [r7, #12]
 8016cac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	2201      	movs	r2, #1
 8016cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8016cb6:	687b      	ldr	r3, [r7, #4]
 8016cb8:	2200      	movs	r2, #0
 8016cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8016cbe:	2300      	movs	r3, #0
}
 8016cc0:	4618      	mov	r0, r3
 8016cc2:	3710      	adds	r7, #16
 8016cc4:	46bd      	mov	sp, r7
 8016cc6:	bd80      	pop	{r7, pc}

08016cc8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8016cc8:	b480      	push	{r7}
 8016cca:	b083      	sub	sp, #12
 8016ccc:	af00      	add	r7, sp, #0
 8016cce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016cd6:	b2db      	uxtb	r3, r3
 8016cd8:	2b02      	cmp	r3, #2
 8016cda:	d004      	beq.n	8016ce6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	2280      	movs	r2, #128	; 0x80
 8016ce0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8016ce2:	2301      	movs	r3, #1
 8016ce4:	e00c      	b.n	8016d00 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	2205      	movs	r2, #5
 8016cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	681b      	ldr	r3, [r3, #0]
 8016cf2:	681a      	ldr	r2, [r3, #0]
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	681b      	ldr	r3, [r3, #0]
 8016cf8:	f022 0201 	bic.w	r2, r2, #1
 8016cfc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8016cfe:	2300      	movs	r3, #0
}
 8016d00:	4618      	mov	r0, r3
 8016d02:	370c      	adds	r7, #12
 8016d04:	46bd      	mov	sp, r7
 8016d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d0a:	4770      	bx	lr

08016d0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8016d0c:	b580      	push	{r7, lr}
 8016d0e:	b086      	sub	sp, #24
 8016d10:	af00      	add	r7, sp, #0
 8016d12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8016d14:	2300      	movs	r3, #0
 8016d16:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8016d18:	4b8e      	ldr	r3, [pc, #568]	; (8016f54 <HAL_DMA_IRQHandler+0x248>)
 8016d1a:	681b      	ldr	r3, [r3, #0]
 8016d1c:	4a8e      	ldr	r2, [pc, #568]	; (8016f58 <HAL_DMA_IRQHandler+0x24c>)
 8016d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8016d22:	0a9b      	lsrs	r3, r3, #10
 8016d24:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016d2a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8016d2c:	693b      	ldr	r3, [r7, #16]
 8016d2e:	681b      	ldr	r3, [r3, #0]
 8016d30:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016d36:	2208      	movs	r2, #8
 8016d38:	409a      	lsls	r2, r3
 8016d3a:	68fb      	ldr	r3, [r7, #12]
 8016d3c:	4013      	ands	r3, r2
 8016d3e:	2b00      	cmp	r3, #0
 8016d40:	d01a      	beq.n	8016d78 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8016d42:	687b      	ldr	r3, [r7, #4]
 8016d44:	681b      	ldr	r3, [r3, #0]
 8016d46:	681b      	ldr	r3, [r3, #0]
 8016d48:	f003 0304 	and.w	r3, r3, #4
 8016d4c:	2b00      	cmp	r3, #0
 8016d4e:	d013      	beq.n	8016d78 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	681b      	ldr	r3, [r3, #0]
 8016d54:	681a      	ldr	r2, [r3, #0]
 8016d56:	687b      	ldr	r3, [r7, #4]
 8016d58:	681b      	ldr	r3, [r3, #0]
 8016d5a:	f022 0204 	bic.w	r2, r2, #4
 8016d5e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016d64:	2208      	movs	r2, #8
 8016d66:	409a      	lsls	r2, r3
 8016d68:	693b      	ldr	r3, [r7, #16]
 8016d6a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016d70:	f043 0201 	orr.w	r2, r3, #1
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016d7c:	2201      	movs	r2, #1
 8016d7e:	409a      	lsls	r2, r3
 8016d80:	68fb      	ldr	r3, [r7, #12]
 8016d82:	4013      	ands	r3, r2
 8016d84:	2b00      	cmp	r3, #0
 8016d86:	d012      	beq.n	8016dae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	681b      	ldr	r3, [r3, #0]
 8016d8c:	695b      	ldr	r3, [r3, #20]
 8016d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016d92:	2b00      	cmp	r3, #0
 8016d94:	d00b      	beq.n	8016dae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016d9a:	2201      	movs	r2, #1
 8016d9c:	409a      	lsls	r2, r3
 8016d9e:	693b      	ldr	r3, [r7, #16]
 8016da0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016da6:	f043 0202 	orr.w	r2, r3, #2
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016db2:	2204      	movs	r2, #4
 8016db4:	409a      	lsls	r2, r3
 8016db6:	68fb      	ldr	r3, [r7, #12]
 8016db8:	4013      	ands	r3, r2
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	d012      	beq.n	8016de4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	681b      	ldr	r3, [r3, #0]
 8016dc2:	681b      	ldr	r3, [r3, #0]
 8016dc4:	f003 0302 	and.w	r3, r3, #2
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	d00b      	beq.n	8016de4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016dd0:	2204      	movs	r2, #4
 8016dd2:	409a      	lsls	r2, r3
 8016dd4:	693b      	ldr	r3, [r7, #16]
 8016dd6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016ddc:	f043 0204 	orr.w	r2, r3, #4
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016de8:	2210      	movs	r2, #16
 8016dea:	409a      	lsls	r2, r3
 8016dec:	68fb      	ldr	r3, [r7, #12]
 8016dee:	4013      	ands	r3, r2
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	d043      	beq.n	8016e7c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	681b      	ldr	r3, [r3, #0]
 8016df8:	681b      	ldr	r3, [r3, #0]
 8016dfa:	f003 0308 	and.w	r3, r3, #8
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	d03c      	beq.n	8016e7c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016e06:	2210      	movs	r2, #16
 8016e08:	409a      	lsls	r2, r3
 8016e0a:	693b      	ldr	r3, [r7, #16]
 8016e0c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	681b      	ldr	r3, [r3, #0]
 8016e12:	681b      	ldr	r3, [r3, #0]
 8016e14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	d018      	beq.n	8016e4e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8016e1c:	687b      	ldr	r3, [r7, #4]
 8016e1e:	681b      	ldr	r3, [r3, #0]
 8016e20:	681b      	ldr	r3, [r3, #0]
 8016e22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8016e26:	2b00      	cmp	r3, #0
 8016e28:	d108      	bne.n	8016e3c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	d024      	beq.n	8016e7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8016e32:	687b      	ldr	r3, [r7, #4]
 8016e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e36:	6878      	ldr	r0, [r7, #4]
 8016e38:	4798      	blx	r3
 8016e3a:	e01f      	b.n	8016e7c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	d01b      	beq.n	8016e7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016e48:	6878      	ldr	r0, [r7, #4]
 8016e4a:	4798      	blx	r3
 8016e4c:	e016      	b.n	8016e7c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	681b      	ldr	r3, [r3, #0]
 8016e52:	681b      	ldr	r3, [r3, #0]
 8016e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016e58:	2b00      	cmp	r3, #0
 8016e5a:	d107      	bne.n	8016e6c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	681b      	ldr	r3, [r3, #0]
 8016e60:	681a      	ldr	r2, [r3, #0]
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	681b      	ldr	r3, [r3, #0]
 8016e66:	f022 0208 	bic.w	r2, r2, #8
 8016e6a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	d003      	beq.n	8016e7c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e78:	6878      	ldr	r0, [r7, #4]
 8016e7a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016e80:	2220      	movs	r2, #32
 8016e82:	409a      	lsls	r2, r3
 8016e84:	68fb      	ldr	r3, [r7, #12]
 8016e86:	4013      	ands	r3, r2
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	f000 808f 	beq.w	8016fac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	681b      	ldr	r3, [r3, #0]
 8016e92:	681b      	ldr	r3, [r3, #0]
 8016e94:	f003 0310 	and.w	r3, r3, #16
 8016e98:	2b00      	cmp	r3, #0
 8016e9a:	f000 8087 	beq.w	8016fac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016ea2:	2220      	movs	r2, #32
 8016ea4:	409a      	lsls	r2, r3
 8016ea6:	693b      	ldr	r3, [r7, #16]
 8016ea8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016eb0:	b2db      	uxtb	r3, r3
 8016eb2:	2b05      	cmp	r3, #5
 8016eb4:	d136      	bne.n	8016f24 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	681b      	ldr	r3, [r3, #0]
 8016eba:	681a      	ldr	r2, [r3, #0]
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	681b      	ldr	r3, [r3, #0]
 8016ec0:	f022 0216 	bic.w	r2, r2, #22
 8016ec4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	681b      	ldr	r3, [r3, #0]
 8016eca:	695a      	ldr	r2, [r3, #20]
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	681b      	ldr	r3, [r3, #0]
 8016ed0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016ed4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d103      	bne.n	8016ee6 <HAL_DMA_IRQHandler+0x1da>
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d007      	beq.n	8016ef6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8016ee6:	687b      	ldr	r3, [r7, #4]
 8016ee8:	681b      	ldr	r3, [r3, #0]
 8016eea:	681a      	ldr	r2, [r3, #0]
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	681b      	ldr	r3, [r3, #0]
 8016ef0:	f022 0208 	bic.w	r2, r2, #8
 8016ef4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016efa:	223f      	movs	r2, #63	; 0x3f
 8016efc:	409a      	lsls	r2, r3
 8016efe:	693b      	ldr	r3, [r7, #16]
 8016f00:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	2201      	movs	r2, #1
 8016f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	2200      	movs	r2, #0
 8016f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	d07e      	beq.n	8017018 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8016f1a:	687b      	ldr	r3, [r7, #4]
 8016f1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016f1e:	6878      	ldr	r0, [r7, #4]
 8016f20:	4798      	blx	r3
        }
        return;
 8016f22:	e079      	b.n	8017018 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	681b      	ldr	r3, [r3, #0]
 8016f28:	681b      	ldr	r3, [r3, #0]
 8016f2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8016f2e:	2b00      	cmp	r3, #0
 8016f30:	d01d      	beq.n	8016f6e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	681b      	ldr	r3, [r3, #0]
 8016f36:	681b      	ldr	r3, [r3, #0]
 8016f38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8016f3c:	2b00      	cmp	r3, #0
 8016f3e:	d10d      	bne.n	8016f5c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016f44:	2b00      	cmp	r3, #0
 8016f46:	d031      	beq.n	8016fac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016f4c:	6878      	ldr	r0, [r7, #4]
 8016f4e:	4798      	blx	r3
 8016f50:	e02c      	b.n	8016fac <HAL_DMA_IRQHandler+0x2a0>
 8016f52:	bf00      	nop
 8016f54:	200001e0 	.word	0x200001e0
 8016f58:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	d023      	beq.n	8016fac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8016f64:	687b      	ldr	r3, [r7, #4]
 8016f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016f68:	6878      	ldr	r0, [r7, #4]
 8016f6a:	4798      	blx	r3
 8016f6c:	e01e      	b.n	8016fac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8016f6e:	687b      	ldr	r3, [r7, #4]
 8016f70:	681b      	ldr	r3, [r3, #0]
 8016f72:	681b      	ldr	r3, [r3, #0]
 8016f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016f78:	2b00      	cmp	r3, #0
 8016f7a:	d10f      	bne.n	8016f9c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	681b      	ldr	r3, [r3, #0]
 8016f80:	681a      	ldr	r2, [r3, #0]
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	681b      	ldr	r3, [r3, #0]
 8016f86:	f022 0210 	bic.w	r2, r2, #16
 8016f8a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	2201      	movs	r2, #1
 8016f90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8016f94:	687b      	ldr	r3, [r7, #4]
 8016f96:	2200      	movs	r2, #0
 8016f98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	d003      	beq.n	8016fac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016fa8:	6878      	ldr	r0, [r7, #4]
 8016faa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016fb0:	2b00      	cmp	r3, #0
 8016fb2:	d032      	beq.n	801701a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016fb8:	f003 0301 	and.w	r3, r3, #1
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	d022      	beq.n	8017006 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	2205      	movs	r2, #5
 8016fc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	681b      	ldr	r3, [r3, #0]
 8016fcc:	681a      	ldr	r2, [r3, #0]
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	681b      	ldr	r3, [r3, #0]
 8016fd2:	f022 0201 	bic.w	r2, r2, #1
 8016fd6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8016fd8:	68bb      	ldr	r3, [r7, #8]
 8016fda:	3301      	adds	r3, #1
 8016fdc:	60bb      	str	r3, [r7, #8]
 8016fde:	697a      	ldr	r2, [r7, #20]
 8016fe0:	429a      	cmp	r2, r3
 8016fe2:	d307      	bcc.n	8016ff4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	681b      	ldr	r3, [r3, #0]
 8016fe8:	681b      	ldr	r3, [r3, #0]
 8016fea:	f003 0301 	and.w	r3, r3, #1
 8016fee:	2b00      	cmp	r3, #0
 8016ff0:	d1f2      	bne.n	8016fd8 <HAL_DMA_IRQHandler+0x2cc>
 8016ff2:	e000      	b.n	8016ff6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8016ff4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	2201      	movs	r2, #1
 8016ffa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	2200      	movs	r2, #0
 8017002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801700a:	2b00      	cmp	r3, #0
 801700c:	d005      	beq.n	801701a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801700e:	687b      	ldr	r3, [r7, #4]
 8017010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017012:	6878      	ldr	r0, [r7, #4]
 8017014:	4798      	blx	r3
 8017016:	e000      	b.n	801701a <HAL_DMA_IRQHandler+0x30e>
        return;
 8017018:	bf00      	nop
    }
  }
}
 801701a:	3718      	adds	r7, #24
 801701c:	46bd      	mov	sp, r7
 801701e:	bd80      	pop	{r7, pc}

08017020 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8017020:	b480      	push	{r7}
 8017022:	b083      	sub	sp, #12
 8017024:	af00      	add	r7, sp, #0
 8017026:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8017028:	687b      	ldr	r3, [r7, #4]
 801702a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801702e:	b2db      	uxtb	r3, r3
}
 8017030:	4618      	mov	r0, r3
 8017032:	370c      	adds	r7, #12
 8017034:	46bd      	mov	sp, r7
 8017036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801703a:	4770      	bx	lr

0801703c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801703c:	b480      	push	{r7}
 801703e:	b085      	sub	sp, #20
 8017040:	af00      	add	r7, sp, #0
 8017042:	60f8      	str	r0, [r7, #12]
 8017044:	60b9      	str	r1, [r7, #8]
 8017046:	607a      	str	r2, [r7, #4]
 8017048:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801704a:	68fb      	ldr	r3, [r7, #12]
 801704c:	681b      	ldr	r3, [r3, #0]
 801704e:	681a      	ldr	r2, [r3, #0]
 8017050:	68fb      	ldr	r3, [r7, #12]
 8017052:	681b      	ldr	r3, [r3, #0]
 8017054:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8017058:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 801705a:	68fb      	ldr	r3, [r7, #12]
 801705c:	681b      	ldr	r3, [r3, #0]
 801705e:	683a      	ldr	r2, [r7, #0]
 8017060:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8017062:	68fb      	ldr	r3, [r7, #12]
 8017064:	689b      	ldr	r3, [r3, #8]
 8017066:	2b40      	cmp	r3, #64	; 0x40
 8017068:	d108      	bne.n	801707c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 801706a:	68fb      	ldr	r3, [r7, #12]
 801706c:	681b      	ldr	r3, [r3, #0]
 801706e:	687a      	ldr	r2, [r7, #4]
 8017070:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8017072:	68fb      	ldr	r3, [r7, #12]
 8017074:	681b      	ldr	r3, [r3, #0]
 8017076:	68ba      	ldr	r2, [r7, #8]
 8017078:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 801707a:	e007      	b.n	801708c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 801707c:	68fb      	ldr	r3, [r7, #12]
 801707e:	681b      	ldr	r3, [r3, #0]
 8017080:	68ba      	ldr	r2, [r7, #8]
 8017082:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8017084:	68fb      	ldr	r3, [r7, #12]
 8017086:	681b      	ldr	r3, [r3, #0]
 8017088:	687a      	ldr	r2, [r7, #4]
 801708a:	60da      	str	r2, [r3, #12]
}
 801708c:	bf00      	nop
 801708e:	3714      	adds	r7, #20
 8017090:	46bd      	mov	sp, r7
 8017092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017096:	4770      	bx	lr

08017098 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8017098:	b480      	push	{r7}
 801709a:	b085      	sub	sp, #20
 801709c:	af00      	add	r7, sp, #0
 801709e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	681b      	ldr	r3, [r3, #0]
 80170a4:	b2db      	uxtb	r3, r3
 80170a6:	3b10      	subs	r3, #16
 80170a8:	4a14      	ldr	r2, [pc, #80]	; (80170fc <DMA_CalcBaseAndBitshift+0x64>)
 80170aa:	fba2 2303 	umull	r2, r3, r2, r3
 80170ae:	091b      	lsrs	r3, r3, #4
 80170b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80170b2:	4a13      	ldr	r2, [pc, #76]	; (8017100 <DMA_CalcBaseAndBitshift+0x68>)
 80170b4:	68fb      	ldr	r3, [r7, #12]
 80170b6:	4413      	add	r3, r2
 80170b8:	781b      	ldrb	r3, [r3, #0]
 80170ba:	461a      	mov	r2, r3
 80170bc:	687b      	ldr	r3, [r7, #4]
 80170be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80170c0:	68fb      	ldr	r3, [r7, #12]
 80170c2:	2b03      	cmp	r3, #3
 80170c4:	d909      	bls.n	80170da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80170c6:	687b      	ldr	r3, [r7, #4]
 80170c8:	681b      	ldr	r3, [r3, #0]
 80170ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80170ce:	f023 0303 	bic.w	r3, r3, #3
 80170d2:	1d1a      	adds	r2, r3, #4
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	659a      	str	r2, [r3, #88]	; 0x58
 80170d8:	e007      	b.n	80170ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	681b      	ldr	r3, [r3, #0]
 80170de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80170e2:	f023 0303 	bic.w	r3, r3, #3
 80170e6:	687a      	ldr	r2, [r7, #4]
 80170e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80170ee:	4618      	mov	r0, r3
 80170f0:	3714      	adds	r7, #20
 80170f2:	46bd      	mov	sp, r7
 80170f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170f8:	4770      	bx	lr
 80170fa:	bf00      	nop
 80170fc:	aaaaaaab 	.word	0xaaaaaaab
 8017100:	08029f14 	.word	0x08029f14

08017104 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8017104:	b480      	push	{r7}
 8017106:	b085      	sub	sp, #20
 8017108:	af00      	add	r7, sp, #0
 801710a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801710c:	2300      	movs	r3, #0
 801710e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017114:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	699b      	ldr	r3, [r3, #24]
 801711a:	2b00      	cmp	r3, #0
 801711c:	d11f      	bne.n	801715e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 801711e:	68bb      	ldr	r3, [r7, #8]
 8017120:	2b03      	cmp	r3, #3
 8017122:	d856      	bhi.n	80171d2 <DMA_CheckFifoParam+0xce>
 8017124:	a201      	add	r2, pc, #4	; (adr r2, 801712c <DMA_CheckFifoParam+0x28>)
 8017126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801712a:	bf00      	nop
 801712c:	0801713d 	.word	0x0801713d
 8017130:	0801714f 	.word	0x0801714f
 8017134:	0801713d 	.word	0x0801713d
 8017138:	080171d3 	.word	0x080171d3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801713c:	687b      	ldr	r3, [r7, #4]
 801713e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017140:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8017144:	2b00      	cmp	r3, #0
 8017146:	d046      	beq.n	80171d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8017148:	2301      	movs	r3, #1
 801714a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801714c:	e043      	b.n	80171d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017152:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8017156:	d140      	bne.n	80171da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8017158:	2301      	movs	r3, #1
 801715a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801715c:	e03d      	b.n	80171da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	699b      	ldr	r3, [r3, #24]
 8017162:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8017166:	d121      	bne.n	80171ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8017168:	68bb      	ldr	r3, [r7, #8]
 801716a:	2b03      	cmp	r3, #3
 801716c:	d837      	bhi.n	80171de <DMA_CheckFifoParam+0xda>
 801716e:	a201      	add	r2, pc, #4	; (adr r2, 8017174 <DMA_CheckFifoParam+0x70>)
 8017170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017174:	08017185 	.word	0x08017185
 8017178:	0801718b 	.word	0x0801718b
 801717c:	08017185 	.word	0x08017185
 8017180:	0801719d 	.word	0x0801719d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8017184:	2301      	movs	r3, #1
 8017186:	73fb      	strb	r3, [r7, #15]
      break;
 8017188:	e030      	b.n	80171ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801718e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8017192:	2b00      	cmp	r3, #0
 8017194:	d025      	beq.n	80171e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8017196:	2301      	movs	r3, #1
 8017198:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801719a:	e022      	b.n	80171e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80171a4:	d11f      	bne.n	80171e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80171a6:	2301      	movs	r3, #1
 80171a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80171aa:	e01c      	b.n	80171e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80171ac:	68bb      	ldr	r3, [r7, #8]
 80171ae:	2b02      	cmp	r3, #2
 80171b0:	d903      	bls.n	80171ba <DMA_CheckFifoParam+0xb6>
 80171b2:	68bb      	ldr	r3, [r7, #8]
 80171b4:	2b03      	cmp	r3, #3
 80171b6:	d003      	beq.n	80171c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80171b8:	e018      	b.n	80171ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80171ba:	2301      	movs	r3, #1
 80171bc:	73fb      	strb	r3, [r7, #15]
      break;
 80171be:	e015      	b.n	80171ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80171c0:	687b      	ldr	r3, [r7, #4]
 80171c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80171c8:	2b00      	cmp	r3, #0
 80171ca:	d00e      	beq.n	80171ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80171cc:	2301      	movs	r3, #1
 80171ce:	73fb      	strb	r3, [r7, #15]
      break;
 80171d0:	e00b      	b.n	80171ea <DMA_CheckFifoParam+0xe6>
      break;
 80171d2:	bf00      	nop
 80171d4:	e00a      	b.n	80171ec <DMA_CheckFifoParam+0xe8>
      break;
 80171d6:	bf00      	nop
 80171d8:	e008      	b.n	80171ec <DMA_CheckFifoParam+0xe8>
      break;
 80171da:	bf00      	nop
 80171dc:	e006      	b.n	80171ec <DMA_CheckFifoParam+0xe8>
      break;
 80171de:	bf00      	nop
 80171e0:	e004      	b.n	80171ec <DMA_CheckFifoParam+0xe8>
      break;
 80171e2:	bf00      	nop
 80171e4:	e002      	b.n	80171ec <DMA_CheckFifoParam+0xe8>
      break;   
 80171e6:	bf00      	nop
 80171e8:	e000      	b.n	80171ec <DMA_CheckFifoParam+0xe8>
      break;
 80171ea:	bf00      	nop
    }
  } 
  
  return status; 
 80171ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80171ee:	4618      	mov	r0, r3
 80171f0:	3714      	adds	r7, #20
 80171f2:	46bd      	mov	sp, r7
 80171f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171f8:	4770      	bx	lr
 80171fa:	bf00      	nop

080171fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80171fc:	b480      	push	{r7}
 80171fe:	b089      	sub	sp, #36	; 0x24
 8017200:	af00      	add	r7, sp, #0
 8017202:	6078      	str	r0, [r7, #4]
 8017204:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8017206:	2300      	movs	r3, #0
 8017208:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801720a:	2300      	movs	r3, #0
 801720c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801720e:	2300      	movs	r3, #0
 8017210:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8017212:	2300      	movs	r3, #0
 8017214:	61fb      	str	r3, [r7, #28]
 8017216:	e159      	b.n	80174cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8017218:	2201      	movs	r2, #1
 801721a:	69fb      	ldr	r3, [r7, #28]
 801721c:	fa02 f303 	lsl.w	r3, r2, r3
 8017220:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8017222:	683b      	ldr	r3, [r7, #0]
 8017224:	681b      	ldr	r3, [r3, #0]
 8017226:	697a      	ldr	r2, [r7, #20]
 8017228:	4013      	ands	r3, r2
 801722a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 801722c:	693a      	ldr	r2, [r7, #16]
 801722e:	697b      	ldr	r3, [r7, #20]
 8017230:	429a      	cmp	r2, r3
 8017232:	f040 8148 	bne.w	80174c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8017236:	683b      	ldr	r3, [r7, #0]
 8017238:	685b      	ldr	r3, [r3, #4]
 801723a:	f003 0303 	and.w	r3, r3, #3
 801723e:	2b01      	cmp	r3, #1
 8017240:	d005      	beq.n	801724e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8017242:	683b      	ldr	r3, [r7, #0]
 8017244:	685b      	ldr	r3, [r3, #4]
 8017246:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801724a:	2b02      	cmp	r3, #2
 801724c:	d130      	bne.n	80172b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	689b      	ldr	r3, [r3, #8]
 8017252:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8017254:	69fb      	ldr	r3, [r7, #28]
 8017256:	005b      	lsls	r3, r3, #1
 8017258:	2203      	movs	r2, #3
 801725a:	fa02 f303 	lsl.w	r3, r2, r3
 801725e:	43db      	mvns	r3, r3
 8017260:	69ba      	ldr	r2, [r7, #24]
 8017262:	4013      	ands	r3, r2
 8017264:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8017266:	683b      	ldr	r3, [r7, #0]
 8017268:	68da      	ldr	r2, [r3, #12]
 801726a:	69fb      	ldr	r3, [r7, #28]
 801726c:	005b      	lsls	r3, r3, #1
 801726e:	fa02 f303 	lsl.w	r3, r2, r3
 8017272:	69ba      	ldr	r2, [r7, #24]
 8017274:	4313      	orrs	r3, r2
 8017276:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	69ba      	ldr	r2, [r7, #24]
 801727c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801727e:	687b      	ldr	r3, [r7, #4]
 8017280:	685b      	ldr	r3, [r3, #4]
 8017282:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8017284:	2201      	movs	r2, #1
 8017286:	69fb      	ldr	r3, [r7, #28]
 8017288:	fa02 f303 	lsl.w	r3, r2, r3
 801728c:	43db      	mvns	r3, r3
 801728e:	69ba      	ldr	r2, [r7, #24]
 8017290:	4013      	ands	r3, r2
 8017292:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8017294:	683b      	ldr	r3, [r7, #0]
 8017296:	685b      	ldr	r3, [r3, #4]
 8017298:	091b      	lsrs	r3, r3, #4
 801729a:	f003 0201 	and.w	r2, r3, #1
 801729e:	69fb      	ldr	r3, [r7, #28]
 80172a0:	fa02 f303 	lsl.w	r3, r2, r3
 80172a4:	69ba      	ldr	r2, [r7, #24]
 80172a6:	4313      	orrs	r3, r2
 80172a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	69ba      	ldr	r2, [r7, #24]
 80172ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80172b0:	683b      	ldr	r3, [r7, #0]
 80172b2:	685b      	ldr	r3, [r3, #4]
 80172b4:	f003 0303 	and.w	r3, r3, #3
 80172b8:	2b03      	cmp	r3, #3
 80172ba:	d017      	beq.n	80172ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	68db      	ldr	r3, [r3, #12]
 80172c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80172c2:	69fb      	ldr	r3, [r7, #28]
 80172c4:	005b      	lsls	r3, r3, #1
 80172c6:	2203      	movs	r2, #3
 80172c8:	fa02 f303 	lsl.w	r3, r2, r3
 80172cc:	43db      	mvns	r3, r3
 80172ce:	69ba      	ldr	r2, [r7, #24]
 80172d0:	4013      	ands	r3, r2
 80172d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80172d4:	683b      	ldr	r3, [r7, #0]
 80172d6:	689a      	ldr	r2, [r3, #8]
 80172d8:	69fb      	ldr	r3, [r7, #28]
 80172da:	005b      	lsls	r3, r3, #1
 80172dc:	fa02 f303 	lsl.w	r3, r2, r3
 80172e0:	69ba      	ldr	r2, [r7, #24]
 80172e2:	4313      	orrs	r3, r2
 80172e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80172e6:	687b      	ldr	r3, [r7, #4]
 80172e8:	69ba      	ldr	r2, [r7, #24]
 80172ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80172ec:	683b      	ldr	r3, [r7, #0]
 80172ee:	685b      	ldr	r3, [r3, #4]
 80172f0:	f003 0303 	and.w	r3, r3, #3
 80172f4:	2b02      	cmp	r3, #2
 80172f6:	d123      	bne.n	8017340 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80172f8:	69fb      	ldr	r3, [r7, #28]
 80172fa:	08da      	lsrs	r2, r3, #3
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	3208      	adds	r2, #8
 8017300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017304:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8017306:	69fb      	ldr	r3, [r7, #28]
 8017308:	f003 0307 	and.w	r3, r3, #7
 801730c:	009b      	lsls	r3, r3, #2
 801730e:	220f      	movs	r2, #15
 8017310:	fa02 f303 	lsl.w	r3, r2, r3
 8017314:	43db      	mvns	r3, r3
 8017316:	69ba      	ldr	r2, [r7, #24]
 8017318:	4013      	ands	r3, r2
 801731a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 801731c:	683b      	ldr	r3, [r7, #0]
 801731e:	691a      	ldr	r2, [r3, #16]
 8017320:	69fb      	ldr	r3, [r7, #28]
 8017322:	f003 0307 	and.w	r3, r3, #7
 8017326:	009b      	lsls	r3, r3, #2
 8017328:	fa02 f303 	lsl.w	r3, r2, r3
 801732c:	69ba      	ldr	r2, [r7, #24]
 801732e:	4313      	orrs	r3, r2
 8017330:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8017332:	69fb      	ldr	r3, [r7, #28]
 8017334:	08da      	lsrs	r2, r3, #3
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	3208      	adds	r2, #8
 801733a:	69b9      	ldr	r1, [r7, #24]
 801733c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	681b      	ldr	r3, [r3, #0]
 8017344:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8017346:	69fb      	ldr	r3, [r7, #28]
 8017348:	005b      	lsls	r3, r3, #1
 801734a:	2203      	movs	r2, #3
 801734c:	fa02 f303 	lsl.w	r3, r2, r3
 8017350:	43db      	mvns	r3, r3
 8017352:	69ba      	ldr	r2, [r7, #24]
 8017354:	4013      	ands	r3, r2
 8017356:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8017358:	683b      	ldr	r3, [r7, #0]
 801735a:	685b      	ldr	r3, [r3, #4]
 801735c:	f003 0203 	and.w	r2, r3, #3
 8017360:	69fb      	ldr	r3, [r7, #28]
 8017362:	005b      	lsls	r3, r3, #1
 8017364:	fa02 f303 	lsl.w	r3, r2, r3
 8017368:	69ba      	ldr	r2, [r7, #24]
 801736a:	4313      	orrs	r3, r2
 801736c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801736e:	687b      	ldr	r3, [r7, #4]
 8017370:	69ba      	ldr	r2, [r7, #24]
 8017372:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8017374:	683b      	ldr	r3, [r7, #0]
 8017376:	685b      	ldr	r3, [r3, #4]
 8017378:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801737c:	2b00      	cmp	r3, #0
 801737e:	f000 80a2 	beq.w	80174c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8017382:	2300      	movs	r3, #0
 8017384:	60fb      	str	r3, [r7, #12]
 8017386:	4b57      	ldr	r3, [pc, #348]	; (80174e4 <HAL_GPIO_Init+0x2e8>)
 8017388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801738a:	4a56      	ldr	r2, [pc, #344]	; (80174e4 <HAL_GPIO_Init+0x2e8>)
 801738c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017390:	6453      	str	r3, [r2, #68]	; 0x44
 8017392:	4b54      	ldr	r3, [pc, #336]	; (80174e4 <HAL_GPIO_Init+0x2e8>)
 8017394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801739a:	60fb      	str	r3, [r7, #12]
 801739c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801739e:	4a52      	ldr	r2, [pc, #328]	; (80174e8 <HAL_GPIO_Init+0x2ec>)
 80173a0:	69fb      	ldr	r3, [r7, #28]
 80173a2:	089b      	lsrs	r3, r3, #2
 80173a4:	3302      	adds	r3, #2
 80173a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80173aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80173ac:	69fb      	ldr	r3, [r7, #28]
 80173ae:	f003 0303 	and.w	r3, r3, #3
 80173b2:	009b      	lsls	r3, r3, #2
 80173b4:	220f      	movs	r2, #15
 80173b6:	fa02 f303 	lsl.w	r3, r2, r3
 80173ba:	43db      	mvns	r3, r3
 80173bc:	69ba      	ldr	r2, [r7, #24]
 80173be:	4013      	ands	r3, r2
 80173c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	4a49      	ldr	r2, [pc, #292]	; (80174ec <HAL_GPIO_Init+0x2f0>)
 80173c6:	4293      	cmp	r3, r2
 80173c8:	d019      	beq.n	80173fe <HAL_GPIO_Init+0x202>
 80173ca:	687b      	ldr	r3, [r7, #4]
 80173cc:	4a48      	ldr	r2, [pc, #288]	; (80174f0 <HAL_GPIO_Init+0x2f4>)
 80173ce:	4293      	cmp	r3, r2
 80173d0:	d013      	beq.n	80173fa <HAL_GPIO_Init+0x1fe>
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	4a47      	ldr	r2, [pc, #284]	; (80174f4 <HAL_GPIO_Init+0x2f8>)
 80173d6:	4293      	cmp	r3, r2
 80173d8:	d00d      	beq.n	80173f6 <HAL_GPIO_Init+0x1fa>
 80173da:	687b      	ldr	r3, [r7, #4]
 80173dc:	4a46      	ldr	r2, [pc, #280]	; (80174f8 <HAL_GPIO_Init+0x2fc>)
 80173de:	4293      	cmp	r3, r2
 80173e0:	d007      	beq.n	80173f2 <HAL_GPIO_Init+0x1f6>
 80173e2:	687b      	ldr	r3, [r7, #4]
 80173e4:	4a45      	ldr	r2, [pc, #276]	; (80174fc <HAL_GPIO_Init+0x300>)
 80173e6:	4293      	cmp	r3, r2
 80173e8:	d101      	bne.n	80173ee <HAL_GPIO_Init+0x1f2>
 80173ea:	2304      	movs	r3, #4
 80173ec:	e008      	b.n	8017400 <HAL_GPIO_Init+0x204>
 80173ee:	2307      	movs	r3, #7
 80173f0:	e006      	b.n	8017400 <HAL_GPIO_Init+0x204>
 80173f2:	2303      	movs	r3, #3
 80173f4:	e004      	b.n	8017400 <HAL_GPIO_Init+0x204>
 80173f6:	2302      	movs	r3, #2
 80173f8:	e002      	b.n	8017400 <HAL_GPIO_Init+0x204>
 80173fa:	2301      	movs	r3, #1
 80173fc:	e000      	b.n	8017400 <HAL_GPIO_Init+0x204>
 80173fe:	2300      	movs	r3, #0
 8017400:	69fa      	ldr	r2, [r7, #28]
 8017402:	f002 0203 	and.w	r2, r2, #3
 8017406:	0092      	lsls	r2, r2, #2
 8017408:	4093      	lsls	r3, r2
 801740a:	69ba      	ldr	r2, [r7, #24]
 801740c:	4313      	orrs	r3, r2
 801740e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8017410:	4935      	ldr	r1, [pc, #212]	; (80174e8 <HAL_GPIO_Init+0x2ec>)
 8017412:	69fb      	ldr	r3, [r7, #28]
 8017414:	089b      	lsrs	r3, r3, #2
 8017416:	3302      	adds	r3, #2
 8017418:	69ba      	ldr	r2, [r7, #24]
 801741a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801741e:	4b38      	ldr	r3, [pc, #224]	; (8017500 <HAL_GPIO_Init+0x304>)
 8017420:	689b      	ldr	r3, [r3, #8]
 8017422:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8017424:	693b      	ldr	r3, [r7, #16]
 8017426:	43db      	mvns	r3, r3
 8017428:	69ba      	ldr	r2, [r7, #24]
 801742a:	4013      	ands	r3, r2
 801742c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801742e:	683b      	ldr	r3, [r7, #0]
 8017430:	685b      	ldr	r3, [r3, #4]
 8017432:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8017436:	2b00      	cmp	r3, #0
 8017438:	d003      	beq.n	8017442 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 801743a:	69ba      	ldr	r2, [r7, #24]
 801743c:	693b      	ldr	r3, [r7, #16]
 801743e:	4313      	orrs	r3, r2
 8017440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8017442:	4a2f      	ldr	r2, [pc, #188]	; (8017500 <HAL_GPIO_Init+0x304>)
 8017444:	69bb      	ldr	r3, [r7, #24]
 8017446:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8017448:	4b2d      	ldr	r3, [pc, #180]	; (8017500 <HAL_GPIO_Init+0x304>)
 801744a:	68db      	ldr	r3, [r3, #12]
 801744c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801744e:	693b      	ldr	r3, [r7, #16]
 8017450:	43db      	mvns	r3, r3
 8017452:	69ba      	ldr	r2, [r7, #24]
 8017454:	4013      	ands	r3, r2
 8017456:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8017458:	683b      	ldr	r3, [r7, #0]
 801745a:	685b      	ldr	r3, [r3, #4]
 801745c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8017460:	2b00      	cmp	r3, #0
 8017462:	d003      	beq.n	801746c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8017464:	69ba      	ldr	r2, [r7, #24]
 8017466:	693b      	ldr	r3, [r7, #16]
 8017468:	4313      	orrs	r3, r2
 801746a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 801746c:	4a24      	ldr	r2, [pc, #144]	; (8017500 <HAL_GPIO_Init+0x304>)
 801746e:	69bb      	ldr	r3, [r7, #24]
 8017470:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8017472:	4b23      	ldr	r3, [pc, #140]	; (8017500 <HAL_GPIO_Init+0x304>)
 8017474:	685b      	ldr	r3, [r3, #4]
 8017476:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8017478:	693b      	ldr	r3, [r7, #16]
 801747a:	43db      	mvns	r3, r3
 801747c:	69ba      	ldr	r2, [r7, #24]
 801747e:	4013      	ands	r3, r2
 8017480:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8017482:	683b      	ldr	r3, [r7, #0]
 8017484:	685b      	ldr	r3, [r3, #4]
 8017486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801748a:	2b00      	cmp	r3, #0
 801748c:	d003      	beq.n	8017496 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 801748e:	69ba      	ldr	r2, [r7, #24]
 8017490:	693b      	ldr	r3, [r7, #16]
 8017492:	4313      	orrs	r3, r2
 8017494:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8017496:	4a1a      	ldr	r2, [pc, #104]	; (8017500 <HAL_GPIO_Init+0x304>)
 8017498:	69bb      	ldr	r3, [r7, #24]
 801749a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801749c:	4b18      	ldr	r3, [pc, #96]	; (8017500 <HAL_GPIO_Init+0x304>)
 801749e:	681b      	ldr	r3, [r3, #0]
 80174a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80174a2:	693b      	ldr	r3, [r7, #16]
 80174a4:	43db      	mvns	r3, r3
 80174a6:	69ba      	ldr	r2, [r7, #24]
 80174a8:	4013      	ands	r3, r2
 80174aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80174ac:	683b      	ldr	r3, [r7, #0]
 80174ae:	685b      	ldr	r3, [r3, #4]
 80174b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80174b4:	2b00      	cmp	r3, #0
 80174b6:	d003      	beq.n	80174c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80174b8:	69ba      	ldr	r2, [r7, #24]
 80174ba:	693b      	ldr	r3, [r7, #16]
 80174bc:	4313      	orrs	r3, r2
 80174be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80174c0:	4a0f      	ldr	r2, [pc, #60]	; (8017500 <HAL_GPIO_Init+0x304>)
 80174c2:	69bb      	ldr	r3, [r7, #24]
 80174c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80174c6:	69fb      	ldr	r3, [r7, #28]
 80174c8:	3301      	adds	r3, #1
 80174ca:	61fb      	str	r3, [r7, #28]
 80174cc:	69fb      	ldr	r3, [r7, #28]
 80174ce:	2b0f      	cmp	r3, #15
 80174d0:	f67f aea2 	bls.w	8017218 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80174d4:	bf00      	nop
 80174d6:	bf00      	nop
 80174d8:	3724      	adds	r7, #36	; 0x24
 80174da:	46bd      	mov	sp, r7
 80174dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174e0:	4770      	bx	lr
 80174e2:	bf00      	nop
 80174e4:	40023800 	.word	0x40023800
 80174e8:	40013800 	.word	0x40013800
 80174ec:	40020000 	.word	0x40020000
 80174f0:	40020400 	.word	0x40020400
 80174f4:	40020800 	.word	0x40020800
 80174f8:	40020c00 	.word	0x40020c00
 80174fc:	40021000 	.word	0x40021000
 8017500:	40013c00 	.word	0x40013c00

08017504 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8017504:	b480      	push	{r7}
 8017506:	b085      	sub	sp, #20
 8017508:	af00      	add	r7, sp, #0
 801750a:	6078      	str	r0, [r7, #4]
 801750c:	460b      	mov	r3, r1
 801750e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8017510:	687b      	ldr	r3, [r7, #4]
 8017512:	691a      	ldr	r2, [r3, #16]
 8017514:	887b      	ldrh	r3, [r7, #2]
 8017516:	4013      	ands	r3, r2
 8017518:	2b00      	cmp	r3, #0
 801751a:	d002      	beq.n	8017522 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 801751c:	2301      	movs	r3, #1
 801751e:	73fb      	strb	r3, [r7, #15]
 8017520:	e001      	b.n	8017526 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8017522:	2300      	movs	r3, #0
 8017524:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8017526:	7bfb      	ldrb	r3, [r7, #15]
}
 8017528:	4618      	mov	r0, r3
 801752a:	3714      	adds	r7, #20
 801752c:	46bd      	mov	sp, r7
 801752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017532:	4770      	bx	lr

08017534 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8017534:	b480      	push	{r7}
 8017536:	b083      	sub	sp, #12
 8017538:	af00      	add	r7, sp, #0
 801753a:	6078      	str	r0, [r7, #4]
 801753c:	460b      	mov	r3, r1
 801753e:	807b      	strh	r3, [r7, #2]
 8017540:	4613      	mov	r3, r2
 8017542:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8017544:	787b      	ldrb	r3, [r7, #1]
 8017546:	2b00      	cmp	r3, #0
 8017548:	d003      	beq.n	8017552 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801754a:	887a      	ldrh	r2, [r7, #2]
 801754c:	687b      	ldr	r3, [r7, #4]
 801754e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8017550:	e003      	b.n	801755a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8017552:	887b      	ldrh	r3, [r7, #2]
 8017554:	041a      	lsls	r2, r3, #16
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	619a      	str	r2, [r3, #24]
}
 801755a:	bf00      	nop
 801755c:	370c      	adds	r7, #12
 801755e:	46bd      	mov	sp, r7
 8017560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017564:	4770      	bx	lr
	...

08017568 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8017568:	b580      	push	{r7, lr}
 801756a:	b082      	sub	sp, #8
 801756c:	af00      	add	r7, sp, #0
 801756e:	4603      	mov	r3, r0
 8017570:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8017572:	4b08      	ldr	r3, [pc, #32]	; (8017594 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8017574:	695a      	ldr	r2, [r3, #20]
 8017576:	88fb      	ldrh	r3, [r7, #6]
 8017578:	4013      	ands	r3, r2
 801757a:	2b00      	cmp	r3, #0
 801757c:	d006      	beq.n	801758c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801757e:	4a05      	ldr	r2, [pc, #20]	; (8017594 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8017580:	88fb      	ldrh	r3, [r7, #6]
 8017582:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8017584:	88fb      	ldrh	r3, [r7, #6]
 8017586:	4618      	mov	r0, r3
 8017588:	f7ec fdac 	bl	80040e4 <HAL_GPIO_EXTI_Callback>
  }
}
 801758c:	bf00      	nop
 801758e:	3708      	adds	r7, #8
 8017590:	46bd      	mov	sp, r7
 8017592:	bd80      	pop	{r7, pc}
 8017594:	40013c00 	.word	0x40013c00

08017598 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8017598:	b580      	push	{r7, lr}
 801759a:	b084      	sub	sp, #16
 801759c:	af00      	add	r7, sp, #0
 801759e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	2b00      	cmp	r3, #0
 80175a4:	d101      	bne.n	80175aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80175a6:	2301      	movs	r3, #1
 80175a8:	e12b      	b.n	8017802 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80175aa:	687b      	ldr	r3, [r7, #4]
 80175ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80175b0:	b2db      	uxtb	r3, r3
 80175b2:	2b00      	cmp	r3, #0
 80175b4:	d106      	bne.n	80175c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80175b6:	687b      	ldr	r3, [r7, #4]
 80175b8:	2200      	movs	r2, #0
 80175ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80175be:	6878      	ldr	r0, [r7, #4]
 80175c0:	f7fe fcbc 	bl	8015f3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	2224      	movs	r2, #36	; 0x24
 80175c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	681b      	ldr	r3, [r3, #0]
 80175d0:	681a      	ldr	r2, [r3, #0]
 80175d2:	687b      	ldr	r3, [r7, #4]
 80175d4:	681b      	ldr	r3, [r3, #0]
 80175d6:	f022 0201 	bic.w	r2, r2, #1
 80175da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	681b      	ldr	r3, [r3, #0]
 80175e0:	681a      	ldr	r2, [r3, #0]
 80175e2:	687b      	ldr	r3, [r7, #4]
 80175e4:	681b      	ldr	r3, [r3, #0]
 80175e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80175ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	681b      	ldr	r3, [r3, #0]
 80175f0:	681a      	ldr	r2, [r3, #0]
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	681b      	ldr	r3, [r3, #0]
 80175f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80175fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80175fc:	f003 fa9a 	bl	801ab34 <HAL_RCC_GetPCLK1Freq>
 8017600:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8017602:	687b      	ldr	r3, [r7, #4]
 8017604:	685b      	ldr	r3, [r3, #4]
 8017606:	4a81      	ldr	r2, [pc, #516]	; (801780c <HAL_I2C_Init+0x274>)
 8017608:	4293      	cmp	r3, r2
 801760a:	d807      	bhi.n	801761c <HAL_I2C_Init+0x84>
 801760c:	68fb      	ldr	r3, [r7, #12]
 801760e:	4a80      	ldr	r2, [pc, #512]	; (8017810 <HAL_I2C_Init+0x278>)
 8017610:	4293      	cmp	r3, r2
 8017612:	bf94      	ite	ls
 8017614:	2301      	movls	r3, #1
 8017616:	2300      	movhi	r3, #0
 8017618:	b2db      	uxtb	r3, r3
 801761a:	e006      	b.n	801762a <HAL_I2C_Init+0x92>
 801761c:	68fb      	ldr	r3, [r7, #12]
 801761e:	4a7d      	ldr	r2, [pc, #500]	; (8017814 <HAL_I2C_Init+0x27c>)
 8017620:	4293      	cmp	r3, r2
 8017622:	bf94      	ite	ls
 8017624:	2301      	movls	r3, #1
 8017626:	2300      	movhi	r3, #0
 8017628:	b2db      	uxtb	r3, r3
 801762a:	2b00      	cmp	r3, #0
 801762c:	d001      	beq.n	8017632 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 801762e:	2301      	movs	r3, #1
 8017630:	e0e7      	b.n	8017802 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8017632:	68fb      	ldr	r3, [r7, #12]
 8017634:	4a78      	ldr	r2, [pc, #480]	; (8017818 <HAL_I2C_Init+0x280>)
 8017636:	fba2 2303 	umull	r2, r3, r2, r3
 801763a:	0c9b      	lsrs	r3, r3, #18
 801763c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	681b      	ldr	r3, [r3, #0]
 8017642:	685b      	ldr	r3, [r3, #4]
 8017644:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8017648:	687b      	ldr	r3, [r7, #4]
 801764a:	681b      	ldr	r3, [r3, #0]
 801764c:	68ba      	ldr	r2, [r7, #8]
 801764e:	430a      	orrs	r2, r1
 8017650:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8017652:	687b      	ldr	r3, [r7, #4]
 8017654:	681b      	ldr	r3, [r3, #0]
 8017656:	6a1b      	ldr	r3, [r3, #32]
 8017658:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	685b      	ldr	r3, [r3, #4]
 8017660:	4a6a      	ldr	r2, [pc, #424]	; (801780c <HAL_I2C_Init+0x274>)
 8017662:	4293      	cmp	r3, r2
 8017664:	d802      	bhi.n	801766c <HAL_I2C_Init+0xd4>
 8017666:	68bb      	ldr	r3, [r7, #8]
 8017668:	3301      	adds	r3, #1
 801766a:	e009      	b.n	8017680 <HAL_I2C_Init+0xe8>
 801766c:	68bb      	ldr	r3, [r7, #8]
 801766e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8017672:	fb02 f303 	mul.w	r3, r2, r3
 8017676:	4a69      	ldr	r2, [pc, #420]	; (801781c <HAL_I2C_Init+0x284>)
 8017678:	fba2 2303 	umull	r2, r3, r2, r3
 801767c:	099b      	lsrs	r3, r3, #6
 801767e:	3301      	adds	r3, #1
 8017680:	687a      	ldr	r2, [r7, #4]
 8017682:	6812      	ldr	r2, [r2, #0]
 8017684:	430b      	orrs	r3, r1
 8017686:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	681b      	ldr	r3, [r3, #0]
 801768c:	69db      	ldr	r3, [r3, #28]
 801768e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8017692:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	685b      	ldr	r3, [r3, #4]
 801769a:	495c      	ldr	r1, [pc, #368]	; (801780c <HAL_I2C_Init+0x274>)
 801769c:	428b      	cmp	r3, r1
 801769e:	d819      	bhi.n	80176d4 <HAL_I2C_Init+0x13c>
 80176a0:	68fb      	ldr	r3, [r7, #12]
 80176a2:	1e59      	subs	r1, r3, #1
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	685b      	ldr	r3, [r3, #4]
 80176a8:	005b      	lsls	r3, r3, #1
 80176aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80176ae:	1c59      	adds	r1, r3, #1
 80176b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80176b4:	400b      	ands	r3, r1
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d00a      	beq.n	80176d0 <HAL_I2C_Init+0x138>
 80176ba:	68fb      	ldr	r3, [r7, #12]
 80176bc:	1e59      	subs	r1, r3, #1
 80176be:	687b      	ldr	r3, [r7, #4]
 80176c0:	685b      	ldr	r3, [r3, #4]
 80176c2:	005b      	lsls	r3, r3, #1
 80176c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80176c8:	3301      	adds	r3, #1
 80176ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80176ce:	e051      	b.n	8017774 <HAL_I2C_Init+0x1dc>
 80176d0:	2304      	movs	r3, #4
 80176d2:	e04f      	b.n	8017774 <HAL_I2C_Init+0x1dc>
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	689b      	ldr	r3, [r3, #8]
 80176d8:	2b00      	cmp	r3, #0
 80176da:	d111      	bne.n	8017700 <HAL_I2C_Init+0x168>
 80176dc:	68fb      	ldr	r3, [r7, #12]
 80176de:	1e58      	subs	r0, r3, #1
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	6859      	ldr	r1, [r3, #4]
 80176e4:	460b      	mov	r3, r1
 80176e6:	005b      	lsls	r3, r3, #1
 80176e8:	440b      	add	r3, r1
 80176ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80176ee:	3301      	adds	r3, #1
 80176f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80176f4:	2b00      	cmp	r3, #0
 80176f6:	bf0c      	ite	eq
 80176f8:	2301      	moveq	r3, #1
 80176fa:	2300      	movne	r3, #0
 80176fc:	b2db      	uxtb	r3, r3
 80176fe:	e012      	b.n	8017726 <HAL_I2C_Init+0x18e>
 8017700:	68fb      	ldr	r3, [r7, #12]
 8017702:	1e58      	subs	r0, r3, #1
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	6859      	ldr	r1, [r3, #4]
 8017708:	460b      	mov	r3, r1
 801770a:	009b      	lsls	r3, r3, #2
 801770c:	440b      	add	r3, r1
 801770e:	0099      	lsls	r1, r3, #2
 8017710:	440b      	add	r3, r1
 8017712:	fbb0 f3f3 	udiv	r3, r0, r3
 8017716:	3301      	adds	r3, #1
 8017718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801771c:	2b00      	cmp	r3, #0
 801771e:	bf0c      	ite	eq
 8017720:	2301      	moveq	r3, #1
 8017722:	2300      	movne	r3, #0
 8017724:	b2db      	uxtb	r3, r3
 8017726:	2b00      	cmp	r3, #0
 8017728:	d001      	beq.n	801772e <HAL_I2C_Init+0x196>
 801772a:	2301      	movs	r3, #1
 801772c:	e022      	b.n	8017774 <HAL_I2C_Init+0x1dc>
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	689b      	ldr	r3, [r3, #8]
 8017732:	2b00      	cmp	r3, #0
 8017734:	d10e      	bne.n	8017754 <HAL_I2C_Init+0x1bc>
 8017736:	68fb      	ldr	r3, [r7, #12]
 8017738:	1e58      	subs	r0, r3, #1
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	6859      	ldr	r1, [r3, #4]
 801773e:	460b      	mov	r3, r1
 8017740:	005b      	lsls	r3, r3, #1
 8017742:	440b      	add	r3, r1
 8017744:	fbb0 f3f3 	udiv	r3, r0, r3
 8017748:	3301      	adds	r3, #1
 801774a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801774e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8017752:	e00f      	b.n	8017774 <HAL_I2C_Init+0x1dc>
 8017754:	68fb      	ldr	r3, [r7, #12]
 8017756:	1e58      	subs	r0, r3, #1
 8017758:	687b      	ldr	r3, [r7, #4]
 801775a:	6859      	ldr	r1, [r3, #4]
 801775c:	460b      	mov	r3, r1
 801775e:	009b      	lsls	r3, r3, #2
 8017760:	440b      	add	r3, r1
 8017762:	0099      	lsls	r1, r3, #2
 8017764:	440b      	add	r3, r1
 8017766:	fbb0 f3f3 	udiv	r3, r0, r3
 801776a:	3301      	adds	r3, #1
 801776c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017770:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8017774:	6879      	ldr	r1, [r7, #4]
 8017776:	6809      	ldr	r1, [r1, #0]
 8017778:	4313      	orrs	r3, r2
 801777a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	681b      	ldr	r3, [r3, #0]
 8017780:	681b      	ldr	r3, [r3, #0]
 8017782:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	69da      	ldr	r2, [r3, #28]
 801778a:	687b      	ldr	r3, [r7, #4]
 801778c:	6a1b      	ldr	r3, [r3, #32]
 801778e:	431a      	orrs	r2, r3
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	681b      	ldr	r3, [r3, #0]
 8017794:	430a      	orrs	r2, r1
 8017796:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8017798:	687b      	ldr	r3, [r7, #4]
 801779a:	681b      	ldr	r3, [r3, #0]
 801779c:	689b      	ldr	r3, [r3, #8]
 801779e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80177a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80177a6:	687a      	ldr	r2, [r7, #4]
 80177a8:	6911      	ldr	r1, [r2, #16]
 80177aa:	687a      	ldr	r2, [r7, #4]
 80177ac:	68d2      	ldr	r2, [r2, #12]
 80177ae:	4311      	orrs	r1, r2
 80177b0:	687a      	ldr	r2, [r7, #4]
 80177b2:	6812      	ldr	r2, [r2, #0]
 80177b4:	430b      	orrs	r3, r1
 80177b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	681b      	ldr	r3, [r3, #0]
 80177bc:	68db      	ldr	r3, [r3, #12]
 80177be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	695a      	ldr	r2, [r3, #20]
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	699b      	ldr	r3, [r3, #24]
 80177ca:	431a      	orrs	r2, r3
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	681b      	ldr	r3, [r3, #0]
 80177d0:	430a      	orrs	r2, r1
 80177d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	681b      	ldr	r3, [r3, #0]
 80177d8:	681a      	ldr	r2, [r3, #0]
 80177da:	687b      	ldr	r3, [r7, #4]
 80177dc:	681b      	ldr	r3, [r3, #0]
 80177de:	f042 0201 	orr.w	r2, r2, #1
 80177e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	2200      	movs	r2, #0
 80177e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	2220      	movs	r2, #32
 80177ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80177f2:	687b      	ldr	r3, [r7, #4]
 80177f4:	2200      	movs	r2, #0
 80177f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	2200      	movs	r2, #0
 80177fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8017800:	2300      	movs	r3, #0
}
 8017802:	4618      	mov	r0, r3
 8017804:	3710      	adds	r7, #16
 8017806:	46bd      	mov	sp, r7
 8017808:	bd80      	pop	{r7, pc}
 801780a:	bf00      	nop
 801780c:	000186a0 	.word	0x000186a0
 8017810:	001e847f 	.word	0x001e847f
 8017814:	003d08ff 	.word	0x003d08ff
 8017818:	431bde83 	.word	0x431bde83
 801781c:	10624dd3 	.word	0x10624dd3

08017820 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8017820:	b580      	push	{r7, lr}
 8017822:	b088      	sub	sp, #32
 8017824:	af02      	add	r7, sp, #8
 8017826:	60f8      	str	r0, [r7, #12]
 8017828:	4608      	mov	r0, r1
 801782a:	4611      	mov	r1, r2
 801782c:	461a      	mov	r2, r3
 801782e:	4603      	mov	r3, r0
 8017830:	817b      	strh	r3, [r7, #10]
 8017832:	460b      	mov	r3, r1
 8017834:	813b      	strh	r3, [r7, #8]
 8017836:	4613      	mov	r3, r2
 8017838:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 801783a:	f7fe ff8d 	bl	8016758 <HAL_GetTick>
 801783e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017840:	68fb      	ldr	r3, [r7, #12]
 8017842:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017846:	b2db      	uxtb	r3, r3
 8017848:	2b20      	cmp	r3, #32
 801784a:	f040 80d9 	bne.w	8017a00 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801784e:	697b      	ldr	r3, [r7, #20]
 8017850:	9300      	str	r3, [sp, #0]
 8017852:	2319      	movs	r3, #25
 8017854:	2201      	movs	r2, #1
 8017856:	496d      	ldr	r1, [pc, #436]	; (8017a0c <HAL_I2C_Mem_Write+0x1ec>)
 8017858:	68f8      	ldr	r0, [r7, #12]
 801785a:	f002 fad1 	bl	8019e00 <I2C_WaitOnFlagUntilTimeout>
 801785e:	4603      	mov	r3, r0
 8017860:	2b00      	cmp	r3, #0
 8017862:	d001      	beq.n	8017868 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8017864:	2302      	movs	r3, #2
 8017866:	e0cc      	b.n	8017a02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017868:	68fb      	ldr	r3, [r7, #12]
 801786a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801786e:	2b01      	cmp	r3, #1
 8017870:	d101      	bne.n	8017876 <HAL_I2C_Mem_Write+0x56>
 8017872:	2302      	movs	r3, #2
 8017874:	e0c5      	b.n	8017a02 <HAL_I2C_Mem_Write+0x1e2>
 8017876:	68fb      	ldr	r3, [r7, #12]
 8017878:	2201      	movs	r2, #1
 801787a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801787e:	68fb      	ldr	r3, [r7, #12]
 8017880:	681b      	ldr	r3, [r3, #0]
 8017882:	681b      	ldr	r3, [r3, #0]
 8017884:	f003 0301 	and.w	r3, r3, #1
 8017888:	2b01      	cmp	r3, #1
 801788a:	d007      	beq.n	801789c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801788c:	68fb      	ldr	r3, [r7, #12]
 801788e:	681b      	ldr	r3, [r3, #0]
 8017890:	681a      	ldr	r2, [r3, #0]
 8017892:	68fb      	ldr	r3, [r7, #12]
 8017894:	681b      	ldr	r3, [r3, #0]
 8017896:	f042 0201 	orr.w	r2, r2, #1
 801789a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801789c:	68fb      	ldr	r3, [r7, #12]
 801789e:	681b      	ldr	r3, [r3, #0]
 80178a0:	681a      	ldr	r2, [r3, #0]
 80178a2:	68fb      	ldr	r3, [r7, #12]
 80178a4:	681b      	ldr	r3, [r3, #0]
 80178a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80178aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80178ac:	68fb      	ldr	r3, [r7, #12]
 80178ae:	2221      	movs	r2, #33	; 0x21
 80178b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80178b4:	68fb      	ldr	r3, [r7, #12]
 80178b6:	2240      	movs	r2, #64	; 0x40
 80178b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80178bc:	68fb      	ldr	r3, [r7, #12]
 80178be:	2200      	movs	r2, #0
 80178c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80178c2:	68fb      	ldr	r3, [r7, #12]
 80178c4:	6a3a      	ldr	r2, [r7, #32]
 80178c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80178c8:	68fb      	ldr	r3, [r7, #12]
 80178ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80178cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80178ce:	68fb      	ldr	r3, [r7, #12]
 80178d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80178d2:	b29a      	uxth	r2, r3
 80178d4:	68fb      	ldr	r3, [r7, #12]
 80178d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80178d8:	68fb      	ldr	r3, [r7, #12]
 80178da:	4a4d      	ldr	r2, [pc, #308]	; (8017a10 <HAL_I2C_Mem_Write+0x1f0>)
 80178dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80178de:	88f8      	ldrh	r0, [r7, #6]
 80178e0:	893a      	ldrh	r2, [r7, #8]
 80178e2:	8979      	ldrh	r1, [r7, #10]
 80178e4:	697b      	ldr	r3, [r7, #20]
 80178e6:	9301      	str	r3, [sp, #4]
 80178e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178ea:	9300      	str	r3, [sp, #0]
 80178ec:	4603      	mov	r3, r0
 80178ee:	68f8      	ldr	r0, [r7, #12]
 80178f0:	f002 f860 	bl	80199b4 <I2C_RequestMemoryWrite>
 80178f4:	4603      	mov	r3, r0
 80178f6:	2b00      	cmp	r3, #0
 80178f8:	d052      	beq.n	80179a0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80178fa:	2301      	movs	r3, #1
 80178fc:	e081      	b.n	8017a02 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80178fe:	697a      	ldr	r2, [r7, #20]
 8017900:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017902:	68f8      	ldr	r0, [r7, #12]
 8017904:	f002 fb52 	bl	8019fac <I2C_WaitOnTXEFlagUntilTimeout>
 8017908:	4603      	mov	r3, r0
 801790a:	2b00      	cmp	r3, #0
 801790c:	d00d      	beq.n	801792a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801790e:	68fb      	ldr	r3, [r7, #12]
 8017910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017912:	2b04      	cmp	r3, #4
 8017914:	d107      	bne.n	8017926 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017916:	68fb      	ldr	r3, [r7, #12]
 8017918:	681b      	ldr	r3, [r3, #0]
 801791a:	681a      	ldr	r2, [r3, #0]
 801791c:	68fb      	ldr	r3, [r7, #12]
 801791e:	681b      	ldr	r3, [r3, #0]
 8017920:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017924:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8017926:	2301      	movs	r3, #1
 8017928:	e06b      	b.n	8017a02 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 801792a:	68fb      	ldr	r3, [r7, #12]
 801792c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801792e:	781a      	ldrb	r2, [r3, #0]
 8017930:	68fb      	ldr	r3, [r7, #12]
 8017932:	681b      	ldr	r3, [r3, #0]
 8017934:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8017936:	68fb      	ldr	r3, [r7, #12]
 8017938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801793a:	1c5a      	adds	r2, r3, #1
 801793c:	68fb      	ldr	r3, [r7, #12]
 801793e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8017940:	68fb      	ldr	r3, [r7, #12]
 8017942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017944:	3b01      	subs	r3, #1
 8017946:	b29a      	uxth	r2, r3
 8017948:	68fb      	ldr	r3, [r7, #12]
 801794a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 801794c:	68fb      	ldr	r3, [r7, #12]
 801794e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017950:	b29b      	uxth	r3, r3
 8017952:	3b01      	subs	r3, #1
 8017954:	b29a      	uxth	r2, r3
 8017956:	68fb      	ldr	r3, [r7, #12]
 8017958:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 801795a:	68fb      	ldr	r3, [r7, #12]
 801795c:	681b      	ldr	r3, [r3, #0]
 801795e:	695b      	ldr	r3, [r3, #20]
 8017960:	f003 0304 	and.w	r3, r3, #4
 8017964:	2b04      	cmp	r3, #4
 8017966:	d11b      	bne.n	80179a0 <HAL_I2C_Mem_Write+0x180>
 8017968:	68fb      	ldr	r3, [r7, #12]
 801796a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801796c:	2b00      	cmp	r3, #0
 801796e:	d017      	beq.n	80179a0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8017970:	68fb      	ldr	r3, [r7, #12]
 8017972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017974:	781a      	ldrb	r2, [r3, #0]
 8017976:	68fb      	ldr	r3, [r7, #12]
 8017978:	681b      	ldr	r3, [r3, #0]
 801797a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 801797c:	68fb      	ldr	r3, [r7, #12]
 801797e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017980:	1c5a      	adds	r2, r3, #1
 8017982:	68fb      	ldr	r3, [r7, #12]
 8017984:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8017986:	68fb      	ldr	r3, [r7, #12]
 8017988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801798a:	3b01      	subs	r3, #1
 801798c:	b29a      	uxth	r2, r3
 801798e:	68fb      	ldr	r3, [r7, #12]
 8017990:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8017992:	68fb      	ldr	r3, [r7, #12]
 8017994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017996:	b29b      	uxth	r3, r3
 8017998:	3b01      	subs	r3, #1
 801799a:	b29a      	uxth	r2, r3
 801799c:	68fb      	ldr	r3, [r7, #12]
 801799e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80179a0:	68fb      	ldr	r3, [r7, #12]
 80179a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80179a4:	2b00      	cmp	r3, #0
 80179a6:	d1aa      	bne.n	80178fe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80179a8:	697a      	ldr	r2, [r7, #20]
 80179aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80179ac:	68f8      	ldr	r0, [r7, #12]
 80179ae:	f002 fb3e 	bl	801a02e <I2C_WaitOnBTFFlagUntilTimeout>
 80179b2:	4603      	mov	r3, r0
 80179b4:	2b00      	cmp	r3, #0
 80179b6:	d00d      	beq.n	80179d4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80179b8:	68fb      	ldr	r3, [r7, #12]
 80179ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80179bc:	2b04      	cmp	r3, #4
 80179be:	d107      	bne.n	80179d0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80179c0:	68fb      	ldr	r3, [r7, #12]
 80179c2:	681b      	ldr	r3, [r3, #0]
 80179c4:	681a      	ldr	r2, [r3, #0]
 80179c6:	68fb      	ldr	r3, [r7, #12]
 80179c8:	681b      	ldr	r3, [r3, #0]
 80179ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80179ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80179d0:	2301      	movs	r3, #1
 80179d2:	e016      	b.n	8017a02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80179d4:	68fb      	ldr	r3, [r7, #12]
 80179d6:	681b      	ldr	r3, [r3, #0]
 80179d8:	681a      	ldr	r2, [r3, #0]
 80179da:	68fb      	ldr	r3, [r7, #12]
 80179dc:	681b      	ldr	r3, [r3, #0]
 80179de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80179e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80179e4:	68fb      	ldr	r3, [r7, #12]
 80179e6:	2220      	movs	r2, #32
 80179e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80179ec:	68fb      	ldr	r3, [r7, #12]
 80179ee:	2200      	movs	r2, #0
 80179f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80179f4:	68fb      	ldr	r3, [r7, #12]
 80179f6:	2200      	movs	r2, #0
 80179f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80179fc:	2300      	movs	r3, #0
 80179fe:	e000      	b.n	8017a02 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8017a00:	2302      	movs	r3, #2
  }
}
 8017a02:	4618      	mov	r0, r3
 8017a04:	3718      	adds	r7, #24
 8017a06:	46bd      	mov	sp, r7
 8017a08:	bd80      	pop	{r7, pc}
 8017a0a:	bf00      	nop
 8017a0c:	00100002 	.word	0x00100002
 8017a10:	ffff0000 	.word	0xffff0000

08017a14 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8017a14:	b580      	push	{r7, lr}
 8017a16:	b08c      	sub	sp, #48	; 0x30
 8017a18:	af02      	add	r7, sp, #8
 8017a1a:	60f8      	str	r0, [r7, #12]
 8017a1c:	4608      	mov	r0, r1
 8017a1e:	4611      	mov	r1, r2
 8017a20:	461a      	mov	r2, r3
 8017a22:	4603      	mov	r3, r0
 8017a24:	817b      	strh	r3, [r7, #10]
 8017a26:	460b      	mov	r3, r1
 8017a28:	813b      	strh	r3, [r7, #8]
 8017a2a:	4613      	mov	r3, r2
 8017a2c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8017a2e:	f7fe fe93 	bl	8016758 <HAL_GetTick>
 8017a32:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017a34:	68fb      	ldr	r3, [r7, #12]
 8017a36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017a3a:	b2db      	uxtb	r3, r3
 8017a3c:	2b20      	cmp	r3, #32
 8017a3e:	f040 8208 	bne.w	8017e52 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8017a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a44:	9300      	str	r3, [sp, #0]
 8017a46:	2319      	movs	r3, #25
 8017a48:	2201      	movs	r2, #1
 8017a4a:	497b      	ldr	r1, [pc, #492]	; (8017c38 <HAL_I2C_Mem_Read+0x224>)
 8017a4c:	68f8      	ldr	r0, [r7, #12]
 8017a4e:	f002 f9d7 	bl	8019e00 <I2C_WaitOnFlagUntilTimeout>
 8017a52:	4603      	mov	r3, r0
 8017a54:	2b00      	cmp	r3, #0
 8017a56:	d001      	beq.n	8017a5c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8017a58:	2302      	movs	r3, #2
 8017a5a:	e1fb      	b.n	8017e54 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017a5c:	68fb      	ldr	r3, [r7, #12]
 8017a5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017a62:	2b01      	cmp	r3, #1
 8017a64:	d101      	bne.n	8017a6a <HAL_I2C_Mem_Read+0x56>
 8017a66:	2302      	movs	r3, #2
 8017a68:	e1f4      	b.n	8017e54 <HAL_I2C_Mem_Read+0x440>
 8017a6a:	68fb      	ldr	r3, [r7, #12]
 8017a6c:	2201      	movs	r2, #1
 8017a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8017a72:	68fb      	ldr	r3, [r7, #12]
 8017a74:	681b      	ldr	r3, [r3, #0]
 8017a76:	681b      	ldr	r3, [r3, #0]
 8017a78:	f003 0301 	and.w	r3, r3, #1
 8017a7c:	2b01      	cmp	r3, #1
 8017a7e:	d007      	beq.n	8017a90 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8017a80:	68fb      	ldr	r3, [r7, #12]
 8017a82:	681b      	ldr	r3, [r3, #0]
 8017a84:	681a      	ldr	r2, [r3, #0]
 8017a86:	68fb      	ldr	r3, [r7, #12]
 8017a88:	681b      	ldr	r3, [r3, #0]
 8017a8a:	f042 0201 	orr.w	r2, r2, #1
 8017a8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8017a90:	68fb      	ldr	r3, [r7, #12]
 8017a92:	681b      	ldr	r3, [r3, #0]
 8017a94:	681a      	ldr	r2, [r3, #0]
 8017a96:	68fb      	ldr	r3, [r7, #12]
 8017a98:	681b      	ldr	r3, [r3, #0]
 8017a9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8017a9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8017aa0:	68fb      	ldr	r3, [r7, #12]
 8017aa2:	2222      	movs	r2, #34	; 0x22
 8017aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8017aa8:	68fb      	ldr	r3, [r7, #12]
 8017aaa:	2240      	movs	r2, #64	; 0x40
 8017aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8017ab0:	68fb      	ldr	r3, [r7, #12]
 8017ab2:	2200      	movs	r2, #0
 8017ab4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8017ab6:	68fb      	ldr	r3, [r7, #12]
 8017ab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017aba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8017abc:	68fb      	ldr	r3, [r7, #12]
 8017abe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8017ac0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8017ac2:	68fb      	ldr	r3, [r7, #12]
 8017ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017ac6:	b29a      	uxth	r2, r3
 8017ac8:	68fb      	ldr	r3, [r7, #12]
 8017aca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8017acc:	68fb      	ldr	r3, [r7, #12]
 8017ace:	4a5b      	ldr	r2, [pc, #364]	; (8017c3c <HAL_I2C_Mem_Read+0x228>)
 8017ad0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8017ad2:	88f8      	ldrh	r0, [r7, #6]
 8017ad4:	893a      	ldrh	r2, [r7, #8]
 8017ad6:	8979      	ldrh	r1, [r7, #10]
 8017ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ada:	9301      	str	r3, [sp, #4]
 8017adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ade:	9300      	str	r3, [sp, #0]
 8017ae0:	4603      	mov	r3, r0
 8017ae2:	68f8      	ldr	r0, [r7, #12]
 8017ae4:	f001 fffc 	bl	8019ae0 <I2C_RequestMemoryRead>
 8017ae8:	4603      	mov	r3, r0
 8017aea:	2b00      	cmp	r3, #0
 8017aec:	d001      	beq.n	8017af2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8017aee:	2301      	movs	r3, #1
 8017af0:	e1b0      	b.n	8017e54 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8017af2:	68fb      	ldr	r3, [r7, #12]
 8017af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017af6:	2b00      	cmp	r3, #0
 8017af8:	d113      	bne.n	8017b22 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017afa:	2300      	movs	r3, #0
 8017afc:	623b      	str	r3, [r7, #32]
 8017afe:	68fb      	ldr	r3, [r7, #12]
 8017b00:	681b      	ldr	r3, [r3, #0]
 8017b02:	695b      	ldr	r3, [r3, #20]
 8017b04:	623b      	str	r3, [r7, #32]
 8017b06:	68fb      	ldr	r3, [r7, #12]
 8017b08:	681b      	ldr	r3, [r3, #0]
 8017b0a:	699b      	ldr	r3, [r3, #24]
 8017b0c:	623b      	str	r3, [r7, #32]
 8017b0e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017b10:	68fb      	ldr	r3, [r7, #12]
 8017b12:	681b      	ldr	r3, [r3, #0]
 8017b14:	681a      	ldr	r2, [r3, #0]
 8017b16:	68fb      	ldr	r3, [r7, #12]
 8017b18:	681b      	ldr	r3, [r3, #0]
 8017b1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017b1e:	601a      	str	r2, [r3, #0]
 8017b20:	e184      	b.n	8017e2c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8017b22:	68fb      	ldr	r3, [r7, #12]
 8017b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017b26:	2b01      	cmp	r3, #1
 8017b28:	d11b      	bne.n	8017b62 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017b2a:	68fb      	ldr	r3, [r7, #12]
 8017b2c:	681b      	ldr	r3, [r3, #0]
 8017b2e:	681a      	ldr	r2, [r3, #0]
 8017b30:	68fb      	ldr	r3, [r7, #12]
 8017b32:	681b      	ldr	r3, [r3, #0]
 8017b34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017b38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017b3a:	2300      	movs	r3, #0
 8017b3c:	61fb      	str	r3, [r7, #28]
 8017b3e:	68fb      	ldr	r3, [r7, #12]
 8017b40:	681b      	ldr	r3, [r3, #0]
 8017b42:	695b      	ldr	r3, [r3, #20]
 8017b44:	61fb      	str	r3, [r7, #28]
 8017b46:	68fb      	ldr	r3, [r7, #12]
 8017b48:	681b      	ldr	r3, [r3, #0]
 8017b4a:	699b      	ldr	r3, [r3, #24]
 8017b4c:	61fb      	str	r3, [r7, #28]
 8017b4e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017b50:	68fb      	ldr	r3, [r7, #12]
 8017b52:	681b      	ldr	r3, [r3, #0]
 8017b54:	681a      	ldr	r2, [r3, #0]
 8017b56:	68fb      	ldr	r3, [r7, #12]
 8017b58:	681b      	ldr	r3, [r3, #0]
 8017b5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017b5e:	601a      	str	r2, [r3, #0]
 8017b60:	e164      	b.n	8017e2c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8017b62:	68fb      	ldr	r3, [r7, #12]
 8017b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017b66:	2b02      	cmp	r3, #2
 8017b68:	d11b      	bne.n	8017ba2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017b6a:	68fb      	ldr	r3, [r7, #12]
 8017b6c:	681b      	ldr	r3, [r3, #0]
 8017b6e:	681a      	ldr	r2, [r3, #0]
 8017b70:	68fb      	ldr	r3, [r7, #12]
 8017b72:	681b      	ldr	r3, [r3, #0]
 8017b74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017b78:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8017b7a:	68fb      	ldr	r3, [r7, #12]
 8017b7c:	681b      	ldr	r3, [r3, #0]
 8017b7e:	681a      	ldr	r2, [r3, #0]
 8017b80:	68fb      	ldr	r3, [r7, #12]
 8017b82:	681b      	ldr	r3, [r3, #0]
 8017b84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8017b88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017b8a:	2300      	movs	r3, #0
 8017b8c:	61bb      	str	r3, [r7, #24]
 8017b8e:	68fb      	ldr	r3, [r7, #12]
 8017b90:	681b      	ldr	r3, [r3, #0]
 8017b92:	695b      	ldr	r3, [r3, #20]
 8017b94:	61bb      	str	r3, [r7, #24]
 8017b96:	68fb      	ldr	r3, [r7, #12]
 8017b98:	681b      	ldr	r3, [r3, #0]
 8017b9a:	699b      	ldr	r3, [r3, #24]
 8017b9c:	61bb      	str	r3, [r7, #24]
 8017b9e:	69bb      	ldr	r3, [r7, #24]
 8017ba0:	e144      	b.n	8017e2c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017ba2:	2300      	movs	r3, #0
 8017ba4:	617b      	str	r3, [r7, #20]
 8017ba6:	68fb      	ldr	r3, [r7, #12]
 8017ba8:	681b      	ldr	r3, [r3, #0]
 8017baa:	695b      	ldr	r3, [r3, #20]
 8017bac:	617b      	str	r3, [r7, #20]
 8017bae:	68fb      	ldr	r3, [r7, #12]
 8017bb0:	681b      	ldr	r3, [r3, #0]
 8017bb2:	699b      	ldr	r3, [r3, #24]
 8017bb4:	617b      	str	r3, [r7, #20]
 8017bb6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8017bb8:	e138      	b.n	8017e2c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8017bba:	68fb      	ldr	r3, [r7, #12]
 8017bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017bbe:	2b03      	cmp	r3, #3
 8017bc0:	f200 80f1 	bhi.w	8017da6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8017bc4:	68fb      	ldr	r3, [r7, #12]
 8017bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017bc8:	2b01      	cmp	r3, #1
 8017bca:	d123      	bne.n	8017c14 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8017bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017bce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8017bd0:	68f8      	ldr	r0, [r7, #12]
 8017bd2:	f002 fa9f 	bl	801a114 <I2C_WaitOnRXNEFlagUntilTimeout>
 8017bd6:	4603      	mov	r3, r0
 8017bd8:	2b00      	cmp	r3, #0
 8017bda:	d001      	beq.n	8017be0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8017bdc:	2301      	movs	r3, #1
 8017bde:	e139      	b.n	8017e54 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017be0:	68fb      	ldr	r3, [r7, #12]
 8017be2:	681b      	ldr	r3, [r3, #0]
 8017be4:	691a      	ldr	r2, [r3, #16]
 8017be6:	68fb      	ldr	r3, [r7, #12]
 8017be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017bea:	b2d2      	uxtb	r2, r2
 8017bec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017bee:	68fb      	ldr	r3, [r7, #12]
 8017bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017bf2:	1c5a      	adds	r2, r3, #1
 8017bf4:	68fb      	ldr	r3, [r7, #12]
 8017bf6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017bf8:	68fb      	ldr	r3, [r7, #12]
 8017bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017bfc:	3b01      	subs	r3, #1
 8017bfe:	b29a      	uxth	r2, r3
 8017c00:	68fb      	ldr	r3, [r7, #12]
 8017c02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017c04:	68fb      	ldr	r3, [r7, #12]
 8017c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017c08:	b29b      	uxth	r3, r3
 8017c0a:	3b01      	subs	r3, #1
 8017c0c:	b29a      	uxth	r2, r3
 8017c0e:	68fb      	ldr	r3, [r7, #12]
 8017c10:	855a      	strh	r2, [r3, #42]	; 0x2a
 8017c12:	e10b      	b.n	8017e2c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8017c14:	68fb      	ldr	r3, [r7, #12]
 8017c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017c18:	2b02      	cmp	r3, #2
 8017c1a:	d14e      	bne.n	8017cba <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8017c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c1e:	9300      	str	r3, [sp, #0]
 8017c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c22:	2200      	movs	r2, #0
 8017c24:	4906      	ldr	r1, [pc, #24]	; (8017c40 <HAL_I2C_Mem_Read+0x22c>)
 8017c26:	68f8      	ldr	r0, [r7, #12]
 8017c28:	f002 f8ea 	bl	8019e00 <I2C_WaitOnFlagUntilTimeout>
 8017c2c:	4603      	mov	r3, r0
 8017c2e:	2b00      	cmp	r3, #0
 8017c30:	d008      	beq.n	8017c44 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8017c32:	2301      	movs	r3, #1
 8017c34:	e10e      	b.n	8017e54 <HAL_I2C_Mem_Read+0x440>
 8017c36:	bf00      	nop
 8017c38:	00100002 	.word	0x00100002
 8017c3c:	ffff0000 	.word	0xffff0000
 8017c40:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017c44:	68fb      	ldr	r3, [r7, #12]
 8017c46:	681b      	ldr	r3, [r3, #0]
 8017c48:	681a      	ldr	r2, [r3, #0]
 8017c4a:	68fb      	ldr	r3, [r7, #12]
 8017c4c:	681b      	ldr	r3, [r3, #0]
 8017c4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017c52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017c54:	68fb      	ldr	r3, [r7, #12]
 8017c56:	681b      	ldr	r3, [r3, #0]
 8017c58:	691a      	ldr	r2, [r3, #16]
 8017c5a:	68fb      	ldr	r3, [r7, #12]
 8017c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c5e:	b2d2      	uxtb	r2, r2
 8017c60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017c62:	68fb      	ldr	r3, [r7, #12]
 8017c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c66:	1c5a      	adds	r2, r3, #1
 8017c68:	68fb      	ldr	r3, [r7, #12]
 8017c6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017c6c:	68fb      	ldr	r3, [r7, #12]
 8017c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017c70:	3b01      	subs	r3, #1
 8017c72:	b29a      	uxth	r2, r3
 8017c74:	68fb      	ldr	r3, [r7, #12]
 8017c76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017c78:	68fb      	ldr	r3, [r7, #12]
 8017c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017c7c:	b29b      	uxth	r3, r3
 8017c7e:	3b01      	subs	r3, #1
 8017c80:	b29a      	uxth	r2, r3
 8017c82:	68fb      	ldr	r3, [r7, #12]
 8017c84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017c86:	68fb      	ldr	r3, [r7, #12]
 8017c88:	681b      	ldr	r3, [r3, #0]
 8017c8a:	691a      	ldr	r2, [r3, #16]
 8017c8c:	68fb      	ldr	r3, [r7, #12]
 8017c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c90:	b2d2      	uxtb	r2, r2
 8017c92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017c94:	68fb      	ldr	r3, [r7, #12]
 8017c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c98:	1c5a      	adds	r2, r3, #1
 8017c9a:	68fb      	ldr	r3, [r7, #12]
 8017c9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017c9e:	68fb      	ldr	r3, [r7, #12]
 8017ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017ca2:	3b01      	subs	r3, #1
 8017ca4:	b29a      	uxth	r2, r3
 8017ca6:	68fb      	ldr	r3, [r7, #12]
 8017ca8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017caa:	68fb      	ldr	r3, [r7, #12]
 8017cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017cae:	b29b      	uxth	r3, r3
 8017cb0:	3b01      	subs	r3, #1
 8017cb2:	b29a      	uxth	r2, r3
 8017cb4:	68fb      	ldr	r3, [r7, #12]
 8017cb6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8017cb8:	e0b8      	b.n	8017e2c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8017cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cbc:	9300      	str	r3, [sp, #0]
 8017cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cc0:	2200      	movs	r2, #0
 8017cc2:	4966      	ldr	r1, [pc, #408]	; (8017e5c <HAL_I2C_Mem_Read+0x448>)
 8017cc4:	68f8      	ldr	r0, [r7, #12]
 8017cc6:	f002 f89b 	bl	8019e00 <I2C_WaitOnFlagUntilTimeout>
 8017cca:	4603      	mov	r3, r0
 8017ccc:	2b00      	cmp	r3, #0
 8017cce:	d001      	beq.n	8017cd4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8017cd0:	2301      	movs	r3, #1
 8017cd2:	e0bf      	b.n	8017e54 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017cd4:	68fb      	ldr	r3, [r7, #12]
 8017cd6:	681b      	ldr	r3, [r3, #0]
 8017cd8:	681a      	ldr	r2, [r3, #0]
 8017cda:	68fb      	ldr	r3, [r7, #12]
 8017cdc:	681b      	ldr	r3, [r3, #0]
 8017cde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017ce2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017ce4:	68fb      	ldr	r3, [r7, #12]
 8017ce6:	681b      	ldr	r3, [r3, #0]
 8017ce8:	691a      	ldr	r2, [r3, #16]
 8017cea:	68fb      	ldr	r3, [r7, #12]
 8017cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017cee:	b2d2      	uxtb	r2, r2
 8017cf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017cf2:	68fb      	ldr	r3, [r7, #12]
 8017cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017cf6:	1c5a      	adds	r2, r3, #1
 8017cf8:	68fb      	ldr	r3, [r7, #12]
 8017cfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017cfc:	68fb      	ldr	r3, [r7, #12]
 8017cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017d00:	3b01      	subs	r3, #1
 8017d02:	b29a      	uxth	r2, r3
 8017d04:	68fb      	ldr	r3, [r7, #12]
 8017d06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017d08:	68fb      	ldr	r3, [r7, #12]
 8017d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017d0c:	b29b      	uxth	r3, r3
 8017d0e:	3b01      	subs	r3, #1
 8017d10:	b29a      	uxth	r2, r3
 8017d12:	68fb      	ldr	r3, [r7, #12]
 8017d14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8017d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d18:	9300      	str	r3, [sp, #0]
 8017d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d1c:	2200      	movs	r2, #0
 8017d1e:	494f      	ldr	r1, [pc, #316]	; (8017e5c <HAL_I2C_Mem_Read+0x448>)
 8017d20:	68f8      	ldr	r0, [r7, #12]
 8017d22:	f002 f86d 	bl	8019e00 <I2C_WaitOnFlagUntilTimeout>
 8017d26:	4603      	mov	r3, r0
 8017d28:	2b00      	cmp	r3, #0
 8017d2a:	d001      	beq.n	8017d30 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8017d2c:	2301      	movs	r3, #1
 8017d2e:	e091      	b.n	8017e54 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017d30:	68fb      	ldr	r3, [r7, #12]
 8017d32:	681b      	ldr	r3, [r3, #0]
 8017d34:	681a      	ldr	r2, [r3, #0]
 8017d36:	68fb      	ldr	r3, [r7, #12]
 8017d38:	681b      	ldr	r3, [r3, #0]
 8017d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017d3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017d40:	68fb      	ldr	r3, [r7, #12]
 8017d42:	681b      	ldr	r3, [r3, #0]
 8017d44:	691a      	ldr	r2, [r3, #16]
 8017d46:	68fb      	ldr	r3, [r7, #12]
 8017d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d4a:	b2d2      	uxtb	r2, r2
 8017d4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017d4e:	68fb      	ldr	r3, [r7, #12]
 8017d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d52:	1c5a      	adds	r2, r3, #1
 8017d54:	68fb      	ldr	r3, [r7, #12]
 8017d56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017d58:	68fb      	ldr	r3, [r7, #12]
 8017d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017d5c:	3b01      	subs	r3, #1
 8017d5e:	b29a      	uxth	r2, r3
 8017d60:	68fb      	ldr	r3, [r7, #12]
 8017d62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017d64:	68fb      	ldr	r3, [r7, #12]
 8017d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017d68:	b29b      	uxth	r3, r3
 8017d6a:	3b01      	subs	r3, #1
 8017d6c:	b29a      	uxth	r2, r3
 8017d6e:	68fb      	ldr	r3, [r7, #12]
 8017d70:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017d72:	68fb      	ldr	r3, [r7, #12]
 8017d74:	681b      	ldr	r3, [r3, #0]
 8017d76:	691a      	ldr	r2, [r3, #16]
 8017d78:	68fb      	ldr	r3, [r7, #12]
 8017d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d7c:	b2d2      	uxtb	r2, r2
 8017d7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017d80:	68fb      	ldr	r3, [r7, #12]
 8017d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d84:	1c5a      	adds	r2, r3, #1
 8017d86:	68fb      	ldr	r3, [r7, #12]
 8017d88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017d8a:	68fb      	ldr	r3, [r7, #12]
 8017d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017d8e:	3b01      	subs	r3, #1
 8017d90:	b29a      	uxth	r2, r3
 8017d92:	68fb      	ldr	r3, [r7, #12]
 8017d94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017d96:	68fb      	ldr	r3, [r7, #12]
 8017d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017d9a:	b29b      	uxth	r3, r3
 8017d9c:	3b01      	subs	r3, #1
 8017d9e:	b29a      	uxth	r2, r3
 8017da0:	68fb      	ldr	r3, [r7, #12]
 8017da2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8017da4:	e042      	b.n	8017e2c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8017da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017da8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8017daa:	68f8      	ldr	r0, [r7, #12]
 8017dac:	f002 f9b2 	bl	801a114 <I2C_WaitOnRXNEFlagUntilTimeout>
 8017db0:	4603      	mov	r3, r0
 8017db2:	2b00      	cmp	r3, #0
 8017db4:	d001      	beq.n	8017dba <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8017db6:	2301      	movs	r3, #1
 8017db8:	e04c      	b.n	8017e54 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017dba:	68fb      	ldr	r3, [r7, #12]
 8017dbc:	681b      	ldr	r3, [r3, #0]
 8017dbe:	691a      	ldr	r2, [r3, #16]
 8017dc0:	68fb      	ldr	r3, [r7, #12]
 8017dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017dc4:	b2d2      	uxtb	r2, r2
 8017dc6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8017dc8:	68fb      	ldr	r3, [r7, #12]
 8017dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017dcc:	1c5a      	adds	r2, r3, #1
 8017dce:	68fb      	ldr	r3, [r7, #12]
 8017dd0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8017dd2:	68fb      	ldr	r3, [r7, #12]
 8017dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017dd6:	3b01      	subs	r3, #1
 8017dd8:	b29a      	uxth	r2, r3
 8017dda:	68fb      	ldr	r3, [r7, #12]
 8017ddc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8017dde:	68fb      	ldr	r3, [r7, #12]
 8017de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017de2:	b29b      	uxth	r3, r3
 8017de4:	3b01      	subs	r3, #1
 8017de6:	b29a      	uxth	r2, r3
 8017de8:	68fb      	ldr	r3, [r7, #12]
 8017dea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8017dec:	68fb      	ldr	r3, [r7, #12]
 8017dee:	681b      	ldr	r3, [r3, #0]
 8017df0:	695b      	ldr	r3, [r3, #20]
 8017df2:	f003 0304 	and.w	r3, r3, #4
 8017df6:	2b04      	cmp	r3, #4
 8017df8:	d118      	bne.n	8017e2c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017dfa:	68fb      	ldr	r3, [r7, #12]
 8017dfc:	681b      	ldr	r3, [r3, #0]
 8017dfe:	691a      	ldr	r2, [r3, #16]
 8017e00:	68fb      	ldr	r3, [r7, #12]
 8017e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e04:	b2d2      	uxtb	r2, r2
 8017e06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017e08:	68fb      	ldr	r3, [r7, #12]
 8017e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e0c:	1c5a      	adds	r2, r3, #1
 8017e0e:	68fb      	ldr	r3, [r7, #12]
 8017e10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017e12:	68fb      	ldr	r3, [r7, #12]
 8017e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017e16:	3b01      	subs	r3, #1
 8017e18:	b29a      	uxth	r2, r3
 8017e1a:	68fb      	ldr	r3, [r7, #12]
 8017e1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017e1e:	68fb      	ldr	r3, [r7, #12]
 8017e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017e22:	b29b      	uxth	r3, r3
 8017e24:	3b01      	subs	r3, #1
 8017e26:	b29a      	uxth	r2, r3
 8017e28:	68fb      	ldr	r3, [r7, #12]
 8017e2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8017e2c:	68fb      	ldr	r3, [r7, #12]
 8017e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017e30:	2b00      	cmp	r3, #0
 8017e32:	f47f aec2 	bne.w	8017bba <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8017e36:	68fb      	ldr	r3, [r7, #12]
 8017e38:	2220      	movs	r2, #32
 8017e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8017e3e:	68fb      	ldr	r3, [r7, #12]
 8017e40:	2200      	movs	r2, #0
 8017e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017e46:	68fb      	ldr	r3, [r7, #12]
 8017e48:	2200      	movs	r2, #0
 8017e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8017e4e:	2300      	movs	r3, #0
 8017e50:	e000      	b.n	8017e54 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8017e52:	2302      	movs	r3, #2
  }
}
 8017e54:	4618      	mov	r0, r3
 8017e56:	3728      	adds	r7, #40	; 0x28
 8017e58:	46bd      	mov	sp, r7
 8017e5a:	bd80      	pop	{r7, pc}
 8017e5c:	00010004 	.word	0x00010004

08017e60 <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8017e60:	b480      	push	{r7}
 8017e62:	b087      	sub	sp, #28
 8017e64:	af00      	add	r7, sp, #0
 8017e66:	60f8      	str	r0, [r7, #12]
 8017e68:	607a      	str	r2, [r7, #4]
 8017e6a:	461a      	mov	r2, r3
 8017e6c:	460b      	mov	r3, r1
 8017e6e:	817b      	strh	r3, [r7, #10]
 8017e70:	4613      	mov	r3, r2
 8017e72:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 8017e74:	2300      	movs	r3, #0
 8017e76:	617b      	str	r3, [r7, #20]
  __IO uint32_t count      = 0x00U;
 8017e78:	2300      	movs	r3, #0
 8017e7a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017e7c:	68fb      	ldr	r3, [r7, #12]
 8017e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017e82:	b2db      	uxtb	r3, r3
 8017e84:	2b20      	cmp	r3, #32
 8017e86:	f040 80a6 	bne.w	8017fd6 <HAL_I2C_Master_Seq_Transmit_IT+0x176>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8017e8a:	68fb      	ldr	r3, [r7, #12]
 8017e8c:	681b      	ldr	r3, [r3, #0]
 8017e8e:	681b      	ldr	r3, [r3, #0]
 8017e90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8017e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017e98:	d005      	beq.n	8017ea6 <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 8017e9a:	6a3b      	ldr	r3, [r7, #32]
 8017e9c:	2b08      	cmp	r3, #8
 8017e9e:	d002      	beq.n	8017ea6 <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 8017ea0:	6a3b      	ldr	r3, [r7, #32]
 8017ea2:	2b01      	cmp	r3, #1
 8017ea4:	d130      	bne.n	8017f08 <HAL_I2C_Master_Seq_Transmit_IT+0xa8>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8017ea6:	4b4f      	ldr	r3, [pc, #316]	; (8017fe4 <HAL_I2C_Master_Seq_Transmit_IT+0x184>)
 8017ea8:	681b      	ldr	r3, [r3, #0]
 8017eaa:	08db      	lsrs	r3, r3, #3
 8017eac:	4a4e      	ldr	r2, [pc, #312]	; (8017fe8 <HAL_I2C_Master_Seq_Transmit_IT+0x188>)
 8017eae:	fba2 2303 	umull	r2, r3, r2, r3
 8017eb2:	0a1a      	lsrs	r2, r3, #8
 8017eb4:	4613      	mov	r3, r2
 8017eb6:	009b      	lsls	r3, r3, #2
 8017eb8:	4413      	add	r3, r2
 8017eba:	009a      	lsls	r2, r3, #2
 8017ebc:	4413      	add	r3, r2
 8017ebe:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 8017ec0:	693b      	ldr	r3, [r7, #16]
 8017ec2:	3b01      	subs	r3, #1
 8017ec4:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 8017ec6:	693b      	ldr	r3, [r7, #16]
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	d116      	bne.n	8017efa <HAL_I2C_Master_Seq_Transmit_IT+0x9a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8017ecc:	68fb      	ldr	r3, [r7, #12]
 8017ece:	2200      	movs	r2, #0
 8017ed0:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8017ed2:	68fb      	ldr	r3, [r7, #12]
 8017ed4:	2220      	movs	r2, #32
 8017ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8017eda:	68fb      	ldr	r3, [r7, #12]
 8017edc:	2200      	movs	r2, #0
 8017ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8017ee2:	68fb      	ldr	r3, [r7, #12]
 8017ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ee6:	f043 0220 	orr.w	r2, r3, #32
 8017eea:	68fb      	ldr	r3, [r7, #12]
 8017eec:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8017eee:	68fb      	ldr	r3, [r7, #12]
 8017ef0:	2200      	movs	r2, #0
 8017ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8017ef6:	2301      	movs	r3, #1
 8017ef8:	e06e      	b.n	8017fd8 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8017efa:	68fb      	ldr	r3, [r7, #12]
 8017efc:	681b      	ldr	r3, [r3, #0]
 8017efe:	699b      	ldr	r3, [r3, #24]
 8017f00:	f003 0302 	and.w	r3, r3, #2
 8017f04:	2b02      	cmp	r3, #2
 8017f06:	d0db      	beq.n	8017ec0 <HAL_I2C_Master_Seq_Transmit_IT+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017f08:	68fb      	ldr	r3, [r7, #12]
 8017f0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017f0e:	2b01      	cmp	r3, #1
 8017f10:	d101      	bne.n	8017f16 <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
 8017f12:	2302      	movs	r3, #2
 8017f14:	e060      	b.n	8017fd8 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
 8017f16:	68fb      	ldr	r3, [r7, #12]
 8017f18:	2201      	movs	r2, #1
 8017f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8017f1e:	68fb      	ldr	r3, [r7, #12]
 8017f20:	681b      	ldr	r3, [r3, #0]
 8017f22:	681b      	ldr	r3, [r3, #0]
 8017f24:	f003 0301 	and.w	r3, r3, #1
 8017f28:	2b01      	cmp	r3, #1
 8017f2a:	d007      	beq.n	8017f3c <HAL_I2C_Master_Seq_Transmit_IT+0xdc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8017f2c:	68fb      	ldr	r3, [r7, #12]
 8017f2e:	681b      	ldr	r3, [r3, #0]
 8017f30:	681a      	ldr	r2, [r3, #0]
 8017f32:	68fb      	ldr	r3, [r7, #12]
 8017f34:	681b      	ldr	r3, [r3, #0]
 8017f36:	f042 0201 	orr.w	r2, r2, #1
 8017f3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8017f3c:	68fb      	ldr	r3, [r7, #12]
 8017f3e:	681b      	ldr	r3, [r3, #0]
 8017f40:	681a      	ldr	r2, [r3, #0]
 8017f42:	68fb      	ldr	r3, [r7, #12]
 8017f44:	681b      	ldr	r3, [r3, #0]
 8017f46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8017f4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8017f4c:	68fb      	ldr	r3, [r7, #12]
 8017f4e:	2221      	movs	r2, #33	; 0x21
 8017f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8017f54:	68fb      	ldr	r3, [r7, #12]
 8017f56:	2210      	movs	r2, #16
 8017f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8017f5c:	68fb      	ldr	r3, [r7, #12]
 8017f5e:	2200      	movs	r2, #0
 8017f60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8017f62:	68fb      	ldr	r3, [r7, #12]
 8017f64:	687a      	ldr	r2, [r7, #4]
 8017f66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8017f68:	68fb      	ldr	r3, [r7, #12]
 8017f6a:	893a      	ldrh	r2, [r7, #8]
 8017f6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8017f6e:	68fb      	ldr	r3, [r7, #12]
 8017f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017f72:	b29a      	uxth	r2, r3
 8017f74:	68fb      	ldr	r3, [r7, #12]
 8017f76:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8017f78:	68fb      	ldr	r3, [r7, #12]
 8017f7a:	6a3a      	ldr	r2, [r7, #32]
 8017f7c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8017f7e:	897a      	ldrh	r2, [r7, #10]
 8017f80:	68fb      	ldr	r3, [r7, #12]
 8017f82:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 8017f84:	68fb      	ldr	r3, [r7, #12]
 8017f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f88:	617b      	str	r3, [r7, #20]

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8017f8a:	697b      	ldr	r3, [r7, #20]
 8017f8c:	2b11      	cmp	r3, #17
 8017f8e:	d10c      	bne.n	8017faa <HAL_I2C_Master_Seq_Transmit_IT+0x14a>
 8017f90:	6a3b      	ldr	r3, [r7, #32]
 8017f92:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8017f96:	d003      	beq.n	8017fa0 <HAL_I2C_Master_Seq_Transmit_IT+0x140>
 8017f98:	6a3b      	ldr	r3, [r7, #32]
 8017f9a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8017f9e:	d101      	bne.n	8017fa4 <HAL_I2C_Master_Seq_Transmit_IT+0x144>
 8017fa0:	2301      	movs	r3, #1
 8017fa2:	e000      	b.n	8017fa6 <HAL_I2C_Master_Seq_Transmit_IT+0x146>
 8017fa4:	2300      	movs	r3, #0
 8017fa6:	2b01      	cmp	r3, #1
 8017fa8:	d107      	bne.n	8017fba <HAL_I2C_Master_Seq_Transmit_IT+0x15a>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8017faa:	68fb      	ldr	r3, [r7, #12]
 8017fac:	681b      	ldr	r3, [r3, #0]
 8017fae:	681a      	ldr	r2, [r3, #0]
 8017fb0:	68fb      	ldr	r3, [r7, #12]
 8017fb2:	681b      	ldr	r3, [r3, #0]
 8017fb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017fb8:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017fba:	68fb      	ldr	r3, [r7, #12]
 8017fbc:	2200      	movs	r2, #0
 8017fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8017fc2:	68fb      	ldr	r3, [r7, #12]
 8017fc4:	681b      	ldr	r3, [r3, #0]
 8017fc6:	685a      	ldr	r2, [r3, #4]
 8017fc8:	68fb      	ldr	r3, [r7, #12]
 8017fca:	681b      	ldr	r3, [r3, #0]
 8017fcc:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8017fd0:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8017fd2:	2300      	movs	r3, #0
 8017fd4:	e000      	b.n	8017fd8 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 8017fd6:	2302      	movs	r3, #2
  }
}
 8017fd8:	4618      	mov	r0, r3
 8017fda:	371c      	adds	r7, #28
 8017fdc:	46bd      	mov	sp, r7
 8017fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fe2:	4770      	bx	lr
 8017fe4:	200001e0 	.word	0x200001e0
 8017fe8:	14f8b589 	.word	0x14f8b589

08017fec <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8017fec:	b480      	push	{r7}
 8017fee:	b089      	sub	sp, #36	; 0x24
 8017ff0:	af00      	add	r7, sp, #0
 8017ff2:	60f8      	str	r0, [r7, #12]
 8017ff4:	607a      	str	r2, [r7, #4]
 8017ff6:	461a      	mov	r2, r3
 8017ff8:	460b      	mov	r3, r1
 8017ffa:	817b      	strh	r3, [r7, #10]
 8017ffc:	4613      	mov	r3, r2
 8017ffe:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 8018000:	2300      	movs	r3, #0
 8018002:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8018004:	2300      	movs	r3, #0
 8018006:	617b      	str	r3, [r7, #20]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018008:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 801800c:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801800e:	68fb      	ldr	r3, [r7, #12]
 8018010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018014:	b2db      	uxtb	r3, r3
 8018016:	2b20      	cmp	r3, #32
 8018018:	f040 80da 	bne.w	80181d0 <HAL_I2C_Master_Seq_Receive_IT+0x1e4>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 801801c:	68fb      	ldr	r3, [r7, #12]
 801801e:	681b      	ldr	r3, [r3, #0]
 8018020:	681b      	ldr	r3, [r3, #0]
 8018022:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8018026:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801802a:	d005      	beq.n	8018038 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 801802c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801802e:	2b08      	cmp	r3, #8
 8018030:	d002      	beq.n	8018038 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 8018032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018034:	2b01      	cmp	r3, #1
 8018036:	d130      	bne.n	801809a <HAL_I2C_Master_Seq_Receive_IT+0xae>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8018038:	4b69      	ldr	r3, [pc, #420]	; (80181e0 <HAL_I2C_Master_Seq_Receive_IT+0x1f4>)
 801803a:	681b      	ldr	r3, [r3, #0]
 801803c:	08db      	lsrs	r3, r3, #3
 801803e:	4a69      	ldr	r2, [pc, #420]	; (80181e4 <HAL_I2C_Master_Seq_Receive_IT+0x1f8>)
 8018040:	fba2 2303 	umull	r2, r3, r2, r3
 8018044:	0a1a      	lsrs	r2, r3, #8
 8018046:	4613      	mov	r3, r2
 8018048:	009b      	lsls	r3, r3, #2
 801804a:	4413      	add	r3, r2
 801804c:	009a      	lsls	r2, r3, #2
 801804e:	4413      	add	r3, r2
 8018050:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 8018052:	697b      	ldr	r3, [r7, #20]
 8018054:	3b01      	subs	r3, #1
 8018056:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 8018058:	697b      	ldr	r3, [r7, #20]
 801805a:	2b00      	cmp	r3, #0
 801805c:	d116      	bne.n	801808c <HAL_I2C_Master_Seq_Receive_IT+0xa0>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 801805e:	68fb      	ldr	r3, [r7, #12]
 8018060:	2200      	movs	r2, #0
 8018062:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8018064:	68fb      	ldr	r3, [r7, #12]
 8018066:	2220      	movs	r2, #32
 8018068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 801806c:	68fb      	ldr	r3, [r7, #12]
 801806e:	2200      	movs	r2, #0
 8018070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8018074:	68fb      	ldr	r3, [r7, #12]
 8018076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018078:	f043 0220 	orr.w	r2, r3, #32
 801807c:	68fb      	ldr	r3, [r7, #12]
 801807e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8018080:	68fb      	ldr	r3, [r7, #12]
 8018082:	2200      	movs	r2, #0
 8018084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8018088:	2301      	movs	r3, #1
 801808a:	e0a2      	b.n	80181d2 <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801808c:	68fb      	ldr	r3, [r7, #12]
 801808e:	681b      	ldr	r3, [r3, #0]
 8018090:	699b      	ldr	r3, [r3, #24]
 8018092:	f003 0302 	and.w	r3, r3, #2
 8018096:	2b02      	cmp	r3, #2
 8018098:	d0db      	beq.n	8018052 <HAL_I2C_Master_Seq_Receive_IT+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801809a:	68fb      	ldr	r3, [r7, #12]
 801809c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80180a0:	2b01      	cmp	r3, #1
 80180a2:	d101      	bne.n	80180a8 <HAL_I2C_Master_Seq_Receive_IT+0xbc>
 80180a4:	2302      	movs	r3, #2
 80180a6:	e094      	b.n	80181d2 <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
 80180a8:	68fb      	ldr	r3, [r7, #12]
 80180aa:	2201      	movs	r2, #1
 80180ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80180b0:	68fb      	ldr	r3, [r7, #12]
 80180b2:	681b      	ldr	r3, [r3, #0]
 80180b4:	681b      	ldr	r3, [r3, #0]
 80180b6:	f003 0301 	and.w	r3, r3, #1
 80180ba:	2b01      	cmp	r3, #1
 80180bc:	d007      	beq.n	80180ce <HAL_I2C_Master_Seq_Receive_IT+0xe2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80180be:	68fb      	ldr	r3, [r7, #12]
 80180c0:	681b      	ldr	r3, [r3, #0]
 80180c2:	681a      	ldr	r2, [r3, #0]
 80180c4:	68fb      	ldr	r3, [r7, #12]
 80180c6:	681b      	ldr	r3, [r3, #0]
 80180c8:	f042 0201 	orr.w	r2, r2, #1
 80180cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80180ce:	68fb      	ldr	r3, [r7, #12]
 80180d0:	681b      	ldr	r3, [r3, #0]
 80180d2:	681a      	ldr	r2, [r3, #0]
 80180d4:	68fb      	ldr	r3, [r7, #12]
 80180d6:	681b      	ldr	r3, [r3, #0]
 80180d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80180dc:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80180de:	68fb      	ldr	r3, [r7, #12]
 80180e0:	2222      	movs	r2, #34	; 0x22
 80180e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80180e6:	68fb      	ldr	r3, [r7, #12]
 80180e8:	2210      	movs	r2, #16
 80180ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80180ee:	68fb      	ldr	r3, [r7, #12]
 80180f0:	2200      	movs	r2, #0
 80180f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80180f4:	68fb      	ldr	r3, [r7, #12]
 80180f6:	687a      	ldr	r2, [r7, #4]
 80180f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80180fa:	68fb      	ldr	r3, [r7, #12]
 80180fc:	893a      	ldrh	r2, [r7, #8]
 80180fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8018100:	68fb      	ldr	r3, [r7, #12]
 8018102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018104:	b29a      	uxth	r2, r3
 8018106:	68fb      	ldr	r3, [r7, #12]
 8018108:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 801810a:	68fb      	ldr	r3, [r7, #12]
 801810c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801810e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8018110:	897a      	ldrh	r2, [r7, #10]
 8018112:	68fb      	ldr	r3, [r7, #12]
 8018114:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 8018116:	68fb      	ldr	r3, [r7, #12]
 8018118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801811a:	61bb      	str	r3, [r7, #24]

    if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 801811c:	68fb      	ldr	r3, [r7, #12]
 801811e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018120:	b29b      	uxth	r3, r3
 8018122:	2b02      	cmp	r3, #2
 8018124:	d126      	bne.n	8018174 <HAL_I2C_Master_Seq_Receive_IT+0x188>
 8018126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018128:	2b20      	cmp	r3, #32
 801812a:	d002      	beq.n	8018132 <HAL_I2C_Master_Seq_Receive_IT+0x146>
 801812c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801812e:	2b10      	cmp	r3, #16
 8018130:	d120      	bne.n	8018174 <HAL_I2C_Master_Seq_Receive_IT+0x188>
    {
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8018132:	69bb      	ldr	r3, [r7, #24]
 8018134:	2b12      	cmp	r3, #18
 8018136:	d114      	bne.n	8018162 <HAL_I2C_Master_Seq_Receive_IT+0x176>
      {
        /* Disable Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018138:	68fb      	ldr	r3, [r7, #12]
 801813a:	681b      	ldr	r3, [r3, #0]
 801813c:	681a      	ldr	r2, [r3, #0]
 801813e:	68fb      	ldr	r3, [r7, #12]
 8018140:	681b      	ldr	r3, [r3, #0]
 8018142:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018146:	601a      	str	r2, [r3, #0]

        /* Enable Pos */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8018148:	68fb      	ldr	r3, [r7, #12]
 801814a:	681b      	ldr	r3, [r3, #0]
 801814c:	681a      	ldr	r2, [r3, #0]
 801814e:	68fb      	ldr	r3, [r7, #12]
 8018150:	681b      	ldr	r3, [r3, #0]
 8018152:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8018156:	601a      	str	r2, [r3, #0]

        /* Remove Enabling of IT_BUF, mean RXNE treatment, treat the 2 bytes through BTF */
        enableIT &= ~I2C_IT_BUF;
 8018158:	69fb      	ldr	r3, [r7, #28]
 801815a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801815e:	61fb      	str	r3, [r7, #28]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8018160:	e010      	b.n	8018184 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018162:	68fb      	ldr	r3, [r7, #12]
 8018164:	681b      	ldr	r3, [r3, #0]
 8018166:	681a      	ldr	r2, [r3, #0]
 8018168:	68fb      	ldr	r3, [r7, #12]
 801816a:	681b      	ldr	r3, [r3, #0]
 801816c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018170:	601a      	str	r2, [r3, #0]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8018172:	e007      	b.n	8018184 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018174:	68fb      	ldr	r3, [r7, #12]
 8018176:	681b      	ldr	r3, [r3, #0]
 8018178:	681a      	ldr	r2, [r3, #0]
 801817a:	68fb      	ldr	r3, [r7, #12]
 801817c:	681b      	ldr	r3, [r3, #0]
 801817e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018182:	601a      	str	r2, [r3, #0]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8018184:	69bb      	ldr	r3, [r7, #24]
 8018186:	2b12      	cmp	r3, #18
 8018188:	d10c      	bne.n	80181a4 <HAL_I2C_Master_Seq_Receive_IT+0x1b8>
 801818a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801818c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8018190:	d003      	beq.n	801819a <HAL_I2C_Master_Seq_Receive_IT+0x1ae>
 8018192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018194:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8018198:	d101      	bne.n	801819e <HAL_I2C_Master_Seq_Receive_IT+0x1b2>
 801819a:	2301      	movs	r3, #1
 801819c:	e000      	b.n	80181a0 <HAL_I2C_Master_Seq_Receive_IT+0x1b4>
 801819e:	2300      	movs	r3, #0
 80181a0:	2b01      	cmp	r3, #1
 80181a2:	d107      	bne.n	80181b4 <HAL_I2C_Master_Seq_Receive_IT+0x1c8>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80181a4:	68fb      	ldr	r3, [r7, #12]
 80181a6:	681b      	ldr	r3, [r3, #0]
 80181a8:	681a      	ldr	r2, [r3, #0]
 80181aa:	68fb      	ldr	r3, [r7, #12]
 80181ac:	681b      	ldr	r3, [r3, #0]
 80181ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80181b2:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80181b4:	68fb      	ldr	r3, [r7, #12]
 80181b6:	2200      	movs	r2, #0
 80181b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable interrupts */
    __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 80181bc:	68fb      	ldr	r3, [r7, #12]
 80181be:	681b      	ldr	r3, [r3, #0]
 80181c0:	6859      	ldr	r1, [r3, #4]
 80181c2:	68fb      	ldr	r3, [r7, #12]
 80181c4:	681b      	ldr	r3, [r3, #0]
 80181c6:	69fa      	ldr	r2, [r7, #28]
 80181c8:	430a      	orrs	r2, r1
 80181ca:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80181cc:	2300      	movs	r3, #0
 80181ce:	e000      	b.n	80181d2 <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 80181d0:	2302      	movs	r3, #2
  }
}
 80181d2:	4618      	mov	r0, r3
 80181d4:	3724      	adds	r7, #36	; 0x24
 80181d6:	46bd      	mov	sp, r7
 80181d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181dc:	4770      	bx	lr
 80181de:	bf00      	nop
 80181e0:	200001e0 	.word	0x200001e0
 80181e4:	14f8b589 	.word	0x14f8b589

080181e8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80181e8:	b580      	push	{r7, lr}
 80181ea:	b088      	sub	sp, #32
 80181ec:	af00      	add	r7, sp, #0
 80181ee:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80181f0:	2300      	movs	r3, #0
 80181f2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80181f4:	687b      	ldr	r3, [r7, #4]
 80181f6:	681b      	ldr	r3, [r3, #0]
 80181f8:	685b      	ldr	r3, [r3, #4]
 80181fa:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80181fc:	687b      	ldr	r3, [r7, #4]
 80181fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018200:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018208:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801820a:	687b      	ldr	r3, [r7, #4]
 801820c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018210:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8018212:	7bfb      	ldrb	r3, [r7, #15]
 8018214:	2b10      	cmp	r3, #16
 8018216:	d003      	beq.n	8018220 <HAL_I2C_EV_IRQHandler+0x38>
 8018218:	7bfb      	ldrb	r3, [r7, #15]
 801821a:	2b40      	cmp	r3, #64	; 0x40
 801821c:	f040 80c1 	bne.w	80183a2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8018220:	687b      	ldr	r3, [r7, #4]
 8018222:	681b      	ldr	r3, [r3, #0]
 8018224:	699b      	ldr	r3, [r3, #24]
 8018226:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	681b      	ldr	r3, [r3, #0]
 801822c:	695b      	ldr	r3, [r3, #20]
 801822e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8018230:	69fb      	ldr	r3, [r7, #28]
 8018232:	f003 0301 	and.w	r3, r3, #1
 8018236:	2b00      	cmp	r3, #0
 8018238:	d10d      	bne.n	8018256 <HAL_I2C_EV_IRQHandler+0x6e>
 801823a:	693b      	ldr	r3, [r7, #16]
 801823c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8018240:	d003      	beq.n	801824a <HAL_I2C_EV_IRQHandler+0x62>
 8018242:	693b      	ldr	r3, [r7, #16]
 8018244:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8018248:	d101      	bne.n	801824e <HAL_I2C_EV_IRQHandler+0x66>
 801824a:	2301      	movs	r3, #1
 801824c:	e000      	b.n	8018250 <HAL_I2C_EV_IRQHandler+0x68>
 801824e:	2300      	movs	r3, #0
 8018250:	2b01      	cmp	r3, #1
 8018252:	f000 8132 	beq.w	80184ba <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8018256:	69fb      	ldr	r3, [r7, #28]
 8018258:	f003 0301 	and.w	r3, r3, #1
 801825c:	2b00      	cmp	r3, #0
 801825e:	d00c      	beq.n	801827a <HAL_I2C_EV_IRQHandler+0x92>
 8018260:	697b      	ldr	r3, [r7, #20]
 8018262:	0a5b      	lsrs	r3, r3, #9
 8018264:	f003 0301 	and.w	r3, r3, #1
 8018268:	2b00      	cmp	r3, #0
 801826a:	d006      	beq.n	801827a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 801826c:	6878      	ldr	r0, [r7, #4]
 801826e:	f001 ffd6 	bl	801a21e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8018272:	6878      	ldr	r0, [r7, #4]
 8018274:	f000 fd83 	bl	8018d7e <I2C_Master_SB>
 8018278:	e092      	b.n	80183a0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801827a:	69fb      	ldr	r3, [r7, #28]
 801827c:	08db      	lsrs	r3, r3, #3
 801827e:	f003 0301 	and.w	r3, r3, #1
 8018282:	2b00      	cmp	r3, #0
 8018284:	d009      	beq.n	801829a <HAL_I2C_EV_IRQHandler+0xb2>
 8018286:	697b      	ldr	r3, [r7, #20]
 8018288:	0a5b      	lsrs	r3, r3, #9
 801828a:	f003 0301 	and.w	r3, r3, #1
 801828e:	2b00      	cmp	r3, #0
 8018290:	d003      	beq.n	801829a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8018292:	6878      	ldr	r0, [r7, #4]
 8018294:	f000 fdf9 	bl	8018e8a <I2C_Master_ADD10>
 8018298:	e082      	b.n	80183a0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801829a:	69fb      	ldr	r3, [r7, #28]
 801829c:	085b      	lsrs	r3, r3, #1
 801829e:	f003 0301 	and.w	r3, r3, #1
 80182a2:	2b00      	cmp	r3, #0
 80182a4:	d009      	beq.n	80182ba <HAL_I2C_EV_IRQHandler+0xd2>
 80182a6:	697b      	ldr	r3, [r7, #20]
 80182a8:	0a5b      	lsrs	r3, r3, #9
 80182aa:	f003 0301 	and.w	r3, r3, #1
 80182ae:	2b00      	cmp	r3, #0
 80182b0:	d003      	beq.n	80182ba <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80182b2:	6878      	ldr	r0, [r7, #4]
 80182b4:	f000 fe13 	bl	8018ede <I2C_Master_ADDR>
 80182b8:	e072      	b.n	80183a0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80182ba:	69bb      	ldr	r3, [r7, #24]
 80182bc:	089b      	lsrs	r3, r3, #2
 80182be:	f003 0301 	and.w	r3, r3, #1
 80182c2:	2b00      	cmp	r3, #0
 80182c4:	d03b      	beq.n	801833e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80182c6:	687b      	ldr	r3, [r7, #4]
 80182c8:	681b      	ldr	r3, [r3, #0]
 80182ca:	685b      	ldr	r3, [r3, #4]
 80182cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80182d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80182d4:	f000 80f3 	beq.w	80184be <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80182d8:	69fb      	ldr	r3, [r7, #28]
 80182da:	09db      	lsrs	r3, r3, #7
 80182dc:	f003 0301 	and.w	r3, r3, #1
 80182e0:	2b00      	cmp	r3, #0
 80182e2:	d00f      	beq.n	8018304 <HAL_I2C_EV_IRQHandler+0x11c>
 80182e4:	697b      	ldr	r3, [r7, #20]
 80182e6:	0a9b      	lsrs	r3, r3, #10
 80182e8:	f003 0301 	and.w	r3, r3, #1
 80182ec:	2b00      	cmp	r3, #0
 80182ee:	d009      	beq.n	8018304 <HAL_I2C_EV_IRQHandler+0x11c>
 80182f0:	69fb      	ldr	r3, [r7, #28]
 80182f2:	089b      	lsrs	r3, r3, #2
 80182f4:	f003 0301 	and.w	r3, r3, #1
 80182f8:	2b00      	cmp	r3, #0
 80182fa:	d103      	bne.n	8018304 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80182fc:	6878      	ldr	r0, [r7, #4]
 80182fe:	f000 f9f3 	bl	80186e8 <I2C_MasterTransmit_TXE>
 8018302:	e04d      	b.n	80183a0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8018304:	69fb      	ldr	r3, [r7, #28]
 8018306:	089b      	lsrs	r3, r3, #2
 8018308:	f003 0301 	and.w	r3, r3, #1
 801830c:	2b00      	cmp	r3, #0
 801830e:	f000 80d6 	beq.w	80184be <HAL_I2C_EV_IRQHandler+0x2d6>
 8018312:	697b      	ldr	r3, [r7, #20]
 8018314:	0a5b      	lsrs	r3, r3, #9
 8018316:	f003 0301 	and.w	r3, r3, #1
 801831a:	2b00      	cmp	r3, #0
 801831c:	f000 80cf 	beq.w	80184be <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8018320:	7bbb      	ldrb	r3, [r7, #14]
 8018322:	2b21      	cmp	r3, #33	; 0x21
 8018324:	d103      	bne.n	801832e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8018326:	6878      	ldr	r0, [r7, #4]
 8018328:	f000 fa7a 	bl	8018820 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801832c:	e0c7      	b.n	80184be <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 801832e:	7bfb      	ldrb	r3, [r7, #15]
 8018330:	2b40      	cmp	r3, #64	; 0x40
 8018332:	f040 80c4 	bne.w	80184be <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8018336:	6878      	ldr	r0, [r7, #4]
 8018338:	f000 fae8 	bl	801890c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801833c:	e0bf      	b.n	80184be <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 801833e:	687b      	ldr	r3, [r7, #4]
 8018340:	681b      	ldr	r3, [r3, #0]
 8018342:	685b      	ldr	r3, [r3, #4]
 8018344:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018348:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801834c:	f000 80b7 	beq.w	80184be <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8018350:	69fb      	ldr	r3, [r7, #28]
 8018352:	099b      	lsrs	r3, r3, #6
 8018354:	f003 0301 	and.w	r3, r3, #1
 8018358:	2b00      	cmp	r3, #0
 801835a:	d00f      	beq.n	801837c <HAL_I2C_EV_IRQHandler+0x194>
 801835c:	697b      	ldr	r3, [r7, #20]
 801835e:	0a9b      	lsrs	r3, r3, #10
 8018360:	f003 0301 	and.w	r3, r3, #1
 8018364:	2b00      	cmp	r3, #0
 8018366:	d009      	beq.n	801837c <HAL_I2C_EV_IRQHandler+0x194>
 8018368:	69fb      	ldr	r3, [r7, #28]
 801836a:	089b      	lsrs	r3, r3, #2
 801836c:	f003 0301 	and.w	r3, r3, #1
 8018370:	2b00      	cmp	r3, #0
 8018372:	d103      	bne.n	801837c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8018374:	6878      	ldr	r0, [r7, #4]
 8018376:	f000 fb5d 	bl	8018a34 <I2C_MasterReceive_RXNE>
 801837a:	e011      	b.n	80183a0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801837c:	69fb      	ldr	r3, [r7, #28]
 801837e:	089b      	lsrs	r3, r3, #2
 8018380:	f003 0301 	and.w	r3, r3, #1
 8018384:	2b00      	cmp	r3, #0
 8018386:	f000 809a 	beq.w	80184be <HAL_I2C_EV_IRQHandler+0x2d6>
 801838a:	697b      	ldr	r3, [r7, #20]
 801838c:	0a5b      	lsrs	r3, r3, #9
 801838e:	f003 0301 	and.w	r3, r3, #1
 8018392:	2b00      	cmp	r3, #0
 8018394:	f000 8093 	beq.w	80184be <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8018398:	6878      	ldr	r0, [r7, #4]
 801839a:	f000 fc06 	bl	8018baa <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801839e:	e08e      	b.n	80184be <HAL_I2C_EV_IRQHandler+0x2d6>
 80183a0:	e08d      	b.n	80184be <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80183a2:	687b      	ldr	r3, [r7, #4]
 80183a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	d004      	beq.n	80183b4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80183aa:	687b      	ldr	r3, [r7, #4]
 80183ac:	681b      	ldr	r3, [r3, #0]
 80183ae:	695b      	ldr	r3, [r3, #20]
 80183b0:	61fb      	str	r3, [r7, #28]
 80183b2:	e007      	b.n	80183c4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	681b      	ldr	r3, [r3, #0]
 80183b8:	699b      	ldr	r3, [r3, #24]
 80183ba:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80183bc:	687b      	ldr	r3, [r7, #4]
 80183be:	681b      	ldr	r3, [r3, #0]
 80183c0:	695b      	ldr	r3, [r3, #20]
 80183c2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80183c4:	69fb      	ldr	r3, [r7, #28]
 80183c6:	085b      	lsrs	r3, r3, #1
 80183c8:	f003 0301 	and.w	r3, r3, #1
 80183cc:	2b00      	cmp	r3, #0
 80183ce:	d012      	beq.n	80183f6 <HAL_I2C_EV_IRQHandler+0x20e>
 80183d0:	697b      	ldr	r3, [r7, #20]
 80183d2:	0a5b      	lsrs	r3, r3, #9
 80183d4:	f003 0301 	and.w	r3, r3, #1
 80183d8:	2b00      	cmp	r3, #0
 80183da:	d00c      	beq.n	80183f6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183e0:	2b00      	cmp	r3, #0
 80183e2:	d003      	beq.n	80183ec <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80183e4:	687b      	ldr	r3, [r7, #4]
 80183e6:	681b      	ldr	r3, [r3, #0]
 80183e8:	699b      	ldr	r3, [r3, #24]
 80183ea:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80183ec:	69b9      	ldr	r1, [r7, #24]
 80183ee:	6878      	ldr	r0, [r7, #4]
 80183f0:	f000 ffc4 	bl	801937c <I2C_Slave_ADDR>
 80183f4:	e066      	b.n	80184c4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80183f6:	69fb      	ldr	r3, [r7, #28]
 80183f8:	091b      	lsrs	r3, r3, #4
 80183fa:	f003 0301 	and.w	r3, r3, #1
 80183fe:	2b00      	cmp	r3, #0
 8018400:	d009      	beq.n	8018416 <HAL_I2C_EV_IRQHandler+0x22e>
 8018402:	697b      	ldr	r3, [r7, #20]
 8018404:	0a5b      	lsrs	r3, r3, #9
 8018406:	f003 0301 	and.w	r3, r3, #1
 801840a:	2b00      	cmp	r3, #0
 801840c:	d003      	beq.n	8018416 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 801840e:	6878      	ldr	r0, [r7, #4]
 8018410:	f000 fffe 	bl	8019410 <I2C_Slave_STOPF>
 8018414:	e056      	b.n	80184c4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8018416:	7bbb      	ldrb	r3, [r7, #14]
 8018418:	2b21      	cmp	r3, #33	; 0x21
 801841a:	d002      	beq.n	8018422 <HAL_I2C_EV_IRQHandler+0x23a>
 801841c:	7bbb      	ldrb	r3, [r7, #14]
 801841e:	2b29      	cmp	r3, #41	; 0x29
 8018420:	d125      	bne.n	801846e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8018422:	69fb      	ldr	r3, [r7, #28]
 8018424:	09db      	lsrs	r3, r3, #7
 8018426:	f003 0301 	and.w	r3, r3, #1
 801842a:	2b00      	cmp	r3, #0
 801842c:	d00f      	beq.n	801844e <HAL_I2C_EV_IRQHandler+0x266>
 801842e:	697b      	ldr	r3, [r7, #20]
 8018430:	0a9b      	lsrs	r3, r3, #10
 8018432:	f003 0301 	and.w	r3, r3, #1
 8018436:	2b00      	cmp	r3, #0
 8018438:	d009      	beq.n	801844e <HAL_I2C_EV_IRQHandler+0x266>
 801843a:	69fb      	ldr	r3, [r7, #28]
 801843c:	089b      	lsrs	r3, r3, #2
 801843e:	f003 0301 	and.w	r3, r3, #1
 8018442:	2b00      	cmp	r3, #0
 8018444:	d103      	bne.n	801844e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8018446:	6878      	ldr	r0, [r7, #4]
 8018448:	f000 feda 	bl	8019200 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801844c:	e039      	b.n	80184c2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801844e:	69fb      	ldr	r3, [r7, #28]
 8018450:	089b      	lsrs	r3, r3, #2
 8018452:	f003 0301 	and.w	r3, r3, #1
 8018456:	2b00      	cmp	r3, #0
 8018458:	d033      	beq.n	80184c2 <HAL_I2C_EV_IRQHandler+0x2da>
 801845a:	697b      	ldr	r3, [r7, #20]
 801845c:	0a5b      	lsrs	r3, r3, #9
 801845e:	f003 0301 	and.w	r3, r3, #1
 8018462:	2b00      	cmp	r3, #0
 8018464:	d02d      	beq.n	80184c2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8018466:	6878      	ldr	r0, [r7, #4]
 8018468:	f000 ff07 	bl	801927a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801846c:	e029      	b.n	80184c2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801846e:	69fb      	ldr	r3, [r7, #28]
 8018470:	099b      	lsrs	r3, r3, #6
 8018472:	f003 0301 	and.w	r3, r3, #1
 8018476:	2b00      	cmp	r3, #0
 8018478:	d00f      	beq.n	801849a <HAL_I2C_EV_IRQHandler+0x2b2>
 801847a:	697b      	ldr	r3, [r7, #20]
 801847c:	0a9b      	lsrs	r3, r3, #10
 801847e:	f003 0301 	and.w	r3, r3, #1
 8018482:	2b00      	cmp	r3, #0
 8018484:	d009      	beq.n	801849a <HAL_I2C_EV_IRQHandler+0x2b2>
 8018486:	69fb      	ldr	r3, [r7, #28]
 8018488:	089b      	lsrs	r3, r3, #2
 801848a:	f003 0301 	and.w	r3, r3, #1
 801848e:	2b00      	cmp	r3, #0
 8018490:	d103      	bne.n	801849a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8018492:	6878      	ldr	r0, [r7, #4]
 8018494:	f000 ff12 	bl	80192bc <I2C_SlaveReceive_RXNE>
 8018498:	e014      	b.n	80184c4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801849a:	69fb      	ldr	r3, [r7, #28]
 801849c:	089b      	lsrs	r3, r3, #2
 801849e:	f003 0301 	and.w	r3, r3, #1
 80184a2:	2b00      	cmp	r3, #0
 80184a4:	d00e      	beq.n	80184c4 <HAL_I2C_EV_IRQHandler+0x2dc>
 80184a6:	697b      	ldr	r3, [r7, #20]
 80184a8:	0a5b      	lsrs	r3, r3, #9
 80184aa:	f003 0301 	and.w	r3, r3, #1
 80184ae:	2b00      	cmp	r3, #0
 80184b0:	d008      	beq.n	80184c4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80184b2:	6878      	ldr	r0, [r7, #4]
 80184b4:	f000 ff40 	bl	8019338 <I2C_SlaveReceive_BTF>
 80184b8:	e004      	b.n	80184c4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80184ba:	bf00      	nop
 80184bc:	e002      	b.n	80184c4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80184be:	bf00      	nop
 80184c0:	e000      	b.n	80184c4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80184c2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80184c4:	3720      	adds	r7, #32
 80184c6:	46bd      	mov	sp, r7
 80184c8:	bd80      	pop	{r7, pc}

080184ca <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80184ca:	b580      	push	{r7, lr}
 80184cc:	b08a      	sub	sp, #40	; 0x28
 80184ce:	af00      	add	r7, sp, #0
 80184d0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80184d2:	687b      	ldr	r3, [r7, #4]
 80184d4:	681b      	ldr	r3, [r3, #0]
 80184d6:	695b      	ldr	r3, [r3, #20]
 80184d8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80184da:	687b      	ldr	r3, [r7, #4]
 80184dc:	681b      	ldr	r3, [r3, #0]
 80184de:	685b      	ldr	r3, [r3, #4]
 80184e0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80184e2:	2300      	movs	r3, #0
 80184e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80184e6:	687b      	ldr	r3, [r7, #4]
 80184e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80184ec:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80184ee:	6a3b      	ldr	r3, [r7, #32]
 80184f0:	0a1b      	lsrs	r3, r3, #8
 80184f2:	f003 0301 	and.w	r3, r3, #1
 80184f6:	2b00      	cmp	r3, #0
 80184f8:	d00e      	beq.n	8018518 <HAL_I2C_ER_IRQHandler+0x4e>
 80184fa:	69fb      	ldr	r3, [r7, #28]
 80184fc:	0a1b      	lsrs	r3, r3, #8
 80184fe:	f003 0301 	and.w	r3, r3, #1
 8018502:	2b00      	cmp	r3, #0
 8018504:	d008      	beq.n	8018518 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8018506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018508:	f043 0301 	orr.w	r3, r3, #1
 801850c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801850e:	687b      	ldr	r3, [r7, #4]
 8018510:	681b      	ldr	r3, [r3, #0]
 8018512:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8018516:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8018518:	6a3b      	ldr	r3, [r7, #32]
 801851a:	0a5b      	lsrs	r3, r3, #9
 801851c:	f003 0301 	and.w	r3, r3, #1
 8018520:	2b00      	cmp	r3, #0
 8018522:	d00e      	beq.n	8018542 <HAL_I2C_ER_IRQHandler+0x78>
 8018524:	69fb      	ldr	r3, [r7, #28]
 8018526:	0a1b      	lsrs	r3, r3, #8
 8018528:	f003 0301 	and.w	r3, r3, #1
 801852c:	2b00      	cmp	r3, #0
 801852e:	d008      	beq.n	8018542 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8018530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018532:	f043 0302 	orr.w	r3, r3, #2
 8018536:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	681b      	ldr	r3, [r3, #0]
 801853c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8018540:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8018542:	6a3b      	ldr	r3, [r7, #32]
 8018544:	0a9b      	lsrs	r3, r3, #10
 8018546:	f003 0301 	and.w	r3, r3, #1
 801854a:	2b00      	cmp	r3, #0
 801854c:	d03f      	beq.n	80185ce <HAL_I2C_ER_IRQHandler+0x104>
 801854e:	69fb      	ldr	r3, [r7, #28]
 8018550:	0a1b      	lsrs	r3, r3, #8
 8018552:	f003 0301 	and.w	r3, r3, #1
 8018556:	2b00      	cmp	r3, #0
 8018558:	d039      	beq.n	80185ce <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 801855a:	7efb      	ldrb	r3, [r7, #27]
 801855c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 801855e:	687b      	ldr	r3, [r7, #4]
 8018560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018562:	b29b      	uxth	r3, r3
 8018564:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8018566:	687b      	ldr	r3, [r7, #4]
 8018568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801856c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 801856e:	687b      	ldr	r3, [r7, #4]
 8018570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018572:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8018574:	7ebb      	ldrb	r3, [r7, #26]
 8018576:	2b20      	cmp	r3, #32
 8018578:	d112      	bne.n	80185a0 <HAL_I2C_ER_IRQHandler+0xd6>
 801857a:	697b      	ldr	r3, [r7, #20]
 801857c:	2b00      	cmp	r3, #0
 801857e:	d10f      	bne.n	80185a0 <HAL_I2C_ER_IRQHandler+0xd6>
 8018580:	7cfb      	ldrb	r3, [r7, #19]
 8018582:	2b21      	cmp	r3, #33	; 0x21
 8018584:	d008      	beq.n	8018598 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8018586:	7cfb      	ldrb	r3, [r7, #19]
 8018588:	2b29      	cmp	r3, #41	; 0x29
 801858a:	d005      	beq.n	8018598 <HAL_I2C_ER_IRQHandler+0xce>
 801858c:	7cfb      	ldrb	r3, [r7, #19]
 801858e:	2b28      	cmp	r3, #40	; 0x28
 8018590:	d106      	bne.n	80185a0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8018592:	68fb      	ldr	r3, [r7, #12]
 8018594:	2b21      	cmp	r3, #33	; 0x21
 8018596:	d103      	bne.n	80185a0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8018598:	6878      	ldr	r0, [r7, #4]
 801859a:	f001 f869 	bl	8019670 <I2C_Slave_AF>
 801859e:	e016      	b.n	80185ce <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80185a0:	687b      	ldr	r3, [r7, #4]
 80185a2:	681b      	ldr	r3, [r3, #0]
 80185a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80185a8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80185aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185ac:	f043 0304 	orr.w	r3, r3, #4
 80185b0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80185b2:	7efb      	ldrb	r3, [r7, #27]
 80185b4:	2b10      	cmp	r3, #16
 80185b6:	d002      	beq.n	80185be <HAL_I2C_ER_IRQHandler+0xf4>
 80185b8:	7efb      	ldrb	r3, [r7, #27]
 80185ba:	2b40      	cmp	r3, #64	; 0x40
 80185bc:	d107      	bne.n	80185ce <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80185be:	687b      	ldr	r3, [r7, #4]
 80185c0:	681b      	ldr	r3, [r3, #0]
 80185c2:	681a      	ldr	r2, [r3, #0]
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	681b      	ldr	r3, [r3, #0]
 80185c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80185cc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80185ce:	6a3b      	ldr	r3, [r7, #32]
 80185d0:	0adb      	lsrs	r3, r3, #11
 80185d2:	f003 0301 	and.w	r3, r3, #1
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	d00e      	beq.n	80185f8 <HAL_I2C_ER_IRQHandler+0x12e>
 80185da:	69fb      	ldr	r3, [r7, #28]
 80185dc:	0a1b      	lsrs	r3, r3, #8
 80185de:	f003 0301 	and.w	r3, r3, #1
 80185e2:	2b00      	cmp	r3, #0
 80185e4:	d008      	beq.n	80185f8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80185e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185e8:	f043 0308 	orr.w	r3, r3, #8
 80185ec:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80185ee:	687b      	ldr	r3, [r7, #4]
 80185f0:	681b      	ldr	r3, [r3, #0]
 80185f2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80185f6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80185f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185fa:	2b00      	cmp	r3, #0
 80185fc:	d008      	beq.n	8018610 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80185fe:	687b      	ldr	r3, [r7, #4]
 8018600:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8018602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018604:	431a      	orrs	r2, r3
 8018606:	687b      	ldr	r3, [r7, #4]
 8018608:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 801860a:	6878      	ldr	r0, [r7, #4]
 801860c:	f001 f8a0 	bl	8019750 <I2C_ITError>
  }
}
 8018610:	bf00      	nop
 8018612:	3728      	adds	r7, #40	; 0x28
 8018614:	46bd      	mov	sp, r7
 8018616:	bd80      	pop	{r7, pc}

08018618 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8018618:	b480      	push	{r7}
 801861a:	b083      	sub	sp, #12
 801861c:	af00      	add	r7, sp, #0
 801861e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8018620:	bf00      	nop
 8018622:	370c      	adds	r7, #12
 8018624:	46bd      	mov	sp, r7
 8018626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801862a:	4770      	bx	lr

0801862c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801862c:	b480      	push	{r7}
 801862e:	b083      	sub	sp, #12
 8018630:	af00      	add	r7, sp, #0
 8018632:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8018634:	bf00      	nop
 8018636:	370c      	adds	r7, #12
 8018638:	46bd      	mov	sp, r7
 801863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801863e:	4770      	bx	lr

08018640 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8018640:	b480      	push	{r7}
 8018642:	b083      	sub	sp, #12
 8018644:	af00      	add	r7, sp, #0
 8018646:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8018648:	bf00      	nop
 801864a:	370c      	adds	r7, #12
 801864c:	46bd      	mov	sp, r7
 801864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018652:	4770      	bx	lr

08018654 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8018654:	b480      	push	{r7}
 8018656:	b083      	sub	sp, #12
 8018658:	af00      	add	r7, sp, #0
 801865a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 801865c:	bf00      	nop
 801865e:	370c      	adds	r7, #12
 8018660:	46bd      	mov	sp, r7
 8018662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018666:	4770      	bx	lr

08018668 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8018668:	b480      	push	{r7}
 801866a:	b083      	sub	sp, #12
 801866c:	af00      	add	r7, sp, #0
 801866e:	6078      	str	r0, [r7, #4]
 8018670:	460b      	mov	r3, r1
 8018672:	70fb      	strb	r3, [r7, #3]
 8018674:	4613      	mov	r3, r2
 8018676:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8018678:	bf00      	nop
 801867a:	370c      	adds	r7, #12
 801867c:	46bd      	mov	sp, r7
 801867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018682:	4770      	bx	lr

08018684 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8018684:	b480      	push	{r7}
 8018686:	b083      	sub	sp, #12
 8018688:	af00      	add	r7, sp, #0
 801868a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 801868c:	bf00      	nop
 801868e:	370c      	adds	r7, #12
 8018690:	46bd      	mov	sp, r7
 8018692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018696:	4770      	bx	lr

08018698 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8018698:	b480      	push	{r7}
 801869a:	b083      	sub	sp, #12
 801869c:	af00      	add	r7, sp, #0
 801869e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80186a0:	bf00      	nop
 80186a2:	370c      	adds	r7, #12
 80186a4:	46bd      	mov	sp, r7
 80186a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186aa:	4770      	bx	lr

080186ac <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80186ac:	b480      	push	{r7}
 80186ae:	b083      	sub	sp, #12
 80186b0:	af00      	add	r7, sp, #0
 80186b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80186b4:	bf00      	nop
 80186b6:	370c      	adds	r7, #12
 80186b8:	46bd      	mov	sp, r7
 80186ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186be:	4770      	bx	lr

080186c0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80186c0:	b480      	push	{r7}
 80186c2:	b083      	sub	sp, #12
 80186c4:	af00      	add	r7, sp, #0
 80186c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80186c8:	bf00      	nop
 80186ca:	370c      	adds	r7, #12
 80186cc:	46bd      	mov	sp, r7
 80186ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186d2:	4770      	bx	lr

080186d4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80186d4:	b480      	push	{r7}
 80186d6:	b083      	sub	sp, #12
 80186d8:	af00      	add	r7, sp, #0
 80186da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80186dc:	bf00      	nop
 80186de:	370c      	adds	r7, #12
 80186e0:	46bd      	mov	sp, r7
 80186e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186e6:	4770      	bx	lr

080186e8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80186e8:	b580      	push	{r7, lr}
 80186ea:	b084      	sub	sp, #16
 80186ec:	af00      	add	r7, sp, #0
 80186ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80186f6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80186f8:	687b      	ldr	r3, [r7, #4]
 80186fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80186fe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018704:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8018706:	687b      	ldr	r3, [r7, #4]
 8018708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801870a:	2b00      	cmp	r3, #0
 801870c:	d150      	bne.n	80187b0 <I2C_MasterTransmit_TXE+0xc8>
 801870e:	7bfb      	ldrb	r3, [r7, #15]
 8018710:	2b21      	cmp	r3, #33	; 0x21
 8018712:	d14d      	bne.n	80187b0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8018714:	68bb      	ldr	r3, [r7, #8]
 8018716:	2b08      	cmp	r3, #8
 8018718:	d01d      	beq.n	8018756 <I2C_MasterTransmit_TXE+0x6e>
 801871a:	68bb      	ldr	r3, [r7, #8]
 801871c:	2b20      	cmp	r3, #32
 801871e:	d01a      	beq.n	8018756 <I2C_MasterTransmit_TXE+0x6e>
 8018720:	68bb      	ldr	r3, [r7, #8]
 8018722:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8018726:	d016      	beq.n	8018756 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018728:	687b      	ldr	r3, [r7, #4]
 801872a:	681b      	ldr	r3, [r3, #0]
 801872c:	685a      	ldr	r2, [r3, #4]
 801872e:	687b      	ldr	r3, [r7, #4]
 8018730:	681b      	ldr	r3, [r3, #0]
 8018732:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018736:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8018738:	687b      	ldr	r3, [r7, #4]
 801873a:	2211      	movs	r2, #17
 801873c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801873e:	687b      	ldr	r3, [r7, #4]
 8018740:	2200      	movs	r2, #0
 8018742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8018746:	687b      	ldr	r3, [r7, #4]
 8018748:	2220      	movs	r2, #32
 801874a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 801874e:	6878      	ldr	r0, [r7, #4]
 8018750:	f7ff ff62 	bl	8018618 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8018754:	e060      	b.n	8018818 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018756:	687b      	ldr	r3, [r7, #4]
 8018758:	681b      	ldr	r3, [r3, #0]
 801875a:	685a      	ldr	r2, [r3, #4]
 801875c:	687b      	ldr	r3, [r7, #4]
 801875e:	681b      	ldr	r3, [r3, #0]
 8018760:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018764:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018766:	687b      	ldr	r3, [r7, #4]
 8018768:	681b      	ldr	r3, [r3, #0]
 801876a:	681a      	ldr	r2, [r3, #0]
 801876c:	687b      	ldr	r3, [r7, #4]
 801876e:	681b      	ldr	r3, [r3, #0]
 8018770:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018774:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8018776:	687b      	ldr	r3, [r7, #4]
 8018778:	2200      	movs	r2, #0
 801877a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 801877c:	687b      	ldr	r3, [r7, #4]
 801877e:	2220      	movs	r2, #32
 8018780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8018784:	687b      	ldr	r3, [r7, #4]
 8018786:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801878a:	b2db      	uxtb	r3, r3
 801878c:	2b40      	cmp	r3, #64	; 0x40
 801878e:	d107      	bne.n	80187a0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018790:	687b      	ldr	r3, [r7, #4]
 8018792:	2200      	movs	r2, #0
 8018794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8018798:	6878      	ldr	r0, [r7, #4]
 801879a:	f7ff ff7d 	bl	8018698 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801879e:	e03b      	b.n	8018818 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80187a0:	687b      	ldr	r3, [r7, #4]
 80187a2:	2200      	movs	r2, #0
 80187a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80187a8:	6878      	ldr	r0, [r7, #4]
 80187aa:	f7ff ff35 	bl	8018618 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80187ae:	e033      	b.n	8018818 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80187b0:	7bfb      	ldrb	r3, [r7, #15]
 80187b2:	2b21      	cmp	r3, #33	; 0x21
 80187b4:	d005      	beq.n	80187c2 <I2C_MasterTransmit_TXE+0xda>
 80187b6:	7bbb      	ldrb	r3, [r7, #14]
 80187b8:	2b40      	cmp	r3, #64	; 0x40
 80187ba:	d12d      	bne.n	8018818 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80187bc:	7bfb      	ldrb	r3, [r7, #15]
 80187be:	2b22      	cmp	r3, #34	; 0x22
 80187c0:	d12a      	bne.n	8018818 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80187c6:	b29b      	uxth	r3, r3
 80187c8:	2b00      	cmp	r3, #0
 80187ca:	d108      	bne.n	80187de <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80187cc:	687b      	ldr	r3, [r7, #4]
 80187ce:	681b      	ldr	r3, [r3, #0]
 80187d0:	685a      	ldr	r2, [r3, #4]
 80187d2:	687b      	ldr	r3, [r7, #4]
 80187d4:	681b      	ldr	r3, [r3, #0]
 80187d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80187da:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80187dc:	e01c      	b.n	8018818 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80187de:	687b      	ldr	r3, [r7, #4]
 80187e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80187e4:	b2db      	uxtb	r3, r3
 80187e6:	2b40      	cmp	r3, #64	; 0x40
 80187e8:	d103      	bne.n	80187f2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80187ea:	6878      	ldr	r0, [r7, #4]
 80187ec:	f000 f88e 	bl	801890c <I2C_MemoryTransmit_TXE_BTF>
}
 80187f0:	e012      	b.n	8018818 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80187f2:	687b      	ldr	r3, [r7, #4]
 80187f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187f6:	781a      	ldrb	r2, [r3, #0]
 80187f8:	687b      	ldr	r3, [r7, #4]
 80187fa:	681b      	ldr	r3, [r3, #0]
 80187fc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018802:	1c5a      	adds	r2, r3, #1
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801880c:	b29b      	uxth	r3, r3
 801880e:	3b01      	subs	r3, #1
 8018810:	b29a      	uxth	r2, r3
 8018812:	687b      	ldr	r3, [r7, #4]
 8018814:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8018816:	e7ff      	b.n	8018818 <I2C_MasterTransmit_TXE+0x130>
 8018818:	bf00      	nop
 801881a:	3710      	adds	r7, #16
 801881c:	46bd      	mov	sp, r7
 801881e:	bd80      	pop	{r7, pc}

08018820 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8018820:	b580      	push	{r7, lr}
 8018822:	b084      	sub	sp, #16
 8018824:	af00      	add	r7, sp, #0
 8018826:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8018828:	687b      	ldr	r3, [r7, #4]
 801882a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801882c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801882e:	687b      	ldr	r3, [r7, #4]
 8018830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018834:	b2db      	uxtb	r3, r3
 8018836:	2b21      	cmp	r3, #33	; 0x21
 8018838:	d164      	bne.n	8018904 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 801883a:	687b      	ldr	r3, [r7, #4]
 801883c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801883e:	b29b      	uxth	r3, r3
 8018840:	2b00      	cmp	r3, #0
 8018842:	d012      	beq.n	801886a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8018844:	687b      	ldr	r3, [r7, #4]
 8018846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018848:	781a      	ldrb	r2, [r3, #0]
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	681b      	ldr	r3, [r3, #0]
 801884e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8018850:	687b      	ldr	r3, [r7, #4]
 8018852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018854:	1c5a      	adds	r2, r3, #1
 8018856:	687b      	ldr	r3, [r7, #4]
 8018858:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801885a:	687b      	ldr	r3, [r7, #4]
 801885c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801885e:	b29b      	uxth	r3, r3
 8018860:	3b01      	subs	r3, #1
 8018862:	b29a      	uxth	r2, r3
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8018868:	e04c      	b.n	8018904 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801886a:	68fb      	ldr	r3, [r7, #12]
 801886c:	2b08      	cmp	r3, #8
 801886e:	d01d      	beq.n	80188ac <I2C_MasterTransmit_BTF+0x8c>
 8018870:	68fb      	ldr	r3, [r7, #12]
 8018872:	2b20      	cmp	r3, #32
 8018874:	d01a      	beq.n	80188ac <I2C_MasterTransmit_BTF+0x8c>
 8018876:	68fb      	ldr	r3, [r7, #12]
 8018878:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801887c:	d016      	beq.n	80188ac <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801887e:	687b      	ldr	r3, [r7, #4]
 8018880:	681b      	ldr	r3, [r3, #0]
 8018882:	685a      	ldr	r2, [r3, #4]
 8018884:	687b      	ldr	r3, [r7, #4]
 8018886:	681b      	ldr	r3, [r3, #0]
 8018888:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801888c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 801888e:	687b      	ldr	r3, [r7, #4]
 8018890:	2211      	movs	r2, #17
 8018892:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	2200      	movs	r2, #0
 8018898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 801889c:	687b      	ldr	r3, [r7, #4]
 801889e:	2220      	movs	r2, #32
 80188a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80188a4:	6878      	ldr	r0, [r7, #4]
 80188a6:	f7ff feb7 	bl	8018618 <HAL_I2C_MasterTxCpltCallback>
}
 80188aa:	e02b      	b.n	8018904 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80188ac:	687b      	ldr	r3, [r7, #4]
 80188ae:	681b      	ldr	r3, [r3, #0]
 80188b0:	685a      	ldr	r2, [r3, #4]
 80188b2:	687b      	ldr	r3, [r7, #4]
 80188b4:	681b      	ldr	r3, [r3, #0]
 80188b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80188ba:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	681b      	ldr	r3, [r3, #0]
 80188c0:	681a      	ldr	r2, [r3, #0]
 80188c2:	687b      	ldr	r3, [r7, #4]
 80188c4:	681b      	ldr	r3, [r3, #0]
 80188c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80188ca:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80188cc:	687b      	ldr	r3, [r7, #4]
 80188ce:	2200      	movs	r2, #0
 80188d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	2220      	movs	r2, #32
 80188d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80188da:	687b      	ldr	r3, [r7, #4]
 80188dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80188e0:	b2db      	uxtb	r3, r3
 80188e2:	2b40      	cmp	r3, #64	; 0x40
 80188e4:	d107      	bne.n	80188f6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80188e6:	687b      	ldr	r3, [r7, #4]
 80188e8:	2200      	movs	r2, #0
 80188ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80188ee:	6878      	ldr	r0, [r7, #4]
 80188f0:	f7ff fed2 	bl	8018698 <HAL_I2C_MemTxCpltCallback>
}
 80188f4:	e006      	b.n	8018904 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80188f6:	687b      	ldr	r3, [r7, #4]
 80188f8:	2200      	movs	r2, #0
 80188fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80188fe:	6878      	ldr	r0, [r7, #4]
 8018900:	f7ff fe8a 	bl	8018618 <HAL_I2C_MasterTxCpltCallback>
}
 8018904:	bf00      	nop
 8018906:	3710      	adds	r7, #16
 8018908:	46bd      	mov	sp, r7
 801890a:	bd80      	pop	{r7, pc}

0801890c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 801890c:	b580      	push	{r7, lr}
 801890e:	b084      	sub	sp, #16
 8018910:	af00      	add	r7, sp, #0
 8018912:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801891a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018920:	2b00      	cmp	r3, #0
 8018922:	d11d      	bne.n	8018960 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8018924:	687b      	ldr	r3, [r7, #4]
 8018926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018928:	2b01      	cmp	r3, #1
 801892a:	d10b      	bne.n	8018944 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018930:	b2da      	uxtb	r2, r3
 8018932:	687b      	ldr	r3, [r7, #4]
 8018934:	681b      	ldr	r3, [r3, #0]
 8018936:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801893c:	1c9a      	adds	r2, r3, #2
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8018942:	e073      	b.n	8018a2c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018948:	b29b      	uxth	r3, r3
 801894a:	121b      	asrs	r3, r3, #8
 801894c:	b2da      	uxtb	r2, r3
 801894e:	687b      	ldr	r3, [r7, #4]
 8018950:	681b      	ldr	r3, [r3, #0]
 8018952:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8018954:	687b      	ldr	r3, [r7, #4]
 8018956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018958:	1c5a      	adds	r2, r3, #1
 801895a:	687b      	ldr	r3, [r7, #4]
 801895c:	651a      	str	r2, [r3, #80]	; 0x50
}
 801895e:	e065      	b.n	8018a2c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8018960:	687b      	ldr	r3, [r7, #4]
 8018962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018964:	2b01      	cmp	r3, #1
 8018966:	d10b      	bne.n	8018980 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801896c:	b2da      	uxtb	r2, r3
 801896e:	687b      	ldr	r3, [r7, #4]
 8018970:	681b      	ldr	r3, [r3, #0]
 8018972:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018978:	1c5a      	adds	r2, r3, #1
 801897a:	687b      	ldr	r3, [r7, #4]
 801897c:	651a      	str	r2, [r3, #80]	; 0x50
}
 801897e:	e055      	b.n	8018a2c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8018980:	687b      	ldr	r3, [r7, #4]
 8018982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018984:	2b02      	cmp	r3, #2
 8018986:	d151      	bne.n	8018a2c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8018988:	7bfb      	ldrb	r3, [r7, #15]
 801898a:	2b22      	cmp	r3, #34	; 0x22
 801898c:	d10d      	bne.n	80189aa <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 801898e:	687b      	ldr	r3, [r7, #4]
 8018990:	681b      	ldr	r3, [r3, #0]
 8018992:	681a      	ldr	r2, [r3, #0]
 8018994:	687b      	ldr	r3, [r7, #4]
 8018996:	681b      	ldr	r3, [r3, #0]
 8018998:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801899c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 801899e:	687b      	ldr	r3, [r7, #4]
 80189a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80189a2:	1c5a      	adds	r2, r3, #1
 80189a4:	687b      	ldr	r3, [r7, #4]
 80189a6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80189a8:	e040      	b.n	8018a2c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80189aa:	687b      	ldr	r3, [r7, #4]
 80189ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80189ae:	b29b      	uxth	r3, r3
 80189b0:	2b00      	cmp	r3, #0
 80189b2:	d015      	beq.n	80189e0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80189b4:	7bfb      	ldrb	r3, [r7, #15]
 80189b6:	2b21      	cmp	r3, #33	; 0x21
 80189b8:	d112      	bne.n	80189e0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80189ba:	687b      	ldr	r3, [r7, #4]
 80189bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189be:	781a      	ldrb	r2, [r3, #0]
 80189c0:	687b      	ldr	r3, [r7, #4]
 80189c2:	681b      	ldr	r3, [r3, #0]
 80189c4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80189c6:	687b      	ldr	r3, [r7, #4]
 80189c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189ca:	1c5a      	adds	r2, r3, #1
 80189cc:	687b      	ldr	r3, [r7, #4]
 80189ce:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80189d0:	687b      	ldr	r3, [r7, #4]
 80189d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80189d4:	b29b      	uxth	r3, r3
 80189d6:	3b01      	subs	r3, #1
 80189d8:	b29a      	uxth	r2, r3
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80189de:	e025      	b.n	8018a2c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80189e0:	687b      	ldr	r3, [r7, #4]
 80189e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80189e4:	b29b      	uxth	r3, r3
 80189e6:	2b00      	cmp	r3, #0
 80189e8:	d120      	bne.n	8018a2c <I2C_MemoryTransmit_TXE_BTF+0x120>
 80189ea:	7bfb      	ldrb	r3, [r7, #15]
 80189ec:	2b21      	cmp	r3, #33	; 0x21
 80189ee:	d11d      	bne.n	8018a2c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	681b      	ldr	r3, [r3, #0]
 80189f4:	685a      	ldr	r2, [r3, #4]
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	681b      	ldr	r3, [r3, #0]
 80189fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80189fe:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	681b      	ldr	r3, [r3, #0]
 8018a04:	681a      	ldr	r2, [r3, #0]
 8018a06:	687b      	ldr	r3, [r7, #4]
 8018a08:	681b      	ldr	r3, [r3, #0]
 8018a0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018a0e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8018a10:	687b      	ldr	r3, [r7, #4]
 8018a12:	2200      	movs	r2, #0
 8018a14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8018a16:	687b      	ldr	r3, [r7, #4]
 8018a18:	2220      	movs	r2, #32
 8018a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8018a1e:	687b      	ldr	r3, [r7, #4]
 8018a20:	2200      	movs	r2, #0
 8018a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8018a26:	6878      	ldr	r0, [r7, #4]
 8018a28:	f7ff fe36 	bl	8018698 <HAL_I2C_MemTxCpltCallback>
}
 8018a2c:	bf00      	nop
 8018a2e:	3710      	adds	r7, #16
 8018a30:	46bd      	mov	sp, r7
 8018a32:	bd80      	pop	{r7, pc}

08018a34 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8018a34:	b580      	push	{r7, lr}
 8018a36:	b084      	sub	sp, #16
 8018a38:	af00      	add	r7, sp, #0
 8018a3a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8018a3c:	687b      	ldr	r3, [r7, #4]
 8018a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018a42:	b2db      	uxtb	r3, r3
 8018a44:	2b22      	cmp	r3, #34	; 0x22
 8018a46:	f040 80ac 	bne.w	8018ba2 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8018a4a:	687b      	ldr	r3, [r7, #4]
 8018a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018a4e:	b29b      	uxth	r3, r3
 8018a50:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8018a52:	68fb      	ldr	r3, [r7, #12]
 8018a54:	2b03      	cmp	r3, #3
 8018a56:	d921      	bls.n	8018a9c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018a58:	687b      	ldr	r3, [r7, #4]
 8018a5a:	681b      	ldr	r3, [r3, #0]
 8018a5c:	691a      	ldr	r2, [r3, #16]
 8018a5e:	687b      	ldr	r3, [r7, #4]
 8018a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a62:	b2d2      	uxtb	r2, r2
 8018a64:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8018a66:	687b      	ldr	r3, [r7, #4]
 8018a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a6a:	1c5a      	adds	r2, r3, #1
 8018a6c:	687b      	ldr	r3, [r7, #4]
 8018a6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8018a70:	687b      	ldr	r3, [r7, #4]
 8018a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018a74:	b29b      	uxth	r3, r3
 8018a76:	3b01      	subs	r3, #1
 8018a78:	b29a      	uxth	r2, r3
 8018a7a:	687b      	ldr	r3, [r7, #4]
 8018a7c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8018a7e:	687b      	ldr	r3, [r7, #4]
 8018a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018a82:	b29b      	uxth	r3, r3
 8018a84:	2b03      	cmp	r3, #3
 8018a86:	f040 808c 	bne.w	8018ba2 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8018a8a:	687b      	ldr	r3, [r7, #4]
 8018a8c:	681b      	ldr	r3, [r3, #0]
 8018a8e:	685a      	ldr	r2, [r3, #4]
 8018a90:	687b      	ldr	r3, [r7, #4]
 8018a92:	681b      	ldr	r3, [r3, #0]
 8018a94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018a98:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8018a9a:	e082      	b.n	8018ba2 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018aa0:	2b02      	cmp	r3, #2
 8018aa2:	d075      	beq.n	8018b90 <I2C_MasterReceive_RXNE+0x15c>
 8018aa4:	68fb      	ldr	r3, [r7, #12]
 8018aa6:	2b01      	cmp	r3, #1
 8018aa8:	d002      	beq.n	8018ab0 <I2C_MasterReceive_RXNE+0x7c>
 8018aaa:	68fb      	ldr	r3, [r7, #12]
 8018aac:	2b00      	cmp	r3, #0
 8018aae:	d16f      	bne.n	8018b90 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8018ab0:	6878      	ldr	r0, [r7, #4]
 8018ab2:	f001 fafd 	bl	801a0b0 <I2C_WaitOnSTOPRequestThroughIT>
 8018ab6:	4603      	mov	r3, r0
 8018ab8:	2b00      	cmp	r3, #0
 8018aba:	d142      	bne.n	8018b42 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018abc:	687b      	ldr	r3, [r7, #4]
 8018abe:	681b      	ldr	r3, [r3, #0]
 8018ac0:	681a      	ldr	r2, [r3, #0]
 8018ac2:	687b      	ldr	r3, [r7, #4]
 8018ac4:	681b      	ldr	r3, [r3, #0]
 8018ac6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018aca:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018acc:	687b      	ldr	r3, [r7, #4]
 8018ace:	681b      	ldr	r3, [r3, #0]
 8018ad0:	685a      	ldr	r2, [r3, #4]
 8018ad2:	687b      	ldr	r3, [r7, #4]
 8018ad4:	681b      	ldr	r3, [r3, #0]
 8018ad6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018ada:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018adc:	687b      	ldr	r3, [r7, #4]
 8018ade:	681b      	ldr	r3, [r3, #0]
 8018ae0:	691a      	ldr	r2, [r3, #16]
 8018ae2:	687b      	ldr	r3, [r7, #4]
 8018ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ae6:	b2d2      	uxtb	r2, r2
 8018ae8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8018aea:	687b      	ldr	r3, [r7, #4]
 8018aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018aee:	1c5a      	adds	r2, r3, #1
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8018af4:	687b      	ldr	r3, [r7, #4]
 8018af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018af8:	b29b      	uxth	r3, r3
 8018afa:	3b01      	subs	r3, #1
 8018afc:	b29a      	uxth	r2, r3
 8018afe:	687b      	ldr	r3, [r7, #4]
 8018b00:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8018b02:	687b      	ldr	r3, [r7, #4]
 8018b04:	2220      	movs	r2, #32
 8018b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8018b0a:	687b      	ldr	r3, [r7, #4]
 8018b0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018b10:	b2db      	uxtb	r3, r3
 8018b12:	2b40      	cmp	r3, #64	; 0x40
 8018b14:	d10a      	bne.n	8018b2c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8018b16:	687b      	ldr	r3, [r7, #4]
 8018b18:	2200      	movs	r2, #0
 8018b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8018b1e:	687b      	ldr	r3, [r7, #4]
 8018b20:	2200      	movs	r2, #0
 8018b22:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8018b24:	6878      	ldr	r0, [r7, #4]
 8018b26:	f7ff fdc1 	bl	80186ac <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8018b2a:	e03a      	b.n	8018ba2 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8018b2c:	687b      	ldr	r3, [r7, #4]
 8018b2e:	2200      	movs	r2, #0
 8018b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8018b34:	687b      	ldr	r3, [r7, #4]
 8018b36:	2212      	movs	r2, #18
 8018b38:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8018b3a:	6878      	ldr	r0, [r7, #4]
 8018b3c:	f7ff fd76 	bl	801862c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8018b40:	e02f      	b.n	8018ba2 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018b42:	687b      	ldr	r3, [r7, #4]
 8018b44:	681b      	ldr	r3, [r3, #0]
 8018b46:	685a      	ldr	r2, [r3, #4]
 8018b48:	687b      	ldr	r3, [r7, #4]
 8018b4a:	681b      	ldr	r3, [r3, #0]
 8018b4c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018b50:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018b52:	687b      	ldr	r3, [r7, #4]
 8018b54:	681b      	ldr	r3, [r3, #0]
 8018b56:	691a      	ldr	r2, [r3, #16]
 8018b58:	687b      	ldr	r3, [r7, #4]
 8018b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b5c:	b2d2      	uxtb	r2, r2
 8018b5e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8018b60:	687b      	ldr	r3, [r7, #4]
 8018b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b64:	1c5a      	adds	r2, r3, #1
 8018b66:	687b      	ldr	r3, [r7, #4]
 8018b68:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8018b6a:	687b      	ldr	r3, [r7, #4]
 8018b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018b6e:	b29b      	uxth	r3, r3
 8018b70:	3b01      	subs	r3, #1
 8018b72:	b29a      	uxth	r2, r3
 8018b74:	687b      	ldr	r3, [r7, #4]
 8018b76:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8018b78:	687b      	ldr	r3, [r7, #4]
 8018b7a:	2220      	movs	r2, #32
 8018b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	2200      	movs	r2, #0
 8018b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8018b88:	6878      	ldr	r0, [r7, #4]
 8018b8a:	f7ff fd99 	bl	80186c0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8018b8e:	e008      	b.n	8018ba2 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	681b      	ldr	r3, [r3, #0]
 8018b94:	685a      	ldr	r2, [r3, #4]
 8018b96:	687b      	ldr	r3, [r7, #4]
 8018b98:	681b      	ldr	r3, [r3, #0]
 8018b9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018b9e:	605a      	str	r2, [r3, #4]
}
 8018ba0:	e7ff      	b.n	8018ba2 <I2C_MasterReceive_RXNE+0x16e>
 8018ba2:	bf00      	nop
 8018ba4:	3710      	adds	r7, #16
 8018ba6:	46bd      	mov	sp, r7
 8018ba8:	bd80      	pop	{r7, pc}

08018baa <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8018baa:	b580      	push	{r7, lr}
 8018bac:	b084      	sub	sp, #16
 8018bae:	af00      	add	r7, sp, #0
 8018bb0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018bb6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018bbc:	b29b      	uxth	r3, r3
 8018bbe:	2b04      	cmp	r3, #4
 8018bc0:	d11b      	bne.n	8018bfa <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8018bc2:	687b      	ldr	r3, [r7, #4]
 8018bc4:	681b      	ldr	r3, [r3, #0]
 8018bc6:	685a      	ldr	r2, [r3, #4]
 8018bc8:	687b      	ldr	r3, [r7, #4]
 8018bca:	681b      	ldr	r3, [r3, #0]
 8018bcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018bd0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018bd2:	687b      	ldr	r3, [r7, #4]
 8018bd4:	681b      	ldr	r3, [r3, #0]
 8018bd6:	691a      	ldr	r2, [r3, #16]
 8018bd8:	687b      	ldr	r3, [r7, #4]
 8018bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018bdc:	b2d2      	uxtb	r2, r2
 8018bde:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8018be0:	687b      	ldr	r3, [r7, #4]
 8018be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018be4:	1c5a      	adds	r2, r3, #1
 8018be6:	687b      	ldr	r3, [r7, #4]
 8018be8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8018bea:	687b      	ldr	r3, [r7, #4]
 8018bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018bee:	b29b      	uxth	r3, r3
 8018bf0:	3b01      	subs	r3, #1
 8018bf2:	b29a      	uxth	r2, r3
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8018bf8:	e0bd      	b.n	8018d76 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8018bfa:	687b      	ldr	r3, [r7, #4]
 8018bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018bfe:	b29b      	uxth	r3, r3
 8018c00:	2b03      	cmp	r3, #3
 8018c02:	d129      	bne.n	8018c58 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8018c04:	687b      	ldr	r3, [r7, #4]
 8018c06:	681b      	ldr	r3, [r3, #0]
 8018c08:	685a      	ldr	r2, [r3, #4]
 8018c0a:	687b      	ldr	r3, [r7, #4]
 8018c0c:	681b      	ldr	r3, [r3, #0]
 8018c0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018c12:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8018c14:	68fb      	ldr	r3, [r7, #12]
 8018c16:	2b04      	cmp	r3, #4
 8018c18:	d00a      	beq.n	8018c30 <I2C_MasterReceive_BTF+0x86>
 8018c1a:	68fb      	ldr	r3, [r7, #12]
 8018c1c:	2b02      	cmp	r3, #2
 8018c1e:	d007      	beq.n	8018c30 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	681b      	ldr	r3, [r3, #0]
 8018c24:	681a      	ldr	r2, [r3, #0]
 8018c26:	687b      	ldr	r3, [r7, #4]
 8018c28:	681b      	ldr	r3, [r3, #0]
 8018c2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018c2e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018c30:	687b      	ldr	r3, [r7, #4]
 8018c32:	681b      	ldr	r3, [r3, #0]
 8018c34:	691a      	ldr	r2, [r3, #16]
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c3a:	b2d2      	uxtb	r2, r2
 8018c3c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c42:	1c5a      	adds	r2, r3, #1
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018c4c:	b29b      	uxth	r3, r3
 8018c4e:	3b01      	subs	r3, #1
 8018c50:	b29a      	uxth	r2, r3
 8018c52:	687b      	ldr	r3, [r7, #4]
 8018c54:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8018c56:	e08e      	b.n	8018d76 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8018c58:	687b      	ldr	r3, [r7, #4]
 8018c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018c5c:	b29b      	uxth	r3, r3
 8018c5e:	2b02      	cmp	r3, #2
 8018c60:	d176      	bne.n	8018d50 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8018c62:	68fb      	ldr	r3, [r7, #12]
 8018c64:	2b01      	cmp	r3, #1
 8018c66:	d002      	beq.n	8018c6e <I2C_MasterReceive_BTF+0xc4>
 8018c68:	68fb      	ldr	r3, [r7, #12]
 8018c6a:	2b10      	cmp	r3, #16
 8018c6c:	d108      	bne.n	8018c80 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018c6e:	687b      	ldr	r3, [r7, #4]
 8018c70:	681b      	ldr	r3, [r3, #0]
 8018c72:	681a      	ldr	r2, [r3, #0]
 8018c74:	687b      	ldr	r3, [r7, #4]
 8018c76:	681b      	ldr	r3, [r3, #0]
 8018c78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018c7c:	601a      	str	r2, [r3, #0]
 8018c7e:	e019      	b.n	8018cb4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8018c80:	68fb      	ldr	r3, [r7, #12]
 8018c82:	2b04      	cmp	r3, #4
 8018c84:	d002      	beq.n	8018c8c <I2C_MasterReceive_BTF+0xe2>
 8018c86:	68fb      	ldr	r3, [r7, #12]
 8018c88:	2b02      	cmp	r3, #2
 8018c8a:	d108      	bne.n	8018c9e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018c8c:	687b      	ldr	r3, [r7, #4]
 8018c8e:	681b      	ldr	r3, [r3, #0]
 8018c90:	681a      	ldr	r2, [r3, #0]
 8018c92:	687b      	ldr	r3, [r7, #4]
 8018c94:	681b      	ldr	r3, [r3, #0]
 8018c96:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018c9a:	601a      	str	r2, [r3, #0]
 8018c9c:	e00a      	b.n	8018cb4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8018c9e:	68fb      	ldr	r3, [r7, #12]
 8018ca0:	2b10      	cmp	r3, #16
 8018ca2:	d007      	beq.n	8018cb4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018ca4:	687b      	ldr	r3, [r7, #4]
 8018ca6:	681b      	ldr	r3, [r3, #0]
 8018ca8:	681a      	ldr	r2, [r3, #0]
 8018caa:	687b      	ldr	r3, [r7, #4]
 8018cac:	681b      	ldr	r3, [r3, #0]
 8018cae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018cb2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018cb4:	687b      	ldr	r3, [r7, #4]
 8018cb6:	681b      	ldr	r3, [r3, #0]
 8018cb8:	691a      	ldr	r2, [r3, #16]
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cbe:	b2d2      	uxtb	r2, r2
 8018cc0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8018cc2:	687b      	ldr	r3, [r7, #4]
 8018cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cc6:	1c5a      	adds	r2, r3, #1
 8018cc8:	687b      	ldr	r3, [r7, #4]
 8018cca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018cd0:	b29b      	uxth	r3, r3
 8018cd2:	3b01      	subs	r3, #1
 8018cd4:	b29a      	uxth	r2, r3
 8018cd6:	687b      	ldr	r3, [r7, #4]
 8018cd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	681b      	ldr	r3, [r3, #0]
 8018cde:	691a      	ldr	r2, [r3, #16]
 8018ce0:	687b      	ldr	r3, [r7, #4]
 8018ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ce4:	b2d2      	uxtb	r2, r2
 8018ce6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8018ce8:	687b      	ldr	r3, [r7, #4]
 8018cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cec:	1c5a      	adds	r2, r3, #1
 8018cee:	687b      	ldr	r3, [r7, #4]
 8018cf0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8018cf2:	687b      	ldr	r3, [r7, #4]
 8018cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018cf6:	b29b      	uxth	r3, r3
 8018cf8:	3b01      	subs	r3, #1
 8018cfa:	b29a      	uxth	r2, r3
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8018d00:	687b      	ldr	r3, [r7, #4]
 8018d02:	681b      	ldr	r3, [r3, #0]
 8018d04:	685a      	ldr	r2, [r3, #4]
 8018d06:	687b      	ldr	r3, [r7, #4]
 8018d08:	681b      	ldr	r3, [r3, #0]
 8018d0a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8018d0e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	2220      	movs	r2, #32
 8018d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8018d18:	687b      	ldr	r3, [r7, #4]
 8018d1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018d1e:	b2db      	uxtb	r3, r3
 8018d20:	2b40      	cmp	r3, #64	; 0x40
 8018d22:	d10a      	bne.n	8018d3a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8018d24:	687b      	ldr	r3, [r7, #4]
 8018d26:	2200      	movs	r2, #0
 8018d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8018d2c:	687b      	ldr	r3, [r7, #4]
 8018d2e:	2200      	movs	r2, #0
 8018d30:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8018d32:	6878      	ldr	r0, [r7, #4]
 8018d34:	f7ff fcba 	bl	80186ac <HAL_I2C_MemRxCpltCallback>
}
 8018d38:	e01d      	b.n	8018d76 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8018d3a:	687b      	ldr	r3, [r7, #4]
 8018d3c:	2200      	movs	r2, #0
 8018d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8018d42:	687b      	ldr	r3, [r7, #4]
 8018d44:	2212      	movs	r2, #18
 8018d46:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8018d48:	6878      	ldr	r0, [r7, #4]
 8018d4a:	f7ff fc6f 	bl	801862c <HAL_I2C_MasterRxCpltCallback>
}
 8018d4e:	e012      	b.n	8018d76 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	681b      	ldr	r3, [r3, #0]
 8018d54:	691a      	ldr	r2, [r3, #16]
 8018d56:	687b      	ldr	r3, [r7, #4]
 8018d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d5a:	b2d2      	uxtb	r2, r2
 8018d5c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8018d5e:	687b      	ldr	r3, [r7, #4]
 8018d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d62:	1c5a      	adds	r2, r3, #1
 8018d64:	687b      	ldr	r3, [r7, #4]
 8018d66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018d6c:	b29b      	uxth	r3, r3
 8018d6e:	3b01      	subs	r3, #1
 8018d70:	b29a      	uxth	r2, r3
 8018d72:	687b      	ldr	r3, [r7, #4]
 8018d74:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8018d76:	bf00      	nop
 8018d78:	3710      	adds	r7, #16
 8018d7a:	46bd      	mov	sp, r7
 8018d7c:	bd80      	pop	{r7, pc}

08018d7e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8018d7e:	b480      	push	{r7}
 8018d80:	b083      	sub	sp, #12
 8018d82:	af00      	add	r7, sp, #0
 8018d84:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018d8c:	b2db      	uxtb	r3, r3
 8018d8e:	2b40      	cmp	r3, #64	; 0x40
 8018d90:	d117      	bne.n	8018dc2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8018d92:	687b      	ldr	r3, [r7, #4]
 8018d94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018d96:	2b00      	cmp	r3, #0
 8018d98:	d109      	bne.n	8018dae <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8018d9a:	687b      	ldr	r3, [r7, #4]
 8018d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018d9e:	b2db      	uxtb	r3, r3
 8018da0:	461a      	mov	r2, r3
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	681b      	ldr	r3, [r3, #0]
 8018da6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8018daa:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8018dac:	e067      	b.n	8018e7e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018db2:	b2db      	uxtb	r3, r3
 8018db4:	f043 0301 	orr.w	r3, r3, #1
 8018db8:	b2da      	uxtb	r2, r3
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	681b      	ldr	r3, [r3, #0]
 8018dbe:	611a      	str	r2, [r3, #16]
}
 8018dc0:	e05d      	b.n	8018e7e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8018dc2:	687b      	ldr	r3, [r7, #4]
 8018dc4:	691b      	ldr	r3, [r3, #16]
 8018dc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8018dca:	d133      	bne.n	8018e34 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018dd2:	b2db      	uxtb	r3, r3
 8018dd4:	2b21      	cmp	r3, #33	; 0x21
 8018dd6:	d109      	bne.n	8018dec <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018ddc:	b2db      	uxtb	r3, r3
 8018dde:	461a      	mov	r2, r3
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	681b      	ldr	r3, [r3, #0]
 8018de4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8018de8:	611a      	str	r2, [r3, #16]
 8018dea:	e008      	b.n	8018dfe <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8018dec:	687b      	ldr	r3, [r7, #4]
 8018dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018df0:	b2db      	uxtb	r3, r3
 8018df2:	f043 0301 	orr.w	r3, r3, #1
 8018df6:	b2da      	uxtb	r2, r3
 8018df8:	687b      	ldr	r3, [r7, #4]
 8018dfa:	681b      	ldr	r3, [r3, #0]
 8018dfc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018e02:	2b00      	cmp	r3, #0
 8018e04:	d004      	beq.n	8018e10 <I2C_Master_SB+0x92>
 8018e06:	687b      	ldr	r3, [r7, #4]
 8018e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018e0c:	2b00      	cmp	r3, #0
 8018e0e:	d108      	bne.n	8018e22 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8018e10:	687b      	ldr	r3, [r7, #4]
 8018e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018e14:	2b00      	cmp	r3, #0
 8018e16:	d032      	beq.n	8018e7e <I2C_Master_SB+0x100>
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018e1e:	2b00      	cmp	r3, #0
 8018e20:	d02d      	beq.n	8018e7e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	681b      	ldr	r3, [r3, #0]
 8018e26:	685a      	ldr	r2, [r3, #4]
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	681b      	ldr	r3, [r3, #0]
 8018e2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8018e30:	605a      	str	r2, [r3, #4]
}
 8018e32:	e024      	b.n	8018e7e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018e38:	2b00      	cmp	r3, #0
 8018e3a:	d10e      	bne.n	8018e5a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8018e3c:	687b      	ldr	r3, [r7, #4]
 8018e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018e40:	b29b      	uxth	r3, r3
 8018e42:	11db      	asrs	r3, r3, #7
 8018e44:	b2db      	uxtb	r3, r3
 8018e46:	f003 0306 	and.w	r3, r3, #6
 8018e4a:	b2db      	uxtb	r3, r3
 8018e4c:	f063 030f 	orn	r3, r3, #15
 8018e50:	b2da      	uxtb	r2, r3
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	681b      	ldr	r3, [r3, #0]
 8018e56:	611a      	str	r2, [r3, #16]
}
 8018e58:	e011      	b.n	8018e7e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018e5e:	2b01      	cmp	r3, #1
 8018e60:	d10d      	bne.n	8018e7e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018e66:	b29b      	uxth	r3, r3
 8018e68:	11db      	asrs	r3, r3, #7
 8018e6a:	b2db      	uxtb	r3, r3
 8018e6c:	f003 0306 	and.w	r3, r3, #6
 8018e70:	b2db      	uxtb	r3, r3
 8018e72:	f063 030e 	orn	r3, r3, #14
 8018e76:	b2da      	uxtb	r2, r3
 8018e78:	687b      	ldr	r3, [r7, #4]
 8018e7a:	681b      	ldr	r3, [r3, #0]
 8018e7c:	611a      	str	r2, [r3, #16]
}
 8018e7e:	bf00      	nop
 8018e80:	370c      	adds	r7, #12
 8018e82:	46bd      	mov	sp, r7
 8018e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e88:	4770      	bx	lr

08018e8a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8018e8a:	b480      	push	{r7}
 8018e8c:	b083      	sub	sp, #12
 8018e8e:	af00      	add	r7, sp, #0
 8018e90:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8018e92:	687b      	ldr	r3, [r7, #4]
 8018e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018e96:	b2da      	uxtb	r2, r3
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	681b      	ldr	r3, [r3, #0]
 8018e9c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8018e9e:	687b      	ldr	r3, [r7, #4]
 8018ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018ea2:	2b00      	cmp	r3, #0
 8018ea4:	d004      	beq.n	8018eb0 <I2C_Master_ADD10+0x26>
 8018ea6:	687b      	ldr	r3, [r7, #4]
 8018ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018eac:	2b00      	cmp	r3, #0
 8018eae:	d108      	bne.n	8018ec2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8018eb0:	687b      	ldr	r3, [r7, #4]
 8018eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018eb4:	2b00      	cmp	r3, #0
 8018eb6:	d00c      	beq.n	8018ed2 <I2C_Master_ADD10+0x48>
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018ebe:	2b00      	cmp	r3, #0
 8018ec0:	d007      	beq.n	8018ed2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8018ec2:	687b      	ldr	r3, [r7, #4]
 8018ec4:	681b      	ldr	r3, [r3, #0]
 8018ec6:	685a      	ldr	r2, [r3, #4]
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	681b      	ldr	r3, [r3, #0]
 8018ecc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8018ed0:	605a      	str	r2, [r3, #4]
  }
}
 8018ed2:	bf00      	nop
 8018ed4:	370c      	adds	r7, #12
 8018ed6:	46bd      	mov	sp, r7
 8018ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018edc:	4770      	bx	lr

08018ede <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8018ede:	b480      	push	{r7}
 8018ee0:	b091      	sub	sp, #68	; 0x44
 8018ee2:	af00      	add	r7, sp, #0
 8018ee4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8018ee6:	687b      	ldr	r3, [r7, #4]
 8018ee8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018eec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8018ef0:	687b      	ldr	r3, [r7, #4]
 8018ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ef4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8018ef6:	687b      	ldr	r3, [r7, #4]
 8018ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018efa:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8018efc:	687b      	ldr	r3, [r7, #4]
 8018efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018f02:	b2db      	uxtb	r3, r3
 8018f04:	2b22      	cmp	r3, #34	; 0x22
 8018f06:	f040 8169 	bne.w	80191dc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8018f0a:	687b      	ldr	r3, [r7, #4]
 8018f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018f0e:	2b00      	cmp	r3, #0
 8018f10:	d10f      	bne.n	8018f32 <I2C_Master_ADDR+0x54>
 8018f12:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8018f16:	2b40      	cmp	r3, #64	; 0x40
 8018f18:	d10b      	bne.n	8018f32 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018f1a:	2300      	movs	r3, #0
 8018f1c:	633b      	str	r3, [r7, #48]	; 0x30
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	681b      	ldr	r3, [r3, #0]
 8018f22:	695b      	ldr	r3, [r3, #20]
 8018f24:	633b      	str	r3, [r7, #48]	; 0x30
 8018f26:	687b      	ldr	r3, [r7, #4]
 8018f28:	681b      	ldr	r3, [r3, #0]
 8018f2a:	699b      	ldr	r3, [r3, #24]
 8018f2c:	633b      	str	r3, [r7, #48]	; 0x30
 8018f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f30:	e160      	b.n	80191f4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8018f32:	687b      	ldr	r3, [r7, #4]
 8018f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018f36:	2b00      	cmp	r3, #0
 8018f38:	d11d      	bne.n	8018f76 <I2C_Master_ADDR+0x98>
 8018f3a:	687b      	ldr	r3, [r7, #4]
 8018f3c:	691b      	ldr	r3, [r3, #16]
 8018f3e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8018f42:	d118      	bne.n	8018f76 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018f44:	2300      	movs	r3, #0
 8018f46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018f48:	687b      	ldr	r3, [r7, #4]
 8018f4a:	681b      	ldr	r3, [r3, #0]
 8018f4c:	695b      	ldr	r3, [r3, #20]
 8018f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	681b      	ldr	r3, [r3, #0]
 8018f54:	699b      	ldr	r3, [r3, #24]
 8018f56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	681b      	ldr	r3, [r3, #0]
 8018f5e:	681a      	ldr	r2, [r3, #0]
 8018f60:	687b      	ldr	r3, [r7, #4]
 8018f62:	681b      	ldr	r3, [r3, #0]
 8018f64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8018f68:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8018f6a:	687b      	ldr	r3, [r7, #4]
 8018f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018f6e:	1c5a      	adds	r2, r3, #1
 8018f70:	687b      	ldr	r3, [r7, #4]
 8018f72:	651a      	str	r2, [r3, #80]	; 0x50
 8018f74:	e13e      	b.n	80191f4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8018f76:	687b      	ldr	r3, [r7, #4]
 8018f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018f7a:	b29b      	uxth	r3, r3
 8018f7c:	2b00      	cmp	r3, #0
 8018f7e:	d113      	bne.n	8018fa8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018f80:	2300      	movs	r3, #0
 8018f82:	62bb      	str	r3, [r7, #40]	; 0x28
 8018f84:	687b      	ldr	r3, [r7, #4]
 8018f86:	681b      	ldr	r3, [r3, #0]
 8018f88:	695b      	ldr	r3, [r3, #20]
 8018f8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8018f8c:	687b      	ldr	r3, [r7, #4]
 8018f8e:	681b      	ldr	r3, [r3, #0]
 8018f90:	699b      	ldr	r3, [r3, #24]
 8018f92:	62bb      	str	r3, [r7, #40]	; 0x28
 8018f94:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018f96:	687b      	ldr	r3, [r7, #4]
 8018f98:	681b      	ldr	r3, [r3, #0]
 8018f9a:	681a      	ldr	r2, [r3, #0]
 8018f9c:	687b      	ldr	r3, [r7, #4]
 8018f9e:	681b      	ldr	r3, [r3, #0]
 8018fa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018fa4:	601a      	str	r2, [r3, #0]
 8018fa6:	e115      	b.n	80191d4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8018fa8:	687b      	ldr	r3, [r7, #4]
 8018faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018fac:	b29b      	uxth	r3, r3
 8018fae:	2b01      	cmp	r3, #1
 8018fb0:	f040 808a 	bne.w	80190c8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8018fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018fb6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8018fba:	d137      	bne.n	801902c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	681b      	ldr	r3, [r3, #0]
 8018fc0:	681a      	ldr	r2, [r3, #0]
 8018fc2:	687b      	ldr	r3, [r7, #4]
 8018fc4:	681b      	ldr	r3, [r3, #0]
 8018fc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018fca:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8018fcc:	687b      	ldr	r3, [r7, #4]
 8018fce:	681b      	ldr	r3, [r3, #0]
 8018fd0:	685b      	ldr	r3, [r3, #4]
 8018fd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018fd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018fda:	d113      	bne.n	8019004 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	681b      	ldr	r3, [r3, #0]
 8018fe0:	681a      	ldr	r2, [r3, #0]
 8018fe2:	687b      	ldr	r3, [r7, #4]
 8018fe4:	681b      	ldr	r3, [r3, #0]
 8018fe6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018fea:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018fec:	2300      	movs	r3, #0
 8018fee:	627b      	str	r3, [r7, #36]	; 0x24
 8018ff0:	687b      	ldr	r3, [r7, #4]
 8018ff2:	681b      	ldr	r3, [r3, #0]
 8018ff4:	695b      	ldr	r3, [r3, #20]
 8018ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	681b      	ldr	r3, [r3, #0]
 8018ffc:	699b      	ldr	r3, [r3, #24]
 8018ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8019000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019002:	e0e7      	b.n	80191d4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8019004:	2300      	movs	r3, #0
 8019006:	623b      	str	r3, [r7, #32]
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	681b      	ldr	r3, [r3, #0]
 801900c:	695b      	ldr	r3, [r3, #20]
 801900e:	623b      	str	r3, [r7, #32]
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	681b      	ldr	r3, [r3, #0]
 8019014:	699b      	ldr	r3, [r3, #24]
 8019016:	623b      	str	r3, [r7, #32]
 8019018:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801901a:	687b      	ldr	r3, [r7, #4]
 801901c:	681b      	ldr	r3, [r3, #0]
 801901e:	681a      	ldr	r2, [r3, #0]
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	681b      	ldr	r3, [r3, #0]
 8019024:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019028:	601a      	str	r2, [r3, #0]
 801902a:	e0d3      	b.n	80191d4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 801902c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801902e:	2b08      	cmp	r3, #8
 8019030:	d02e      	beq.n	8019090 <I2C_Master_ADDR+0x1b2>
 8019032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019034:	2b20      	cmp	r3, #32
 8019036:	d02b      	beq.n	8019090 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8019038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801903a:	2b12      	cmp	r3, #18
 801903c:	d102      	bne.n	8019044 <I2C_Master_ADDR+0x166>
 801903e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019040:	2b01      	cmp	r3, #1
 8019042:	d125      	bne.n	8019090 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8019044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019046:	2b04      	cmp	r3, #4
 8019048:	d00e      	beq.n	8019068 <I2C_Master_ADDR+0x18a>
 801904a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801904c:	2b02      	cmp	r3, #2
 801904e:	d00b      	beq.n	8019068 <I2C_Master_ADDR+0x18a>
 8019050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019052:	2b10      	cmp	r3, #16
 8019054:	d008      	beq.n	8019068 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	681b      	ldr	r3, [r3, #0]
 801905a:	681a      	ldr	r2, [r3, #0]
 801905c:	687b      	ldr	r3, [r7, #4]
 801905e:	681b      	ldr	r3, [r3, #0]
 8019060:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019064:	601a      	str	r2, [r3, #0]
 8019066:	e007      	b.n	8019078 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019068:	687b      	ldr	r3, [r7, #4]
 801906a:	681b      	ldr	r3, [r3, #0]
 801906c:	681a      	ldr	r2, [r3, #0]
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	681b      	ldr	r3, [r3, #0]
 8019072:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8019076:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8019078:	2300      	movs	r3, #0
 801907a:	61fb      	str	r3, [r7, #28]
 801907c:	687b      	ldr	r3, [r7, #4]
 801907e:	681b      	ldr	r3, [r3, #0]
 8019080:	695b      	ldr	r3, [r3, #20]
 8019082:	61fb      	str	r3, [r7, #28]
 8019084:	687b      	ldr	r3, [r7, #4]
 8019086:	681b      	ldr	r3, [r3, #0]
 8019088:	699b      	ldr	r3, [r3, #24]
 801908a:	61fb      	str	r3, [r7, #28]
 801908c:	69fb      	ldr	r3, [r7, #28]
 801908e:	e0a1      	b.n	80191d4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	681b      	ldr	r3, [r3, #0]
 8019094:	681a      	ldr	r2, [r3, #0]
 8019096:	687b      	ldr	r3, [r7, #4]
 8019098:	681b      	ldr	r3, [r3, #0]
 801909a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801909e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80190a0:	2300      	movs	r3, #0
 80190a2:	61bb      	str	r3, [r7, #24]
 80190a4:	687b      	ldr	r3, [r7, #4]
 80190a6:	681b      	ldr	r3, [r3, #0]
 80190a8:	695b      	ldr	r3, [r3, #20]
 80190aa:	61bb      	str	r3, [r7, #24]
 80190ac:	687b      	ldr	r3, [r7, #4]
 80190ae:	681b      	ldr	r3, [r3, #0]
 80190b0:	699b      	ldr	r3, [r3, #24]
 80190b2:	61bb      	str	r3, [r7, #24]
 80190b4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80190b6:	687b      	ldr	r3, [r7, #4]
 80190b8:	681b      	ldr	r3, [r3, #0]
 80190ba:	681a      	ldr	r2, [r3, #0]
 80190bc:	687b      	ldr	r3, [r7, #4]
 80190be:	681b      	ldr	r3, [r3, #0]
 80190c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80190c4:	601a      	str	r2, [r3, #0]
 80190c6:	e085      	b.n	80191d4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80190c8:	687b      	ldr	r3, [r7, #4]
 80190ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80190cc:	b29b      	uxth	r3, r3
 80190ce:	2b02      	cmp	r3, #2
 80190d0:	d14d      	bne.n	801916e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80190d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80190d4:	2b04      	cmp	r3, #4
 80190d6:	d016      	beq.n	8019106 <I2C_Master_ADDR+0x228>
 80190d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80190da:	2b02      	cmp	r3, #2
 80190dc:	d013      	beq.n	8019106 <I2C_Master_ADDR+0x228>
 80190de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80190e0:	2b10      	cmp	r3, #16
 80190e2:	d010      	beq.n	8019106 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80190e4:	687b      	ldr	r3, [r7, #4]
 80190e6:	681b      	ldr	r3, [r3, #0]
 80190e8:	681a      	ldr	r2, [r3, #0]
 80190ea:	687b      	ldr	r3, [r7, #4]
 80190ec:	681b      	ldr	r3, [r3, #0]
 80190ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80190f2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80190f4:	687b      	ldr	r3, [r7, #4]
 80190f6:	681b      	ldr	r3, [r3, #0]
 80190f8:	681a      	ldr	r2, [r3, #0]
 80190fa:	687b      	ldr	r3, [r7, #4]
 80190fc:	681b      	ldr	r3, [r3, #0]
 80190fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8019102:	601a      	str	r2, [r3, #0]
 8019104:	e007      	b.n	8019116 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019106:	687b      	ldr	r3, [r7, #4]
 8019108:	681b      	ldr	r3, [r3, #0]
 801910a:	681a      	ldr	r2, [r3, #0]
 801910c:	687b      	ldr	r3, [r7, #4]
 801910e:	681b      	ldr	r3, [r3, #0]
 8019110:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8019114:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8019116:	687b      	ldr	r3, [r7, #4]
 8019118:	681b      	ldr	r3, [r3, #0]
 801911a:	685b      	ldr	r3, [r3, #4]
 801911c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019120:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8019124:	d117      	bne.n	8019156 <I2C_Master_ADDR+0x278>
 8019126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019128:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801912c:	d00b      	beq.n	8019146 <I2C_Master_ADDR+0x268>
 801912e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019130:	2b01      	cmp	r3, #1
 8019132:	d008      	beq.n	8019146 <I2C_Master_ADDR+0x268>
 8019134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019136:	2b08      	cmp	r3, #8
 8019138:	d005      	beq.n	8019146 <I2C_Master_ADDR+0x268>
 801913a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801913c:	2b10      	cmp	r3, #16
 801913e:	d002      	beq.n	8019146 <I2C_Master_ADDR+0x268>
 8019140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019142:	2b20      	cmp	r3, #32
 8019144:	d107      	bne.n	8019156 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8019146:	687b      	ldr	r3, [r7, #4]
 8019148:	681b      	ldr	r3, [r3, #0]
 801914a:	685a      	ldr	r2, [r3, #4]
 801914c:	687b      	ldr	r3, [r7, #4]
 801914e:	681b      	ldr	r3, [r3, #0]
 8019150:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8019154:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8019156:	2300      	movs	r3, #0
 8019158:	617b      	str	r3, [r7, #20]
 801915a:	687b      	ldr	r3, [r7, #4]
 801915c:	681b      	ldr	r3, [r3, #0]
 801915e:	695b      	ldr	r3, [r3, #20]
 8019160:	617b      	str	r3, [r7, #20]
 8019162:	687b      	ldr	r3, [r7, #4]
 8019164:	681b      	ldr	r3, [r3, #0]
 8019166:	699b      	ldr	r3, [r3, #24]
 8019168:	617b      	str	r3, [r7, #20]
 801916a:	697b      	ldr	r3, [r7, #20]
 801916c:	e032      	b.n	80191d4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801916e:	687b      	ldr	r3, [r7, #4]
 8019170:	681b      	ldr	r3, [r3, #0]
 8019172:	681a      	ldr	r2, [r3, #0]
 8019174:	687b      	ldr	r3, [r7, #4]
 8019176:	681b      	ldr	r3, [r3, #0]
 8019178:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801917c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 801917e:	687b      	ldr	r3, [r7, #4]
 8019180:	681b      	ldr	r3, [r3, #0]
 8019182:	685b      	ldr	r3, [r3, #4]
 8019184:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019188:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801918c:	d117      	bne.n	80191be <I2C_Master_ADDR+0x2e0>
 801918e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019190:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8019194:	d00b      	beq.n	80191ae <I2C_Master_ADDR+0x2d0>
 8019196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019198:	2b01      	cmp	r3, #1
 801919a:	d008      	beq.n	80191ae <I2C_Master_ADDR+0x2d0>
 801919c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801919e:	2b08      	cmp	r3, #8
 80191a0:	d005      	beq.n	80191ae <I2C_Master_ADDR+0x2d0>
 80191a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191a4:	2b10      	cmp	r3, #16
 80191a6:	d002      	beq.n	80191ae <I2C_Master_ADDR+0x2d0>
 80191a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191aa:	2b20      	cmp	r3, #32
 80191ac:	d107      	bne.n	80191be <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80191ae:	687b      	ldr	r3, [r7, #4]
 80191b0:	681b      	ldr	r3, [r3, #0]
 80191b2:	685a      	ldr	r2, [r3, #4]
 80191b4:	687b      	ldr	r3, [r7, #4]
 80191b6:	681b      	ldr	r3, [r3, #0]
 80191b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80191bc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80191be:	2300      	movs	r3, #0
 80191c0:	613b      	str	r3, [r7, #16]
 80191c2:	687b      	ldr	r3, [r7, #4]
 80191c4:	681b      	ldr	r3, [r3, #0]
 80191c6:	695b      	ldr	r3, [r3, #20]
 80191c8:	613b      	str	r3, [r7, #16]
 80191ca:	687b      	ldr	r3, [r7, #4]
 80191cc:	681b      	ldr	r3, [r3, #0]
 80191ce:	699b      	ldr	r3, [r3, #24]
 80191d0:	613b      	str	r3, [r7, #16]
 80191d2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80191d4:	687b      	ldr	r3, [r7, #4]
 80191d6:	2200      	movs	r2, #0
 80191d8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80191da:	e00b      	b.n	80191f4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80191dc:	2300      	movs	r3, #0
 80191de:	60fb      	str	r3, [r7, #12]
 80191e0:	687b      	ldr	r3, [r7, #4]
 80191e2:	681b      	ldr	r3, [r3, #0]
 80191e4:	695b      	ldr	r3, [r3, #20]
 80191e6:	60fb      	str	r3, [r7, #12]
 80191e8:	687b      	ldr	r3, [r7, #4]
 80191ea:	681b      	ldr	r3, [r3, #0]
 80191ec:	699b      	ldr	r3, [r3, #24]
 80191ee:	60fb      	str	r3, [r7, #12]
 80191f0:	68fb      	ldr	r3, [r7, #12]
}
 80191f2:	e7ff      	b.n	80191f4 <I2C_Master_ADDR+0x316>
 80191f4:	bf00      	nop
 80191f6:	3744      	adds	r7, #68	; 0x44
 80191f8:	46bd      	mov	sp, r7
 80191fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191fe:	4770      	bx	lr

08019200 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8019200:	b580      	push	{r7, lr}
 8019202:	b084      	sub	sp, #16
 8019204:	af00      	add	r7, sp, #0
 8019206:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801920e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8019210:	687b      	ldr	r3, [r7, #4]
 8019212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019214:	b29b      	uxth	r3, r3
 8019216:	2b00      	cmp	r3, #0
 8019218:	d02b      	beq.n	8019272 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 801921a:	687b      	ldr	r3, [r7, #4]
 801921c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801921e:	781a      	ldrb	r2, [r3, #0]
 8019220:	687b      	ldr	r3, [r7, #4]
 8019222:	681b      	ldr	r3, [r3, #0]
 8019224:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8019226:	687b      	ldr	r3, [r7, #4]
 8019228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801922a:	1c5a      	adds	r2, r3, #1
 801922c:	687b      	ldr	r3, [r7, #4]
 801922e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8019230:	687b      	ldr	r3, [r7, #4]
 8019232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019234:	b29b      	uxth	r3, r3
 8019236:	3b01      	subs	r3, #1
 8019238:	b29a      	uxth	r2, r3
 801923a:	687b      	ldr	r3, [r7, #4]
 801923c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801923e:	687b      	ldr	r3, [r7, #4]
 8019240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019242:	b29b      	uxth	r3, r3
 8019244:	2b00      	cmp	r3, #0
 8019246:	d114      	bne.n	8019272 <I2C_SlaveTransmit_TXE+0x72>
 8019248:	7bfb      	ldrb	r3, [r7, #15]
 801924a:	2b29      	cmp	r3, #41	; 0x29
 801924c:	d111      	bne.n	8019272 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801924e:	687b      	ldr	r3, [r7, #4]
 8019250:	681b      	ldr	r3, [r3, #0]
 8019252:	685a      	ldr	r2, [r3, #4]
 8019254:	687b      	ldr	r3, [r7, #4]
 8019256:	681b      	ldr	r3, [r3, #0]
 8019258:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801925c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801925e:	687b      	ldr	r3, [r7, #4]
 8019260:	2221      	movs	r2, #33	; 0x21
 8019262:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8019264:	687b      	ldr	r3, [r7, #4]
 8019266:	2228      	movs	r2, #40	; 0x28
 8019268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 801926c:	6878      	ldr	r0, [r7, #4]
 801926e:	f7ff f9e7 	bl	8018640 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8019272:	bf00      	nop
 8019274:	3710      	adds	r7, #16
 8019276:	46bd      	mov	sp, r7
 8019278:	bd80      	pop	{r7, pc}

0801927a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 801927a:	b480      	push	{r7}
 801927c:	b083      	sub	sp, #12
 801927e:	af00      	add	r7, sp, #0
 8019280:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019286:	b29b      	uxth	r3, r3
 8019288:	2b00      	cmp	r3, #0
 801928a:	d011      	beq.n	80192b0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019290:	781a      	ldrb	r2, [r3, #0]
 8019292:	687b      	ldr	r3, [r7, #4]
 8019294:	681b      	ldr	r3, [r3, #0]
 8019296:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8019298:	687b      	ldr	r3, [r7, #4]
 801929a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801929c:	1c5a      	adds	r2, r3, #1
 801929e:	687b      	ldr	r3, [r7, #4]
 80192a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80192a2:	687b      	ldr	r3, [r7, #4]
 80192a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80192a6:	b29b      	uxth	r3, r3
 80192a8:	3b01      	subs	r3, #1
 80192aa:	b29a      	uxth	r2, r3
 80192ac:	687b      	ldr	r3, [r7, #4]
 80192ae:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80192b0:	bf00      	nop
 80192b2:	370c      	adds	r7, #12
 80192b4:	46bd      	mov	sp, r7
 80192b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192ba:	4770      	bx	lr

080192bc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80192bc:	b580      	push	{r7, lr}
 80192be:	b084      	sub	sp, #16
 80192c0:	af00      	add	r7, sp, #0
 80192c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80192c4:	687b      	ldr	r3, [r7, #4]
 80192c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80192ca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80192cc:	687b      	ldr	r3, [r7, #4]
 80192ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80192d0:	b29b      	uxth	r3, r3
 80192d2:	2b00      	cmp	r3, #0
 80192d4:	d02c      	beq.n	8019330 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80192d6:	687b      	ldr	r3, [r7, #4]
 80192d8:	681b      	ldr	r3, [r3, #0]
 80192da:	691a      	ldr	r2, [r3, #16]
 80192dc:	687b      	ldr	r3, [r7, #4]
 80192de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80192e0:	b2d2      	uxtb	r2, r2
 80192e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80192e4:	687b      	ldr	r3, [r7, #4]
 80192e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80192e8:	1c5a      	adds	r2, r3, #1
 80192ea:	687b      	ldr	r3, [r7, #4]
 80192ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80192ee:	687b      	ldr	r3, [r7, #4]
 80192f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80192f2:	b29b      	uxth	r3, r3
 80192f4:	3b01      	subs	r3, #1
 80192f6:	b29a      	uxth	r2, r3
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80192fc:	687b      	ldr	r3, [r7, #4]
 80192fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019300:	b29b      	uxth	r3, r3
 8019302:	2b00      	cmp	r3, #0
 8019304:	d114      	bne.n	8019330 <I2C_SlaveReceive_RXNE+0x74>
 8019306:	7bfb      	ldrb	r3, [r7, #15]
 8019308:	2b2a      	cmp	r3, #42	; 0x2a
 801930a:	d111      	bne.n	8019330 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801930c:	687b      	ldr	r3, [r7, #4]
 801930e:	681b      	ldr	r3, [r3, #0]
 8019310:	685a      	ldr	r2, [r3, #4]
 8019312:	687b      	ldr	r3, [r7, #4]
 8019314:	681b      	ldr	r3, [r3, #0]
 8019316:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801931a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801931c:	687b      	ldr	r3, [r7, #4]
 801931e:	2222      	movs	r2, #34	; 0x22
 8019320:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8019322:	687b      	ldr	r3, [r7, #4]
 8019324:	2228      	movs	r2, #40	; 0x28
 8019326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 801932a:	6878      	ldr	r0, [r7, #4]
 801932c:	f7ff f992 	bl	8018654 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8019330:	bf00      	nop
 8019332:	3710      	adds	r7, #16
 8019334:	46bd      	mov	sp, r7
 8019336:	bd80      	pop	{r7, pc}

08019338 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8019338:	b480      	push	{r7}
 801933a:	b083      	sub	sp, #12
 801933c:	af00      	add	r7, sp, #0
 801933e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8019340:	687b      	ldr	r3, [r7, #4]
 8019342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019344:	b29b      	uxth	r3, r3
 8019346:	2b00      	cmp	r3, #0
 8019348:	d012      	beq.n	8019370 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801934a:	687b      	ldr	r3, [r7, #4]
 801934c:	681b      	ldr	r3, [r3, #0]
 801934e:	691a      	ldr	r2, [r3, #16]
 8019350:	687b      	ldr	r3, [r7, #4]
 8019352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019354:	b2d2      	uxtb	r2, r2
 8019356:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8019358:	687b      	ldr	r3, [r7, #4]
 801935a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801935c:	1c5a      	adds	r2, r3, #1
 801935e:	687b      	ldr	r3, [r7, #4]
 8019360:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8019362:	687b      	ldr	r3, [r7, #4]
 8019364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019366:	b29b      	uxth	r3, r3
 8019368:	3b01      	subs	r3, #1
 801936a:	b29a      	uxth	r2, r3
 801936c:	687b      	ldr	r3, [r7, #4]
 801936e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8019370:	bf00      	nop
 8019372:	370c      	adds	r7, #12
 8019374:	46bd      	mov	sp, r7
 8019376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801937a:	4770      	bx	lr

0801937c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 801937c:	b580      	push	{r7, lr}
 801937e:	b084      	sub	sp, #16
 8019380:	af00      	add	r7, sp, #0
 8019382:	6078      	str	r0, [r7, #4]
 8019384:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8019386:	2300      	movs	r3, #0
 8019388:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019390:	b2db      	uxtb	r3, r3
 8019392:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8019396:	2b28      	cmp	r3, #40	; 0x28
 8019398:	d127      	bne.n	80193ea <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	681b      	ldr	r3, [r3, #0]
 801939e:	685a      	ldr	r2, [r3, #4]
 80193a0:	687b      	ldr	r3, [r7, #4]
 80193a2:	681b      	ldr	r3, [r3, #0]
 80193a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80193a8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80193aa:	683b      	ldr	r3, [r7, #0]
 80193ac:	089b      	lsrs	r3, r3, #2
 80193ae:	f003 0301 	and.w	r3, r3, #1
 80193b2:	2b00      	cmp	r3, #0
 80193b4:	d101      	bne.n	80193ba <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80193b6:	2301      	movs	r3, #1
 80193b8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80193ba:	683b      	ldr	r3, [r7, #0]
 80193bc:	09db      	lsrs	r3, r3, #7
 80193be:	f003 0301 	and.w	r3, r3, #1
 80193c2:	2b00      	cmp	r3, #0
 80193c4:	d103      	bne.n	80193ce <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80193c6:	687b      	ldr	r3, [r7, #4]
 80193c8:	68db      	ldr	r3, [r3, #12]
 80193ca:	81bb      	strh	r3, [r7, #12]
 80193cc:	e002      	b.n	80193d4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80193ce:	687b      	ldr	r3, [r7, #4]
 80193d0:	699b      	ldr	r3, [r3, #24]
 80193d2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80193d4:	687b      	ldr	r3, [r7, #4]
 80193d6:	2200      	movs	r2, #0
 80193d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80193dc:	89ba      	ldrh	r2, [r7, #12]
 80193de:	7bfb      	ldrb	r3, [r7, #15]
 80193e0:	4619      	mov	r1, r3
 80193e2:	6878      	ldr	r0, [r7, #4]
 80193e4:	f7ff f940 	bl	8018668 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80193e8:	e00e      	b.n	8019408 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80193ea:	2300      	movs	r3, #0
 80193ec:	60bb      	str	r3, [r7, #8]
 80193ee:	687b      	ldr	r3, [r7, #4]
 80193f0:	681b      	ldr	r3, [r3, #0]
 80193f2:	695b      	ldr	r3, [r3, #20]
 80193f4:	60bb      	str	r3, [r7, #8]
 80193f6:	687b      	ldr	r3, [r7, #4]
 80193f8:	681b      	ldr	r3, [r3, #0]
 80193fa:	699b      	ldr	r3, [r3, #24]
 80193fc:	60bb      	str	r3, [r7, #8]
 80193fe:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8019400:	687b      	ldr	r3, [r7, #4]
 8019402:	2200      	movs	r2, #0
 8019404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8019408:	bf00      	nop
 801940a:	3710      	adds	r7, #16
 801940c:	46bd      	mov	sp, r7
 801940e:	bd80      	pop	{r7, pc}

08019410 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8019410:	b580      	push	{r7, lr}
 8019412:	b084      	sub	sp, #16
 8019414:	af00      	add	r7, sp, #0
 8019416:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8019418:	687b      	ldr	r3, [r7, #4]
 801941a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801941e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8019420:	687b      	ldr	r3, [r7, #4]
 8019422:	681b      	ldr	r3, [r3, #0]
 8019424:	685a      	ldr	r2, [r3, #4]
 8019426:	687b      	ldr	r3, [r7, #4]
 8019428:	681b      	ldr	r3, [r3, #0]
 801942a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801942e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8019430:	2300      	movs	r3, #0
 8019432:	60bb      	str	r3, [r7, #8]
 8019434:	687b      	ldr	r3, [r7, #4]
 8019436:	681b      	ldr	r3, [r3, #0]
 8019438:	695b      	ldr	r3, [r3, #20]
 801943a:	60bb      	str	r3, [r7, #8]
 801943c:	687b      	ldr	r3, [r7, #4]
 801943e:	681b      	ldr	r3, [r3, #0]
 8019440:	681a      	ldr	r2, [r3, #0]
 8019442:	687b      	ldr	r3, [r7, #4]
 8019444:	681b      	ldr	r3, [r3, #0]
 8019446:	f042 0201 	orr.w	r2, r2, #1
 801944a:	601a      	str	r2, [r3, #0]
 801944c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801944e:	687b      	ldr	r3, [r7, #4]
 8019450:	681b      	ldr	r3, [r3, #0]
 8019452:	681a      	ldr	r2, [r3, #0]
 8019454:	687b      	ldr	r3, [r7, #4]
 8019456:	681b      	ldr	r3, [r3, #0]
 8019458:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801945c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 801945e:	687b      	ldr	r3, [r7, #4]
 8019460:	681b      	ldr	r3, [r3, #0]
 8019462:	685b      	ldr	r3, [r3, #4]
 8019464:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019468:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801946c:	d172      	bne.n	8019554 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801946e:	7bfb      	ldrb	r3, [r7, #15]
 8019470:	2b22      	cmp	r3, #34	; 0x22
 8019472:	d002      	beq.n	801947a <I2C_Slave_STOPF+0x6a>
 8019474:	7bfb      	ldrb	r3, [r7, #15]
 8019476:	2b2a      	cmp	r3, #42	; 0x2a
 8019478:	d135      	bne.n	80194e6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 801947a:	687b      	ldr	r3, [r7, #4]
 801947c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801947e:	681b      	ldr	r3, [r3, #0]
 8019480:	685b      	ldr	r3, [r3, #4]
 8019482:	b29a      	uxth	r2, r3
 8019484:	687b      	ldr	r3, [r7, #4]
 8019486:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8019488:	687b      	ldr	r3, [r7, #4]
 801948a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801948c:	b29b      	uxth	r3, r3
 801948e:	2b00      	cmp	r3, #0
 8019490:	d005      	beq.n	801949e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8019492:	687b      	ldr	r3, [r7, #4]
 8019494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019496:	f043 0204 	orr.w	r2, r3, #4
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801949e:	687b      	ldr	r3, [r7, #4]
 80194a0:	681b      	ldr	r3, [r3, #0]
 80194a2:	685a      	ldr	r2, [r3, #4]
 80194a4:	687b      	ldr	r3, [r7, #4]
 80194a6:	681b      	ldr	r3, [r3, #0]
 80194a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80194ac:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80194ae:	687b      	ldr	r3, [r7, #4]
 80194b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80194b2:	4618      	mov	r0, r3
 80194b4:	f7fd fdb4 	bl	8017020 <HAL_DMA_GetState>
 80194b8:	4603      	mov	r3, r0
 80194ba:	2b01      	cmp	r3, #1
 80194bc:	d049      	beq.n	8019552 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80194be:	687b      	ldr	r3, [r7, #4]
 80194c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80194c2:	4a69      	ldr	r2, [pc, #420]	; (8019668 <I2C_Slave_STOPF+0x258>)
 80194c4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80194c6:	687b      	ldr	r3, [r7, #4]
 80194c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80194ca:	4618      	mov	r0, r3
 80194cc:	f7fd fbfc 	bl	8016cc8 <HAL_DMA_Abort_IT>
 80194d0:	4603      	mov	r3, r0
 80194d2:	2b00      	cmp	r3, #0
 80194d4:	d03d      	beq.n	8019552 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80194d6:	687b      	ldr	r3, [r7, #4]
 80194d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80194da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80194dc:	687a      	ldr	r2, [r7, #4]
 80194de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80194e0:	4610      	mov	r0, r2
 80194e2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80194e4:	e035      	b.n	8019552 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80194e6:	687b      	ldr	r3, [r7, #4]
 80194e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80194ea:	681b      	ldr	r3, [r3, #0]
 80194ec:	685b      	ldr	r3, [r3, #4]
 80194ee:	b29a      	uxth	r2, r3
 80194f0:	687b      	ldr	r3, [r7, #4]
 80194f2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80194f4:	687b      	ldr	r3, [r7, #4]
 80194f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80194f8:	b29b      	uxth	r3, r3
 80194fa:	2b00      	cmp	r3, #0
 80194fc:	d005      	beq.n	801950a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80194fe:	687b      	ldr	r3, [r7, #4]
 8019500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019502:	f043 0204 	orr.w	r2, r3, #4
 8019506:	687b      	ldr	r3, [r7, #4]
 8019508:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801950a:	687b      	ldr	r3, [r7, #4]
 801950c:	681b      	ldr	r3, [r3, #0]
 801950e:	685a      	ldr	r2, [r3, #4]
 8019510:	687b      	ldr	r3, [r7, #4]
 8019512:	681b      	ldr	r3, [r3, #0]
 8019514:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8019518:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801951a:	687b      	ldr	r3, [r7, #4]
 801951c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801951e:	4618      	mov	r0, r3
 8019520:	f7fd fd7e 	bl	8017020 <HAL_DMA_GetState>
 8019524:	4603      	mov	r3, r0
 8019526:	2b01      	cmp	r3, #1
 8019528:	d014      	beq.n	8019554 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801952a:	687b      	ldr	r3, [r7, #4]
 801952c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801952e:	4a4e      	ldr	r2, [pc, #312]	; (8019668 <I2C_Slave_STOPF+0x258>)
 8019530:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8019532:	687b      	ldr	r3, [r7, #4]
 8019534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019536:	4618      	mov	r0, r3
 8019538:	f7fd fbc6 	bl	8016cc8 <HAL_DMA_Abort_IT>
 801953c:	4603      	mov	r3, r0
 801953e:	2b00      	cmp	r3, #0
 8019540:	d008      	beq.n	8019554 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8019542:	687b      	ldr	r3, [r7, #4]
 8019544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019548:	687a      	ldr	r2, [r7, #4]
 801954a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801954c:	4610      	mov	r0, r2
 801954e:	4798      	blx	r3
 8019550:	e000      	b.n	8019554 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8019552:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8019554:	687b      	ldr	r3, [r7, #4]
 8019556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019558:	b29b      	uxth	r3, r3
 801955a:	2b00      	cmp	r3, #0
 801955c:	d03e      	beq.n	80195dc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 801955e:	687b      	ldr	r3, [r7, #4]
 8019560:	681b      	ldr	r3, [r3, #0]
 8019562:	695b      	ldr	r3, [r3, #20]
 8019564:	f003 0304 	and.w	r3, r3, #4
 8019568:	2b04      	cmp	r3, #4
 801956a:	d112      	bne.n	8019592 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801956c:	687b      	ldr	r3, [r7, #4]
 801956e:	681b      	ldr	r3, [r3, #0]
 8019570:	691a      	ldr	r2, [r3, #16]
 8019572:	687b      	ldr	r3, [r7, #4]
 8019574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019576:	b2d2      	uxtb	r2, r2
 8019578:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801957a:	687b      	ldr	r3, [r7, #4]
 801957c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801957e:	1c5a      	adds	r2, r3, #1
 8019580:	687b      	ldr	r3, [r7, #4]
 8019582:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019588:	b29b      	uxth	r3, r3
 801958a:	3b01      	subs	r3, #1
 801958c:	b29a      	uxth	r2, r3
 801958e:	687b      	ldr	r3, [r7, #4]
 8019590:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8019592:	687b      	ldr	r3, [r7, #4]
 8019594:	681b      	ldr	r3, [r3, #0]
 8019596:	695b      	ldr	r3, [r3, #20]
 8019598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801959c:	2b40      	cmp	r3, #64	; 0x40
 801959e:	d112      	bne.n	80195c6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80195a0:	687b      	ldr	r3, [r7, #4]
 80195a2:	681b      	ldr	r3, [r3, #0]
 80195a4:	691a      	ldr	r2, [r3, #16]
 80195a6:	687b      	ldr	r3, [r7, #4]
 80195a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195aa:	b2d2      	uxtb	r2, r2
 80195ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80195ae:	687b      	ldr	r3, [r7, #4]
 80195b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195b2:	1c5a      	adds	r2, r3, #1
 80195b4:	687b      	ldr	r3, [r7, #4]
 80195b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80195b8:	687b      	ldr	r3, [r7, #4]
 80195ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80195bc:	b29b      	uxth	r3, r3
 80195be:	3b01      	subs	r3, #1
 80195c0:	b29a      	uxth	r2, r3
 80195c2:	687b      	ldr	r3, [r7, #4]
 80195c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80195c6:	687b      	ldr	r3, [r7, #4]
 80195c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80195ca:	b29b      	uxth	r3, r3
 80195cc:	2b00      	cmp	r3, #0
 80195ce:	d005      	beq.n	80195dc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80195d0:	687b      	ldr	r3, [r7, #4]
 80195d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80195d4:	f043 0204 	orr.w	r2, r3, #4
 80195d8:	687b      	ldr	r3, [r7, #4]
 80195da:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80195dc:	687b      	ldr	r3, [r7, #4]
 80195de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80195e0:	2b00      	cmp	r3, #0
 80195e2:	d003      	beq.n	80195ec <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80195e4:	6878      	ldr	r0, [r7, #4]
 80195e6:	f000 f8b3 	bl	8019750 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80195ea:	e039      	b.n	8019660 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80195ec:	7bfb      	ldrb	r3, [r7, #15]
 80195ee:	2b2a      	cmp	r3, #42	; 0x2a
 80195f0:	d109      	bne.n	8019606 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	2200      	movs	r2, #0
 80195f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80195f8:	687b      	ldr	r3, [r7, #4]
 80195fa:	2228      	movs	r2, #40	; 0x28
 80195fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8019600:	6878      	ldr	r0, [r7, #4]
 8019602:	f7ff f827 	bl	8018654 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8019606:	687b      	ldr	r3, [r7, #4]
 8019608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801960c:	b2db      	uxtb	r3, r3
 801960e:	2b28      	cmp	r3, #40	; 0x28
 8019610:	d111      	bne.n	8019636 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8019612:	687b      	ldr	r3, [r7, #4]
 8019614:	4a15      	ldr	r2, [pc, #84]	; (801966c <I2C_Slave_STOPF+0x25c>)
 8019616:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8019618:	687b      	ldr	r3, [r7, #4]
 801961a:	2200      	movs	r2, #0
 801961c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 801961e:	687b      	ldr	r3, [r7, #4]
 8019620:	2220      	movs	r2, #32
 8019622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8019626:	687b      	ldr	r3, [r7, #4]
 8019628:	2200      	movs	r2, #0
 801962a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 801962e:	6878      	ldr	r0, [r7, #4]
 8019630:	f7ff f828 	bl	8018684 <HAL_I2C_ListenCpltCallback>
}
 8019634:	e014      	b.n	8019660 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8019636:	687b      	ldr	r3, [r7, #4]
 8019638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801963a:	2b22      	cmp	r3, #34	; 0x22
 801963c:	d002      	beq.n	8019644 <I2C_Slave_STOPF+0x234>
 801963e:	7bfb      	ldrb	r3, [r7, #15]
 8019640:	2b22      	cmp	r3, #34	; 0x22
 8019642:	d10d      	bne.n	8019660 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8019644:	687b      	ldr	r3, [r7, #4]
 8019646:	2200      	movs	r2, #0
 8019648:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 801964a:	687b      	ldr	r3, [r7, #4]
 801964c:	2220      	movs	r2, #32
 801964e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8019652:	687b      	ldr	r3, [r7, #4]
 8019654:	2200      	movs	r2, #0
 8019656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 801965a:	6878      	ldr	r0, [r7, #4]
 801965c:	f7fe fffa 	bl	8018654 <HAL_I2C_SlaveRxCpltCallback>
}
 8019660:	bf00      	nop
 8019662:	3710      	adds	r7, #16
 8019664:	46bd      	mov	sp, r7
 8019666:	bd80      	pop	{r7, pc}
 8019668:	08019cb1 	.word	0x08019cb1
 801966c:	ffff0000 	.word	0xffff0000

08019670 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8019670:	b580      	push	{r7, lr}
 8019672:	b084      	sub	sp, #16
 8019674:	af00      	add	r7, sp, #0
 8019676:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8019678:	687b      	ldr	r3, [r7, #4]
 801967a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801967e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8019680:	687b      	ldr	r3, [r7, #4]
 8019682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019684:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8019686:	68bb      	ldr	r3, [r7, #8]
 8019688:	2b08      	cmp	r3, #8
 801968a:	d002      	beq.n	8019692 <I2C_Slave_AF+0x22>
 801968c:	68bb      	ldr	r3, [r7, #8]
 801968e:	2b20      	cmp	r3, #32
 8019690:	d129      	bne.n	80196e6 <I2C_Slave_AF+0x76>
 8019692:	7bfb      	ldrb	r3, [r7, #15]
 8019694:	2b28      	cmp	r3, #40	; 0x28
 8019696:	d126      	bne.n	80196e6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8019698:	687b      	ldr	r3, [r7, #4]
 801969a:	4a2c      	ldr	r2, [pc, #176]	; (801974c <I2C_Slave_AF+0xdc>)
 801969c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801969e:	687b      	ldr	r3, [r7, #4]
 80196a0:	681b      	ldr	r3, [r3, #0]
 80196a2:	685a      	ldr	r2, [r3, #4]
 80196a4:	687b      	ldr	r3, [r7, #4]
 80196a6:	681b      	ldr	r3, [r3, #0]
 80196a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80196ac:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80196ae:	687b      	ldr	r3, [r7, #4]
 80196b0:	681b      	ldr	r3, [r3, #0]
 80196b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80196b6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80196b8:	687b      	ldr	r3, [r7, #4]
 80196ba:	681b      	ldr	r3, [r3, #0]
 80196bc:	681a      	ldr	r2, [r3, #0]
 80196be:	687b      	ldr	r3, [r7, #4]
 80196c0:	681b      	ldr	r3, [r3, #0]
 80196c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80196c6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80196c8:	687b      	ldr	r3, [r7, #4]
 80196ca:	2200      	movs	r2, #0
 80196cc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80196ce:	687b      	ldr	r3, [r7, #4]
 80196d0:	2220      	movs	r2, #32
 80196d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80196d6:	687b      	ldr	r3, [r7, #4]
 80196d8:	2200      	movs	r2, #0
 80196da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80196de:	6878      	ldr	r0, [r7, #4]
 80196e0:	f7fe ffd0 	bl	8018684 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80196e4:	e02e      	b.n	8019744 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80196e6:	7bfb      	ldrb	r3, [r7, #15]
 80196e8:	2b21      	cmp	r3, #33	; 0x21
 80196ea:	d126      	bne.n	801973a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80196ec:	687b      	ldr	r3, [r7, #4]
 80196ee:	4a17      	ldr	r2, [pc, #92]	; (801974c <I2C_Slave_AF+0xdc>)
 80196f0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80196f2:	687b      	ldr	r3, [r7, #4]
 80196f4:	2221      	movs	r2, #33	; 0x21
 80196f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	2220      	movs	r2, #32
 80196fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8019700:	687b      	ldr	r3, [r7, #4]
 8019702:	2200      	movs	r2, #0
 8019704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8019708:	687b      	ldr	r3, [r7, #4]
 801970a:	681b      	ldr	r3, [r3, #0]
 801970c:	685a      	ldr	r2, [r3, #4]
 801970e:	687b      	ldr	r3, [r7, #4]
 8019710:	681b      	ldr	r3, [r3, #0]
 8019712:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8019716:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	681b      	ldr	r3, [r3, #0]
 801971c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8019720:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019722:	687b      	ldr	r3, [r7, #4]
 8019724:	681b      	ldr	r3, [r3, #0]
 8019726:	681a      	ldr	r2, [r3, #0]
 8019728:	687b      	ldr	r3, [r7, #4]
 801972a:	681b      	ldr	r3, [r3, #0]
 801972c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019730:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8019732:	6878      	ldr	r0, [r7, #4]
 8019734:	f7fe ff84 	bl	8018640 <HAL_I2C_SlaveTxCpltCallback>
}
 8019738:	e004      	b.n	8019744 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801973a:	687b      	ldr	r3, [r7, #4]
 801973c:	681b      	ldr	r3, [r3, #0]
 801973e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8019742:	615a      	str	r2, [r3, #20]
}
 8019744:	bf00      	nop
 8019746:	3710      	adds	r7, #16
 8019748:	46bd      	mov	sp, r7
 801974a:	bd80      	pop	{r7, pc}
 801974c:	ffff0000 	.word	0xffff0000

08019750 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8019750:	b580      	push	{r7, lr}
 8019752:	b084      	sub	sp, #16
 8019754:	af00      	add	r7, sp, #0
 8019756:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8019758:	687b      	ldr	r3, [r7, #4]
 801975a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801975e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8019760:	687b      	ldr	r3, [r7, #4]
 8019762:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8019766:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8019768:	7bbb      	ldrb	r3, [r7, #14]
 801976a:	2b10      	cmp	r3, #16
 801976c:	d002      	beq.n	8019774 <I2C_ITError+0x24>
 801976e:	7bbb      	ldrb	r3, [r7, #14]
 8019770:	2b40      	cmp	r3, #64	; 0x40
 8019772:	d10a      	bne.n	801978a <I2C_ITError+0x3a>
 8019774:	7bfb      	ldrb	r3, [r7, #15]
 8019776:	2b22      	cmp	r3, #34	; 0x22
 8019778:	d107      	bne.n	801978a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 801977a:	687b      	ldr	r3, [r7, #4]
 801977c:	681b      	ldr	r3, [r3, #0]
 801977e:	681a      	ldr	r2, [r3, #0]
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	681b      	ldr	r3, [r3, #0]
 8019784:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8019788:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801978a:	7bfb      	ldrb	r3, [r7, #15]
 801978c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8019790:	2b28      	cmp	r3, #40	; 0x28
 8019792:	d107      	bne.n	80197a4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8019794:	687b      	ldr	r3, [r7, #4]
 8019796:	2200      	movs	r2, #0
 8019798:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 801979a:	687b      	ldr	r3, [r7, #4]
 801979c:	2228      	movs	r2, #40	; 0x28
 801979e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80197a2:	e015      	b.n	80197d0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80197a4:	687b      	ldr	r3, [r7, #4]
 80197a6:	681b      	ldr	r3, [r3, #0]
 80197a8:	685b      	ldr	r3, [r3, #4]
 80197aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80197ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80197b2:	d00a      	beq.n	80197ca <I2C_ITError+0x7a>
 80197b4:	7bfb      	ldrb	r3, [r7, #15]
 80197b6:	2b60      	cmp	r3, #96	; 0x60
 80197b8:	d007      	beq.n	80197ca <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80197ba:	687b      	ldr	r3, [r7, #4]
 80197bc:	2220      	movs	r2, #32
 80197be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80197c2:	687b      	ldr	r3, [r7, #4]
 80197c4:	2200      	movs	r2, #0
 80197c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80197ca:	687b      	ldr	r3, [r7, #4]
 80197cc:	2200      	movs	r2, #0
 80197ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80197d0:	687b      	ldr	r3, [r7, #4]
 80197d2:	681b      	ldr	r3, [r3, #0]
 80197d4:	685b      	ldr	r3, [r3, #4]
 80197d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80197da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80197de:	d162      	bne.n	80198a6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80197e0:	687b      	ldr	r3, [r7, #4]
 80197e2:	681b      	ldr	r3, [r3, #0]
 80197e4:	685a      	ldr	r2, [r3, #4]
 80197e6:	687b      	ldr	r3, [r7, #4]
 80197e8:	681b      	ldr	r3, [r3, #0]
 80197ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80197ee:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80197f0:	687b      	ldr	r3, [r7, #4]
 80197f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80197f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80197f8:	b2db      	uxtb	r3, r3
 80197fa:	2b01      	cmp	r3, #1
 80197fc:	d020      	beq.n	8019840 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80197fe:	687b      	ldr	r3, [r7, #4]
 8019800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019802:	4a6a      	ldr	r2, [pc, #424]	; (80199ac <I2C_ITError+0x25c>)
 8019804:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8019806:	687b      	ldr	r3, [r7, #4]
 8019808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801980a:	4618      	mov	r0, r3
 801980c:	f7fd fa5c 	bl	8016cc8 <HAL_DMA_Abort_IT>
 8019810:	4603      	mov	r3, r0
 8019812:	2b00      	cmp	r3, #0
 8019814:	f000 8089 	beq.w	801992a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8019818:	687b      	ldr	r3, [r7, #4]
 801981a:	681b      	ldr	r3, [r3, #0]
 801981c:	681a      	ldr	r2, [r3, #0]
 801981e:	687b      	ldr	r3, [r7, #4]
 8019820:	681b      	ldr	r3, [r3, #0]
 8019822:	f022 0201 	bic.w	r2, r2, #1
 8019826:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8019828:	687b      	ldr	r3, [r7, #4]
 801982a:	2220      	movs	r2, #32
 801982c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8019830:	687b      	ldr	r3, [r7, #4]
 8019832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019836:	687a      	ldr	r2, [r7, #4]
 8019838:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801983a:	4610      	mov	r0, r2
 801983c:	4798      	blx	r3
 801983e:	e074      	b.n	801992a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8019840:	687b      	ldr	r3, [r7, #4]
 8019842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019844:	4a59      	ldr	r2, [pc, #356]	; (80199ac <I2C_ITError+0x25c>)
 8019846:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801984c:	4618      	mov	r0, r3
 801984e:	f7fd fa3b 	bl	8016cc8 <HAL_DMA_Abort_IT>
 8019852:	4603      	mov	r3, r0
 8019854:	2b00      	cmp	r3, #0
 8019856:	d068      	beq.n	801992a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8019858:	687b      	ldr	r3, [r7, #4]
 801985a:	681b      	ldr	r3, [r3, #0]
 801985c:	695b      	ldr	r3, [r3, #20]
 801985e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019862:	2b40      	cmp	r3, #64	; 0x40
 8019864:	d10b      	bne.n	801987e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8019866:	687b      	ldr	r3, [r7, #4]
 8019868:	681b      	ldr	r3, [r3, #0]
 801986a:	691a      	ldr	r2, [r3, #16]
 801986c:	687b      	ldr	r3, [r7, #4]
 801986e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019870:	b2d2      	uxtb	r2, r2
 8019872:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8019874:	687b      	ldr	r3, [r7, #4]
 8019876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019878:	1c5a      	adds	r2, r3, #1
 801987a:	687b      	ldr	r3, [r7, #4]
 801987c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	681b      	ldr	r3, [r3, #0]
 8019882:	681a      	ldr	r2, [r3, #0]
 8019884:	687b      	ldr	r3, [r7, #4]
 8019886:	681b      	ldr	r3, [r3, #0]
 8019888:	f022 0201 	bic.w	r2, r2, #1
 801988c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	2220      	movs	r2, #32
 8019892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8019896:	687b      	ldr	r3, [r7, #4]
 8019898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801989a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801989c:	687a      	ldr	r2, [r7, #4]
 801989e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80198a0:	4610      	mov	r0, r2
 80198a2:	4798      	blx	r3
 80198a4:	e041      	b.n	801992a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80198a6:	687b      	ldr	r3, [r7, #4]
 80198a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80198ac:	b2db      	uxtb	r3, r3
 80198ae:	2b60      	cmp	r3, #96	; 0x60
 80198b0:	d125      	bne.n	80198fe <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80198b2:	687b      	ldr	r3, [r7, #4]
 80198b4:	2220      	movs	r2, #32
 80198b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80198ba:	687b      	ldr	r3, [r7, #4]
 80198bc:	2200      	movs	r2, #0
 80198be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80198c0:	687b      	ldr	r3, [r7, #4]
 80198c2:	681b      	ldr	r3, [r3, #0]
 80198c4:	695b      	ldr	r3, [r3, #20]
 80198c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80198ca:	2b40      	cmp	r3, #64	; 0x40
 80198cc:	d10b      	bne.n	80198e6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80198ce:	687b      	ldr	r3, [r7, #4]
 80198d0:	681b      	ldr	r3, [r3, #0]
 80198d2:	691a      	ldr	r2, [r3, #16]
 80198d4:	687b      	ldr	r3, [r7, #4]
 80198d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80198d8:	b2d2      	uxtb	r2, r2
 80198da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80198dc:	687b      	ldr	r3, [r7, #4]
 80198de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80198e0:	1c5a      	adds	r2, r3, #1
 80198e2:	687b      	ldr	r3, [r7, #4]
 80198e4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80198e6:	687b      	ldr	r3, [r7, #4]
 80198e8:	681b      	ldr	r3, [r3, #0]
 80198ea:	681a      	ldr	r2, [r3, #0]
 80198ec:	687b      	ldr	r3, [r7, #4]
 80198ee:	681b      	ldr	r3, [r3, #0]
 80198f0:	f022 0201 	bic.w	r2, r2, #1
 80198f4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80198f6:	6878      	ldr	r0, [r7, #4]
 80198f8:	f7fe feec 	bl	80186d4 <HAL_I2C_AbortCpltCallback>
 80198fc:	e015      	b.n	801992a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80198fe:	687b      	ldr	r3, [r7, #4]
 8019900:	681b      	ldr	r3, [r3, #0]
 8019902:	695b      	ldr	r3, [r3, #20]
 8019904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019908:	2b40      	cmp	r3, #64	; 0x40
 801990a:	d10b      	bne.n	8019924 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801990c:	687b      	ldr	r3, [r7, #4]
 801990e:	681b      	ldr	r3, [r3, #0]
 8019910:	691a      	ldr	r2, [r3, #16]
 8019912:	687b      	ldr	r3, [r7, #4]
 8019914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019916:	b2d2      	uxtb	r2, r2
 8019918:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801991a:	687b      	ldr	r3, [r7, #4]
 801991c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801991e:	1c5a      	adds	r2, r3, #1
 8019920:	687b      	ldr	r3, [r7, #4]
 8019922:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8019924:	6878      	ldr	r0, [r7, #4]
 8019926:	f7fe fecb 	bl	80186c0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 801992a:	687b      	ldr	r3, [r7, #4]
 801992c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801992e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8019930:	68bb      	ldr	r3, [r7, #8]
 8019932:	f003 0301 	and.w	r3, r3, #1
 8019936:	2b00      	cmp	r3, #0
 8019938:	d10e      	bne.n	8019958 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 801993a:	68bb      	ldr	r3, [r7, #8]
 801993c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8019940:	2b00      	cmp	r3, #0
 8019942:	d109      	bne.n	8019958 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8019944:	68bb      	ldr	r3, [r7, #8]
 8019946:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 801994a:	2b00      	cmp	r3, #0
 801994c:	d104      	bne.n	8019958 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 801994e:	68bb      	ldr	r3, [r7, #8]
 8019950:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8019954:	2b00      	cmp	r3, #0
 8019956:	d007      	beq.n	8019968 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8019958:	687b      	ldr	r3, [r7, #4]
 801995a:	681b      	ldr	r3, [r3, #0]
 801995c:	685a      	ldr	r2, [r3, #4]
 801995e:	687b      	ldr	r3, [r7, #4]
 8019960:	681b      	ldr	r3, [r3, #0]
 8019962:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8019966:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8019968:	687b      	ldr	r3, [r7, #4]
 801996a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801996e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8019970:	687b      	ldr	r3, [r7, #4]
 8019972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019974:	f003 0304 	and.w	r3, r3, #4
 8019978:	2b04      	cmp	r3, #4
 801997a:	d113      	bne.n	80199a4 <I2C_ITError+0x254>
 801997c:	7bfb      	ldrb	r3, [r7, #15]
 801997e:	2b28      	cmp	r3, #40	; 0x28
 8019980:	d110      	bne.n	80199a4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8019982:	687b      	ldr	r3, [r7, #4]
 8019984:	4a0a      	ldr	r2, [pc, #40]	; (80199b0 <I2C_ITError+0x260>)
 8019986:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8019988:	687b      	ldr	r3, [r7, #4]
 801998a:	2200      	movs	r2, #0
 801998c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801998e:	687b      	ldr	r3, [r7, #4]
 8019990:	2220      	movs	r2, #32
 8019992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8019996:	687b      	ldr	r3, [r7, #4]
 8019998:	2200      	movs	r2, #0
 801999a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 801999e:	6878      	ldr	r0, [r7, #4]
 80199a0:	f7fe fe70 	bl	8018684 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80199a4:	bf00      	nop
 80199a6:	3710      	adds	r7, #16
 80199a8:	46bd      	mov	sp, r7
 80199aa:	bd80      	pop	{r7, pc}
 80199ac:	08019cb1 	.word	0x08019cb1
 80199b0:	ffff0000 	.word	0xffff0000

080199b4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80199b4:	b580      	push	{r7, lr}
 80199b6:	b088      	sub	sp, #32
 80199b8:	af02      	add	r7, sp, #8
 80199ba:	60f8      	str	r0, [r7, #12]
 80199bc:	4608      	mov	r0, r1
 80199be:	4611      	mov	r1, r2
 80199c0:	461a      	mov	r2, r3
 80199c2:	4603      	mov	r3, r0
 80199c4:	817b      	strh	r3, [r7, #10]
 80199c6:	460b      	mov	r3, r1
 80199c8:	813b      	strh	r3, [r7, #8]
 80199ca:	4613      	mov	r3, r2
 80199cc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80199ce:	68fb      	ldr	r3, [r7, #12]
 80199d0:	681b      	ldr	r3, [r3, #0]
 80199d2:	681a      	ldr	r2, [r3, #0]
 80199d4:	68fb      	ldr	r3, [r7, #12]
 80199d6:	681b      	ldr	r3, [r3, #0]
 80199d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80199dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80199de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199e0:	9300      	str	r3, [sp, #0]
 80199e2:	6a3b      	ldr	r3, [r7, #32]
 80199e4:	2200      	movs	r2, #0
 80199e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80199ea:	68f8      	ldr	r0, [r7, #12]
 80199ec:	f000 fa08 	bl	8019e00 <I2C_WaitOnFlagUntilTimeout>
 80199f0:	4603      	mov	r3, r0
 80199f2:	2b00      	cmp	r3, #0
 80199f4:	d00d      	beq.n	8019a12 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80199f6:	68fb      	ldr	r3, [r7, #12]
 80199f8:	681b      	ldr	r3, [r3, #0]
 80199fa:	681b      	ldr	r3, [r3, #0]
 80199fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019a00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019a04:	d103      	bne.n	8019a0e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8019a06:	68fb      	ldr	r3, [r7, #12]
 8019a08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019a0c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8019a0e:	2303      	movs	r3, #3
 8019a10:	e05f      	b.n	8019ad2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8019a12:	897b      	ldrh	r3, [r7, #10]
 8019a14:	b2db      	uxtb	r3, r3
 8019a16:	461a      	mov	r2, r3
 8019a18:	68fb      	ldr	r3, [r7, #12]
 8019a1a:	681b      	ldr	r3, [r3, #0]
 8019a1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8019a20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8019a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a24:	6a3a      	ldr	r2, [r7, #32]
 8019a26:	492d      	ldr	r1, [pc, #180]	; (8019adc <I2C_RequestMemoryWrite+0x128>)
 8019a28:	68f8      	ldr	r0, [r7, #12]
 8019a2a:	f000 fa40 	bl	8019eae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8019a2e:	4603      	mov	r3, r0
 8019a30:	2b00      	cmp	r3, #0
 8019a32:	d001      	beq.n	8019a38 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8019a34:	2301      	movs	r3, #1
 8019a36:	e04c      	b.n	8019ad2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8019a38:	2300      	movs	r3, #0
 8019a3a:	617b      	str	r3, [r7, #20]
 8019a3c:	68fb      	ldr	r3, [r7, #12]
 8019a3e:	681b      	ldr	r3, [r3, #0]
 8019a40:	695b      	ldr	r3, [r3, #20]
 8019a42:	617b      	str	r3, [r7, #20]
 8019a44:	68fb      	ldr	r3, [r7, #12]
 8019a46:	681b      	ldr	r3, [r3, #0]
 8019a48:	699b      	ldr	r3, [r3, #24]
 8019a4a:	617b      	str	r3, [r7, #20]
 8019a4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8019a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019a50:	6a39      	ldr	r1, [r7, #32]
 8019a52:	68f8      	ldr	r0, [r7, #12]
 8019a54:	f000 faaa 	bl	8019fac <I2C_WaitOnTXEFlagUntilTimeout>
 8019a58:	4603      	mov	r3, r0
 8019a5a:	2b00      	cmp	r3, #0
 8019a5c:	d00d      	beq.n	8019a7a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8019a5e:	68fb      	ldr	r3, [r7, #12]
 8019a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019a62:	2b04      	cmp	r3, #4
 8019a64:	d107      	bne.n	8019a76 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8019a66:	68fb      	ldr	r3, [r7, #12]
 8019a68:	681b      	ldr	r3, [r3, #0]
 8019a6a:	681a      	ldr	r2, [r3, #0]
 8019a6c:	68fb      	ldr	r3, [r7, #12]
 8019a6e:	681b      	ldr	r3, [r3, #0]
 8019a70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019a74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8019a76:	2301      	movs	r3, #1
 8019a78:	e02b      	b.n	8019ad2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8019a7a:	88fb      	ldrh	r3, [r7, #6]
 8019a7c:	2b01      	cmp	r3, #1
 8019a7e:	d105      	bne.n	8019a8c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8019a80:	893b      	ldrh	r3, [r7, #8]
 8019a82:	b2da      	uxtb	r2, r3
 8019a84:	68fb      	ldr	r3, [r7, #12]
 8019a86:	681b      	ldr	r3, [r3, #0]
 8019a88:	611a      	str	r2, [r3, #16]
 8019a8a:	e021      	b.n	8019ad0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8019a8c:	893b      	ldrh	r3, [r7, #8]
 8019a8e:	0a1b      	lsrs	r3, r3, #8
 8019a90:	b29b      	uxth	r3, r3
 8019a92:	b2da      	uxtb	r2, r3
 8019a94:	68fb      	ldr	r3, [r7, #12]
 8019a96:	681b      	ldr	r3, [r3, #0]
 8019a98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8019a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019a9c:	6a39      	ldr	r1, [r7, #32]
 8019a9e:	68f8      	ldr	r0, [r7, #12]
 8019aa0:	f000 fa84 	bl	8019fac <I2C_WaitOnTXEFlagUntilTimeout>
 8019aa4:	4603      	mov	r3, r0
 8019aa6:	2b00      	cmp	r3, #0
 8019aa8:	d00d      	beq.n	8019ac6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8019aaa:	68fb      	ldr	r3, [r7, #12]
 8019aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019aae:	2b04      	cmp	r3, #4
 8019ab0:	d107      	bne.n	8019ac2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8019ab2:	68fb      	ldr	r3, [r7, #12]
 8019ab4:	681b      	ldr	r3, [r3, #0]
 8019ab6:	681a      	ldr	r2, [r3, #0]
 8019ab8:	68fb      	ldr	r3, [r7, #12]
 8019aba:	681b      	ldr	r3, [r3, #0]
 8019abc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019ac0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8019ac2:	2301      	movs	r3, #1
 8019ac4:	e005      	b.n	8019ad2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8019ac6:	893b      	ldrh	r3, [r7, #8]
 8019ac8:	b2da      	uxtb	r2, r3
 8019aca:	68fb      	ldr	r3, [r7, #12]
 8019acc:	681b      	ldr	r3, [r3, #0]
 8019ace:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8019ad0:	2300      	movs	r3, #0
}
 8019ad2:	4618      	mov	r0, r3
 8019ad4:	3718      	adds	r7, #24
 8019ad6:	46bd      	mov	sp, r7
 8019ad8:	bd80      	pop	{r7, pc}
 8019ada:	bf00      	nop
 8019adc:	00010002 	.word	0x00010002

08019ae0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8019ae0:	b580      	push	{r7, lr}
 8019ae2:	b088      	sub	sp, #32
 8019ae4:	af02      	add	r7, sp, #8
 8019ae6:	60f8      	str	r0, [r7, #12]
 8019ae8:	4608      	mov	r0, r1
 8019aea:	4611      	mov	r1, r2
 8019aec:	461a      	mov	r2, r3
 8019aee:	4603      	mov	r3, r0
 8019af0:	817b      	strh	r3, [r7, #10]
 8019af2:	460b      	mov	r3, r1
 8019af4:	813b      	strh	r3, [r7, #8]
 8019af6:	4613      	mov	r3, r2
 8019af8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019afa:	68fb      	ldr	r3, [r7, #12]
 8019afc:	681b      	ldr	r3, [r3, #0]
 8019afe:	681a      	ldr	r2, [r3, #0]
 8019b00:	68fb      	ldr	r3, [r7, #12]
 8019b02:	681b      	ldr	r3, [r3, #0]
 8019b04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8019b08:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8019b0a:	68fb      	ldr	r3, [r7, #12]
 8019b0c:	681b      	ldr	r3, [r3, #0]
 8019b0e:	681a      	ldr	r2, [r3, #0]
 8019b10:	68fb      	ldr	r3, [r7, #12]
 8019b12:	681b      	ldr	r3, [r3, #0]
 8019b14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019b18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8019b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b1c:	9300      	str	r3, [sp, #0]
 8019b1e:	6a3b      	ldr	r3, [r7, #32]
 8019b20:	2200      	movs	r2, #0
 8019b22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8019b26:	68f8      	ldr	r0, [r7, #12]
 8019b28:	f000 f96a 	bl	8019e00 <I2C_WaitOnFlagUntilTimeout>
 8019b2c:	4603      	mov	r3, r0
 8019b2e:	2b00      	cmp	r3, #0
 8019b30:	d00d      	beq.n	8019b4e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8019b32:	68fb      	ldr	r3, [r7, #12]
 8019b34:	681b      	ldr	r3, [r3, #0]
 8019b36:	681b      	ldr	r3, [r3, #0]
 8019b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019b3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019b40:	d103      	bne.n	8019b4a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8019b42:	68fb      	ldr	r3, [r7, #12]
 8019b44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019b48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8019b4a:	2303      	movs	r3, #3
 8019b4c:	e0aa      	b.n	8019ca4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8019b4e:	897b      	ldrh	r3, [r7, #10]
 8019b50:	b2db      	uxtb	r3, r3
 8019b52:	461a      	mov	r2, r3
 8019b54:	68fb      	ldr	r3, [r7, #12]
 8019b56:	681b      	ldr	r3, [r3, #0]
 8019b58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8019b5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8019b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b60:	6a3a      	ldr	r2, [r7, #32]
 8019b62:	4952      	ldr	r1, [pc, #328]	; (8019cac <I2C_RequestMemoryRead+0x1cc>)
 8019b64:	68f8      	ldr	r0, [r7, #12]
 8019b66:	f000 f9a2 	bl	8019eae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8019b6a:	4603      	mov	r3, r0
 8019b6c:	2b00      	cmp	r3, #0
 8019b6e:	d001      	beq.n	8019b74 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8019b70:	2301      	movs	r3, #1
 8019b72:	e097      	b.n	8019ca4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8019b74:	2300      	movs	r3, #0
 8019b76:	617b      	str	r3, [r7, #20]
 8019b78:	68fb      	ldr	r3, [r7, #12]
 8019b7a:	681b      	ldr	r3, [r3, #0]
 8019b7c:	695b      	ldr	r3, [r3, #20]
 8019b7e:	617b      	str	r3, [r7, #20]
 8019b80:	68fb      	ldr	r3, [r7, #12]
 8019b82:	681b      	ldr	r3, [r3, #0]
 8019b84:	699b      	ldr	r3, [r3, #24]
 8019b86:	617b      	str	r3, [r7, #20]
 8019b88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8019b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019b8c:	6a39      	ldr	r1, [r7, #32]
 8019b8e:	68f8      	ldr	r0, [r7, #12]
 8019b90:	f000 fa0c 	bl	8019fac <I2C_WaitOnTXEFlagUntilTimeout>
 8019b94:	4603      	mov	r3, r0
 8019b96:	2b00      	cmp	r3, #0
 8019b98:	d00d      	beq.n	8019bb6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8019b9a:	68fb      	ldr	r3, [r7, #12]
 8019b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019b9e:	2b04      	cmp	r3, #4
 8019ba0:	d107      	bne.n	8019bb2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8019ba2:	68fb      	ldr	r3, [r7, #12]
 8019ba4:	681b      	ldr	r3, [r3, #0]
 8019ba6:	681a      	ldr	r2, [r3, #0]
 8019ba8:	68fb      	ldr	r3, [r7, #12]
 8019baa:	681b      	ldr	r3, [r3, #0]
 8019bac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019bb0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8019bb2:	2301      	movs	r3, #1
 8019bb4:	e076      	b.n	8019ca4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8019bb6:	88fb      	ldrh	r3, [r7, #6]
 8019bb8:	2b01      	cmp	r3, #1
 8019bba:	d105      	bne.n	8019bc8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8019bbc:	893b      	ldrh	r3, [r7, #8]
 8019bbe:	b2da      	uxtb	r2, r3
 8019bc0:	68fb      	ldr	r3, [r7, #12]
 8019bc2:	681b      	ldr	r3, [r3, #0]
 8019bc4:	611a      	str	r2, [r3, #16]
 8019bc6:	e021      	b.n	8019c0c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8019bc8:	893b      	ldrh	r3, [r7, #8]
 8019bca:	0a1b      	lsrs	r3, r3, #8
 8019bcc:	b29b      	uxth	r3, r3
 8019bce:	b2da      	uxtb	r2, r3
 8019bd0:	68fb      	ldr	r3, [r7, #12]
 8019bd2:	681b      	ldr	r3, [r3, #0]
 8019bd4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8019bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019bd8:	6a39      	ldr	r1, [r7, #32]
 8019bda:	68f8      	ldr	r0, [r7, #12]
 8019bdc:	f000 f9e6 	bl	8019fac <I2C_WaitOnTXEFlagUntilTimeout>
 8019be0:	4603      	mov	r3, r0
 8019be2:	2b00      	cmp	r3, #0
 8019be4:	d00d      	beq.n	8019c02 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8019be6:	68fb      	ldr	r3, [r7, #12]
 8019be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019bea:	2b04      	cmp	r3, #4
 8019bec:	d107      	bne.n	8019bfe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8019bee:	68fb      	ldr	r3, [r7, #12]
 8019bf0:	681b      	ldr	r3, [r3, #0]
 8019bf2:	681a      	ldr	r2, [r3, #0]
 8019bf4:	68fb      	ldr	r3, [r7, #12]
 8019bf6:	681b      	ldr	r3, [r3, #0]
 8019bf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019bfc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8019bfe:	2301      	movs	r3, #1
 8019c00:	e050      	b.n	8019ca4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8019c02:	893b      	ldrh	r3, [r7, #8]
 8019c04:	b2da      	uxtb	r2, r3
 8019c06:	68fb      	ldr	r3, [r7, #12]
 8019c08:	681b      	ldr	r3, [r3, #0]
 8019c0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8019c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019c0e:	6a39      	ldr	r1, [r7, #32]
 8019c10:	68f8      	ldr	r0, [r7, #12]
 8019c12:	f000 f9cb 	bl	8019fac <I2C_WaitOnTXEFlagUntilTimeout>
 8019c16:	4603      	mov	r3, r0
 8019c18:	2b00      	cmp	r3, #0
 8019c1a:	d00d      	beq.n	8019c38 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8019c1c:	68fb      	ldr	r3, [r7, #12]
 8019c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019c20:	2b04      	cmp	r3, #4
 8019c22:	d107      	bne.n	8019c34 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8019c24:	68fb      	ldr	r3, [r7, #12]
 8019c26:	681b      	ldr	r3, [r3, #0]
 8019c28:	681a      	ldr	r2, [r3, #0]
 8019c2a:	68fb      	ldr	r3, [r7, #12]
 8019c2c:	681b      	ldr	r3, [r3, #0]
 8019c2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019c32:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8019c34:	2301      	movs	r3, #1
 8019c36:	e035      	b.n	8019ca4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8019c38:	68fb      	ldr	r3, [r7, #12]
 8019c3a:	681b      	ldr	r3, [r3, #0]
 8019c3c:	681a      	ldr	r2, [r3, #0]
 8019c3e:	68fb      	ldr	r3, [r7, #12]
 8019c40:	681b      	ldr	r3, [r3, #0]
 8019c42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019c46:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8019c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c4a:	9300      	str	r3, [sp, #0]
 8019c4c:	6a3b      	ldr	r3, [r7, #32]
 8019c4e:	2200      	movs	r2, #0
 8019c50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8019c54:	68f8      	ldr	r0, [r7, #12]
 8019c56:	f000 f8d3 	bl	8019e00 <I2C_WaitOnFlagUntilTimeout>
 8019c5a:	4603      	mov	r3, r0
 8019c5c:	2b00      	cmp	r3, #0
 8019c5e:	d00d      	beq.n	8019c7c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8019c60:	68fb      	ldr	r3, [r7, #12]
 8019c62:	681b      	ldr	r3, [r3, #0]
 8019c64:	681b      	ldr	r3, [r3, #0]
 8019c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019c6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019c6e:	d103      	bne.n	8019c78 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8019c70:	68fb      	ldr	r3, [r7, #12]
 8019c72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019c76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8019c78:	2303      	movs	r3, #3
 8019c7a:	e013      	b.n	8019ca4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8019c7c:	897b      	ldrh	r3, [r7, #10]
 8019c7e:	b2db      	uxtb	r3, r3
 8019c80:	f043 0301 	orr.w	r3, r3, #1
 8019c84:	b2da      	uxtb	r2, r3
 8019c86:	68fb      	ldr	r3, [r7, #12]
 8019c88:	681b      	ldr	r3, [r3, #0]
 8019c8a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8019c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c8e:	6a3a      	ldr	r2, [r7, #32]
 8019c90:	4906      	ldr	r1, [pc, #24]	; (8019cac <I2C_RequestMemoryRead+0x1cc>)
 8019c92:	68f8      	ldr	r0, [r7, #12]
 8019c94:	f000 f90b 	bl	8019eae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8019c98:	4603      	mov	r3, r0
 8019c9a:	2b00      	cmp	r3, #0
 8019c9c:	d001      	beq.n	8019ca2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8019c9e:	2301      	movs	r3, #1
 8019ca0:	e000      	b.n	8019ca4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8019ca2:	2300      	movs	r3, #0
}
 8019ca4:	4618      	mov	r0, r3
 8019ca6:	3718      	adds	r7, #24
 8019ca8:	46bd      	mov	sp, r7
 8019caa:	bd80      	pop	{r7, pc}
 8019cac:	00010002 	.word	0x00010002

08019cb0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8019cb0:	b580      	push	{r7, lr}
 8019cb2:	b086      	sub	sp, #24
 8019cb4:	af00      	add	r7, sp, #0
 8019cb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8019cb8:	2300      	movs	r3, #0
 8019cba:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8019cbc:	687b      	ldr	r3, [r7, #4]
 8019cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019cc0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8019cc2:	697b      	ldr	r3, [r7, #20]
 8019cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019cc8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8019cca:	4b4b      	ldr	r3, [pc, #300]	; (8019df8 <I2C_DMAAbort+0x148>)
 8019ccc:	681b      	ldr	r3, [r3, #0]
 8019cce:	08db      	lsrs	r3, r3, #3
 8019cd0:	4a4a      	ldr	r2, [pc, #296]	; (8019dfc <I2C_DMAAbort+0x14c>)
 8019cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8019cd6:	0a1a      	lsrs	r2, r3, #8
 8019cd8:	4613      	mov	r3, r2
 8019cda:	009b      	lsls	r3, r3, #2
 8019cdc:	4413      	add	r3, r2
 8019cde:	00da      	lsls	r2, r3, #3
 8019ce0:	1ad3      	subs	r3, r2, r3
 8019ce2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8019ce4:	68fb      	ldr	r3, [r7, #12]
 8019ce6:	2b00      	cmp	r3, #0
 8019ce8:	d106      	bne.n	8019cf8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8019cea:	697b      	ldr	r3, [r7, #20]
 8019cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019cee:	f043 0220 	orr.w	r2, r3, #32
 8019cf2:	697b      	ldr	r3, [r7, #20]
 8019cf4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8019cf6:	e00a      	b.n	8019d0e <I2C_DMAAbort+0x5e>
    }
    count--;
 8019cf8:	68fb      	ldr	r3, [r7, #12]
 8019cfa:	3b01      	subs	r3, #1
 8019cfc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8019cfe:	697b      	ldr	r3, [r7, #20]
 8019d00:	681b      	ldr	r3, [r3, #0]
 8019d02:	681b      	ldr	r3, [r3, #0]
 8019d04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019d0c:	d0ea      	beq.n	8019ce4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8019d0e:	697b      	ldr	r3, [r7, #20]
 8019d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019d12:	2b00      	cmp	r3, #0
 8019d14:	d003      	beq.n	8019d1e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8019d16:	697b      	ldr	r3, [r7, #20]
 8019d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019d1a:	2200      	movs	r2, #0
 8019d1c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8019d1e:	697b      	ldr	r3, [r7, #20]
 8019d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019d22:	2b00      	cmp	r3, #0
 8019d24:	d003      	beq.n	8019d2e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8019d26:	697b      	ldr	r3, [r7, #20]
 8019d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019d2a:	2200      	movs	r2, #0
 8019d2c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019d2e:	697b      	ldr	r3, [r7, #20]
 8019d30:	681b      	ldr	r3, [r3, #0]
 8019d32:	681a      	ldr	r2, [r3, #0]
 8019d34:	697b      	ldr	r3, [r7, #20]
 8019d36:	681b      	ldr	r3, [r3, #0]
 8019d38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019d3c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8019d3e:	697b      	ldr	r3, [r7, #20]
 8019d40:	2200      	movs	r2, #0
 8019d42:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8019d44:	697b      	ldr	r3, [r7, #20]
 8019d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019d48:	2b00      	cmp	r3, #0
 8019d4a:	d003      	beq.n	8019d54 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8019d4c:	697b      	ldr	r3, [r7, #20]
 8019d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019d50:	2200      	movs	r2, #0
 8019d52:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8019d54:	697b      	ldr	r3, [r7, #20]
 8019d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019d58:	2b00      	cmp	r3, #0
 8019d5a:	d003      	beq.n	8019d64 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8019d5c:	697b      	ldr	r3, [r7, #20]
 8019d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019d60:	2200      	movs	r2, #0
 8019d62:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8019d64:	697b      	ldr	r3, [r7, #20]
 8019d66:	681b      	ldr	r3, [r3, #0]
 8019d68:	681a      	ldr	r2, [r3, #0]
 8019d6a:	697b      	ldr	r3, [r7, #20]
 8019d6c:	681b      	ldr	r3, [r3, #0]
 8019d6e:	f022 0201 	bic.w	r2, r2, #1
 8019d72:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8019d74:	697b      	ldr	r3, [r7, #20]
 8019d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019d7a:	b2db      	uxtb	r3, r3
 8019d7c:	2b60      	cmp	r3, #96	; 0x60
 8019d7e:	d10e      	bne.n	8019d9e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8019d80:	697b      	ldr	r3, [r7, #20]
 8019d82:	2220      	movs	r2, #32
 8019d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8019d88:	697b      	ldr	r3, [r7, #20]
 8019d8a:	2200      	movs	r2, #0
 8019d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8019d90:	697b      	ldr	r3, [r7, #20]
 8019d92:	2200      	movs	r2, #0
 8019d94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8019d96:	6978      	ldr	r0, [r7, #20]
 8019d98:	f7fe fc9c 	bl	80186d4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8019d9c:	e027      	b.n	8019dee <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8019d9e:	7cfb      	ldrb	r3, [r7, #19]
 8019da0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8019da4:	2b28      	cmp	r3, #40	; 0x28
 8019da6:	d117      	bne.n	8019dd8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8019da8:	697b      	ldr	r3, [r7, #20]
 8019daa:	681b      	ldr	r3, [r3, #0]
 8019dac:	681a      	ldr	r2, [r3, #0]
 8019dae:	697b      	ldr	r3, [r7, #20]
 8019db0:	681b      	ldr	r3, [r3, #0]
 8019db2:	f042 0201 	orr.w	r2, r2, #1
 8019db6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019db8:	697b      	ldr	r3, [r7, #20]
 8019dba:	681b      	ldr	r3, [r3, #0]
 8019dbc:	681a      	ldr	r2, [r3, #0]
 8019dbe:	697b      	ldr	r3, [r7, #20]
 8019dc0:	681b      	ldr	r3, [r3, #0]
 8019dc2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8019dc6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8019dc8:	697b      	ldr	r3, [r7, #20]
 8019dca:	2200      	movs	r2, #0
 8019dcc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8019dce:	697b      	ldr	r3, [r7, #20]
 8019dd0:	2228      	movs	r2, #40	; 0x28
 8019dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8019dd6:	e007      	b.n	8019de8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8019dd8:	697b      	ldr	r3, [r7, #20]
 8019dda:	2220      	movs	r2, #32
 8019ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8019de0:	697b      	ldr	r3, [r7, #20]
 8019de2:	2200      	movs	r2, #0
 8019de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8019de8:	6978      	ldr	r0, [r7, #20]
 8019dea:	f7fe fc69 	bl	80186c0 <HAL_I2C_ErrorCallback>
}
 8019dee:	bf00      	nop
 8019df0:	3718      	adds	r7, #24
 8019df2:	46bd      	mov	sp, r7
 8019df4:	bd80      	pop	{r7, pc}
 8019df6:	bf00      	nop
 8019df8:	200001e0 	.word	0x200001e0
 8019dfc:	14f8b589 	.word	0x14f8b589

08019e00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8019e00:	b580      	push	{r7, lr}
 8019e02:	b084      	sub	sp, #16
 8019e04:	af00      	add	r7, sp, #0
 8019e06:	60f8      	str	r0, [r7, #12]
 8019e08:	60b9      	str	r1, [r7, #8]
 8019e0a:	603b      	str	r3, [r7, #0]
 8019e0c:	4613      	mov	r3, r2
 8019e0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8019e10:	e025      	b.n	8019e5e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8019e12:	683b      	ldr	r3, [r7, #0]
 8019e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019e18:	d021      	beq.n	8019e5e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019e1a:	f7fc fc9d 	bl	8016758 <HAL_GetTick>
 8019e1e:	4602      	mov	r2, r0
 8019e20:	69bb      	ldr	r3, [r7, #24]
 8019e22:	1ad3      	subs	r3, r2, r3
 8019e24:	683a      	ldr	r2, [r7, #0]
 8019e26:	429a      	cmp	r2, r3
 8019e28:	d302      	bcc.n	8019e30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8019e2a:	683b      	ldr	r3, [r7, #0]
 8019e2c:	2b00      	cmp	r3, #0
 8019e2e:	d116      	bne.n	8019e5e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8019e30:	68fb      	ldr	r3, [r7, #12]
 8019e32:	2200      	movs	r2, #0
 8019e34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8019e36:	68fb      	ldr	r3, [r7, #12]
 8019e38:	2220      	movs	r2, #32
 8019e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8019e3e:	68fb      	ldr	r3, [r7, #12]
 8019e40:	2200      	movs	r2, #0
 8019e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8019e46:	68fb      	ldr	r3, [r7, #12]
 8019e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019e4a:	f043 0220 	orr.w	r2, r3, #32
 8019e4e:	68fb      	ldr	r3, [r7, #12]
 8019e50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8019e52:	68fb      	ldr	r3, [r7, #12]
 8019e54:	2200      	movs	r2, #0
 8019e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8019e5a:	2301      	movs	r3, #1
 8019e5c:	e023      	b.n	8019ea6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8019e5e:	68bb      	ldr	r3, [r7, #8]
 8019e60:	0c1b      	lsrs	r3, r3, #16
 8019e62:	b2db      	uxtb	r3, r3
 8019e64:	2b01      	cmp	r3, #1
 8019e66:	d10d      	bne.n	8019e84 <I2C_WaitOnFlagUntilTimeout+0x84>
 8019e68:	68fb      	ldr	r3, [r7, #12]
 8019e6a:	681b      	ldr	r3, [r3, #0]
 8019e6c:	695b      	ldr	r3, [r3, #20]
 8019e6e:	43da      	mvns	r2, r3
 8019e70:	68bb      	ldr	r3, [r7, #8]
 8019e72:	4013      	ands	r3, r2
 8019e74:	b29b      	uxth	r3, r3
 8019e76:	2b00      	cmp	r3, #0
 8019e78:	bf0c      	ite	eq
 8019e7a:	2301      	moveq	r3, #1
 8019e7c:	2300      	movne	r3, #0
 8019e7e:	b2db      	uxtb	r3, r3
 8019e80:	461a      	mov	r2, r3
 8019e82:	e00c      	b.n	8019e9e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8019e84:	68fb      	ldr	r3, [r7, #12]
 8019e86:	681b      	ldr	r3, [r3, #0]
 8019e88:	699b      	ldr	r3, [r3, #24]
 8019e8a:	43da      	mvns	r2, r3
 8019e8c:	68bb      	ldr	r3, [r7, #8]
 8019e8e:	4013      	ands	r3, r2
 8019e90:	b29b      	uxth	r3, r3
 8019e92:	2b00      	cmp	r3, #0
 8019e94:	bf0c      	ite	eq
 8019e96:	2301      	moveq	r3, #1
 8019e98:	2300      	movne	r3, #0
 8019e9a:	b2db      	uxtb	r3, r3
 8019e9c:	461a      	mov	r2, r3
 8019e9e:	79fb      	ldrb	r3, [r7, #7]
 8019ea0:	429a      	cmp	r2, r3
 8019ea2:	d0b6      	beq.n	8019e12 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8019ea4:	2300      	movs	r3, #0
}
 8019ea6:	4618      	mov	r0, r3
 8019ea8:	3710      	adds	r7, #16
 8019eaa:	46bd      	mov	sp, r7
 8019eac:	bd80      	pop	{r7, pc}

08019eae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8019eae:	b580      	push	{r7, lr}
 8019eb0:	b084      	sub	sp, #16
 8019eb2:	af00      	add	r7, sp, #0
 8019eb4:	60f8      	str	r0, [r7, #12]
 8019eb6:	60b9      	str	r1, [r7, #8]
 8019eb8:	607a      	str	r2, [r7, #4]
 8019eba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8019ebc:	e051      	b.n	8019f62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8019ebe:	68fb      	ldr	r3, [r7, #12]
 8019ec0:	681b      	ldr	r3, [r3, #0]
 8019ec2:	695b      	ldr	r3, [r3, #20]
 8019ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8019ec8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019ecc:	d123      	bne.n	8019f16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8019ece:	68fb      	ldr	r3, [r7, #12]
 8019ed0:	681b      	ldr	r3, [r3, #0]
 8019ed2:	681a      	ldr	r2, [r3, #0]
 8019ed4:	68fb      	ldr	r3, [r7, #12]
 8019ed6:	681b      	ldr	r3, [r3, #0]
 8019ed8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019edc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019ede:	68fb      	ldr	r3, [r7, #12]
 8019ee0:	681b      	ldr	r3, [r3, #0]
 8019ee2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8019ee6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8019ee8:	68fb      	ldr	r3, [r7, #12]
 8019eea:	2200      	movs	r2, #0
 8019eec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8019eee:	68fb      	ldr	r3, [r7, #12]
 8019ef0:	2220      	movs	r2, #32
 8019ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8019ef6:	68fb      	ldr	r3, [r7, #12]
 8019ef8:	2200      	movs	r2, #0
 8019efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8019efe:	68fb      	ldr	r3, [r7, #12]
 8019f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019f02:	f043 0204 	orr.w	r2, r3, #4
 8019f06:	68fb      	ldr	r3, [r7, #12]
 8019f08:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8019f0a:	68fb      	ldr	r3, [r7, #12]
 8019f0c:	2200      	movs	r2, #0
 8019f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8019f12:	2301      	movs	r3, #1
 8019f14:	e046      	b.n	8019fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8019f16:	687b      	ldr	r3, [r7, #4]
 8019f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019f1c:	d021      	beq.n	8019f62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019f1e:	f7fc fc1b 	bl	8016758 <HAL_GetTick>
 8019f22:	4602      	mov	r2, r0
 8019f24:	683b      	ldr	r3, [r7, #0]
 8019f26:	1ad3      	subs	r3, r2, r3
 8019f28:	687a      	ldr	r2, [r7, #4]
 8019f2a:	429a      	cmp	r2, r3
 8019f2c:	d302      	bcc.n	8019f34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8019f2e:	687b      	ldr	r3, [r7, #4]
 8019f30:	2b00      	cmp	r3, #0
 8019f32:	d116      	bne.n	8019f62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8019f34:	68fb      	ldr	r3, [r7, #12]
 8019f36:	2200      	movs	r2, #0
 8019f38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8019f3a:	68fb      	ldr	r3, [r7, #12]
 8019f3c:	2220      	movs	r2, #32
 8019f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8019f42:	68fb      	ldr	r3, [r7, #12]
 8019f44:	2200      	movs	r2, #0
 8019f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8019f4a:	68fb      	ldr	r3, [r7, #12]
 8019f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019f4e:	f043 0220 	orr.w	r2, r3, #32
 8019f52:	68fb      	ldr	r3, [r7, #12]
 8019f54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8019f56:	68fb      	ldr	r3, [r7, #12]
 8019f58:	2200      	movs	r2, #0
 8019f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8019f5e:	2301      	movs	r3, #1
 8019f60:	e020      	b.n	8019fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8019f62:	68bb      	ldr	r3, [r7, #8]
 8019f64:	0c1b      	lsrs	r3, r3, #16
 8019f66:	b2db      	uxtb	r3, r3
 8019f68:	2b01      	cmp	r3, #1
 8019f6a:	d10c      	bne.n	8019f86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8019f6c:	68fb      	ldr	r3, [r7, #12]
 8019f6e:	681b      	ldr	r3, [r3, #0]
 8019f70:	695b      	ldr	r3, [r3, #20]
 8019f72:	43da      	mvns	r2, r3
 8019f74:	68bb      	ldr	r3, [r7, #8]
 8019f76:	4013      	ands	r3, r2
 8019f78:	b29b      	uxth	r3, r3
 8019f7a:	2b00      	cmp	r3, #0
 8019f7c:	bf14      	ite	ne
 8019f7e:	2301      	movne	r3, #1
 8019f80:	2300      	moveq	r3, #0
 8019f82:	b2db      	uxtb	r3, r3
 8019f84:	e00b      	b.n	8019f9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8019f86:	68fb      	ldr	r3, [r7, #12]
 8019f88:	681b      	ldr	r3, [r3, #0]
 8019f8a:	699b      	ldr	r3, [r3, #24]
 8019f8c:	43da      	mvns	r2, r3
 8019f8e:	68bb      	ldr	r3, [r7, #8]
 8019f90:	4013      	ands	r3, r2
 8019f92:	b29b      	uxth	r3, r3
 8019f94:	2b00      	cmp	r3, #0
 8019f96:	bf14      	ite	ne
 8019f98:	2301      	movne	r3, #1
 8019f9a:	2300      	moveq	r3, #0
 8019f9c:	b2db      	uxtb	r3, r3
 8019f9e:	2b00      	cmp	r3, #0
 8019fa0:	d18d      	bne.n	8019ebe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8019fa2:	2300      	movs	r3, #0
}
 8019fa4:	4618      	mov	r0, r3
 8019fa6:	3710      	adds	r7, #16
 8019fa8:	46bd      	mov	sp, r7
 8019faa:	bd80      	pop	{r7, pc}

08019fac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8019fac:	b580      	push	{r7, lr}
 8019fae:	b084      	sub	sp, #16
 8019fb0:	af00      	add	r7, sp, #0
 8019fb2:	60f8      	str	r0, [r7, #12]
 8019fb4:	60b9      	str	r1, [r7, #8]
 8019fb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8019fb8:	e02d      	b.n	801a016 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8019fba:	68f8      	ldr	r0, [r7, #12]
 8019fbc:	f000 f900 	bl	801a1c0 <I2C_IsAcknowledgeFailed>
 8019fc0:	4603      	mov	r3, r0
 8019fc2:	2b00      	cmp	r3, #0
 8019fc4:	d001      	beq.n	8019fca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8019fc6:	2301      	movs	r3, #1
 8019fc8:	e02d      	b.n	801a026 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8019fca:	68bb      	ldr	r3, [r7, #8]
 8019fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019fd0:	d021      	beq.n	801a016 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019fd2:	f7fc fbc1 	bl	8016758 <HAL_GetTick>
 8019fd6:	4602      	mov	r2, r0
 8019fd8:	687b      	ldr	r3, [r7, #4]
 8019fda:	1ad3      	subs	r3, r2, r3
 8019fdc:	68ba      	ldr	r2, [r7, #8]
 8019fde:	429a      	cmp	r2, r3
 8019fe0:	d302      	bcc.n	8019fe8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8019fe2:	68bb      	ldr	r3, [r7, #8]
 8019fe4:	2b00      	cmp	r3, #0
 8019fe6:	d116      	bne.n	801a016 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8019fe8:	68fb      	ldr	r3, [r7, #12]
 8019fea:	2200      	movs	r2, #0
 8019fec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8019fee:	68fb      	ldr	r3, [r7, #12]
 8019ff0:	2220      	movs	r2, #32
 8019ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8019ff6:	68fb      	ldr	r3, [r7, #12]
 8019ff8:	2200      	movs	r2, #0
 8019ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8019ffe:	68fb      	ldr	r3, [r7, #12]
 801a000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a002:	f043 0220 	orr.w	r2, r3, #32
 801a006:	68fb      	ldr	r3, [r7, #12]
 801a008:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801a00a:	68fb      	ldr	r3, [r7, #12]
 801a00c:	2200      	movs	r2, #0
 801a00e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801a012:	2301      	movs	r3, #1
 801a014:	e007      	b.n	801a026 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801a016:	68fb      	ldr	r3, [r7, #12]
 801a018:	681b      	ldr	r3, [r3, #0]
 801a01a:	695b      	ldr	r3, [r3, #20]
 801a01c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a020:	2b80      	cmp	r3, #128	; 0x80
 801a022:	d1ca      	bne.n	8019fba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801a024:	2300      	movs	r3, #0
}
 801a026:	4618      	mov	r0, r3
 801a028:	3710      	adds	r7, #16
 801a02a:	46bd      	mov	sp, r7
 801a02c:	bd80      	pop	{r7, pc}

0801a02e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801a02e:	b580      	push	{r7, lr}
 801a030:	b084      	sub	sp, #16
 801a032:	af00      	add	r7, sp, #0
 801a034:	60f8      	str	r0, [r7, #12]
 801a036:	60b9      	str	r1, [r7, #8]
 801a038:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 801a03a:	e02d      	b.n	801a098 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 801a03c:	68f8      	ldr	r0, [r7, #12]
 801a03e:	f000 f8bf 	bl	801a1c0 <I2C_IsAcknowledgeFailed>
 801a042:	4603      	mov	r3, r0
 801a044:	2b00      	cmp	r3, #0
 801a046:	d001      	beq.n	801a04c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801a048:	2301      	movs	r3, #1
 801a04a:	e02d      	b.n	801a0a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801a04c:	68bb      	ldr	r3, [r7, #8]
 801a04e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a052:	d021      	beq.n	801a098 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a054:	f7fc fb80 	bl	8016758 <HAL_GetTick>
 801a058:	4602      	mov	r2, r0
 801a05a:	687b      	ldr	r3, [r7, #4]
 801a05c:	1ad3      	subs	r3, r2, r3
 801a05e:	68ba      	ldr	r2, [r7, #8]
 801a060:	429a      	cmp	r2, r3
 801a062:	d302      	bcc.n	801a06a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 801a064:	68bb      	ldr	r3, [r7, #8]
 801a066:	2b00      	cmp	r3, #0
 801a068:	d116      	bne.n	801a098 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801a06a:	68fb      	ldr	r3, [r7, #12]
 801a06c:	2200      	movs	r2, #0
 801a06e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801a070:	68fb      	ldr	r3, [r7, #12]
 801a072:	2220      	movs	r2, #32
 801a074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801a078:	68fb      	ldr	r3, [r7, #12]
 801a07a:	2200      	movs	r2, #0
 801a07c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801a080:	68fb      	ldr	r3, [r7, #12]
 801a082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a084:	f043 0220 	orr.w	r2, r3, #32
 801a088:	68fb      	ldr	r3, [r7, #12]
 801a08a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801a08c:	68fb      	ldr	r3, [r7, #12]
 801a08e:	2200      	movs	r2, #0
 801a090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801a094:	2301      	movs	r3, #1
 801a096:	e007      	b.n	801a0a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 801a098:	68fb      	ldr	r3, [r7, #12]
 801a09a:	681b      	ldr	r3, [r3, #0]
 801a09c:	695b      	ldr	r3, [r3, #20]
 801a09e:	f003 0304 	and.w	r3, r3, #4
 801a0a2:	2b04      	cmp	r3, #4
 801a0a4:	d1ca      	bne.n	801a03c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801a0a6:	2300      	movs	r3, #0
}
 801a0a8:	4618      	mov	r0, r3
 801a0aa:	3710      	adds	r7, #16
 801a0ac:	46bd      	mov	sp, r7
 801a0ae:	bd80      	pop	{r7, pc}

0801a0b0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 801a0b0:	b480      	push	{r7}
 801a0b2:	b085      	sub	sp, #20
 801a0b4:	af00      	add	r7, sp, #0
 801a0b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801a0b8:	2300      	movs	r3, #0
 801a0ba:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 801a0bc:	4b13      	ldr	r3, [pc, #76]	; (801a10c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 801a0be:	681b      	ldr	r3, [r3, #0]
 801a0c0:	08db      	lsrs	r3, r3, #3
 801a0c2:	4a13      	ldr	r2, [pc, #76]	; (801a110 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 801a0c4:	fba2 2303 	umull	r2, r3, r2, r3
 801a0c8:	0a1a      	lsrs	r2, r3, #8
 801a0ca:	4613      	mov	r3, r2
 801a0cc:	009b      	lsls	r3, r3, #2
 801a0ce:	4413      	add	r3, r2
 801a0d0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 801a0d2:	68fb      	ldr	r3, [r7, #12]
 801a0d4:	3b01      	subs	r3, #1
 801a0d6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 801a0d8:	68fb      	ldr	r3, [r7, #12]
 801a0da:	2b00      	cmp	r3, #0
 801a0dc:	d107      	bne.n	801a0ee <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801a0de:	687b      	ldr	r3, [r7, #4]
 801a0e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a0e2:	f043 0220 	orr.w	r2, r3, #32
 801a0e6:	687b      	ldr	r3, [r7, #4]
 801a0e8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 801a0ea:	2301      	movs	r3, #1
 801a0ec:	e008      	b.n	801a100 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 801a0ee:	687b      	ldr	r3, [r7, #4]
 801a0f0:	681b      	ldr	r3, [r3, #0]
 801a0f2:	681b      	ldr	r3, [r3, #0]
 801a0f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801a0f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a0fc:	d0e9      	beq.n	801a0d2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 801a0fe:	2300      	movs	r3, #0
}
 801a100:	4618      	mov	r0, r3
 801a102:	3714      	adds	r7, #20
 801a104:	46bd      	mov	sp, r7
 801a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a10a:	4770      	bx	lr
 801a10c:	200001e0 	.word	0x200001e0
 801a110:	14f8b589 	.word	0x14f8b589

0801a114 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801a114:	b580      	push	{r7, lr}
 801a116:	b084      	sub	sp, #16
 801a118:	af00      	add	r7, sp, #0
 801a11a:	60f8      	str	r0, [r7, #12]
 801a11c:	60b9      	str	r1, [r7, #8]
 801a11e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801a120:	e042      	b.n	801a1a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 801a122:	68fb      	ldr	r3, [r7, #12]
 801a124:	681b      	ldr	r3, [r3, #0]
 801a126:	695b      	ldr	r3, [r3, #20]
 801a128:	f003 0310 	and.w	r3, r3, #16
 801a12c:	2b10      	cmp	r3, #16
 801a12e:	d119      	bne.n	801a164 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801a130:	68fb      	ldr	r3, [r7, #12]
 801a132:	681b      	ldr	r3, [r3, #0]
 801a134:	f06f 0210 	mvn.w	r2, #16
 801a138:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 801a13a:	68fb      	ldr	r3, [r7, #12]
 801a13c:	2200      	movs	r2, #0
 801a13e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 801a140:	68fb      	ldr	r3, [r7, #12]
 801a142:	2220      	movs	r2, #32
 801a144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801a148:	68fb      	ldr	r3, [r7, #12]
 801a14a:	2200      	movs	r2, #0
 801a14c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 801a150:	68fb      	ldr	r3, [r7, #12]
 801a152:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801a154:	68fb      	ldr	r3, [r7, #12]
 801a156:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801a158:	68fb      	ldr	r3, [r7, #12]
 801a15a:	2200      	movs	r2, #0
 801a15c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801a160:	2301      	movs	r3, #1
 801a162:	e029      	b.n	801a1b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a164:	f7fc faf8 	bl	8016758 <HAL_GetTick>
 801a168:	4602      	mov	r2, r0
 801a16a:	687b      	ldr	r3, [r7, #4]
 801a16c:	1ad3      	subs	r3, r2, r3
 801a16e:	68ba      	ldr	r2, [r7, #8]
 801a170:	429a      	cmp	r2, r3
 801a172:	d302      	bcc.n	801a17a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 801a174:	68bb      	ldr	r3, [r7, #8]
 801a176:	2b00      	cmp	r3, #0
 801a178:	d116      	bne.n	801a1a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 801a17a:	68fb      	ldr	r3, [r7, #12]
 801a17c:	2200      	movs	r2, #0
 801a17e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 801a180:	68fb      	ldr	r3, [r7, #12]
 801a182:	2220      	movs	r2, #32
 801a184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801a188:	68fb      	ldr	r3, [r7, #12]
 801a18a:	2200      	movs	r2, #0
 801a18c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801a190:	68fb      	ldr	r3, [r7, #12]
 801a192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a194:	f043 0220 	orr.w	r2, r3, #32
 801a198:	68fb      	ldr	r3, [r7, #12]
 801a19a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801a19c:	68fb      	ldr	r3, [r7, #12]
 801a19e:	2200      	movs	r2, #0
 801a1a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801a1a4:	2301      	movs	r3, #1
 801a1a6:	e007      	b.n	801a1b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801a1a8:	68fb      	ldr	r3, [r7, #12]
 801a1aa:	681b      	ldr	r3, [r3, #0]
 801a1ac:	695b      	ldr	r3, [r3, #20]
 801a1ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a1b2:	2b40      	cmp	r3, #64	; 0x40
 801a1b4:	d1b5      	bne.n	801a122 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 801a1b6:	2300      	movs	r3, #0
}
 801a1b8:	4618      	mov	r0, r3
 801a1ba:	3710      	adds	r7, #16
 801a1bc:	46bd      	mov	sp, r7
 801a1be:	bd80      	pop	{r7, pc}

0801a1c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 801a1c0:	b480      	push	{r7}
 801a1c2:	b083      	sub	sp, #12
 801a1c4:	af00      	add	r7, sp, #0
 801a1c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801a1c8:	687b      	ldr	r3, [r7, #4]
 801a1ca:	681b      	ldr	r3, [r3, #0]
 801a1cc:	695b      	ldr	r3, [r3, #20]
 801a1ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801a1d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a1d6:	d11b      	bne.n	801a210 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801a1d8:	687b      	ldr	r3, [r7, #4]
 801a1da:	681b      	ldr	r3, [r3, #0]
 801a1dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801a1e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 801a1e2:	687b      	ldr	r3, [r7, #4]
 801a1e4:	2200      	movs	r2, #0
 801a1e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 801a1e8:	687b      	ldr	r3, [r7, #4]
 801a1ea:	2220      	movs	r2, #32
 801a1ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 801a1f0:	687b      	ldr	r3, [r7, #4]
 801a1f2:	2200      	movs	r2, #0
 801a1f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 801a1f8:	687b      	ldr	r3, [r7, #4]
 801a1fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a1fc:	f043 0204 	orr.w	r2, r3, #4
 801a200:	687b      	ldr	r3, [r7, #4]
 801a202:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801a204:	687b      	ldr	r3, [r7, #4]
 801a206:	2200      	movs	r2, #0
 801a208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 801a20c:	2301      	movs	r3, #1
 801a20e:	e000      	b.n	801a212 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 801a210:	2300      	movs	r3, #0
}
 801a212:	4618      	mov	r0, r3
 801a214:	370c      	adds	r7, #12
 801a216:	46bd      	mov	sp, r7
 801a218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a21c:	4770      	bx	lr

0801a21e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 801a21e:	b480      	push	{r7}
 801a220:	b083      	sub	sp, #12
 801a222:	af00      	add	r7, sp, #0
 801a224:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 801a226:	687b      	ldr	r3, [r7, #4]
 801a228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a22a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 801a22e:	d103      	bne.n	801a238 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 801a230:	687b      	ldr	r3, [r7, #4]
 801a232:	2201      	movs	r2, #1
 801a234:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 801a236:	e007      	b.n	801a248 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 801a238:	687b      	ldr	r3, [r7, #4]
 801a23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a23c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801a240:	d102      	bne.n	801a248 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 801a242:	687b      	ldr	r3, [r7, #4]
 801a244:	2208      	movs	r2, #8
 801a246:	62da      	str	r2, [r3, #44]	; 0x2c
}
 801a248:	bf00      	nop
 801a24a:	370c      	adds	r7, #12
 801a24c:	46bd      	mov	sp, r7
 801a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a252:	4770      	bx	lr

0801a254 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801a254:	b580      	push	{r7, lr}
 801a256:	b086      	sub	sp, #24
 801a258:	af00      	add	r7, sp, #0
 801a25a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801a25c:	687b      	ldr	r3, [r7, #4]
 801a25e:	2b00      	cmp	r3, #0
 801a260:	d101      	bne.n	801a266 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801a262:	2301      	movs	r3, #1
 801a264:	e267      	b.n	801a736 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801a266:	687b      	ldr	r3, [r7, #4]
 801a268:	681b      	ldr	r3, [r3, #0]
 801a26a:	f003 0301 	and.w	r3, r3, #1
 801a26e:	2b00      	cmp	r3, #0
 801a270:	d075      	beq.n	801a35e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801a272:	4b88      	ldr	r3, [pc, #544]	; (801a494 <HAL_RCC_OscConfig+0x240>)
 801a274:	689b      	ldr	r3, [r3, #8]
 801a276:	f003 030c 	and.w	r3, r3, #12
 801a27a:	2b04      	cmp	r3, #4
 801a27c:	d00c      	beq.n	801a298 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801a27e:	4b85      	ldr	r3, [pc, #532]	; (801a494 <HAL_RCC_OscConfig+0x240>)
 801a280:	689b      	ldr	r3, [r3, #8]
 801a282:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801a286:	2b08      	cmp	r3, #8
 801a288:	d112      	bne.n	801a2b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801a28a:	4b82      	ldr	r3, [pc, #520]	; (801a494 <HAL_RCC_OscConfig+0x240>)
 801a28c:	685b      	ldr	r3, [r3, #4]
 801a28e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801a292:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801a296:	d10b      	bne.n	801a2b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801a298:	4b7e      	ldr	r3, [pc, #504]	; (801a494 <HAL_RCC_OscConfig+0x240>)
 801a29a:	681b      	ldr	r3, [r3, #0]
 801a29c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a2a0:	2b00      	cmp	r3, #0
 801a2a2:	d05b      	beq.n	801a35c <HAL_RCC_OscConfig+0x108>
 801a2a4:	687b      	ldr	r3, [r7, #4]
 801a2a6:	685b      	ldr	r3, [r3, #4]
 801a2a8:	2b00      	cmp	r3, #0
 801a2aa:	d157      	bne.n	801a35c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801a2ac:	2301      	movs	r3, #1
 801a2ae:	e242      	b.n	801a736 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801a2b0:	687b      	ldr	r3, [r7, #4]
 801a2b2:	685b      	ldr	r3, [r3, #4]
 801a2b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a2b8:	d106      	bne.n	801a2c8 <HAL_RCC_OscConfig+0x74>
 801a2ba:	4b76      	ldr	r3, [pc, #472]	; (801a494 <HAL_RCC_OscConfig+0x240>)
 801a2bc:	681b      	ldr	r3, [r3, #0]
 801a2be:	4a75      	ldr	r2, [pc, #468]	; (801a494 <HAL_RCC_OscConfig+0x240>)
 801a2c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801a2c4:	6013      	str	r3, [r2, #0]
 801a2c6:	e01d      	b.n	801a304 <HAL_RCC_OscConfig+0xb0>
 801a2c8:	687b      	ldr	r3, [r7, #4]
 801a2ca:	685b      	ldr	r3, [r3, #4]
 801a2cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801a2d0:	d10c      	bne.n	801a2ec <HAL_RCC_OscConfig+0x98>
 801a2d2:	4b70      	ldr	r3, [pc, #448]	; (801a494 <HAL_RCC_OscConfig+0x240>)
 801a2d4:	681b      	ldr	r3, [r3, #0]
 801a2d6:	4a6f      	ldr	r2, [pc, #444]	; (801a494 <HAL_RCC_OscConfig+0x240>)
 801a2d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801a2dc:	6013      	str	r3, [r2, #0]
 801a2de:	4b6d      	ldr	r3, [pc, #436]	; (801a494 <HAL_RCC_OscConfig+0x240>)
 801a2e0:	681b      	ldr	r3, [r3, #0]
 801a2e2:	4a6c      	ldr	r2, [pc, #432]	; (801a494 <HAL_RCC_OscConfig+0x240>)
 801a2e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801a2e8:	6013      	str	r3, [r2, #0]
 801a2ea:	e00b      	b.n	801a304 <HAL_RCC_OscConfig+0xb0>
 801a2ec:	4b69      	ldr	r3, [pc, #420]	; (801a494 <HAL_RCC_OscConfig+0x240>)
 801a2ee:	681b      	ldr	r3, [r3, #0]
 801a2f0:	4a68      	ldr	r2, [pc, #416]	; (801a494 <HAL_RCC_OscConfig+0x240>)
 801a2f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801a2f6:	6013      	str	r3, [r2, #0]
 801a2f8:	4b66      	ldr	r3, [pc, #408]	; (801a494 <HAL_RCC_OscConfig+0x240>)
 801a2fa:	681b      	ldr	r3, [r3, #0]
 801a2fc:	4a65      	ldr	r2, [pc, #404]	; (801a494 <HAL_RCC_OscConfig+0x240>)
 801a2fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801a302:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801a304:	687b      	ldr	r3, [r7, #4]
 801a306:	685b      	ldr	r3, [r3, #4]
 801a308:	2b00      	cmp	r3, #0
 801a30a:	d013      	beq.n	801a334 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a30c:	f7fc fa24 	bl	8016758 <HAL_GetTick>
 801a310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801a312:	e008      	b.n	801a326 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801a314:	f7fc fa20 	bl	8016758 <HAL_GetTick>
 801a318:	4602      	mov	r2, r0
 801a31a:	693b      	ldr	r3, [r7, #16]
 801a31c:	1ad3      	subs	r3, r2, r3
 801a31e:	2b64      	cmp	r3, #100	; 0x64
 801a320:	d901      	bls.n	801a326 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801a322:	2303      	movs	r3, #3
 801a324:	e207      	b.n	801a736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801a326:	4b5b      	ldr	r3, [pc, #364]	; (801a494 <HAL_RCC_OscConfig+0x240>)
 801a328:	681b      	ldr	r3, [r3, #0]
 801a32a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a32e:	2b00      	cmp	r3, #0
 801a330:	d0f0      	beq.n	801a314 <HAL_RCC_OscConfig+0xc0>
 801a332:	e014      	b.n	801a35e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a334:	f7fc fa10 	bl	8016758 <HAL_GetTick>
 801a338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801a33a:	e008      	b.n	801a34e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801a33c:	f7fc fa0c 	bl	8016758 <HAL_GetTick>
 801a340:	4602      	mov	r2, r0
 801a342:	693b      	ldr	r3, [r7, #16]
 801a344:	1ad3      	subs	r3, r2, r3
 801a346:	2b64      	cmp	r3, #100	; 0x64
 801a348:	d901      	bls.n	801a34e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801a34a:	2303      	movs	r3, #3
 801a34c:	e1f3      	b.n	801a736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801a34e:	4b51      	ldr	r3, [pc, #324]	; (801a494 <HAL_RCC_OscConfig+0x240>)
 801a350:	681b      	ldr	r3, [r3, #0]
 801a352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a356:	2b00      	cmp	r3, #0
 801a358:	d1f0      	bne.n	801a33c <HAL_RCC_OscConfig+0xe8>
 801a35a:	e000      	b.n	801a35e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801a35c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801a35e:	687b      	ldr	r3, [r7, #4]
 801a360:	681b      	ldr	r3, [r3, #0]
 801a362:	f003 0302 	and.w	r3, r3, #2
 801a366:	2b00      	cmp	r3, #0
 801a368:	d063      	beq.n	801a432 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801a36a:	4b4a      	ldr	r3, [pc, #296]	; (801a494 <HAL_RCC_OscConfig+0x240>)
 801a36c:	689b      	ldr	r3, [r3, #8]
 801a36e:	f003 030c 	and.w	r3, r3, #12
 801a372:	2b00      	cmp	r3, #0
 801a374:	d00b      	beq.n	801a38e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801a376:	4b47      	ldr	r3, [pc, #284]	; (801a494 <HAL_RCC_OscConfig+0x240>)
 801a378:	689b      	ldr	r3, [r3, #8]
 801a37a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801a37e:	2b08      	cmp	r3, #8
 801a380:	d11c      	bne.n	801a3bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801a382:	4b44      	ldr	r3, [pc, #272]	; (801a494 <HAL_RCC_OscConfig+0x240>)
 801a384:	685b      	ldr	r3, [r3, #4]
 801a386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801a38a:	2b00      	cmp	r3, #0
 801a38c:	d116      	bne.n	801a3bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801a38e:	4b41      	ldr	r3, [pc, #260]	; (801a494 <HAL_RCC_OscConfig+0x240>)
 801a390:	681b      	ldr	r3, [r3, #0]
 801a392:	f003 0302 	and.w	r3, r3, #2
 801a396:	2b00      	cmp	r3, #0
 801a398:	d005      	beq.n	801a3a6 <HAL_RCC_OscConfig+0x152>
 801a39a:	687b      	ldr	r3, [r7, #4]
 801a39c:	68db      	ldr	r3, [r3, #12]
 801a39e:	2b01      	cmp	r3, #1
 801a3a0:	d001      	beq.n	801a3a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801a3a2:	2301      	movs	r3, #1
 801a3a4:	e1c7      	b.n	801a736 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801a3a6:	4b3b      	ldr	r3, [pc, #236]	; (801a494 <HAL_RCC_OscConfig+0x240>)
 801a3a8:	681b      	ldr	r3, [r3, #0]
 801a3aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801a3ae:	687b      	ldr	r3, [r7, #4]
 801a3b0:	691b      	ldr	r3, [r3, #16]
 801a3b2:	00db      	lsls	r3, r3, #3
 801a3b4:	4937      	ldr	r1, [pc, #220]	; (801a494 <HAL_RCC_OscConfig+0x240>)
 801a3b6:	4313      	orrs	r3, r2
 801a3b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801a3ba:	e03a      	b.n	801a432 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801a3bc:	687b      	ldr	r3, [r7, #4]
 801a3be:	68db      	ldr	r3, [r3, #12]
 801a3c0:	2b00      	cmp	r3, #0
 801a3c2:	d020      	beq.n	801a406 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801a3c4:	4b34      	ldr	r3, [pc, #208]	; (801a498 <HAL_RCC_OscConfig+0x244>)
 801a3c6:	2201      	movs	r2, #1
 801a3c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801a3ca:	f7fc f9c5 	bl	8016758 <HAL_GetTick>
 801a3ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801a3d0:	e008      	b.n	801a3e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801a3d2:	f7fc f9c1 	bl	8016758 <HAL_GetTick>
 801a3d6:	4602      	mov	r2, r0
 801a3d8:	693b      	ldr	r3, [r7, #16]
 801a3da:	1ad3      	subs	r3, r2, r3
 801a3dc:	2b02      	cmp	r3, #2
 801a3de:	d901      	bls.n	801a3e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 801a3e0:	2303      	movs	r3, #3
 801a3e2:	e1a8      	b.n	801a736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801a3e4:	4b2b      	ldr	r3, [pc, #172]	; (801a494 <HAL_RCC_OscConfig+0x240>)
 801a3e6:	681b      	ldr	r3, [r3, #0]
 801a3e8:	f003 0302 	and.w	r3, r3, #2
 801a3ec:	2b00      	cmp	r3, #0
 801a3ee:	d0f0      	beq.n	801a3d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801a3f0:	4b28      	ldr	r3, [pc, #160]	; (801a494 <HAL_RCC_OscConfig+0x240>)
 801a3f2:	681b      	ldr	r3, [r3, #0]
 801a3f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801a3f8:	687b      	ldr	r3, [r7, #4]
 801a3fa:	691b      	ldr	r3, [r3, #16]
 801a3fc:	00db      	lsls	r3, r3, #3
 801a3fe:	4925      	ldr	r1, [pc, #148]	; (801a494 <HAL_RCC_OscConfig+0x240>)
 801a400:	4313      	orrs	r3, r2
 801a402:	600b      	str	r3, [r1, #0]
 801a404:	e015      	b.n	801a432 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801a406:	4b24      	ldr	r3, [pc, #144]	; (801a498 <HAL_RCC_OscConfig+0x244>)
 801a408:	2200      	movs	r2, #0
 801a40a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801a40c:	f7fc f9a4 	bl	8016758 <HAL_GetTick>
 801a410:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801a412:	e008      	b.n	801a426 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801a414:	f7fc f9a0 	bl	8016758 <HAL_GetTick>
 801a418:	4602      	mov	r2, r0
 801a41a:	693b      	ldr	r3, [r7, #16]
 801a41c:	1ad3      	subs	r3, r2, r3
 801a41e:	2b02      	cmp	r3, #2
 801a420:	d901      	bls.n	801a426 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801a422:	2303      	movs	r3, #3
 801a424:	e187      	b.n	801a736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801a426:	4b1b      	ldr	r3, [pc, #108]	; (801a494 <HAL_RCC_OscConfig+0x240>)
 801a428:	681b      	ldr	r3, [r3, #0]
 801a42a:	f003 0302 	and.w	r3, r3, #2
 801a42e:	2b00      	cmp	r3, #0
 801a430:	d1f0      	bne.n	801a414 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801a432:	687b      	ldr	r3, [r7, #4]
 801a434:	681b      	ldr	r3, [r3, #0]
 801a436:	f003 0308 	and.w	r3, r3, #8
 801a43a:	2b00      	cmp	r3, #0
 801a43c:	d036      	beq.n	801a4ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801a43e:	687b      	ldr	r3, [r7, #4]
 801a440:	695b      	ldr	r3, [r3, #20]
 801a442:	2b00      	cmp	r3, #0
 801a444:	d016      	beq.n	801a474 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801a446:	4b15      	ldr	r3, [pc, #84]	; (801a49c <HAL_RCC_OscConfig+0x248>)
 801a448:	2201      	movs	r2, #1
 801a44a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801a44c:	f7fc f984 	bl	8016758 <HAL_GetTick>
 801a450:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801a452:	e008      	b.n	801a466 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801a454:	f7fc f980 	bl	8016758 <HAL_GetTick>
 801a458:	4602      	mov	r2, r0
 801a45a:	693b      	ldr	r3, [r7, #16]
 801a45c:	1ad3      	subs	r3, r2, r3
 801a45e:	2b02      	cmp	r3, #2
 801a460:	d901      	bls.n	801a466 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801a462:	2303      	movs	r3, #3
 801a464:	e167      	b.n	801a736 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801a466:	4b0b      	ldr	r3, [pc, #44]	; (801a494 <HAL_RCC_OscConfig+0x240>)
 801a468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a46a:	f003 0302 	and.w	r3, r3, #2
 801a46e:	2b00      	cmp	r3, #0
 801a470:	d0f0      	beq.n	801a454 <HAL_RCC_OscConfig+0x200>
 801a472:	e01b      	b.n	801a4ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801a474:	4b09      	ldr	r3, [pc, #36]	; (801a49c <HAL_RCC_OscConfig+0x248>)
 801a476:	2200      	movs	r2, #0
 801a478:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801a47a:	f7fc f96d 	bl	8016758 <HAL_GetTick>
 801a47e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801a480:	e00e      	b.n	801a4a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801a482:	f7fc f969 	bl	8016758 <HAL_GetTick>
 801a486:	4602      	mov	r2, r0
 801a488:	693b      	ldr	r3, [r7, #16]
 801a48a:	1ad3      	subs	r3, r2, r3
 801a48c:	2b02      	cmp	r3, #2
 801a48e:	d907      	bls.n	801a4a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 801a490:	2303      	movs	r3, #3
 801a492:	e150      	b.n	801a736 <HAL_RCC_OscConfig+0x4e2>
 801a494:	40023800 	.word	0x40023800
 801a498:	42470000 	.word	0x42470000
 801a49c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801a4a0:	4b88      	ldr	r3, [pc, #544]	; (801a6c4 <HAL_RCC_OscConfig+0x470>)
 801a4a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a4a4:	f003 0302 	and.w	r3, r3, #2
 801a4a8:	2b00      	cmp	r3, #0
 801a4aa:	d1ea      	bne.n	801a482 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801a4ac:	687b      	ldr	r3, [r7, #4]
 801a4ae:	681b      	ldr	r3, [r3, #0]
 801a4b0:	f003 0304 	and.w	r3, r3, #4
 801a4b4:	2b00      	cmp	r3, #0
 801a4b6:	f000 8097 	beq.w	801a5e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 801a4ba:	2300      	movs	r3, #0
 801a4bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801a4be:	4b81      	ldr	r3, [pc, #516]	; (801a6c4 <HAL_RCC_OscConfig+0x470>)
 801a4c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a4c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801a4c6:	2b00      	cmp	r3, #0
 801a4c8:	d10f      	bne.n	801a4ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801a4ca:	2300      	movs	r3, #0
 801a4cc:	60bb      	str	r3, [r7, #8]
 801a4ce:	4b7d      	ldr	r3, [pc, #500]	; (801a6c4 <HAL_RCC_OscConfig+0x470>)
 801a4d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a4d2:	4a7c      	ldr	r2, [pc, #496]	; (801a6c4 <HAL_RCC_OscConfig+0x470>)
 801a4d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801a4d8:	6413      	str	r3, [r2, #64]	; 0x40
 801a4da:	4b7a      	ldr	r3, [pc, #488]	; (801a6c4 <HAL_RCC_OscConfig+0x470>)
 801a4dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a4de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801a4e2:	60bb      	str	r3, [r7, #8]
 801a4e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801a4e6:	2301      	movs	r3, #1
 801a4e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801a4ea:	4b77      	ldr	r3, [pc, #476]	; (801a6c8 <HAL_RCC_OscConfig+0x474>)
 801a4ec:	681b      	ldr	r3, [r3, #0]
 801a4ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a4f2:	2b00      	cmp	r3, #0
 801a4f4:	d118      	bne.n	801a528 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801a4f6:	4b74      	ldr	r3, [pc, #464]	; (801a6c8 <HAL_RCC_OscConfig+0x474>)
 801a4f8:	681b      	ldr	r3, [r3, #0]
 801a4fa:	4a73      	ldr	r2, [pc, #460]	; (801a6c8 <HAL_RCC_OscConfig+0x474>)
 801a4fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801a500:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801a502:	f7fc f929 	bl	8016758 <HAL_GetTick>
 801a506:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801a508:	e008      	b.n	801a51c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801a50a:	f7fc f925 	bl	8016758 <HAL_GetTick>
 801a50e:	4602      	mov	r2, r0
 801a510:	693b      	ldr	r3, [r7, #16]
 801a512:	1ad3      	subs	r3, r2, r3
 801a514:	2b02      	cmp	r3, #2
 801a516:	d901      	bls.n	801a51c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 801a518:	2303      	movs	r3, #3
 801a51a:	e10c      	b.n	801a736 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801a51c:	4b6a      	ldr	r3, [pc, #424]	; (801a6c8 <HAL_RCC_OscConfig+0x474>)
 801a51e:	681b      	ldr	r3, [r3, #0]
 801a520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a524:	2b00      	cmp	r3, #0
 801a526:	d0f0      	beq.n	801a50a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801a528:	687b      	ldr	r3, [r7, #4]
 801a52a:	689b      	ldr	r3, [r3, #8]
 801a52c:	2b01      	cmp	r3, #1
 801a52e:	d106      	bne.n	801a53e <HAL_RCC_OscConfig+0x2ea>
 801a530:	4b64      	ldr	r3, [pc, #400]	; (801a6c4 <HAL_RCC_OscConfig+0x470>)
 801a532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a534:	4a63      	ldr	r2, [pc, #396]	; (801a6c4 <HAL_RCC_OscConfig+0x470>)
 801a536:	f043 0301 	orr.w	r3, r3, #1
 801a53a:	6713      	str	r3, [r2, #112]	; 0x70
 801a53c:	e01c      	b.n	801a578 <HAL_RCC_OscConfig+0x324>
 801a53e:	687b      	ldr	r3, [r7, #4]
 801a540:	689b      	ldr	r3, [r3, #8]
 801a542:	2b05      	cmp	r3, #5
 801a544:	d10c      	bne.n	801a560 <HAL_RCC_OscConfig+0x30c>
 801a546:	4b5f      	ldr	r3, [pc, #380]	; (801a6c4 <HAL_RCC_OscConfig+0x470>)
 801a548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a54a:	4a5e      	ldr	r2, [pc, #376]	; (801a6c4 <HAL_RCC_OscConfig+0x470>)
 801a54c:	f043 0304 	orr.w	r3, r3, #4
 801a550:	6713      	str	r3, [r2, #112]	; 0x70
 801a552:	4b5c      	ldr	r3, [pc, #368]	; (801a6c4 <HAL_RCC_OscConfig+0x470>)
 801a554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a556:	4a5b      	ldr	r2, [pc, #364]	; (801a6c4 <HAL_RCC_OscConfig+0x470>)
 801a558:	f043 0301 	orr.w	r3, r3, #1
 801a55c:	6713      	str	r3, [r2, #112]	; 0x70
 801a55e:	e00b      	b.n	801a578 <HAL_RCC_OscConfig+0x324>
 801a560:	4b58      	ldr	r3, [pc, #352]	; (801a6c4 <HAL_RCC_OscConfig+0x470>)
 801a562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a564:	4a57      	ldr	r2, [pc, #348]	; (801a6c4 <HAL_RCC_OscConfig+0x470>)
 801a566:	f023 0301 	bic.w	r3, r3, #1
 801a56a:	6713      	str	r3, [r2, #112]	; 0x70
 801a56c:	4b55      	ldr	r3, [pc, #340]	; (801a6c4 <HAL_RCC_OscConfig+0x470>)
 801a56e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a570:	4a54      	ldr	r2, [pc, #336]	; (801a6c4 <HAL_RCC_OscConfig+0x470>)
 801a572:	f023 0304 	bic.w	r3, r3, #4
 801a576:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801a578:	687b      	ldr	r3, [r7, #4]
 801a57a:	689b      	ldr	r3, [r3, #8]
 801a57c:	2b00      	cmp	r3, #0
 801a57e:	d015      	beq.n	801a5ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801a580:	f7fc f8ea 	bl	8016758 <HAL_GetTick>
 801a584:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801a586:	e00a      	b.n	801a59e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801a588:	f7fc f8e6 	bl	8016758 <HAL_GetTick>
 801a58c:	4602      	mov	r2, r0
 801a58e:	693b      	ldr	r3, [r7, #16]
 801a590:	1ad3      	subs	r3, r2, r3
 801a592:	f241 3288 	movw	r2, #5000	; 0x1388
 801a596:	4293      	cmp	r3, r2
 801a598:	d901      	bls.n	801a59e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 801a59a:	2303      	movs	r3, #3
 801a59c:	e0cb      	b.n	801a736 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801a59e:	4b49      	ldr	r3, [pc, #292]	; (801a6c4 <HAL_RCC_OscConfig+0x470>)
 801a5a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a5a2:	f003 0302 	and.w	r3, r3, #2
 801a5a6:	2b00      	cmp	r3, #0
 801a5a8:	d0ee      	beq.n	801a588 <HAL_RCC_OscConfig+0x334>
 801a5aa:	e014      	b.n	801a5d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801a5ac:	f7fc f8d4 	bl	8016758 <HAL_GetTick>
 801a5b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801a5b2:	e00a      	b.n	801a5ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801a5b4:	f7fc f8d0 	bl	8016758 <HAL_GetTick>
 801a5b8:	4602      	mov	r2, r0
 801a5ba:	693b      	ldr	r3, [r7, #16]
 801a5bc:	1ad3      	subs	r3, r2, r3
 801a5be:	f241 3288 	movw	r2, #5000	; 0x1388
 801a5c2:	4293      	cmp	r3, r2
 801a5c4:	d901      	bls.n	801a5ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 801a5c6:	2303      	movs	r3, #3
 801a5c8:	e0b5      	b.n	801a736 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801a5ca:	4b3e      	ldr	r3, [pc, #248]	; (801a6c4 <HAL_RCC_OscConfig+0x470>)
 801a5cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a5ce:	f003 0302 	and.w	r3, r3, #2
 801a5d2:	2b00      	cmp	r3, #0
 801a5d4:	d1ee      	bne.n	801a5b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801a5d6:	7dfb      	ldrb	r3, [r7, #23]
 801a5d8:	2b01      	cmp	r3, #1
 801a5da:	d105      	bne.n	801a5e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801a5dc:	4b39      	ldr	r3, [pc, #228]	; (801a6c4 <HAL_RCC_OscConfig+0x470>)
 801a5de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a5e0:	4a38      	ldr	r2, [pc, #224]	; (801a6c4 <HAL_RCC_OscConfig+0x470>)
 801a5e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801a5e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801a5e8:	687b      	ldr	r3, [r7, #4]
 801a5ea:	699b      	ldr	r3, [r3, #24]
 801a5ec:	2b00      	cmp	r3, #0
 801a5ee:	f000 80a1 	beq.w	801a734 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801a5f2:	4b34      	ldr	r3, [pc, #208]	; (801a6c4 <HAL_RCC_OscConfig+0x470>)
 801a5f4:	689b      	ldr	r3, [r3, #8]
 801a5f6:	f003 030c 	and.w	r3, r3, #12
 801a5fa:	2b08      	cmp	r3, #8
 801a5fc:	d05c      	beq.n	801a6b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801a5fe:	687b      	ldr	r3, [r7, #4]
 801a600:	699b      	ldr	r3, [r3, #24]
 801a602:	2b02      	cmp	r3, #2
 801a604:	d141      	bne.n	801a68a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801a606:	4b31      	ldr	r3, [pc, #196]	; (801a6cc <HAL_RCC_OscConfig+0x478>)
 801a608:	2200      	movs	r2, #0
 801a60a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a60c:	f7fc f8a4 	bl	8016758 <HAL_GetTick>
 801a610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801a612:	e008      	b.n	801a626 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801a614:	f7fc f8a0 	bl	8016758 <HAL_GetTick>
 801a618:	4602      	mov	r2, r0
 801a61a:	693b      	ldr	r3, [r7, #16]
 801a61c:	1ad3      	subs	r3, r2, r3
 801a61e:	2b02      	cmp	r3, #2
 801a620:	d901      	bls.n	801a626 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 801a622:	2303      	movs	r3, #3
 801a624:	e087      	b.n	801a736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801a626:	4b27      	ldr	r3, [pc, #156]	; (801a6c4 <HAL_RCC_OscConfig+0x470>)
 801a628:	681b      	ldr	r3, [r3, #0]
 801a62a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a62e:	2b00      	cmp	r3, #0
 801a630:	d1f0      	bne.n	801a614 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801a632:	687b      	ldr	r3, [r7, #4]
 801a634:	69da      	ldr	r2, [r3, #28]
 801a636:	687b      	ldr	r3, [r7, #4]
 801a638:	6a1b      	ldr	r3, [r3, #32]
 801a63a:	431a      	orrs	r2, r3
 801a63c:	687b      	ldr	r3, [r7, #4]
 801a63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a640:	019b      	lsls	r3, r3, #6
 801a642:	431a      	orrs	r2, r3
 801a644:	687b      	ldr	r3, [r7, #4]
 801a646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a648:	085b      	lsrs	r3, r3, #1
 801a64a:	3b01      	subs	r3, #1
 801a64c:	041b      	lsls	r3, r3, #16
 801a64e:	431a      	orrs	r2, r3
 801a650:	687b      	ldr	r3, [r7, #4]
 801a652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a654:	061b      	lsls	r3, r3, #24
 801a656:	491b      	ldr	r1, [pc, #108]	; (801a6c4 <HAL_RCC_OscConfig+0x470>)
 801a658:	4313      	orrs	r3, r2
 801a65a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801a65c:	4b1b      	ldr	r3, [pc, #108]	; (801a6cc <HAL_RCC_OscConfig+0x478>)
 801a65e:	2201      	movs	r2, #1
 801a660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a662:	f7fc f879 	bl	8016758 <HAL_GetTick>
 801a666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801a668:	e008      	b.n	801a67c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801a66a:	f7fc f875 	bl	8016758 <HAL_GetTick>
 801a66e:	4602      	mov	r2, r0
 801a670:	693b      	ldr	r3, [r7, #16]
 801a672:	1ad3      	subs	r3, r2, r3
 801a674:	2b02      	cmp	r3, #2
 801a676:	d901      	bls.n	801a67c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 801a678:	2303      	movs	r3, #3
 801a67a:	e05c      	b.n	801a736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801a67c:	4b11      	ldr	r3, [pc, #68]	; (801a6c4 <HAL_RCC_OscConfig+0x470>)
 801a67e:	681b      	ldr	r3, [r3, #0]
 801a680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a684:	2b00      	cmp	r3, #0
 801a686:	d0f0      	beq.n	801a66a <HAL_RCC_OscConfig+0x416>
 801a688:	e054      	b.n	801a734 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801a68a:	4b10      	ldr	r3, [pc, #64]	; (801a6cc <HAL_RCC_OscConfig+0x478>)
 801a68c:	2200      	movs	r2, #0
 801a68e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a690:	f7fc f862 	bl	8016758 <HAL_GetTick>
 801a694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801a696:	e008      	b.n	801a6aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801a698:	f7fc f85e 	bl	8016758 <HAL_GetTick>
 801a69c:	4602      	mov	r2, r0
 801a69e:	693b      	ldr	r3, [r7, #16]
 801a6a0:	1ad3      	subs	r3, r2, r3
 801a6a2:	2b02      	cmp	r3, #2
 801a6a4:	d901      	bls.n	801a6aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 801a6a6:	2303      	movs	r3, #3
 801a6a8:	e045      	b.n	801a736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801a6aa:	4b06      	ldr	r3, [pc, #24]	; (801a6c4 <HAL_RCC_OscConfig+0x470>)
 801a6ac:	681b      	ldr	r3, [r3, #0]
 801a6ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a6b2:	2b00      	cmp	r3, #0
 801a6b4:	d1f0      	bne.n	801a698 <HAL_RCC_OscConfig+0x444>
 801a6b6:	e03d      	b.n	801a734 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801a6b8:	687b      	ldr	r3, [r7, #4]
 801a6ba:	699b      	ldr	r3, [r3, #24]
 801a6bc:	2b01      	cmp	r3, #1
 801a6be:	d107      	bne.n	801a6d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 801a6c0:	2301      	movs	r3, #1
 801a6c2:	e038      	b.n	801a736 <HAL_RCC_OscConfig+0x4e2>
 801a6c4:	40023800 	.word	0x40023800
 801a6c8:	40007000 	.word	0x40007000
 801a6cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801a6d0:	4b1b      	ldr	r3, [pc, #108]	; (801a740 <HAL_RCC_OscConfig+0x4ec>)
 801a6d2:	685b      	ldr	r3, [r3, #4]
 801a6d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801a6d6:	687b      	ldr	r3, [r7, #4]
 801a6d8:	699b      	ldr	r3, [r3, #24]
 801a6da:	2b01      	cmp	r3, #1
 801a6dc:	d028      	beq.n	801a730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801a6de:	68fb      	ldr	r3, [r7, #12]
 801a6e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801a6e4:	687b      	ldr	r3, [r7, #4]
 801a6e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801a6e8:	429a      	cmp	r2, r3
 801a6ea:	d121      	bne.n	801a730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801a6ec:	68fb      	ldr	r3, [r7, #12]
 801a6ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801a6f2:	687b      	ldr	r3, [r7, #4]
 801a6f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801a6f6:	429a      	cmp	r2, r3
 801a6f8:	d11a      	bne.n	801a730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801a6fa:	68fa      	ldr	r2, [r7, #12]
 801a6fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801a700:	4013      	ands	r3, r2
 801a702:	687a      	ldr	r2, [r7, #4]
 801a704:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801a706:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801a708:	4293      	cmp	r3, r2
 801a70a:	d111      	bne.n	801a730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801a70c:	68fb      	ldr	r3, [r7, #12]
 801a70e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801a712:	687b      	ldr	r3, [r7, #4]
 801a714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a716:	085b      	lsrs	r3, r3, #1
 801a718:	3b01      	subs	r3, #1
 801a71a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801a71c:	429a      	cmp	r2, r3
 801a71e:	d107      	bne.n	801a730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 801a720:	68fb      	ldr	r3, [r7, #12]
 801a722:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801a726:	687b      	ldr	r3, [r7, #4]
 801a728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a72a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801a72c:	429a      	cmp	r2, r3
 801a72e:	d001      	beq.n	801a734 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 801a730:	2301      	movs	r3, #1
 801a732:	e000      	b.n	801a736 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 801a734:	2300      	movs	r3, #0
}
 801a736:	4618      	mov	r0, r3
 801a738:	3718      	adds	r7, #24
 801a73a:	46bd      	mov	sp, r7
 801a73c:	bd80      	pop	{r7, pc}
 801a73e:	bf00      	nop
 801a740:	40023800 	.word	0x40023800

0801a744 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801a744:	b580      	push	{r7, lr}
 801a746:	b084      	sub	sp, #16
 801a748:	af00      	add	r7, sp, #0
 801a74a:	6078      	str	r0, [r7, #4]
 801a74c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801a74e:	687b      	ldr	r3, [r7, #4]
 801a750:	2b00      	cmp	r3, #0
 801a752:	d101      	bne.n	801a758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801a754:	2301      	movs	r3, #1
 801a756:	e0cc      	b.n	801a8f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801a758:	4b68      	ldr	r3, [pc, #416]	; (801a8fc <HAL_RCC_ClockConfig+0x1b8>)
 801a75a:	681b      	ldr	r3, [r3, #0]
 801a75c:	f003 0307 	and.w	r3, r3, #7
 801a760:	683a      	ldr	r2, [r7, #0]
 801a762:	429a      	cmp	r2, r3
 801a764:	d90c      	bls.n	801a780 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801a766:	4b65      	ldr	r3, [pc, #404]	; (801a8fc <HAL_RCC_ClockConfig+0x1b8>)
 801a768:	683a      	ldr	r2, [r7, #0]
 801a76a:	b2d2      	uxtb	r2, r2
 801a76c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801a76e:	4b63      	ldr	r3, [pc, #396]	; (801a8fc <HAL_RCC_ClockConfig+0x1b8>)
 801a770:	681b      	ldr	r3, [r3, #0]
 801a772:	f003 0307 	and.w	r3, r3, #7
 801a776:	683a      	ldr	r2, [r7, #0]
 801a778:	429a      	cmp	r2, r3
 801a77a:	d001      	beq.n	801a780 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 801a77c:	2301      	movs	r3, #1
 801a77e:	e0b8      	b.n	801a8f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801a780:	687b      	ldr	r3, [r7, #4]
 801a782:	681b      	ldr	r3, [r3, #0]
 801a784:	f003 0302 	and.w	r3, r3, #2
 801a788:	2b00      	cmp	r3, #0
 801a78a:	d020      	beq.n	801a7ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801a78c:	687b      	ldr	r3, [r7, #4]
 801a78e:	681b      	ldr	r3, [r3, #0]
 801a790:	f003 0304 	and.w	r3, r3, #4
 801a794:	2b00      	cmp	r3, #0
 801a796:	d005      	beq.n	801a7a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801a798:	4b59      	ldr	r3, [pc, #356]	; (801a900 <HAL_RCC_ClockConfig+0x1bc>)
 801a79a:	689b      	ldr	r3, [r3, #8]
 801a79c:	4a58      	ldr	r2, [pc, #352]	; (801a900 <HAL_RCC_ClockConfig+0x1bc>)
 801a79e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801a7a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801a7a4:	687b      	ldr	r3, [r7, #4]
 801a7a6:	681b      	ldr	r3, [r3, #0]
 801a7a8:	f003 0308 	and.w	r3, r3, #8
 801a7ac:	2b00      	cmp	r3, #0
 801a7ae:	d005      	beq.n	801a7bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801a7b0:	4b53      	ldr	r3, [pc, #332]	; (801a900 <HAL_RCC_ClockConfig+0x1bc>)
 801a7b2:	689b      	ldr	r3, [r3, #8]
 801a7b4:	4a52      	ldr	r2, [pc, #328]	; (801a900 <HAL_RCC_ClockConfig+0x1bc>)
 801a7b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801a7ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801a7bc:	4b50      	ldr	r3, [pc, #320]	; (801a900 <HAL_RCC_ClockConfig+0x1bc>)
 801a7be:	689b      	ldr	r3, [r3, #8]
 801a7c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801a7c4:	687b      	ldr	r3, [r7, #4]
 801a7c6:	689b      	ldr	r3, [r3, #8]
 801a7c8:	494d      	ldr	r1, [pc, #308]	; (801a900 <HAL_RCC_ClockConfig+0x1bc>)
 801a7ca:	4313      	orrs	r3, r2
 801a7cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801a7ce:	687b      	ldr	r3, [r7, #4]
 801a7d0:	681b      	ldr	r3, [r3, #0]
 801a7d2:	f003 0301 	and.w	r3, r3, #1
 801a7d6:	2b00      	cmp	r3, #0
 801a7d8:	d044      	beq.n	801a864 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801a7da:	687b      	ldr	r3, [r7, #4]
 801a7dc:	685b      	ldr	r3, [r3, #4]
 801a7de:	2b01      	cmp	r3, #1
 801a7e0:	d107      	bne.n	801a7f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801a7e2:	4b47      	ldr	r3, [pc, #284]	; (801a900 <HAL_RCC_ClockConfig+0x1bc>)
 801a7e4:	681b      	ldr	r3, [r3, #0]
 801a7e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a7ea:	2b00      	cmp	r3, #0
 801a7ec:	d119      	bne.n	801a822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801a7ee:	2301      	movs	r3, #1
 801a7f0:	e07f      	b.n	801a8f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801a7f2:	687b      	ldr	r3, [r7, #4]
 801a7f4:	685b      	ldr	r3, [r3, #4]
 801a7f6:	2b02      	cmp	r3, #2
 801a7f8:	d003      	beq.n	801a802 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801a7fa:	687b      	ldr	r3, [r7, #4]
 801a7fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801a7fe:	2b03      	cmp	r3, #3
 801a800:	d107      	bne.n	801a812 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801a802:	4b3f      	ldr	r3, [pc, #252]	; (801a900 <HAL_RCC_ClockConfig+0x1bc>)
 801a804:	681b      	ldr	r3, [r3, #0]
 801a806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a80a:	2b00      	cmp	r3, #0
 801a80c:	d109      	bne.n	801a822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801a80e:	2301      	movs	r3, #1
 801a810:	e06f      	b.n	801a8f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801a812:	4b3b      	ldr	r3, [pc, #236]	; (801a900 <HAL_RCC_ClockConfig+0x1bc>)
 801a814:	681b      	ldr	r3, [r3, #0]
 801a816:	f003 0302 	and.w	r3, r3, #2
 801a81a:	2b00      	cmp	r3, #0
 801a81c:	d101      	bne.n	801a822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801a81e:	2301      	movs	r3, #1
 801a820:	e067      	b.n	801a8f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801a822:	4b37      	ldr	r3, [pc, #220]	; (801a900 <HAL_RCC_ClockConfig+0x1bc>)
 801a824:	689b      	ldr	r3, [r3, #8]
 801a826:	f023 0203 	bic.w	r2, r3, #3
 801a82a:	687b      	ldr	r3, [r7, #4]
 801a82c:	685b      	ldr	r3, [r3, #4]
 801a82e:	4934      	ldr	r1, [pc, #208]	; (801a900 <HAL_RCC_ClockConfig+0x1bc>)
 801a830:	4313      	orrs	r3, r2
 801a832:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801a834:	f7fb ff90 	bl	8016758 <HAL_GetTick>
 801a838:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801a83a:	e00a      	b.n	801a852 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801a83c:	f7fb ff8c 	bl	8016758 <HAL_GetTick>
 801a840:	4602      	mov	r2, r0
 801a842:	68fb      	ldr	r3, [r7, #12]
 801a844:	1ad3      	subs	r3, r2, r3
 801a846:	f241 3288 	movw	r2, #5000	; 0x1388
 801a84a:	4293      	cmp	r3, r2
 801a84c:	d901      	bls.n	801a852 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801a84e:	2303      	movs	r3, #3
 801a850:	e04f      	b.n	801a8f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801a852:	4b2b      	ldr	r3, [pc, #172]	; (801a900 <HAL_RCC_ClockConfig+0x1bc>)
 801a854:	689b      	ldr	r3, [r3, #8]
 801a856:	f003 020c 	and.w	r2, r3, #12
 801a85a:	687b      	ldr	r3, [r7, #4]
 801a85c:	685b      	ldr	r3, [r3, #4]
 801a85e:	009b      	lsls	r3, r3, #2
 801a860:	429a      	cmp	r2, r3
 801a862:	d1eb      	bne.n	801a83c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801a864:	4b25      	ldr	r3, [pc, #148]	; (801a8fc <HAL_RCC_ClockConfig+0x1b8>)
 801a866:	681b      	ldr	r3, [r3, #0]
 801a868:	f003 0307 	and.w	r3, r3, #7
 801a86c:	683a      	ldr	r2, [r7, #0]
 801a86e:	429a      	cmp	r2, r3
 801a870:	d20c      	bcs.n	801a88c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801a872:	4b22      	ldr	r3, [pc, #136]	; (801a8fc <HAL_RCC_ClockConfig+0x1b8>)
 801a874:	683a      	ldr	r2, [r7, #0]
 801a876:	b2d2      	uxtb	r2, r2
 801a878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801a87a:	4b20      	ldr	r3, [pc, #128]	; (801a8fc <HAL_RCC_ClockConfig+0x1b8>)
 801a87c:	681b      	ldr	r3, [r3, #0]
 801a87e:	f003 0307 	and.w	r3, r3, #7
 801a882:	683a      	ldr	r2, [r7, #0]
 801a884:	429a      	cmp	r2, r3
 801a886:	d001      	beq.n	801a88c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801a888:	2301      	movs	r3, #1
 801a88a:	e032      	b.n	801a8f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801a88c:	687b      	ldr	r3, [r7, #4]
 801a88e:	681b      	ldr	r3, [r3, #0]
 801a890:	f003 0304 	and.w	r3, r3, #4
 801a894:	2b00      	cmp	r3, #0
 801a896:	d008      	beq.n	801a8aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801a898:	4b19      	ldr	r3, [pc, #100]	; (801a900 <HAL_RCC_ClockConfig+0x1bc>)
 801a89a:	689b      	ldr	r3, [r3, #8]
 801a89c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801a8a0:	687b      	ldr	r3, [r7, #4]
 801a8a2:	68db      	ldr	r3, [r3, #12]
 801a8a4:	4916      	ldr	r1, [pc, #88]	; (801a900 <HAL_RCC_ClockConfig+0x1bc>)
 801a8a6:	4313      	orrs	r3, r2
 801a8a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801a8aa:	687b      	ldr	r3, [r7, #4]
 801a8ac:	681b      	ldr	r3, [r3, #0]
 801a8ae:	f003 0308 	and.w	r3, r3, #8
 801a8b2:	2b00      	cmp	r3, #0
 801a8b4:	d009      	beq.n	801a8ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801a8b6:	4b12      	ldr	r3, [pc, #72]	; (801a900 <HAL_RCC_ClockConfig+0x1bc>)
 801a8b8:	689b      	ldr	r3, [r3, #8]
 801a8ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801a8be:	687b      	ldr	r3, [r7, #4]
 801a8c0:	691b      	ldr	r3, [r3, #16]
 801a8c2:	00db      	lsls	r3, r3, #3
 801a8c4:	490e      	ldr	r1, [pc, #56]	; (801a900 <HAL_RCC_ClockConfig+0x1bc>)
 801a8c6:	4313      	orrs	r3, r2
 801a8c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801a8ca:	f000 f821 	bl	801a910 <HAL_RCC_GetSysClockFreq>
 801a8ce:	4602      	mov	r2, r0
 801a8d0:	4b0b      	ldr	r3, [pc, #44]	; (801a900 <HAL_RCC_ClockConfig+0x1bc>)
 801a8d2:	689b      	ldr	r3, [r3, #8]
 801a8d4:	091b      	lsrs	r3, r3, #4
 801a8d6:	f003 030f 	and.w	r3, r3, #15
 801a8da:	490a      	ldr	r1, [pc, #40]	; (801a904 <HAL_RCC_ClockConfig+0x1c0>)
 801a8dc:	5ccb      	ldrb	r3, [r1, r3]
 801a8de:	fa22 f303 	lsr.w	r3, r2, r3
 801a8e2:	4a09      	ldr	r2, [pc, #36]	; (801a908 <HAL_RCC_ClockConfig+0x1c4>)
 801a8e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801a8e6:	4b09      	ldr	r3, [pc, #36]	; (801a90c <HAL_RCC_ClockConfig+0x1c8>)
 801a8e8:	681b      	ldr	r3, [r3, #0]
 801a8ea:	4618      	mov	r0, r3
 801a8ec:	f7fb fef0 	bl	80166d0 <HAL_InitTick>

  return HAL_OK;
 801a8f0:	2300      	movs	r3, #0
}
 801a8f2:	4618      	mov	r0, r3
 801a8f4:	3710      	adds	r7, #16
 801a8f6:	46bd      	mov	sp, r7
 801a8f8:	bd80      	pop	{r7, pc}
 801a8fa:	bf00      	nop
 801a8fc:	40023c00 	.word	0x40023c00
 801a900:	40023800 	.word	0x40023800
 801a904:	08029efc 	.word	0x08029efc
 801a908:	200001e0 	.word	0x200001e0
 801a90c:	200001e4 	.word	0x200001e4

0801a910 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801a910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801a914:	b094      	sub	sp, #80	; 0x50
 801a916:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 801a918:	2300      	movs	r3, #0
 801a91a:	647b      	str	r3, [r7, #68]	; 0x44
 801a91c:	2300      	movs	r3, #0
 801a91e:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a920:	2300      	movs	r3, #0
 801a922:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 801a924:	2300      	movs	r3, #0
 801a926:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801a928:	4b79      	ldr	r3, [pc, #484]	; (801ab10 <HAL_RCC_GetSysClockFreq+0x200>)
 801a92a:	689b      	ldr	r3, [r3, #8]
 801a92c:	f003 030c 	and.w	r3, r3, #12
 801a930:	2b08      	cmp	r3, #8
 801a932:	d00d      	beq.n	801a950 <HAL_RCC_GetSysClockFreq+0x40>
 801a934:	2b08      	cmp	r3, #8
 801a936:	f200 80e1 	bhi.w	801aafc <HAL_RCC_GetSysClockFreq+0x1ec>
 801a93a:	2b00      	cmp	r3, #0
 801a93c:	d002      	beq.n	801a944 <HAL_RCC_GetSysClockFreq+0x34>
 801a93e:	2b04      	cmp	r3, #4
 801a940:	d003      	beq.n	801a94a <HAL_RCC_GetSysClockFreq+0x3a>
 801a942:	e0db      	b.n	801aafc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801a944:	4b73      	ldr	r3, [pc, #460]	; (801ab14 <HAL_RCC_GetSysClockFreq+0x204>)
 801a946:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 801a948:	e0db      	b.n	801ab02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801a94a:	4b73      	ldr	r3, [pc, #460]	; (801ab18 <HAL_RCC_GetSysClockFreq+0x208>)
 801a94c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801a94e:	e0d8      	b.n	801ab02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801a950:	4b6f      	ldr	r3, [pc, #444]	; (801ab10 <HAL_RCC_GetSysClockFreq+0x200>)
 801a952:	685b      	ldr	r3, [r3, #4]
 801a954:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a958:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801a95a:	4b6d      	ldr	r3, [pc, #436]	; (801ab10 <HAL_RCC_GetSysClockFreq+0x200>)
 801a95c:	685b      	ldr	r3, [r3, #4]
 801a95e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801a962:	2b00      	cmp	r3, #0
 801a964:	d063      	beq.n	801aa2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801a966:	4b6a      	ldr	r3, [pc, #424]	; (801ab10 <HAL_RCC_GetSysClockFreq+0x200>)
 801a968:	685b      	ldr	r3, [r3, #4]
 801a96a:	099b      	lsrs	r3, r3, #6
 801a96c:	2200      	movs	r2, #0
 801a96e:	63bb      	str	r3, [r7, #56]	; 0x38
 801a970:	63fa      	str	r2, [r7, #60]	; 0x3c
 801a972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a978:	633b      	str	r3, [r7, #48]	; 0x30
 801a97a:	2300      	movs	r3, #0
 801a97c:	637b      	str	r3, [r7, #52]	; 0x34
 801a97e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 801a982:	4622      	mov	r2, r4
 801a984:	462b      	mov	r3, r5
 801a986:	f04f 0000 	mov.w	r0, #0
 801a98a:	f04f 0100 	mov.w	r1, #0
 801a98e:	0159      	lsls	r1, r3, #5
 801a990:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801a994:	0150      	lsls	r0, r2, #5
 801a996:	4602      	mov	r2, r0
 801a998:	460b      	mov	r3, r1
 801a99a:	4621      	mov	r1, r4
 801a99c:	1a51      	subs	r1, r2, r1
 801a99e:	6139      	str	r1, [r7, #16]
 801a9a0:	4629      	mov	r1, r5
 801a9a2:	eb63 0301 	sbc.w	r3, r3, r1
 801a9a6:	617b      	str	r3, [r7, #20]
 801a9a8:	f04f 0200 	mov.w	r2, #0
 801a9ac:	f04f 0300 	mov.w	r3, #0
 801a9b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801a9b4:	4659      	mov	r1, fp
 801a9b6:	018b      	lsls	r3, r1, #6
 801a9b8:	4651      	mov	r1, sl
 801a9ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 801a9be:	4651      	mov	r1, sl
 801a9c0:	018a      	lsls	r2, r1, #6
 801a9c2:	4651      	mov	r1, sl
 801a9c4:	ebb2 0801 	subs.w	r8, r2, r1
 801a9c8:	4659      	mov	r1, fp
 801a9ca:	eb63 0901 	sbc.w	r9, r3, r1
 801a9ce:	f04f 0200 	mov.w	r2, #0
 801a9d2:	f04f 0300 	mov.w	r3, #0
 801a9d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801a9da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801a9de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801a9e2:	4690      	mov	r8, r2
 801a9e4:	4699      	mov	r9, r3
 801a9e6:	4623      	mov	r3, r4
 801a9e8:	eb18 0303 	adds.w	r3, r8, r3
 801a9ec:	60bb      	str	r3, [r7, #8]
 801a9ee:	462b      	mov	r3, r5
 801a9f0:	eb49 0303 	adc.w	r3, r9, r3
 801a9f4:	60fb      	str	r3, [r7, #12]
 801a9f6:	f04f 0200 	mov.w	r2, #0
 801a9fa:	f04f 0300 	mov.w	r3, #0
 801a9fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 801aa02:	4629      	mov	r1, r5
 801aa04:	024b      	lsls	r3, r1, #9
 801aa06:	4621      	mov	r1, r4
 801aa08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 801aa0c:	4621      	mov	r1, r4
 801aa0e:	024a      	lsls	r2, r1, #9
 801aa10:	4610      	mov	r0, r2
 801aa12:	4619      	mov	r1, r3
 801aa14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801aa16:	2200      	movs	r2, #0
 801aa18:	62bb      	str	r3, [r7, #40]	; 0x28
 801aa1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801aa1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801aa20:	f7e6 f8ea 	bl	8000bf8 <__aeabi_uldivmod>
 801aa24:	4602      	mov	r2, r0
 801aa26:	460b      	mov	r3, r1
 801aa28:	4613      	mov	r3, r2
 801aa2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801aa2c:	e058      	b.n	801aae0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801aa2e:	4b38      	ldr	r3, [pc, #224]	; (801ab10 <HAL_RCC_GetSysClockFreq+0x200>)
 801aa30:	685b      	ldr	r3, [r3, #4]
 801aa32:	099b      	lsrs	r3, r3, #6
 801aa34:	2200      	movs	r2, #0
 801aa36:	4618      	mov	r0, r3
 801aa38:	4611      	mov	r1, r2
 801aa3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 801aa3e:	623b      	str	r3, [r7, #32]
 801aa40:	2300      	movs	r3, #0
 801aa42:	627b      	str	r3, [r7, #36]	; 0x24
 801aa44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 801aa48:	4642      	mov	r2, r8
 801aa4a:	464b      	mov	r3, r9
 801aa4c:	f04f 0000 	mov.w	r0, #0
 801aa50:	f04f 0100 	mov.w	r1, #0
 801aa54:	0159      	lsls	r1, r3, #5
 801aa56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801aa5a:	0150      	lsls	r0, r2, #5
 801aa5c:	4602      	mov	r2, r0
 801aa5e:	460b      	mov	r3, r1
 801aa60:	4641      	mov	r1, r8
 801aa62:	ebb2 0a01 	subs.w	sl, r2, r1
 801aa66:	4649      	mov	r1, r9
 801aa68:	eb63 0b01 	sbc.w	fp, r3, r1
 801aa6c:	f04f 0200 	mov.w	r2, #0
 801aa70:	f04f 0300 	mov.w	r3, #0
 801aa74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 801aa78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 801aa7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 801aa80:	ebb2 040a 	subs.w	r4, r2, sl
 801aa84:	eb63 050b 	sbc.w	r5, r3, fp
 801aa88:	f04f 0200 	mov.w	r2, #0
 801aa8c:	f04f 0300 	mov.w	r3, #0
 801aa90:	00eb      	lsls	r3, r5, #3
 801aa92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801aa96:	00e2      	lsls	r2, r4, #3
 801aa98:	4614      	mov	r4, r2
 801aa9a:	461d      	mov	r5, r3
 801aa9c:	4643      	mov	r3, r8
 801aa9e:	18e3      	adds	r3, r4, r3
 801aaa0:	603b      	str	r3, [r7, #0]
 801aaa2:	464b      	mov	r3, r9
 801aaa4:	eb45 0303 	adc.w	r3, r5, r3
 801aaa8:	607b      	str	r3, [r7, #4]
 801aaaa:	f04f 0200 	mov.w	r2, #0
 801aaae:	f04f 0300 	mov.w	r3, #0
 801aab2:	e9d7 4500 	ldrd	r4, r5, [r7]
 801aab6:	4629      	mov	r1, r5
 801aab8:	028b      	lsls	r3, r1, #10
 801aaba:	4621      	mov	r1, r4
 801aabc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 801aac0:	4621      	mov	r1, r4
 801aac2:	028a      	lsls	r2, r1, #10
 801aac4:	4610      	mov	r0, r2
 801aac6:	4619      	mov	r1, r3
 801aac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801aaca:	2200      	movs	r2, #0
 801aacc:	61bb      	str	r3, [r7, #24]
 801aace:	61fa      	str	r2, [r7, #28]
 801aad0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801aad4:	f7e6 f890 	bl	8000bf8 <__aeabi_uldivmod>
 801aad8:	4602      	mov	r2, r0
 801aada:	460b      	mov	r3, r1
 801aadc:	4613      	mov	r3, r2
 801aade:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801aae0:	4b0b      	ldr	r3, [pc, #44]	; (801ab10 <HAL_RCC_GetSysClockFreq+0x200>)
 801aae2:	685b      	ldr	r3, [r3, #4]
 801aae4:	0c1b      	lsrs	r3, r3, #16
 801aae6:	f003 0303 	and.w	r3, r3, #3
 801aaea:	3301      	adds	r3, #1
 801aaec:	005b      	lsls	r3, r3, #1
 801aaee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 801aaf0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801aaf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801aaf4:	fbb2 f3f3 	udiv	r3, r2, r3
 801aaf8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801aafa:	e002      	b.n	801ab02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801aafc:	4b05      	ldr	r3, [pc, #20]	; (801ab14 <HAL_RCC_GetSysClockFreq+0x204>)
 801aafe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801ab00:	bf00      	nop
    }
  }
  return sysclockfreq;
 801ab02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 801ab04:	4618      	mov	r0, r3
 801ab06:	3750      	adds	r7, #80	; 0x50
 801ab08:	46bd      	mov	sp, r7
 801ab0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801ab0e:	bf00      	nop
 801ab10:	40023800 	.word	0x40023800
 801ab14:	00f42400 	.word	0x00f42400
 801ab18:	007a1200 	.word	0x007a1200

0801ab1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801ab1c:	b480      	push	{r7}
 801ab1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801ab20:	4b03      	ldr	r3, [pc, #12]	; (801ab30 <HAL_RCC_GetHCLKFreq+0x14>)
 801ab22:	681b      	ldr	r3, [r3, #0]
}
 801ab24:	4618      	mov	r0, r3
 801ab26:	46bd      	mov	sp, r7
 801ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab2c:	4770      	bx	lr
 801ab2e:	bf00      	nop
 801ab30:	200001e0 	.word	0x200001e0

0801ab34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801ab34:	b580      	push	{r7, lr}
 801ab36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 801ab38:	f7ff fff0 	bl	801ab1c <HAL_RCC_GetHCLKFreq>
 801ab3c:	4602      	mov	r2, r0
 801ab3e:	4b05      	ldr	r3, [pc, #20]	; (801ab54 <HAL_RCC_GetPCLK1Freq+0x20>)
 801ab40:	689b      	ldr	r3, [r3, #8]
 801ab42:	0a9b      	lsrs	r3, r3, #10
 801ab44:	f003 0307 	and.w	r3, r3, #7
 801ab48:	4903      	ldr	r1, [pc, #12]	; (801ab58 <HAL_RCC_GetPCLK1Freq+0x24>)
 801ab4a:	5ccb      	ldrb	r3, [r1, r3]
 801ab4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 801ab50:	4618      	mov	r0, r3
 801ab52:	bd80      	pop	{r7, pc}
 801ab54:	40023800 	.word	0x40023800
 801ab58:	08029f0c 	.word	0x08029f0c

0801ab5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801ab5c:	b580      	push	{r7, lr}
 801ab5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 801ab60:	f7ff ffdc 	bl	801ab1c <HAL_RCC_GetHCLKFreq>
 801ab64:	4602      	mov	r2, r0
 801ab66:	4b05      	ldr	r3, [pc, #20]	; (801ab7c <HAL_RCC_GetPCLK2Freq+0x20>)
 801ab68:	689b      	ldr	r3, [r3, #8]
 801ab6a:	0b5b      	lsrs	r3, r3, #13
 801ab6c:	f003 0307 	and.w	r3, r3, #7
 801ab70:	4903      	ldr	r1, [pc, #12]	; (801ab80 <HAL_RCC_GetPCLK2Freq+0x24>)
 801ab72:	5ccb      	ldrb	r3, [r1, r3]
 801ab74:	fa22 f303 	lsr.w	r3, r2, r3
}
 801ab78:	4618      	mov	r0, r3
 801ab7a:	bd80      	pop	{r7, pc}
 801ab7c:	40023800 	.word	0x40023800
 801ab80:	08029f0c 	.word	0x08029f0c

0801ab84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801ab84:	b580      	push	{r7, lr}
 801ab86:	b082      	sub	sp, #8
 801ab88:	af00      	add	r7, sp, #0
 801ab8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801ab8c:	687b      	ldr	r3, [r7, #4]
 801ab8e:	2b00      	cmp	r3, #0
 801ab90:	d101      	bne.n	801ab96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801ab92:	2301      	movs	r3, #1
 801ab94:	e041      	b.n	801ac1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801ab96:	687b      	ldr	r3, [r7, #4]
 801ab98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ab9c:	b2db      	uxtb	r3, r3
 801ab9e:	2b00      	cmp	r3, #0
 801aba0:	d106      	bne.n	801abb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801aba2:	687b      	ldr	r3, [r7, #4]
 801aba4:	2200      	movs	r2, #0
 801aba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801abaa:	6878      	ldr	r0, [r7, #4]
 801abac:	f7fb fa86 	bl	80160bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801abb0:	687b      	ldr	r3, [r7, #4]
 801abb2:	2202      	movs	r2, #2
 801abb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801abb8:	687b      	ldr	r3, [r7, #4]
 801abba:	681a      	ldr	r2, [r3, #0]
 801abbc:	687b      	ldr	r3, [r7, #4]
 801abbe:	3304      	adds	r3, #4
 801abc0:	4619      	mov	r1, r3
 801abc2:	4610      	mov	r0, r2
 801abc4:	f000 fcae 	bl	801b524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801abc8:	687b      	ldr	r3, [r7, #4]
 801abca:	2201      	movs	r2, #1
 801abcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801abd0:	687b      	ldr	r3, [r7, #4]
 801abd2:	2201      	movs	r2, #1
 801abd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801abd8:	687b      	ldr	r3, [r7, #4]
 801abda:	2201      	movs	r2, #1
 801abdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801abe0:	687b      	ldr	r3, [r7, #4]
 801abe2:	2201      	movs	r2, #1
 801abe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801abe8:	687b      	ldr	r3, [r7, #4]
 801abea:	2201      	movs	r2, #1
 801abec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801abf0:	687b      	ldr	r3, [r7, #4]
 801abf2:	2201      	movs	r2, #1
 801abf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801abf8:	687b      	ldr	r3, [r7, #4]
 801abfa:	2201      	movs	r2, #1
 801abfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801ac00:	687b      	ldr	r3, [r7, #4]
 801ac02:	2201      	movs	r2, #1
 801ac04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ac08:	687b      	ldr	r3, [r7, #4]
 801ac0a:	2201      	movs	r2, #1
 801ac0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801ac10:	687b      	ldr	r3, [r7, #4]
 801ac12:	2201      	movs	r2, #1
 801ac14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801ac18:	2300      	movs	r3, #0
}
 801ac1a:	4618      	mov	r0, r3
 801ac1c:	3708      	adds	r7, #8
 801ac1e:	46bd      	mov	sp, r7
 801ac20:	bd80      	pop	{r7, pc}
	...

0801ac24 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801ac24:	b480      	push	{r7}
 801ac26:	b085      	sub	sp, #20
 801ac28:	af00      	add	r7, sp, #0
 801ac2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801ac2c:	687b      	ldr	r3, [r7, #4]
 801ac2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ac32:	b2db      	uxtb	r3, r3
 801ac34:	2b01      	cmp	r3, #1
 801ac36:	d001      	beq.n	801ac3c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801ac38:	2301      	movs	r3, #1
 801ac3a:	e03c      	b.n	801acb6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801ac3c:	687b      	ldr	r3, [r7, #4]
 801ac3e:	2202      	movs	r2, #2
 801ac40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801ac44:	687b      	ldr	r3, [r7, #4]
 801ac46:	681b      	ldr	r3, [r3, #0]
 801ac48:	4a1e      	ldr	r2, [pc, #120]	; (801acc4 <HAL_TIM_Base_Start+0xa0>)
 801ac4a:	4293      	cmp	r3, r2
 801ac4c:	d018      	beq.n	801ac80 <HAL_TIM_Base_Start+0x5c>
 801ac4e:	687b      	ldr	r3, [r7, #4]
 801ac50:	681b      	ldr	r3, [r3, #0]
 801ac52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ac56:	d013      	beq.n	801ac80 <HAL_TIM_Base_Start+0x5c>
 801ac58:	687b      	ldr	r3, [r7, #4]
 801ac5a:	681b      	ldr	r3, [r3, #0]
 801ac5c:	4a1a      	ldr	r2, [pc, #104]	; (801acc8 <HAL_TIM_Base_Start+0xa4>)
 801ac5e:	4293      	cmp	r3, r2
 801ac60:	d00e      	beq.n	801ac80 <HAL_TIM_Base_Start+0x5c>
 801ac62:	687b      	ldr	r3, [r7, #4]
 801ac64:	681b      	ldr	r3, [r3, #0]
 801ac66:	4a19      	ldr	r2, [pc, #100]	; (801accc <HAL_TIM_Base_Start+0xa8>)
 801ac68:	4293      	cmp	r3, r2
 801ac6a:	d009      	beq.n	801ac80 <HAL_TIM_Base_Start+0x5c>
 801ac6c:	687b      	ldr	r3, [r7, #4]
 801ac6e:	681b      	ldr	r3, [r3, #0]
 801ac70:	4a17      	ldr	r2, [pc, #92]	; (801acd0 <HAL_TIM_Base_Start+0xac>)
 801ac72:	4293      	cmp	r3, r2
 801ac74:	d004      	beq.n	801ac80 <HAL_TIM_Base_Start+0x5c>
 801ac76:	687b      	ldr	r3, [r7, #4]
 801ac78:	681b      	ldr	r3, [r3, #0]
 801ac7a:	4a16      	ldr	r2, [pc, #88]	; (801acd4 <HAL_TIM_Base_Start+0xb0>)
 801ac7c:	4293      	cmp	r3, r2
 801ac7e:	d111      	bne.n	801aca4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801ac80:	687b      	ldr	r3, [r7, #4]
 801ac82:	681b      	ldr	r3, [r3, #0]
 801ac84:	689b      	ldr	r3, [r3, #8]
 801ac86:	f003 0307 	and.w	r3, r3, #7
 801ac8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ac8c:	68fb      	ldr	r3, [r7, #12]
 801ac8e:	2b06      	cmp	r3, #6
 801ac90:	d010      	beq.n	801acb4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 801ac92:	687b      	ldr	r3, [r7, #4]
 801ac94:	681b      	ldr	r3, [r3, #0]
 801ac96:	681a      	ldr	r2, [r3, #0]
 801ac98:	687b      	ldr	r3, [r7, #4]
 801ac9a:	681b      	ldr	r3, [r3, #0]
 801ac9c:	f042 0201 	orr.w	r2, r2, #1
 801aca0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801aca2:	e007      	b.n	801acb4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801aca4:	687b      	ldr	r3, [r7, #4]
 801aca6:	681b      	ldr	r3, [r3, #0]
 801aca8:	681a      	ldr	r2, [r3, #0]
 801acaa:	687b      	ldr	r3, [r7, #4]
 801acac:	681b      	ldr	r3, [r3, #0]
 801acae:	f042 0201 	orr.w	r2, r2, #1
 801acb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801acb4:	2300      	movs	r3, #0
}
 801acb6:	4618      	mov	r0, r3
 801acb8:	3714      	adds	r7, #20
 801acba:	46bd      	mov	sp, r7
 801acbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acc0:	4770      	bx	lr
 801acc2:	bf00      	nop
 801acc4:	40010000 	.word	0x40010000
 801acc8:	40000400 	.word	0x40000400
 801accc:	40000800 	.word	0x40000800
 801acd0:	40000c00 	.word	0x40000c00
 801acd4:	40014000 	.word	0x40014000

0801acd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801acd8:	b480      	push	{r7}
 801acda:	b085      	sub	sp, #20
 801acdc:	af00      	add	r7, sp, #0
 801acde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801ace0:	687b      	ldr	r3, [r7, #4]
 801ace2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ace6:	b2db      	uxtb	r3, r3
 801ace8:	2b01      	cmp	r3, #1
 801acea:	d001      	beq.n	801acf0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801acec:	2301      	movs	r3, #1
 801acee:	e044      	b.n	801ad7a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801acf0:	687b      	ldr	r3, [r7, #4]
 801acf2:	2202      	movs	r2, #2
 801acf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801acf8:	687b      	ldr	r3, [r7, #4]
 801acfa:	681b      	ldr	r3, [r3, #0]
 801acfc:	68da      	ldr	r2, [r3, #12]
 801acfe:	687b      	ldr	r3, [r7, #4]
 801ad00:	681b      	ldr	r3, [r3, #0]
 801ad02:	f042 0201 	orr.w	r2, r2, #1
 801ad06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801ad08:	687b      	ldr	r3, [r7, #4]
 801ad0a:	681b      	ldr	r3, [r3, #0]
 801ad0c:	4a1e      	ldr	r2, [pc, #120]	; (801ad88 <HAL_TIM_Base_Start_IT+0xb0>)
 801ad0e:	4293      	cmp	r3, r2
 801ad10:	d018      	beq.n	801ad44 <HAL_TIM_Base_Start_IT+0x6c>
 801ad12:	687b      	ldr	r3, [r7, #4]
 801ad14:	681b      	ldr	r3, [r3, #0]
 801ad16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ad1a:	d013      	beq.n	801ad44 <HAL_TIM_Base_Start_IT+0x6c>
 801ad1c:	687b      	ldr	r3, [r7, #4]
 801ad1e:	681b      	ldr	r3, [r3, #0]
 801ad20:	4a1a      	ldr	r2, [pc, #104]	; (801ad8c <HAL_TIM_Base_Start_IT+0xb4>)
 801ad22:	4293      	cmp	r3, r2
 801ad24:	d00e      	beq.n	801ad44 <HAL_TIM_Base_Start_IT+0x6c>
 801ad26:	687b      	ldr	r3, [r7, #4]
 801ad28:	681b      	ldr	r3, [r3, #0]
 801ad2a:	4a19      	ldr	r2, [pc, #100]	; (801ad90 <HAL_TIM_Base_Start_IT+0xb8>)
 801ad2c:	4293      	cmp	r3, r2
 801ad2e:	d009      	beq.n	801ad44 <HAL_TIM_Base_Start_IT+0x6c>
 801ad30:	687b      	ldr	r3, [r7, #4]
 801ad32:	681b      	ldr	r3, [r3, #0]
 801ad34:	4a17      	ldr	r2, [pc, #92]	; (801ad94 <HAL_TIM_Base_Start_IT+0xbc>)
 801ad36:	4293      	cmp	r3, r2
 801ad38:	d004      	beq.n	801ad44 <HAL_TIM_Base_Start_IT+0x6c>
 801ad3a:	687b      	ldr	r3, [r7, #4]
 801ad3c:	681b      	ldr	r3, [r3, #0]
 801ad3e:	4a16      	ldr	r2, [pc, #88]	; (801ad98 <HAL_TIM_Base_Start_IT+0xc0>)
 801ad40:	4293      	cmp	r3, r2
 801ad42:	d111      	bne.n	801ad68 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801ad44:	687b      	ldr	r3, [r7, #4]
 801ad46:	681b      	ldr	r3, [r3, #0]
 801ad48:	689b      	ldr	r3, [r3, #8]
 801ad4a:	f003 0307 	and.w	r3, r3, #7
 801ad4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ad50:	68fb      	ldr	r3, [r7, #12]
 801ad52:	2b06      	cmp	r3, #6
 801ad54:	d010      	beq.n	801ad78 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 801ad56:	687b      	ldr	r3, [r7, #4]
 801ad58:	681b      	ldr	r3, [r3, #0]
 801ad5a:	681a      	ldr	r2, [r3, #0]
 801ad5c:	687b      	ldr	r3, [r7, #4]
 801ad5e:	681b      	ldr	r3, [r3, #0]
 801ad60:	f042 0201 	orr.w	r2, r2, #1
 801ad64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ad66:	e007      	b.n	801ad78 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801ad68:	687b      	ldr	r3, [r7, #4]
 801ad6a:	681b      	ldr	r3, [r3, #0]
 801ad6c:	681a      	ldr	r2, [r3, #0]
 801ad6e:	687b      	ldr	r3, [r7, #4]
 801ad70:	681b      	ldr	r3, [r3, #0]
 801ad72:	f042 0201 	orr.w	r2, r2, #1
 801ad76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801ad78:	2300      	movs	r3, #0
}
 801ad7a:	4618      	mov	r0, r3
 801ad7c:	3714      	adds	r7, #20
 801ad7e:	46bd      	mov	sp, r7
 801ad80:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad84:	4770      	bx	lr
 801ad86:	bf00      	nop
 801ad88:	40010000 	.word	0x40010000
 801ad8c:	40000400 	.word	0x40000400
 801ad90:	40000800 	.word	0x40000800
 801ad94:	40000c00 	.word	0x40000c00
 801ad98:	40014000 	.word	0x40014000

0801ad9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801ad9c:	b580      	push	{r7, lr}
 801ad9e:	b082      	sub	sp, #8
 801ada0:	af00      	add	r7, sp, #0
 801ada2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801ada4:	687b      	ldr	r3, [r7, #4]
 801ada6:	2b00      	cmp	r3, #0
 801ada8:	d101      	bne.n	801adae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801adaa:	2301      	movs	r3, #1
 801adac:	e041      	b.n	801ae32 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801adae:	687b      	ldr	r3, [r7, #4]
 801adb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801adb4:	b2db      	uxtb	r3, r3
 801adb6:	2b00      	cmp	r3, #0
 801adb8:	d106      	bne.n	801adc8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801adba:	687b      	ldr	r3, [r7, #4]
 801adbc:	2200      	movs	r2, #0
 801adbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801adc2:	6878      	ldr	r0, [r7, #4]
 801adc4:	f000 f839 	bl	801ae3a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801adc8:	687b      	ldr	r3, [r7, #4]
 801adca:	2202      	movs	r2, #2
 801adcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801add0:	687b      	ldr	r3, [r7, #4]
 801add2:	681a      	ldr	r2, [r3, #0]
 801add4:	687b      	ldr	r3, [r7, #4]
 801add6:	3304      	adds	r3, #4
 801add8:	4619      	mov	r1, r3
 801adda:	4610      	mov	r0, r2
 801addc:	f000 fba2 	bl	801b524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801ade0:	687b      	ldr	r3, [r7, #4]
 801ade2:	2201      	movs	r2, #1
 801ade4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ade8:	687b      	ldr	r3, [r7, #4]
 801adea:	2201      	movs	r2, #1
 801adec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801adf0:	687b      	ldr	r3, [r7, #4]
 801adf2:	2201      	movs	r2, #1
 801adf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801adf8:	687b      	ldr	r3, [r7, #4]
 801adfa:	2201      	movs	r2, #1
 801adfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801ae00:	687b      	ldr	r3, [r7, #4]
 801ae02:	2201      	movs	r2, #1
 801ae04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ae08:	687b      	ldr	r3, [r7, #4]
 801ae0a:	2201      	movs	r2, #1
 801ae0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801ae10:	687b      	ldr	r3, [r7, #4]
 801ae12:	2201      	movs	r2, #1
 801ae14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801ae18:	687b      	ldr	r3, [r7, #4]
 801ae1a:	2201      	movs	r2, #1
 801ae1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ae20:	687b      	ldr	r3, [r7, #4]
 801ae22:	2201      	movs	r2, #1
 801ae24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801ae28:	687b      	ldr	r3, [r7, #4]
 801ae2a:	2201      	movs	r2, #1
 801ae2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801ae30:	2300      	movs	r3, #0
}
 801ae32:	4618      	mov	r0, r3
 801ae34:	3708      	adds	r7, #8
 801ae36:	46bd      	mov	sp, r7
 801ae38:	bd80      	pop	{r7, pc}

0801ae3a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801ae3a:	b480      	push	{r7}
 801ae3c:	b083      	sub	sp, #12
 801ae3e:	af00      	add	r7, sp, #0
 801ae40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801ae42:	bf00      	nop
 801ae44:	370c      	adds	r7, #12
 801ae46:	46bd      	mov	sp, r7
 801ae48:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae4c:	4770      	bx	lr
	...

0801ae50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801ae50:	b580      	push	{r7, lr}
 801ae52:	b084      	sub	sp, #16
 801ae54:	af00      	add	r7, sp, #0
 801ae56:	6078      	str	r0, [r7, #4]
 801ae58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801ae5a:	683b      	ldr	r3, [r7, #0]
 801ae5c:	2b00      	cmp	r3, #0
 801ae5e:	d109      	bne.n	801ae74 <HAL_TIM_PWM_Start+0x24>
 801ae60:	687b      	ldr	r3, [r7, #4]
 801ae62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801ae66:	b2db      	uxtb	r3, r3
 801ae68:	2b01      	cmp	r3, #1
 801ae6a:	bf14      	ite	ne
 801ae6c:	2301      	movne	r3, #1
 801ae6e:	2300      	moveq	r3, #0
 801ae70:	b2db      	uxtb	r3, r3
 801ae72:	e022      	b.n	801aeba <HAL_TIM_PWM_Start+0x6a>
 801ae74:	683b      	ldr	r3, [r7, #0]
 801ae76:	2b04      	cmp	r3, #4
 801ae78:	d109      	bne.n	801ae8e <HAL_TIM_PWM_Start+0x3e>
 801ae7a:	687b      	ldr	r3, [r7, #4]
 801ae7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801ae80:	b2db      	uxtb	r3, r3
 801ae82:	2b01      	cmp	r3, #1
 801ae84:	bf14      	ite	ne
 801ae86:	2301      	movne	r3, #1
 801ae88:	2300      	moveq	r3, #0
 801ae8a:	b2db      	uxtb	r3, r3
 801ae8c:	e015      	b.n	801aeba <HAL_TIM_PWM_Start+0x6a>
 801ae8e:	683b      	ldr	r3, [r7, #0]
 801ae90:	2b08      	cmp	r3, #8
 801ae92:	d109      	bne.n	801aea8 <HAL_TIM_PWM_Start+0x58>
 801ae94:	687b      	ldr	r3, [r7, #4]
 801ae96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801ae9a:	b2db      	uxtb	r3, r3
 801ae9c:	2b01      	cmp	r3, #1
 801ae9e:	bf14      	ite	ne
 801aea0:	2301      	movne	r3, #1
 801aea2:	2300      	moveq	r3, #0
 801aea4:	b2db      	uxtb	r3, r3
 801aea6:	e008      	b.n	801aeba <HAL_TIM_PWM_Start+0x6a>
 801aea8:	687b      	ldr	r3, [r7, #4]
 801aeaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801aeae:	b2db      	uxtb	r3, r3
 801aeb0:	2b01      	cmp	r3, #1
 801aeb2:	bf14      	ite	ne
 801aeb4:	2301      	movne	r3, #1
 801aeb6:	2300      	moveq	r3, #0
 801aeb8:	b2db      	uxtb	r3, r3
 801aeba:	2b00      	cmp	r3, #0
 801aebc:	d001      	beq.n	801aec2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 801aebe:	2301      	movs	r3, #1
 801aec0:	e068      	b.n	801af94 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801aec2:	683b      	ldr	r3, [r7, #0]
 801aec4:	2b00      	cmp	r3, #0
 801aec6:	d104      	bne.n	801aed2 <HAL_TIM_PWM_Start+0x82>
 801aec8:	687b      	ldr	r3, [r7, #4]
 801aeca:	2202      	movs	r2, #2
 801aecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801aed0:	e013      	b.n	801aefa <HAL_TIM_PWM_Start+0xaa>
 801aed2:	683b      	ldr	r3, [r7, #0]
 801aed4:	2b04      	cmp	r3, #4
 801aed6:	d104      	bne.n	801aee2 <HAL_TIM_PWM_Start+0x92>
 801aed8:	687b      	ldr	r3, [r7, #4]
 801aeda:	2202      	movs	r2, #2
 801aedc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801aee0:	e00b      	b.n	801aefa <HAL_TIM_PWM_Start+0xaa>
 801aee2:	683b      	ldr	r3, [r7, #0]
 801aee4:	2b08      	cmp	r3, #8
 801aee6:	d104      	bne.n	801aef2 <HAL_TIM_PWM_Start+0xa2>
 801aee8:	687b      	ldr	r3, [r7, #4]
 801aeea:	2202      	movs	r2, #2
 801aeec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801aef0:	e003      	b.n	801aefa <HAL_TIM_PWM_Start+0xaa>
 801aef2:	687b      	ldr	r3, [r7, #4]
 801aef4:	2202      	movs	r2, #2
 801aef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801aefa:	687b      	ldr	r3, [r7, #4]
 801aefc:	681b      	ldr	r3, [r3, #0]
 801aefe:	2201      	movs	r2, #1
 801af00:	6839      	ldr	r1, [r7, #0]
 801af02:	4618      	mov	r0, r3
 801af04:	f000 fdb4 	bl	801ba70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801af08:	687b      	ldr	r3, [r7, #4]
 801af0a:	681b      	ldr	r3, [r3, #0]
 801af0c:	4a23      	ldr	r2, [pc, #140]	; (801af9c <HAL_TIM_PWM_Start+0x14c>)
 801af0e:	4293      	cmp	r3, r2
 801af10:	d107      	bne.n	801af22 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801af12:	687b      	ldr	r3, [r7, #4]
 801af14:	681b      	ldr	r3, [r3, #0]
 801af16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801af18:	687b      	ldr	r3, [r7, #4]
 801af1a:	681b      	ldr	r3, [r3, #0]
 801af1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801af20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801af22:	687b      	ldr	r3, [r7, #4]
 801af24:	681b      	ldr	r3, [r3, #0]
 801af26:	4a1d      	ldr	r2, [pc, #116]	; (801af9c <HAL_TIM_PWM_Start+0x14c>)
 801af28:	4293      	cmp	r3, r2
 801af2a:	d018      	beq.n	801af5e <HAL_TIM_PWM_Start+0x10e>
 801af2c:	687b      	ldr	r3, [r7, #4]
 801af2e:	681b      	ldr	r3, [r3, #0]
 801af30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801af34:	d013      	beq.n	801af5e <HAL_TIM_PWM_Start+0x10e>
 801af36:	687b      	ldr	r3, [r7, #4]
 801af38:	681b      	ldr	r3, [r3, #0]
 801af3a:	4a19      	ldr	r2, [pc, #100]	; (801afa0 <HAL_TIM_PWM_Start+0x150>)
 801af3c:	4293      	cmp	r3, r2
 801af3e:	d00e      	beq.n	801af5e <HAL_TIM_PWM_Start+0x10e>
 801af40:	687b      	ldr	r3, [r7, #4]
 801af42:	681b      	ldr	r3, [r3, #0]
 801af44:	4a17      	ldr	r2, [pc, #92]	; (801afa4 <HAL_TIM_PWM_Start+0x154>)
 801af46:	4293      	cmp	r3, r2
 801af48:	d009      	beq.n	801af5e <HAL_TIM_PWM_Start+0x10e>
 801af4a:	687b      	ldr	r3, [r7, #4]
 801af4c:	681b      	ldr	r3, [r3, #0]
 801af4e:	4a16      	ldr	r2, [pc, #88]	; (801afa8 <HAL_TIM_PWM_Start+0x158>)
 801af50:	4293      	cmp	r3, r2
 801af52:	d004      	beq.n	801af5e <HAL_TIM_PWM_Start+0x10e>
 801af54:	687b      	ldr	r3, [r7, #4]
 801af56:	681b      	ldr	r3, [r3, #0]
 801af58:	4a14      	ldr	r2, [pc, #80]	; (801afac <HAL_TIM_PWM_Start+0x15c>)
 801af5a:	4293      	cmp	r3, r2
 801af5c:	d111      	bne.n	801af82 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801af5e:	687b      	ldr	r3, [r7, #4]
 801af60:	681b      	ldr	r3, [r3, #0]
 801af62:	689b      	ldr	r3, [r3, #8]
 801af64:	f003 0307 	and.w	r3, r3, #7
 801af68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801af6a:	68fb      	ldr	r3, [r7, #12]
 801af6c:	2b06      	cmp	r3, #6
 801af6e:	d010      	beq.n	801af92 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 801af70:	687b      	ldr	r3, [r7, #4]
 801af72:	681b      	ldr	r3, [r3, #0]
 801af74:	681a      	ldr	r2, [r3, #0]
 801af76:	687b      	ldr	r3, [r7, #4]
 801af78:	681b      	ldr	r3, [r3, #0]
 801af7a:	f042 0201 	orr.w	r2, r2, #1
 801af7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801af80:	e007      	b.n	801af92 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801af82:	687b      	ldr	r3, [r7, #4]
 801af84:	681b      	ldr	r3, [r3, #0]
 801af86:	681a      	ldr	r2, [r3, #0]
 801af88:	687b      	ldr	r3, [r7, #4]
 801af8a:	681b      	ldr	r3, [r3, #0]
 801af8c:	f042 0201 	orr.w	r2, r2, #1
 801af90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801af92:	2300      	movs	r3, #0
}
 801af94:	4618      	mov	r0, r3
 801af96:	3710      	adds	r7, #16
 801af98:	46bd      	mov	sp, r7
 801af9a:	bd80      	pop	{r7, pc}
 801af9c:	40010000 	.word	0x40010000
 801afa0:	40000400 	.word	0x40000400
 801afa4:	40000800 	.word	0x40000800
 801afa8:	40000c00 	.word	0x40000c00
 801afac:	40014000 	.word	0x40014000

0801afb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801afb0:	b580      	push	{r7, lr}
 801afb2:	b082      	sub	sp, #8
 801afb4:	af00      	add	r7, sp, #0
 801afb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801afb8:	687b      	ldr	r3, [r7, #4]
 801afba:	681b      	ldr	r3, [r3, #0]
 801afbc:	691b      	ldr	r3, [r3, #16]
 801afbe:	f003 0302 	and.w	r3, r3, #2
 801afc2:	2b02      	cmp	r3, #2
 801afc4:	d122      	bne.n	801b00c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801afc6:	687b      	ldr	r3, [r7, #4]
 801afc8:	681b      	ldr	r3, [r3, #0]
 801afca:	68db      	ldr	r3, [r3, #12]
 801afcc:	f003 0302 	and.w	r3, r3, #2
 801afd0:	2b02      	cmp	r3, #2
 801afd2:	d11b      	bne.n	801b00c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801afd4:	687b      	ldr	r3, [r7, #4]
 801afd6:	681b      	ldr	r3, [r3, #0]
 801afd8:	f06f 0202 	mvn.w	r2, #2
 801afdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801afde:	687b      	ldr	r3, [r7, #4]
 801afe0:	2201      	movs	r2, #1
 801afe2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801afe4:	687b      	ldr	r3, [r7, #4]
 801afe6:	681b      	ldr	r3, [r3, #0]
 801afe8:	699b      	ldr	r3, [r3, #24]
 801afea:	f003 0303 	and.w	r3, r3, #3
 801afee:	2b00      	cmp	r3, #0
 801aff0:	d003      	beq.n	801affa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801aff2:	6878      	ldr	r0, [r7, #4]
 801aff4:	f000 fa77 	bl	801b4e6 <HAL_TIM_IC_CaptureCallback>
 801aff8:	e005      	b.n	801b006 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801affa:	6878      	ldr	r0, [r7, #4]
 801affc:	f000 fa69 	bl	801b4d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801b000:	6878      	ldr	r0, [r7, #4]
 801b002:	f000 fa7a 	bl	801b4fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801b006:	687b      	ldr	r3, [r7, #4]
 801b008:	2200      	movs	r2, #0
 801b00a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801b00c:	687b      	ldr	r3, [r7, #4]
 801b00e:	681b      	ldr	r3, [r3, #0]
 801b010:	691b      	ldr	r3, [r3, #16]
 801b012:	f003 0304 	and.w	r3, r3, #4
 801b016:	2b04      	cmp	r3, #4
 801b018:	d122      	bne.n	801b060 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801b01a:	687b      	ldr	r3, [r7, #4]
 801b01c:	681b      	ldr	r3, [r3, #0]
 801b01e:	68db      	ldr	r3, [r3, #12]
 801b020:	f003 0304 	and.w	r3, r3, #4
 801b024:	2b04      	cmp	r3, #4
 801b026:	d11b      	bne.n	801b060 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801b028:	687b      	ldr	r3, [r7, #4]
 801b02a:	681b      	ldr	r3, [r3, #0]
 801b02c:	f06f 0204 	mvn.w	r2, #4
 801b030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801b032:	687b      	ldr	r3, [r7, #4]
 801b034:	2202      	movs	r2, #2
 801b036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801b038:	687b      	ldr	r3, [r7, #4]
 801b03a:	681b      	ldr	r3, [r3, #0]
 801b03c:	699b      	ldr	r3, [r3, #24]
 801b03e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b042:	2b00      	cmp	r3, #0
 801b044:	d003      	beq.n	801b04e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801b046:	6878      	ldr	r0, [r7, #4]
 801b048:	f000 fa4d 	bl	801b4e6 <HAL_TIM_IC_CaptureCallback>
 801b04c:	e005      	b.n	801b05a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801b04e:	6878      	ldr	r0, [r7, #4]
 801b050:	f000 fa3f 	bl	801b4d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801b054:	6878      	ldr	r0, [r7, #4]
 801b056:	f000 fa50 	bl	801b4fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801b05a:	687b      	ldr	r3, [r7, #4]
 801b05c:	2200      	movs	r2, #0
 801b05e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801b060:	687b      	ldr	r3, [r7, #4]
 801b062:	681b      	ldr	r3, [r3, #0]
 801b064:	691b      	ldr	r3, [r3, #16]
 801b066:	f003 0308 	and.w	r3, r3, #8
 801b06a:	2b08      	cmp	r3, #8
 801b06c:	d122      	bne.n	801b0b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801b06e:	687b      	ldr	r3, [r7, #4]
 801b070:	681b      	ldr	r3, [r3, #0]
 801b072:	68db      	ldr	r3, [r3, #12]
 801b074:	f003 0308 	and.w	r3, r3, #8
 801b078:	2b08      	cmp	r3, #8
 801b07a:	d11b      	bne.n	801b0b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801b07c:	687b      	ldr	r3, [r7, #4]
 801b07e:	681b      	ldr	r3, [r3, #0]
 801b080:	f06f 0208 	mvn.w	r2, #8
 801b084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801b086:	687b      	ldr	r3, [r7, #4]
 801b088:	2204      	movs	r2, #4
 801b08a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801b08c:	687b      	ldr	r3, [r7, #4]
 801b08e:	681b      	ldr	r3, [r3, #0]
 801b090:	69db      	ldr	r3, [r3, #28]
 801b092:	f003 0303 	and.w	r3, r3, #3
 801b096:	2b00      	cmp	r3, #0
 801b098:	d003      	beq.n	801b0a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801b09a:	6878      	ldr	r0, [r7, #4]
 801b09c:	f000 fa23 	bl	801b4e6 <HAL_TIM_IC_CaptureCallback>
 801b0a0:	e005      	b.n	801b0ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801b0a2:	6878      	ldr	r0, [r7, #4]
 801b0a4:	f000 fa15 	bl	801b4d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801b0a8:	6878      	ldr	r0, [r7, #4]
 801b0aa:	f000 fa26 	bl	801b4fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801b0ae:	687b      	ldr	r3, [r7, #4]
 801b0b0:	2200      	movs	r2, #0
 801b0b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801b0b4:	687b      	ldr	r3, [r7, #4]
 801b0b6:	681b      	ldr	r3, [r3, #0]
 801b0b8:	691b      	ldr	r3, [r3, #16]
 801b0ba:	f003 0310 	and.w	r3, r3, #16
 801b0be:	2b10      	cmp	r3, #16
 801b0c0:	d122      	bne.n	801b108 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801b0c2:	687b      	ldr	r3, [r7, #4]
 801b0c4:	681b      	ldr	r3, [r3, #0]
 801b0c6:	68db      	ldr	r3, [r3, #12]
 801b0c8:	f003 0310 	and.w	r3, r3, #16
 801b0cc:	2b10      	cmp	r3, #16
 801b0ce:	d11b      	bne.n	801b108 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801b0d0:	687b      	ldr	r3, [r7, #4]
 801b0d2:	681b      	ldr	r3, [r3, #0]
 801b0d4:	f06f 0210 	mvn.w	r2, #16
 801b0d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801b0da:	687b      	ldr	r3, [r7, #4]
 801b0dc:	2208      	movs	r2, #8
 801b0de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801b0e0:	687b      	ldr	r3, [r7, #4]
 801b0e2:	681b      	ldr	r3, [r3, #0]
 801b0e4:	69db      	ldr	r3, [r3, #28]
 801b0e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b0ea:	2b00      	cmp	r3, #0
 801b0ec:	d003      	beq.n	801b0f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801b0ee:	6878      	ldr	r0, [r7, #4]
 801b0f0:	f000 f9f9 	bl	801b4e6 <HAL_TIM_IC_CaptureCallback>
 801b0f4:	e005      	b.n	801b102 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801b0f6:	6878      	ldr	r0, [r7, #4]
 801b0f8:	f000 f9eb 	bl	801b4d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801b0fc:	6878      	ldr	r0, [r7, #4]
 801b0fe:	f000 f9fc 	bl	801b4fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801b102:	687b      	ldr	r3, [r7, #4]
 801b104:	2200      	movs	r2, #0
 801b106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801b108:	687b      	ldr	r3, [r7, #4]
 801b10a:	681b      	ldr	r3, [r3, #0]
 801b10c:	691b      	ldr	r3, [r3, #16]
 801b10e:	f003 0301 	and.w	r3, r3, #1
 801b112:	2b01      	cmp	r3, #1
 801b114:	d10e      	bne.n	801b134 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801b116:	687b      	ldr	r3, [r7, #4]
 801b118:	681b      	ldr	r3, [r3, #0]
 801b11a:	68db      	ldr	r3, [r3, #12]
 801b11c:	f003 0301 	and.w	r3, r3, #1
 801b120:	2b01      	cmp	r3, #1
 801b122:	d107      	bne.n	801b134 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801b124:	687b      	ldr	r3, [r7, #4]
 801b126:	681b      	ldr	r3, [r3, #0]
 801b128:	f06f 0201 	mvn.w	r2, #1
 801b12c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801b12e:	6878      	ldr	r0, [r7, #4]
 801b130:	f7e9 f85e 	bl	80041f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801b134:	687b      	ldr	r3, [r7, #4]
 801b136:	681b      	ldr	r3, [r3, #0]
 801b138:	691b      	ldr	r3, [r3, #16]
 801b13a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b13e:	2b80      	cmp	r3, #128	; 0x80
 801b140:	d10e      	bne.n	801b160 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801b142:	687b      	ldr	r3, [r7, #4]
 801b144:	681b      	ldr	r3, [r3, #0]
 801b146:	68db      	ldr	r3, [r3, #12]
 801b148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b14c:	2b80      	cmp	r3, #128	; 0x80
 801b14e:	d107      	bne.n	801b160 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801b150:	687b      	ldr	r3, [r7, #4]
 801b152:	681b      	ldr	r3, [r3, #0]
 801b154:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801b158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801b15a:	6878      	ldr	r0, [r7, #4]
 801b15c:	f000 fd26 	bl	801bbac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801b160:	687b      	ldr	r3, [r7, #4]
 801b162:	681b      	ldr	r3, [r3, #0]
 801b164:	691b      	ldr	r3, [r3, #16]
 801b166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b16a:	2b40      	cmp	r3, #64	; 0x40
 801b16c:	d10e      	bne.n	801b18c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801b16e:	687b      	ldr	r3, [r7, #4]
 801b170:	681b      	ldr	r3, [r3, #0]
 801b172:	68db      	ldr	r3, [r3, #12]
 801b174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b178:	2b40      	cmp	r3, #64	; 0x40
 801b17a:	d107      	bne.n	801b18c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801b17c:	687b      	ldr	r3, [r7, #4]
 801b17e:	681b      	ldr	r3, [r3, #0]
 801b180:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801b184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801b186:	6878      	ldr	r0, [r7, #4]
 801b188:	f000 f9c1 	bl	801b50e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801b18c:	687b      	ldr	r3, [r7, #4]
 801b18e:	681b      	ldr	r3, [r3, #0]
 801b190:	691b      	ldr	r3, [r3, #16]
 801b192:	f003 0320 	and.w	r3, r3, #32
 801b196:	2b20      	cmp	r3, #32
 801b198:	d10e      	bne.n	801b1b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801b19a:	687b      	ldr	r3, [r7, #4]
 801b19c:	681b      	ldr	r3, [r3, #0]
 801b19e:	68db      	ldr	r3, [r3, #12]
 801b1a0:	f003 0320 	and.w	r3, r3, #32
 801b1a4:	2b20      	cmp	r3, #32
 801b1a6:	d107      	bne.n	801b1b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801b1a8:	687b      	ldr	r3, [r7, #4]
 801b1aa:	681b      	ldr	r3, [r3, #0]
 801b1ac:	f06f 0220 	mvn.w	r2, #32
 801b1b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801b1b2:	6878      	ldr	r0, [r7, #4]
 801b1b4:	f000 fcf0 	bl	801bb98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801b1b8:	bf00      	nop
 801b1ba:	3708      	adds	r7, #8
 801b1bc:	46bd      	mov	sp, r7
 801b1be:	bd80      	pop	{r7, pc}

0801b1c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801b1c0:	b580      	push	{r7, lr}
 801b1c2:	b086      	sub	sp, #24
 801b1c4:	af00      	add	r7, sp, #0
 801b1c6:	60f8      	str	r0, [r7, #12]
 801b1c8:	60b9      	str	r1, [r7, #8]
 801b1ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801b1cc:	2300      	movs	r3, #0
 801b1ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801b1d0:	68fb      	ldr	r3, [r7, #12]
 801b1d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801b1d6:	2b01      	cmp	r3, #1
 801b1d8:	d101      	bne.n	801b1de <HAL_TIM_PWM_ConfigChannel+0x1e>
 801b1da:	2302      	movs	r3, #2
 801b1dc:	e0ae      	b.n	801b33c <HAL_TIM_PWM_ConfigChannel+0x17c>
 801b1de:	68fb      	ldr	r3, [r7, #12]
 801b1e0:	2201      	movs	r2, #1
 801b1e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801b1e6:	687b      	ldr	r3, [r7, #4]
 801b1e8:	2b0c      	cmp	r3, #12
 801b1ea:	f200 809f 	bhi.w	801b32c <HAL_TIM_PWM_ConfigChannel+0x16c>
 801b1ee:	a201      	add	r2, pc, #4	; (adr r2, 801b1f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801b1f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b1f4:	0801b229 	.word	0x0801b229
 801b1f8:	0801b32d 	.word	0x0801b32d
 801b1fc:	0801b32d 	.word	0x0801b32d
 801b200:	0801b32d 	.word	0x0801b32d
 801b204:	0801b269 	.word	0x0801b269
 801b208:	0801b32d 	.word	0x0801b32d
 801b20c:	0801b32d 	.word	0x0801b32d
 801b210:	0801b32d 	.word	0x0801b32d
 801b214:	0801b2ab 	.word	0x0801b2ab
 801b218:	0801b32d 	.word	0x0801b32d
 801b21c:	0801b32d 	.word	0x0801b32d
 801b220:	0801b32d 	.word	0x0801b32d
 801b224:	0801b2eb 	.word	0x0801b2eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801b228:	68fb      	ldr	r3, [r7, #12]
 801b22a:	681b      	ldr	r3, [r3, #0]
 801b22c:	68b9      	ldr	r1, [r7, #8]
 801b22e:	4618      	mov	r0, r3
 801b230:	f000 f9f8 	bl	801b624 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801b234:	68fb      	ldr	r3, [r7, #12]
 801b236:	681b      	ldr	r3, [r3, #0]
 801b238:	699a      	ldr	r2, [r3, #24]
 801b23a:	68fb      	ldr	r3, [r7, #12]
 801b23c:	681b      	ldr	r3, [r3, #0]
 801b23e:	f042 0208 	orr.w	r2, r2, #8
 801b242:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801b244:	68fb      	ldr	r3, [r7, #12]
 801b246:	681b      	ldr	r3, [r3, #0]
 801b248:	699a      	ldr	r2, [r3, #24]
 801b24a:	68fb      	ldr	r3, [r7, #12]
 801b24c:	681b      	ldr	r3, [r3, #0]
 801b24e:	f022 0204 	bic.w	r2, r2, #4
 801b252:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801b254:	68fb      	ldr	r3, [r7, #12]
 801b256:	681b      	ldr	r3, [r3, #0]
 801b258:	6999      	ldr	r1, [r3, #24]
 801b25a:	68bb      	ldr	r3, [r7, #8]
 801b25c:	691a      	ldr	r2, [r3, #16]
 801b25e:	68fb      	ldr	r3, [r7, #12]
 801b260:	681b      	ldr	r3, [r3, #0]
 801b262:	430a      	orrs	r2, r1
 801b264:	619a      	str	r2, [r3, #24]
      break;
 801b266:	e064      	b.n	801b332 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801b268:	68fb      	ldr	r3, [r7, #12]
 801b26a:	681b      	ldr	r3, [r3, #0]
 801b26c:	68b9      	ldr	r1, [r7, #8]
 801b26e:	4618      	mov	r0, r3
 801b270:	f000 fa3e 	bl	801b6f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801b274:	68fb      	ldr	r3, [r7, #12]
 801b276:	681b      	ldr	r3, [r3, #0]
 801b278:	699a      	ldr	r2, [r3, #24]
 801b27a:	68fb      	ldr	r3, [r7, #12]
 801b27c:	681b      	ldr	r3, [r3, #0]
 801b27e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801b282:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801b284:	68fb      	ldr	r3, [r7, #12]
 801b286:	681b      	ldr	r3, [r3, #0]
 801b288:	699a      	ldr	r2, [r3, #24]
 801b28a:	68fb      	ldr	r3, [r7, #12]
 801b28c:	681b      	ldr	r3, [r3, #0]
 801b28e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801b292:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801b294:	68fb      	ldr	r3, [r7, #12]
 801b296:	681b      	ldr	r3, [r3, #0]
 801b298:	6999      	ldr	r1, [r3, #24]
 801b29a:	68bb      	ldr	r3, [r7, #8]
 801b29c:	691b      	ldr	r3, [r3, #16]
 801b29e:	021a      	lsls	r2, r3, #8
 801b2a0:	68fb      	ldr	r3, [r7, #12]
 801b2a2:	681b      	ldr	r3, [r3, #0]
 801b2a4:	430a      	orrs	r2, r1
 801b2a6:	619a      	str	r2, [r3, #24]
      break;
 801b2a8:	e043      	b.n	801b332 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801b2aa:	68fb      	ldr	r3, [r7, #12]
 801b2ac:	681b      	ldr	r3, [r3, #0]
 801b2ae:	68b9      	ldr	r1, [r7, #8]
 801b2b0:	4618      	mov	r0, r3
 801b2b2:	f000 fa89 	bl	801b7c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801b2b6:	68fb      	ldr	r3, [r7, #12]
 801b2b8:	681b      	ldr	r3, [r3, #0]
 801b2ba:	69da      	ldr	r2, [r3, #28]
 801b2bc:	68fb      	ldr	r3, [r7, #12]
 801b2be:	681b      	ldr	r3, [r3, #0]
 801b2c0:	f042 0208 	orr.w	r2, r2, #8
 801b2c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801b2c6:	68fb      	ldr	r3, [r7, #12]
 801b2c8:	681b      	ldr	r3, [r3, #0]
 801b2ca:	69da      	ldr	r2, [r3, #28]
 801b2cc:	68fb      	ldr	r3, [r7, #12]
 801b2ce:	681b      	ldr	r3, [r3, #0]
 801b2d0:	f022 0204 	bic.w	r2, r2, #4
 801b2d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801b2d6:	68fb      	ldr	r3, [r7, #12]
 801b2d8:	681b      	ldr	r3, [r3, #0]
 801b2da:	69d9      	ldr	r1, [r3, #28]
 801b2dc:	68bb      	ldr	r3, [r7, #8]
 801b2de:	691a      	ldr	r2, [r3, #16]
 801b2e0:	68fb      	ldr	r3, [r7, #12]
 801b2e2:	681b      	ldr	r3, [r3, #0]
 801b2e4:	430a      	orrs	r2, r1
 801b2e6:	61da      	str	r2, [r3, #28]
      break;
 801b2e8:	e023      	b.n	801b332 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801b2ea:	68fb      	ldr	r3, [r7, #12]
 801b2ec:	681b      	ldr	r3, [r3, #0]
 801b2ee:	68b9      	ldr	r1, [r7, #8]
 801b2f0:	4618      	mov	r0, r3
 801b2f2:	f000 fad3 	bl	801b89c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801b2f6:	68fb      	ldr	r3, [r7, #12]
 801b2f8:	681b      	ldr	r3, [r3, #0]
 801b2fa:	69da      	ldr	r2, [r3, #28]
 801b2fc:	68fb      	ldr	r3, [r7, #12]
 801b2fe:	681b      	ldr	r3, [r3, #0]
 801b300:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801b304:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801b306:	68fb      	ldr	r3, [r7, #12]
 801b308:	681b      	ldr	r3, [r3, #0]
 801b30a:	69da      	ldr	r2, [r3, #28]
 801b30c:	68fb      	ldr	r3, [r7, #12]
 801b30e:	681b      	ldr	r3, [r3, #0]
 801b310:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801b314:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801b316:	68fb      	ldr	r3, [r7, #12]
 801b318:	681b      	ldr	r3, [r3, #0]
 801b31a:	69d9      	ldr	r1, [r3, #28]
 801b31c:	68bb      	ldr	r3, [r7, #8]
 801b31e:	691b      	ldr	r3, [r3, #16]
 801b320:	021a      	lsls	r2, r3, #8
 801b322:	68fb      	ldr	r3, [r7, #12]
 801b324:	681b      	ldr	r3, [r3, #0]
 801b326:	430a      	orrs	r2, r1
 801b328:	61da      	str	r2, [r3, #28]
      break;
 801b32a:	e002      	b.n	801b332 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 801b32c:	2301      	movs	r3, #1
 801b32e:	75fb      	strb	r3, [r7, #23]
      break;
 801b330:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801b332:	68fb      	ldr	r3, [r7, #12]
 801b334:	2200      	movs	r2, #0
 801b336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801b33a:	7dfb      	ldrb	r3, [r7, #23]
}
 801b33c:	4618      	mov	r0, r3
 801b33e:	3718      	adds	r7, #24
 801b340:	46bd      	mov	sp, r7
 801b342:	bd80      	pop	{r7, pc}

0801b344 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801b344:	b580      	push	{r7, lr}
 801b346:	b084      	sub	sp, #16
 801b348:	af00      	add	r7, sp, #0
 801b34a:	6078      	str	r0, [r7, #4]
 801b34c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801b34e:	2300      	movs	r3, #0
 801b350:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801b352:	687b      	ldr	r3, [r7, #4]
 801b354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801b358:	2b01      	cmp	r3, #1
 801b35a:	d101      	bne.n	801b360 <HAL_TIM_ConfigClockSource+0x1c>
 801b35c:	2302      	movs	r3, #2
 801b35e:	e0b4      	b.n	801b4ca <HAL_TIM_ConfigClockSource+0x186>
 801b360:	687b      	ldr	r3, [r7, #4]
 801b362:	2201      	movs	r2, #1
 801b364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801b368:	687b      	ldr	r3, [r7, #4]
 801b36a:	2202      	movs	r2, #2
 801b36c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801b370:	687b      	ldr	r3, [r7, #4]
 801b372:	681b      	ldr	r3, [r3, #0]
 801b374:	689b      	ldr	r3, [r3, #8]
 801b376:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801b378:	68bb      	ldr	r3, [r7, #8]
 801b37a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801b37e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801b380:	68bb      	ldr	r3, [r7, #8]
 801b382:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801b386:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801b388:	687b      	ldr	r3, [r7, #4]
 801b38a:	681b      	ldr	r3, [r3, #0]
 801b38c:	68ba      	ldr	r2, [r7, #8]
 801b38e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801b390:	683b      	ldr	r3, [r7, #0]
 801b392:	681b      	ldr	r3, [r3, #0]
 801b394:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801b398:	d03e      	beq.n	801b418 <HAL_TIM_ConfigClockSource+0xd4>
 801b39a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801b39e:	f200 8087 	bhi.w	801b4b0 <HAL_TIM_ConfigClockSource+0x16c>
 801b3a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b3a6:	f000 8086 	beq.w	801b4b6 <HAL_TIM_ConfigClockSource+0x172>
 801b3aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b3ae:	d87f      	bhi.n	801b4b0 <HAL_TIM_ConfigClockSource+0x16c>
 801b3b0:	2b70      	cmp	r3, #112	; 0x70
 801b3b2:	d01a      	beq.n	801b3ea <HAL_TIM_ConfigClockSource+0xa6>
 801b3b4:	2b70      	cmp	r3, #112	; 0x70
 801b3b6:	d87b      	bhi.n	801b4b0 <HAL_TIM_ConfigClockSource+0x16c>
 801b3b8:	2b60      	cmp	r3, #96	; 0x60
 801b3ba:	d050      	beq.n	801b45e <HAL_TIM_ConfigClockSource+0x11a>
 801b3bc:	2b60      	cmp	r3, #96	; 0x60
 801b3be:	d877      	bhi.n	801b4b0 <HAL_TIM_ConfigClockSource+0x16c>
 801b3c0:	2b50      	cmp	r3, #80	; 0x50
 801b3c2:	d03c      	beq.n	801b43e <HAL_TIM_ConfigClockSource+0xfa>
 801b3c4:	2b50      	cmp	r3, #80	; 0x50
 801b3c6:	d873      	bhi.n	801b4b0 <HAL_TIM_ConfigClockSource+0x16c>
 801b3c8:	2b40      	cmp	r3, #64	; 0x40
 801b3ca:	d058      	beq.n	801b47e <HAL_TIM_ConfigClockSource+0x13a>
 801b3cc:	2b40      	cmp	r3, #64	; 0x40
 801b3ce:	d86f      	bhi.n	801b4b0 <HAL_TIM_ConfigClockSource+0x16c>
 801b3d0:	2b30      	cmp	r3, #48	; 0x30
 801b3d2:	d064      	beq.n	801b49e <HAL_TIM_ConfigClockSource+0x15a>
 801b3d4:	2b30      	cmp	r3, #48	; 0x30
 801b3d6:	d86b      	bhi.n	801b4b0 <HAL_TIM_ConfigClockSource+0x16c>
 801b3d8:	2b20      	cmp	r3, #32
 801b3da:	d060      	beq.n	801b49e <HAL_TIM_ConfigClockSource+0x15a>
 801b3dc:	2b20      	cmp	r3, #32
 801b3de:	d867      	bhi.n	801b4b0 <HAL_TIM_ConfigClockSource+0x16c>
 801b3e0:	2b00      	cmp	r3, #0
 801b3e2:	d05c      	beq.n	801b49e <HAL_TIM_ConfigClockSource+0x15a>
 801b3e4:	2b10      	cmp	r3, #16
 801b3e6:	d05a      	beq.n	801b49e <HAL_TIM_ConfigClockSource+0x15a>
 801b3e8:	e062      	b.n	801b4b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801b3ea:	687b      	ldr	r3, [r7, #4]
 801b3ec:	6818      	ldr	r0, [r3, #0]
 801b3ee:	683b      	ldr	r3, [r7, #0]
 801b3f0:	6899      	ldr	r1, [r3, #8]
 801b3f2:	683b      	ldr	r3, [r7, #0]
 801b3f4:	685a      	ldr	r2, [r3, #4]
 801b3f6:	683b      	ldr	r3, [r7, #0]
 801b3f8:	68db      	ldr	r3, [r3, #12]
 801b3fa:	f000 fb19 	bl	801ba30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801b3fe:	687b      	ldr	r3, [r7, #4]
 801b400:	681b      	ldr	r3, [r3, #0]
 801b402:	689b      	ldr	r3, [r3, #8]
 801b404:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801b406:	68bb      	ldr	r3, [r7, #8]
 801b408:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801b40c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801b40e:	687b      	ldr	r3, [r7, #4]
 801b410:	681b      	ldr	r3, [r3, #0]
 801b412:	68ba      	ldr	r2, [r7, #8]
 801b414:	609a      	str	r2, [r3, #8]
      break;
 801b416:	e04f      	b.n	801b4b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801b418:	687b      	ldr	r3, [r7, #4]
 801b41a:	6818      	ldr	r0, [r3, #0]
 801b41c:	683b      	ldr	r3, [r7, #0]
 801b41e:	6899      	ldr	r1, [r3, #8]
 801b420:	683b      	ldr	r3, [r7, #0]
 801b422:	685a      	ldr	r2, [r3, #4]
 801b424:	683b      	ldr	r3, [r7, #0]
 801b426:	68db      	ldr	r3, [r3, #12]
 801b428:	f000 fb02 	bl	801ba30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801b42c:	687b      	ldr	r3, [r7, #4]
 801b42e:	681b      	ldr	r3, [r3, #0]
 801b430:	689a      	ldr	r2, [r3, #8]
 801b432:	687b      	ldr	r3, [r7, #4]
 801b434:	681b      	ldr	r3, [r3, #0]
 801b436:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801b43a:	609a      	str	r2, [r3, #8]
      break;
 801b43c:	e03c      	b.n	801b4b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801b43e:	687b      	ldr	r3, [r7, #4]
 801b440:	6818      	ldr	r0, [r3, #0]
 801b442:	683b      	ldr	r3, [r7, #0]
 801b444:	6859      	ldr	r1, [r3, #4]
 801b446:	683b      	ldr	r3, [r7, #0]
 801b448:	68db      	ldr	r3, [r3, #12]
 801b44a:	461a      	mov	r2, r3
 801b44c:	f000 fa76 	bl	801b93c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801b450:	687b      	ldr	r3, [r7, #4]
 801b452:	681b      	ldr	r3, [r3, #0]
 801b454:	2150      	movs	r1, #80	; 0x50
 801b456:	4618      	mov	r0, r3
 801b458:	f000 facf 	bl	801b9fa <TIM_ITRx_SetConfig>
      break;
 801b45c:	e02c      	b.n	801b4b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801b45e:	687b      	ldr	r3, [r7, #4]
 801b460:	6818      	ldr	r0, [r3, #0]
 801b462:	683b      	ldr	r3, [r7, #0]
 801b464:	6859      	ldr	r1, [r3, #4]
 801b466:	683b      	ldr	r3, [r7, #0]
 801b468:	68db      	ldr	r3, [r3, #12]
 801b46a:	461a      	mov	r2, r3
 801b46c:	f000 fa95 	bl	801b99a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801b470:	687b      	ldr	r3, [r7, #4]
 801b472:	681b      	ldr	r3, [r3, #0]
 801b474:	2160      	movs	r1, #96	; 0x60
 801b476:	4618      	mov	r0, r3
 801b478:	f000 fabf 	bl	801b9fa <TIM_ITRx_SetConfig>
      break;
 801b47c:	e01c      	b.n	801b4b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801b47e:	687b      	ldr	r3, [r7, #4]
 801b480:	6818      	ldr	r0, [r3, #0]
 801b482:	683b      	ldr	r3, [r7, #0]
 801b484:	6859      	ldr	r1, [r3, #4]
 801b486:	683b      	ldr	r3, [r7, #0]
 801b488:	68db      	ldr	r3, [r3, #12]
 801b48a:	461a      	mov	r2, r3
 801b48c:	f000 fa56 	bl	801b93c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801b490:	687b      	ldr	r3, [r7, #4]
 801b492:	681b      	ldr	r3, [r3, #0]
 801b494:	2140      	movs	r1, #64	; 0x40
 801b496:	4618      	mov	r0, r3
 801b498:	f000 faaf 	bl	801b9fa <TIM_ITRx_SetConfig>
      break;
 801b49c:	e00c      	b.n	801b4b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801b49e:	687b      	ldr	r3, [r7, #4]
 801b4a0:	681a      	ldr	r2, [r3, #0]
 801b4a2:	683b      	ldr	r3, [r7, #0]
 801b4a4:	681b      	ldr	r3, [r3, #0]
 801b4a6:	4619      	mov	r1, r3
 801b4a8:	4610      	mov	r0, r2
 801b4aa:	f000 faa6 	bl	801b9fa <TIM_ITRx_SetConfig>
      break;
 801b4ae:	e003      	b.n	801b4b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 801b4b0:	2301      	movs	r3, #1
 801b4b2:	73fb      	strb	r3, [r7, #15]
      break;
 801b4b4:	e000      	b.n	801b4b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 801b4b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801b4b8:	687b      	ldr	r3, [r7, #4]
 801b4ba:	2201      	movs	r2, #1
 801b4bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801b4c0:	687b      	ldr	r3, [r7, #4]
 801b4c2:	2200      	movs	r2, #0
 801b4c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801b4c8:	7bfb      	ldrb	r3, [r7, #15]
}
 801b4ca:	4618      	mov	r0, r3
 801b4cc:	3710      	adds	r7, #16
 801b4ce:	46bd      	mov	sp, r7
 801b4d0:	bd80      	pop	{r7, pc}

0801b4d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801b4d2:	b480      	push	{r7}
 801b4d4:	b083      	sub	sp, #12
 801b4d6:	af00      	add	r7, sp, #0
 801b4d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801b4da:	bf00      	nop
 801b4dc:	370c      	adds	r7, #12
 801b4de:	46bd      	mov	sp, r7
 801b4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4e4:	4770      	bx	lr

0801b4e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801b4e6:	b480      	push	{r7}
 801b4e8:	b083      	sub	sp, #12
 801b4ea:	af00      	add	r7, sp, #0
 801b4ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801b4ee:	bf00      	nop
 801b4f0:	370c      	adds	r7, #12
 801b4f2:	46bd      	mov	sp, r7
 801b4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4f8:	4770      	bx	lr

0801b4fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801b4fa:	b480      	push	{r7}
 801b4fc:	b083      	sub	sp, #12
 801b4fe:	af00      	add	r7, sp, #0
 801b500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801b502:	bf00      	nop
 801b504:	370c      	adds	r7, #12
 801b506:	46bd      	mov	sp, r7
 801b508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b50c:	4770      	bx	lr

0801b50e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801b50e:	b480      	push	{r7}
 801b510:	b083      	sub	sp, #12
 801b512:	af00      	add	r7, sp, #0
 801b514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801b516:	bf00      	nop
 801b518:	370c      	adds	r7, #12
 801b51a:	46bd      	mov	sp, r7
 801b51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b520:	4770      	bx	lr
	...

0801b524 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801b524:	b480      	push	{r7}
 801b526:	b085      	sub	sp, #20
 801b528:	af00      	add	r7, sp, #0
 801b52a:	6078      	str	r0, [r7, #4]
 801b52c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801b52e:	687b      	ldr	r3, [r7, #4]
 801b530:	681b      	ldr	r3, [r3, #0]
 801b532:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801b534:	687b      	ldr	r3, [r7, #4]
 801b536:	4a34      	ldr	r2, [pc, #208]	; (801b608 <TIM_Base_SetConfig+0xe4>)
 801b538:	4293      	cmp	r3, r2
 801b53a:	d00f      	beq.n	801b55c <TIM_Base_SetConfig+0x38>
 801b53c:	687b      	ldr	r3, [r7, #4]
 801b53e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b542:	d00b      	beq.n	801b55c <TIM_Base_SetConfig+0x38>
 801b544:	687b      	ldr	r3, [r7, #4]
 801b546:	4a31      	ldr	r2, [pc, #196]	; (801b60c <TIM_Base_SetConfig+0xe8>)
 801b548:	4293      	cmp	r3, r2
 801b54a:	d007      	beq.n	801b55c <TIM_Base_SetConfig+0x38>
 801b54c:	687b      	ldr	r3, [r7, #4]
 801b54e:	4a30      	ldr	r2, [pc, #192]	; (801b610 <TIM_Base_SetConfig+0xec>)
 801b550:	4293      	cmp	r3, r2
 801b552:	d003      	beq.n	801b55c <TIM_Base_SetConfig+0x38>
 801b554:	687b      	ldr	r3, [r7, #4]
 801b556:	4a2f      	ldr	r2, [pc, #188]	; (801b614 <TIM_Base_SetConfig+0xf0>)
 801b558:	4293      	cmp	r3, r2
 801b55a:	d108      	bne.n	801b56e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801b55c:	68fb      	ldr	r3, [r7, #12]
 801b55e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b562:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801b564:	683b      	ldr	r3, [r7, #0]
 801b566:	685b      	ldr	r3, [r3, #4]
 801b568:	68fa      	ldr	r2, [r7, #12]
 801b56a:	4313      	orrs	r3, r2
 801b56c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801b56e:	687b      	ldr	r3, [r7, #4]
 801b570:	4a25      	ldr	r2, [pc, #148]	; (801b608 <TIM_Base_SetConfig+0xe4>)
 801b572:	4293      	cmp	r3, r2
 801b574:	d01b      	beq.n	801b5ae <TIM_Base_SetConfig+0x8a>
 801b576:	687b      	ldr	r3, [r7, #4]
 801b578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b57c:	d017      	beq.n	801b5ae <TIM_Base_SetConfig+0x8a>
 801b57e:	687b      	ldr	r3, [r7, #4]
 801b580:	4a22      	ldr	r2, [pc, #136]	; (801b60c <TIM_Base_SetConfig+0xe8>)
 801b582:	4293      	cmp	r3, r2
 801b584:	d013      	beq.n	801b5ae <TIM_Base_SetConfig+0x8a>
 801b586:	687b      	ldr	r3, [r7, #4]
 801b588:	4a21      	ldr	r2, [pc, #132]	; (801b610 <TIM_Base_SetConfig+0xec>)
 801b58a:	4293      	cmp	r3, r2
 801b58c:	d00f      	beq.n	801b5ae <TIM_Base_SetConfig+0x8a>
 801b58e:	687b      	ldr	r3, [r7, #4]
 801b590:	4a20      	ldr	r2, [pc, #128]	; (801b614 <TIM_Base_SetConfig+0xf0>)
 801b592:	4293      	cmp	r3, r2
 801b594:	d00b      	beq.n	801b5ae <TIM_Base_SetConfig+0x8a>
 801b596:	687b      	ldr	r3, [r7, #4]
 801b598:	4a1f      	ldr	r2, [pc, #124]	; (801b618 <TIM_Base_SetConfig+0xf4>)
 801b59a:	4293      	cmp	r3, r2
 801b59c:	d007      	beq.n	801b5ae <TIM_Base_SetConfig+0x8a>
 801b59e:	687b      	ldr	r3, [r7, #4]
 801b5a0:	4a1e      	ldr	r2, [pc, #120]	; (801b61c <TIM_Base_SetConfig+0xf8>)
 801b5a2:	4293      	cmp	r3, r2
 801b5a4:	d003      	beq.n	801b5ae <TIM_Base_SetConfig+0x8a>
 801b5a6:	687b      	ldr	r3, [r7, #4]
 801b5a8:	4a1d      	ldr	r2, [pc, #116]	; (801b620 <TIM_Base_SetConfig+0xfc>)
 801b5aa:	4293      	cmp	r3, r2
 801b5ac:	d108      	bne.n	801b5c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801b5ae:	68fb      	ldr	r3, [r7, #12]
 801b5b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b5b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801b5b6:	683b      	ldr	r3, [r7, #0]
 801b5b8:	68db      	ldr	r3, [r3, #12]
 801b5ba:	68fa      	ldr	r2, [r7, #12]
 801b5bc:	4313      	orrs	r3, r2
 801b5be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801b5c0:	68fb      	ldr	r3, [r7, #12]
 801b5c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801b5c6:	683b      	ldr	r3, [r7, #0]
 801b5c8:	695b      	ldr	r3, [r3, #20]
 801b5ca:	4313      	orrs	r3, r2
 801b5cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801b5ce:	687b      	ldr	r3, [r7, #4]
 801b5d0:	68fa      	ldr	r2, [r7, #12]
 801b5d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801b5d4:	683b      	ldr	r3, [r7, #0]
 801b5d6:	689a      	ldr	r2, [r3, #8]
 801b5d8:	687b      	ldr	r3, [r7, #4]
 801b5da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801b5dc:	683b      	ldr	r3, [r7, #0]
 801b5de:	681a      	ldr	r2, [r3, #0]
 801b5e0:	687b      	ldr	r3, [r7, #4]
 801b5e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801b5e4:	687b      	ldr	r3, [r7, #4]
 801b5e6:	4a08      	ldr	r2, [pc, #32]	; (801b608 <TIM_Base_SetConfig+0xe4>)
 801b5e8:	4293      	cmp	r3, r2
 801b5ea:	d103      	bne.n	801b5f4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801b5ec:	683b      	ldr	r3, [r7, #0]
 801b5ee:	691a      	ldr	r2, [r3, #16]
 801b5f0:	687b      	ldr	r3, [r7, #4]
 801b5f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801b5f4:	687b      	ldr	r3, [r7, #4]
 801b5f6:	2201      	movs	r2, #1
 801b5f8:	615a      	str	r2, [r3, #20]
}
 801b5fa:	bf00      	nop
 801b5fc:	3714      	adds	r7, #20
 801b5fe:	46bd      	mov	sp, r7
 801b600:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b604:	4770      	bx	lr
 801b606:	bf00      	nop
 801b608:	40010000 	.word	0x40010000
 801b60c:	40000400 	.word	0x40000400
 801b610:	40000800 	.word	0x40000800
 801b614:	40000c00 	.word	0x40000c00
 801b618:	40014000 	.word	0x40014000
 801b61c:	40014400 	.word	0x40014400
 801b620:	40014800 	.word	0x40014800

0801b624 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801b624:	b480      	push	{r7}
 801b626:	b087      	sub	sp, #28
 801b628:	af00      	add	r7, sp, #0
 801b62a:	6078      	str	r0, [r7, #4]
 801b62c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801b62e:	687b      	ldr	r3, [r7, #4]
 801b630:	6a1b      	ldr	r3, [r3, #32]
 801b632:	f023 0201 	bic.w	r2, r3, #1
 801b636:	687b      	ldr	r3, [r7, #4]
 801b638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b63a:	687b      	ldr	r3, [r7, #4]
 801b63c:	6a1b      	ldr	r3, [r3, #32]
 801b63e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b640:	687b      	ldr	r3, [r7, #4]
 801b642:	685b      	ldr	r3, [r3, #4]
 801b644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801b646:	687b      	ldr	r3, [r7, #4]
 801b648:	699b      	ldr	r3, [r3, #24]
 801b64a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801b64c:	68fb      	ldr	r3, [r7, #12]
 801b64e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801b654:	68fb      	ldr	r3, [r7, #12]
 801b656:	f023 0303 	bic.w	r3, r3, #3
 801b65a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801b65c:	683b      	ldr	r3, [r7, #0]
 801b65e:	681b      	ldr	r3, [r3, #0]
 801b660:	68fa      	ldr	r2, [r7, #12]
 801b662:	4313      	orrs	r3, r2
 801b664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801b666:	697b      	ldr	r3, [r7, #20]
 801b668:	f023 0302 	bic.w	r3, r3, #2
 801b66c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801b66e:	683b      	ldr	r3, [r7, #0]
 801b670:	689b      	ldr	r3, [r3, #8]
 801b672:	697a      	ldr	r2, [r7, #20]
 801b674:	4313      	orrs	r3, r2
 801b676:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801b678:	687b      	ldr	r3, [r7, #4]
 801b67a:	4a1c      	ldr	r2, [pc, #112]	; (801b6ec <TIM_OC1_SetConfig+0xc8>)
 801b67c:	4293      	cmp	r3, r2
 801b67e:	d10c      	bne.n	801b69a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801b680:	697b      	ldr	r3, [r7, #20]
 801b682:	f023 0308 	bic.w	r3, r3, #8
 801b686:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801b688:	683b      	ldr	r3, [r7, #0]
 801b68a:	68db      	ldr	r3, [r3, #12]
 801b68c:	697a      	ldr	r2, [r7, #20]
 801b68e:	4313      	orrs	r3, r2
 801b690:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801b692:	697b      	ldr	r3, [r7, #20]
 801b694:	f023 0304 	bic.w	r3, r3, #4
 801b698:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b69a:	687b      	ldr	r3, [r7, #4]
 801b69c:	4a13      	ldr	r2, [pc, #76]	; (801b6ec <TIM_OC1_SetConfig+0xc8>)
 801b69e:	4293      	cmp	r3, r2
 801b6a0:	d111      	bne.n	801b6c6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801b6a2:	693b      	ldr	r3, [r7, #16]
 801b6a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b6a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801b6aa:	693b      	ldr	r3, [r7, #16]
 801b6ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801b6b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801b6b2:	683b      	ldr	r3, [r7, #0]
 801b6b4:	695b      	ldr	r3, [r3, #20]
 801b6b6:	693a      	ldr	r2, [r7, #16]
 801b6b8:	4313      	orrs	r3, r2
 801b6ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801b6bc:	683b      	ldr	r3, [r7, #0]
 801b6be:	699b      	ldr	r3, [r3, #24]
 801b6c0:	693a      	ldr	r2, [r7, #16]
 801b6c2:	4313      	orrs	r3, r2
 801b6c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b6c6:	687b      	ldr	r3, [r7, #4]
 801b6c8:	693a      	ldr	r2, [r7, #16]
 801b6ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801b6cc:	687b      	ldr	r3, [r7, #4]
 801b6ce:	68fa      	ldr	r2, [r7, #12]
 801b6d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801b6d2:	683b      	ldr	r3, [r7, #0]
 801b6d4:	685a      	ldr	r2, [r3, #4]
 801b6d6:	687b      	ldr	r3, [r7, #4]
 801b6d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b6da:	687b      	ldr	r3, [r7, #4]
 801b6dc:	697a      	ldr	r2, [r7, #20]
 801b6de:	621a      	str	r2, [r3, #32]
}
 801b6e0:	bf00      	nop
 801b6e2:	371c      	adds	r7, #28
 801b6e4:	46bd      	mov	sp, r7
 801b6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6ea:	4770      	bx	lr
 801b6ec:	40010000 	.word	0x40010000

0801b6f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801b6f0:	b480      	push	{r7}
 801b6f2:	b087      	sub	sp, #28
 801b6f4:	af00      	add	r7, sp, #0
 801b6f6:	6078      	str	r0, [r7, #4]
 801b6f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801b6fa:	687b      	ldr	r3, [r7, #4]
 801b6fc:	6a1b      	ldr	r3, [r3, #32]
 801b6fe:	f023 0210 	bic.w	r2, r3, #16
 801b702:	687b      	ldr	r3, [r7, #4]
 801b704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b706:	687b      	ldr	r3, [r7, #4]
 801b708:	6a1b      	ldr	r3, [r3, #32]
 801b70a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b70c:	687b      	ldr	r3, [r7, #4]
 801b70e:	685b      	ldr	r3, [r3, #4]
 801b710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801b712:	687b      	ldr	r3, [r7, #4]
 801b714:	699b      	ldr	r3, [r3, #24]
 801b716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801b718:	68fb      	ldr	r3, [r7, #12]
 801b71a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801b71e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801b720:	68fb      	ldr	r3, [r7, #12]
 801b722:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b726:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801b728:	683b      	ldr	r3, [r7, #0]
 801b72a:	681b      	ldr	r3, [r3, #0]
 801b72c:	021b      	lsls	r3, r3, #8
 801b72e:	68fa      	ldr	r2, [r7, #12]
 801b730:	4313      	orrs	r3, r2
 801b732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801b734:	697b      	ldr	r3, [r7, #20]
 801b736:	f023 0320 	bic.w	r3, r3, #32
 801b73a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801b73c:	683b      	ldr	r3, [r7, #0]
 801b73e:	689b      	ldr	r3, [r3, #8]
 801b740:	011b      	lsls	r3, r3, #4
 801b742:	697a      	ldr	r2, [r7, #20]
 801b744:	4313      	orrs	r3, r2
 801b746:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801b748:	687b      	ldr	r3, [r7, #4]
 801b74a:	4a1e      	ldr	r2, [pc, #120]	; (801b7c4 <TIM_OC2_SetConfig+0xd4>)
 801b74c:	4293      	cmp	r3, r2
 801b74e:	d10d      	bne.n	801b76c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801b750:	697b      	ldr	r3, [r7, #20]
 801b752:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b756:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801b758:	683b      	ldr	r3, [r7, #0]
 801b75a:	68db      	ldr	r3, [r3, #12]
 801b75c:	011b      	lsls	r3, r3, #4
 801b75e:	697a      	ldr	r2, [r7, #20]
 801b760:	4313      	orrs	r3, r2
 801b762:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801b764:	697b      	ldr	r3, [r7, #20]
 801b766:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b76a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b76c:	687b      	ldr	r3, [r7, #4]
 801b76e:	4a15      	ldr	r2, [pc, #84]	; (801b7c4 <TIM_OC2_SetConfig+0xd4>)
 801b770:	4293      	cmp	r3, r2
 801b772:	d113      	bne.n	801b79c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801b774:	693b      	ldr	r3, [r7, #16]
 801b776:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801b77a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801b77c:	693b      	ldr	r3, [r7, #16]
 801b77e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b782:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801b784:	683b      	ldr	r3, [r7, #0]
 801b786:	695b      	ldr	r3, [r3, #20]
 801b788:	009b      	lsls	r3, r3, #2
 801b78a:	693a      	ldr	r2, [r7, #16]
 801b78c:	4313      	orrs	r3, r2
 801b78e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801b790:	683b      	ldr	r3, [r7, #0]
 801b792:	699b      	ldr	r3, [r3, #24]
 801b794:	009b      	lsls	r3, r3, #2
 801b796:	693a      	ldr	r2, [r7, #16]
 801b798:	4313      	orrs	r3, r2
 801b79a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b79c:	687b      	ldr	r3, [r7, #4]
 801b79e:	693a      	ldr	r2, [r7, #16]
 801b7a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801b7a2:	687b      	ldr	r3, [r7, #4]
 801b7a4:	68fa      	ldr	r2, [r7, #12]
 801b7a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801b7a8:	683b      	ldr	r3, [r7, #0]
 801b7aa:	685a      	ldr	r2, [r3, #4]
 801b7ac:	687b      	ldr	r3, [r7, #4]
 801b7ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b7b0:	687b      	ldr	r3, [r7, #4]
 801b7b2:	697a      	ldr	r2, [r7, #20]
 801b7b4:	621a      	str	r2, [r3, #32]
}
 801b7b6:	bf00      	nop
 801b7b8:	371c      	adds	r7, #28
 801b7ba:	46bd      	mov	sp, r7
 801b7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7c0:	4770      	bx	lr
 801b7c2:	bf00      	nop
 801b7c4:	40010000 	.word	0x40010000

0801b7c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801b7c8:	b480      	push	{r7}
 801b7ca:	b087      	sub	sp, #28
 801b7cc:	af00      	add	r7, sp, #0
 801b7ce:	6078      	str	r0, [r7, #4]
 801b7d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801b7d2:	687b      	ldr	r3, [r7, #4]
 801b7d4:	6a1b      	ldr	r3, [r3, #32]
 801b7d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801b7da:	687b      	ldr	r3, [r7, #4]
 801b7dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b7de:	687b      	ldr	r3, [r7, #4]
 801b7e0:	6a1b      	ldr	r3, [r3, #32]
 801b7e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b7e4:	687b      	ldr	r3, [r7, #4]
 801b7e6:	685b      	ldr	r3, [r3, #4]
 801b7e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801b7ea:	687b      	ldr	r3, [r7, #4]
 801b7ec:	69db      	ldr	r3, [r3, #28]
 801b7ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801b7f0:	68fb      	ldr	r3, [r7, #12]
 801b7f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b7f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801b7f8:	68fb      	ldr	r3, [r7, #12]
 801b7fa:	f023 0303 	bic.w	r3, r3, #3
 801b7fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801b800:	683b      	ldr	r3, [r7, #0]
 801b802:	681b      	ldr	r3, [r3, #0]
 801b804:	68fa      	ldr	r2, [r7, #12]
 801b806:	4313      	orrs	r3, r2
 801b808:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801b80a:	697b      	ldr	r3, [r7, #20]
 801b80c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801b810:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801b812:	683b      	ldr	r3, [r7, #0]
 801b814:	689b      	ldr	r3, [r3, #8]
 801b816:	021b      	lsls	r3, r3, #8
 801b818:	697a      	ldr	r2, [r7, #20]
 801b81a:	4313      	orrs	r3, r2
 801b81c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801b81e:	687b      	ldr	r3, [r7, #4]
 801b820:	4a1d      	ldr	r2, [pc, #116]	; (801b898 <TIM_OC3_SetConfig+0xd0>)
 801b822:	4293      	cmp	r3, r2
 801b824:	d10d      	bne.n	801b842 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801b826:	697b      	ldr	r3, [r7, #20]
 801b828:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b82c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801b82e:	683b      	ldr	r3, [r7, #0]
 801b830:	68db      	ldr	r3, [r3, #12]
 801b832:	021b      	lsls	r3, r3, #8
 801b834:	697a      	ldr	r2, [r7, #20]
 801b836:	4313      	orrs	r3, r2
 801b838:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801b83a:	697b      	ldr	r3, [r7, #20]
 801b83c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801b840:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b842:	687b      	ldr	r3, [r7, #4]
 801b844:	4a14      	ldr	r2, [pc, #80]	; (801b898 <TIM_OC3_SetConfig+0xd0>)
 801b846:	4293      	cmp	r3, r2
 801b848:	d113      	bne.n	801b872 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801b84a:	693b      	ldr	r3, [r7, #16]
 801b84c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b850:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801b852:	693b      	ldr	r3, [r7, #16]
 801b854:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801b858:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801b85a:	683b      	ldr	r3, [r7, #0]
 801b85c:	695b      	ldr	r3, [r3, #20]
 801b85e:	011b      	lsls	r3, r3, #4
 801b860:	693a      	ldr	r2, [r7, #16]
 801b862:	4313      	orrs	r3, r2
 801b864:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801b866:	683b      	ldr	r3, [r7, #0]
 801b868:	699b      	ldr	r3, [r3, #24]
 801b86a:	011b      	lsls	r3, r3, #4
 801b86c:	693a      	ldr	r2, [r7, #16]
 801b86e:	4313      	orrs	r3, r2
 801b870:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b872:	687b      	ldr	r3, [r7, #4]
 801b874:	693a      	ldr	r2, [r7, #16]
 801b876:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801b878:	687b      	ldr	r3, [r7, #4]
 801b87a:	68fa      	ldr	r2, [r7, #12]
 801b87c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801b87e:	683b      	ldr	r3, [r7, #0]
 801b880:	685a      	ldr	r2, [r3, #4]
 801b882:	687b      	ldr	r3, [r7, #4]
 801b884:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b886:	687b      	ldr	r3, [r7, #4]
 801b888:	697a      	ldr	r2, [r7, #20]
 801b88a:	621a      	str	r2, [r3, #32]
}
 801b88c:	bf00      	nop
 801b88e:	371c      	adds	r7, #28
 801b890:	46bd      	mov	sp, r7
 801b892:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b896:	4770      	bx	lr
 801b898:	40010000 	.word	0x40010000

0801b89c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801b89c:	b480      	push	{r7}
 801b89e:	b087      	sub	sp, #28
 801b8a0:	af00      	add	r7, sp, #0
 801b8a2:	6078      	str	r0, [r7, #4]
 801b8a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801b8a6:	687b      	ldr	r3, [r7, #4]
 801b8a8:	6a1b      	ldr	r3, [r3, #32]
 801b8aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801b8ae:	687b      	ldr	r3, [r7, #4]
 801b8b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b8b2:	687b      	ldr	r3, [r7, #4]
 801b8b4:	6a1b      	ldr	r3, [r3, #32]
 801b8b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b8b8:	687b      	ldr	r3, [r7, #4]
 801b8ba:	685b      	ldr	r3, [r3, #4]
 801b8bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801b8be:	687b      	ldr	r3, [r7, #4]
 801b8c0:	69db      	ldr	r3, [r3, #28]
 801b8c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801b8c4:	68fb      	ldr	r3, [r7, #12]
 801b8c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801b8ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801b8cc:	68fb      	ldr	r3, [r7, #12]
 801b8ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b8d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801b8d4:	683b      	ldr	r3, [r7, #0]
 801b8d6:	681b      	ldr	r3, [r3, #0]
 801b8d8:	021b      	lsls	r3, r3, #8
 801b8da:	68fa      	ldr	r2, [r7, #12]
 801b8dc:	4313      	orrs	r3, r2
 801b8de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801b8e0:	693b      	ldr	r3, [r7, #16]
 801b8e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801b8e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801b8e8:	683b      	ldr	r3, [r7, #0]
 801b8ea:	689b      	ldr	r3, [r3, #8]
 801b8ec:	031b      	lsls	r3, r3, #12
 801b8ee:	693a      	ldr	r2, [r7, #16]
 801b8f0:	4313      	orrs	r3, r2
 801b8f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b8f4:	687b      	ldr	r3, [r7, #4]
 801b8f6:	4a10      	ldr	r2, [pc, #64]	; (801b938 <TIM_OC4_SetConfig+0x9c>)
 801b8f8:	4293      	cmp	r3, r2
 801b8fa:	d109      	bne.n	801b910 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801b8fc:	697b      	ldr	r3, [r7, #20]
 801b8fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801b902:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801b904:	683b      	ldr	r3, [r7, #0]
 801b906:	695b      	ldr	r3, [r3, #20]
 801b908:	019b      	lsls	r3, r3, #6
 801b90a:	697a      	ldr	r2, [r7, #20]
 801b90c:	4313      	orrs	r3, r2
 801b90e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b910:	687b      	ldr	r3, [r7, #4]
 801b912:	697a      	ldr	r2, [r7, #20]
 801b914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801b916:	687b      	ldr	r3, [r7, #4]
 801b918:	68fa      	ldr	r2, [r7, #12]
 801b91a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801b91c:	683b      	ldr	r3, [r7, #0]
 801b91e:	685a      	ldr	r2, [r3, #4]
 801b920:	687b      	ldr	r3, [r7, #4]
 801b922:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b924:	687b      	ldr	r3, [r7, #4]
 801b926:	693a      	ldr	r2, [r7, #16]
 801b928:	621a      	str	r2, [r3, #32]
}
 801b92a:	bf00      	nop
 801b92c:	371c      	adds	r7, #28
 801b92e:	46bd      	mov	sp, r7
 801b930:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b934:	4770      	bx	lr
 801b936:	bf00      	nop
 801b938:	40010000 	.word	0x40010000

0801b93c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801b93c:	b480      	push	{r7}
 801b93e:	b087      	sub	sp, #28
 801b940:	af00      	add	r7, sp, #0
 801b942:	60f8      	str	r0, [r7, #12]
 801b944:	60b9      	str	r1, [r7, #8]
 801b946:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801b948:	68fb      	ldr	r3, [r7, #12]
 801b94a:	6a1b      	ldr	r3, [r3, #32]
 801b94c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801b94e:	68fb      	ldr	r3, [r7, #12]
 801b950:	6a1b      	ldr	r3, [r3, #32]
 801b952:	f023 0201 	bic.w	r2, r3, #1
 801b956:	68fb      	ldr	r3, [r7, #12]
 801b958:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801b95a:	68fb      	ldr	r3, [r7, #12]
 801b95c:	699b      	ldr	r3, [r3, #24]
 801b95e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801b960:	693b      	ldr	r3, [r7, #16]
 801b962:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801b966:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801b968:	687b      	ldr	r3, [r7, #4]
 801b96a:	011b      	lsls	r3, r3, #4
 801b96c:	693a      	ldr	r2, [r7, #16]
 801b96e:	4313      	orrs	r3, r2
 801b970:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801b972:	697b      	ldr	r3, [r7, #20]
 801b974:	f023 030a 	bic.w	r3, r3, #10
 801b978:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801b97a:	697a      	ldr	r2, [r7, #20]
 801b97c:	68bb      	ldr	r3, [r7, #8]
 801b97e:	4313      	orrs	r3, r2
 801b980:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801b982:	68fb      	ldr	r3, [r7, #12]
 801b984:	693a      	ldr	r2, [r7, #16]
 801b986:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801b988:	68fb      	ldr	r3, [r7, #12]
 801b98a:	697a      	ldr	r2, [r7, #20]
 801b98c:	621a      	str	r2, [r3, #32]
}
 801b98e:	bf00      	nop
 801b990:	371c      	adds	r7, #28
 801b992:	46bd      	mov	sp, r7
 801b994:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b998:	4770      	bx	lr

0801b99a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801b99a:	b480      	push	{r7}
 801b99c:	b087      	sub	sp, #28
 801b99e:	af00      	add	r7, sp, #0
 801b9a0:	60f8      	str	r0, [r7, #12]
 801b9a2:	60b9      	str	r1, [r7, #8]
 801b9a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801b9a6:	68fb      	ldr	r3, [r7, #12]
 801b9a8:	6a1b      	ldr	r3, [r3, #32]
 801b9aa:	f023 0210 	bic.w	r2, r3, #16
 801b9ae:	68fb      	ldr	r3, [r7, #12]
 801b9b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801b9b2:	68fb      	ldr	r3, [r7, #12]
 801b9b4:	699b      	ldr	r3, [r3, #24]
 801b9b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801b9b8:	68fb      	ldr	r3, [r7, #12]
 801b9ba:	6a1b      	ldr	r3, [r3, #32]
 801b9bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801b9be:	697b      	ldr	r3, [r7, #20]
 801b9c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801b9c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801b9c6:	687b      	ldr	r3, [r7, #4]
 801b9c8:	031b      	lsls	r3, r3, #12
 801b9ca:	697a      	ldr	r2, [r7, #20]
 801b9cc:	4313      	orrs	r3, r2
 801b9ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801b9d0:	693b      	ldr	r3, [r7, #16]
 801b9d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801b9d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801b9d8:	68bb      	ldr	r3, [r7, #8]
 801b9da:	011b      	lsls	r3, r3, #4
 801b9dc:	693a      	ldr	r2, [r7, #16]
 801b9de:	4313      	orrs	r3, r2
 801b9e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801b9e2:	68fb      	ldr	r3, [r7, #12]
 801b9e4:	697a      	ldr	r2, [r7, #20]
 801b9e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801b9e8:	68fb      	ldr	r3, [r7, #12]
 801b9ea:	693a      	ldr	r2, [r7, #16]
 801b9ec:	621a      	str	r2, [r3, #32]
}
 801b9ee:	bf00      	nop
 801b9f0:	371c      	adds	r7, #28
 801b9f2:	46bd      	mov	sp, r7
 801b9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9f8:	4770      	bx	lr

0801b9fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801b9fa:	b480      	push	{r7}
 801b9fc:	b085      	sub	sp, #20
 801b9fe:	af00      	add	r7, sp, #0
 801ba00:	6078      	str	r0, [r7, #4]
 801ba02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801ba04:	687b      	ldr	r3, [r7, #4]
 801ba06:	689b      	ldr	r3, [r3, #8]
 801ba08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801ba0a:	68fb      	ldr	r3, [r7, #12]
 801ba0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801ba10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801ba12:	683a      	ldr	r2, [r7, #0]
 801ba14:	68fb      	ldr	r3, [r7, #12]
 801ba16:	4313      	orrs	r3, r2
 801ba18:	f043 0307 	orr.w	r3, r3, #7
 801ba1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801ba1e:	687b      	ldr	r3, [r7, #4]
 801ba20:	68fa      	ldr	r2, [r7, #12]
 801ba22:	609a      	str	r2, [r3, #8]
}
 801ba24:	bf00      	nop
 801ba26:	3714      	adds	r7, #20
 801ba28:	46bd      	mov	sp, r7
 801ba2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba2e:	4770      	bx	lr

0801ba30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801ba30:	b480      	push	{r7}
 801ba32:	b087      	sub	sp, #28
 801ba34:	af00      	add	r7, sp, #0
 801ba36:	60f8      	str	r0, [r7, #12]
 801ba38:	60b9      	str	r1, [r7, #8]
 801ba3a:	607a      	str	r2, [r7, #4]
 801ba3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801ba3e:	68fb      	ldr	r3, [r7, #12]
 801ba40:	689b      	ldr	r3, [r3, #8]
 801ba42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801ba44:	697b      	ldr	r3, [r7, #20]
 801ba46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801ba4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801ba4c:	683b      	ldr	r3, [r7, #0]
 801ba4e:	021a      	lsls	r2, r3, #8
 801ba50:	687b      	ldr	r3, [r7, #4]
 801ba52:	431a      	orrs	r2, r3
 801ba54:	68bb      	ldr	r3, [r7, #8]
 801ba56:	4313      	orrs	r3, r2
 801ba58:	697a      	ldr	r2, [r7, #20]
 801ba5a:	4313      	orrs	r3, r2
 801ba5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801ba5e:	68fb      	ldr	r3, [r7, #12]
 801ba60:	697a      	ldr	r2, [r7, #20]
 801ba62:	609a      	str	r2, [r3, #8]
}
 801ba64:	bf00      	nop
 801ba66:	371c      	adds	r7, #28
 801ba68:	46bd      	mov	sp, r7
 801ba6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba6e:	4770      	bx	lr

0801ba70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801ba70:	b480      	push	{r7}
 801ba72:	b087      	sub	sp, #28
 801ba74:	af00      	add	r7, sp, #0
 801ba76:	60f8      	str	r0, [r7, #12]
 801ba78:	60b9      	str	r1, [r7, #8]
 801ba7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801ba7c:	68bb      	ldr	r3, [r7, #8]
 801ba7e:	f003 031f 	and.w	r3, r3, #31
 801ba82:	2201      	movs	r2, #1
 801ba84:	fa02 f303 	lsl.w	r3, r2, r3
 801ba88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801ba8a:	68fb      	ldr	r3, [r7, #12]
 801ba8c:	6a1a      	ldr	r2, [r3, #32]
 801ba8e:	697b      	ldr	r3, [r7, #20]
 801ba90:	43db      	mvns	r3, r3
 801ba92:	401a      	ands	r2, r3
 801ba94:	68fb      	ldr	r3, [r7, #12]
 801ba96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801ba98:	68fb      	ldr	r3, [r7, #12]
 801ba9a:	6a1a      	ldr	r2, [r3, #32]
 801ba9c:	68bb      	ldr	r3, [r7, #8]
 801ba9e:	f003 031f 	and.w	r3, r3, #31
 801baa2:	6879      	ldr	r1, [r7, #4]
 801baa4:	fa01 f303 	lsl.w	r3, r1, r3
 801baa8:	431a      	orrs	r2, r3
 801baaa:	68fb      	ldr	r3, [r7, #12]
 801baac:	621a      	str	r2, [r3, #32]
}
 801baae:	bf00      	nop
 801bab0:	371c      	adds	r7, #28
 801bab2:	46bd      	mov	sp, r7
 801bab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bab8:	4770      	bx	lr
	...

0801babc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801babc:	b480      	push	{r7}
 801babe:	b085      	sub	sp, #20
 801bac0:	af00      	add	r7, sp, #0
 801bac2:	6078      	str	r0, [r7, #4]
 801bac4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801bac6:	687b      	ldr	r3, [r7, #4]
 801bac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801bacc:	2b01      	cmp	r3, #1
 801bace:	d101      	bne.n	801bad4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801bad0:	2302      	movs	r3, #2
 801bad2:	e050      	b.n	801bb76 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 801bad4:	687b      	ldr	r3, [r7, #4]
 801bad6:	2201      	movs	r2, #1
 801bad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801badc:	687b      	ldr	r3, [r7, #4]
 801bade:	2202      	movs	r2, #2
 801bae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801bae4:	687b      	ldr	r3, [r7, #4]
 801bae6:	681b      	ldr	r3, [r3, #0]
 801bae8:	685b      	ldr	r3, [r3, #4]
 801baea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801baec:	687b      	ldr	r3, [r7, #4]
 801baee:	681b      	ldr	r3, [r3, #0]
 801baf0:	689b      	ldr	r3, [r3, #8]
 801baf2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801baf4:	68fb      	ldr	r3, [r7, #12]
 801baf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801bafa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801bafc:	683b      	ldr	r3, [r7, #0]
 801bafe:	681b      	ldr	r3, [r3, #0]
 801bb00:	68fa      	ldr	r2, [r7, #12]
 801bb02:	4313      	orrs	r3, r2
 801bb04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801bb06:	687b      	ldr	r3, [r7, #4]
 801bb08:	681b      	ldr	r3, [r3, #0]
 801bb0a:	68fa      	ldr	r2, [r7, #12]
 801bb0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801bb0e:	687b      	ldr	r3, [r7, #4]
 801bb10:	681b      	ldr	r3, [r3, #0]
 801bb12:	4a1c      	ldr	r2, [pc, #112]	; (801bb84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 801bb14:	4293      	cmp	r3, r2
 801bb16:	d018      	beq.n	801bb4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801bb18:	687b      	ldr	r3, [r7, #4]
 801bb1a:	681b      	ldr	r3, [r3, #0]
 801bb1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801bb20:	d013      	beq.n	801bb4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801bb22:	687b      	ldr	r3, [r7, #4]
 801bb24:	681b      	ldr	r3, [r3, #0]
 801bb26:	4a18      	ldr	r2, [pc, #96]	; (801bb88 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 801bb28:	4293      	cmp	r3, r2
 801bb2a:	d00e      	beq.n	801bb4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801bb2c:	687b      	ldr	r3, [r7, #4]
 801bb2e:	681b      	ldr	r3, [r3, #0]
 801bb30:	4a16      	ldr	r2, [pc, #88]	; (801bb8c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 801bb32:	4293      	cmp	r3, r2
 801bb34:	d009      	beq.n	801bb4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801bb36:	687b      	ldr	r3, [r7, #4]
 801bb38:	681b      	ldr	r3, [r3, #0]
 801bb3a:	4a15      	ldr	r2, [pc, #84]	; (801bb90 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 801bb3c:	4293      	cmp	r3, r2
 801bb3e:	d004      	beq.n	801bb4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801bb40:	687b      	ldr	r3, [r7, #4]
 801bb42:	681b      	ldr	r3, [r3, #0]
 801bb44:	4a13      	ldr	r2, [pc, #76]	; (801bb94 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 801bb46:	4293      	cmp	r3, r2
 801bb48:	d10c      	bne.n	801bb64 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801bb4a:	68bb      	ldr	r3, [r7, #8]
 801bb4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801bb50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801bb52:	683b      	ldr	r3, [r7, #0]
 801bb54:	685b      	ldr	r3, [r3, #4]
 801bb56:	68ba      	ldr	r2, [r7, #8]
 801bb58:	4313      	orrs	r3, r2
 801bb5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801bb5c:	687b      	ldr	r3, [r7, #4]
 801bb5e:	681b      	ldr	r3, [r3, #0]
 801bb60:	68ba      	ldr	r2, [r7, #8]
 801bb62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801bb64:	687b      	ldr	r3, [r7, #4]
 801bb66:	2201      	movs	r2, #1
 801bb68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801bb6c:	687b      	ldr	r3, [r7, #4]
 801bb6e:	2200      	movs	r2, #0
 801bb70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801bb74:	2300      	movs	r3, #0
}
 801bb76:	4618      	mov	r0, r3
 801bb78:	3714      	adds	r7, #20
 801bb7a:	46bd      	mov	sp, r7
 801bb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb80:	4770      	bx	lr
 801bb82:	bf00      	nop
 801bb84:	40010000 	.word	0x40010000
 801bb88:	40000400 	.word	0x40000400
 801bb8c:	40000800 	.word	0x40000800
 801bb90:	40000c00 	.word	0x40000c00
 801bb94:	40014000 	.word	0x40014000

0801bb98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801bb98:	b480      	push	{r7}
 801bb9a:	b083      	sub	sp, #12
 801bb9c:	af00      	add	r7, sp, #0
 801bb9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801bba0:	bf00      	nop
 801bba2:	370c      	adds	r7, #12
 801bba4:	46bd      	mov	sp, r7
 801bba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbaa:	4770      	bx	lr

0801bbac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801bbac:	b480      	push	{r7}
 801bbae:	b083      	sub	sp, #12
 801bbb0:	af00      	add	r7, sp, #0
 801bbb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801bbb4:	bf00      	nop
 801bbb6:	370c      	adds	r7, #12
 801bbb8:	46bd      	mov	sp, r7
 801bbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbbe:	4770      	bx	lr

0801bbc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801bbc0:	b580      	push	{r7, lr}
 801bbc2:	b082      	sub	sp, #8
 801bbc4:	af00      	add	r7, sp, #0
 801bbc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801bbc8:	687b      	ldr	r3, [r7, #4]
 801bbca:	2b00      	cmp	r3, #0
 801bbcc:	d101      	bne.n	801bbd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801bbce:	2301      	movs	r3, #1
 801bbd0:	e03f      	b.n	801bc52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801bbd2:	687b      	ldr	r3, [r7, #4]
 801bbd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801bbd8:	b2db      	uxtb	r3, r3
 801bbda:	2b00      	cmp	r3, #0
 801bbdc:	d106      	bne.n	801bbec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801bbde:	687b      	ldr	r3, [r7, #4]
 801bbe0:	2200      	movs	r2, #0
 801bbe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801bbe6:	6878      	ldr	r0, [r7, #4]
 801bbe8:	f7fa fafe 	bl	80161e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801bbec:	687b      	ldr	r3, [r7, #4]
 801bbee:	2224      	movs	r2, #36	; 0x24
 801bbf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801bbf4:	687b      	ldr	r3, [r7, #4]
 801bbf6:	681b      	ldr	r3, [r3, #0]
 801bbf8:	68da      	ldr	r2, [r3, #12]
 801bbfa:	687b      	ldr	r3, [r7, #4]
 801bbfc:	681b      	ldr	r3, [r3, #0]
 801bbfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801bc02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 801bc04:	6878      	ldr	r0, [r7, #4]
 801bc06:	f000 ff9b 	bl	801cb40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801bc0a:	687b      	ldr	r3, [r7, #4]
 801bc0c:	681b      	ldr	r3, [r3, #0]
 801bc0e:	691a      	ldr	r2, [r3, #16]
 801bc10:	687b      	ldr	r3, [r7, #4]
 801bc12:	681b      	ldr	r3, [r3, #0]
 801bc14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801bc18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801bc1a:	687b      	ldr	r3, [r7, #4]
 801bc1c:	681b      	ldr	r3, [r3, #0]
 801bc1e:	695a      	ldr	r2, [r3, #20]
 801bc20:	687b      	ldr	r3, [r7, #4]
 801bc22:	681b      	ldr	r3, [r3, #0]
 801bc24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801bc28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801bc2a:	687b      	ldr	r3, [r7, #4]
 801bc2c:	681b      	ldr	r3, [r3, #0]
 801bc2e:	68da      	ldr	r2, [r3, #12]
 801bc30:	687b      	ldr	r3, [r7, #4]
 801bc32:	681b      	ldr	r3, [r3, #0]
 801bc34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801bc38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801bc3a:	687b      	ldr	r3, [r7, #4]
 801bc3c:	2200      	movs	r2, #0
 801bc3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 801bc40:	687b      	ldr	r3, [r7, #4]
 801bc42:	2220      	movs	r2, #32
 801bc44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 801bc48:	687b      	ldr	r3, [r7, #4]
 801bc4a:	2220      	movs	r2, #32
 801bc4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801bc50:	2300      	movs	r3, #0
}
 801bc52:	4618      	mov	r0, r3
 801bc54:	3708      	adds	r7, #8
 801bc56:	46bd      	mov	sp, r7
 801bc58:	bd80      	pop	{r7, pc}

0801bc5a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801bc5a:	b580      	push	{r7, lr}
 801bc5c:	b08a      	sub	sp, #40	; 0x28
 801bc5e:	af02      	add	r7, sp, #8
 801bc60:	60f8      	str	r0, [r7, #12]
 801bc62:	60b9      	str	r1, [r7, #8]
 801bc64:	603b      	str	r3, [r7, #0]
 801bc66:	4613      	mov	r3, r2
 801bc68:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 801bc6a:	2300      	movs	r3, #0
 801bc6c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801bc6e:	68fb      	ldr	r3, [r7, #12]
 801bc70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801bc74:	b2db      	uxtb	r3, r3
 801bc76:	2b20      	cmp	r3, #32
 801bc78:	d17c      	bne.n	801bd74 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 801bc7a:	68bb      	ldr	r3, [r7, #8]
 801bc7c:	2b00      	cmp	r3, #0
 801bc7e:	d002      	beq.n	801bc86 <HAL_UART_Transmit+0x2c>
 801bc80:	88fb      	ldrh	r3, [r7, #6]
 801bc82:	2b00      	cmp	r3, #0
 801bc84:	d101      	bne.n	801bc8a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 801bc86:	2301      	movs	r3, #1
 801bc88:	e075      	b.n	801bd76 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801bc8a:	68fb      	ldr	r3, [r7, #12]
 801bc8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801bc90:	2b01      	cmp	r3, #1
 801bc92:	d101      	bne.n	801bc98 <HAL_UART_Transmit+0x3e>
 801bc94:	2302      	movs	r3, #2
 801bc96:	e06e      	b.n	801bd76 <HAL_UART_Transmit+0x11c>
 801bc98:	68fb      	ldr	r3, [r7, #12]
 801bc9a:	2201      	movs	r2, #1
 801bc9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801bca0:	68fb      	ldr	r3, [r7, #12]
 801bca2:	2200      	movs	r2, #0
 801bca4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801bca6:	68fb      	ldr	r3, [r7, #12]
 801bca8:	2221      	movs	r2, #33	; 0x21
 801bcaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801bcae:	f7fa fd53 	bl	8016758 <HAL_GetTick>
 801bcb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 801bcb4:	68fb      	ldr	r3, [r7, #12]
 801bcb6:	88fa      	ldrh	r2, [r7, #6]
 801bcb8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801bcba:	68fb      	ldr	r3, [r7, #12]
 801bcbc:	88fa      	ldrh	r2, [r7, #6]
 801bcbe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801bcc0:	68fb      	ldr	r3, [r7, #12]
 801bcc2:	689b      	ldr	r3, [r3, #8]
 801bcc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801bcc8:	d108      	bne.n	801bcdc <HAL_UART_Transmit+0x82>
 801bcca:	68fb      	ldr	r3, [r7, #12]
 801bccc:	691b      	ldr	r3, [r3, #16]
 801bcce:	2b00      	cmp	r3, #0
 801bcd0:	d104      	bne.n	801bcdc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 801bcd2:	2300      	movs	r3, #0
 801bcd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801bcd6:	68bb      	ldr	r3, [r7, #8]
 801bcd8:	61bb      	str	r3, [r7, #24]
 801bcda:	e003      	b.n	801bce4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 801bcdc:	68bb      	ldr	r3, [r7, #8]
 801bcde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801bce0:	2300      	movs	r3, #0
 801bce2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801bce4:	68fb      	ldr	r3, [r7, #12]
 801bce6:	2200      	movs	r2, #0
 801bce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 801bcec:	e02a      	b.n	801bd44 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801bcee:	683b      	ldr	r3, [r7, #0]
 801bcf0:	9300      	str	r3, [sp, #0]
 801bcf2:	697b      	ldr	r3, [r7, #20]
 801bcf4:	2200      	movs	r2, #0
 801bcf6:	2180      	movs	r1, #128	; 0x80
 801bcf8:	68f8      	ldr	r0, [r7, #12]
 801bcfa:	f000 fc53 	bl	801c5a4 <UART_WaitOnFlagUntilTimeout>
 801bcfe:	4603      	mov	r3, r0
 801bd00:	2b00      	cmp	r3, #0
 801bd02:	d001      	beq.n	801bd08 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 801bd04:	2303      	movs	r3, #3
 801bd06:	e036      	b.n	801bd76 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 801bd08:	69fb      	ldr	r3, [r7, #28]
 801bd0a:	2b00      	cmp	r3, #0
 801bd0c:	d10b      	bne.n	801bd26 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 801bd0e:	69bb      	ldr	r3, [r7, #24]
 801bd10:	881b      	ldrh	r3, [r3, #0]
 801bd12:	461a      	mov	r2, r3
 801bd14:	68fb      	ldr	r3, [r7, #12]
 801bd16:	681b      	ldr	r3, [r3, #0]
 801bd18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801bd1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 801bd1e:	69bb      	ldr	r3, [r7, #24]
 801bd20:	3302      	adds	r3, #2
 801bd22:	61bb      	str	r3, [r7, #24]
 801bd24:	e007      	b.n	801bd36 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 801bd26:	69fb      	ldr	r3, [r7, #28]
 801bd28:	781a      	ldrb	r2, [r3, #0]
 801bd2a:	68fb      	ldr	r3, [r7, #12]
 801bd2c:	681b      	ldr	r3, [r3, #0]
 801bd2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 801bd30:	69fb      	ldr	r3, [r7, #28]
 801bd32:	3301      	adds	r3, #1
 801bd34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801bd36:	68fb      	ldr	r3, [r7, #12]
 801bd38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801bd3a:	b29b      	uxth	r3, r3
 801bd3c:	3b01      	subs	r3, #1
 801bd3e:	b29a      	uxth	r2, r3
 801bd40:	68fb      	ldr	r3, [r7, #12]
 801bd42:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 801bd44:	68fb      	ldr	r3, [r7, #12]
 801bd46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801bd48:	b29b      	uxth	r3, r3
 801bd4a:	2b00      	cmp	r3, #0
 801bd4c:	d1cf      	bne.n	801bcee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801bd4e:	683b      	ldr	r3, [r7, #0]
 801bd50:	9300      	str	r3, [sp, #0]
 801bd52:	697b      	ldr	r3, [r7, #20]
 801bd54:	2200      	movs	r2, #0
 801bd56:	2140      	movs	r1, #64	; 0x40
 801bd58:	68f8      	ldr	r0, [r7, #12]
 801bd5a:	f000 fc23 	bl	801c5a4 <UART_WaitOnFlagUntilTimeout>
 801bd5e:	4603      	mov	r3, r0
 801bd60:	2b00      	cmp	r3, #0
 801bd62:	d001      	beq.n	801bd68 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 801bd64:	2303      	movs	r3, #3
 801bd66:	e006      	b.n	801bd76 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801bd68:	68fb      	ldr	r3, [r7, #12]
 801bd6a:	2220      	movs	r2, #32
 801bd6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 801bd70:	2300      	movs	r3, #0
 801bd72:	e000      	b.n	801bd76 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 801bd74:	2302      	movs	r3, #2
  }
}
 801bd76:	4618      	mov	r0, r3
 801bd78:	3720      	adds	r7, #32
 801bd7a:	46bd      	mov	sp, r7
 801bd7c:	bd80      	pop	{r7, pc}

0801bd7e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801bd7e:	b580      	push	{r7, lr}
 801bd80:	b08c      	sub	sp, #48	; 0x30
 801bd82:	af00      	add	r7, sp, #0
 801bd84:	60f8      	str	r0, [r7, #12]
 801bd86:	60b9      	str	r1, [r7, #8]
 801bd88:	4613      	mov	r3, r2
 801bd8a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801bd8c:	68fb      	ldr	r3, [r7, #12]
 801bd8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801bd92:	b2db      	uxtb	r3, r3
 801bd94:	2b20      	cmp	r3, #32
 801bd96:	d152      	bne.n	801be3e <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 801bd98:	68bb      	ldr	r3, [r7, #8]
 801bd9a:	2b00      	cmp	r3, #0
 801bd9c:	d002      	beq.n	801bda4 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 801bd9e:	88fb      	ldrh	r3, [r7, #6]
 801bda0:	2b00      	cmp	r3, #0
 801bda2:	d101      	bne.n	801bda8 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 801bda4:	2301      	movs	r3, #1
 801bda6:	e04b      	b.n	801be40 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 801bda8:	68fb      	ldr	r3, [r7, #12]
 801bdaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801bdae:	2b01      	cmp	r3, #1
 801bdb0:	d101      	bne.n	801bdb6 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 801bdb2:	2302      	movs	r3, #2
 801bdb4:	e044      	b.n	801be40 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 801bdb6:	68fb      	ldr	r3, [r7, #12]
 801bdb8:	2201      	movs	r2, #1
 801bdba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 801bdbe:	68fb      	ldr	r3, [r7, #12]
 801bdc0:	2201      	movs	r2, #1
 801bdc2:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 801bdc4:	88fb      	ldrh	r3, [r7, #6]
 801bdc6:	461a      	mov	r2, r3
 801bdc8:	68b9      	ldr	r1, [r7, #8]
 801bdca:	68f8      	ldr	r0, [r7, #12]
 801bdcc:	f000 fc58 	bl	801c680 <UART_Start_Receive_DMA>
 801bdd0:	4603      	mov	r3, r0
 801bdd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 801bdd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801bdda:	2b00      	cmp	r3, #0
 801bddc:	d12c      	bne.n	801be38 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801bdde:	68fb      	ldr	r3, [r7, #12]
 801bde0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bde2:	2b01      	cmp	r3, #1
 801bde4:	d125      	bne.n	801be32 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 801bde6:	2300      	movs	r3, #0
 801bde8:	613b      	str	r3, [r7, #16]
 801bdea:	68fb      	ldr	r3, [r7, #12]
 801bdec:	681b      	ldr	r3, [r3, #0]
 801bdee:	681b      	ldr	r3, [r3, #0]
 801bdf0:	613b      	str	r3, [r7, #16]
 801bdf2:	68fb      	ldr	r3, [r7, #12]
 801bdf4:	681b      	ldr	r3, [r3, #0]
 801bdf6:	685b      	ldr	r3, [r3, #4]
 801bdf8:	613b      	str	r3, [r7, #16]
 801bdfa:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801bdfc:	68fb      	ldr	r3, [r7, #12]
 801bdfe:	681b      	ldr	r3, [r3, #0]
 801be00:	330c      	adds	r3, #12
 801be02:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801be04:	69bb      	ldr	r3, [r7, #24]
 801be06:	e853 3f00 	ldrex	r3, [r3]
 801be0a:	617b      	str	r3, [r7, #20]
   return(result);
 801be0c:	697b      	ldr	r3, [r7, #20]
 801be0e:	f043 0310 	orr.w	r3, r3, #16
 801be12:	62bb      	str	r3, [r7, #40]	; 0x28
 801be14:	68fb      	ldr	r3, [r7, #12]
 801be16:	681b      	ldr	r3, [r3, #0]
 801be18:	330c      	adds	r3, #12
 801be1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801be1c:	627a      	str	r2, [r7, #36]	; 0x24
 801be1e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801be20:	6a39      	ldr	r1, [r7, #32]
 801be22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801be24:	e841 2300 	strex	r3, r2, [r1]
 801be28:	61fb      	str	r3, [r7, #28]
   return(result);
 801be2a:	69fb      	ldr	r3, [r7, #28]
 801be2c:	2b00      	cmp	r3, #0
 801be2e:	d1e5      	bne.n	801bdfc <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 801be30:	e002      	b.n	801be38 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 801be32:	2301      	movs	r3, #1
 801be34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 801be38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801be3c:	e000      	b.n	801be40 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 801be3e:	2302      	movs	r3, #2
  }
}
 801be40:	4618      	mov	r0, r3
 801be42:	3730      	adds	r7, #48	; 0x30
 801be44:	46bd      	mov	sp, r7
 801be46:	bd80      	pop	{r7, pc}

0801be48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801be48:	b580      	push	{r7, lr}
 801be4a:	b0ba      	sub	sp, #232	; 0xe8
 801be4c:	af00      	add	r7, sp, #0
 801be4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 801be50:	687b      	ldr	r3, [r7, #4]
 801be52:	681b      	ldr	r3, [r3, #0]
 801be54:	681b      	ldr	r3, [r3, #0]
 801be56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801be5a:	687b      	ldr	r3, [r7, #4]
 801be5c:	681b      	ldr	r3, [r3, #0]
 801be5e:	68db      	ldr	r3, [r3, #12]
 801be60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801be64:	687b      	ldr	r3, [r7, #4]
 801be66:	681b      	ldr	r3, [r3, #0]
 801be68:	695b      	ldr	r3, [r3, #20]
 801be6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 801be6e:	2300      	movs	r3, #0
 801be70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 801be74:	2300      	movs	r3, #0
 801be76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801be7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801be7e:	f003 030f 	and.w	r3, r3, #15
 801be82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 801be86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801be8a:	2b00      	cmp	r3, #0
 801be8c:	d10f      	bne.n	801beae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801be8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801be92:	f003 0320 	and.w	r3, r3, #32
 801be96:	2b00      	cmp	r3, #0
 801be98:	d009      	beq.n	801beae <HAL_UART_IRQHandler+0x66>
 801be9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801be9e:	f003 0320 	and.w	r3, r3, #32
 801bea2:	2b00      	cmp	r3, #0
 801bea4:	d003      	beq.n	801beae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 801bea6:	6878      	ldr	r0, [r7, #4]
 801bea8:	f000 fd8f 	bl	801c9ca <UART_Receive_IT>
      return;
 801beac:	e256      	b.n	801c35c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 801beae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801beb2:	2b00      	cmp	r3, #0
 801beb4:	f000 80de 	beq.w	801c074 <HAL_UART_IRQHandler+0x22c>
 801beb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801bebc:	f003 0301 	and.w	r3, r3, #1
 801bec0:	2b00      	cmp	r3, #0
 801bec2:	d106      	bne.n	801bed2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 801bec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bec8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 801becc:	2b00      	cmp	r3, #0
 801bece:	f000 80d1 	beq.w	801c074 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 801bed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bed6:	f003 0301 	and.w	r3, r3, #1
 801beda:	2b00      	cmp	r3, #0
 801bedc:	d00b      	beq.n	801bef6 <HAL_UART_IRQHandler+0xae>
 801bede:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bee6:	2b00      	cmp	r3, #0
 801bee8:	d005      	beq.n	801bef6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801beea:	687b      	ldr	r3, [r7, #4]
 801beec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801beee:	f043 0201 	orr.w	r2, r3, #1
 801bef2:	687b      	ldr	r3, [r7, #4]
 801bef4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801bef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801befa:	f003 0304 	and.w	r3, r3, #4
 801befe:	2b00      	cmp	r3, #0
 801bf00:	d00b      	beq.n	801bf1a <HAL_UART_IRQHandler+0xd2>
 801bf02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801bf06:	f003 0301 	and.w	r3, r3, #1
 801bf0a:	2b00      	cmp	r3, #0
 801bf0c:	d005      	beq.n	801bf1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801bf0e:	687b      	ldr	r3, [r7, #4]
 801bf10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bf12:	f043 0202 	orr.w	r2, r3, #2
 801bf16:	687b      	ldr	r3, [r7, #4]
 801bf18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801bf1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bf1e:	f003 0302 	and.w	r3, r3, #2
 801bf22:	2b00      	cmp	r3, #0
 801bf24:	d00b      	beq.n	801bf3e <HAL_UART_IRQHandler+0xf6>
 801bf26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801bf2a:	f003 0301 	and.w	r3, r3, #1
 801bf2e:	2b00      	cmp	r3, #0
 801bf30:	d005      	beq.n	801bf3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801bf32:	687b      	ldr	r3, [r7, #4]
 801bf34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bf36:	f043 0204 	orr.w	r2, r3, #4
 801bf3a:	687b      	ldr	r3, [r7, #4]
 801bf3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 801bf3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bf42:	f003 0308 	and.w	r3, r3, #8
 801bf46:	2b00      	cmp	r3, #0
 801bf48:	d011      	beq.n	801bf6e <HAL_UART_IRQHandler+0x126>
 801bf4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bf4e:	f003 0320 	and.w	r3, r3, #32
 801bf52:	2b00      	cmp	r3, #0
 801bf54:	d105      	bne.n	801bf62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 801bf56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801bf5a:	f003 0301 	and.w	r3, r3, #1
 801bf5e:	2b00      	cmp	r3, #0
 801bf60:	d005      	beq.n	801bf6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801bf62:	687b      	ldr	r3, [r7, #4]
 801bf64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bf66:	f043 0208 	orr.w	r2, r3, #8
 801bf6a:	687b      	ldr	r3, [r7, #4]
 801bf6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801bf6e:	687b      	ldr	r3, [r7, #4]
 801bf70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bf72:	2b00      	cmp	r3, #0
 801bf74:	f000 81ed 	beq.w	801c352 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801bf78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bf7c:	f003 0320 	and.w	r3, r3, #32
 801bf80:	2b00      	cmp	r3, #0
 801bf82:	d008      	beq.n	801bf96 <HAL_UART_IRQHandler+0x14e>
 801bf84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bf88:	f003 0320 	and.w	r3, r3, #32
 801bf8c:	2b00      	cmp	r3, #0
 801bf8e:	d002      	beq.n	801bf96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 801bf90:	6878      	ldr	r0, [r7, #4]
 801bf92:	f000 fd1a 	bl	801c9ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801bf96:	687b      	ldr	r3, [r7, #4]
 801bf98:	681b      	ldr	r3, [r3, #0]
 801bf9a:	695b      	ldr	r3, [r3, #20]
 801bf9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bfa0:	2b40      	cmp	r3, #64	; 0x40
 801bfa2:	bf0c      	ite	eq
 801bfa4:	2301      	moveq	r3, #1
 801bfa6:	2300      	movne	r3, #0
 801bfa8:	b2db      	uxtb	r3, r3
 801bfaa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801bfae:	687b      	ldr	r3, [r7, #4]
 801bfb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bfb2:	f003 0308 	and.w	r3, r3, #8
 801bfb6:	2b00      	cmp	r3, #0
 801bfb8:	d103      	bne.n	801bfc2 <HAL_UART_IRQHandler+0x17a>
 801bfba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801bfbe:	2b00      	cmp	r3, #0
 801bfc0:	d04f      	beq.n	801c062 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801bfc2:	6878      	ldr	r0, [r7, #4]
 801bfc4:	f000 fc22 	bl	801c80c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801bfc8:	687b      	ldr	r3, [r7, #4]
 801bfca:	681b      	ldr	r3, [r3, #0]
 801bfcc:	695b      	ldr	r3, [r3, #20]
 801bfce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bfd2:	2b40      	cmp	r3, #64	; 0x40
 801bfd4:	d141      	bne.n	801c05a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801bfd6:	687b      	ldr	r3, [r7, #4]
 801bfd8:	681b      	ldr	r3, [r3, #0]
 801bfda:	3314      	adds	r3, #20
 801bfdc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bfe0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801bfe4:	e853 3f00 	ldrex	r3, [r3]
 801bfe8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801bfec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801bff0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801bff4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801bff8:	687b      	ldr	r3, [r7, #4]
 801bffa:	681b      	ldr	r3, [r3, #0]
 801bffc:	3314      	adds	r3, #20
 801bffe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801c002:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801c006:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c00a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801c00e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801c012:	e841 2300 	strex	r3, r2, [r1]
 801c016:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801c01a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c01e:	2b00      	cmp	r3, #0
 801c020:	d1d9      	bne.n	801bfd6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 801c022:	687b      	ldr	r3, [r7, #4]
 801c024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c026:	2b00      	cmp	r3, #0
 801c028:	d013      	beq.n	801c052 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801c02a:	687b      	ldr	r3, [r7, #4]
 801c02c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c02e:	4a7d      	ldr	r2, [pc, #500]	; (801c224 <HAL_UART_IRQHandler+0x3dc>)
 801c030:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801c032:	687b      	ldr	r3, [r7, #4]
 801c034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c036:	4618      	mov	r0, r3
 801c038:	f7fa fe46 	bl	8016cc8 <HAL_DMA_Abort_IT>
 801c03c:	4603      	mov	r3, r0
 801c03e:	2b00      	cmp	r3, #0
 801c040:	d016      	beq.n	801c070 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801c042:	687b      	ldr	r3, [r7, #4]
 801c044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c048:	687a      	ldr	r2, [r7, #4]
 801c04a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801c04c:	4610      	mov	r0, r2
 801c04e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c050:	e00e      	b.n	801c070 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801c052:	6878      	ldr	r0, [r7, #4]
 801c054:	f000 f9a4 	bl	801c3a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c058:	e00a      	b.n	801c070 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801c05a:	6878      	ldr	r0, [r7, #4]
 801c05c:	f000 f9a0 	bl	801c3a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c060:	e006      	b.n	801c070 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801c062:	6878      	ldr	r0, [r7, #4]
 801c064:	f000 f99c 	bl	801c3a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c068:	687b      	ldr	r3, [r7, #4]
 801c06a:	2200      	movs	r2, #0
 801c06c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 801c06e:	e170      	b.n	801c352 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c070:	bf00      	nop
    return;
 801c072:	e16e      	b.n	801c352 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c074:	687b      	ldr	r3, [r7, #4]
 801c076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c078:	2b01      	cmp	r3, #1
 801c07a:	f040 814a 	bne.w	801c312 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 801c07e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c082:	f003 0310 	and.w	r3, r3, #16
 801c086:	2b00      	cmp	r3, #0
 801c088:	f000 8143 	beq.w	801c312 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 801c08c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c090:	f003 0310 	and.w	r3, r3, #16
 801c094:	2b00      	cmp	r3, #0
 801c096:	f000 813c 	beq.w	801c312 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 801c09a:	2300      	movs	r3, #0
 801c09c:	60bb      	str	r3, [r7, #8]
 801c09e:	687b      	ldr	r3, [r7, #4]
 801c0a0:	681b      	ldr	r3, [r3, #0]
 801c0a2:	681b      	ldr	r3, [r3, #0]
 801c0a4:	60bb      	str	r3, [r7, #8]
 801c0a6:	687b      	ldr	r3, [r7, #4]
 801c0a8:	681b      	ldr	r3, [r3, #0]
 801c0aa:	685b      	ldr	r3, [r3, #4]
 801c0ac:	60bb      	str	r3, [r7, #8]
 801c0ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c0b0:	687b      	ldr	r3, [r7, #4]
 801c0b2:	681b      	ldr	r3, [r3, #0]
 801c0b4:	695b      	ldr	r3, [r3, #20]
 801c0b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c0ba:	2b40      	cmp	r3, #64	; 0x40
 801c0bc:	f040 80b4 	bne.w	801c228 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801c0c0:	687b      	ldr	r3, [r7, #4]
 801c0c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c0c4:	681b      	ldr	r3, [r3, #0]
 801c0c6:	685b      	ldr	r3, [r3, #4]
 801c0c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801c0cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801c0d0:	2b00      	cmp	r3, #0
 801c0d2:	f000 8140 	beq.w	801c356 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801c0d6:	687b      	ldr	r3, [r7, #4]
 801c0d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801c0da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801c0de:	429a      	cmp	r2, r3
 801c0e0:	f080 8139 	bcs.w	801c356 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801c0e4:	687b      	ldr	r3, [r7, #4]
 801c0e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801c0ea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801c0ec:	687b      	ldr	r3, [r7, #4]
 801c0ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c0f0:	69db      	ldr	r3, [r3, #28]
 801c0f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c0f6:	f000 8088 	beq.w	801c20a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801c0fa:	687b      	ldr	r3, [r7, #4]
 801c0fc:	681b      	ldr	r3, [r3, #0]
 801c0fe:	330c      	adds	r3, #12
 801c100:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c104:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801c108:	e853 3f00 	ldrex	r3, [r3]
 801c10c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801c110:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801c114:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801c118:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801c11c:	687b      	ldr	r3, [r7, #4]
 801c11e:	681b      	ldr	r3, [r3, #0]
 801c120:	330c      	adds	r3, #12
 801c122:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801c126:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801c12a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c12e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801c132:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801c136:	e841 2300 	strex	r3, r2, [r1]
 801c13a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801c13e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801c142:	2b00      	cmp	r3, #0
 801c144:	d1d9      	bne.n	801c0fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c146:	687b      	ldr	r3, [r7, #4]
 801c148:	681b      	ldr	r3, [r3, #0]
 801c14a:	3314      	adds	r3, #20
 801c14c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c14e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c150:	e853 3f00 	ldrex	r3, [r3]
 801c154:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801c156:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c158:	f023 0301 	bic.w	r3, r3, #1
 801c15c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801c160:	687b      	ldr	r3, [r7, #4]
 801c162:	681b      	ldr	r3, [r3, #0]
 801c164:	3314      	adds	r3, #20
 801c166:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801c16a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801c16e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c170:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801c172:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801c176:	e841 2300 	strex	r3, r2, [r1]
 801c17a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801c17c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801c17e:	2b00      	cmp	r3, #0
 801c180:	d1e1      	bne.n	801c146 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801c182:	687b      	ldr	r3, [r7, #4]
 801c184:	681b      	ldr	r3, [r3, #0]
 801c186:	3314      	adds	r3, #20
 801c188:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c18a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c18c:	e853 3f00 	ldrex	r3, [r3]
 801c190:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801c192:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c194:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801c198:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801c19c:	687b      	ldr	r3, [r7, #4]
 801c19e:	681b      	ldr	r3, [r3, #0]
 801c1a0:	3314      	adds	r3, #20
 801c1a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801c1a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 801c1a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c1aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801c1ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801c1ae:	e841 2300 	strex	r3, r2, [r1]
 801c1b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801c1b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c1b6:	2b00      	cmp	r3, #0
 801c1b8:	d1e3      	bne.n	801c182 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801c1ba:	687b      	ldr	r3, [r7, #4]
 801c1bc:	2220      	movs	r2, #32
 801c1be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c1c2:	687b      	ldr	r3, [r7, #4]
 801c1c4:	2200      	movs	r2, #0
 801c1c6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c1c8:	687b      	ldr	r3, [r7, #4]
 801c1ca:	681b      	ldr	r3, [r3, #0]
 801c1cc:	330c      	adds	r3, #12
 801c1ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c1d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c1d2:	e853 3f00 	ldrex	r3, [r3]
 801c1d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801c1d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c1da:	f023 0310 	bic.w	r3, r3, #16
 801c1de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801c1e2:	687b      	ldr	r3, [r7, #4]
 801c1e4:	681b      	ldr	r3, [r3, #0]
 801c1e6:	330c      	adds	r3, #12
 801c1e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801c1ec:	65ba      	str	r2, [r7, #88]	; 0x58
 801c1ee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c1f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801c1f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801c1f4:	e841 2300 	strex	r3, r2, [r1]
 801c1f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801c1fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c1fc:	2b00      	cmp	r3, #0
 801c1fe:	d1e3      	bne.n	801c1c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801c200:	687b      	ldr	r3, [r7, #4]
 801c202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c204:	4618      	mov	r0, r3
 801c206:	f7fa fcef 	bl	8016be8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801c20a:	687b      	ldr	r3, [r7, #4]
 801c20c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801c20e:	687b      	ldr	r3, [r7, #4]
 801c210:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801c212:	b29b      	uxth	r3, r3
 801c214:	1ad3      	subs	r3, r2, r3
 801c216:	b29b      	uxth	r3, r3
 801c218:	4619      	mov	r1, r3
 801c21a:	6878      	ldr	r0, [r7, #4]
 801c21c:	f7e4 fea6 	bl	8000f6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801c220:	e099      	b.n	801c356 <HAL_UART_IRQHandler+0x50e>
 801c222:	bf00      	nop
 801c224:	0801c8d3 	.word	0x0801c8d3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801c228:	687b      	ldr	r3, [r7, #4]
 801c22a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801c22c:	687b      	ldr	r3, [r7, #4]
 801c22e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801c230:	b29b      	uxth	r3, r3
 801c232:	1ad3      	subs	r3, r2, r3
 801c234:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801c238:	687b      	ldr	r3, [r7, #4]
 801c23a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801c23c:	b29b      	uxth	r3, r3
 801c23e:	2b00      	cmp	r3, #0
 801c240:	f000 808b 	beq.w	801c35a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 801c244:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801c248:	2b00      	cmp	r3, #0
 801c24a:	f000 8086 	beq.w	801c35a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c24e:	687b      	ldr	r3, [r7, #4]
 801c250:	681b      	ldr	r3, [r3, #0]
 801c252:	330c      	adds	r3, #12
 801c254:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c258:	e853 3f00 	ldrex	r3, [r3]
 801c25c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801c25e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c260:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801c264:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801c268:	687b      	ldr	r3, [r7, #4]
 801c26a:	681b      	ldr	r3, [r3, #0]
 801c26c:	330c      	adds	r3, #12
 801c26e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801c272:	647a      	str	r2, [r7, #68]	; 0x44
 801c274:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c276:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801c278:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c27a:	e841 2300 	strex	r3, r2, [r1]
 801c27e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801c280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c282:	2b00      	cmp	r3, #0
 801c284:	d1e3      	bne.n	801c24e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c286:	687b      	ldr	r3, [r7, #4]
 801c288:	681b      	ldr	r3, [r3, #0]
 801c28a:	3314      	adds	r3, #20
 801c28c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c290:	e853 3f00 	ldrex	r3, [r3]
 801c294:	623b      	str	r3, [r7, #32]
   return(result);
 801c296:	6a3b      	ldr	r3, [r7, #32]
 801c298:	f023 0301 	bic.w	r3, r3, #1
 801c29c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801c2a0:	687b      	ldr	r3, [r7, #4]
 801c2a2:	681b      	ldr	r3, [r3, #0]
 801c2a4:	3314      	adds	r3, #20
 801c2a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801c2aa:	633a      	str	r2, [r7, #48]	; 0x30
 801c2ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c2ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c2b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c2b2:	e841 2300 	strex	r3, r2, [r1]
 801c2b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801c2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c2ba:	2b00      	cmp	r3, #0
 801c2bc:	d1e3      	bne.n	801c286 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801c2be:	687b      	ldr	r3, [r7, #4]
 801c2c0:	2220      	movs	r2, #32
 801c2c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c2c6:	687b      	ldr	r3, [r7, #4]
 801c2c8:	2200      	movs	r2, #0
 801c2ca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c2cc:	687b      	ldr	r3, [r7, #4]
 801c2ce:	681b      	ldr	r3, [r3, #0]
 801c2d0:	330c      	adds	r3, #12
 801c2d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c2d4:	693b      	ldr	r3, [r7, #16]
 801c2d6:	e853 3f00 	ldrex	r3, [r3]
 801c2da:	60fb      	str	r3, [r7, #12]
   return(result);
 801c2dc:	68fb      	ldr	r3, [r7, #12]
 801c2de:	f023 0310 	bic.w	r3, r3, #16
 801c2e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801c2e6:	687b      	ldr	r3, [r7, #4]
 801c2e8:	681b      	ldr	r3, [r3, #0]
 801c2ea:	330c      	adds	r3, #12
 801c2ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801c2f0:	61fa      	str	r2, [r7, #28]
 801c2f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c2f4:	69b9      	ldr	r1, [r7, #24]
 801c2f6:	69fa      	ldr	r2, [r7, #28]
 801c2f8:	e841 2300 	strex	r3, r2, [r1]
 801c2fc:	617b      	str	r3, [r7, #20]
   return(result);
 801c2fe:	697b      	ldr	r3, [r7, #20]
 801c300:	2b00      	cmp	r3, #0
 801c302:	d1e3      	bne.n	801c2cc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801c304:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801c308:	4619      	mov	r1, r3
 801c30a:	6878      	ldr	r0, [r7, #4]
 801c30c:	f7e4 fe2e 	bl	8000f6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801c310:	e023      	b.n	801c35a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 801c312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c31a:	2b00      	cmp	r3, #0
 801c31c:	d009      	beq.n	801c332 <HAL_UART_IRQHandler+0x4ea>
 801c31e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c326:	2b00      	cmp	r3, #0
 801c328:	d003      	beq.n	801c332 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 801c32a:	6878      	ldr	r0, [r7, #4]
 801c32c:	f000 fae5 	bl	801c8fa <UART_Transmit_IT>
    return;
 801c330:	e014      	b.n	801c35c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801c332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c33a:	2b00      	cmp	r3, #0
 801c33c:	d00e      	beq.n	801c35c <HAL_UART_IRQHandler+0x514>
 801c33e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c346:	2b00      	cmp	r3, #0
 801c348:	d008      	beq.n	801c35c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 801c34a:	6878      	ldr	r0, [r7, #4]
 801c34c:	f000 fb25 	bl	801c99a <UART_EndTransmit_IT>
    return;
 801c350:	e004      	b.n	801c35c <HAL_UART_IRQHandler+0x514>
    return;
 801c352:	bf00      	nop
 801c354:	e002      	b.n	801c35c <HAL_UART_IRQHandler+0x514>
      return;
 801c356:	bf00      	nop
 801c358:	e000      	b.n	801c35c <HAL_UART_IRQHandler+0x514>
      return;
 801c35a:	bf00      	nop
  }
}
 801c35c:	37e8      	adds	r7, #232	; 0xe8
 801c35e:	46bd      	mov	sp, r7
 801c360:	bd80      	pop	{r7, pc}
 801c362:	bf00      	nop

0801c364 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801c364:	b480      	push	{r7}
 801c366:	b083      	sub	sp, #12
 801c368:	af00      	add	r7, sp, #0
 801c36a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 801c36c:	bf00      	nop
 801c36e:	370c      	adds	r7, #12
 801c370:	46bd      	mov	sp, r7
 801c372:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c376:	4770      	bx	lr

0801c378 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801c378:	b480      	push	{r7}
 801c37a:	b083      	sub	sp, #12
 801c37c:	af00      	add	r7, sp, #0
 801c37e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 801c380:	bf00      	nop
 801c382:	370c      	adds	r7, #12
 801c384:	46bd      	mov	sp, r7
 801c386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c38a:	4770      	bx	lr

0801c38c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801c38c:	b480      	push	{r7}
 801c38e:	b083      	sub	sp, #12
 801c390:	af00      	add	r7, sp, #0
 801c392:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 801c394:	bf00      	nop
 801c396:	370c      	adds	r7, #12
 801c398:	46bd      	mov	sp, r7
 801c39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c39e:	4770      	bx	lr

0801c3a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801c3a0:	b480      	push	{r7}
 801c3a2:	b083      	sub	sp, #12
 801c3a4:	af00      	add	r7, sp, #0
 801c3a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 801c3a8:	bf00      	nop
 801c3aa:	370c      	adds	r7, #12
 801c3ac:	46bd      	mov	sp, r7
 801c3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3b2:	4770      	bx	lr

0801c3b4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801c3b4:	b580      	push	{r7, lr}
 801c3b6:	b09c      	sub	sp, #112	; 0x70
 801c3b8:	af00      	add	r7, sp, #0
 801c3ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801c3bc:	687b      	ldr	r3, [r7, #4]
 801c3be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c3c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 801c3c2:	687b      	ldr	r3, [r7, #4]
 801c3c4:	681b      	ldr	r3, [r3, #0]
 801c3c6:	681b      	ldr	r3, [r3, #0]
 801c3c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c3cc:	2b00      	cmp	r3, #0
 801c3ce:	d172      	bne.n	801c4b6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 801c3d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c3d2:	2200      	movs	r2, #0
 801c3d4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801c3d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c3d8:	681b      	ldr	r3, [r3, #0]
 801c3da:	330c      	adds	r3, #12
 801c3dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c3de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c3e0:	e853 3f00 	ldrex	r3, [r3]
 801c3e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801c3e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c3e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801c3ec:	66bb      	str	r3, [r7, #104]	; 0x68
 801c3ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c3f0:	681b      	ldr	r3, [r3, #0]
 801c3f2:	330c      	adds	r3, #12
 801c3f4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801c3f6:	65ba      	str	r2, [r7, #88]	; 0x58
 801c3f8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c3fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801c3fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801c3fe:	e841 2300 	strex	r3, r2, [r1]
 801c402:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801c404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c406:	2b00      	cmp	r3, #0
 801c408:	d1e5      	bne.n	801c3d6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c40a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c40c:	681b      	ldr	r3, [r3, #0]
 801c40e:	3314      	adds	r3, #20
 801c410:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c414:	e853 3f00 	ldrex	r3, [r3]
 801c418:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801c41a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c41c:	f023 0301 	bic.w	r3, r3, #1
 801c420:	667b      	str	r3, [r7, #100]	; 0x64
 801c422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c424:	681b      	ldr	r3, [r3, #0]
 801c426:	3314      	adds	r3, #20
 801c428:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801c42a:	647a      	str	r2, [r7, #68]	; 0x44
 801c42c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c42e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801c430:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c432:	e841 2300 	strex	r3, r2, [r1]
 801c436:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801c438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c43a:	2b00      	cmp	r3, #0
 801c43c:	d1e5      	bne.n	801c40a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801c43e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c440:	681b      	ldr	r3, [r3, #0]
 801c442:	3314      	adds	r3, #20
 801c444:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c448:	e853 3f00 	ldrex	r3, [r3]
 801c44c:	623b      	str	r3, [r7, #32]
   return(result);
 801c44e:	6a3b      	ldr	r3, [r7, #32]
 801c450:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801c454:	663b      	str	r3, [r7, #96]	; 0x60
 801c456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c458:	681b      	ldr	r3, [r3, #0]
 801c45a:	3314      	adds	r3, #20
 801c45c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801c45e:	633a      	str	r2, [r7, #48]	; 0x30
 801c460:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c462:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c466:	e841 2300 	strex	r3, r2, [r1]
 801c46a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801c46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c46e:	2b00      	cmp	r3, #0
 801c470:	d1e5      	bne.n	801c43e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801c472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c474:	2220      	movs	r2, #32
 801c476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c47a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c47c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c47e:	2b01      	cmp	r3, #1
 801c480:	d119      	bne.n	801c4b6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c484:	681b      	ldr	r3, [r3, #0]
 801c486:	330c      	adds	r3, #12
 801c488:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c48a:	693b      	ldr	r3, [r7, #16]
 801c48c:	e853 3f00 	ldrex	r3, [r3]
 801c490:	60fb      	str	r3, [r7, #12]
   return(result);
 801c492:	68fb      	ldr	r3, [r7, #12]
 801c494:	f023 0310 	bic.w	r3, r3, #16
 801c498:	65fb      	str	r3, [r7, #92]	; 0x5c
 801c49a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c49c:	681b      	ldr	r3, [r3, #0]
 801c49e:	330c      	adds	r3, #12
 801c4a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801c4a2:	61fa      	str	r2, [r7, #28]
 801c4a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c4a6:	69b9      	ldr	r1, [r7, #24]
 801c4a8:	69fa      	ldr	r2, [r7, #28]
 801c4aa:	e841 2300 	strex	r3, r2, [r1]
 801c4ae:	617b      	str	r3, [r7, #20]
   return(result);
 801c4b0:	697b      	ldr	r3, [r7, #20]
 801c4b2:	2b00      	cmp	r3, #0
 801c4b4:	d1e5      	bne.n	801c482 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c4b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c4b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c4ba:	2b01      	cmp	r3, #1
 801c4bc:	d106      	bne.n	801c4cc <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801c4be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c4c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801c4c2:	4619      	mov	r1, r3
 801c4c4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801c4c6:	f7e4 fd51 	bl	8000f6c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801c4ca:	e002      	b.n	801c4d2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 801c4cc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801c4ce:	f7ff ff53 	bl	801c378 <HAL_UART_RxCpltCallback>
}
 801c4d2:	bf00      	nop
 801c4d4:	3770      	adds	r7, #112	; 0x70
 801c4d6:	46bd      	mov	sp, r7
 801c4d8:	bd80      	pop	{r7, pc}

0801c4da <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801c4da:	b580      	push	{r7, lr}
 801c4dc:	b084      	sub	sp, #16
 801c4de:	af00      	add	r7, sp, #0
 801c4e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801c4e2:	687b      	ldr	r3, [r7, #4]
 801c4e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c4e6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c4e8:	68fb      	ldr	r3, [r7, #12]
 801c4ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c4ec:	2b01      	cmp	r3, #1
 801c4ee:	d108      	bne.n	801c502 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801c4f0:	68fb      	ldr	r3, [r7, #12]
 801c4f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801c4f4:	085b      	lsrs	r3, r3, #1
 801c4f6:	b29b      	uxth	r3, r3
 801c4f8:	4619      	mov	r1, r3
 801c4fa:	68f8      	ldr	r0, [r7, #12]
 801c4fc:	f7e4 fd36 	bl	8000f6c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801c500:	e002      	b.n	801c508 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 801c502:	68f8      	ldr	r0, [r7, #12]
 801c504:	f7ff ff42 	bl	801c38c <HAL_UART_RxHalfCpltCallback>
}
 801c508:	bf00      	nop
 801c50a:	3710      	adds	r7, #16
 801c50c:	46bd      	mov	sp, r7
 801c50e:	bd80      	pop	{r7, pc}

0801c510 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801c510:	b580      	push	{r7, lr}
 801c512:	b084      	sub	sp, #16
 801c514:	af00      	add	r7, sp, #0
 801c516:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 801c518:	2300      	movs	r3, #0
 801c51a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801c51c:	687b      	ldr	r3, [r7, #4]
 801c51e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c520:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 801c522:	68bb      	ldr	r3, [r7, #8]
 801c524:	681b      	ldr	r3, [r3, #0]
 801c526:	695b      	ldr	r3, [r3, #20]
 801c528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c52c:	2b80      	cmp	r3, #128	; 0x80
 801c52e:	bf0c      	ite	eq
 801c530:	2301      	moveq	r3, #1
 801c532:	2300      	movne	r3, #0
 801c534:	b2db      	uxtb	r3, r3
 801c536:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 801c538:	68bb      	ldr	r3, [r7, #8]
 801c53a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801c53e:	b2db      	uxtb	r3, r3
 801c540:	2b21      	cmp	r3, #33	; 0x21
 801c542:	d108      	bne.n	801c556 <UART_DMAError+0x46>
 801c544:	68fb      	ldr	r3, [r7, #12]
 801c546:	2b00      	cmp	r3, #0
 801c548:	d005      	beq.n	801c556 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 801c54a:	68bb      	ldr	r3, [r7, #8]
 801c54c:	2200      	movs	r2, #0
 801c54e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 801c550:	68b8      	ldr	r0, [r7, #8]
 801c552:	f000 f933 	bl	801c7bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801c556:	68bb      	ldr	r3, [r7, #8]
 801c558:	681b      	ldr	r3, [r3, #0]
 801c55a:	695b      	ldr	r3, [r3, #20]
 801c55c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c560:	2b40      	cmp	r3, #64	; 0x40
 801c562:	bf0c      	ite	eq
 801c564:	2301      	moveq	r3, #1
 801c566:	2300      	movne	r3, #0
 801c568:	b2db      	uxtb	r3, r3
 801c56a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 801c56c:	68bb      	ldr	r3, [r7, #8]
 801c56e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801c572:	b2db      	uxtb	r3, r3
 801c574:	2b22      	cmp	r3, #34	; 0x22
 801c576:	d108      	bne.n	801c58a <UART_DMAError+0x7a>
 801c578:	68fb      	ldr	r3, [r7, #12]
 801c57a:	2b00      	cmp	r3, #0
 801c57c:	d005      	beq.n	801c58a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 801c57e:	68bb      	ldr	r3, [r7, #8]
 801c580:	2200      	movs	r2, #0
 801c582:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 801c584:	68b8      	ldr	r0, [r7, #8]
 801c586:	f000 f941 	bl	801c80c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801c58a:	68bb      	ldr	r3, [r7, #8]
 801c58c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c58e:	f043 0210 	orr.w	r2, r3, #16
 801c592:	68bb      	ldr	r3, [r7, #8]
 801c594:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801c596:	68b8      	ldr	r0, [r7, #8]
 801c598:	f7ff ff02 	bl	801c3a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c59c:	bf00      	nop
 801c59e:	3710      	adds	r7, #16
 801c5a0:	46bd      	mov	sp, r7
 801c5a2:	bd80      	pop	{r7, pc}

0801c5a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 801c5a4:	b580      	push	{r7, lr}
 801c5a6:	b090      	sub	sp, #64	; 0x40
 801c5a8:	af00      	add	r7, sp, #0
 801c5aa:	60f8      	str	r0, [r7, #12]
 801c5ac:	60b9      	str	r1, [r7, #8]
 801c5ae:	603b      	str	r3, [r7, #0]
 801c5b0:	4613      	mov	r3, r2
 801c5b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801c5b4:	e050      	b.n	801c658 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801c5b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c5b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c5bc:	d04c      	beq.n	801c658 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 801c5be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c5c0:	2b00      	cmp	r3, #0
 801c5c2:	d007      	beq.n	801c5d4 <UART_WaitOnFlagUntilTimeout+0x30>
 801c5c4:	f7fa f8c8 	bl	8016758 <HAL_GetTick>
 801c5c8:	4602      	mov	r2, r0
 801c5ca:	683b      	ldr	r3, [r7, #0]
 801c5cc:	1ad3      	subs	r3, r2, r3
 801c5ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c5d0:	429a      	cmp	r2, r3
 801c5d2:	d241      	bcs.n	801c658 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801c5d4:	68fb      	ldr	r3, [r7, #12]
 801c5d6:	681b      	ldr	r3, [r3, #0]
 801c5d8:	330c      	adds	r3, #12
 801c5da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c5de:	e853 3f00 	ldrex	r3, [r3]
 801c5e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801c5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c5e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801c5ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c5ec:	68fb      	ldr	r3, [r7, #12]
 801c5ee:	681b      	ldr	r3, [r3, #0]
 801c5f0:	330c      	adds	r3, #12
 801c5f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c5f4:	637a      	str	r2, [r7, #52]	; 0x34
 801c5f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c5f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c5fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c5fc:	e841 2300 	strex	r3, r2, [r1]
 801c600:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801c602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c604:	2b00      	cmp	r3, #0
 801c606:	d1e5      	bne.n	801c5d4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c608:	68fb      	ldr	r3, [r7, #12]
 801c60a:	681b      	ldr	r3, [r3, #0]
 801c60c:	3314      	adds	r3, #20
 801c60e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c610:	697b      	ldr	r3, [r7, #20]
 801c612:	e853 3f00 	ldrex	r3, [r3]
 801c616:	613b      	str	r3, [r7, #16]
   return(result);
 801c618:	693b      	ldr	r3, [r7, #16]
 801c61a:	f023 0301 	bic.w	r3, r3, #1
 801c61e:	63bb      	str	r3, [r7, #56]	; 0x38
 801c620:	68fb      	ldr	r3, [r7, #12]
 801c622:	681b      	ldr	r3, [r3, #0]
 801c624:	3314      	adds	r3, #20
 801c626:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c628:	623a      	str	r2, [r7, #32]
 801c62a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c62c:	69f9      	ldr	r1, [r7, #28]
 801c62e:	6a3a      	ldr	r2, [r7, #32]
 801c630:	e841 2300 	strex	r3, r2, [r1]
 801c634:	61bb      	str	r3, [r7, #24]
   return(result);
 801c636:	69bb      	ldr	r3, [r7, #24]
 801c638:	2b00      	cmp	r3, #0
 801c63a:	d1e5      	bne.n	801c608 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 801c63c:	68fb      	ldr	r3, [r7, #12]
 801c63e:	2220      	movs	r2, #32
 801c640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 801c644:	68fb      	ldr	r3, [r7, #12]
 801c646:	2220      	movs	r2, #32
 801c648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 801c64c:	68fb      	ldr	r3, [r7, #12]
 801c64e:	2200      	movs	r2, #0
 801c650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 801c654:	2303      	movs	r3, #3
 801c656:	e00f      	b.n	801c678 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801c658:	68fb      	ldr	r3, [r7, #12]
 801c65a:	681b      	ldr	r3, [r3, #0]
 801c65c:	681a      	ldr	r2, [r3, #0]
 801c65e:	68bb      	ldr	r3, [r7, #8]
 801c660:	4013      	ands	r3, r2
 801c662:	68ba      	ldr	r2, [r7, #8]
 801c664:	429a      	cmp	r2, r3
 801c666:	bf0c      	ite	eq
 801c668:	2301      	moveq	r3, #1
 801c66a:	2300      	movne	r3, #0
 801c66c:	b2db      	uxtb	r3, r3
 801c66e:	461a      	mov	r2, r3
 801c670:	79fb      	ldrb	r3, [r7, #7]
 801c672:	429a      	cmp	r2, r3
 801c674:	d09f      	beq.n	801c5b6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801c676:	2300      	movs	r3, #0
}
 801c678:	4618      	mov	r0, r3
 801c67a:	3740      	adds	r7, #64	; 0x40
 801c67c:	46bd      	mov	sp, r7
 801c67e:	bd80      	pop	{r7, pc}

0801c680 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801c680:	b580      	push	{r7, lr}
 801c682:	b098      	sub	sp, #96	; 0x60
 801c684:	af00      	add	r7, sp, #0
 801c686:	60f8      	str	r0, [r7, #12]
 801c688:	60b9      	str	r1, [r7, #8]
 801c68a:	4613      	mov	r3, r2
 801c68c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 801c68e:	68ba      	ldr	r2, [r7, #8]
 801c690:	68fb      	ldr	r3, [r7, #12]
 801c692:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 801c694:	68fb      	ldr	r3, [r7, #12]
 801c696:	88fa      	ldrh	r2, [r7, #6]
 801c698:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c69a:	68fb      	ldr	r3, [r7, #12]
 801c69c:	2200      	movs	r2, #0
 801c69e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801c6a0:	68fb      	ldr	r3, [r7, #12]
 801c6a2:	2222      	movs	r2, #34	; 0x22
 801c6a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801c6a8:	68fb      	ldr	r3, [r7, #12]
 801c6aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c6ac:	4a40      	ldr	r2, [pc, #256]	; (801c7b0 <UART_Start_Receive_DMA+0x130>)
 801c6ae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801c6b0:	68fb      	ldr	r3, [r7, #12]
 801c6b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c6b4:	4a3f      	ldr	r2, [pc, #252]	; (801c7b4 <UART_Start_Receive_DMA+0x134>)
 801c6b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 801c6b8:	68fb      	ldr	r3, [r7, #12]
 801c6ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c6bc:	4a3e      	ldr	r2, [pc, #248]	; (801c7b8 <UART_Start_Receive_DMA+0x138>)
 801c6be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 801c6c0:	68fb      	ldr	r3, [r7, #12]
 801c6c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c6c4:	2200      	movs	r2, #0
 801c6c6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 801c6c8:	f107 0308 	add.w	r3, r7, #8
 801c6cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 801c6ce:	68fb      	ldr	r3, [r7, #12]
 801c6d0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801c6d2:	68fb      	ldr	r3, [r7, #12]
 801c6d4:	681b      	ldr	r3, [r3, #0]
 801c6d6:	3304      	adds	r3, #4
 801c6d8:	4619      	mov	r1, r3
 801c6da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c6dc:	681a      	ldr	r2, [r3, #0]
 801c6de:	88fb      	ldrh	r3, [r7, #6]
 801c6e0:	f7fa fa2a 	bl	8016b38 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 801c6e4:	2300      	movs	r3, #0
 801c6e6:	613b      	str	r3, [r7, #16]
 801c6e8:	68fb      	ldr	r3, [r7, #12]
 801c6ea:	681b      	ldr	r3, [r3, #0]
 801c6ec:	681b      	ldr	r3, [r3, #0]
 801c6ee:	613b      	str	r3, [r7, #16]
 801c6f0:	68fb      	ldr	r3, [r7, #12]
 801c6f2:	681b      	ldr	r3, [r3, #0]
 801c6f4:	685b      	ldr	r3, [r3, #4]
 801c6f6:	613b      	str	r3, [r7, #16]
 801c6f8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801c6fa:	68fb      	ldr	r3, [r7, #12]
 801c6fc:	2200      	movs	r2, #0
 801c6fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 801c702:	68fb      	ldr	r3, [r7, #12]
 801c704:	691b      	ldr	r3, [r3, #16]
 801c706:	2b00      	cmp	r3, #0
 801c708:	d019      	beq.n	801c73e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801c70a:	68fb      	ldr	r3, [r7, #12]
 801c70c:	681b      	ldr	r3, [r3, #0]
 801c70e:	330c      	adds	r3, #12
 801c710:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c712:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c714:	e853 3f00 	ldrex	r3, [r3]
 801c718:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801c71a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c71c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c720:	65bb      	str	r3, [r7, #88]	; 0x58
 801c722:	68fb      	ldr	r3, [r7, #12]
 801c724:	681b      	ldr	r3, [r3, #0]
 801c726:	330c      	adds	r3, #12
 801c728:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801c72a:	64fa      	str	r2, [r7, #76]	; 0x4c
 801c72c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c72e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801c730:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c732:	e841 2300 	strex	r3, r2, [r1]
 801c736:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801c738:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c73a:	2b00      	cmp	r3, #0
 801c73c:	d1e5      	bne.n	801c70a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c73e:	68fb      	ldr	r3, [r7, #12]
 801c740:	681b      	ldr	r3, [r3, #0]
 801c742:	3314      	adds	r3, #20
 801c744:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c748:	e853 3f00 	ldrex	r3, [r3]
 801c74c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801c74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c750:	f043 0301 	orr.w	r3, r3, #1
 801c754:	657b      	str	r3, [r7, #84]	; 0x54
 801c756:	68fb      	ldr	r3, [r7, #12]
 801c758:	681b      	ldr	r3, [r3, #0]
 801c75a:	3314      	adds	r3, #20
 801c75c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c75e:	63ba      	str	r2, [r7, #56]	; 0x38
 801c760:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c762:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801c764:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c766:	e841 2300 	strex	r3, r2, [r1]
 801c76a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801c76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c76e:	2b00      	cmp	r3, #0
 801c770:	d1e5      	bne.n	801c73e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801c772:	68fb      	ldr	r3, [r7, #12]
 801c774:	681b      	ldr	r3, [r3, #0]
 801c776:	3314      	adds	r3, #20
 801c778:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c77a:	69bb      	ldr	r3, [r7, #24]
 801c77c:	e853 3f00 	ldrex	r3, [r3]
 801c780:	617b      	str	r3, [r7, #20]
   return(result);
 801c782:	697b      	ldr	r3, [r7, #20]
 801c784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c788:	653b      	str	r3, [r7, #80]	; 0x50
 801c78a:	68fb      	ldr	r3, [r7, #12]
 801c78c:	681b      	ldr	r3, [r3, #0]
 801c78e:	3314      	adds	r3, #20
 801c790:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801c792:	627a      	str	r2, [r7, #36]	; 0x24
 801c794:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c796:	6a39      	ldr	r1, [r7, #32]
 801c798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c79a:	e841 2300 	strex	r3, r2, [r1]
 801c79e:	61fb      	str	r3, [r7, #28]
   return(result);
 801c7a0:	69fb      	ldr	r3, [r7, #28]
 801c7a2:	2b00      	cmp	r3, #0
 801c7a4:	d1e5      	bne.n	801c772 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 801c7a6:	2300      	movs	r3, #0
}
 801c7a8:	4618      	mov	r0, r3
 801c7aa:	3760      	adds	r7, #96	; 0x60
 801c7ac:	46bd      	mov	sp, r7
 801c7ae:	bd80      	pop	{r7, pc}
 801c7b0:	0801c3b5 	.word	0x0801c3b5
 801c7b4:	0801c4db 	.word	0x0801c4db
 801c7b8:	0801c511 	.word	0x0801c511

0801c7bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801c7bc:	b480      	push	{r7}
 801c7be:	b089      	sub	sp, #36	; 0x24
 801c7c0:	af00      	add	r7, sp, #0
 801c7c2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801c7c4:	687b      	ldr	r3, [r7, #4]
 801c7c6:	681b      	ldr	r3, [r3, #0]
 801c7c8:	330c      	adds	r3, #12
 801c7ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c7cc:	68fb      	ldr	r3, [r7, #12]
 801c7ce:	e853 3f00 	ldrex	r3, [r3]
 801c7d2:	60bb      	str	r3, [r7, #8]
   return(result);
 801c7d4:	68bb      	ldr	r3, [r7, #8]
 801c7d6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801c7da:	61fb      	str	r3, [r7, #28]
 801c7dc:	687b      	ldr	r3, [r7, #4]
 801c7de:	681b      	ldr	r3, [r3, #0]
 801c7e0:	330c      	adds	r3, #12
 801c7e2:	69fa      	ldr	r2, [r7, #28]
 801c7e4:	61ba      	str	r2, [r7, #24]
 801c7e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c7e8:	6979      	ldr	r1, [r7, #20]
 801c7ea:	69ba      	ldr	r2, [r7, #24]
 801c7ec:	e841 2300 	strex	r3, r2, [r1]
 801c7f0:	613b      	str	r3, [r7, #16]
   return(result);
 801c7f2:	693b      	ldr	r3, [r7, #16]
 801c7f4:	2b00      	cmp	r3, #0
 801c7f6:	d1e5      	bne.n	801c7c4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801c7f8:	687b      	ldr	r3, [r7, #4]
 801c7fa:	2220      	movs	r2, #32
 801c7fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 801c800:	bf00      	nop
 801c802:	3724      	adds	r7, #36	; 0x24
 801c804:	46bd      	mov	sp, r7
 801c806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c80a:	4770      	bx	lr

0801c80c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801c80c:	b480      	push	{r7}
 801c80e:	b095      	sub	sp, #84	; 0x54
 801c810:	af00      	add	r7, sp, #0
 801c812:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c814:	687b      	ldr	r3, [r7, #4]
 801c816:	681b      	ldr	r3, [r3, #0]
 801c818:	330c      	adds	r3, #12
 801c81a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c81c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c81e:	e853 3f00 	ldrex	r3, [r3]
 801c822:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801c824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c826:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801c82a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c82c:	687b      	ldr	r3, [r7, #4]
 801c82e:	681b      	ldr	r3, [r3, #0]
 801c830:	330c      	adds	r3, #12
 801c832:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c834:	643a      	str	r2, [r7, #64]	; 0x40
 801c836:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c838:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801c83a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801c83c:	e841 2300 	strex	r3, r2, [r1]
 801c840:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801c842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c844:	2b00      	cmp	r3, #0
 801c846:	d1e5      	bne.n	801c814 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c848:	687b      	ldr	r3, [r7, #4]
 801c84a:	681b      	ldr	r3, [r3, #0]
 801c84c:	3314      	adds	r3, #20
 801c84e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c850:	6a3b      	ldr	r3, [r7, #32]
 801c852:	e853 3f00 	ldrex	r3, [r3]
 801c856:	61fb      	str	r3, [r7, #28]
   return(result);
 801c858:	69fb      	ldr	r3, [r7, #28]
 801c85a:	f023 0301 	bic.w	r3, r3, #1
 801c85e:	64bb      	str	r3, [r7, #72]	; 0x48
 801c860:	687b      	ldr	r3, [r7, #4]
 801c862:	681b      	ldr	r3, [r3, #0]
 801c864:	3314      	adds	r3, #20
 801c866:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c868:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c86a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c86c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c86e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c870:	e841 2300 	strex	r3, r2, [r1]
 801c874:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801c876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c878:	2b00      	cmp	r3, #0
 801c87a:	d1e5      	bne.n	801c848 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c87c:	687b      	ldr	r3, [r7, #4]
 801c87e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c880:	2b01      	cmp	r3, #1
 801c882:	d119      	bne.n	801c8b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c884:	687b      	ldr	r3, [r7, #4]
 801c886:	681b      	ldr	r3, [r3, #0]
 801c888:	330c      	adds	r3, #12
 801c88a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c88c:	68fb      	ldr	r3, [r7, #12]
 801c88e:	e853 3f00 	ldrex	r3, [r3]
 801c892:	60bb      	str	r3, [r7, #8]
   return(result);
 801c894:	68bb      	ldr	r3, [r7, #8]
 801c896:	f023 0310 	bic.w	r3, r3, #16
 801c89a:	647b      	str	r3, [r7, #68]	; 0x44
 801c89c:	687b      	ldr	r3, [r7, #4]
 801c89e:	681b      	ldr	r3, [r3, #0]
 801c8a0:	330c      	adds	r3, #12
 801c8a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c8a4:	61ba      	str	r2, [r7, #24]
 801c8a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c8a8:	6979      	ldr	r1, [r7, #20]
 801c8aa:	69ba      	ldr	r2, [r7, #24]
 801c8ac:	e841 2300 	strex	r3, r2, [r1]
 801c8b0:	613b      	str	r3, [r7, #16]
   return(result);
 801c8b2:	693b      	ldr	r3, [r7, #16]
 801c8b4:	2b00      	cmp	r3, #0
 801c8b6:	d1e5      	bne.n	801c884 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801c8b8:	687b      	ldr	r3, [r7, #4]
 801c8ba:	2220      	movs	r2, #32
 801c8bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c8c0:	687b      	ldr	r3, [r7, #4]
 801c8c2:	2200      	movs	r2, #0
 801c8c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 801c8c6:	bf00      	nop
 801c8c8:	3754      	adds	r7, #84	; 0x54
 801c8ca:	46bd      	mov	sp, r7
 801c8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8d0:	4770      	bx	lr

0801c8d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801c8d2:	b580      	push	{r7, lr}
 801c8d4:	b084      	sub	sp, #16
 801c8d6:	af00      	add	r7, sp, #0
 801c8d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801c8da:	687b      	ldr	r3, [r7, #4]
 801c8dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c8de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 801c8e0:	68fb      	ldr	r3, [r7, #12]
 801c8e2:	2200      	movs	r2, #0
 801c8e4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 801c8e6:	68fb      	ldr	r3, [r7, #12]
 801c8e8:	2200      	movs	r2, #0
 801c8ea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801c8ec:	68f8      	ldr	r0, [r7, #12]
 801c8ee:	f7ff fd57 	bl	801c3a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c8f2:	bf00      	nop
 801c8f4:	3710      	adds	r7, #16
 801c8f6:	46bd      	mov	sp, r7
 801c8f8:	bd80      	pop	{r7, pc}

0801c8fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801c8fa:	b480      	push	{r7}
 801c8fc:	b085      	sub	sp, #20
 801c8fe:	af00      	add	r7, sp, #0
 801c900:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801c902:	687b      	ldr	r3, [r7, #4]
 801c904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801c908:	b2db      	uxtb	r3, r3
 801c90a:	2b21      	cmp	r3, #33	; 0x21
 801c90c:	d13e      	bne.n	801c98c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c90e:	687b      	ldr	r3, [r7, #4]
 801c910:	689b      	ldr	r3, [r3, #8]
 801c912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c916:	d114      	bne.n	801c942 <UART_Transmit_IT+0x48>
 801c918:	687b      	ldr	r3, [r7, #4]
 801c91a:	691b      	ldr	r3, [r3, #16]
 801c91c:	2b00      	cmp	r3, #0
 801c91e:	d110      	bne.n	801c942 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 801c920:	687b      	ldr	r3, [r7, #4]
 801c922:	6a1b      	ldr	r3, [r3, #32]
 801c924:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801c926:	68fb      	ldr	r3, [r7, #12]
 801c928:	881b      	ldrh	r3, [r3, #0]
 801c92a:	461a      	mov	r2, r3
 801c92c:	687b      	ldr	r3, [r7, #4]
 801c92e:	681b      	ldr	r3, [r3, #0]
 801c930:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801c934:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 801c936:	687b      	ldr	r3, [r7, #4]
 801c938:	6a1b      	ldr	r3, [r3, #32]
 801c93a:	1c9a      	adds	r2, r3, #2
 801c93c:	687b      	ldr	r3, [r7, #4]
 801c93e:	621a      	str	r2, [r3, #32]
 801c940:	e008      	b.n	801c954 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801c942:	687b      	ldr	r3, [r7, #4]
 801c944:	6a1b      	ldr	r3, [r3, #32]
 801c946:	1c59      	adds	r1, r3, #1
 801c948:	687a      	ldr	r2, [r7, #4]
 801c94a:	6211      	str	r1, [r2, #32]
 801c94c:	781a      	ldrb	r2, [r3, #0]
 801c94e:	687b      	ldr	r3, [r7, #4]
 801c950:	681b      	ldr	r3, [r3, #0]
 801c952:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 801c954:	687b      	ldr	r3, [r7, #4]
 801c956:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801c958:	b29b      	uxth	r3, r3
 801c95a:	3b01      	subs	r3, #1
 801c95c:	b29b      	uxth	r3, r3
 801c95e:	687a      	ldr	r2, [r7, #4]
 801c960:	4619      	mov	r1, r3
 801c962:	84d1      	strh	r1, [r2, #38]	; 0x26
 801c964:	2b00      	cmp	r3, #0
 801c966:	d10f      	bne.n	801c988 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801c968:	687b      	ldr	r3, [r7, #4]
 801c96a:	681b      	ldr	r3, [r3, #0]
 801c96c:	68da      	ldr	r2, [r3, #12]
 801c96e:	687b      	ldr	r3, [r7, #4]
 801c970:	681b      	ldr	r3, [r3, #0]
 801c972:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801c976:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801c978:	687b      	ldr	r3, [r7, #4]
 801c97a:	681b      	ldr	r3, [r3, #0]
 801c97c:	68da      	ldr	r2, [r3, #12]
 801c97e:	687b      	ldr	r3, [r7, #4]
 801c980:	681b      	ldr	r3, [r3, #0]
 801c982:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c986:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 801c988:	2300      	movs	r3, #0
 801c98a:	e000      	b.n	801c98e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 801c98c:	2302      	movs	r3, #2
  }
}
 801c98e:	4618      	mov	r0, r3
 801c990:	3714      	adds	r7, #20
 801c992:	46bd      	mov	sp, r7
 801c994:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c998:	4770      	bx	lr

0801c99a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801c99a:	b580      	push	{r7, lr}
 801c99c:	b082      	sub	sp, #8
 801c99e:	af00      	add	r7, sp, #0
 801c9a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 801c9a2:	687b      	ldr	r3, [r7, #4]
 801c9a4:	681b      	ldr	r3, [r3, #0]
 801c9a6:	68da      	ldr	r2, [r3, #12]
 801c9a8:	687b      	ldr	r3, [r7, #4]
 801c9aa:	681b      	ldr	r3, [r3, #0]
 801c9ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c9b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801c9b2:	687b      	ldr	r3, [r7, #4]
 801c9b4:	2220      	movs	r2, #32
 801c9b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801c9ba:	6878      	ldr	r0, [r7, #4]
 801c9bc:	f7ff fcd2 	bl	801c364 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 801c9c0:	2300      	movs	r3, #0
}
 801c9c2:	4618      	mov	r0, r3
 801c9c4:	3708      	adds	r7, #8
 801c9c6:	46bd      	mov	sp, r7
 801c9c8:	bd80      	pop	{r7, pc}

0801c9ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801c9ca:	b580      	push	{r7, lr}
 801c9cc:	b08c      	sub	sp, #48	; 0x30
 801c9ce:	af00      	add	r7, sp, #0
 801c9d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801c9d2:	687b      	ldr	r3, [r7, #4]
 801c9d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801c9d8:	b2db      	uxtb	r3, r3
 801c9da:	2b22      	cmp	r3, #34	; 0x22
 801c9dc:	f040 80ab 	bne.w	801cb36 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c9e0:	687b      	ldr	r3, [r7, #4]
 801c9e2:	689b      	ldr	r3, [r3, #8]
 801c9e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c9e8:	d117      	bne.n	801ca1a <UART_Receive_IT+0x50>
 801c9ea:	687b      	ldr	r3, [r7, #4]
 801c9ec:	691b      	ldr	r3, [r3, #16]
 801c9ee:	2b00      	cmp	r3, #0
 801c9f0:	d113      	bne.n	801ca1a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 801c9f2:	2300      	movs	r3, #0
 801c9f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 801c9f6:	687b      	ldr	r3, [r7, #4]
 801c9f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c9fa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 801c9fc:	687b      	ldr	r3, [r7, #4]
 801c9fe:	681b      	ldr	r3, [r3, #0]
 801ca00:	685b      	ldr	r3, [r3, #4]
 801ca02:	b29b      	uxth	r3, r3
 801ca04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ca08:	b29a      	uxth	r2, r3
 801ca0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ca0c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801ca0e:	687b      	ldr	r3, [r7, #4]
 801ca10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ca12:	1c9a      	adds	r2, r3, #2
 801ca14:	687b      	ldr	r3, [r7, #4]
 801ca16:	629a      	str	r2, [r3, #40]	; 0x28
 801ca18:	e026      	b.n	801ca68 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 801ca1a:	687b      	ldr	r3, [r7, #4]
 801ca1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ca1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 801ca20:	2300      	movs	r3, #0
 801ca22:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 801ca24:	687b      	ldr	r3, [r7, #4]
 801ca26:	689b      	ldr	r3, [r3, #8]
 801ca28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801ca2c:	d007      	beq.n	801ca3e <UART_Receive_IT+0x74>
 801ca2e:	687b      	ldr	r3, [r7, #4]
 801ca30:	689b      	ldr	r3, [r3, #8]
 801ca32:	2b00      	cmp	r3, #0
 801ca34:	d10a      	bne.n	801ca4c <UART_Receive_IT+0x82>
 801ca36:	687b      	ldr	r3, [r7, #4]
 801ca38:	691b      	ldr	r3, [r3, #16]
 801ca3a:	2b00      	cmp	r3, #0
 801ca3c:	d106      	bne.n	801ca4c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801ca3e:	687b      	ldr	r3, [r7, #4]
 801ca40:	681b      	ldr	r3, [r3, #0]
 801ca42:	685b      	ldr	r3, [r3, #4]
 801ca44:	b2da      	uxtb	r2, r3
 801ca46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca48:	701a      	strb	r2, [r3, #0]
 801ca4a:	e008      	b.n	801ca5e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801ca4c:	687b      	ldr	r3, [r7, #4]
 801ca4e:	681b      	ldr	r3, [r3, #0]
 801ca50:	685b      	ldr	r3, [r3, #4]
 801ca52:	b2db      	uxtb	r3, r3
 801ca54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ca58:	b2da      	uxtb	r2, r3
 801ca5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca5c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 801ca5e:	687b      	ldr	r3, [r7, #4]
 801ca60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ca62:	1c5a      	adds	r2, r3, #1
 801ca64:	687b      	ldr	r3, [r7, #4]
 801ca66:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 801ca68:	687b      	ldr	r3, [r7, #4]
 801ca6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801ca6c:	b29b      	uxth	r3, r3
 801ca6e:	3b01      	subs	r3, #1
 801ca70:	b29b      	uxth	r3, r3
 801ca72:	687a      	ldr	r2, [r7, #4]
 801ca74:	4619      	mov	r1, r3
 801ca76:	85d1      	strh	r1, [r2, #46]	; 0x2e
 801ca78:	2b00      	cmp	r3, #0
 801ca7a:	d15a      	bne.n	801cb32 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801ca7c:	687b      	ldr	r3, [r7, #4]
 801ca7e:	681b      	ldr	r3, [r3, #0]
 801ca80:	68da      	ldr	r2, [r3, #12]
 801ca82:	687b      	ldr	r3, [r7, #4]
 801ca84:	681b      	ldr	r3, [r3, #0]
 801ca86:	f022 0220 	bic.w	r2, r2, #32
 801ca8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801ca8c:	687b      	ldr	r3, [r7, #4]
 801ca8e:	681b      	ldr	r3, [r3, #0]
 801ca90:	68da      	ldr	r2, [r3, #12]
 801ca92:	687b      	ldr	r3, [r7, #4]
 801ca94:	681b      	ldr	r3, [r3, #0]
 801ca96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801ca9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801ca9c:	687b      	ldr	r3, [r7, #4]
 801ca9e:	681b      	ldr	r3, [r3, #0]
 801caa0:	695a      	ldr	r2, [r3, #20]
 801caa2:	687b      	ldr	r3, [r7, #4]
 801caa4:	681b      	ldr	r3, [r3, #0]
 801caa6:	f022 0201 	bic.w	r2, r2, #1
 801caaa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801caac:	687b      	ldr	r3, [r7, #4]
 801caae:	2220      	movs	r2, #32
 801cab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801cab4:	687b      	ldr	r3, [r7, #4]
 801cab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cab8:	2b01      	cmp	r3, #1
 801caba:	d135      	bne.n	801cb28 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801cabc:	687b      	ldr	r3, [r7, #4]
 801cabe:	2200      	movs	r2, #0
 801cac0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801cac2:	687b      	ldr	r3, [r7, #4]
 801cac4:	681b      	ldr	r3, [r3, #0]
 801cac6:	330c      	adds	r3, #12
 801cac8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801caca:	697b      	ldr	r3, [r7, #20]
 801cacc:	e853 3f00 	ldrex	r3, [r3]
 801cad0:	613b      	str	r3, [r7, #16]
   return(result);
 801cad2:	693b      	ldr	r3, [r7, #16]
 801cad4:	f023 0310 	bic.w	r3, r3, #16
 801cad8:	627b      	str	r3, [r7, #36]	; 0x24
 801cada:	687b      	ldr	r3, [r7, #4]
 801cadc:	681b      	ldr	r3, [r3, #0]
 801cade:	330c      	adds	r3, #12
 801cae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cae2:	623a      	str	r2, [r7, #32]
 801cae4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801cae6:	69f9      	ldr	r1, [r7, #28]
 801cae8:	6a3a      	ldr	r2, [r7, #32]
 801caea:	e841 2300 	strex	r3, r2, [r1]
 801caee:	61bb      	str	r3, [r7, #24]
   return(result);
 801caf0:	69bb      	ldr	r3, [r7, #24]
 801caf2:	2b00      	cmp	r3, #0
 801caf4:	d1e5      	bne.n	801cac2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 801caf6:	687b      	ldr	r3, [r7, #4]
 801caf8:	681b      	ldr	r3, [r3, #0]
 801cafa:	681b      	ldr	r3, [r3, #0]
 801cafc:	f003 0310 	and.w	r3, r3, #16
 801cb00:	2b10      	cmp	r3, #16
 801cb02:	d10a      	bne.n	801cb1a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 801cb04:	2300      	movs	r3, #0
 801cb06:	60fb      	str	r3, [r7, #12]
 801cb08:	687b      	ldr	r3, [r7, #4]
 801cb0a:	681b      	ldr	r3, [r3, #0]
 801cb0c:	681b      	ldr	r3, [r3, #0]
 801cb0e:	60fb      	str	r3, [r7, #12]
 801cb10:	687b      	ldr	r3, [r7, #4]
 801cb12:	681b      	ldr	r3, [r3, #0]
 801cb14:	685b      	ldr	r3, [r3, #4]
 801cb16:	60fb      	str	r3, [r7, #12]
 801cb18:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801cb1a:	687b      	ldr	r3, [r7, #4]
 801cb1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801cb1e:	4619      	mov	r1, r3
 801cb20:	6878      	ldr	r0, [r7, #4]
 801cb22:	f7e4 fa23 	bl	8000f6c <HAL_UARTEx_RxEventCallback>
 801cb26:	e002      	b.n	801cb2e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 801cb28:	6878      	ldr	r0, [r7, #4]
 801cb2a:	f7ff fc25 	bl	801c378 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 801cb2e:	2300      	movs	r3, #0
 801cb30:	e002      	b.n	801cb38 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 801cb32:	2300      	movs	r3, #0
 801cb34:	e000      	b.n	801cb38 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 801cb36:	2302      	movs	r3, #2
  }
}
 801cb38:	4618      	mov	r0, r3
 801cb3a:	3730      	adds	r7, #48	; 0x30
 801cb3c:	46bd      	mov	sp, r7
 801cb3e:	bd80      	pop	{r7, pc}

0801cb40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801cb40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801cb44:	b0c0      	sub	sp, #256	; 0x100
 801cb46:	af00      	add	r7, sp, #0
 801cb48:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801cb4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cb50:	681b      	ldr	r3, [r3, #0]
 801cb52:	691b      	ldr	r3, [r3, #16]
 801cb54:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 801cb58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cb5c:	68d9      	ldr	r1, [r3, #12]
 801cb5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cb62:	681a      	ldr	r2, [r3, #0]
 801cb64:	ea40 0301 	orr.w	r3, r0, r1
 801cb68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801cb6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cb6e:	689a      	ldr	r2, [r3, #8]
 801cb70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cb74:	691b      	ldr	r3, [r3, #16]
 801cb76:	431a      	orrs	r2, r3
 801cb78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cb7c:	695b      	ldr	r3, [r3, #20]
 801cb7e:	431a      	orrs	r2, r3
 801cb80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cb84:	69db      	ldr	r3, [r3, #28]
 801cb86:	4313      	orrs	r3, r2
 801cb88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 801cb8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cb90:	681b      	ldr	r3, [r3, #0]
 801cb92:	68db      	ldr	r3, [r3, #12]
 801cb94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 801cb98:	f021 010c 	bic.w	r1, r1, #12
 801cb9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cba0:	681a      	ldr	r2, [r3, #0]
 801cba2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801cba6:	430b      	orrs	r3, r1
 801cba8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801cbaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cbae:	681b      	ldr	r3, [r3, #0]
 801cbb0:	695b      	ldr	r3, [r3, #20]
 801cbb2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 801cbb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cbba:	6999      	ldr	r1, [r3, #24]
 801cbbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cbc0:	681a      	ldr	r2, [r3, #0]
 801cbc2:	ea40 0301 	orr.w	r3, r0, r1
 801cbc6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801cbc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cbcc:	681a      	ldr	r2, [r3, #0]
 801cbce:	4b8f      	ldr	r3, [pc, #572]	; (801ce0c <UART_SetConfig+0x2cc>)
 801cbd0:	429a      	cmp	r2, r3
 801cbd2:	d005      	beq.n	801cbe0 <UART_SetConfig+0xa0>
 801cbd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cbd8:	681a      	ldr	r2, [r3, #0]
 801cbda:	4b8d      	ldr	r3, [pc, #564]	; (801ce10 <UART_SetConfig+0x2d0>)
 801cbdc:	429a      	cmp	r2, r3
 801cbde:	d104      	bne.n	801cbea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801cbe0:	f7fd ffbc 	bl	801ab5c <HAL_RCC_GetPCLK2Freq>
 801cbe4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 801cbe8:	e003      	b.n	801cbf2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801cbea:	f7fd ffa3 	bl	801ab34 <HAL_RCC_GetPCLK1Freq>
 801cbee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801cbf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cbf6:	69db      	ldr	r3, [r3, #28]
 801cbf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801cbfc:	f040 810c 	bne.w	801ce18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801cc00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801cc04:	2200      	movs	r2, #0
 801cc06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801cc0a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 801cc0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 801cc12:	4622      	mov	r2, r4
 801cc14:	462b      	mov	r3, r5
 801cc16:	1891      	adds	r1, r2, r2
 801cc18:	65b9      	str	r1, [r7, #88]	; 0x58
 801cc1a:	415b      	adcs	r3, r3
 801cc1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801cc1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801cc22:	4621      	mov	r1, r4
 801cc24:	eb12 0801 	adds.w	r8, r2, r1
 801cc28:	4629      	mov	r1, r5
 801cc2a:	eb43 0901 	adc.w	r9, r3, r1
 801cc2e:	f04f 0200 	mov.w	r2, #0
 801cc32:	f04f 0300 	mov.w	r3, #0
 801cc36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801cc3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801cc3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801cc42:	4690      	mov	r8, r2
 801cc44:	4699      	mov	r9, r3
 801cc46:	4623      	mov	r3, r4
 801cc48:	eb18 0303 	adds.w	r3, r8, r3
 801cc4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801cc50:	462b      	mov	r3, r5
 801cc52:	eb49 0303 	adc.w	r3, r9, r3
 801cc56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801cc5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cc5e:	685b      	ldr	r3, [r3, #4]
 801cc60:	2200      	movs	r2, #0
 801cc62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801cc66:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801cc6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 801cc6e:	460b      	mov	r3, r1
 801cc70:	18db      	adds	r3, r3, r3
 801cc72:	653b      	str	r3, [r7, #80]	; 0x50
 801cc74:	4613      	mov	r3, r2
 801cc76:	eb42 0303 	adc.w	r3, r2, r3
 801cc7a:	657b      	str	r3, [r7, #84]	; 0x54
 801cc7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 801cc80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801cc84:	f7e3 ffb8 	bl	8000bf8 <__aeabi_uldivmod>
 801cc88:	4602      	mov	r2, r0
 801cc8a:	460b      	mov	r3, r1
 801cc8c:	4b61      	ldr	r3, [pc, #388]	; (801ce14 <UART_SetConfig+0x2d4>)
 801cc8e:	fba3 2302 	umull	r2, r3, r3, r2
 801cc92:	095b      	lsrs	r3, r3, #5
 801cc94:	011c      	lsls	r4, r3, #4
 801cc96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801cc9a:	2200      	movs	r2, #0
 801cc9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801cca0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 801cca4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 801cca8:	4642      	mov	r2, r8
 801ccaa:	464b      	mov	r3, r9
 801ccac:	1891      	adds	r1, r2, r2
 801ccae:	64b9      	str	r1, [r7, #72]	; 0x48
 801ccb0:	415b      	adcs	r3, r3
 801ccb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 801ccb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801ccb8:	4641      	mov	r1, r8
 801ccba:	eb12 0a01 	adds.w	sl, r2, r1
 801ccbe:	4649      	mov	r1, r9
 801ccc0:	eb43 0b01 	adc.w	fp, r3, r1
 801ccc4:	f04f 0200 	mov.w	r2, #0
 801ccc8:	f04f 0300 	mov.w	r3, #0
 801cccc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801ccd0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 801ccd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801ccd8:	4692      	mov	sl, r2
 801ccda:	469b      	mov	fp, r3
 801ccdc:	4643      	mov	r3, r8
 801ccde:	eb1a 0303 	adds.w	r3, sl, r3
 801cce2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801cce6:	464b      	mov	r3, r9
 801cce8:	eb4b 0303 	adc.w	r3, fp, r3
 801ccec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801ccf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801ccf4:	685b      	ldr	r3, [r3, #4]
 801ccf6:	2200      	movs	r2, #0
 801ccf8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801ccfc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 801cd00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 801cd04:	460b      	mov	r3, r1
 801cd06:	18db      	adds	r3, r3, r3
 801cd08:	643b      	str	r3, [r7, #64]	; 0x40
 801cd0a:	4613      	mov	r3, r2
 801cd0c:	eb42 0303 	adc.w	r3, r2, r3
 801cd10:	647b      	str	r3, [r7, #68]	; 0x44
 801cd12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801cd16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 801cd1a:	f7e3 ff6d 	bl	8000bf8 <__aeabi_uldivmod>
 801cd1e:	4602      	mov	r2, r0
 801cd20:	460b      	mov	r3, r1
 801cd22:	4611      	mov	r1, r2
 801cd24:	4b3b      	ldr	r3, [pc, #236]	; (801ce14 <UART_SetConfig+0x2d4>)
 801cd26:	fba3 2301 	umull	r2, r3, r3, r1
 801cd2a:	095b      	lsrs	r3, r3, #5
 801cd2c:	2264      	movs	r2, #100	; 0x64
 801cd2e:	fb02 f303 	mul.w	r3, r2, r3
 801cd32:	1acb      	subs	r3, r1, r3
 801cd34:	00db      	lsls	r3, r3, #3
 801cd36:	f103 0232 	add.w	r2, r3, #50	; 0x32
 801cd3a:	4b36      	ldr	r3, [pc, #216]	; (801ce14 <UART_SetConfig+0x2d4>)
 801cd3c:	fba3 2302 	umull	r2, r3, r3, r2
 801cd40:	095b      	lsrs	r3, r3, #5
 801cd42:	005b      	lsls	r3, r3, #1
 801cd44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801cd48:	441c      	add	r4, r3
 801cd4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801cd4e:	2200      	movs	r2, #0
 801cd50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801cd54:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 801cd58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 801cd5c:	4642      	mov	r2, r8
 801cd5e:	464b      	mov	r3, r9
 801cd60:	1891      	adds	r1, r2, r2
 801cd62:	63b9      	str	r1, [r7, #56]	; 0x38
 801cd64:	415b      	adcs	r3, r3
 801cd66:	63fb      	str	r3, [r7, #60]	; 0x3c
 801cd68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801cd6c:	4641      	mov	r1, r8
 801cd6e:	1851      	adds	r1, r2, r1
 801cd70:	6339      	str	r1, [r7, #48]	; 0x30
 801cd72:	4649      	mov	r1, r9
 801cd74:	414b      	adcs	r3, r1
 801cd76:	637b      	str	r3, [r7, #52]	; 0x34
 801cd78:	f04f 0200 	mov.w	r2, #0
 801cd7c:	f04f 0300 	mov.w	r3, #0
 801cd80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 801cd84:	4659      	mov	r1, fp
 801cd86:	00cb      	lsls	r3, r1, #3
 801cd88:	4651      	mov	r1, sl
 801cd8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801cd8e:	4651      	mov	r1, sl
 801cd90:	00ca      	lsls	r2, r1, #3
 801cd92:	4610      	mov	r0, r2
 801cd94:	4619      	mov	r1, r3
 801cd96:	4603      	mov	r3, r0
 801cd98:	4642      	mov	r2, r8
 801cd9a:	189b      	adds	r3, r3, r2
 801cd9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801cda0:	464b      	mov	r3, r9
 801cda2:	460a      	mov	r2, r1
 801cda4:	eb42 0303 	adc.w	r3, r2, r3
 801cda8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801cdac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cdb0:	685b      	ldr	r3, [r3, #4]
 801cdb2:	2200      	movs	r2, #0
 801cdb4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801cdb8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 801cdbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 801cdc0:	460b      	mov	r3, r1
 801cdc2:	18db      	adds	r3, r3, r3
 801cdc4:	62bb      	str	r3, [r7, #40]	; 0x28
 801cdc6:	4613      	mov	r3, r2
 801cdc8:	eb42 0303 	adc.w	r3, r2, r3
 801cdcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 801cdce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801cdd2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 801cdd6:	f7e3 ff0f 	bl	8000bf8 <__aeabi_uldivmod>
 801cdda:	4602      	mov	r2, r0
 801cddc:	460b      	mov	r3, r1
 801cdde:	4b0d      	ldr	r3, [pc, #52]	; (801ce14 <UART_SetConfig+0x2d4>)
 801cde0:	fba3 1302 	umull	r1, r3, r3, r2
 801cde4:	095b      	lsrs	r3, r3, #5
 801cde6:	2164      	movs	r1, #100	; 0x64
 801cde8:	fb01 f303 	mul.w	r3, r1, r3
 801cdec:	1ad3      	subs	r3, r2, r3
 801cdee:	00db      	lsls	r3, r3, #3
 801cdf0:	3332      	adds	r3, #50	; 0x32
 801cdf2:	4a08      	ldr	r2, [pc, #32]	; (801ce14 <UART_SetConfig+0x2d4>)
 801cdf4:	fba2 2303 	umull	r2, r3, r2, r3
 801cdf8:	095b      	lsrs	r3, r3, #5
 801cdfa:	f003 0207 	and.w	r2, r3, #7
 801cdfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801ce02:	681b      	ldr	r3, [r3, #0]
 801ce04:	4422      	add	r2, r4
 801ce06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 801ce08:	e105      	b.n	801d016 <UART_SetConfig+0x4d6>
 801ce0a:	bf00      	nop
 801ce0c:	40011000 	.word	0x40011000
 801ce10:	40011400 	.word	0x40011400
 801ce14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801ce18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801ce1c:	2200      	movs	r2, #0
 801ce1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801ce22:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801ce26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 801ce2a:	4642      	mov	r2, r8
 801ce2c:	464b      	mov	r3, r9
 801ce2e:	1891      	adds	r1, r2, r2
 801ce30:	6239      	str	r1, [r7, #32]
 801ce32:	415b      	adcs	r3, r3
 801ce34:	627b      	str	r3, [r7, #36]	; 0x24
 801ce36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801ce3a:	4641      	mov	r1, r8
 801ce3c:	1854      	adds	r4, r2, r1
 801ce3e:	4649      	mov	r1, r9
 801ce40:	eb43 0501 	adc.w	r5, r3, r1
 801ce44:	f04f 0200 	mov.w	r2, #0
 801ce48:	f04f 0300 	mov.w	r3, #0
 801ce4c:	00eb      	lsls	r3, r5, #3
 801ce4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801ce52:	00e2      	lsls	r2, r4, #3
 801ce54:	4614      	mov	r4, r2
 801ce56:	461d      	mov	r5, r3
 801ce58:	4643      	mov	r3, r8
 801ce5a:	18e3      	adds	r3, r4, r3
 801ce5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801ce60:	464b      	mov	r3, r9
 801ce62:	eb45 0303 	adc.w	r3, r5, r3
 801ce66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801ce6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801ce6e:	685b      	ldr	r3, [r3, #4]
 801ce70:	2200      	movs	r2, #0
 801ce72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801ce76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801ce7a:	f04f 0200 	mov.w	r2, #0
 801ce7e:	f04f 0300 	mov.w	r3, #0
 801ce82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801ce86:	4629      	mov	r1, r5
 801ce88:	008b      	lsls	r3, r1, #2
 801ce8a:	4621      	mov	r1, r4
 801ce8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801ce90:	4621      	mov	r1, r4
 801ce92:	008a      	lsls	r2, r1, #2
 801ce94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 801ce98:	f7e3 feae 	bl	8000bf8 <__aeabi_uldivmod>
 801ce9c:	4602      	mov	r2, r0
 801ce9e:	460b      	mov	r3, r1
 801cea0:	4b60      	ldr	r3, [pc, #384]	; (801d024 <UART_SetConfig+0x4e4>)
 801cea2:	fba3 2302 	umull	r2, r3, r3, r2
 801cea6:	095b      	lsrs	r3, r3, #5
 801cea8:	011c      	lsls	r4, r3, #4
 801ceaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801ceae:	2200      	movs	r2, #0
 801ceb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801ceb4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801ceb8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 801cebc:	4642      	mov	r2, r8
 801cebe:	464b      	mov	r3, r9
 801cec0:	1891      	adds	r1, r2, r2
 801cec2:	61b9      	str	r1, [r7, #24]
 801cec4:	415b      	adcs	r3, r3
 801cec6:	61fb      	str	r3, [r7, #28]
 801cec8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801cecc:	4641      	mov	r1, r8
 801cece:	1851      	adds	r1, r2, r1
 801ced0:	6139      	str	r1, [r7, #16]
 801ced2:	4649      	mov	r1, r9
 801ced4:	414b      	adcs	r3, r1
 801ced6:	617b      	str	r3, [r7, #20]
 801ced8:	f04f 0200 	mov.w	r2, #0
 801cedc:	f04f 0300 	mov.w	r3, #0
 801cee0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801cee4:	4659      	mov	r1, fp
 801cee6:	00cb      	lsls	r3, r1, #3
 801cee8:	4651      	mov	r1, sl
 801ceea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801ceee:	4651      	mov	r1, sl
 801cef0:	00ca      	lsls	r2, r1, #3
 801cef2:	4610      	mov	r0, r2
 801cef4:	4619      	mov	r1, r3
 801cef6:	4603      	mov	r3, r0
 801cef8:	4642      	mov	r2, r8
 801cefa:	189b      	adds	r3, r3, r2
 801cefc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801cf00:	464b      	mov	r3, r9
 801cf02:	460a      	mov	r2, r1
 801cf04:	eb42 0303 	adc.w	r3, r2, r3
 801cf08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801cf0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cf10:	685b      	ldr	r3, [r3, #4]
 801cf12:	2200      	movs	r2, #0
 801cf14:	67bb      	str	r3, [r7, #120]	; 0x78
 801cf16:	67fa      	str	r2, [r7, #124]	; 0x7c
 801cf18:	f04f 0200 	mov.w	r2, #0
 801cf1c:	f04f 0300 	mov.w	r3, #0
 801cf20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 801cf24:	4649      	mov	r1, r9
 801cf26:	008b      	lsls	r3, r1, #2
 801cf28:	4641      	mov	r1, r8
 801cf2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801cf2e:	4641      	mov	r1, r8
 801cf30:	008a      	lsls	r2, r1, #2
 801cf32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 801cf36:	f7e3 fe5f 	bl	8000bf8 <__aeabi_uldivmod>
 801cf3a:	4602      	mov	r2, r0
 801cf3c:	460b      	mov	r3, r1
 801cf3e:	4b39      	ldr	r3, [pc, #228]	; (801d024 <UART_SetConfig+0x4e4>)
 801cf40:	fba3 1302 	umull	r1, r3, r3, r2
 801cf44:	095b      	lsrs	r3, r3, #5
 801cf46:	2164      	movs	r1, #100	; 0x64
 801cf48:	fb01 f303 	mul.w	r3, r1, r3
 801cf4c:	1ad3      	subs	r3, r2, r3
 801cf4e:	011b      	lsls	r3, r3, #4
 801cf50:	3332      	adds	r3, #50	; 0x32
 801cf52:	4a34      	ldr	r2, [pc, #208]	; (801d024 <UART_SetConfig+0x4e4>)
 801cf54:	fba2 2303 	umull	r2, r3, r2, r3
 801cf58:	095b      	lsrs	r3, r3, #5
 801cf5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801cf5e:	441c      	add	r4, r3
 801cf60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801cf64:	2200      	movs	r2, #0
 801cf66:	673b      	str	r3, [r7, #112]	; 0x70
 801cf68:	677a      	str	r2, [r7, #116]	; 0x74
 801cf6a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 801cf6e:	4642      	mov	r2, r8
 801cf70:	464b      	mov	r3, r9
 801cf72:	1891      	adds	r1, r2, r2
 801cf74:	60b9      	str	r1, [r7, #8]
 801cf76:	415b      	adcs	r3, r3
 801cf78:	60fb      	str	r3, [r7, #12]
 801cf7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801cf7e:	4641      	mov	r1, r8
 801cf80:	1851      	adds	r1, r2, r1
 801cf82:	6039      	str	r1, [r7, #0]
 801cf84:	4649      	mov	r1, r9
 801cf86:	414b      	adcs	r3, r1
 801cf88:	607b      	str	r3, [r7, #4]
 801cf8a:	f04f 0200 	mov.w	r2, #0
 801cf8e:	f04f 0300 	mov.w	r3, #0
 801cf92:	e9d7 ab00 	ldrd	sl, fp, [r7]
 801cf96:	4659      	mov	r1, fp
 801cf98:	00cb      	lsls	r3, r1, #3
 801cf9a:	4651      	mov	r1, sl
 801cf9c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801cfa0:	4651      	mov	r1, sl
 801cfa2:	00ca      	lsls	r2, r1, #3
 801cfa4:	4610      	mov	r0, r2
 801cfa6:	4619      	mov	r1, r3
 801cfa8:	4603      	mov	r3, r0
 801cfaa:	4642      	mov	r2, r8
 801cfac:	189b      	adds	r3, r3, r2
 801cfae:	66bb      	str	r3, [r7, #104]	; 0x68
 801cfb0:	464b      	mov	r3, r9
 801cfb2:	460a      	mov	r2, r1
 801cfb4:	eb42 0303 	adc.w	r3, r2, r3
 801cfb8:	66fb      	str	r3, [r7, #108]	; 0x6c
 801cfba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cfbe:	685b      	ldr	r3, [r3, #4]
 801cfc0:	2200      	movs	r2, #0
 801cfc2:	663b      	str	r3, [r7, #96]	; 0x60
 801cfc4:	667a      	str	r2, [r7, #100]	; 0x64
 801cfc6:	f04f 0200 	mov.w	r2, #0
 801cfca:	f04f 0300 	mov.w	r3, #0
 801cfce:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 801cfd2:	4649      	mov	r1, r9
 801cfd4:	008b      	lsls	r3, r1, #2
 801cfd6:	4641      	mov	r1, r8
 801cfd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801cfdc:	4641      	mov	r1, r8
 801cfde:	008a      	lsls	r2, r1, #2
 801cfe0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 801cfe4:	f7e3 fe08 	bl	8000bf8 <__aeabi_uldivmod>
 801cfe8:	4602      	mov	r2, r0
 801cfea:	460b      	mov	r3, r1
 801cfec:	4b0d      	ldr	r3, [pc, #52]	; (801d024 <UART_SetConfig+0x4e4>)
 801cfee:	fba3 1302 	umull	r1, r3, r3, r2
 801cff2:	095b      	lsrs	r3, r3, #5
 801cff4:	2164      	movs	r1, #100	; 0x64
 801cff6:	fb01 f303 	mul.w	r3, r1, r3
 801cffa:	1ad3      	subs	r3, r2, r3
 801cffc:	011b      	lsls	r3, r3, #4
 801cffe:	3332      	adds	r3, #50	; 0x32
 801d000:	4a08      	ldr	r2, [pc, #32]	; (801d024 <UART_SetConfig+0x4e4>)
 801d002:	fba2 2303 	umull	r2, r3, r2, r3
 801d006:	095b      	lsrs	r3, r3, #5
 801d008:	f003 020f 	and.w	r2, r3, #15
 801d00c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801d010:	681b      	ldr	r3, [r3, #0]
 801d012:	4422      	add	r2, r4
 801d014:	609a      	str	r2, [r3, #8]
}
 801d016:	bf00      	nop
 801d018:	f507 7780 	add.w	r7, r7, #256	; 0x100
 801d01c:	46bd      	mov	sp, r7
 801d01e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801d022:	bf00      	nop
 801d024:	51eb851f 	.word	0x51eb851f

0801d028 <pow>:
 801d028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d02a:	ed2d 8b02 	vpush	{d8}
 801d02e:	eeb0 8a40 	vmov.f32	s16, s0
 801d032:	eef0 8a60 	vmov.f32	s17, s1
 801d036:	ec55 4b11 	vmov	r4, r5, d1
 801d03a:	f000 f885 	bl	801d148 <__ieee754_pow>
 801d03e:	4622      	mov	r2, r4
 801d040:	462b      	mov	r3, r5
 801d042:	4620      	mov	r0, r4
 801d044:	4629      	mov	r1, r5
 801d046:	ec57 6b10 	vmov	r6, r7, d0
 801d04a:	f7e3 fd6f 	bl	8000b2c <__aeabi_dcmpun>
 801d04e:	2800      	cmp	r0, #0
 801d050:	d13b      	bne.n	801d0ca <pow+0xa2>
 801d052:	ec51 0b18 	vmov	r0, r1, d8
 801d056:	2200      	movs	r2, #0
 801d058:	2300      	movs	r3, #0
 801d05a:	f7e3 fd35 	bl	8000ac8 <__aeabi_dcmpeq>
 801d05e:	b1b8      	cbz	r0, 801d090 <pow+0x68>
 801d060:	2200      	movs	r2, #0
 801d062:	2300      	movs	r3, #0
 801d064:	4620      	mov	r0, r4
 801d066:	4629      	mov	r1, r5
 801d068:	f7e3 fd2e 	bl	8000ac8 <__aeabi_dcmpeq>
 801d06c:	2800      	cmp	r0, #0
 801d06e:	d146      	bne.n	801d0fe <pow+0xd6>
 801d070:	ec45 4b10 	vmov	d0, r4, r5
 801d074:	f000 fe84 	bl	801dd80 <finite>
 801d078:	b338      	cbz	r0, 801d0ca <pow+0xa2>
 801d07a:	2200      	movs	r2, #0
 801d07c:	2300      	movs	r3, #0
 801d07e:	4620      	mov	r0, r4
 801d080:	4629      	mov	r1, r5
 801d082:	f7e3 fd2b 	bl	8000adc <__aeabi_dcmplt>
 801d086:	b300      	cbz	r0, 801d0ca <pow+0xa2>
 801d088:	f000 ff2a 	bl	801dee0 <__errno>
 801d08c:	2322      	movs	r3, #34	; 0x22
 801d08e:	e01b      	b.n	801d0c8 <pow+0xa0>
 801d090:	ec47 6b10 	vmov	d0, r6, r7
 801d094:	f000 fe74 	bl	801dd80 <finite>
 801d098:	b9e0      	cbnz	r0, 801d0d4 <pow+0xac>
 801d09a:	eeb0 0a48 	vmov.f32	s0, s16
 801d09e:	eef0 0a68 	vmov.f32	s1, s17
 801d0a2:	f000 fe6d 	bl	801dd80 <finite>
 801d0a6:	b1a8      	cbz	r0, 801d0d4 <pow+0xac>
 801d0a8:	ec45 4b10 	vmov	d0, r4, r5
 801d0ac:	f000 fe68 	bl	801dd80 <finite>
 801d0b0:	b180      	cbz	r0, 801d0d4 <pow+0xac>
 801d0b2:	4632      	mov	r2, r6
 801d0b4:	463b      	mov	r3, r7
 801d0b6:	4630      	mov	r0, r6
 801d0b8:	4639      	mov	r1, r7
 801d0ba:	f7e3 fd37 	bl	8000b2c <__aeabi_dcmpun>
 801d0be:	2800      	cmp	r0, #0
 801d0c0:	d0e2      	beq.n	801d088 <pow+0x60>
 801d0c2:	f000 ff0d 	bl	801dee0 <__errno>
 801d0c6:	2321      	movs	r3, #33	; 0x21
 801d0c8:	6003      	str	r3, [r0, #0]
 801d0ca:	ecbd 8b02 	vpop	{d8}
 801d0ce:	ec47 6b10 	vmov	d0, r6, r7
 801d0d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d0d4:	2200      	movs	r2, #0
 801d0d6:	2300      	movs	r3, #0
 801d0d8:	4630      	mov	r0, r6
 801d0da:	4639      	mov	r1, r7
 801d0dc:	f7e3 fcf4 	bl	8000ac8 <__aeabi_dcmpeq>
 801d0e0:	2800      	cmp	r0, #0
 801d0e2:	d0f2      	beq.n	801d0ca <pow+0xa2>
 801d0e4:	eeb0 0a48 	vmov.f32	s0, s16
 801d0e8:	eef0 0a68 	vmov.f32	s1, s17
 801d0ec:	f000 fe48 	bl	801dd80 <finite>
 801d0f0:	2800      	cmp	r0, #0
 801d0f2:	d0ea      	beq.n	801d0ca <pow+0xa2>
 801d0f4:	ec45 4b10 	vmov	d0, r4, r5
 801d0f8:	f000 fe42 	bl	801dd80 <finite>
 801d0fc:	e7c3      	b.n	801d086 <pow+0x5e>
 801d0fe:	4f01      	ldr	r7, [pc, #4]	; (801d104 <pow+0xdc>)
 801d100:	2600      	movs	r6, #0
 801d102:	e7e2      	b.n	801d0ca <pow+0xa2>
 801d104:	3ff00000 	.word	0x3ff00000

0801d108 <sqrtf>:
 801d108:	b508      	push	{r3, lr}
 801d10a:	ed2d 8b02 	vpush	{d8}
 801d10e:	eeb0 8a40 	vmov.f32	s16, s0
 801d112:	f000 fdf9 	bl	801dd08 <__ieee754_sqrtf>
 801d116:	eeb4 8a48 	vcmp.f32	s16, s16
 801d11a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d11e:	d60c      	bvs.n	801d13a <sqrtf+0x32>
 801d120:	eddf 8a07 	vldr	s17, [pc, #28]	; 801d140 <sqrtf+0x38>
 801d124:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801d128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d12c:	d505      	bpl.n	801d13a <sqrtf+0x32>
 801d12e:	f000 fed7 	bl	801dee0 <__errno>
 801d132:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801d136:	2321      	movs	r3, #33	; 0x21
 801d138:	6003      	str	r3, [r0, #0]
 801d13a:	ecbd 8b02 	vpop	{d8}
 801d13e:	bd08      	pop	{r3, pc}
	...

0801d148 <__ieee754_pow>:
 801d148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d14c:	ed2d 8b06 	vpush	{d8-d10}
 801d150:	b089      	sub	sp, #36	; 0x24
 801d152:	ed8d 1b00 	vstr	d1, [sp]
 801d156:	e9dd 2900 	ldrd	r2, r9, [sp]
 801d15a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801d15e:	ea58 0102 	orrs.w	r1, r8, r2
 801d162:	ec57 6b10 	vmov	r6, r7, d0
 801d166:	d115      	bne.n	801d194 <__ieee754_pow+0x4c>
 801d168:	19b3      	adds	r3, r6, r6
 801d16a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801d16e:	4152      	adcs	r2, r2
 801d170:	4299      	cmp	r1, r3
 801d172:	4b89      	ldr	r3, [pc, #548]	; (801d398 <__ieee754_pow+0x250>)
 801d174:	4193      	sbcs	r3, r2
 801d176:	f080 84d2 	bcs.w	801db1e <__ieee754_pow+0x9d6>
 801d17a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d17e:	4630      	mov	r0, r6
 801d180:	4639      	mov	r1, r7
 801d182:	f7e3 f883 	bl	800028c <__adddf3>
 801d186:	ec41 0b10 	vmov	d0, r0, r1
 801d18a:	b009      	add	sp, #36	; 0x24
 801d18c:	ecbd 8b06 	vpop	{d8-d10}
 801d190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d194:	4b81      	ldr	r3, [pc, #516]	; (801d39c <__ieee754_pow+0x254>)
 801d196:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801d19a:	429c      	cmp	r4, r3
 801d19c:	ee10 aa10 	vmov	sl, s0
 801d1a0:	463d      	mov	r5, r7
 801d1a2:	dc06      	bgt.n	801d1b2 <__ieee754_pow+0x6a>
 801d1a4:	d101      	bne.n	801d1aa <__ieee754_pow+0x62>
 801d1a6:	2e00      	cmp	r6, #0
 801d1a8:	d1e7      	bne.n	801d17a <__ieee754_pow+0x32>
 801d1aa:	4598      	cmp	r8, r3
 801d1ac:	dc01      	bgt.n	801d1b2 <__ieee754_pow+0x6a>
 801d1ae:	d10f      	bne.n	801d1d0 <__ieee754_pow+0x88>
 801d1b0:	b172      	cbz	r2, 801d1d0 <__ieee754_pow+0x88>
 801d1b2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801d1b6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801d1ba:	ea55 050a 	orrs.w	r5, r5, sl
 801d1be:	d1dc      	bne.n	801d17a <__ieee754_pow+0x32>
 801d1c0:	e9dd 3200 	ldrd	r3, r2, [sp]
 801d1c4:	18db      	adds	r3, r3, r3
 801d1c6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801d1ca:	4152      	adcs	r2, r2
 801d1cc:	429d      	cmp	r5, r3
 801d1ce:	e7d0      	b.n	801d172 <__ieee754_pow+0x2a>
 801d1d0:	2d00      	cmp	r5, #0
 801d1d2:	da3b      	bge.n	801d24c <__ieee754_pow+0x104>
 801d1d4:	4b72      	ldr	r3, [pc, #456]	; (801d3a0 <__ieee754_pow+0x258>)
 801d1d6:	4598      	cmp	r8, r3
 801d1d8:	dc51      	bgt.n	801d27e <__ieee754_pow+0x136>
 801d1da:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801d1de:	4598      	cmp	r8, r3
 801d1e0:	f340 84ac 	ble.w	801db3c <__ieee754_pow+0x9f4>
 801d1e4:	ea4f 5328 	mov.w	r3, r8, asr #20
 801d1e8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801d1ec:	2b14      	cmp	r3, #20
 801d1ee:	dd0f      	ble.n	801d210 <__ieee754_pow+0xc8>
 801d1f0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801d1f4:	fa22 f103 	lsr.w	r1, r2, r3
 801d1f8:	fa01 f303 	lsl.w	r3, r1, r3
 801d1fc:	4293      	cmp	r3, r2
 801d1fe:	f040 849d 	bne.w	801db3c <__ieee754_pow+0x9f4>
 801d202:	f001 0101 	and.w	r1, r1, #1
 801d206:	f1c1 0302 	rsb	r3, r1, #2
 801d20a:	9304      	str	r3, [sp, #16]
 801d20c:	b182      	cbz	r2, 801d230 <__ieee754_pow+0xe8>
 801d20e:	e05f      	b.n	801d2d0 <__ieee754_pow+0x188>
 801d210:	2a00      	cmp	r2, #0
 801d212:	d15b      	bne.n	801d2cc <__ieee754_pow+0x184>
 801d214:	f1c3 0314 	rsb	r3, r3, #20
 801d218:	fa48 f103 	asr.w	r1, r8, r3
 801d21c:	fa01 f303 	lsl.w	r3, r1, r3
 801d220:	4543      	cmp	r3, r8
 801d222:	f040 8488 	bne.w	801db36 <__ieee754_pow+0x9ee>
 801d226:	f001 0101 	and.w	r1, r1, #1
 801d22a:	f1c1 0302 	rsb	r3, r1, #2
 801d22e:	9304      	str	r3, [sp, #16]
 801d230:	4b5c      	ldr	r3, [pc, #368]	; (801d3a4 <__ieee754_pow+0x25c>)
 801d232:	4598      	cmp	r8, r3
 801d234:	d132      	bne.n	801d29c <__ieee754_pow+0x154>
 801d236:	f1b9 0f00 	cmp.w	r9, #0
 801d23a:	f280 8478 	bge.w	801db2e <__ieee754_pow+0x9e6>
 801d23e:	4959      	ldr	r1, [pc, #356]	; (801d3a4 <__ieee754_pow+0x25c>)
 801d240:	4632      	mov	r2, r6
 801d242:	463b      	mov	r3, r7
 801d244:	2000      	movs	r0, #0
 801d246:	f7e3 fb01 	bl	800084c <__aeabi_ddiv>
 801d24a:	e79c      	b.n	801d186 <__ieee754_pow+0x3e>
 801d24c:	2300      	movs	r3, #0
 801d24e:	9304      	str	r3, [sp, #16]
 801d250:	2a00      	cmp	r2, #0
 801d252:	d13d      	bne.n	801d2d0 <__ieee754_pow+0x188>
 801d254:	4b51      	ldr	r3, [pc, #324]	; (801d39c <__ieee754_pow+0x254>)
 801d256:	4598      	cmp	r8, r3
 801d258:	d1ea      	bne.n	801d230 <__ieee754_pow+0xe8>
 801d25a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801d25e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801d262:	ea53 030a 	orrs.w	r3, r3, sl
 801d266:	f000 845a 	beq.w	801db1e <__ieee754_pow+0x9d6>
 801d26a:	4b4f      	ldr	r3, [pc, #316]	; (801d3a8 <__ieee754_pow+0x260>)
 801d26c:	429c      	cmp	r4, r3
 801d26e:	dd08      	ble.n	801d282 <__ieee754_pow+0x13a>
 801d270:	f1b9 0f00 	cmp.w	r9, #0
 801d274:	f2c0 8457 	blt.w	801db26 <__ieee754_pow+0x9de>
 801d278:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d27c:	e783      	b.n	801d186 <__ieee754_pow+0x3e>
 801d27e:	2302      	movs	r3, #2
 801d280:	e7e5      	b.n	801d24e <__ieee754_pow+0x106>
 801d282:	f1b9 0f00 	cmp.w	r9, #0
 801d286:	f04f 0000 	mov.w	r0, #0
 801d28a:	f04f 0100 	mov.w	r1, #0
 801d28e:	f6bf af7a 	bge.w	801d186 <__ieee754_pow+0x3e>
 801d292:	e9dd 0300 	ldrd	r0, r3, [sp]
 801d296:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801d29a:	e774      	b.n	801d186 <__ieee754_pow+0x3e>
 801d29c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801d2a0:	d106      	bne.n	801d2b0 <__ieee754_pow+0x168>
 801d2a2:	4632      	mov	r2, r6
 801d2a4:	463b      	mov	r3, r7
 801d2a6:	4630      	mov	r0, r6
 801d2a8:	4639      	mov	r1, r7
 801d2aa:	f7e3 f9a5 	bl	80005f8 <__aeabi_dmul>
 801d2ae:	e76a      	b.n	801d186 <__ieee754_pow+0x3e>
 801d2b0:	4b3e      	ldr	r3, [pc, #248]	; (801d3ac <__ieee754_pow+0x264>)
 801d2b2:	4599      	cmp	r9, r3
 801d2b4:	d10c      	bne.n	801d2d0 <__ieee754_pow+0x188>
 801d2b6:	2d00      	cmp	r5, #0
 801d2b8:	db0a      	blt.n	801d2d0 <__ieee754_pow+0x188>
 801d2ba:	ec47 6b10 	vmov	d0, r6, r7
 801d2be:	b009      	add	sp, #36	; 0x24
 801d2c0:	ecbd 8b06 	vpop	{d8-d10}
 801d2c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2c8:	f000 bc6c 	b.w	801dba4 <__ieee754_sqrt>
 801d2cc:	2300      	movs	r3, #0
 801d2ce:	9304      	str	r3, [sp, #16]
 801d2d0:	ec47 6b10 	vmov	d0, r6, r7
 801d2d4:	f000 fd4b 	bl	801dd6e <fabs>
 801d2d8:	ec51 0b10 	vmov	r0, r1, d0
 801d2dc:	f1ba 0f00 	cmp.w	sl, #0
 801d2e0:	d129      	bne.n	801d336 <__ieee754_pow+0x1ee>
 801d2e2:	b124      	cbz	r4, 801d2ee <__ieee754_pow+0x1a6>
 801d2e4:	4b2f      	ldr	r3, [pc, #188]	; (801d3a4 <__ieee754_pow+0x25c>)
 801d2e6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801d2ea:	429a      	cmp	r2, r3
 801d2ec:	d123      	bne.n	801d336 <__ieee754_pow+0x1ee>
 801d2ee:	f1b9 0f00 	cmp.w	r9, #0
 801d2f2:	da05      	bge.n	801d300 <__ieee754_pow+0x1b8>
 801d2f4:	4602      	mov	r2, r0
 801d2f6:	460b      	mov	r3, r1
 801d2f8:	2000      	movs	r0, #0
 801d2fa:	492a      	ldr	r1, [pc, #168]	; (801d3a4 <__ieee754_pow+0x25c>)
 801d2fc:	f7e3 faa6 	bl	800084c <__aeabi_ddiv>
 801d300:	2d00      	cmp	r5, #0
 801d302:	f6bf af40 	bge.w	801d186 <__ieee754_pow+0x3e>
 801d306:	9b04      	ldr	r3, [sp, #16]
 801d308:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801d30c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801d310:	4323      	orrs	r3, r4
 801d312:	d108      	bne.n	801d326 <__ieee754_pow+0x1de>
 801d314:	4602      	mov	r2, r0
 801d316:	460b      	mov	r3, r1
 801d318:	4610      	mov	r0, r2
 801d31a:	4619      	mov	r1, r3
 801d31c:	f7e2 ffb4 	bl	8000288 <__aeabi_dsub>
 801d320:	4602      	mov	r2, r0
 801d322:	460b      	mov	r3, r1
 801d324:	e78f      	b.n	801d246 <__ieee754_pow+0xfe>
 801d326:	9b04      	ldr	r3, [sp, #16]
 801d328:	2b01      	cmp	r3, #1
 801d32a:	f47f af2c 	bne.w	801d186 <__ieee754_pow+0x3e>
 801d32e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d332:	4619      	mov	r1, r3
 801d334:	e727      	b.n	801d186 <__ieee754_pow+0x3e>
 801d336:	0feb      	lsrs	r3, r5, #31
 801d338:	3b01      	subs	r3, #1
 801d33a:	9306      	str	r3, [sp, #24]
 801d33c:	9a06      	ldr	r2, [sp, #24]
 801d33e:	9b04      	ldr	r3, [sp, #16]
 801d340:	4313      	orrs	r3, r2
 801d342:	d102      	bne.n	801d34a <__ieee754_pow+0x202>
 801d344:	4632      	mov	r2, r6
 801d346:	463b      	mov	r3, r7
 801d348:	e7e6      	b.n	801d318 <__ieee754_pow+0x1d0>
 801d34a:	4b19      	ldr	r3, [pc, #100]	; (801d3b0 <__ieee754_pow+0x268>)
 801d34c:	4598      	cmp	r8, r3
 801d34e:	f340 80fb 	ble.w	801d548 <__ieee754_pow+0x400>
 801d352:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801d356:	4598      	cmp	r8, r3
 801d358:	4b13      	ldr	r3, [pc, #76]	; (801d3a8 <__ieee754_pow+0x260>)
 801d35a:	dd0c      	ble.n	801d376 <__ieee754_pow+0x22e>
 801d35c:	429c      	cmp	r4, r3
 801d35e:	dc0f      	bgt.n	801d380 <__ieee754_pow+0x238>
 801d360:	f1b9 0f00 	cmp.w	r9, #0
 801d364:	da0f      	bge.n	801d386 <__ieee754_pow+0x23e>
 801d366:	2000      	movs	r0, #0
 801d368:	b009      	add	sp, #36	; 0x24
 801d36a:	ecbd 8b06 	vpop	{d8-d10}
 801d36e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d372:	f000 bcf3 	b.w	801dd5c <__math_oflow>
 801d376:	429c      	cmp	r4, r3
 801d378:	dbf2      	blt.n	801d360 <__ieee754_pow+0x218>
 801d37a:	4b0a      	ldr	r3, [pc, #40]	; (801d3a4 <__ieee754_pow+0x25c>)
 801d37c:	429c      	cmp	r4, r3
 801d37e:	dd19      	ble.n	801d3b4 <__ieee754_pow+0x26c>
 801d380:	f1b9 0f00 	cmp.w	r9, #0
 801d384:	dcef      	bgt.n	801d366 <__ieee754_pow+0x21e>
 801d386:	2000      	movs	r0, #0
 801d388:	b009      	add	sp, #36	; 0x24
 801d38a:	ecbd 8b06 	vpop	{d8-d10}
 801d38e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d392:	f000 bcda 	b.w	801dd4a <__math_uflow>
 801d396:	bf00      	nop
 801d398:	fff00000 	.word	0xfff00000
 801d39c:	7ff00000 	.word	0x7ff00000
 801d3a0:	433fffff 	.word	0x433fffff
 801d3a4:	3ff00000 	.word	0x3ff00000
 801d3a8:	3fefffff 	.word	0x3fefffff
 801d3ac:	3fe00000 	.word	0x3fe00000
 801d3b0:	41e00000 	.word	0x41e00000
 801d3b4:	4b60      	ldr	r3, [pc, #384]	; (801d538 <__ieee754_pow+0x3f0>)
 801d3b6:	2200      	movs	r2, #0
 801d3b8:	f7e2 ff66 	bl	8000288 <__aeabi_dsub>
 801d3bc:	a354      	add	r3, pc, #336	; (adr r3, 801d510 <__ieee754_pow+0x3c8>)
 801d3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3c2:	4604      	mov	r4, r0
 801d3c4:	460d      	mov	r5, r1
 801d3c6:	f7e3 f917 	bl	80005f8 <__aeabi_dmul>
 801d3ca:	a353      	add	r3, pc, #332	; (adr r3, 801d518 <__ieee754_pow+0x3d0>)
 801d3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3d0:	4606      	mov	r6, r0
 801d3d2:	460f      	mov	r7, r1
 801d3d4:	4620      	mov	r0, r4
 801d3d6:	4629      	mov	r1, r5
 801d3d8:	f7e3 f90e 	bl	80005f8 <__aeabi_dmul>
 801d3dc:	4b57      	ldr	r3, [pc, #348]	; (801d53c <__ieee754_pow+0x3f4>)
 801d3de:	4682      	mov	sl, r0
 801d3e0:	468b      	mov	fp, r1
 801d3e2:	2200      	movs	r2, #0
 801d3e4:	4620      	mov	r0, r4
 801d3e6:	4629      	mov	r1, r5
 801d3e8:	f7e3 f906 	bl	80005f8 <__aeabi_dmul>
 801d3ec:	4602      	mov	r2, r0
 801d3ee:	460b      	mov	r3, r1
 801d3f0:	a14b      	add	r1, pc, #300	; (adr r1, 801d520 <__ieee754_pow+0x3d8>)
 801d3f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d3f6:	f7e2 ff47 	bl	8000288 <__aeabi_dsub>
 801d3fa:	4622      	mov	r2, r4
 801d3fc:	462b      	mov	r3, r5
 801d3fe:	f7e3 f8fb 	bl	80005f8 <__aeabi_dmul>
 801d402:	4602      	mov	r2, r0
 801d404:	460b      	mov	r3, r1
 801d406:	2000      	movs	r0, #0
 801d408:	494d      	ldr	r1, [pc, #308]	; (801d540 <__ieee754_pow+0x3f8>)
 801d40a:	f7e2 ff3d 	bl	8000288 <__aeabi_dsub>
 801d40e:	4622      	mov	r2, r4
 801d410:	4680      	mov	r8, r0
 801d412:	4689      	mov	r9, r1
 801d414:	462b      	mov	r3, r5
 801d416:	4620      	mov	r0, r4
 801d418:	4629      	mov	r1, r5
 801d41a:	f7e3 f8ed 	bl	80005f8 <__aeabi_dmul>
 801d41e:	4602      	mov	r2, r0
 801d420:	460b      	mov	r3, r1
 801d422:	4640      	mov	r0, r8
 801d424:	4649      	mov	r1, r9
 801d426:	f7e3 f8e7 	bl	80005f8 <__aeabi_dmul>
 801d42a:	a33f      	add	r3, pc, #252	; (adr r3, 801d528 <__ieee754_pow+0x3e0>)
 801d42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d430:	f7e3 f8e2 	bl	80005f8 <__aeabi_dmul>
 801d434:	4602      	mov	r2, r0
 801d436:	460b      	mov	r3, r1
 801d438:	4650      	mov	r0, sl
 801d43a:	4659      	mov	r1, fp
 801d43c:	f7e2 ff24 	bl	8000288 <__aeabi_dsub>
 801d440:	4602      	mov	r2, r0
 801d442:	460b      	mov	r3, r1
 801d444:	4680      	mov	r8, r0
 801d446:	4689      	mov	r9, r1
 801d448:	4630      	mov	r0, r6
 801d44a:	4639      	mov	r1, r7
 801d44c:	f7e2 ff1e 	bl	800028c <__adddf3>
 801d450:	2000      	movs	r0, #0
 801d452:	4632      	mov	r2, r6
 801d454:	463b      	mov	r3, r7
 801d456:	4604      	mov	r4, r0
 801d458:	460d      	mov	r5, r1
 801d45a:	f7e2 ff15 	bl	8000288 <__aeabi_dsub>
 801d45e:	4602      	mov	r2, r0
 801d460:	460b      	mov	r3, r1
 801d462:	4640      	mov	r0, r8
 801d464:	4649      	mov	r1, r9
 801d466:	f7e2 ff0f 	bl	8000288 <__aeabi_dsub>
 801d46a:	9b04      	ldr	r3, [sp, #16]
 801d46c:	9a06      	ldr	r2, [sp, #24]
 801d46e:	3b01      	subs	r3, #1
 801d470:	4313      	orrs	r3, r2
 801d472:	4682      	mov	sl, r0
 801d474:	468b      	mov	fp, r1
 801d476:	f040 81e7 	bne.w	801d848 <__ieee754_pow+0x700>
 801d47a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 801d530 <__ieee754_pow+0x3e8>
 801d47e:	eeb0 8a47 	vmov.f32	s16, s14
 801d482:	eef0 8a67 	vmov.f32	s17, s15
 801d486:	e9dd 6700 	ldrd	r6, r7, [sp]
 801d48a:	2600      	movs	r6, #0
 801d48c:	4632      	mov	r2, r6
 801d48e:	463b      	mov	r3, r7
 801d490:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d494:	f7e2 fef8 	bl	8000288 <__aeabi_dsub>
 801d498:	4622      	mov	r2, r4
 801d49a:	462b      	mov	r3, r5
 801d49c:	f7e3 f8ac 	bl	80005f8 <__aeabi_dmul>
 801d4a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d4a4:	4680      	mov	r8, r0
 801d4a6:	4689      	mov	r9, r1
 801d4a8:	4650      	mov	r0, sl
 801d4aa:	4659      	mov	r1, fp
 801d4ac:	f7e3 f8a4 	bl	80005f8 <__aeabi_dmul>
 801d4b0:	4602      	mov	r2, r0
 801d4b2:	460b      	mov	r3, r1
 801d4b4:	4640      	mov	r0, r8
 801d4b6:	4649      	mov	r1, r9
 801d4b8:	f7e2 fee8 	bl	800028c <__adddf3>
 801d4bc:	4632      	mov	r2, r6
 801d4be:	463b      	mov	r3, r7
 801d4c0:	4680      	mov	r8, r0
 801d4c2:	4689      	mov	r9, r1
 801d4c4:	4620      	mov	r0, r4
 801d4c6:	4629      	mov	r1, r5
 801d4c8:	f7e3 f896 	bl	80005f8 <__aeabi_dmul>
 801d4cc:	460b      	mov	r3, r1
 801d4ce:	4604      	mov	r4, r0
 801d4d0:	460d      	mov	r5, r1
 801d4d2:	4602      	mov	r2, r0
 801d4d4:	4649      	mov	r1, r9
 801d4d6:	4640      	mov	r0, r8
 801d4d8:	f7e2 fed8 	bl	800028c <__adddf3>
 801d4dc:	4b19      	ldr	r3, [pc, #100]	; (801d544 <__ieee754_pow+0x3fc>)
 801d4de:	4299      	cmp	r1, r3
 801d4e0:	ec45 4b19 	vmov	d9, r4, r5
 801d4e4:	4606      	mov	r6, r0
 801d4e6:	460f      	mov	r7, r1
 801d4e8:	468b      	mov	fp, r1
 801d4ea:	f340 82f1 	ble.w	801dad0 <__ieee754_pow+0x988>
 801d4ee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801d4f2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801d4f6:	4303      	orrs	r3, r0
 801d4f8:	f000 81e4 	beq.w	801d8c4 <__ieee754_pow+0x77c>
 801d4fc:	ec51 0b18 	vmov	r0, r1, d8
 801d500:	2200      	movs	r2, #0
 801d502:	2300      	movs	r3, #0
 801d504:	f7e3 faea 	bl	8000adc <__aeabi_dcmplt>
 801d508:	3800      	subs	r0, #0
 801d50a:	bf18      	it	ne
 801d50c:	2001      	movne	r0, #1
 801d50e:	e72b      	b.n	801d368 <__ieee754_pow+0x220>
 801d510:	60000000 	.word	0x60000000
 801d514:	3ff71547 	.word	0x3ff71547
 801d518:	f85ddf44 	.word	0xf85ddf44
 801d51c:	3e54ae0b 	.word	0x3e54ae0b
 801d520:	55555555 	.word	0x55555555
 801d524:	3fd55555 	.word	0x3fd55555
 801d528:	652b82fe 	.word	0x652b82fe
 801d52c:	3ff71547 	.word	0x3ff71547
 801d530:	00000000 	.word	0x00000000
 801d534:	bff00000 	.word	0xbff00000
 801d538:	3ff00000 	.word	0x3ff00000
 801d53c:	3fd00000 	.word	0x3fd00000
 801d540:	3fe00000 	.word	0x3fe00000
 801d544:	408fffff 	.word	0x408fffff
 801d548:	4bd5      	ldr	r3, [pc, #852]	; (801d8a0 <__ieee754_pow+0x758>)
 801d54a:	402b      	ands	r3, r5
 801d54c:	2200      	movs	r2, #0
 801d54e:	b92b      	cbnz	r3, 801d55c <__ieee754_pow+0x414>
 801d550:	4bd4      	ldr	r3, [pc, #848]	; (801d8a4 <__ieee754_pow+0x75c>)
 801d552:	f7e3 f851 	bl	80005f8 <__aeabi_dmul>
 801d556:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801d55a:	460c      	mov	r4, r1
 801d55c:	1523      	asrs	r3, r4, #20
 801d55e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801d562:	4413      	add	r3, r2
 801d564:	9305      	str	r3, [sp, #20]
 801d566:	4bd0      	ldr	r3, [pc, #832]	; (801d8a8 <__ieee754_pow+0x760>)
 801d568:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801d56c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801d570:	429c      	cmp	r4, r3
 801d572:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801d576:	dd08      	ble.n	801d58a <__ieee754_pow+0x442>
 801d578:	4bcc      	ldr	r3, [pc, #816]	; (801d8ac <__ieee754_pow+0x764>)
 801d57a:	429c      	cmp	r4, r3
 801d57c:	f340 8162 	ble.w	801d844 <__ieee754_pow+0x6fc>
 801d580:	9b05      	ldr	r3, [sp, #20]
 801d582:	3301      	adds	r3, #1
 801d584:	9305      	str	r3, [sp, #20]
 801d586:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801d58a:	2400      	movs	r4, #0
 801d58c:	00e3      	lsls	r3, r4, #3
 801d58e:	9307      	str	r3, [sp, #28]
 801d590:	4bc7      	ldr	r3, [pc, #796]	; (801d8b0 <__ieee754_pow+0x768>)
 801d592:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801d596:	ed93 7b00 	vldr	d7, [r3]
 801d59a:	4629      	mov	r1, r5
 801d59c:	ec53 2b17 	vmov	r2, r3, d7
 801d5a0:	eeb0 9a47 	vmov.f32	s18, s14
 801d5a4:	eef0 9a67 	vmov.f32	s19, s15
 801d5a8:	4682      	mov	sl, r0
 801d5aa:	f7e2 fe6d 	bl	8000288 <__aeabi_dsub>
 801d5ae:	4652      	mov	r2, sl
 801d5b0:	4606      	mov	r6, r0
 801d5b2:	460f      	mov	r7, r1
 801d5b4:	462b      	mov	r3, r5
 801d5b6:	ec51 0b19 	vmov	r0, r1, d9
 801d5ba:	f7e2 fe67 	bl	800028c <__adddf3>
 801d5be:	4602      	mov	r2, r0
 801d5c0:	460b      	mov	r3, r1
 801d5c2:	2000      	movs	r0, #0
 801d5c4:	49bb      	ldr	r1, [pc, #748]	; (801d8b4 <__ieee754_pow+0x76c>)
 801d5c6:	f7e3 f941 	bl	800084c <__aeabi_ddiv>
 801d5ca:	ec41 0b1a 	vmov	d10, r0, r1
 801d5ce:	4602      	mov	r2, r0
 801d5d0:	460b      	mov	r3, r1
 801d5d2:	4630      	mov	r0, r6
 801d5d4:	4639      	mov	r1, r7
 801d5d6:	f7e3 f80f 	bl	80005f8 <__aeabi_dmul>
 801d5da:	2300      	movs	r3, #0
 801d5dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d5e0:	9302      	str	r3, [sp, #8]
 801d5e2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801d5e6:	46ab      	mov	fp, r5
 801d5e8:	106d      	asrs	r5, r5, #1
 801d5ea:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801d5ee:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801d5f2:	ec41 0b18 	vmov	d8, r0, r1
 801d5f6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801d5fa:	2200      	movs	r2, #0
 801d5fc:	4640      	mov	r0, r8
 801d5fe:	4649      	mov	r1, r9
 801d600:	4614      	mov	r4, r2
 801d602:	461d      	mov	r5, r3
 801d604:	f7e2 fff8 	bl	80005f8 <__aeabi_dmul>
 801d608:	4602      	mov	r2, r0
 801d60a:	460b      	mov	r3, r1
 801d60c:	4630      	mov	r0, r6
 801d60e:	4639      	mov	r1, r7
 801d610:	f7e2 fe3a 	bl	8000288 <__aeabi_dsub>
 801d614:	ec53 2b19 	vmov	r2, r3, d9
 801d618:	4606      	mov	r6, r0
 801d61a:	460f      	mov	r7, r1
 801d61c:	4620      	mov	r0, r4
 801d61e:	4629      	mov	r1, r5
 801d620:	f7e2 fe32 	bl	8000288 <__aeabi_dsub>
 801d624:	4602      	mov	r2, r0
 801d626:	460b      	mov	r3, r1
 801d628:	4650      	mov	r0, sl
 801d62a:	4659      	mov	r1, fp
 801d62c:	f7e2 fe2c 	bl	8000288 <__aeabi_dsub>
 801d630:	4642      	mov	r2, r8
 801d632:	464b      	mov	r3, r9
 801d634:	f7e2 ffe0 	bl	80005f8 <__aeabi_dmul>
 801d638:	4602      	mov	r2, r0
 801d63a:	460b      	mov	r3, r1
 801d63c:	4630      	mov	r0, r6
 801d63e:	4639      	mov	r1, r7
 801d640:	f7e2 fe22 	bl	8000288 <__aeabi_dsub>
 801d644:	ec53 2b1a 	vmov	r2, r3, d10
 801d648:	f7e2 ffd6 	bl	80005f8 <__aeabi_dmul>
 801d64c:	ec53 2b18 	vmov	r2, r3, d8
 801d650:	ec41 0b19 	vmov	d9, r0, r1
 801d654:	ec51 0b18 	vmov	r0, r1, d8
 801d658:	f7e2 ffce 	bl	80005f8 <__aeabi_dmul>
 801d65c:	a37c      	add	r3, pc, #496	; (adr r3, 801d850 <__ieee754_pow+0x708>)
 801d65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d662:	4604      	mov	r4, r0
 801d664:	460d      	mov	r5, r1
 801d666:	f7e2 ffc7 	bl	80005f8 <__aeabi_dmul>
 801d66a:	a37b      	add	r3, pc, #492	; (adr r3, 801d858 <__ieee754_pow+0x710>)
 801d66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d670:	f7e2 fe0c 	bl	800028c <__adddf3>
 801d674:	4622      	mov	r2, r4
 801d676:	462b      	mov	r3, r5
 801d678:	f7e2 ffbe 	bl	80005f8 <__aeabi_dmul>
 801d67c:	a378      	add	r3, pc, #480	; (adr r3, 801d860 <__ieee754_pow+0x718>)
 801d67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d682:	f7e2 fe03 	bl	800028c <__adddf3>
 801d686:	4622      	mov	r2, r4
 801d688:	462b      	mov	r3, r5
 801d68a:	f7e2 ffb5 	bl	80005f8 <__aeabi_dmul>
 801d68e:	a376      	add	r3, pc, #472	; (adr r3, 801d868 <__ieee754_pow+0x720>)
 801d690:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d694:	f7e2 fdfa 	bl	800028c <__adddf3>
 801d698:	4622      	mov	r2, r4
 801d69a:	462b      	mov	r3, r5
 801d69c:	f7e2 ffac 	bl	80005f8 <__aeabi_dmul>
 801d6a0:	a373      	add	r3, pc, #460	; (adr r3, 801d870 <__ieee754_pow+0x728>)
 801d6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6a6:	f7e2 fdf1 	bl	800028c <__adddf3>
 801d6aa:	4622      	mov	r2, r4
 801d6ac:	462b      	mov	r3, r5
 801d6ae:	f7e2 ffa3 	bl	80005f8 <__aeabi_dmul>
 801d6b2:	a371      	add	r3, pc, #452	; (adr r3, 801d878 <__ieee754_pow+0x730>)
 801d6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6b8:	f7e2 fde8 	bl	800028c <__adddf3>
 801d6bc:	4622      	mov	r2, r4
 801d6be:	4606      	mov	r6, r0
 801d6c0:	460f      	mov	r7, r1
 801d6c2:	462b      	mov	r3, r5
 801d6c4:	4620      	mov	r0, r4
 801d6c6:	4629      	mov	r1, r5
 801d6c8:	f7e2 ff96 	bl	80005f8 <__aeabi_dmul>
 801d6cc:	4602      	mov	r2, r0
 801d6ce:	460b      	mov	r3, r1
 801d6d0:	4630      	mov	r0, r6
 801d6d2:	4639      	mov	r1, r7
 801d6d4:	f7e2 ff90 	bl	80005f8 <__aeabi_dmul>
 801d6d8:	4642      	mov	r2, r8
 801d6da:	4604      	mov	r4, r0
 801d6dc:	460d      	mov	r5, r1
 801d6de:	464b      	mov	r3, r9
 801d6e0:	ec51 0b18 	vmov	r0, r1, d8
 801d6e4:	f7e2 fdd2 	bl	800028c <__adddf3>
 801d6e8:	ec53 2b19 	vmov	r2, r3, d9
 801d6ec:	f7e2 ff84 	bl	80005f8 <__aeabi_dmul>
 801d6f0:	4622      	mov	r2, r4
 801d6f2:	462b      	mov	r3, r5
 801d6f4:	f7e2 fdca 	bl	800028c <__adddf3>
 801d6f8:	4642      	mov	r2, r8
 801d6fa:	4682      	mov	sl, r0
 801d6fc:	468b      	mov	fp, r1
 801d6fe:	464b      	mov	r3, r9
 801d700:	4640      	mov	r0, r8
 801d702:	4649      	mov	r1, r9
 801d704:	f7e2 ff78 	bl	80005f8 <__aeabi_dmul>
 801d708:	4b6b      	ldr	r3, [pc, #428]	; (801d8b8 <__ieee754_pow+0x770>)
 801d70a:	2200      	movs	r2, #0
 801d70c:	4606      	mov	r6, r0
 801d70e:	460f      	mov	r7, r1
 801d710:	f7e2 fdbc 	bl	800028c <__adddf3>
 801d714:	4652      	mov	r2, sl
 801d716:	465b      	mov	r3, fp
 801d718:	f7e2 fdb8 	bl	800028c <__adddf3>
 801d71c:	2000      	movs	r0, #0
 801d71e:	4604      	mov	r4, r0
 801d720:	460d      	mov	r5, r1
 801d722:	4602      	mov	r2, r0
 801d724:	460b      	mov	r3, r1
 801d726:	4640      	mov	r0, r8
 801d728:	4649      	mov	r1, r9
 801d72a:	f7e2 ff65 	bl	80005f8 <__aeabi_dmul>
 801d72e:	4b62      	ldr	r3, [pc, #392]	; (801d8b8 <__ieee754_pow+0x770>)
 801d730:	4680      	mov	r8, r0
 801d732:	4689      	mov	r9, r1
 801d734:	2200      	movs	r2, #0
 801d736:	4620      	mov	r0, r4
 801d738:	4629      	mov	r1, r5
 801d73a:	f7e2 fda5 	bl	8000288 <__aeabi_dsub>
 801d73e:	4632      	mov	r2, r6
 801d740:	463b      	mov	r3, r7
 801d742:	f7e2 fda1 	bl	8000288 <__aeabi_dsub>
 801d746:	4602      	mov	r2, r0
 801d748:	460b      	mov	r3, r1
 801d74a:	4650      	mov	r0, sl
 801d74c:	4659      	mov	r1, fp
 801d74e:	f7e2 fd9b 	bl	8000288 <__aeabi_dsub>
 801d752:	ec53 2b18 	vmov	r2, r3, d8
 801d756:	f7e2 ff4f 	bl	80005f8 <__aeabi_dmul>
 801d75a:	4622      	mov	r2, r4
 801d75c:	4606      	mov	r6, r0
 801d75e:	460f      	mov	r7, r1
 801d760:	462b      	mov	r3, r5
 801d762:	ec51 0b19 	vmov	r0, r1, d9
 801d766:	f7e2 ff47 	bl	80005f8 <__aeabi_dmul>
 801d76a:	4602      	mov	r2, r0
 801d76c:	460b      	mov	r3, r1
 801d76e:	4630      	mov	r0, r6
 801d770:	4639      	mov	r1, r7
 801d772:	f7e2 fd8b 	bl	800028c <__adddf3>
 801d776:	4606      	mov	r6, r0
 801d778:	460f      	mov	r7, r1
 801d77a:	4602      	mov	r2, r0
 801d77c:	460b      	mov	r3, r1
 801d77e:	4640      	mov	r0, r8
 801d780:	4649      	mov	r1, r9
 801d782:	f7e2 fd83 	bl	800028c <__adddf3>
 801d786:	a33e      	add	r3, pc, #248	; (adr r3, 801d880 <__ieee754_pow+0x738>)
 801d788:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d78c:	2000      	movs	r0, #0
 801d78e:	4604      	mov	r4, r0
 801d790:	460d      	mov	r5, r1
 801d792:	f7e2 ff31 	bl	80005f8 <__aeabi_dmul>
 801d796:	4642      	mov	r2, r8
 801d798:	ec41 0b18 	vmov	d8, r0, r1
 801d79c:	464b      	mov	r3, r9
 801d79e:	4620      	mov	r0, r4
 801d7a0:	4629      	mov	r1, r5
 801d7a2:	f7e2 fd71 	bl	8000288 <__aeabi_dsub>
 801d7a6:	4602      	mov	r2, r0
 801d7a8:	460b      	mov	r3, r1
 801d7aa:	4630      	mov	r0, r6
 801d7ac:	4639      	mov	r1, r7
 801d7ae:	f7e2 fd6b 	bl	8000288 <__aeabi_dsub>
 801d7b2:	a335      	add	r3, pc, #212	; (adr r3, 801d888 <__ieee754_pow+0x740>)
 801d7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7b8:	f7e2 ff1e 	bl	80005f8 <__aeabi_dmul>
 801d7bc:	a334      	add	r3, pc, #208	; (adr r3, 801d890 <__ieee754_pow+0x748>)
 801d7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7c2:	4606      	mov	r6, r0
 801d7c4:	460f      	mov	r7, r1
 801d7c6:	4620      	mov	r0, r4
 801d7c8:	4629      	mov	r1, r5
 801d7ca:	f7e2 ff15 	bl	80005f8 <__aeabi_dmul>
 801d7ce:	4602      	mov	r2, r0
 801d7d0:	460b      	mov	r3, r1
 801d7d2:	4630      	mov	r0, r6
 801d7d4:	4639      	mov	r1, r7
 801d7d6:	f7e2 fd59 	bl	800028c <__adddf3>
 801d7da:	9a07      	ldr	r2, [sp, #28]
 801d7dc:	4b37      	ldr	r3, [pc, #220]	; (801d8bc <__ieee754_pow+0x774>)
 801d7de:	4413      	add	r3, r2
 801d7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7e4:	f7e2 fd52 	bl	800028c <__adddf3>
 801d7e8:	4682      	mov	sl, r0
 801d7ea:	9805      	ldr	r0, [sp, #20]
 801d7ec:	468b      	mov	fp, r1
 801d7ee:	f7e2 fe99 	bl	8000524 <__aeabi_i2d>
 801d7f2:	9a07      	ldr	r2, [sp, #28]
 801d7f4:	4b32      	ldr	r3, [pc, #200]	; (801d8c0 <__ieee754_pow+0x778>)
 801d7f6:	4413      	add	r3, r2
 801d7f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d7fc:	4606      	mov	r6, r0
 801d7fe:	460f      	mov	r7, r1
 801d800:	4652      	mov	r2, sl
 801d802:	465b      	mov	r3, fp
 801d804:	ec51 0b18 	vmov	r0, r1, d8
 801d808:	f7e2 fd40 	bl	800028c <__adddf3>
 801d80c:	4642      	mov	r2, r8
 801d80e:	464b      	mov	r3, r9
 801d810:	f7e2 fd3c 	bl	800028c <__adddf3>
 801d814:	4632      	mov	r2, r6
 801d816:	463b      	mov	r3, r7
 801d818:	f7e2 fd38 	bl	800028c <__adddf3>
 801d81c:	2000      	movs	r0, #0
 801d81e:	4632      	mov	r2, r6
 801d820:	463b      	mov	r3, r7
 801d822:	4604      	mov	r4, r0
 801d824:	460d      	mov	r5, r1
 801d826:	f7e2 fd2f 	bl	8000288 <__aeabi_dsub>
 801d82a:	4642      	mov	r2, r8
 801d82c:	464b      	mov	r3, r9
 801d82e:	f7e2 fd2b 	bl	8000288 <__aeabi_dsub>
 801d832:	ec53 2b18 	vmov	r2, r3, d8
 801d836:	f7e2 fd27 	bl	8000288 <__aeabi_dsub>
 801d83a:	4602      	mov	r2, r0
 801d83c:	460b      	mov	r3, r1
 801d83e:	4650      	mov	r0, sl
 801d840:	4659      	mov	r1, fp
 801d842:	e610      	b.n	801d466 <__ieee754_pow+0x31e>
 801d844:	2401      	movs	r4, #1
 801d846:	e6a1      	b.n	801d58c <__ieee754_pow+0x444>
 801d848:	ed9f 7b13 	vldr	d7, [pc, #76]	; 801d898 <__ieee754_pow+0x750>
 801d84c:	e617      	b.n	801d47e <__ieee754_pow+0x336>
 801d84e:	bf00      	nop
 801d850:	4a454eef 	.word	0x4a454eef
 801d854:	3fca7e28 	.word	0x3fca7e28
 801d858:	93c9db65 	.word	0x93c9db65
 801d85c:	3fcd864a 	.word	0x3fcd864a
 801d860:	a91d4101 	.word	0xa91d4101
 801d864:	3fd17460 	.word	0x3fd17460
 801d868:	518f264d 	.word	0x518f264d
 801d86c:	3fd55555 	.word	0x3fd55555
 801d870:	db6fabff 	.word	0xdb6fabff
 801d874:	3fdb6db6 	.word	0x3fdb6db6
 801d878:	33333303 	.word	0x33333303
 801d87c:	3fe33333 	.word	0x3fe33333
 801d880:	e0000000 	.word	0xe0000000
 801d884:	3feec709 	.word	0x3feec709
 801d888:	dc3a03fd 	.word	0xdc3a03fd
 801d88c:	3feec709 	.word	0x3feec709
 801d890:	145b01f5 	.word	0x145b01f5
 801d894:	be3e2fe0 	.word	0xbe3e2fe0
 801d898:	00000000 	.word	0x00000000
 801d89c:	3ff00000 	.word	0x3ff00000
 801d8a0:	7ff00000 	.word	0x7ff00000
 801d8a4:	43400000 	.word	0x43400000
 801d8a8:	0003988e 	.word	0x0003988e
 801d8ac:	000bb679 	.word	0x000bb679
 801d8b0:	08029f20 	.word	0x08029f20
 801d8b4:	3ff00000 	.word	0x3ff00000
 801d8b8:	40080000 	.word	0x40080000
 801d8bc:	08029f40 	.word	0x08029f40
 801d8c0:	08029f30 	.word	0x08029f30
 801d8c4:	a3b5      	add	r3, pc, #724	; (adr r3, 801db9c <__ieee754_pow+0xa54>)
 801d8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d8ca:	4640      	mov	r0, r8
 801d8cc:	4649      	mov	r1, r9
 801d8ce:	f7e2 fcdd 	bl	800028c <__adddf3>
 801d8d2:	4622      	mov	r2, r4
 801d8d4:	ec41 0b1a 	vmov	d10, r0, r1
 801d8d8:	462b      	mov	r3, r5
 801d8da:	4630      	mov	r0, r6
 801d8dc:	4639      	mov	r1, r7
 801d8de:	f7e2 fcd3 	bl	8000288 <__aeabi_dsub>
 801d8e2:	4602      	mov	r2, r0
 801d8e4:	460b      	mov	r3, r1
 801d8e6:	ec51 0b1a 	vmov	r0, r1, d10
 801d8ea:	f7e3 f915 	bl	8000b18 <__aeabi_dcmpgt>
 801d8ee:	2800      	cmp	r0, #0
 801d8f0:	f47f ae04 	bne.w	801d4fc <__ieee754_pow+0x3b4>
 801d8f4:	4aa4      	ldr	r2, [pc, #656]	; (801db88 <__ieee754_pow+0xa40>)
 801d8f6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801d8fa:	4293      	cmp	r3, r2
 801d8fc:	f340 8108 	ble.w	801db10 <__ieee754_pow+0x9c8>
 801d900:	151b      	asrs	r3, r3, #20
 801d902:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801d906:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801d90a:	fa4a f303 	asr.w	r3, sl, r3
 801d90e:	445b      	add	r3, fp
 801d910:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801d914:	4e9d      	ldr	r6, [pc, #628]	; (801db8c <__ieee754_pow+0xa44>)
 801d916:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801d91a:	4116      	asrs	r6, r2
 801d91c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801d920:	2000      	movs	r0, #0
 801d922:	ea23 0106 	bic.w	r1, r3, r6
 801d926:	f1c2 0214 	rsb	r2, r2, #20
 801d92a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801d92e:	fa4a fa02 	asr.w	sl, sl, r2
 801d932:	f1bb 0f00 	cmp.w	fp, #0
 801d936:	4602      	mov	r2, r0
 801d938:	460b      	mov	r3, r1
 801d93a:	4620      	mov	r0, r4
 801d93c:	4629      	mov	r1, r5
 801d93e:	bfb8      	it	lt
 801d940:	f1ca 0a00 	rsblt	sl, sl, #0
 801d944:	f7e2 fca0 	bl	8000288 <__aeabi_dsub>
 801d948:	ec41 0b19 	vmov	d9, r0, r1
 801d94c:	4642      	mov	r2, r8
 801d94e:	464b      	mov	r3, r9
 801d950:	ec51 0b19 	vmov	r0, r1, d9
 801d954:	f7e2 fc9a 	bl	800028c <__adddf3>
 801d958:	a37b      	add	r3, pc, #492	; (adr r3, 801db48 <__ieee754_pow+0xa00>)
 801d95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d95e:	2000      	movs	r0, #0
 801d960:	4604      	mov	r4, r0
 801d962:	460d      	mov	r5, r1
 801d964:	f7e2 fe48 	bl	80005f8 <__aeabi_dmul>
 801d968:	ec53 2b19 	vmov	r2, r3, d9
 801d96c:	4606      	mov	r6, r0
 801d96e:	460f      	mov	r7, r1
 801d970:	4620      	mov	r0, r4
 801d972:	4629      	mov	r1, r5
 801d974:	f7e2 fc88 	bl	8000288 <__aeabi_dsub>
 801d978:	4602      	mov	r2, r0
 801d97a:	460b      	mov	r3, r1
 801d97c:	4640      	mov	r0, r8
 801d97e:	4649      	mov	r1, r9
 801d980:	f7e2 fc82 	bl	8000288 <__aeabi_dsub>
 801d984:	a372      	add	r3, pc, #456	; (adr r3, 801db50 <__ieee754_pow+0xa08>)
 801d986:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d98a:	f7e2 fe35 	bl	80005f8 <__aeabi_dmul>
 801d98e:	a372      	add	r3, pc, #456	; (adr r3, 801db58 <__ieee754_pow+0xa10>)
 801d990:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d994:	4680      	mov	r8, r0
 801d996:	4689      	mov	r9, r1
 801d998:	4620      	mov	r0, r4
 801d99a:	4629      	mov	r1, r5
 801d99c:	f7e2 fe2c 	bl	80005f8 <__aeabi_dmul>
 801d9a0:	4602      	mov	r2, r0
 801d9a2:	460b      	mov	r3, r1
 801d9a4:	4640      	mov	r0, r8
 801d9a6:	4649      	mov	r1, r9
 801d9a8:	f7e2 fc70 	bl	800028c <__adddf3>
 801d9ac:	4604      	mov	r4, r0
 801d9ae:	460d      	mov	r5, r1
 801d9b0:	4602      	mov	r2, r0
 801d9b2:	460b      	mov	r3, r1
 801d9b4:	4630      	mov	r0, r6
 801d9b6:	4639      	mov	r1, r7
 801d9b8:	f7e2 fc68 	bl	800028c <__adddf3>
 801d9bc:	4632      	mov	r2, r6
 801d9be:	463b      	mov	r3, r7
 801d9c0:	4680      	mov	r8, r0
 801d9c2:	4689      	mov	r9, r1
 801d9c4:	f7e2 fc60 	bl	8000288 <__aeabi_dsub>
 801d9c8:	4602      	mov	r2, r0
 801d9ca:	460b      	mov	r3, r1
 801d9cc:	4620      	mov	r0, r4
 801d9ce:	4629      	mov	r1, r5
 801d9d0:	f7e2 fc5a 	bl	8000288 <__aeabi_dsub>
 801d9d4:	4642      	mov	r2, r8
 801d9d6:	4606      	mov	r6, r0
 801d9d8:	460f      	mov	r7, r1
 801d9da:	464b      	mov	r3, r9
 801d9dc:	4640      	mov	r0, r8
 801d9de:	4649      	mov	r1, r9
 801d9e0:	f7e2 fe0a 	bl	80005f8 <__aeabi_dmul>
 801d9e4:	a35e      	add	r3, pc, #376	; (adr r3, 801db60 <__ieee754_pow+0xa18>)
 801d9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9ea:	4604      	mov	r4, r0
 801d9ec:	460d      	mov	r5, r1
 801d9ee:	f7e2 fe03 	bl	80005f8 <__aeabi_dmul>
 801d9f2:	a35d      	add	r3, pc, #372	; (adr r3, 801db68 <__ieee754_pow+0xa20>)
 801d9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9f8:	f7e2 fc46 	bl	8000288 <__aeabi_dsub>
 801d9fc:	4622      	mov	r2, r4
 801d9fe:	462b      	mov	r3, r5
 801da00:	f7e2 fdfa 	bl	80005f8 <__aeabi_dmul>
 801da04:	a35a      	add	r3, pc, #360	; (adr r3, 801db70 <__ieee754_pow+0xa28>)
 801da06:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da0a:	f7e2 fc3f 	bl	800028c <__adddf3>
 801da0e:	4622      	mov	r2, r4
 801da10:	462b      	mov	r3, r5
 801da12:	f7e2 fdf1 	bl	80005f8 <__aeabi_dmul>
 801da16:	a358      	add	r3, pc, #352	; (adr r3, 801db78 <__ieee754_pow+0xa30>)
 801da18:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da1c:	f7e2 fc34 	bl	8000288 <__aeabi_dsub>
 801da20:	4622      	mov	r2, r4
 801da22:	462b      	mov	r3, r5
 801da24:	f7e2 fde8 	bl	80005f8 <__aeabi_dmul>
 801da28:	a355      	add	r3, pc, #340	; (adr r3, 801db80 <__ieee754_pow+0xa38>)
 801da2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da2e:	f7e2 fc2d 	bl	800028c <__adddf3>
 801da32:	4622      	mov	r2, r4
 801da34:	462b      	mov	r3, r5
 801da36:	f7e2 fddf 	bl	80005f8 <__aeabi_dmul>
 801da3a:	4602      	mov	r2, r0
 801da3c:	460b      	mov	r3, r1
 801da3e:	4640      	mov	r0, r8
 801da40:	4649      	mov	r1, r9
 801da42:	f7e2 fc21 	bl	8000288 <__aeabi_dsub>
 801da46:	4604      	mov	r4, r0
 801da48:	460d      	mov	r5, r1
 801da4a:	4602      	mov	r2, r0
 801da4c:	460b      	mov	r3, r1
 801da4e:	4640      	mov	r0, r8
 801da50:	4649      	mov	r1, r9
 801da52:	f7e2 fdd1 	bl	80005f8 <__aeabi_dmul>
 801da56:	2200      	movs	r2, #0
 801da58:	ec41 0b19 	vmov	d9, r0, r1
 801da5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801da60:	4620      	mov	r0, r4
 801da62:	4629      	mov	r1, r5
 801da64:	f7e2 fc10 	bl	8000288 <__aeabi_dsub>
 801da68:	4602      	mov	r2, r0
 801da6a:	460b      	mov	r3, r1
 801da6c:	ec51 0b19 	vmov	r0, r1, d9
 801da70:	f7e2 feec 	bl	800084c <__aeabi_ddiv>
 801da74:	4632      	mov	r2, r6
 801da76:	4604      	mov	r4, r0
 801da78:	460d      	mov	r5, r1
 801da7a:	463b      	mov	r3, r7
 801da7c:	4640      	mov	r0, r8
 801da7e:	4649      	mov	r1, r9
 801da80:	f7e2 fdba 	bl	80005f8 <__aeabi_dmul>
 801da84:	4632      	mov	r2, r6
 801da86:	463b      	mov	r3, r7
 801da88:	f7e2 fc00 	bl	800028c <__adddf3>
 801da8c:	4602      	mov	r2, r0
 801da8e:	460b      	mov	r3, r1
 801da90:	4620      	mov	r0, r4
 801da92:	4629      	mov	r1, r5
 801da94:	f7e2 fbf8 	bl	8000288 <__aeabi_dsub>
 801da98:	4642      	mov	r2, r8
 801da9a:	464b      	mov	r3, r9
 801da9c:	f7e2 fbf4 	bl	8000288 <__aeabi_dsub>
 801daa0:	460b      	mov	r3, r1
 801daa2:	4602      	mov	r2, r0
 801daa4:	493a      	ldr	r1, [pc, #232]	; (801db90 <__ieee754_pow+0xa48>)
 801daa6:	2000      	movs	r0, #0
 801daa8:	f7e2 fbee 	bl	8000288 <__aeabi_dsub>
 801daac:	ec41 0b10 	vmov	d0, r0, r1
 801dab0:	ee10 3a90 	vmov	r3, s1
 801dab4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801dab8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801dabc:	da2b      	bge.n	801db16 <__ieee754_pow+0x9ce>
 801dabe:	4650      	mov	r0, sl
 801dac0:	f000 f96a 	bl	801dd98 <scalbn>
 801dac4:	ec51 0b10 	vmov	r0, r1, d0
 801dac8:	ec53 2b18 	vmov	r2, r3, d8
 801dacc:	f7ff bbed 	b.w	801d2aa <__ieee754_pow+0x162>
 801dad0:	4b30      	ldr	r3, [pc, #192]	; (801db94 <__ieee754_pow+0xa4c>)
 801dad2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801dad6:	429e      	cmp	r6, r3
 801dad8:	f77f af0c 	ble.w	801d8f4 <__ieee754_pow+0x7ac>
 801dadc:	4b2e      	ldr	r3, [pc, #184]	; (801db98 <__ieee754_pow+0xa50>)
 801dade:	440b      	add	r3, r1
 801dae0:	4303      	orrs	r3, r0
 801dae2:	d009      	beq.n	801daf8 <__ieee754_pow+0x9b0>
 801dae4:	ec51 0b18 	vmov	r0, r1, d8
 801dae8:	2200      	movs	r2, #0
 801daea:	2300      	movs	r3, #0
 801daec:	f7e2 fff6 	bl	8000adc <__aeabi_dcmplt>
 801daf0:	3800      	subs	r0, #0
 801daf2:	bf18      	it	ne
 801daf4:	2001      	movne	r0, #1
 801daf6:	e447      	b.n	801d388 <__ieee754_pow+0x240>
 801daf8:	4622      	mov	r2, r4
 801dafa:	462b      	mov	r3, r5
 801dafc:	f7e2 fbc4 	bl	8000288 <__aeabi_dsub>
 801db00:	4642      	mov	r2, r8
 801db02:	464b      	mov	r3, r9
 801db04:	f7e2 fffe 	bl	8000b04 <__aeabi_dcmpge>
 801db08:	2800      	cmp	r0, #0
 801db0a:	f43f aef3 	beq.w	801d8f4 <__ieee754_pow+0x7ac>
 801db0e:	e7e9      	b.n	801dae4 <__ieee754_pow+0x99c>
 801db10:	f04f 0a00 	mov.w	sl, #0
 801db14:	e71a      	b.n	801d94c <__ieee754_pow+0x804>
 801db16:	ec51 0b10 	vmov	r0, r1, d0
 801db1a:	4619      	mov	r1, r3
 801db1c:	e7d4      	b.n	801dac8 <__ieee754_pow+0x980>
 801db1e:	491c      	ldr	r1, [pc, #112]	; (801db90 <__ieee754_pow+0xa48>)
 801db20:	2000      	movs	r0, #0
 801db22:	f7ff bb30 	b.w	801d186 <__ieee754_pow+0x3e>
 801db26:	2000      	movs	r0, #0
 801db28:	2100      	movs	r1, #0
 801db2a:	f7ff bb2c 	b.w	801d186 <__ieee754_pow+0x3e>
 801db2e:	4630      	mov	r0, r6
 801db30:	4639      	mov	r1, r7
 801db32:	f7ff bb28 	b.w	801d186 <__ieee754_pow+0x3e>
 801db36:	9204      	str	r2, [sp, #16]
 801db38:	f7ff bb7a 	b.w	801d230 <__ieee754_pow+0xe8>
 801db3c:	2300      	movs	r3, #0
 801db3e:	f7ff bb64 	b.w	801d20a <__ieee754_pow+0xc2>
 801db42:	bf00      	nop
 801db44:	f3af 8000 	nop.w
 801db48:	00000000 	.word	0x00000000
 801db4c:	3fe62e43 	.word	0x3fe62e43
 801db50:	fefa39ef 	.word	0xfefa39ef
 801db54:	3fe62e42 	.word	0x3fe62e42
 801db58:	0ca86c39 	.word	0x0ca86c39
 801db5c:	be205c61 	.word	0xbe205c61
 801db60:	72bea4d0 	.word	0x72bea4d0
 801db64:	3e663769 	.word	0x3e663769
 801db68:	c5d26bf1 	.word	0xc5d26bf1
 801db6c:	3ebbbd41 	.word	0x3ebbbd41
 801db70:	af25de2c 	.word	0xaf25de2c
 801db74:	3f11566a 	.word	0x3f11566a
 801db78:	16bebd93 	.word	0x16bebd93
 801db7c:	3f66c16c 	.word	0x3f66c16c
 801db80:	5555553e 	.word	0x5555553e
 801db84:	3fc55555 	.word	0x3fc55555
 801db88:	3fe00000 	.word	0x3fe00000
 801db8c:	000fffff 	.word	0x000fffff
 801db90:	3ff00000 	.word	0x3ff00000
 801db94:	4090cbff 	.word	0x4090cbff
 801db98:	3f6f3400 	.word	0x3f6f3400
 801db9c:	652b82fe 	.word	0x652b82fe
 801dba0:	3c971547 	.word	0x3c971547

0801dba4 <__ieee754_sqrt>:
 801dba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dba8:	ec55 4b10 	vmov	r4, r5, d0
 801dbac:	4e55      	ldr	r6, [pc, #340]	; (801dd04 <__ieee754_sqrt+0x160>)
 801dbae:	43ae      	bics	r6, r5
 801dbb0:	ee10 0a10 	vmov	r0, s0
 801dbb4:	ee10 3a10 	vmov	r3, s0
 801dbb8:	462a      	mov	r2, r5
 801dbba:	4629      	mov	r1, r5
 801dbbc:	d110      	bne.n	801dbe0 <__ieee754_sqrt+0x3c>
 801dbbe:	ee10 2a10 	vmov	r2, s0
 801dbc2:	462b      	mov	r3, r5
 801dbc4:	f7e2 fd18 	bl	80005f8 <__aeabi_dmul>
 801dbc8:	4602      	mov	r2, r0
 801dbca:	460b      	mov	r3, r1
 801dbcc:	4620      	mov	r0, r4
 801dbce:	4629      	mov	r1, r5
 801dbd0:	f7e2 fb5c 	bl	800028c <__adddf3>
 801dbd4:	4604      	mov	r4, r0
 801dbd6:	460d      	mov	r5, r1
 801dbd8:	ec45 4b10 	vmov	d0, r4, r5
 801dbdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dbe0:	2d00      	cmp	r5, #0
 801dbe2:	dc10      	bgt.n	801dc06 <__ieee754_sqrt+0x62>
 801dbe4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801dbe8:	4330      	orrs	r0, r6
 801dbea:	d0f5      	beq.n	801dbd8 <__ieee754_sqrt+0x34>
 801dbec:	b15d      	cbz	r5, 801dc06 <__ieee754_sqrt+0x62>
 801dbee:	ee10 2a10 	vmov	r2, s0
 801dbf2:	462b      	mov	r3, r5
 801dbf4:	ee10 0a10 	vmov	r0, s0
 801dbf8:	f7e2 fb46 	bl	8000288 <__aeabi_dsub>
 801dbfc:	4602      	mov	r2, r0
 801dbfe:	460b      	mov	r3, r1
 801dc00:	f7e2 fe24 	bl	800084c <__aeabi_ddiv>
 801dc04:	e7e6      	b.n	801dbd4 <__ieee754_sqrt+0x30>
 801dc06:	1512      	asrs	r2, r2, #20
 801dc08:	d074      	beq.n	801dcf4 <__ieee754_sqrt+0x150>
 801dc0a:	07d4      	lsls	r4, r2, #31
 801dc0c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801dc10:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801dc14:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801dc18:	bf5e      	ittt	pl
 801dc1a:	0fda      	lsrpl	r2, r3, #31
 801dc1c:	005b      	lslpl	r3, r3, #1
 801dc1e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801dc22:	2400      	movs	r4, #0
 801dc24:	0fda      	lsrs	r2, r3, #31
 801dc26:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801dc2a:	107f      	asrs	r7, r7, #1
 801dc2c:	005b      	lsls	r3, r3, #1
 801dc2e:	2516      	movs	r5, #22
 801dc30:	4620      	mov	r0, r4
 801dc32:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801dc36:	1886      	adds	r6, r0, r2
 801dc38:	428e      	cmp	r6, r1
 801dc3a:	bfde      	ittt	le
 801dc3c:	1b89      	suble	r1, r1, r6
 801dc3e:	18b0      	addle	r0, r6, r2
 801dc40:	18a4      	addle	r4, r4, r2
 801dc42:	0049      	lsls	r1, r1, #1
 801dc44:	3d01      	subs	r5, #1
 801dc46:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801dc4a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801dc4e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801dc52:	d1f0      	bne.n	801dc36 <__ieee754_sqrt+0x92>
 801dc54:	462a      	mov	r2, r5
 801dc56:	f04f 0e20 	mov.w	lr, #32
 801dc5a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801dc5e:	4281      	cmp	r1, r0
 801dc60:	eb06 0c05 	add.w	ip, r6, r5
 801dc64:	dc02      	bgt.n	801dc6c <__ieee754_sqrt+0xc8>
 801dc66:	d113      	bne.n	801dc90 <__ieee754_sqrt+0xec>
 801dc68:	459c      	cmp	ip, r3
 801dc6a:	d811      	bhi.n	801dc90 <__ieee754_sqrt+0xec>
 801dc6c:	f1bc 0f00 	cmp.w	ip, #0
 801dc70:	eb0c 0506 	add.w	r5, ip, r6
 801dc74:	da43      	bge.n	801dcfe <__ieee754_sqrt+0x15a>
 801dc76:	2d00      	cmp	r5, #0
 801dc78:	db41      	blt.n	801dcfe <__ieee754_sqrt+0x15a>
 801dc7a:	f100 0801 	add.w	r8, r0, #1
 801dc7e:	1a09      	subs	r1, r1, r0
 801dc80:	459c      	cmp	ip, r3
 801dc82:	bf88      	it	hi
 801dc84:	f101 31ff 	addhi.w	r1, r1, #4294967295
 801dc88:	eba3 030c 	sub.w	r3, r3, ip
 801dc8c:	4432      	add	r2, r6
 801dc8e:	4640      	mov	r0, r8
 801dc90:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801dc94:	f1be 0e01 	subs.w	lr, lr, #1
 801dc98:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801dc9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801dca0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801dca4:	d1db      	bne.n	801dc5e <__ieee754_sqrt+0xba>
 801dca6:	430b      	orrs	r3, r1
 801dca8:	d006      	beq.n	801dcb8 <__ieee754_sqrt+0x114>
 801dcaa:	1c50      	adds	r0, r2, #1
 801dcac:	bf13      	iteet	ne
 801dcae:	3201      	addne	r2, #1
 801dcb0:	3401      	addeq	r4, #1
 801dcb2:	4672      	moveq	r2, lr
 801dcb4:	f022 0201 	bicne.w	r2, r2, #1
 801dcb8:	1063      	asrs	r3, r4, #1
 801dcba:	0852      	lsrs	r2, r2, #1
 801dcbc:	07e1      	lsls	r1, r4, #31
 801dcbe:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801dcc2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801dcc6:	bf48      	it	mi
 801dcc8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801dccc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 801dcd0:	4614      	mov	r4, r2
 801dcd2:	e781      	b.n	801dbd8 <__ieee754_sqrt+0x34>
 801dcd4:	0ad9      	lsrs	r1, r3, #11
 801dcd6:	3815      	subs	r0, #21
 801dcd8:	055b      	lsls	r3, r3, #21
 801dcda:	2900      	cmp	r1, #0
 801dcdc:	d0fa      	beq.n	801dcd4 <__ieee754_sqrt+0x130>
 801dcde:	02cd      	lsls	r5, r1, #11
 801dce0:	d50a      	bpl.n	801dcf8 <__ieee754_sqrt+0x154>
 801dce2:	f1c2 0420 	rsb	r4, r2, #32
 801dce6:	fa23 f404 	lsr.w	r4, r3, r4
 801dcea:	1e55      	subs	r5, r2, #1
 801dcec:	4093      	lsls	r3, r2
 801dcee:	4321      	orrs	r1, r4
 801dcf0:	1b42      	subs	r2, r0, r5
 801dcf2:	e78a      	b.n	801dc0a <__ieee754_sqrt+0x66>
 801dcf4:	4610      	mov	r0, r2
 801dcf6:	e7f0      	b.n	801dcda <__ieee754_sqrt+0x136>
 801dcf8:	0049      	lsls	r1, r1, #1
 801dcfa:	3201      	adds	r2, #1
 801dcfc:	e7ef      	b.n	801dcde <__ieee754_sqrt+0x13a>
 801dcfe:	4680      	mov	r8, r0
 801dd00:	e7bd      	b.n	801dc7e <__ieee754_sqrt+0xda>
 801dd02:	bf00      	nop
 801dd04:	7ff00000 	.word	0x7ff00000

0801dd08 <__ieee754_sqrtf>:
 801dd08:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801dd0c:	4770      	bx	lr

0801dd0e <with_errno>:
 801dd0e:	b570      	push	{r4, r5, r6, lr}
 801dd10:	4604      	mov	r4, r0
 801dd12:	460d      	mov	r5, r1
 801dd14:	4616      	mov	r6, r2
 801dd16:	f000 f8e3 	bl	801dee0 <__errno>
 801dd1a:	4629      	mov	r1, r5
 801dd1c:	6006      	str	r6, [r0, #0]
 801dd1e:	4620      	mov	r0, r4
 801dd20:	bd70      	pop	{r4, r5, r6, pc}

0801dd22 <xflow>:
 801dd22:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801dd24:	4614      	mov	r4, r2
 801dd26:	461d      	mov	r5, r3
 801dd28:	b108      	cbz	r0, 801dd2e <xflow+0xc>
 801dd2a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801dd2e:	e9cd 2300 	strd	r2, r3, [sp]
 801dd32:	e9dd 2300 	ldrd	r2, r3, [sp]
 801dd36:	4620      	mov	r0, r4
 801dd38:	4629      	mov	r1, r5
 801dd3a:	f7e2 fc5d 	bl	80005f8 <__aeabi_dmul>
 801dd3e:	2222      	movs	r2, #34	; 0x22
 801dd40:	b003      	add	sp, #12
 801dd42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801dd46:	f7ff bfe2 	b.w	801dd0e <with_errno>

0801dd4a <__math_uflow>:
 801dd4a:	b508      	push	{r3, lr}
 801dd4c:	2200      	movs	r2, #0
 801dd4e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801dd52:	f7ff ffe6 	bl	801dd22 <xflow>
 801dd56:	ec41 0b10 	vmov	d0, r0, r1
 801dd5a:	bd08      	pop	{r3, pc}

0801dd5c <__math_oflow>:
 801dd5c:	b508      	push	{r3, lr}
 801dd5e:	2200      	movs	r2, #0
 801dd60:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801dd64:	f7ff ffdd 	bl	801dd22 <xflow>
 801dd68:	ec41 0b10 	vmov	d0, r0, r1
 801dd6c:	bd08      	pop	{r3, pc}

0801dd6e <fabs>:
 801dd6e:	ec51 0b10 	vmov	r0, r1, d0
 801dd72:	ee10 2a10 	vmov	r2, s0
 801dd76:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801dd7a:	ec43 2b10 	vmov	d0, r2, r3
 801dd7e:	4770      	bx	lr

0801dd80 <finite>:
 801dd80:	b082      	sub	sp, #8
 801dd82:	ed8d 0b00 	vstr	d0, [sp]
 801dd86:	9801      	ldr	r0, [sp, #4]
 801dd88:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801dd8c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801dd90:	0fc0      	lsrs	r0, r0, #31
 801dd92:	b002      	add	sp, #8
 801dd94:	4770      	bx	lr
	...

0801dd98 <scalbn>:
 801dd98:	b570      	push	{r4, r5, r6, lr}
 801dd9a:	ec55 4b10 	vmov	r4, r5, d0
 801dd9e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801dda2:	4606      	mov	r6, r0
 801dda4:	462b      	mov	r3, r5
 801dda6:	b99a      	cbnz	r2, 801ddd0 <scalbn+0x38>
 801dda8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801ddac:	4323      	orrs	r3, r4
 801ddae:	d036      	beq.n	801de1e <scalbn+0x86>
 801ddb0:	4b39      	ldr	r3, [pc, #228]	; (801de98 <scalbn+0x100>)
 801ddb2:	4629      	mov	r1, r5
 801ddb4:	ee10 0a10 	vmov	r0, s0
 801ddb8:	2200      	movs	r2, #0
 801ddba:	f7e2 fc1d 	bl	80005f8 <__aeabi_dmul>
 801ddbe:	4b37      	ldr	r3, [pc, #220]	; (801de9c <scalbn+0x104>)
 801ddc0:	429e      	cmp	r6, r3
 801ddc2:	4604      	mov	r4, r0
 801ddc4:	460d      	mov	r5, r1
 801ddc6:	da10      	bge.n	801ddea <scalbn+0x52>
 801ddc8:	a32b      	add	r3, pc, #172	; (adr r3, 801de78 <scalbn+0xe0>)
 801ddca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ddce:	e03a      	b.n	801de46 <scalbn+0xae>
 801ddd0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801ddd4:	428a      	cmp	r2, r1
 801ddd6:	d10c      	bne.n	801ddf2 <scalbn+0x5a>
 801ddd8:	ee10 2a10 	vmov	r2, s0
 801dddc:	4620      	mov	r0, r4
 801ddde:	4629      	mov	r1, r5
 801dde0:	f7e2 fa54 	bl	800028c <__adddf3>
 801dde4:	4604      	mov	r4, r0
 801dde6:	460d      	mov	r5, r1
 801dde8:	e019      	b.n	801de1e <scalbn+0x86>
 801ddea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801ddee:	460b      	mov	r3, r1
 801ddf0:	3a36      	subs	r2, #54	; 0x36
 801ddf2:	4432      	add	r2, r6
 801ddf4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801ddf8:	428a      	cmp	r2, r1
 801ddfa:	dd08      	ble.n	801de0e <scalbn+0x76>
 801ddfc:	2d00      	cmp	r5, #0
 801ddfe:	a120      	add	r1, pc, #128	; (adr r1, 801de80 <scalbn+0xe8>)
 801de00:	e9d1 0100 	ldrd	r0, r1, [r1]
 801de04:	da1c      	bge.n	801de40 <scalbn+0xa8>
 801de06:	a120      	add	r1, pc, #128	; (adr r1, 801de88 <scalbn+0xf0>)
 801de08:	e9d1 0100 	ldrd	r0, r1, [r1]
 801de0c:	e018      	b.n	801de40 <scalbn+0xa8>
 801de0e:	2a00      	cmp	r2, #0
 801de10:	dd08      	ble.n	801de24 <scalbn+0x8c>
 801de12:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801de16:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801de1a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801de1e:	ec45 4b10 	vmov	d0, r4, r5
 801de22:	bd70      	pop	{r4, r5, r6, pc}
 801de24:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801de28:	da19      	bge.n	801de5e <scalbn+0xc6>
 801de2a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801de2e:	429e      	cmp	r6, r3
 801de30:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801de34:	dd0a      	ble.n	801de4c <scalbn+0xb4>
 801de36:	a112      	add	r1, pc, #72	; (adr r1, 801de80 <scalbn+0xe8>)
 801de38:	e9d1 0100 	ldrd	r0, r1, [r1]
 801de3c:	2b00      	cmp	r3, #0
 801de3e:	d1e2      	bne.n	801de06 <scalbn+0x6e>
 801de40:	a30f      	add	r3, pc, #60	; (adr r3, 801de80 <scalbn+0xe8>)
 801de42:	e9d3 2300 	ldrd	r2, r3, [r3]
 801de46:	f7e2 fbd7 	bl	80005f8 <__aeabi_dmul>
 801de4a:	e7cb      	b.n	801dde4 <scalbn+0x4c>
 801de4c:	a10a      	add	r1, pc, #40	; (adr r1, 801de78 <scalbn+0xe0>)
 801de4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801de52:	2b00      	cmp	r3, #0
 801de54:	d0b8      	beq.n	801ddc8 <scalbn+0x30>
 801de56:	a10e      	add	r1, pc, #56	; (adr r1, 801de90 <scalbn+0xf8>)
 801de58:	e9d1 0100 	ldrd	r0, r1, [r1]
 801de5c:	e7b4      	b.n	801ddc8 <scalbn+0x30>
 801de5e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801de62:	3236      	adds	r2, #54	; 0x36
 801de64:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801de68:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801de6c:	4620      	mov	r0, r4
 801de6e:	4b0c      	ldr	r3, [pc, #48]	; (801dea0 <scalbn+0x108>)
 801de70:	2200      	movs	r2, #0
 801de72:	e7e8      	b.n	801de46 <scalbn+0xae>
 801de74:	f3af 8000 	nop.w
 801de78:	c2f8f359 	.word	0xc2f8f359
 801de7c:	01a56e1f 	.word	0x01a56e1f
 801de80:	8800759c 	.word	0x8800759c
 801de84:	7e37e43c 	.word	0x7e37e43c
 801de88:	8800759c 	.word	0x8800759c
 801de8c:	fe37e43c 	.word	0xfe37e43c
 801de90:	c2f8f359 	.word	0xc2f8f359
 801de94:	81a56e1f 	.word	0x81a56e1f
 801de98:	43500000 	.word	0x43500000
 801de9c:	ffff3cb0 	.word	0xffff3cb0
 801dea0:	3c900000 	.word	0x3c900000

0801dea4 <__assert_func>:
 801dea4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801dea6:	4614      	mov	r4, r2
 801dea8:	461a      	mov	r2, r3
 801deaa:	4b09      	ldr	r3, [pc, #36]	; (801ded0 <__assert_func+0x2c>)
 801deac:	681b      	ldr	r3, [r3, #0]
 801deae:	4605      	mov	r5, r0
 801deb0:	68d8      	ldr	r0, [r3, #12]
 801deb2:	b14c      	cbz	r4, 801dec8 <__assert_func+0x24>
 801deb4:	4b07      	ldr	r3, [pc, #28]	; (801ded4 <__assert_func+0x30>)
 801deb6:	9100      	str	r1, [sp, #0]
 801deb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801debc:	4906      	ldr	r1, [pc, #24]	; (801ded8 <__assert_func+0x34>)
 801debe:	462b      	mov	r3, r5
 801dec0:	f000 f814 	bl	801deec <fiprintf>
 801dec4:	f000 fc0c 	bl	801e6e0 <abort>
 801dec8:	4b04      	ldr	r3, [pc, #16]	; (801dedc <__assert_func+0x38>)
 801deca:	461c      	mov	r4, r3
 801decc:	e7f3      	b.n	801deb6 <__assert_func+0x12>
 801dece:	bf00      	nop
 801ded0:	200001ec 	.word	0x200001ec
 801ded4:	08029f50 	.word	0x08029f50
 801ded8:	08029f5d 	.word	0x08029f5d
 801dedc:	08029f8b 	.word	0x08029f8b

0801dee0 <__errno>:
 801dee0:	4b01      	ldr	r3, [pc, #4]	; (801dee8 <__errno+0x8>)
 801dee2:	6818      	ldr	r0, [r3, #0]
 801dee4:	4770      	bx	lr
 801dee6:	bf00      	nop
 801dee8:	200001ec 	.word	0x200001ec

0801deec <fiprintf>:
 801deec:	b40e      	push	{r1, r2, r3}
 801deee:	b503      	push	{r0, r1, lr}
 801def0:	4601      	mov	r1, r0
 801def2:	ab03      	add	r3, sp, #12
 801def4:	4805      	ldr	r0, [pc, #20]	; (801df0c <fiprintf+0x20>)
 801def6:	f853 2b04 	ldr.w	r2, [r3], #4
 801defa:	6800      	ldr	r0, [r0, #0]
 801defc:	9301      	str	r3, [sp, #4]
 801defe:	f000 f86b 	bl	801dfd8 <_vfiprintf_r>
 801df02:	b002      	add	sp, #8
 801df04:	f85d eb04 	ldr.w	lr, [sp], #4
 801df08:	b003      	add	sp, #12
 801df0a:	4770      	bx	lr
 801df0c:	200001ec 	.word	0x200001ec

0801df10 <__libc_init_array>:
 801df10:	b570      	push	{r4, r5, r6, lr}
 801df12:	4d0d      	ldr	r5, [pc, #52]	; (801df48 <__libc_init_array+0x38>)
 801df14:	4c0d      	ldr	r4, [pc, #52]	; (801df4c <__libc_init_array+0x3c>)
 801df16:	1b64      	subs	r4, r4, r5
 801df18:	10a4      	asrs	r4, r4, #2
 801df1a:	2600      	movs	r6, #0
 801df1c:	42a6      	cmp	r6, r4
 801df1e:	d109      	bne.n	801df34 <__libc_init_array+0x24>
 801df20:	4d0b      	ldr	r5, [pc, #44]	; (801df50 <__libc_init_array+0x40>)
 801df22:	4c0c      	ldr	r4, [pc, #48]	; (801df54 <__libc_init_array+0x44>)
 801df24:	f000 fff0 	bl	801ef08 <_init>
 801df28:	1b64      	subs	r4, r4, r5
 801df2a:	10a4      	asrs	r4, r4, #2
 801df2c:	2600      	movs	r6, #0
 801df2e:	42a6      	cmp	r6, r4
 801df30:	d105      	bne.n	801df3e <__libc_init_array+0x2e>
 801df32:	bd70      	pop	{r4, r5, r6, pc}
 801df34:	f855 3b04 	ldr.w	r3, [r5], #4
 801df38:	4798      	blx	r3
 801df3a:	3601      	adds	r6, #1
 801df3c:	e7ee      	b.n	801df1c <__libc_init_array+0xc>
 801df3e:	f855 3b04 	ldr.w	r3, [r5], #4
 801df42:	4798      	blx	r3
 801df44:	3601      	adds	r6, #1
 801df46:	e7f2      	b.n	801df2e <__libc_init_array+0x1e>
 801df48:	0802a02c 	.word	0x0802a02c
 801df4c:	0802a02c 	.word	0x0802a02c
 801df50:	0802a02c 	.word	0x0802a02c
 801df54:	0802a034 	.word	0x0802a034

0801df58 <memcpy>:
 801df58:	440a      	add	r2, r1
 801df5a:	4291      	cmp	r1, r2
 801df5c:	f100 33ff 	add.w	r3, r0, #4294967295
 801df60:	d100      	bne.n	801df64 <memcpy+0xc>
 801df62:	4770      	bx	lr
 801df64:	b510      	push	{r4, lr}
 801df66:	f811 4b01 	ldrb.w	r4, [r1], #1
 801df6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801df6e:	4291      	cmp	r1, r2
 801df70:	d1f9      	bne.n	801df66 <memcpy+0xe>
 801df72:	bd10      	pop	{r4, pc}

0801df74 <memset>:
 801df74:	4402      	add	r2, r0
 801df76:	4603      	mov	r3, r0
 801df78:	4293      	cmp	r3, r2
 801df7a:	d100      	bne.n	801df7e <memset+0xa>
 801df7c:	4770      	bx	lr
 801df7e:	f803 1b01 	strb.w	r1, [r3], #1
 801df82:	e7f9      	b.n	801df78 <memset+0x4>

0801df84 <__sfputc_r>:
 801df84:	6893      	ldr	r3, [r2, #8]
 801df86:	3b01      	subs	r3, #1
 801df88:	2b00      	cmp	r3, #0
 801df8a:	b410      	push	{r4}
 801df8c:	6093      	str	r3, [r2, #8]
 801df8e:	da08      	bge.n	801dfa2 <__sfputc_r+0x1e>
 801df90:	6994      	ldr	r4, [r2, #24]
 801df92:	42a3      	cmp	r3, r4
 801df94:	db01      	blt.n	801df9a <__sfputc_r+0x16>
 801df96:	290a      	cmp	r1, #10
 801df98:	d103      	bne.n	801dfa2 <__sfputc_r+0x1e>
 801df9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801df9e:	f000 badf 	b.w	801e560 <__swbuf_r>
 801dfa2:	6813      	ldr	r3, [r2, #0]
 801dfa4:	1c58      	adds	r0, r3, #1
 801dfa6:	6010      	str	r0, [r2, #0]
 801dfa8:	7019      	strb	r1, [r3, #0]
 801dfaa:	4608      	mov	r0, r1
 801dfac:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dfb0:	4770      	bx	lr

0801dfb2 <__sfputs_r>:
 801dfb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dfb4:	4606      	mov	r6, r0
 801dfb6:	460f      	mov	r7, r1
 801dfb8:	4614      	mov	r4, r2
 801dfba:	18d5      	adds	r5, r2, r3
 801dfbc:	42ac      	cmp	r4, r5
 801dfbe:	d101      	bne.n	801dfc4 <__sfputs_r+0x12>
 801dfc0:	2000      	movs	r0, #0
 801dfc2:	e007      	b.n	801dfd4 <__sfputs_r+0x22>
 801dfc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dfc8:	463a      	mov	r2, r7
 801dfca:	4630      	mov	r0, r6
 801dfcc:	f7ff ffda 	bl	801df84 <__sfputc_r>
 801dfd0:	1c43      	adds	r3, r0, #1
 801dfd2:	d1f3      	bne.n	801dfbc <__sfputs_r+0xa>
 801dfd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801dfd8 <_vfiprintf_r>:
 801dfd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dfdc:	460d      	mov	r5, r1
 801dfde:	b09d      	sub	sp, #116	; 0x74
 801dfe0:	4614      	mov	r4, r2
 801dfe2:	4698      	mov	r8, r3
 801dfe4:	4606      	mov	r6, r0
 801dfe6:	b118      	cbz	r0, 801dff0 <_vfiprintf_r+0x18>
 801dfe8:	6983      	ldr	r3, [r0, #24]
 801dfea:	b90b      	cbnz	r3, 801dff0 <_vfiprintf_r+0x18>
 801dfec:	f000 fc9a 	bl	801e924 <__sinit>
 801dff0:	4b89      	ldr	r3, [pc, #548]	; (801e218 <_vfiprintf_r+0x240>)
 801dff2:	429d      	cmp	r5, r3
 801dff4:	d11b      	bne.n	801e02e <_vfiprintf_r+0x56>
 801dff6:	6875      	ldr	r5, [r6, #4]
 801dff8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801dffa:	07d9      	lsls	r1, r3, #31
 801dffc:	d405      	bmi.n	801e00a <_vfiprintf_r+0x32>
 801dffe:	89ab      	ldrh	r3, [r5, #12]
 801e000:	059a      	lsls	r2, r3, #22
 801e002:	d402      	bmi.n	801e00a <_vfiprintf_r+0x32>
 801e004:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e006:	f000 fd2b 	bl	801ea60 <__retarget_lock_acquire_recursive>
 801e00a:	89ab      	ldrh	r3, [r5, #12]
 801e00c:	071b      	lsls	r3, r3, #28
 801e00e:	d501      	bpl.n	801e014 <_vfiprintf_r+0x3c>
 801e010:	692b      	ldr	r3, [r5, #16]
 801e012:	b9eb      	cbnz	r3, 801e050 <_vfiprintf_r+0x78>
 801e014:	4629      	mov	r1, r5
 801e016:	4630      	mov	r0, r6
 801e018:	f000 faf4 	bl	801e604 <__swsetup_r>
 801e01c:	b1c0      	cbz	r0, 801e050 <_vfiprintf_r+0x78>
 801e01e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e020:	07dc      	lsls	r4, r3, #31
 801e022:	d50e      	bpl.n	801e042 <_vfiprintf_r+0x6a>
 801e024:	f04f 30ff 	mov.w	r0, #4294967295
 801e028:	b01d      	add	sp, #116	; 0x74
 801e02a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e02e:	4b7b      	ldr	r3, [pc, #492]	; (801e21c <_vfiprintf_r+0x244>)
 801e030:	429d      	cmp	r5, r3
 801e032:	d101      	bne.n	801e038 <_vfiprintf_r+0x60>
 801e034:	68b5      	ldr	r5, [r6, #8]
 801e036:	e7df      	b.n	801dff8 <_vfiprintf_r+0x20>
 801e038:	4b79      	ldr	r3, [pc, #484]	; (801e220 <_vfiprintf_r+0x248>)
 801e03a:	429d      	cmp	r5, r3
 801e03c:	bf08      	it	eq
 801e03e:	68f5      	ldreq	r5, [r6, #12]
 801e040:	e7da      	b.n	801dff8 <_vfiprintf_r+0x20>
 801e042:	89ab      	ldrh	r3, [r5, #12]
 801e044:	0598      	lsls	r0, r3, #22
 801e046:	d4ed      	bmi.n	801e024 <_vfiprintf_r+0x4c>
 801e048:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e04a:	f000 fd0a 	bl	801ea62 <__retarget_lock_release_recursive>
 801e04e:	e7e9      	b.n	801e024 <_vfiprintf_r+0x4c>
 801e050:	2300      	movs	r3, #0
 801e052:	9309      	str	r3, [sp, #36]	; 0x24
 801e054:	2320      	movs	r3, #32
 801e056:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e05a:	f8cd 800c 	str.w	r8, [sp, #12]
 801e05e:	2330      	movs	r3, #48	; 0x30
 801e060:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801e224 <_vfiprintf_r+0x24c>
 801e064:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e068:	f04f 0901 	mov.w	r9, #1
 801e06c:	4623      	mov	r3, r4
 801e06e:	469a      	mov	sl, r3
 801e070:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e074:	b10a      	cbz	r2, 801e07a <_vfiprintf_r+0xa2>
 801e076:	2a25      	cmp	r2, #37	; 0x25
 801e078:	d1f9      	bne.n	801e06e <_vfiprintf_r+0x96>
 801e07a:	ebba 0b04 	subs.w	fp, sl, r4
 801e07e:	d00b      	beq.n	801e098 <_vfiprintf_r+0xc0>
 801e080:	465b      	mov	r3, fp
 801e082:	4622      	mov	r2, r4
 801e084:	4629      	mov	r1, r5
 801e086:	4630      	mov	r0, r6
 801e088:	f7ff ff93 	bl	801dfb2 <__sfputs_r>
 801e08c:	3001      	adds	r0, #1
 801e08e:	f000 80aa 	beq.w	801e1e6 <_vfiprintf_r+0x20e>
 801e092:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e094:	445a      	add	r2, fp
 801e096:	9209      	str	r2, [sp, #36]	; 0x24
 801e098:	f89a 3000 	ldrb.w	r3, [sl]
 801e09c:	2b00      	cmp	r3, #0
 801e09e:	f000 80a2 	beq.w	801e1e6 <_vfiprintf_r+0x20e>
 801e0a2:	2300      	movs	r3, #0
 801e0a4:	f04f 32ff 	mov.w	r2, #4294967295
 801e0a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e0ac:	f10a 0a01 	add.w	sl, sl, #1
 801e0b0:	9304      	str	r3, [sp, #16]
 801e0b2:	9307      	str	r3, [sp, #28]
 801e0b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e0b8:	931a      	str	r3, [sp, #104]	; 0x68
 801e0ba:	4654      	mov	r4, sl
 801e0bc:	2205      	movs	r2, #5
 801e0be:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e0c2:	4858      	ldr	r0, [pc, #352]	; (801e224 <_vfiprintf_r+0x24c>)
 801e0c4:	f7e2 f88c 	bl	80001e0 <memchr>
 801e0c8:	9a04      	ldr	r2, [sp, #16]
 801e0ca:	b9d8      	cbnz	r0, 801e104 <_vfiprintf_r+0x12c>
 801e0cc:	06d1      	lsls	r1, r2, #27
 801e0ce:	bf44      	itt	mi
 801e0d0:	2320      	movmi	r3, #32
 801e0d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e0d6:	0713      	lsls	r3, r2, #28
 801e0d8:	bf44      	itt	mi
 801e0da:	232b      	movmi	r3, #43	; 0x2b
 801e0dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e0e0:	f89a 3000 	ldrb.w	r3, [sl]
 801e0e4:	2b2a      	cmp	r3, #42	; 0x2a
 801e0e6:	d015      	beq.n	801e114 <_vfiprintf_r+0x13c>
 801e0e8:	9a07      	ldr	r2, [sp, #28]
 801e0ea:	4654      	mov	r4, sl
 801e0ec:	2000      	movs	r0, #0
 801e0ee:	f04f 0c0a 	mov.w	ip, #10
 801e0f2:	4621      	mov	r1, r4
 801e0f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e0f8:	3b30      	subs	r3, #48	; 0x30
 801e0fa:	2b09      	cmp	r3, #9
 801e0fc:	d94e      	bls.n	801e19c <_vfiprintf_r+0x1c4>
 801e0fe:	b1b0      	cbz	r0, 801e12e <_vfiprintf_r+0x156>
 801e100:	9207      	str	r2, [sp, #28]
 801e102:	e014      	b.n	801e12e <_vfiprintf_r+0x156>
 801e104:	eba0 0308 	sub.w	r3, r0, r8
 801e108:	fa09 f303 	lsl.w	r3, r9, r3
 801e10c:	4313      	orrs	r3, r2
 801e10e:	9304      	str	r3, [sp, #16]
 801e110:	46a2      	mov	sl, r4
 801e112:	e7d2      	b.n	801e0ba <_vfiprintf_r+0xe2>
 801e114:	9b03      	ldr	r3, [sp, #12]
 801e116:	1d19      	adds	r1, r3, #4
 801e118:	681b      	ldr	r3, [r3, #0]
 801e11a:	9103      	str	r1, [sp, #12]
 801e11c:	2b00      	cmp	r3, #0
 801e11e:	bfbb      	ittet	lt
 801e120:	425b      	neglt	r3, r3
 801e122:	f042 0202 	orrlt.w	r2, r2, #2
 801e126:	9307      	strge	r3, [sp, #28]
 801e128:	9307      	strlt	r3, [sp, #28]
 801e12a:	bfb8      	it	lt
 801e12c:	9204      	strlt	r2, [sp, #16]
 801e12e:	7823      	ldrb	r3, [r4, #0]
 801e130:	2b2e      	cmp	r3, #46	; 0x2e
 801e132:	d10c      	bne.n	801e14e <_vfiprintf_r+0x176>
 801e134:	7863      	ldrb	r3, [r4, #1]
 801e136:	2b2a      	cmp	r3, #42	; 0x2a
 801e138:	d135      	bne.n	801e1a6 <_vfiprintf_r+0x1ce>
 801e13a:	9b03      	ldr	r3, [sp, #12]
 801e13c:	1d1a      	adds	r2, r3, #4
 801e13e:	681b      	ldr	r3, [r3, #0]
 801e140:	9203      	str	r2, [sp, #12]
 801e142:	2b00      	cmp	r3, #0
 801e144:	bfb8      	it	lt
 801e146:	f04f 33ff 	movlt.w	r3, #4294967295
 801e14a:	3402      	adds	r4, #2
 801e14c:	9305      	str	r3, [sp, #20]
 801e14e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801e234 <_vfiprintf_r+0x25c>
 801e152:	7821      	ldrb	r1, [r4, #0]
 801e154:	2203      	movs	r2, #3
 801e156:	4650      	mov	r0, sl
 801e158:	f7e2 f842 	bl	80001e0 <memchr>
 801e15c:	b140      	cbz	r0, 801e170 <_vfiprintf_r+0x198>
 801e15e:	2340      	movs	r3, #64	; 0x40
 801e160:	eba0 000a 	sub.w	r0, r0, sl
 801e164:	fa03 f000 	lsl.w	r0, r3, r0
 801e168:	9b04      	ldr	r3, [sp, #16]
 801e16a:	4303      	orrs	r3, r0
 801e16c:	3401      	adds	r4, #1
 801e16e:	9304      	str	r3, [sp, #16]
 801e170:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e174:	482c      	ldr	r0, [pc, #176]	; (801e228 <_vfiprintf_r+0x250>)
 801e176:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e17a:	2206      	movs	r2, #6
 801e17c:	f7e2 f830 	bl	80001e0 <memchr>
 801e180:	2800      	cmp	r0, #0
 801e182:	d03f      	beq.n	801e204 <_vfiprintf_r+0x22c>
 801e184:	4b29      	ldr	r3, [pc, #164]	; (801e22c <_vfiprintf_r+0x254>)
 801e186:	bb1b      	cbnz	r3, 801e1d0 <_vfiprintf_r+0x1f8>
 801e188:	9b03      	ldr	r3, [sp, #12]
 801e18a:	3307      	adds	r3, #7
 801e18c:	f023 0307 	bic.w	r3, r3, #7
 801e190:	3308      	adds	r3, #8
 801e192:	9303      	str	r3, [sp, #12]
 801e194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e196:	443b      	add	r3, r7
 801e198:	9309      	str	r3, [sp, #36]	; 0x24
 801e19a:	e767      	b.n	801e06c <_vfiprintf_r+0x94>
 801e19c:	fb0c 3202 	mla	r2, ip, r2, r3
 801e1a0:	460c      	mov	r4, r1
 801e1a2:	2001      	movs	r0, #1
 801e1a4:	e7a5      	b.n	801e0f2 <_vfiprintf_r+0x11a>
 801e1a6:	2300      	movs	r3, #0
 801e1a8:	3401      	adds	r4, #1
 801e1aa:	9305      	str	r3, [sp, #20]
 801e1ac:	4619      	mov	r1, r3
 801e1ae:	f04f 0c0a 	mov.w	ip, #10
 801e1b2:	4620      	mov	r0, r4
 801e1b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e1b8:	3a30      	subs	r2, #48	; 0x30
 801e1ba:	2a09      	cmp	r2, #9
 801e1bc:	d903      	bls.n	801e1c6 <_vfiprintf_r+0x1ee>
 801e1be:	2b00      	cmp	r3, #0
 801e1c0:	d0c5      	beq.n	801e14e <_vfiprintf_r+0x176>
 801e1c2:	9105      	str	r1, [sp, #20]
 801e1c4:	e7c3      	b.n	801e14e <_vfiprintf_r+0x176>
 801e1c6:	fb0c 2101 	mla	r1, ip, r1, r2
 801e1ca:	4604      	mov	r4, r0
 801e1cc:	2301      	movs	r3, #1
 801e1ce:	e7f0      	b.n	801e1b2 <_vfiprintf_r+0x1da>
 801e1d0:	ab03      	add	r3, sp, #12
 801e1d2:	9300      	str	r3, [sp, #0]
 801e1d4:	462a      	mov	r2, r5
 801e1d6:	4b16      	ldr	r3, [pc, #88]	; (801e230 <_vfiprintf_r+0x258>)
 801e1d8:	a904      	add	r1, sp, #16
 801e1da:	4630      	mov	r0, r6
 801e1dc:	f3af 8000 	nop.w
 801e1e0:	4607      	mov	r7, r0
 801e1e2:	1c78      	adds	r0, r7, #1
 801e1e4:	d1d6      	bne.n	801e194 <_vfiprintf_r+0x1bc>
 801e1e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e1e8:	07d9      	lsls	r1, r3, #31
 801e1ea:	d405      	bmi.n	801e1f8 <_vfiprintf_r+0x220>
 801e1ec:	89ab      	ldrh	r3, [r5, #12]
 801e1ee:	059a      	lsls	r2, r3, #22
 801e1f0:	d402      	bmi.n	801e1f8 <_vfiprintf_r+0x220>
 801e1f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e1f4:	f000 fc35 	bl	801ea62 <__retarget_lock_release_recursive>
 801e1f8:	89ab      	ldrh	r3, [r5, #12]
 801e1fa:	065b      	lsls	r3, r3, #25
 801e1fc:	f53f af12 	bmi.w	801e024 <_vfiprintf_r+0x4c>
 801e200:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e202:	e711      	b.n	801e028 <_vfiprintf_r+0x50>
 801e204:	ab03      	add	r3, sp, #12
 801e206:	9300      	str	r3, [sp, #0]
 801e208:	462a      	mov	r2, r5
 801e20a:	4b09      	ldr	r3, [pc, #36]	; (801e230 <_vfiprintf_r+0x258>)
 801e20c:	a904      	add	r1, sp, #16
 801e20e:	4630      	mov	r0, r6
 801e210:	f000 f880 	bl	801e314 <_printf_i>
 801e214:	e7e4      	b.n	801e1e0 <_vfiprintf_r+0x208>
 801e216:	bf00      	nop
 801e218:	08029fe4 	.word	0x08029fe4
 801e21c:	0802a004 	.word	0x0802a004
 801e220:	08029fc4 	.word	0x08029fc4
 801e224:	08029f90 	.word	0x08029f90
 801e228:	08029f9a 	.word	0x08029f9a
 801e22c:	00000000 	.word	0x00000000
 801e230:	0801dfb3 	.word	0x0801dfb3
 801e234:	08029f96 	.word	0x08029f96

0801e238 <_printf_common>:
 801e238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e23c:	4616      	mov	r6, r2
 801e23e:	4699      	mov	r9, r3
 801e240:	688a      	ldr	r2, [r1, #8]
 801e242:	690b      	ldr	r3, [r1, #16]
 801e244:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801e248:	4293      	cmp	r3, r2
 801e24a:	bfb8      	it	lt
 801e24c:	4613      	movlt	r3, r2
 801e24e:	6033      	str	r3, [r6, #0]
 801e250:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801e254:	4607      	mov	r7, r0
 801e256:	460c      	mov	r4, r1
 801e258:	b10a      	cbz	r2, 801e25e <_printf_common+0x26>
 801e25a:	3301      	adds	r3, #1
 801e25c:	6033      	str	r3, [r6, #0]
 801e25e:	6823      	ldr	r3, [r4, #0]
 801e260:	0699      	lsls	r1, r3, #26
 801e262:	bf42      	ittt	mi
 801e264:	6833      	ldrmi	r3, [r6, #0]
 801e266:	3302      	addmi	r3, #2
 801e268:	6033      	strmi	r3, [r6, #0]
 801e26a:	6825      	ldr	r5, [r4, #0]
 801e26c:	f015 0506 	ands.w	r5, r5, #6
 801e270:	d106      	bne.n	801e280 <_printf_common+0x48>
 801e272:	f104 0a19 	add.w	sl, r4, #25
 801e276:	68e3      	ldr	r3, [r4, #12]
 801e278:	6832      	ldr	r2, [r6, #0]
 801e27a:	1a9b      	subs	r3, r3, r2
 801e27c:	42ab      	cmp	r3, r5
 801e27e:	dc26      	bgt.n	801e2ce <_printf_common+0x96>
 801e280:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801e284:	1e13      	subs	r3, r2, #0
 801e286:	6822      	ldr	r2, [r4, #0]
 801e288:	bf18      	it	ne
 801e28a:	2301      	movne	r3, #1
 801e28c:	0692      	lsls	r2, r2, #26
 801e28e:	d42b      	bmi.n	801e2e8 <_printf_common+0xb0>
 801e290:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e294:	4649      	mov	r1, r9
 801e296:	4638      	mov	r0, r7
 801e298:	47c0      	blx	r8
 801e29a:	3001      	adds	r0, #1
 801e29c:	d01e      	beq.n	801e2dc <_printf_common+0xa4>
 801e29e:	6823      	ldr	r3, [r4, #0]
 801e2a0:	68e5      	ldr	r5, [r4, #12]
 801e2a2:	6832      	ldr	r2, [r6, #0]
 801e2a4:	f003 0306 	and.w	r3, r3, #6
 801e2a8:	2b04      	cmp	r3, #4
 801e2aa:	bf08      	it	eq
 801e2ac:	1aad      	subeq	r5, r5, r2
 801e2ae:	68a3      	ldr	r3, [r4, #8]
 801e2b0:	6922      	ldr	r2, [r4, #16]
 801e2b2:	bf0c      	ite	eq
 801e2b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e2b8:	2500      	movne	r5, #0
 801e2ba:	4293      	cmp	r3, r2
 801e2bc:	bfc4      	itt	gt
 801e2be:	1a9b      	subgt	r3, r3, r2
 801e2c0:	18ed      	addgt	r5, r5, r3
 801e2c2:	2600      	movs	r6, #0
 801e2c4:	341a      	adds	r4, #26
 801e2c6:	42b5      	cmp	r5, r6
 801e2c8:	d11a      	bne.n	801e300 <_printf_common+0xc8>
 801e2ca:	2000      	movs	r0, #0
 801e2cc:	e008      	b.n	801e2e0 <_printf_common+0xa8>
 801e2ce:	2301      	movs	r3, #1
 801e2d0:	4652      	mov	r2, sl
 801e2d2:	4649      	mov	r1, r9
 801e2d4:	4638      	mov	r0, r7
 801e2d6:	47c0      	blx	r8
 801e2d8:	3001      	adds	r0, #1
 801e2da:	d103      	bne.n	801e2e4 <_printf_common+0xac>
 801e2dc:	f04f 30ff 	mov.w	r0, #4294967295
 801e2e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e2e4:	3501      	adds	r5, #1
 801e2e6:	e7c6      	b.n	801e276 <_printf_common+0x3e>
 801e2e8:	18e1      	adds	r1, r4, r3
 801e2ea:	1c5a      	adds	r2, r3, #1
 801e2ec:	2030      	movs	r0, #48	; 0x30
 801e2ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801e2f2:	4422      	add	r2, r4
 801e2f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801e2f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801e2fc:	3302      	adds	r3, #2
 801e2fe:	e7c7      	b.n	801e290 <_printf_common+0x58>
 801e300:	2301      	movs	r3, #1
 801e302:	4622      	mov	r2, r4
 801e304:	4649      	mov	r1, r9
 801e306:	4638      	mov	r0, r7
 801e308:	47c0      	blx	r8
 801e30a:	3001      	adds	r0, #1
 801e30c:	d0e6      	beq.n	801e2dc <_printf_common+0xa4>
 801e30e:	3601      	adds	r6, #1
 801e310:	e7d9      	b.n	801e2c6 <_printf_common+0x8e>
	...

0801e314 <_printf_i>:
 801e314:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e318:	7e0f      	ldrb	r7, [r1, #24]
 801e31a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e31c:	2f78      	cmp	r7, #120	; 0x78
 801e31e:	4691      	mov	r9, r2
 801e320:	4680      	mov	r8, r0
 801e322:	460c      	mov	r4, r1
 801e324:	469a      	mov	sl, r3
 801e326:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801e32a:	d807      	bhi.n	801e33c <_printf_i+0x28>
 801e32c:	2f62      	cmp	r7, #98	; 0x62
 801e32e:	d80a      	bhi.n	801e346 <_printf_i+0x32>
 801e330:	2f00      	cmp	r7, #0
 801e332:	f000 80d8 	beq.w	801e4e6 <_printf_i+0x1d2>
 801e336:	2f58      	cmp	r7, #88	; 0x58
 801e338:	f000 80a3 	beq.w	801e482 <_printf_i+0x16e>
 801e33c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e340:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801e344:	e03a      	b.n	801e3bc <_printf_i+0xa8>
 801e346:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801e34a:	2b15      	cmp	r3, #21
 801e34c:	d8f6      	bhi.n	801e33c <_printf_i+0x28>
 801e34e:	a101      	add	r1, pc, #4	; (adr r1, 801e354 <_printf_i+0x40>)
 801e350:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e354:	0801e3ad 	.word	0x0801e3ad
 801e358:	0801e3c1 	.word	0x0801e3c1
 801e35c:	0801e33d 	.word	0x0801e33d
 801e360:	0801e33d 	.word	0x0801e33d
 801e364:	0801e33d 	.word	0x0801e33d
 801e368:	0801e33d 	.word	0x0801e33d
 801e36c:	0801e3c1 	.word	0x0801e3c1
 801e370:	0801e33d 	.word	0x0801e33d
 801e374:	0801e33d 	.word	0x0801e33d
 801e378:	0801e33d 	.word	0x0801e33d
 801e37c:	0801e33d 	.word	0x0801e33d
 801e380:	0801e4cd 	.word	0x0801e4cd
 801e384:	0801e3f1 	.word	0x0801e3f1
 801e388:	0801e4af 	.word	0x0801e4af
 801e38c:	0801e33d 	.word	0x0801e33d
 801e390:	0801e33d 	.word	0x0801e33d
 801e394:	0801e4ef 	.word	0x0801e4ef
 801e398:	0801e33d 	.word	0x0801e33d
 801e39c:	0801e3f1 	.word	0x0801e3f1
 801e3a0:	0801e33d 	.word	0x0801e33d
 801e3a4:	0801e33d 	.word	0x0801e33d
 801e3a8:	0801e4b7 	.word	0x0801e4b7
 801e3ac:	682b      	ldr	r3, [r5, #0]
 801e3ae:	1d1a      	adds	r2, r3, #4
 801e3b0:	681b      	ldr	r3, [r3, #0]
 801e3b2:	602a      	str	r2, [r5, #0]
 801e3b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e3b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801e3bc:	2301      	movs	r3, #1
 801e3be:	e0a3      	b.n	801e508 <_printf_i+0x1f4>
 801e3c0:	6820      	ldr	r0, [r4, #0]
 801e3c2:	6829      	ldr	r1, [r5, #0]
 801e3c4:	0606      	lsls	r6, r0, #24
 801e3c6:	f101 0304 	add.w	r3, r1, #4
 801e3ca:	d50a      	bpl.n	801e3e2 <_printf_i+0xce>
 801e3cc:	680e      	ldr	r6, [r1, #0]
 801e3ce:	602b      	str	r3, [r5, #0]
 801e3d0:	2e00      	cmp	r6, #0
 801e3d2:	da03      	bge.n	801e3dc <_printf_i+0xc8>
 801e3d4:	232d      	movs	r3, #45	; 0x2d
 801e3d6:	4276      	negs	r6, r6
 801e3d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e3dc:	485e      	ldr	r0, [pc, #376]	; (801e558 <_printf_i+0x244>)
 801e3de:	230a      	movs	r3, #10
 801e3e0:	e019      	b.n	801e416 <_printf_i+0x102>
 801e3e2:	680e      	ldr	r6, [r1, #0]
 801e3e4:	602b      	str	r3, [r5, #0]
 801e3e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 801e3ea:	bf18      	it	ne
 801e3ec:	b236      	sxthne	r6, r6
 801e3ee:	e7ef      	b.n	801e3d0 <_printf_i+0xbc>
 801e3f0:	682b      	ldr	r3, [r5, #0]
 801e3f2:	6820      	ldr	r0, [r4, #0]
 801e3f4:	1d19      	adds	r1, r3, #4
 801e3f6:	6029      	str	r1, [r5, #0]
 801e3f8:	0601      	lsls	r1, r0, #24
 801e3fa:	d501      	bpl.n	801e400 <_printf_i+0xec>
 801e3fc:	681e      	ldr	r6, [r3, #0]
 801e3fe:	e002      	b.n	801e406 <_printf_i+0xf2>
 801e400:	0646      	lsls	r6, r0, #25
 801e402:	d5fb      	bpl.n	801e3fc <_printf_i+0xe8>
 801e404:	881e      	ldrh	r6, [r3, #0]
 801e406:	4854      	ldr	r0, [pc, #336]	; (801e558 <_printf_i+0x244>)
 801e408:	2f6f      	cmp	r7, #111	; 0x6f
 801e40a:	bf0c      	ite	eq
 801e40c:	2308      	moveq	r3, #8
 801e40e:	230a      	movne	r3, #10
 801e410:	2100      	movs	r1, #0
 801e412:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801e416:	6865      	ldr	r5, [r4, #4]
 801e418:	60a5      	str	r5, [r4, #8]
 801e41a:	2d00      	cmp	r5, #0
 801e41c:	bfa2      	ittt	ge
 801e41e:	6821      	ldrge	r1, [r4, #0]
 801e420:	f021 0104 	bicge.w	r1, r1, #4
 801e424:	6021      	strge	r1, [r4, #0]
 801e426:	b90e      	cbnz	r6, 801e42c <_printf_i+0x118>
 801e428:	2d00      	cmp	r5, #0
 801e42a:	d04d      	beq.n	801e4c8 <_printf_i+0x1b4>
 801e42c:	4615      	mov	r5, r2
 801e42e:	fbb6 f1f3 	udiv	r1, r6, r3
 801e432:	fb03 6711 	mls	r7, r3, r1, r6
 801e436:	5dc7      	ldrb	r7, [r0, r7]
 801e438:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801e43c:	4637      	mov	r7, r6
 801e43e:	42bb      	cmp	r3, r7
 801e440:	460e      	mov	r6, r1
 801e442:	d9f4      	bls.n	801e42e <_printf_i+0x11a>
 801e444:	2b08      	cmp	r3, #8
 801e446:	d10b      	bne.n	801e460 <_printf_i+0x14c>
 801e448:	6823      	ldr	r3, [r4, #0]
 801e44a:	07de      	lsls	r6, r3, #31
 801e44c:	d508      	bpl.n	801e460 <_printf_i+0x14c>
 801e44e:	6923      	ldr	r3, [r4, #16]
 801e450:	6861      	ldr	r1, [r4, #4]
 801e452:	4299      	cmp	r1, r3
 801e454:	bfde      	ittt	le
 801e456:	2330      	movle	r3, #48	; 0x30
 801e458:	f805 3c01 	strble.w	r3, [r5, #-1]
 801e45c:	f105 35ff 	addle.w	r5, r5, #4294967295
 801e460:	1b52      	subs	r2, r2, r5
 801e462:	6122      	str	r2, [r4, #16]
 801e464:	f8cd a000 	str.w	sl, [sp]
 801e468:	464b      	mov	r3, r9
 801e46a:	aa03      	add	r2, sp, #12
 801e46c:	4621      	mov	r1, r4
 801e46e:	4640      	mov	r0, r8
 801e470:	f7ff fee2 	bl	801e238 <_printf_common>
 801e474:	3001      	adds	r0, #1
 801e476:	d14c      	bne.n	801e512 <_printf_i+0x1fe>
 801e478:	f04f 30ff 	mov.w	r0, #4294967295
 801e47c:	b004      	add	sp, #16
 801e47e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e482:	4835      	ldr	r0, [pc, #212]	; (801e558 <_printf_i+0x244>)
 801e484:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801e488:	6829      	ldr	r1, [r5, #0]
 801e48a:	6823      	ldr	r3, [r4, #0]
 801e48c:	f851 6b04 	ldr.w	r6, [r1], #4
 801e490:	6029      	str	r1, [r5, #0]
 801e492:	061d      	lsls	r5, r3, #24
 801e494:	d514      	bpl.n	801e4c0 <_printf_i+0x1ac>
 801e496:	07df      	lsls	r7, r3, #31
 801e498:	bf44      	itt	mi
 801e49a:	f043 0320 	orrmi.w	r3, r3, #32
 801e49e:	6023      	strmi	r3, [r4, #0]
 801e4a0:	b91e      	cbnz	r6, 801e4aa <_printf_i+0x196>
 801e4a2:	6823      	ldr	r3, [r4, #0]
 801e4a4:	f023 0320 	bic.w	r3, r3, #32
 801e4a8:	6023      	str	r3, [r4, #0]
 801e4aa:	2310      	movs	r3, #16
 801e4ac:	e7b0      	b.n	801e410 <_printf_i+0xfc>
 801e4ae:	6823      	ldr	r3, [r4, #0]
 801e4b0:	f043 0320 	orr.w	r3, r3, #32
 801e4b4:	6023      	str	r3, [r4, #0]
 801e4b6:	2378      	movs	r3, #120	; 0x78
 801e4b8:	4828      	ldr	r0, [pc, #160]	; (801e55c <_printf_i+0x248>)
 801e4ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801e4be:	e7e3      	b.n	801e488 <_printf_i+0x174>
 801e4c0:	0659      	lsls	r1, r3, #25
 801e4c2:	bf48      	it	mi
 801e4c4:	b2b6      	uxthmi	r6, r6
 801e4c6:	e7e6      	b.n	801e496 <_printf_i+0x182>
 801e4c8:	4615      	mov	r5, r2
 801e4ca:	e7bb      	b.n	801e444 <_printf_i+0x130>
 801e4cc:	682b      	ldr	r3, [r5, #0]
 801e4ce:	6826      	ldr	r6, [r4, #0]
 801e4d0:	6961      	ldr	r1, [r4, #20]
 801e4d2:	1d18      	adds	r0, r3, #4
 801e4d4:	6028      	str	r0, [r5, #0]
 801e4d6:	0635      	lsls	r5, r6, #24
 801e4d8:	681b      	ldr	r3, [r3, #0]
 801e4da:	d501      	bpl.n	801e4e0 <_printf_i+0x1cc>
 801e4dc:	6019      	str	r1, [r3, #0]
 801e4de:	e002      	b.n	801e4e6 <_printf_i+0x1d2>
 801e4e0:	0670      	lsls	r0, r6, #25
 801e4e2:	d5fb      	bpl.n	801e4dc <_printf_i+0x1c8>
 801e4e4:	8019      	strh	r1, [r3, #0]
 801e4e6:	2300      	movs	r3, #0
 801e4e8:	6123      	str	r3, [r4, #16]
 801e4ea:	4615      	mov	r5, r2
 801e4ec:	e7ba      	b.n	801e464 <_printf_i+0x150>
 801e4ee:	682b      	ldr	r3, [r5, #0]
 801e4f0:	1d1a      	adds	r2, r3, #4
 801e4f2:	602a      	str	r2, [r5, #0]
 801e4f4:	681d      	ldr	r5, [r3, #0]
 801e4f6:	6862      	ldr	r2, [r4, #4]
 801e4f8:	2100      	movs	r1, #0
 801e4fa:	4628      	mov	r0, r5
 801e4fc:	f7e1 fe70 	bl	80001e0 <memchr>
 801e500:	b108      	cbz	r0, 801e506 <_printf_i+0x1f2>
 801e502:	1b40      	subs	r0, r0, r5
 801e504:	6060      	str	r0, [r4, #4]
 801e506:	6863      	ldr	r3, [r4, #4]
 801e508:	6123      	str	r3, [r4, #16]
 801e50a:	2300      	movs	r3, #0
 801e50c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e510:	e7a8      	b.n	801e464 <_printf_i+0x150>
 801e512:	6923      	ldr	r3, [r4, #16]
 801e514:	462a      	mov	r2, r5
 801e516:	4649      	mov	r1, r9
 801e518:	4640      	mov	r0, r8
 801e51a:	47d0      	blx	sl
 801e51c:	3001      	adds	r0, #1
 801e51e:	d0ab      	beq.n	801e478 <_printf_i+0x164>
 801e520:	6823      	ldr	r3, [r4, #0]
 801e522:	079b      	lsls	r3, r3, #30
 801e524:	d413      	bmi.n	801e54e <_printf_i+0x23a>
 801e526:	68e0      	ldr	r0, [r4, #12]
 801e528:	9b03      	ldr	r3, [sp, #12]
 801e52a:	4298      	cmp	r0, r3
 801e52c:	bfb8      	it	lt
 801e52e:	4618      	movlt	r0, r3
 801e530:	e7a4      	b.n	801e47c <_printf_i+0x168>
 801e532:	2301      	movs	r3, #1
 801e534:	4632      	mov	r2, r6
 801e536:	4649      	mov	r1, r9
 801e538:	4640      	mov	r0, r8
 801e53a:	47d0      	blx	sl
 801e53c:	3001      	adds	r0, #1
 801e53e:	d09b      	beq.n	801e478 <_printf_i+0x164>
 801e540:	3501      	adds	r5, #1
 801e542:	68e3      	ldr	r3, [r4, #12]
 801e544:	9903      	ldr	r1, [sp, #12]
 801e546:	1a5b      	subs	r3, r3, r1
 801e548:	42ab      	cmp	r3, r5
 801e54a:	dcf2      	bgt.n	801e532 <_printf_i+0x21e>
 801e54c:	e7eb      	b.n	801e526 <_printf_i+0x212>
 801e54e:	2500      	movs	r5, #0
 801e550:	f104 0619 	add.w	r6, r4, #25
 801e554:	e7f5      	b.n	801e542 <_printf_i+0x22e>
 801e556:	bf00      	nop
 801e558:	08029fa1 	.word	0x08029fa1
 801e55c:	08029fb2 	.word	0x08029fb2

0801e560 <__swbuf_r>:
 801e560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e562:	460e      	mov	r6, r1
 801e564:	4614      	mov	r4, r2
 801e566:	4605      	mov	r5, r0
 801e568:	b118      	cbz	r0, 801e572 <__swbuf_r+0x12>
 801e56a:	6983      	ldr	r3, [r0, #24]
 801e56c:	b90b      	cbnz	r3, 801e572 <__swbuf_r+0x12>
 801e56e:	f000 f9d9 	bl	801e924 <__sinit>
 801e572:	4b21      	ldr	r3, [pc, #132]	; (801e5f8 <__swbuf_r+0x98>)
 801e574:	429c      	cmp	r4, r3
 801e576:	d12b      	bne.n	801e5d0 <__swbuf_r+0x70>
 801e578:	686c      	ldr	r4, [r5, #4]
 801e57a:	69a3      	ldr	r3, [r4, #24]
 801e57c:	60a3      	str	r3, [r4, #8]
 801e57e:	89a3      	ldrh	r3, [r4, #12]
 801e580:	071a      	lsls	r2, r3, #28
 801e582:	d52f      	bpl.n	801e5e4 <__swbuf_r+0x84>
 801e584:	6923      	ldr	r3, [r4, #16]
 801e586:	b36b      	cbz	r3, 801e5e4 <__swbuf_r+0x84>
 801e588:	6923      	ldr	r3, [r4, #16]
 801e58a:	6820      	ldr	r0, [r4, #0]
 801e58c:	1ac0      	subs	r0, r0, r3
 801e58e:	6963      	ldr	r3, [r4, #20]
 801e590:	b2f6      	uxtb	r6, r6
 801e592:	4283      	cmp	r3, r0
 801e594:	4637      	mov	r7, r6
 801e596:	dc04      	bgt.n	801e5a2 <__swbuf_r+0x42>
 801e598:	4621      	mov	r1, r4
 801e59a:	4628      	mov	r0, r5
 801e59c:	f000 f92e 	bl	801e7fc <_fflush_r>
 801e5a0:	bb30      	cbnz	r0, 801e5f0 <__swbuf_r+0x90>
 801e5a2:	68a3      	ldr	r3, [r4, #8]
 801e5a4:	3b01      	subs	r3, #1
 801e5a6:	60a3      	str	r3, [r4, #8]
 801e5a8:	6823      	ldr	r3, [r4, #0]
 801e5aa:	1c5a      	adds	r2, r3, #1
 801e5ac:	6022      	str	r2, [r4, #0]
 801e5ae:	701e      	strb	r6, [r3, #0]
 801e5b0:	6963      	ldr	r3, [r4, #20]
 801e5b2:	3001      	adds	r0, #1
 801e5b4:	4283      	cmp	r3, r0
 801e5b6:	d004      	beq.n	801e5c2 <__swbuf_r+0x62>
 801e5b8:	89a3      	ldrh	r3, [r4, #12]
 801e5ba:	07db      	lsls	r3, r3, #31
 801e5bc:	d506      	bpl.n	801e5cc <__swbuf_r+0x6c>
 801e5be:	2e0a      	cmp	r6, #10
 801e5c0:	d104      	bne.n	801e5cc <__swbuf_r+0x6c>
 801e5c2:	4621      	mov	r1, r4
 801e5c4:	4628      	mov	r0, r5
 801e5c6:	f000 f919 	bl	801e7fc <_fflush_r>
 801e5ca:	b988      	cbnz	r0, 801e5f0 <__swbuf_r+0x90>
 801e5cc:	4638      	mov	r0, r7
 801e5ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e5d0:	4b0a      	ldr	r3, [pc, #40]	; (801e5fc <__swbuf_r+0x9c>)
 801e5d2:	429c      	cmp	r4, r3
 801e5d4:	d101      	bne.n	801e5da <__swbuf_r+0x7a>
 801e5d6:	68ac      	ldr	r4, [r5, #8]
 801e5d8:	e7cf      	b.n	801e57a <__swbuf_r+0x1a>
 801e5da:	4b09      	ldr	r3, [pc, #36]	; (801e600 <__swbuf_r+0xa0>)
 801e5dc:	429c      	cmp	r4, r3
 801e5de:	bf08      	it	eq
 801e5e0:	68ec      	ldreq	r4, [r5, #12]
 801e5e2:	e7ca      	b.n	801e57a <__swbuf_r+0x1a>
 801e5e4:	4621      	mov	r1, r4
 801e5e6:	4628      	mov	r0, r5
 801e5e8:	f000 f80c 	bl	801e604 <__swsetup_r>
 801e5ec:	2800      	cmp	r0, #0
 801e5ee:	d0cb      	beq.n	801e588 <__swbuf_r+0x28>
 801e5f0:	f04f 37ff 	mov.w	r7, #4294967295
 801e5f4:	e7ea      	b.n	801e5cc <__swbuf_r+0x6c>
 801e5f6:	bf00      	nop
 801e5f8:	08029fe4 	.word	0x08029fe4
 801e5fc:	0802a004 	.word	0x0802a004
 801e600:	08029fc4 	.word	0x08029fc4

0801e604 <__swsetup_r>:
 801e604:	4b32      	ldr	r3, [pc, #200]	; (801e6d0 <__swsetup_r+0xcc>)
 801e606:	b570      	push	{r4, r5, r6, lr}
 801e608:	681d      	ldr	r5, [r3, #0]
 801e60a:	4606      	mov	r6, r0
 801e60c:	460c      	mov	r4, r1
 801e60e:	b125      	cbz	r5, 801e61a <__swsetup_r+0x16>
 801e610:	69ab      	ldr	r3, [r5, #24]
 801e612:	b913      	cbnz	r3, 801e61a <__swsetup_r+0x16>
 801e614:	4628      	mov	r0, r5
 801e616:	f000 f985 	bl	801e924 <__sinit>
 801e61a:	4b2e      	ldr	r3, [pc, #184]	; (801e6d4 <__swsetup_r+0xd0>)
 801e61c:	429c      	cmp	r4, r3
 801e61e:	d10f      	bne.n	801e640 <__swsetup_r+0x3c>
 801e620:	686c      	ldr	r4, [r5, #4]
 801e622:	89a3      	ldrh	r3, [r4, #12]
 801e624:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e628:	0719      	lsls	r1, r3, #28
 801e62a:	d42c      	bmi.n	801e686 <__swsetup_r+0x82>
 801e62c:	06dd      	lsls	r5, r3, #27
 801e62e:	d411      	bmi.n	801e654 <__swsetup_r+0x50>
 801e630:	2309      	movs	r3, #9
 801e632:	6033      	str	r3, [r6, #0]
 801e634:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801e638:	81a3      	strh	r3, [r4, #12]
 801e63a:	f04f 30ff 	mov.w	r0, #4294967295
 801e63e:	e03e      	b.n	801e6be <__swsetup_r+0xba>
 801e640:	4b25      	ldr	r3, [pc, #148]	; (801e6d8 <__swsetup_r+0xd4>)
 801e642:	429c      	cmp	r4, r3
 801e644:	d101      	bne.n	801e64a <__swsetup_r+0x46>
 801e646:	68ac      	ldr	r4, [r5, #8]
 801e648:	e7eb      	b.n	801e622 <__swsetup_r+0x1e>
 801e64a:	4b24      	ldr	r3, [pc, #144]	; (801e6dc <__swsetup_r+0xd8>)
 801e64c:	429c      	cmp	r4, r3
 801e64e:	bf08      	it	eq
 801e650:	68ec      	ldreq	r4, [r5, #12]
 801e652:	e7e6      	b.n	801e622 <__swsetup_r+0x1e>
 801e654:	0758      	lsls	r0, r3, #29
 801e656:	d512      	bpl.n	801e67e <__swsetup_r+0x7a>
 801e658:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e65a:	b141      	cbz	r1, 801e66e <__swsetup_r+0x6a>
 801e65c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e660:	4299      	cmp	r1, r3
 801e662:	d002      	beq.n	801e66a <__swsetup_r+0x66>
 801e664:	4630      	mov	r0, r6
 801e666:	f000 fa63 	bl	801eb30 <_free_r>
 801e66a:	2300      	movs	r3, #0
 801e66c:	6363      	str	r3, [r4, #52]	; 0x34
 801e66e:	89a3      	ldrh	r3, [r4, #12]
 801e670:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e674:	81a3      	strh	r3, [r4, #12]
 801e676:	2300      	movs	r3, #0
 801e678:	6063      	str	r3, [r4, #4]
 801e67a:	6923      	ldr	r3, [r4, #16]
 801e67c:	6023      	str	r3, [r4, #0]
 801e67e:	89a3      	ldrh	r3, [r4, #12]
 801e680:	f043 0308 	orr.w	r3, r3, #8
 801e684:	81a3      	strh	r3, [r4, #12]
 801e686:	6923      	ldr	r3, [r4, #16]
 801e688:	b94b      	cbnz	r3, 801e69e <__swsetup_r+0x9a>
 801e68a:	89a3      	ldrh	r3, [r4, #12]
 801e68c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e690:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e694:	d003      	beq.n	801e69e <__swsetup_r+0x9a>
 801e696:	4621      	mov	r1, r4
 801e698:	4630      	mov	r0, r6
 801e69a:	f000 fa09 	bl	801eab0 <__smakebuf_r>
 801e69e:	89a0      	ldrh	r0, [r4, #12]
 801e6a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e6a4:	f010 0301 	ands.w	r3, r0, #1
 801e6a8:	d00a      	beq.n	801e6c0 <__swsetup_r+0xbc>
 801e6aa:	2300      	movs	r3, #0
 801e6ac:	60a3      	str	r3, [r4, #8]
 801e6ae:	6963      	ldr	r3, [r4, #20]
 801e6b0:	425b      	negs	r3, r3
 801e6b2:	61a3      	str	r3, [r4, #24]
 801e6b4:	6923      	ldr	r3, [r4, #16]
 801e6b6:	b943      	cbnz	r3, 801e6ca <__swsetup_r+0xc6>
 801e6b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801e6bc:	d1ba      	bne.n	801e634 <__swsetup_r+0x30>
 801e6be:	bd70      	pop	{r4, r5, r6, pc}
 801e6c0:	0781      	lsls	r1, r0, #30
 801e6c2:	bf58      	it	pl
 801e6c4:	6963      	ldrpl	r3, [r4, #20]
 801e6c6:	60a3      	str	r3, [r4, #8]
 801e6c8:	e7f4      	b.n	801e6b4 <__swsetup_r+0xb0>
 801e6ca:	2000      	movs	r0, #0
 801e6cc:	e7f7      	b.n	801e6be <__swsetup_r+0xba>
 801e6ce:	bf00      	nop
 801e6d0:	200001ec 	.word	0x200001ec
 801e6d4:	08029fe4 	.word	0x08029fe4
 801e6d8:	0802a004 	.word	0x0802a004
 801e6dc:	08029fc4 	.word	0x08029fc4

0801e6e0 <abort>:
 801e6e0:	b508      	push	{r3, lr}
 801e6e2:	2006      	movs	r0, #6
 801e6e4:	f000 fb3c 	bl	801ed60 <raise>
 801e6e8:	2001      	movs	r0, #1
 801e6ea:	f7f7 fee5 	bl	80164b8 <_exit>
	...

0801e6f0 <__sflush_r>:
 801e6f0:	898a      	ldrh	r2, [r1, #12]
 801e6f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e6f6:	4605      	mov	r5, r0
 801e6f8:	0710      	lsls	r0, r2, #28
 801e6fa:	460c      	mov	r4, r1
 801e6fc:	d458      	bmi.n	801e7b0 <__sflush_r+0xc0>
 801e6fe:	684b      	ldr	r3, [r1, #4]
 801e700:	2b00      	cmp	r3, #0
 801e702:	dc05      	bgt.n	801e710 <__sflush_r+0x20>
 801e704:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e706:	2b00      	cmp	r3, #0
 801e708:	dc02      	bgt.n	801e710 <__sflush_r+0x20>
 801e70a:	2000      	movs	r0, #0
 801e70c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e710:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e712:	2e00      	cmp	r6, #0
 801e714:	d0f9      	beq.n	801e70a <__sflush_r+0x1a>
 801e716:	2300      	movs	r3, #0
 801e718:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e71c:	682f      	ldr	r7, [r5, #0]
 801e71e:	602b      	str	r3, [r5, #0]
 801e720:	d032      	beq.n	801e788 <__sflush_r+0x98>
 801e722:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e724:	89a3      	ldrh	r3, [r4, #12]
 801e726:	075a      	lsls	r2, r3, #29
 801e728:	d505      	bpl.n	801e736 <__sflush_r+0x46>
 801e72a:	6863      	ldr	r3, [r4, #4]
 801e72c:	1ac0      	subs	r0, r0, r3
 801e72e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e730:	b10b      	cbz	r3, 801e736 <__sflush_r+0x46>
 801e732:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e734:	1ac0      	subs	r0, r0, r3
 801e736:	2300      	movs	r3, #0
 801e738:	4602      	mov	r2, r0
 801e73a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e73c:	6a21      	ldr	r1, [r4, #32]
 801e73e:	4628      	mov	r0, r5
 801e740:	47b0      	blx	r6
 801e742:	1c43      	adds	r3, r0, #1
 801e744:	89a3      	ldrh	r3, [r4, #12]
 801e746:	d106      	bne.n	801e756 <__sflush_r+0x66>
 801e748:	6829      	ldr	r1, [r5, #0]
 801e74a:	291d      	cmp	r1, #29
 801e74c:	d82c      	bhi.n	801e7a8 <__sflush_r+0xb8>
 801e74e:	4a2a      	ldr	r2, [pc, #168]	; (801e7f8 <__sflush_r+0x108>)
 801e750:	40ca      	lsrs	r2, r1
 801e752:	07d6      	lsls	r6, r2, #31
 801e754:	d528      	bpl.n	801e7a8 <__sflush_r+0xb8>
 801e756:	2200      	movs	r2, #0
 801e758:	6062      	str	r2, [r4, #4]
 801e75a:	04d9      	lsls	r1, r3, #19
 801e75c:	6922      	ldr	r2, [r4, #16]
 801e75e:	6022      	str	r2, [r4, #0]
 801e760:	d504      	bpl.n	801e76c <__sflush_r+0x7c>
 801e762:	1c42      	adds	r2, r0, #1
 801e764:	d101      	bne.n	801e76a <__sflush_r+0x7a>
 801e766:	682b      	ldr	r3, [r5, #0]
 801e768:	b903      	cbnz	r3, 801e76c <__sflush_r+0x7c>
 801e76a:	6560      	str	r0, [r4, #84]	; 0x54
 801e76c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e76e:	602f      	str	r7, [r5, #0]
 801e770:	2900      	cmp	r1, #0
 801e772:	d0ca      	beq.n	801e70a <__sflush_r+0x1a>
 801e774:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e778:	4299      	cmp	r1, r3
 801e77a:	d002      	beq.n	801e782 <__sflush_r+0x92>
 801e77c:	4628      	mov	r0, r5
 801e77e:	f000 f9d7 	bl	801eb30 <_free_r>
 801e782:	2000      	movs	r0, #0
 801e784:	6360      	str	r0, [r4, #52]	; 0x34
 801e786:	e7c1      	b.n	801e70c <__sflush_r+0x1c>
 801e788:	6a21      	ldr	r1, [r4, #32]
 801e78a:	2301      	movs	r3, #1
 801e78c:	4628      	mov	r0, r5
 801e78e:	47b0      	blx	r6
 801e790:	1c41      	adds	r1, r0, #1
 801e792:	d1c7      	bne.n	801e724 <__sflush_r+0x34>
 801e794:	682b      	ldr	r3, [r5, #0]
 801e796:	2b00      	cmp	r3, #0
 801e798:	d0c4      	beq.n	801e724 <__sflush_r+0x34>
 801e79a:	2b1d      	cmp	r3, #29
 801e79c:	d001      	beq.n	801e7a2 <__sflush_r+0xb2>
 801e79e:	2b16      	cmp	r3, #22
 801e7a0:	d101      	bne.n	801e7a6 <__sflush_r+0xb6>
 801e7a2:	602f      	str	r7, [r5, #0]
 801e7a4:	e7b1      	b.n	801e70a <__sflush_r+0x1a>
 801e7a6:	89a3      	ldrh	r3, [r4, #12]
 801e7a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e7ac:	81a3      	strh	r3, [r4, #12]
 801e7ae:	e7ad      	b.n	801e70c <__sflush_r+0x1c>
 801e7b0:	690f      	ldr	r7, [r1, #16]
 801e7b2:	2f00      	cmp	r7, #0
 801e7b4:	d0a9      	beq.n	801e70a <__sflush_r+0x1a>
 801e7b6:	0793      	lsls	r3, r2, #30
 801e7b8:	680e      	ldr	r6, [r1, #0]
 801e7ba:	bf08      	it	eq
 801e7bc:	694b      	ldreq	r3, [r1, #20]
 801e7be:	600f      	str	r7, [r1, #0]
 801e7c0:	bf18      	it	ne
 801e7c2:	2300      	movne	r3, #0
 801e7c4:	eba6 0807 	sub.w	r8, r6, r7
 801e7c8:	608b      	str	r3, [r1, #8]
 801e7ca:	f1b8 0f00 	cmp.w	r8, #0
 801e7ce:	dd9c      	ble.n	801e70a <__sflush_r+0x1a>
 801e7d0:	6a21      	ldr	r1, [r4, #32]
 801e7d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e7d4:	4643      	mov	r3, r8
 801e7d6:	463a      	mov	r2, r7
 801e7d8:	4628      	mov	r0, r5
 801e7da:	47b0      	blx	r6
 801e7dc:	2800      	cmp	r0, #0
 801e7de:	dc06      	bgt.n	801e7ee <__sflush_r+0xfe>
 801e7e0:	89a3      	ldrh	r3, [r4, #12]
 801e7e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e7e6:	81a3      	strh	r3, [r4, #12]
 801e7e8:	f04f 30ff 	mov.w	r0, #4294967295
 801e7ec:	e78e      	b.n	801e70c <__sflush_r+0x1c>
 801e7ee:	4407      	add	r7, r0
 801e7f0:	eba8 0800 	sub.w	r8, r8, r0
 801e7f4:	e7e9      	b.n	801e7ca <__sflush_r+0xda>
 801e7f6:	bf00      	nop
 801e7f8:	20400001 	.word	0x20400001

0801e7fc <_fflush_r>:
 801e7fc:	b538      	push	{r3, r4, r5, lr}
 801e7fe:	690b      	ldr	r3, [r1, #16]
 801e800:	4605      	mov	r5, r0
 801e802:	460c      	mov	r4, r1
 801e804:	b913      	cbnz	r3, 801e80c <_fflush_r+0x10>
 801e806:	2500      	movs	r5, #0
 801e808:	4628      	mov	r0, r5
 801e80a:	bd38      	pop	{r3, r4, r5, pc}
 801e80c:	b118      	cbz	r0, 801e816 <_fflush_r+0x1a>
 801e80e:	6983      	ldr	r3, [r0, #24]
 801e810:	b90b      	cbnz	r3, 801e816 <_fflush_r+0x1a>
 801e812:	f000 f887 	bl	801e924 <__sinit>
 801e816:	4b14      	ldr	r3, [pc, #80]	; (801e868 <_fflush_r+0x6c>)
 801e818:	429c      	cmp	r4, r3
 801e81a:	d11b      	bne.n	801e854 <_fflush_r+0x58>
 801e81c:	686c      	ldr	r4, [r5, #4]
 801e81e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e822:	2b00      	cmp	r3, #0
 801e824:	d0ef      	beq.n	801e806 <_fflush_r+0xa>
 801e826:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e828:	07d0      	lsls	r0, r2, #31
 801e82a:	d404      	bmi.n	801e836 <_fflush_r+0x3a>
 801e82c:	0599      	lsls	r1, r3, #22
 801e82e:	d402      	bmi.n	801e836 <_fflush_r+0x3a>
 801e830:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e832:	f000 f915 	bl	801ea60 <__retarget_lock_acquire_recursive>
 801e836:	4628      	mov	r0, r5
 801e838:	4621      	mov	r1, r4
 801e83a:	f7ff ff59 	bl	801e6f0 <__sflush_r>
 801e83e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e840:	07da      	lsls	r2, r3, #31
 801e842:	4605      	mov	r5, r0
 801e844:	d4e0      	bmi.n	801e808 <_fflush_r+0xc>
 801e846:	89a3      	ldrh	r3, [r4, #12]
 801e848:	059b      	lsls	r3, r3, #22
 801e84a:	d4dd      	bmi.n	801e808 <_fflush_r+0xc>
 801e84c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e84e:	f000 f908 	bl	801ea62 <__retarget_lock_release_recursive>
 801e852:	e7d9      	b.n	801e808 <_fflush_r+0xc>
 801e854:	4b05      	ldr	r3, [pc, #20]	; (801e86c <_fflush_r+0x70>)
 801e856:	429c      	cmp	r4, r3
 801e858:	d101      	bne.n	801e85e <_fflush_r+0x62>
 801e85a:	68ac      	ldr	r4, [r5, #8]
 801e85c:	e7df      	b.n	801e81e <_fflush_r+0x22>
 801e85e:	4b04      	ldr	r3, [pc, #16]	; (801e870 <_fflush_r+0x74>)
 801e860:	429c      	cmp	r4, r3
 801e862:	bf08      	it	eq
 801e864:	68ec      	ldreq	r4, [r5, #12]
 801e866:	e7da      	b.n	801e81e <_fflush_r+0x22>
 801e868:	08029fe4 	.word	0x08029fe4
 801e86c:	0802a004 	.word	0x0802a004
 801e870:	08029fc4 	.word	0x08029fc4

0801e874 <std>:
 801e874:	2300      	movs	r3, #0
 801e876:	b510      	push	{r4, lr}
 801e878:	4604      	mov	r4, r0
 801e87a:	e9c0 3300 	strd	r3, r3, [r0]
 801e87e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e882:	6083      	str	r3, [r0, #8]
 801e884:	8181      	strh	r1, [r0, #12]
 801e886:	6643      	str	r3, [r0, #100]	; 0x64
 801e888:	81c2      	strh	r2, [r0, #14]
 801e88a:	6183      	str	r3, [r0, #24]
 801e88c:	4619      	mov	r1, r3
 801e88e:	2208      	movs	r2, #8
 801e890:	305c      	adds	r0, #92	; 0x5c
 801e892:	f7ff fb6f 	bl	801df74 <memset>
 801e896:	4b05      	ldr	r3, [pc, #20]	; (801e8ac <std+0x38>)
 801e898:	6263      	str	r3, [r4, #36]	; 0x24
 801e89a:	4b05      	ldr	r3, [pc, #20]	; (801e8b0 <std+0x3c>)
 801e89c:	62a3      	str	r3, [r4, #40]	; 0x28
 801e89e:	4b05      	ldr	r3, [pc, #20]	; (801e8b4 <std+0x40>)
 801e8a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e8a2:	4b05      	ldr	r3, [pc, #20]	; (801e8b8 <std+0x44>)
 801e8a4:	6224      	str	r4, [r4, #32]
 801e8a6:	6323      	str	r3, [r4, #48]	; 0x30
 801e8a8:	bd10      	pop	{r4, pc}
 801e8aa:	bf00      	nop
 801e8ac:	0801ed99 	.word	0x0801ed99
 801e8b0:	0801edbb 	.word	0x0801edbb
 801e8b4:	0801edf3 	.word	0x0801edf3
 801e8b8:	0801ee17 	.word	0x0801ee17

0801e8bc <_cleanup_r>:
 801e8bc:	4901      	ldr	r1, [pc, #4]	; (801e8c4 <_cleanup_r+0x8>)
 801e8be:	f000 b8af 	b.w	801ea20 <_fwalk_reent>
 801e8c2:	bf00      	nop
 801e8c4:	0801e7fd 	.word	0x0801e7fd

0801e8c8 <__sfmoreglue>:
 801e8c8:	b570      	push	{r4, r5, r6, lr}
 801e8ca:	2268      	movs	r2, #104	; 0x68
 801e8cc:	1e4d      	subs	r5, r1, #1
 801e8ce:	4355      	muls	r5, r2
 801e8d0:	460e      	mov	r6, r1
 801e8d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801e8d6:	f000 f997 	bl	801ec08 <_malloc_r>
 801e8da:	4604      	mov	r4, r0
 801e8dc:	b140      	cbz	r0, 801e8f0 <__sfmoreglue+0x28>
 801e8de:	2100      	movs	r1, #0
 801e8e0:	e9c0 1600 	strd	r1, r6, [r0]
 801e8e4:	300c      	adds	r0, #12
 801e8e6:	60a0      	str	r0, [r4, #8]
 801e8e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801e8ec:	f7ff fb42 	bl	801df74 <memset>
 801e8f0:	4620      	mov	r0, r4
 801e8f2:	bd70      	pop	{r4, r5, r6, pc}

0801e8f4 <__sfp_lock_acquire>:
 801e8f4:	4801      	ldr	r0, [pc, #4]	; (801e8fc <__sfp_lock_acquire+0x8>)
 801e8f6:	f000 b8b3 	b.w	801ea60 <__retarget_lock_acquire_recursive>
 801e8fa:	bf00      	nop
 801e8fc:	200007f1 	.word	0x200007f1

0801e900 <__sfp_lock_release>:
 801e900:	4801      	ldr	r0, [pc, #4]	; (801e908 <__sfp_lock_release+0x8>)
 801e902:	f000 b8ae 	b.w	801ea62 <__retarget_lock_release_recursive>
 801e906:	bf00      	nop
 801e908:	200007f1 	.word	0x200007f1

0801e90c <__sinit_lock_acquire>:
 801e90c:	4801      	ldr	r0, [pc, #4]	; (801e914 <__sinit_lock_acquire+0x8>)
 801e90e:	f000 b8a7 	b.w	801ea60 <__retarget_lock_acquire_recursive>
 801e912:	bf00      	nop
 801e914:	200007f2 	.word	0x200007f2

0801e918 <__sinit_lock_release>:
 801e918:	4801      	ldr	r0, [pc, #4]	; (801e920 <__sinit_lock_release+0x8>)
 801e91a:	f000 b8a2 	b.w	801ea62 <__retarget_lock_release_recursive>
 801e91e:	bf00      	nop
 801e920:	200007f2 	.word	0x200007f2

0801e924 <__sinit>:
 801e924:	b510      	push	{r4, lr}
 801e926:	4604      	mov	r4, r0
 801e928:	f7ff fff0 	bl	801e90c <__sinit_lock_acquire>
 801e92c:	69a3      	ldr	r3, [r4, #24]
 801e92e:	b11b      	cbz	r3, 801e938 <__sinit+0x14>
 801e930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e934:	f7ff bff0 	b.w	801e918 <__sinit_lock_release>
 801e938:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801e93c:	6523      	str	r3, [r4, #80]	; 0x50
 801e93e:	4b13      	ldr	r3, [pc, #76]	; (801e98c <__sinit+0x68>)
 801e940:	4a13      	ldr	r2, [pc, #76]	; (801e990 <__sinit+0x6c>)
 801e942:	681b      	ldr	r3, [r3, #0]
 801e944:	62a2      	str	r2, [r4, #40]	; 0x28
 801e946:	42a3      	cmp	r3, r4
 801e948:	bf04      	itt	eq
 801e94a:	2301      	moveq	r3, #1
 801e94c:	61a3      	streq	r3, [r4, #24]
 801e94e:	4620      	mov	r0, r4
 801e950:	f000 f820 	bl	801e994 <__sfp>
 801e954:	6060      	str	r0, [r4, #4]
 801e956:	4620      	mov	r0, r4
 801e958:	f000 f81c 	bl	801e994 <__sfp>
 801e95c:	60a0      	str	r0, [r4, #8]
 801e95e:	4620      	mov	r0, r4
 801e960:	f000 f818 	bl	801e994 <__sfp>
 801e964:	2200      	movs	r2, #0
 801e966:	60e0      	str	r0, [r4, #12]
 801e968:	2104      	movs	r1, #4
 801e96a:	6860      	ldr	r0, [r4, #4]
 801e96c:	f7ff ff82 	bl	801e874 <std>
 801e970:	68a0      	ldr	r0, [r4, #8]
 801e972:	2201      	movs	r2, #1
 801e974:	2109      	movs	r1, #9
 801e976:	f7ff ff7d 	bl	801e874 <std>
 801e97a:	68e0      	ldr	r0, [r4, #12]
 801e97c:	2202      	movs	r2, #2
 801e97e:	2112      	movs	r1, #18
 801e980:	f7ff ff78 	bl	801e874 <std>
 801e984:	2301      	movs	r3, #1
 801e986:	61a3      	str	r3, [r4, #24]
 801e988:	e7d2      	b.n	801e930 <__sinit+0xc>
 801e98a:	bf00      	nop
 801e98c:	08029f8c 	.word	0x08029f8c
 801e990:	0801e8bd 	.word	0x0801e8bd

0801e994 <__sfp>:
 801e994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e996:	4607      	mov	r7, r0
 801e998:	f7ff ffac 	bl	801e8f4 <__sfp_lock_acquire>
 801e99c:	4b1e      	ldr	r3, [pc, #120]	; (801ea18 <__sfp+0x84>)
 801e99e:	681e      	ldr	r6, [r3, #0]
 801e9a0:	69b3      	ldr	r3, [r6, #24]
 801e9a2:	b913      	cbnz	r3, 801e9aa <__sfp+0x16>
 801e9a4:	4630      	mov	r0, r6
 801e9a6:	f7ff ffbd 	bl	801e924 <__sinit>
 801e9aa:	3648      	adds	r6, #72	; 0x48
 801e9ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801e9b0:	3b01      	subs	r3, #1
 801e9b2:	d503      	bpl.n	801e9bc <__sfp+0x28>
 801e9b4:	6833      	ldr	r3, [r6, #0]
 801e9b6:	b30b      	cbz	r3, 801e9fc <__sfp+0x68>
 801e9b8:	6836      	ldr	r6, [r6, #0]
 801e9ba:	e7f7      	b.n	801e9ac <__sfp+0x18>
 801e9bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801e9c0:	b9d5      	cbnz	r5, 801e9f8 <__sfp+0x64>
 801e9c2:	4b16      	ldr	r3, [pc, #88]	; (801ea1c <__sfp+0x88>)
 801e9c4:	60e3      	str	r3, [r4, #12]
 801e9c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801e9ca:	6665      	str	r5, [r4, #100]	; 0x64
 801e9cc:	f000 f847 	bl	801ea5e <__retarget_lock_init_recursive>
 801e9d0:	f7ff ff96 	bl	801e900 <__sfp_lock_release>
 801e9d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801e9d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801e9dc:	6025      	str	r5, [r4, #0]
 801e9de:	61a5      	str	r5, [r4, #24]
 801e9e0:	2208      	movs	r2, #8
 801e9e2:	4629      	mov	r1, r5
 801e9e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801e9e8:	f7ff fac4 	bl	801df74 <memset>
 801e9ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801e9f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801e9f4:	4620      	mov	r0, r4
 801e9f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e9f8:	3468      	adds	r4, #104	; 0x68
 801e9fa:	e7d9      	b.n	801e9b0 <__sfp+0x1c>
 801e9fc:	2104      	movs	r1, #4
 801e9fe:	4638      	mov	r0, r7
 801ea00:	f7ff ff62 	bl	801e8c8 <__sfmoreglue>
 801ea04:	4604      	mov	r4, r0
 801ea06:	6030      	str	r0, [r6, #0]
 801ea08:	2800      	cmp	r0, #0
 801ea0a:	d1d5      	bne.n	801e9b8 <__sfp+0x24>
 801ea0c:	f7ff ff78 	bl	801e900 <__sfp_lock_release>
 801ea10:	230c      	movs	r3, #12
 801ea12:	603b      	str	r3, [r7, #0]
 801ea14:	e7ee      	b.n	801e9f4 <__sfp+0x60>
 801ea16:	bf00      	nop
 801ea18:	08029f8c 	.word	0x08029f8c
 801ea1c:	ffff0001 	.word	0xffff0001

0801ea20 <_fwalk_reent>:
 801ea20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ea24:	4606      	mov	r6, r0
 801ea26:	4688      	mov	r8, r1
 801ea28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801ea2c:	2700      	movs	r7, #0
 801ea2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ea32:	f1b9 0901 	subs.w	r9, r9, #1
 801ea36:	d505      	bpl.n	801ea44 <_fwalk_reent+0x24>
 801ea38:	6824      	ldr	r4, [r4, #0]
 801ea3a:	2c00      	cmp	r4, #0
 801ea3c:	d1f7      	bne.n	801ea2e <_fwalk_reent+0xe>
 801ea3e:	4638      	mov	r0, r7
 801ea40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ea44:	89ab      	ldrh	r3, [r5, #12]
 801ea46:	2b01      	cmp	r3, #1
 801ea48:	d907      	bls.n	801ea5a <_fwalk_reent+0x3a>
 801ea4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ea4e:	3301      	adds	r3, #1
 801ea50:	d003      	beq.n	801ea5a <_fwalk_reent+0x3a>
 801ea52:	4629      	mov	r1, r5
 801ea54:	4630      	mov	r0, r6
 801ea56:	47c0      	blx	r8
 801ea58:	4307      	orrs	r7, r0
 801ea5a:	3568      	adds	r5, #104	; 0x68
 801ea5c:	e7e9      	b.n	801ea32 <_fwalk_reent+0x12>

0801ea5e <__retarget_lock_init_recursive>:
 801ea5e:	4770      	bx	lr

0801ea60 <__retarget_lock_acquire_recursive>:
 801ea60:	4770      	bx	lr

0801ea62 <__retarget_lock_release_recursive>:
 801ea62:	4770      	bx	lr

0801ea64 <__swhatbuf_r>:
 801ea64:	b570      	push	{r4, r5, r6, lr}
 801ea66:	460e      	mov	r6, r1
 801ea68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ea6c:	2900      	cmp	r1, #0
 801ea6e:	b096      	sub	sp, #88	; 0x58
 801ea70:	4614      	mov	r4, r2
 801ea72:	461d      	mov	r5, r3
 801ea74:	da08      	bge.n	801ea88 <__swhatbuf_r+0x24>
 801ea76:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801ea7a:	2200      	movs	r2, #0
 801ea7c:	602a      	str	r2, [r5, #0]
 801ea7e:	061a      	lsls	r2, r3, #24
 801ea80:	d410      	bmi.n	801eaa4 <__swhatbuf_r+0x40>
 801ea82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ea86:	e00e      	b.n	801eaa6 <__swhatbuf_r+0x42>
 801ea88:	466a      	mov	r2, sp
 801ea8a:	f000 f9eb 	bl	801ee64 <_fstat_r>
 801ea8e:	2800      	cmp	r0, #0
 801ea90:	dbf1      	blt.n	801ea76 <__swhatbuf_r+0x12>
 801ea92:	9a01      	ldr	r2, [sp, #4]
 801ea94:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801ea98:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801ea9c:	425a      	negs	r2, r3
 801ea9e:	415a      	adcs	r2, r3
 801eaa0:	602a      	str	r2, [r5, #0]
 801eaa2:	e7ee      	b.n	801ea82 <__swhatbuf_r+0x1e>
 801eaa4:	2340      	movs	r3, #64	; 0x40
 801eaa6:	2000      	movs	r0, #0
 801eaa8:	6023      	str	r3, [r4, #0]
 801eaaa:	b016      	add	sp, #88	; 0x58
 801eaac:	bd70      	pop	{r4, r5, r6, pc}
	...

0801eab0 <__smakebuf_r>:
 801eab0:	898b      	ldrh	r3, [r1, #12]
 801eab2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801eab4:	079d      	lsls	r5, r3, #30
 801eab6:	4606      	mov	r6, r0
 801eab8:	460c      	mov	r4, r1
 801eaba:	d507      	bpl.n	801eacc <__smakebuf_r+0x1c>
 801eabc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801eac0:	6023      	str	r3, [r4, #0]
 801eac2:	6123      	str	r3, [r4, #16]
 801eac4:	2301      	movs	r3, #1
 801eac6:	6163      	str	r3, [r4, #20]
 801eac8:	b002      	add	sp, #8
 801eaca:	bd70      	pop	{r4, r5, r6, pc}
 801eacc:	ab01      	add	r3, sp, #4
 801eace:	466a      	mov	r2, sp
 801ead0:	f7ff ffc8 	bl	801ea64 <__swhatbuf_r>
 801ead4:	9900      	ldr	r1, [sp, #0]
 801ead6:	4605      	mov	r5, r0
 801ead8:	4630      	mov	r0, r6
 801eada:	f000 f895 	bl	801ec08 <_malloc_r>
 801eade:	b948      	cbnz	r0, 801eaf4 <__smakebuf_r+0x44>
 801eae0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801eae4:	059a      	lsls	r2, r3, #22
 801eae6:	d4ef      	bmi.n	801eac8 <__smakebuf_r+0x18>
 801eae8:	f023 0303 	bic.w	r3, r3, #3
 801eaec:	f043 0302 	orr.w	r3, r3, #2
 801eaf0:	81a3      	strh	r3, [r4, #12]
 801eaf2:	e7e3      	b.n	801eabc <__smakebuf_r+0xc>
 801eaf4:	4b0d      	ldr	r3, [pc, #52]	; (801eb2c <__smakebuf_r+0x7c>)
 801eaf6:	62b3      	str	r3, [r6, #40]	; 0x28
 801eaf8:	89a3      	ldrh	r3, [r4, #12]
 801eafa:	6020      	str	r0, [r4, #0]
 801eafc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801eb00:	81a3      	strh	r3, [r4, #12]
 801eb02:	9b00      	ldr	r3, [sp, #0]
 801eb04:	6163      	str	r3, [r4, #20]
 801eb06:	9b01      	ldr	r3, [sp, #4]
 801eb08:	6120      	str	r0, [r4, #16]
 801eb0a:	b15b      	cbz	r3, 801eb24 <__smakebuf_r+0x74>
 801eb0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801eb10:	4630      	mov	r0, r6
 801eb12:	f000 f9b9 	bl	801ee88 <_isatty_r>
 801eb16:	b128      	cbz	r0, 801eb24 <__smakebuf_r+0x74>
 801eb18:	89a3      	ldrh	r3, [r4, #12]
 801eb1a:	f023 0303 	bic.w	r3, r3, #3
 801eb1e:	f043 0301 	orr.w	r3, r3, #1
 801eb22:	81a3      	strh	r3, [r4, #12]
 801eb24:	89a0      	ldrh	r0, [r4, #12]
 801eb26:	4305      	orrs	r5, r0
 801eb28:	81a5      	strh	r5, [r4, #12]
 801eb2a:	e7cd      	b.n	801eac8 <__smakebuf_r+0x18>
 801eb2c:	0801e8bd 	.word	0x0801e8bd

0801eb30 <_free_r>:
 801eb30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801eb32:	2900      	cmp	r1, #0
 801eb34:	d044      	beq.n	801ebc0 <_free_r+0x90>
 801eb36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801eb3a:	9001      	str	r0, [sp, #4]
 801eb3c:	2b00      	cmp	r3, #0
 801eb3e:	f1a1 0404 	sub.w	r4, r1, #4
 801eb42:	bfb8      	it	lt
 801eb44:	18e4      	addlt	r4, r4, r3
 801eb46:	f000 f9c1 	bl	801eecc <__malloc_lock>
 801eb4a:	4a1e      	ldr	r2, [pc, #120]	; (801ebc4 <_free_r+0x94>)
 801eb4c:	9801      	ldr	r0, [sp, #4]
 801eb4e:	6813      	ldr	r3, [r2, #0]
 801eb50:	b933      	cbnz	r3, 801eb60 <_free_r+0x30>
 801eb52:	6063      	str	r3, [r4, #4]
 801eb54:	6014      	str	r4, [r2, #0]
 801eb56:	b003      	add	sp, #12
 801eb58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801eb5c:	f000 b9bc 	b.w	801eed8 <__malloc_unlock>
 801eb60:	42a3      	cmp	r3, r4
 801eb62:	d908      	bls.n	801eb76 <_free_r+0x46>
 801eb64:	6825      	ldr	r5, [r4, #0]
 801eb66:	1961      	adds	r1, r4, r5
 801eb68:	428b      	cmp	r3, r1
 801eb6a:	bf01      	itttt	eq
 801eb6c:	6819      	ldreq	r1, [r3, #0]
 801eb6e:	685b      	ldreq	r3, [r3, #4]
 801eb70:	1949      	addeq	r1, r1, r5
 801eb72:	6021      	streq	r1, [r4, #0]
 801eb74:	e7ed      	b.n	801eb52 <_free_r+0x22>
 801eb76:	461a      	mov	r2, r3
 801eb78:	685b      	ldr	r3, [r3, #4]
 801eb7a:	b10b      	cbz	r3, 801eb80 <_free_r+0x50>
 801eb7c:	42a3      	cmp	r3, r4
 801eb7e:	d9fa      	bls.n	801eb76 <_free_r+0x46>
 801eb80:	6811      	ldr	r1, [r2, #0]
 801eb82:	1855      	adds	r5, r2, r1
 801eb84:	42a5      	cmp	r5, r4
 801eb86:	d10b      	bne.n	801eba0 <_free_r+0x70>
 801eb88:	6824      	ldr	r4, [r4, #0]
 801eb8a:	4421      	add	r1, r4
 801eb8c:	1854      	adds	r4, r2, r1
 801eb8e:	42a3      	cmp	r3, r4
 801eb90:	6011      	str	r1, [r2, #0]
 801eb92:	d1e0      	bne.n	801eb56 <_free_r+0x26>
 801eb94:	681c      	ldr	r4, [r3, #0]
 801eb96:	685b      	ldr	r3, [r3, #4]
 801eb98:	6053      	str	r3, [r2, #4]
 801eb9a:	4421      	add	r1, r4
 801eb9c:	6011      	str	r1, [r2, #0]
 801eb9e:	e7da      	b.n	801eb56 <_free_r+0x26>
 801eba0:	d902      	bls.n	801eba8 <_free_r+0x78>
 801eba2:	230c      	movs	r3, #12
 801eba4:	6003      	str	r3, [r0, #0]
 801eba6:	e7d6      	b.n	801eb56 <_free_r+0x26>
 801eba8:	6825      	ldr	r5, [r4, #0]
 801ebaa:	1961      	adds	r1, r4, r5
 801ebac:	428b      	cmp	r3, r1
 801ebae:	bf04      	itt	eq
 801ebb0:	6819      	ldreq	r1, [r3, #0]
 801ebb2:	685b      	ldreq	r3, [r3, #4]
 801ebb4:	6063      	str	r3, [r4, #4]
 801ebb6:	bf04      	itt	eq
 801ebb8:	1949      	addeq	r1, r1, r5
 801ebba:	6021      	streq	r1, [r4, #0]
 801ebbc:	6054      	str	r4, [r2, #4]
 801ebbe:	e7ca      	b.n	801eb56 <_free_r+0x26>
 801ebc0:	b003      	add	sp, #12
 801ebc2:	bd30      	pop	{r4, r5, pc}
 801ebc4:	200007f4 	.word	0x200007f4

0801ebc8 <sbrk_aligned>:
 801ebc8:	b570      	push	{r4, r5, r6, lr}
 801ebca:	4e0e      	ldr	r6, [pc, #56]	; (801ec04 <sbrk_aligned+0x3c>)
 801ebcc:	460c      	mov	r4, r1
 801ebce:	6831      	ldr	r1, [r6, #0]
 801ebd0:	4605      	mov	r5, r0
 801ebd2:	b911      	cbnz	r1, 801ebda <sbrk_aligned+0x12>
 801ebd4:	f000 f88c 	bl	801ecf0 <_sbrk_r>
 801ebd8:	6030      	str	r0, [r6, #0]
 801ebda:	4621      	mov	r1, r4
 801ebdc:	4628      	mov	r0, r5
 801ebde:	f000 f887 	bl	801ecf0 <_sbrk_r>
 801ebe2:	1c43      	adds	r3, r0, #1
 801ebe4:	d00a      	beq.n	801ebfc <sbrk_aligned+0x34>
 801ebe6:	1cc4      	adds	r4, r0, #3
 801ebe8:	f024 0403 	bic.w	r4, r4, #3
 801ebec:	42a0      	cmp	r0, r4
 801ebee:	d007      	beq.n	801ec00 <sbrk_aligned+0x38>
 801ebf0:	1a21      	subs	r1, r4, r0
 801ebf2:	4628      	mov	r0, r5
 801ebf4:	f000 f87c 	bl	801ecf0 <_sbrk_r>
 801ebf8:	3001      	adds	r0, #1
 801ebfa:	d101      	bne.n	801ec00 <sbrk_aligned+0x38>
 801ebfc:	f04f 34ff 	mov.w	r4, #4294967295
 801ec00:	4620      	mov	r0, r4
 801ec02:	bd70      	pop	{r4, r5, r6, pc}
 801ec04:	200007f8 	.word	0x200007f8

0801ec08 <_malloc_r>:
 801ec08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ec0c:	1ccd      	adds	r5, r1, #3
 801ec0e:	f025 0503 	bic.w	r5, r5, #3
 801ec12:	3508      	adds	r5, #8
 801ec14:	2d0c      	cmp	r5, #12
 801ec16:	bf38      	it	cc
 801ec18:	250c      	movcc	r5, #12
 801ec1a:	2d00      	cmp	r5, #0
 801ec1c:	4607      	mov	r7, r0
 801ec1e:	db01      	blt.n	801ec24 <_malloc_r+0x1c>
 801ec20:	42a9      	cmp	r1, r5
 801ec22:	d905      	bls.n	801ec30 <_malloc_r+0x28>
 801ec24:	230c      	movs	r3, #12
 801ec26:	603b      	str	r3, [r7, #0]
 801ec28:	2600      	movs	r6, #0
 801ec2a:	4630      	mov	r0, r6
 801ec2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ec30:	4e2e      	ldr	r6, [pc, #184]	; (801ecec <_malloc_r+0xe4>)
 801ec32:	f000 f94b 	bl	801eecc <__malloc_lock>
 801ec36:	6833      	ldr	r3, [r6, #0]
 801ec38:	461c      	mov	r4, r3
 801ec3a:	bb34      	cbnz	r4, 801ec8a <_malloc_r+0x82>
 801ec3c:	4629      	mov	r1, r5
 801ec3e:	4638      	mov	r0, r7
 801ec40:	f7ff ffc2 	bl	801ebc8 <sbrk_aligned>
 801ec44:	1c43      	adds	r3, r0, #1
 801ec46:	4604      	mov	r4, r0
 801ec48:	d14d      	bne.n	801ece6 <_malloc_r+0xde>
 801ec4a:	6834      	ldr	r4, [r6, #0]
 801ec4c:	4626      	mov	r6, r4
 801ec4e:	2e00      	cmp	r6, #0
 801ec50:	d140      	bne.n	801ecd4 <_malloc_r+0xcc>
 801ec52:	6823      	ldr	r3, [r4, #0]
 801ec54:	4631      	mov	r1, r6
 801ec56:	4638      	mov	r0, r7
 801ec58:	eb04 0803 	add.w	r8, r4, r3
 801ec5c:	f000 f848 	bl	801ecf0 <_sbrk_r>
 801ec60:	4580      	cmp	r8, r0
 801ec62:	d13a      	bne.n	801ecda <_malloc_r+0xd2>
 801ec64:	6821      	ldr	r1, [r4, #0]
 801ec66:	3503      	adds	r5, #3
 801ec68:	1a6d      	subs	r5, r5, r1
 801ec6a:	f025 0503 	bic.w	r5, r5, #3
 801ec6e:	3508      	adds	r5, #8
 801ec70:	2d0c      	cmp	r5, #12
 801ec72:	bf38      	it	cc
 801ec74:	250c      	movcc	r5, #12
 801ec76:	4629      	mov	r1, r5
 801ec78:	4638      	mov	r0, r7
 801ec7a:	f7ff ffa5 	bl	801ebc8 <sbrk_aligned>
 801ec7e:	3001      	adds	r0, #1
 801ec80:	d02b      	beq.n	801ecda <_malloc_r+0xd2>
 801ec82:	6823      	ldr	r3, [r4, #0]
 801ec84:	442b      	add	r3, r5
 801ec86:	6023      	str	r3, [r4, #0]
 801ec88:	e00e      	b.n	801eca8 <_malloc_r+0xa0>
 801ec8a:	6822      	ldr	r2, [r4, #0]
 801ec8c:	1b52      	subs	r2, r2, r5
 801ec8e:	d41e      	bmi.n	801ecce <_malloc_r+0xc6>
 801ec90:	2a0b      	cmp	r2, #11
 801ec92:	d916      	bls.n	801ecc2 <_malloc_r+0xba>
 801ec94:	1961      	adds	r1, r4, r5
 801ec96:	42a3      	cmp	r3, r4
 801ec98:	6025      	str	r5, [r4, #0]
 801ec9a:	bf18      	it	ne
 801ec9c:	6059      	strne	r1, [r3, #4]
 801ec9e:	6863      	ldr	r3, [r4, #4]
 801eca0:	bf08      	it	eq
 801eca2:	6031      	streq	r1, [r6, #0]
 801eca4:	5162      	str	r2, [r4, r5]
 801eca6:	604b      	str	r3, [r1, #4]
 801eca8:	4638      	mov	r0, r7
 801ecaa:	f104 060b 	add.w	r6, r4, #11
 801ecae:	f000 f913 	bl	801eed8 <__malloc_unlock>
 801ecb2:	f026 0607 	bic.w	r6, r6, #7
 801ecb6:	1d23      	adds	r3, r4, #4
 801ecb8:	1af2      	subs	r2, r6, r3
 801ecba:	d0b6      	beq.n	801ec2a <_malloc_r+0x22>
 801ecbc:	1b9b      	subs	r3, r3, r6
 801ecbe:	50a3      	str	r3, [r4, r2]
 801ecc0:	e7b3      	b.n	801ec2a <_malloc_r+0x22>
 801ecc2:	6862      	ldr	r2, [r4, #4]
 801ecc4:	42a3      	cmp	r3, r4
 801ecc6:	bf0c      	ite	eq
 801ecc8:	6032      	streq	r2, [r6, #0]
 801ecca:	605a      	strne	r2, [r3, #4]
 801eccc:	e7ec      	b.n	801eca8 <_malloc_r+0xa0>
 801ecce:	4623      	mov	r3, r4
 801ecd0:	6864      	ldr	r4, [r4, #4]
 801ecd2:	e7b2      	b.n	801ec3a <_malloc_r+0x32>
 801ecd4:	4634      	mov	r4, r6
 801ecd6:	6876      	ldr	r6, [r6, #4]
 801ecd8:	e7b9      	b.n	801ec4e <_malloc_r+0x46>
 801ecda:	230c      	movs	r3, #12
 801ecdc:	603b      	str	r3, [r7, #0]
 801ecde:	4638      	mov	r0, r7
 801ece0:	f000 f8fa 	bl	801eed8 <__malloc_unlock>
 801ece4:	e7a1      	b.n	801ec2a <_malloc_r+0x22>
 801ece6:	6025      	str	r5, [r4, #0]
 801ece8:	e7de      	b.n	801eca8 <_malloc_r+0xa0>
 801ecea:	bf00      	nop
 801ecec:	200007f4 	.word	0x200007f4

0801ecf0 <_sbrk_r>:
 801ecf0:	b538      	push	{r3, r4, r5, lr}
 801ecf2:	4d06      	ldr	r5, [pc, #24]	; (801ed0c <_sbrk_r+0x1c>)
 801ecf4:	2300      	movs	r3, #0
 801ecf6:	4604      	mov	r4, r0
 801ecf8:	4608      	mov	r0, r1
 801ecfa:	602b      	str	r3, [r5, #0]
 801ecfc:	f7f7 fc54 	bl	80165a8 <_sbrk>
 801ed00:	1c43      	adds	r3, r0, #1
 801ed02:	d102      	bne.n	801ed0a <_sbrk_r+0x1a>
 801ed04:	682b      	ldr	r3, [r5, #0]
 801ed06:	b103      	cbz	r3, 801ed0a <_sbrk_r+0x1a>
 801ed08:	6023      	str	r3, [r4, #0]
 801ed0a:	bd38      	pop	{r3, r4, r5, pc}
 801ed0c:	200007fc 	.word	0x200007fc

0801ed10 <_raise_r>:
 801ed10:	291f      	cmp	r1, #31
 801ed12:	b538      	push	{r3, r4, r5, lr}
 801ed14:	4604      	mov	r4, r0
 801ed16:	460d      	mov	r5, r1
 801ed18:	d904      	bls.n	801ed24 <_raise_r+0x14>
 801ed1a:	2316      	movs	r3, #22
 801ed1c:	6003      	str	r3, [r0, #0]
 801ed1e:	f04f 30ff 	mov.w	r0, #4294967295
 801ed22:	bd38      	pop	{r3, r4, r5, pc}
 801ed24:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801ed26:	b112      	cbz	r2, 801ed2e <_raise_r+0x1e>
 801ed28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ed2c:	b94b      	cbnz	r3, 801ed42 <_raise_r+0x32>
 801ed2e:	4620      	mov	r0, r4
 801ed30:	f000 f830 	bl	801ed94 <_getpid_r>
 801ed34:	462a      	mov	r2, r5
 801ed36:	4601      	mov	r1, r0
 801ed38:	4620      	mov	r0, r4
 801ed3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ed3e:	f000 b817 	b.w	801ed70 <_kill_r>
 801ed42:	2b01      	cmp	r3, #1
 801ed44:	d00a      	beq.n	801ed5c <_raise_r+0x4c>
 801ed46:	1c59      	adds	r1, r3, #1
 801ed48:	d103      	bne.n	801ed52 <_raise_r+0x42>
 801ed4a:	2316      	movs	r3, #22
 801ed4c:	6003      	str	r3, [r0, #0]
 801ed4e:	2001      	movs	r0, #1
 801ed50:	e7e7      	b.n	801ed22 <_raise_r+0x12>
 801ed52:	2400      	movs	r4, #0
 801ed54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ed58:	4628      	mov	r0, r5
 801ed5a:	4798      	blx	r3
 801ed5c:	2000      	movs	r0, #0
 801ed5e:	e7e0      	b.n	801ed22 <_raise_r+0x12>

0801ed60 <raise>:
 801ed60:	4b02      	ldr	r3, [pc, #8]	; (801ed6c <raise+0xc>)
 801ed62:	4601      	mov	r1, r0
 801ed64:	6818      	ldr	r0, [r3, #0]
 801ed66:	f7ff bfd3 	b.w	801ed10 <_raise_r>
 801ed6a:	bf00      	nop
 801ed6c:	200001ec 	.word	0x200001ec

0801ed70 <_kill_r>:
 801ed70:	b538      	push	{r3, r4, r5, lr}
 801ed72:	4d07      	ldr	r5, [pc, #28]	; (801ed90 <_kill_r+0x20>)
 801ed74:	2300      	movs	r3, #0
 801ed76:	4604      	mov	r4, r0
 801ed78:	4608      	mov	r0, r1
 801ed7a:	4611      	mov	r1, r2
 801ed7c:	602b      	str	r3, [r5, #0]
 801ed7e:	f7f7 fb8b 	bl	8016498 <_kill>
 801ed82:	1c43      	adds	r3, r0, #1
 801ed84:	d102      	bne.n	801ed8c <_kill_r+0x1c>
 801ed86:	682b      	ldr	r3, [r5, #0]
 801ed88:	b103      	cbz	r3, 801ed8c <_kill_r+0x1c>
 801ed8a:	6023      	str	r3, [r4, #0]
 801ed8c:	bd38      	pop	{r3, r4, r5, pc}
 801ed8e:	bf00      	nop
 801ed90:	200007fc 	.word	0x200007fc

0801ed94 <_getpid_r>:
 801ed94:	f7f7 bb78 	b.w	8016488 <_getpid>

0801ed98 <__sread>:
 801ed98:	b510      	push	{r4, lr}
 801ed9a:	460c      	mov	r4, r1
 801ed9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eda0:	f000 f8a0 	bl	801eee4 <_read_r>
 801eda4:	2800      	cmp	r0, #0
 801eda6:	bfab      	itete	ge
 801eda8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801edaa:	89a3      	ldrhlt	r3, [r4, #12]
 801edac:	181b      	addge	r3, r3, r0
 801edae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801edb2:	bfac      	ite	ge
 801edb4:	6563      	strge	r3, [r4, #84]	; 0x54
 801edb6:	81a3      	strhlt	r3, [r4, #12]
 801edb8:	bd10      	pop	{r4, pc}

0801edba <__swrite>:
 801edba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801edbe:	461f      	mov	r7, r3
 801edc0:	898b      	ldrh	r3, [r1, #12]
 801edc2:	05db      	lsls	r3, r3, #23
 801edc4:	4605      	mov	r5, r0
 801edc6:	460c      	mov	r4, r1
 801edc8:	4616      	mov	r6, r2
 801edca:	d505      	bpl.n	801edd8 <__swrite+0x1e>
 801edcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801edd0:	2302      	movs	r3, #2
 801edd2:	2200      	movs	r2, #0
 801edd4:	f000 f868 	bl	801eea8 <_lseek_r>
 801edd8:	89a3      	ldrh	r3, [r4, #12]
 801edda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801edde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ede2:	81a3      	strh	r3, [r4, #12]
 801ede4:	4632      	mov	r2, r6
 801ede6:	463b      	mov	r3, r7
 801ede8:	4628      	mov	r0, r5
 801edea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801edee:	f000 b817 	b.w	801ee20 <_write_r>

0801edf2 <__sseek>:
 801edf2:	b510      	push	{r4, lr}
 801edf4:	460c      	mov	r4, r1
 801edf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801edfa:	f000 f855 	bl	801eea8 <_lseek_r>
 801edfe:	1c43      	adds	r3, r0, #1
 801ee00:	89a3      	ldrh	r3, [r4, #12]
 801ee02:	bf15      	itete	ne
 801ee04:	6560      	strne	r0, [r4, #84]	; 0x54
 801ee06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ee0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ee0e:	81a3      	strheq	r3, [r4, #12]
 801ee10:	bf18      	it	ne
 801ee12:	81a3      	strhne	r3, [r4, #12]
 801ee14:	bd10      	pop	{r4, pc}

0801ee16 <__sclose>:
 801ee16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ee1a:	f000 b813 	b.w	801ee44 <_close_r>
	...

0801ee20 <_write_r>:
 801ee20:	b538      	push	{r3, r4, r5, lr}
 801ee22:	4d07      	ldr	r5, [pc, #28]	; (801ee40 <_write_r+0x20>)
 801ee24:	4604      	mov	r4, r0
 801ee26:	4608      	mov	r0, r1
 801ee28:	4611      	mov	r1, r2
 801ee2a:	2200      	movs	r2, #0
 801ee2c:	602a      	str	r2, [r5, #0]
 801ee2e:	461a      	mov	r2, r3
 801ee30:	f7f7 fb69 	bl	8016506 <_write>
 801ee34:	1c43      	adds	r3, r0, #1
 801ee36:	d102      	bne.n	801ee3e <_write_r+0x1e>
 801ee38:	682b      	ldr	r3, [r5, #0]
 801ee3a:	b103      	cbz	r3, 801ee3e <_write_r+0x1e>
 801ee3c:	6023      	str	r3, [r4, #0]
 801ee3e:	bd38      	pop	{r3, r4, r5, pc}
 801ee40:	200007fc 	.word	0x200007fc

0801ee44 <_close_r>:
 801ee44:	b538      	push	{r3, r4, r5, lr}
 801ee46:	4d06      	ldr	r5, [pc, #24]	; (801ee60 <_close_r+0x1c>)
 801ee48:	2300      	movs	r3, #0
 801ee4a:	4604      	mov	r4, r0
 801ee4c:	4608      	mov	r0, r1
 801ee4e:	602b      	str	r3, [r5, #0]
 801ee50:	f7f7 fb75 	bl	801653e <_close>
 801ee54:	1c43      	adds	r3, r0, #1
 801ee56:	d102      	bne.n	801ee5e <_close_r+0x1a>
 801ee58:	682b      	ldr	r3, [r5, #0]
 801ee5a:	b103      	cbz	r3, 801ee5e <_close_r+0x1a>
 801ee5c:	6023      	str	r3, [r4, #0]
 801ee5e:	bd38      	pop	{r3, r4, r5, pc}
 801ee60:	200007fc 	.word	0x200007fc

0801ee64 <_fstat_r>:
 801ee64:	b538      	push	{r3, r4, r5, lr}
 801ee66:	4d07      	ldr	r5, [pc, #28]	; (801ee84 <_fstat_r+0x20>)
 801ee68:	2300      	movs	r3, #0
 801ee6a:	4604      	mov	r4, r0
 801ee6c:	4608      	mov	r0, r1
 801ee6e:	4611      	mov	r1, r2
 801ee70:	602b      	str	r3, [r5, #0]
 801ee72:	f7f7 fb70 	bl	8016556 <_fstat>
 801ee76:	1c43      	adds	r3, r0, #1
 801ee78:	d102      	bne.n	801ee80 <_fstat_r+0x1c>
 801ee7a:	682b      	ldr	r3, [r5, #0]
 801ee7c:	b103      	cbz	r3, 801ee80 <_fstat_r+0x1c>
 801ee7e:	6023      	str	r3, [r4, #0]
 801ee80:	bd38      	pop	{r3, r4, r5, pc}
 801ee82:	bf00      	nop
 801ee84:	200007fc 	.word	0x200007fc

0801ee88 <_isatty_r>:
 801ee88:	b538      	push	{r3, r4, r5, lr}
 801ee8a:	4d06      	ldr	r5, [pc, #24]	; (801eea4 <_isatty_r+0x1c>)
 801ee8c:	2300      	movs	r3, #0
 801ee8e:	4604      	mov	r4, r0
 801ee90:	4608      	mov	r0, r1
 801ee92:	602b      	str	r3, [r5, #0]
 801ee94:	f7f7 fb6f 	bl	8016576 <_isatty>
 801ee98:	1c43      	adds	r3, r0, #1
 801ee9a:	d102      	bne.n	801eea2 <_isatty_r+0x1a>
 801ee9c:	682b      	ldr	r3, [r5, #0]
 801ee9e:	b103      	cbz	r3, 801eea2 <_isatty_r+0x1a>
 801eea0:	6023      	str	r3, [r4, #0]
 801eea2:	bd38      	pop	{r3, r4, r5, pc}
 801eea4:	200007fc 	.word	0x200007fc

0801eea8 <_lseek_r>:
 801eea8:	b538      	push	{r3, r4, r5, lr}
 801eeaa:	4d07      	ldr	r5, [pc, #28]	; (801eec8 <_lseek_r+0x20>)
 801eeac:	4604      	mov	r4, r0
 801eeae:	4608      	mov	r0, r1
 801eeb0:	4611      	mov	r1, r2
 801eeb2:	2200      	movs	r2, #0
 801eeb4:	602a      	str	r2, [r5, #0]
 801eeb6:	461a      	mov	r2, r3
 801eeb8:	f7f7 fb68 	bl	801658c <_lseek>
 801eebc:	1c43      	adds	r3, r0, #1
 801eebe:	d102      	bne.n	801eec6 <_lseek_r+0x1e>
 801eec0:	682b      	ldr	r3, [r5, #0]
 801eec2:	b103      	cbz	r3, 801eec6 <_lseek_r+0x1e>
 801eec4:	6023      	str	r3, [r4, #0]
 801eec6:	bd38      	pop	{r3, r4, r5, pc}
 801eec8:	200007fc 	.word	0x200007fc

0801eecc <__malloc_lock>:
 801eecc:	4801      	ldr	r0, [pc, #4]	; (801eed4 <__malloc_lock+0x8>)
 801eece:	f7ff bdc7 	b.w	801ea60 <__retarget_lock_acquire_recursive>
 801eed2:	bf00      	nop
 801eed4:	200007f0 	.word	0x200007f0

0801eed8 <__malloc_unlock>:
 801eed8:	4801      	ldr	r0, [pc, #4]	; (801eee0 <__malloc_unlock+0x8>)
 801eeda:	f7ff bdc2 	b.w	801ea62 <__retarget_lock_release_recursive>
 801eede:	bf00      	nop
 801eee0:	200007f0 	.word	0x200007f0

0801eee4 <_read_r>:
 801eee4:	b538      	push	{r3, r4, r5, lr}
 801eee6:	4d07      	ldr	r5, [pc, #28]	; (801ef04 <_read_r+0x20>)
 801eee8:	4604      	mov	r4, r0
 801eeea:	4608      	mov	r0, r1
 801eeec:	4611      	mov	r1, r2
 801eeee:	2200      	movs	r2, #0
 801eef0:	602a      	str	r2, [r5, #0]
 801eef2:	461a      	mov	r2, r3
 801eef4:	f7f7 faea 	bl	80164cc <_read>
 801eef8:	1c43      	adds	r3, r0, #1
 801eefa:	d102      	bne.n	801ef02 <_read_r+0x1e>
 801eefc:	682b      	ldr	r3, [r5, #0]
 801eefe:	b103      	cbz	r3, 801ef02 <_read_r+0x1e>
 801ef00:	6023      	str	r3, [r4, #0]
 801ef02:	bd38      	pop	{r3, r4, r5, pc}
 801ef04:	200007fc 	.word	0x200007fc

0801ef08 <_init>:
 801ef08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ef0a:	bf00      	nop
 801ef0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ef0e:	bc08      	pop	{r3}
 801ef10:	469e      	mov	lr, r3
 801ef12:	4770      	bx	lr

0801ef14 <_fini>:
 801ef14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ef16:	bf00      	nop
 801ef18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ef1a:	bc08      	pop	{r3}
 801ef1c:	469e      	mov	lr, r3
 801ef1e:	4770      	bx	lr
