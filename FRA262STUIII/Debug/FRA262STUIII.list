
FRA262STUIII.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e938  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000b104  0801ead8  0801ead8  0002ead8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029bdc  08029bdc  000401f4  2**0
                  CONTENTS
  4 .ARM          00000008  08029bdc  08029bdc  00039bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029be4  08029be4  000401f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08029be4  08029be4  00039be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08029bec  08029bec  00039bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08029bf0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005ac  200001f8  08029de4  000401f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200007a4  08029de4  000407a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0010513c  00000000  00000000  00040224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d90  00000000  00000000  00145360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004a28  00000000  00000000  001480f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004978  00000000  00000000  0014cb18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cb84  00000000  00000000  00151490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022164  00000000  00000000  0016e014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00478519  00000000  00000000  00190178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00608691  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00016444  00000000  00000000  006086e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801eac0 	.word	0x0801eac0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	0801eac0 	.word	0x0801eac0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f06:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f0a:	eef0 7ae7 	vabs.f32	s15, s15
 8000f0e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f26:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f2a:	f01b fecb 	bl	801ccc4 <sqrtf>
 8000f2e:	eef0 7a40 	vmov.f32	s15, s0
 8000f32:	eeb0 0a67 	vmov.f32	s0, s15
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <_ZN5Eigen8internal5all_tC1Ev>:

//--------------------------------------------------------------------------------
// Handling of all
//--------------------------------------------------------------------------------

struct all_t { all_t() {} };
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
	...

08000f6c <HAL_UARTEx_RxEventCallback>:
/* USER CODE BEGIN 0 */

///////////////////// [UART UI Base System] /////////////////////

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	460b      	mov	r3, r1
 8000f76:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a4a      	ldr	r2, [pc, #296]	; (80010a8 <HAL_UARTEx_RxEventCallback+0x13c>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	f040 808d 	bne.w	800109e <HAL_UARTEx_RxEventCallback+0x132>
	{
		oldPos_uart = newPos_uart;  // Update the last position before copying new data
 8000f84:	4b49      	ldr	r3, [pc, #292]	; (80010ac <HAL_UARTEx_RxEventCallback+0x140>)
 8000f86:	881a      	ldrh	r2, [r3, #0]
 8000f88:	4b49      	ldr	r3, [pc, #292]	; (80010b0 <HAL_UARTEx_RxEventCallback+0x144>)
 8000f8a:	801a      	strh	r2, [r3, #0]
		datasize_uart = Size;
 8000f8c:	4a49      	ldr	r2, [pc, #292]	; (80010b4 <HAL_UARTEx_RxEventCallback+0x148>)
 8000f8e:	887b      	ldrh	r3, [r7, #2]
 8000f90:	8013      	strh	r3, [r2, #0]
		// If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		// This is to maintain the circular buffer
		// The old data in the main buffer will be overlapped

		if (oldPos_uart+Size > MainBuf_SIZE)  // If the current position + new data size is greater than the main buffer
 8000f92:	4b47      	ldr	r3, [pc, #284]	; (80010b0 <HAL_UARTEx_RxEventCallback+0x144>)
 8000f94:	881b      	ldrh	r3, [r3, #0]
 8000f96:	461a      	mov	r2, r3
 8000f98:	887b      	ldrh	r3, [r7, #2]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	2b20      	cmp	r3, #32
 8000f9e:	dd14      	ble.n	8000fca <HAL_UARTEx_RxEventCallback+0x5e>
		{
			oldPos_uart = 0;  // point to the start of the buffer
 8000fa0:	4b43      	ldr	r3, [pc, #268]	; (80010b0 <HAL_UARTEx_RxEventCallback+0x144>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)MainBuf + oldPos_uart, RxBuf, Size);
 8000fa6:	4b42      	ldr	r3, [pc, #264]	; (80010b0 <HAL_UARTEx_RxEventCallback+0x144>)
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	461a      	mov	r2, r3
 8000fac:	4b42      	ldr	r3, [pc, #264]	; (80010b8 <HAL_UARTEx_RxEventCallback+0x14c>)
 8000fae:	4413      	add	r3, r2
 8000fb0:	887a      	ldrh	r2, [r7, #2]
 8000fb2:	4942      	ldr	r1, [pc, #264]	; (80010bc <HAL_UARTEx_RxEventCallback+0x150>)
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f01c fdab 	bl	801db10 <memcpy>
			newPos_uart = Size + oldPos_uart;
 8000fba:	4b3d      	ldr	r3, [pc, #244]	; (80010b0 <HAL_UARTEx_RxEventCallback+0x144>)
 8000fbc:	881a      	ldrh	r2, [r3, #0]
 8000fbe:	887b      	ldrh	r3, [r7, #2]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	4b39      	ldr	r3, [pc, #228]	; (80010ac <HAL_UARTEx_RxEventCallback+0x140>)
 8000fc6:	801a      	strh	r2, [r3, #0]
 8000fc8:	e010      	b.n	8000fec <HAL_UARTEx_RxEventCallback+0x80>
		}
		else
		{
			memcpy ((uint8_t *)MainBuf + oldPos_uart, RxBuf, Size);
 8000fca:	4b39      	ldr	r3, [pc, #228]	; (80010b0 <HAL_UARTEx_RxEventCallback+0x144>)
 8000fcc:	881b      	ldrh	r3, [r3, #0]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	4b39      	ldr	r3, [pc, #228]	; (80010b8 <HAL_UARTEx_RxEventCallback+0x14c>)
 8000fd2:	4413      	add	r3, r2
 8000fd4:	887a      	ldrh	r2, [r7, #2]
 8000fd6:	4939      	ldr	r1, [pc, #228]	; (80010bc <HAL_UARTEx_RxEventCallback+0x150>)
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f01c fd99 	bl	801db10 <memcpy>
			newPos_uart = Size + oldPos_uart;
 8000fde:	4b34      	ldr	r3, [pc, #208]	; (80010b0 <HAL_UARTEx_RxEventCallback+0x144>)
 8000fe0:	881a      	ldrh	r2, [r3, #0]
 8000fe2:	887b      	ldrh	r3, [r7, #2]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	4b30      	ldr	r3, [pc, #192]	; (80010ac <HAL_UARTEx_RxEventCallback+0x140>)
 8000fea:	801a      	strh	r2, [r3, #0]
		}
		StartM = MainBuf[newPos_uart - datasize_uart]; // 0b1001xxxx for check start & mode
 8000fec:	4b2f      	ldr	r3, [pc, #188]	; (80010ac <HAL_UARTEx_RxEventCallback+0x140>)
 8000fee:	881b      	ldrh	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b30      	ldr	r3, [pc, #192]	; (80010b4 <HAL_UARTEx_RxEventCallback+0x148>)
 8000ff4:	881b      	ldrh	r3, [r3, #0]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	4a2f      	ldr	r2, [pc, #188]	; (80010b8 <HAL_UARTEx_RxEventCallback+0x14c>)
 8000ffa:	5cd2      	ldrb	r2, [r2, r3]
 8000ffc:	4b30      	ldr	r3, [pc, #192]	; (80010c0 <HAL_UARTEx_RxEventCallback+0x154>)
 8000ffe:	701a      	strb	r2, [r3, #0]
		chkStart = StartM >> 4; // for check "start" or nor
 8001000:	4b2f      	ldr	r3, [pc, #188]	; (80010c0 <HAL_UARTEx_RxEventCallback+0x154>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	091b      	lsrs	r3, r3, #4
 8001006:	b2da      	uxtb	r2, r3
 8001008:	4b2e      	ldr	r3, [pc, #184]	; (80010c4 <HAL_UARTEx_RxEventCallback+0x158>)
 800100a:	701a      	strb	r2, [r3, #0]
		NameM = (StartM & 15); // Check mode
 800100c:	4b2c      	ldr	r3, [pc, #176]	; (80010c0 <HAL_UARTEx_RxEventCallback+0x154>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	f003 030f 	and.w	r3, r3, #15
 8001014:	b2da      	uxtb	r2, r3
 8001016:	4b2c      	ldr	r3, [pc, #176]	; (80010c8 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001018:	701a      	strb	r2, [r3, #0]
		if (chkStart == 9){ // 0b1001
 800101a:	4b2a      	ldr	r3, [pc, #168]	; (80010c4 <HAL_UARTEx_RxEventCallback+0x158>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b09      	cmp	r3, #9
 8001020:	d10a      	bne.n	8001038 <HAL_UARTEx_RxEventCallback+0xcc>
			if (NameM >= 1 && NameM <= 14){ // 15 work state or not
 8001022:	4b29      	ldr	r3, [pc, #164]	; (80010c8 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d02c      	beq.n	8001084 <HAL_UARTEx_RxEventCallback+0x118>
 800102a:	4b27      	ldr	r3, [pc, #156]	; (80010c8 <HAL_UARTEx_RxEventCallback+0x15c>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b0e      	cmp	r3, #14
 8001030:	d828      	bhi.n	8001084 <HAL_UARTEx_RxEventCallback+0x118>
				All_mode_UARTUI();
 8001032:	f000 f851 	bl	80010d8 <_Z15All_mode_UARTUIv>
 8001036:	e025      	b.n	8001084 <HAL_UARTEx_RxEventCallback+0x118>
			}
		}
		else if (StartM == 88) {
 8001038:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <HAL_UARTEx_RxEventCallback+0x154>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b58      	cmp	r3, #88	; 0x58
 800103e:	d121      	bne.n	8001084 <HAL_UARTEx_RxEventCallback+0x118>
			StartM = MainBuf[newPos_uart-2];
 8001040:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <HAL_UARTEx_RxEventCallback+0x140>)
 8001042:	881b      	ldrh	r3, [r3, #0]
 8001044:	3b02      	subs	r3, #2
 8001046:	4a1c      	ldr	r2, [pc, #112]	; (80010b8 <HAL_UARTEx_RxEventCallback+0x14c>)
 8001048:	5cd2      	ldrb	r2, [r2, r3]
 800104a:	4b1d      	ldr	r3, [pc, #116]	; (80010c0 <HAL_UARTEx_RxEventCallback+0x154>)
 800104c:	701a      	strb	r2, [r3, #0]
		    chkStart = StartM >> 4;
 800104e:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <HAL_UARTEx_RxEventCallback+0x154>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	091b      	lsrs	r3, r3, #4
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <HAL_UARTEx_RxEventCallback+0x158>)
 8001058:	701a      	strb	r2, [r3, #0]
		    NameM = (StartM & 15);
 800105a:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <HAL_UARTEx_RxEventCallback+0x154>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	f003 030f 	and.w	r3, r3, #15
 8001062:	b2da      	uxtb	r2, r3
 8001064:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001066:	701a      	strb	r2, [r3, #0]
		    if (chkStart == 9){
 8001068:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <HAL_UARTEx_RxEventCallback+0x158>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b09      	cmp	r3, #9
 800106e:	d109      	bne.n	8001084 <HAL_UARTEx_RxEventCallback+0x118>
		    	if (NameM >= 1 && NameM <= 14){
 8001070:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d005      	beq.n	8001084 <HAL_UARTEx_RxEventCallback+0x118>
 8001078:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <HAL_UARTEx_RxEventCallback+0x15c>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b0e      	cmp	r3, #14
 800107e:	d801      	bhi.n	8001084 <HAL_UARTEx_RxEventCallback+0x118>
		    		All_mode_UARTUI();
 8001080:	f000 f82a 	bl	80010d8 <_Z15All_mode_UARTUIv>
		        }
		    }
		}

		// start the DMA again
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) RxBuf, RxBuf_SIZE);
 8001084:	2220      	movs	r2, #32
 8001086:	490d      	ldr	r1, [pc, #52]	; (80010bc <HAL_UARTEx_RxEventCallback+0x150>)
 8001088:	4810      	ldr	r0, [pc, #64]	; (80010cc <HAL_UARTEx_RxEventCallback+0x160>)
 800108a:	f01a fc56 	bl	801b93a <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800108e:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <HAL_UARTEx_RxEventCallback+0x164>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <HAL_UARTEx_RxEventCallback+0x164>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f022 0208 	bic.w	r2, r2, #8
 800109c:	601a      	str	r2, [r3, #0]

	} //huart USART2
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40004400 	.word	0x40004400
 80010ac:	2000073a 	.word	0x2000073a
 80010b0:	20000738 	.word	0x20000738
 80010b4:	20000778 	.word	0x20000778
 80010b8:	20000718 	.word	0x20000718
 80010bc:	200006f8 	.word	0x200006f8
 80010c0:	2000077c 	.word	0x2000077c
 80010c4:	2000077a 	.word	0x2000077a
 80010c8:	2000077b 	.word	0x2000077b
 80010cc:	2000039c 	.word	0x2000039c
 80010d0:	200003e0 	.word	0x200003e0
 80010d4:	00000000 	.word	0x00000000

080010d8 <_Z15All_mode_UARTUIv>:

void All_mode_UARTUI()
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af00      	add	r7, sp, #0
	int yur;
	int zur;
	int kur; // counter

	// NameM => 15 mode
		switch (NameM){
 80010de:	4b9c      	ldr	r3, [pc, #624]	; (8001350 <_Z15All_mode_UARTUIv+0x278>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	3b01      	subs	r3, #1
 80010e4:	2b0d      	cmp	r3, #13
 80010e6:	f200 83e3 	bhi.w	80018b0 <_Z15All_mode_UARTUIv+0x7d8>
 80010ea:	a201      	add	r2, pc, #4	; (adr r2, 80010f0 <_Z15All_mode_UARTUIv+0x18>)
 80010ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f0:	08001129 	.word	0x08001129
 80010f4:	08001189 	.word	0x08001189
 80010f8:	080011bd 	.word	0x080011bd
 80010fc:	08001201 	.word	0x08001201
 8001100:	0800129f 	.word	0x0800129f
 8001104:	0800139d 	.word	0x0800139d
 8001108:	08001427 	.word	0x08001427
 800110c:	0800158b 	.word	0x0800158b
 8001110:	080015c5 	.word	0x080015c5
 8001114:	08001661 	.word	0x08001661
 8001118:	080016fd 	.word	0x080016fd
 800111c:	080017bf 	.word	0x080017bf
 8001120:	080017f7 	.word	0x080017f7
 8001124:	0800183b 	.word	0x0800183b
		////==============[Test Command]===========
			case 1: // 10010001 01000000 00000000 00101110
				chksum = MainBuf[newPos_uart-1];
 8001128:	4b8a      	ldr	r3, [pc, #552]	; (8001354 <_Z15All_mode_UARTUIv+0x27c>)
 800112a:	881b      	ldrh	r3, [r3, #0]
 800112c:	3b01      	subs	r3, #1
 800112e:	4a8a      	ldr	r2, [pc, #552]	; (8001358 <_Z15All_mode_UARTUIv+0x280>)
 8001130:	5cd2      	ldrb	r2, [r2, r3]
 8001132:	4b8a      	ldr	r3, [pc, #552]	; (800135c <_Z15All_mode_UARTUIv+0x284>)
 8001134:	701a      	strb	r2, [r3, #0]
				dataF2 = MainBuf[newPos_uart-2];
 8001136:	4b87      	ldr	r3, [pc, #540]	; (8001354 <_Z15All_mode_UARTUIv+0x27c>)
 8001138:	881b      	ldrh	r3, [r3, #0]
 800113a:	3b02      	subs	r3, #2
 800113c:	4a86      	ldr	r2, [pc, #536]	; (8001358 <_Z15All_mode_UARTUIv+0x280>)
 800113e:	5cd2      	ldrb	r2, [r2, r3]
 8001140:	4b87      	ldr	r3, [pc, #540]	; (8001360 <_Z15All_mode_UARTUIv+0x288>)
 8001142:	701a      	strb	r2, [r3, #0]
				dataF1 = MainBuf[newPos_uart-3];
 8001144:	4b83      	ldr	r3, [pc, #524]	; (8001354 <_Z15All_mode_UARTUIv+0x27c>)
 8001146:	881b      	ldrh	r3, [r3, #0]
 8001148:	3b03      	subs	r3, #3
 800114a:	4a83      	ldr	r2, [pc, #524]	; (8001358 <_Z15All_mode_UARTUIv+0x280>)
 800114c:	5cd2      	ldrb	r2, [r2, r3]
 800114e:	4b85      	ldr	r3, [pc, #532]	; (8001364 <_Z15All_mode_UARTUIv+0x28c>)
 8001150:	701a      	strb	r2, [r3, #0]
				chksum2 = ~(StartM + dataF1 + dataF2);
 8001152:	4b85      	ldr	r3, [pc, #532]	; (8001368 <_Z15All_mode_UARTUIv+0x290>)
 8001154:	781a      	ldrb	r2, [r3, #0]
 8001156:	4b83      	ldr	r3, [pc, #524]	; (8001364 <_Z15All_mode_UARTUIv+0x28c>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	4413      	add	r3, r2
 800115c:	b2da      	uxtb	r2, r3
 800115e:	4b80      	ldr	r3, [pc, #512]	; (8001360 <_Z15All_mode_UARTUIv+0x288>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	4413      	add	r3, r2
 8001164:	b2db      	uxtb	r3, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4b80      	ldr	r3, [pc, #512]	; (800136c <_Z15All_mode_UARTUIv+0x294>)
 800116c:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 800116e:	4b7b      	ldr	r3, [pc, #492]	; (800135c <_Z15All_mode_UARTUIv+0x284>)
 8001170:	781a      	ldrb	r2, [r3, #0]
 8001172:	4b7e      	ldr	r3, [pc, #504]	; (800136c <_Z15All_mode_UARTUIv+0x294>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	429a      	cmp	r2, r3
 8001178:	f040 837f 	bne.w	800187a <_Z15All_mode_UARTUIv+0x7a2>
					M_state = 1;
 800117c:	4b7c      	ldr	r3, [pc, #496]	; (8001370 <_Z15All_mode_UARTUIv+0x298>)
 800117e:	2201      	movs	r2, #1
 8001180:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 8001182:	f000 fbc7 	bl	8001914 <_Z7xu_Uartv>
				}
				break;
 8001186:	e378      	b.n	800187a <_Z15All_mode_UARTUIv+0x7a2>
		////==============[Connect MCU]===========
			case 2: //10010010 01101101
				chksum = MainBuf[newPos_uart-1];
 8001188:	4b72      	ldr	r3, [pc, #456]	; (8001354 <_Z15All_mode_UARTUIv+0x27c>)
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	3b01      	subs	r3, #1
 800118e:	4a72      	ldr	r2, [pc, #456]	; (8001358 <_Z15All_mode_UARTUIv+0x280>)
 8001190:	5cd2      	ldrb	r2, [r2, r3]
 8001192:	4b72      	ldr	r3, [pc, #456]	; (800135c <_Z15All_mode_UARTUIv+0x284>)
 8001194:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8001196:	4b74      	ldr	r3, [pc, #464]	; (8001368 <_Z15All_mode_UARTUIv+0x290>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	43db      	mvns	r3, r3
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4b75      	ldr	r3, [pc, #468]	; (8001374 <_Z15All_mode_UARTUIv+0x29c>)
 80011a0:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 80011a2:	4b6e      	ldr	r3, [pc, #440]	; (800135c <_Z15All_mode_UARTUIv+0x284>)
 80011a4:	781a      	ldrb	r2, [r3, #0]
 80011a6:	4b73      	ldr	r3, [pc, #460]	; (8001374 <_Z15All_mode_UARTUIv+0x29c>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	f040 8367 	bne.w	800187e <_Z15All_mode_UARTUIv+0x7a6>
					M_state = 2;
 80011b0:	4b6f      	ldr	r3, [pc, #444]	; (8001370 <_Z15All_mode_UARTUIv+0x298>)
 80011b2:	2202      	movs	r2, #2
 80011b4:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 80011b6:	f000 fbad 	bl	8001914 <_Z7xu_Uartv>
				}
				break;
 80011ba:	e360      	b.n	800187e <_Z15All_mode_UARTUIv+0x7a6>
		////==============[Disconnect MCU]===========
			case 3: //10010011 01101100
					chksum = MainBuf[newPos_uart-1];
 80011bc:	4b65      	ldr	r3, [pc, #404]	; (8001354 <_Z15All_mode_UARTUIv+0x27c>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	3b01      	subs	r3, #1
 80011c2:	4a65      	ldr	r2, [pc, #404]	; (8001358 <_Z15All_mode_UARTUIv+0x280>)
 80011c4:	5cd2      	ldrb	r2, [r2, r3]
 80011c6:	4b65      	ldr	r3, [pc, #404]	; (800135c <_Z15All_mode_UARTUIv+0x284>)
 80011c8:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 80011ca:	4b67      	ldr	r3, [pc, #412]	; (8001368 <_Z15All_mode_UARTUIv+0x290>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	43db      	mvns	r3, r3
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	4b68      	ldr	r3, [pc, #416]	; (8001374 <_Z15All_mode_UARTUIv+0x29c>)
 80011d4:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 80011d6:	4b61      	ldr	r3, [pc, #388]	; (800135c <_Z15All_mode_UARTUIv+0x284>)
 80011d8:	781a      	ldrb	r2, [r3, #0]
 80011da:	4b66      	ldr	r3, [pc, #408]	; (8001374 <_Z15All_mode_UARTUIv+0x29c>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	429a      	cmp	r2, r3
 80011e0:	f040 834f 	bne.w	8001882 <_Z15All_mode_UARTUIv+0x7aa>
					M_state = 3;
 80011e4:	4b62      	ldr	r3, [pc, #392]	; (8001370 <_Z15All_mode_UARTUIv+0x298>)
 80011e6:	2203      	movs	r2, #3
 80011e8:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);

					ResetParam();
 80011ea:	f001 fd05 	bl	8002bf8 <_Z10ResetParamv>
					grandState = Ready;
 80011ee:	4b62      	ldr	r3, [pc, #392]	; (8001378 <_Z15All_mode_UARTUIv+0x2a0>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	701a      	strb	r2, [r3, #0]
					PWMOut = 0;
 80011f4:	4b61      	ldr	r3, [pc, #388]	; (800137c <_Z15All_mode_UARTUIv+0x2a4>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	801a      	strh	r2, [r3, #0]

					xu_Uart();
 80011fa:	f000 fb8b 	bl	8001914 <_Z7xu_Uartv>
				}
				break;
 80011fe:	e340      	b.n	8001882 <_Z15All_mode_UARTUIv+0x7aa>
		////==============[Angular Velo Set]===========
			case 4:
					chksum = MainBuf[newPos_uart-1];
 8001200:	4b54      	ldr	r3, [pc, #336]	; (8001354 <_Z15All_mode_UARTUIv+0x27c>)
 8001202:	881b      	ldrh	r3, [r3, #0]
 8001204:	3b01      	subs	r3, #1
 8001206:	4a54      	ldr	r2, [pc, #336]	; (8001358 <_Z15All_mode_UARTUIv+0x280>)
 8001208:	5cd2      	ldrb	r2, [r2, r3]
 800120a:	4b54      	ldr	r3, [pc, #336]	; (800135c <_Z15All_mode_UARTUIv+0x284>)
 800120c:	701a      	strb	r2, [r3, #0]
					dataF2 = MainBuf[newPos_uart-2];
 800120e:	4b51      	ldr	r3, [pc, #324]	; (8001354 <_Z15All_mode_UARTUIv+0x27c>)
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	3b02      	subs	r3, #2
 8001214:	4a50      	ldr	r2, [pc, #320]	; (8001358 <_Z15All_mode_UARTUIv+0x280>)
 8001216:	5cd2      	ldrb	r2, [r2, r3]
 8001218:	4b51      	ldr	r3, [pc, #324]	; (8001360 <_Z15All_mode_UARTUIv+0x288>)
 800121a:	701a      	strb	r2, [r3, #0]
					dataF1 = MainBuf[newPos_uart-3];
 800121c:	4b4d      	ldr	r3, [pc, #308]	; (8001354 <_Z15All_mode_UARTUIv+0x27c>)
 800121e:	881b      	ldrh	r3, [r3, #0]
 8001220:	3b03      	subs	r3, #3
 8001222:	4a4d      	ldr	r2, [pc, #308]	; (8001358 <_Z15All_mode_UARTUIv+0x280>)
 8001224:	5cd2      	ldrb	r2, [r2, r3]
 8001226:	4b4f      	ldr	r3, [pc, #316]	; (8001364 <_Z15All_mode_UARTUIv+0x28c>)
 8001228:	701a      	strb	r2, [r3, #0]
					Set_AngVelo[0] = dataF1;
 800122a:	4b4e      	ldr	r3, [pc, #312]	; (8001364 <_Z15All_mode_UARTUIv+0x28c>)
 800122c:	781a      	ldrb	r2, [r3, #0]
 800122e:	4b54      	ldr	r3, [pc, #336]	; (8001380 <_Z15All_mode_UARTUIv+0x2a8>)
 8001230:	701a      	strb	r2, [r3, #0]
					Set_AngVelo[1] = dataF2;
 8001232:	4b4b      	ldr	r3, [pc, #300]	; (8001360 <_Z15All_mode_UARTUIv+0x288>)
 8001234:	781a      	ldrb	r2, [r3, #0]
 8001236:	4b52      	ldr	r3, [pc, #328]	; (8001380 <_Z15All_mode_UARTUIv+0x2a8>)
 8001238:	705a      	strb	r2, [r3, #1]
					chksum2 = ~(StartM + dataF1 + dataF2);
 800123a:	4b4b      	ldr	r3, [pc, #300]	; (8001368 <_Z15All_mode_UARTUIv+0x290>)
 800123c:	781a      	ldrb	r2, [r3, #0]
 800123e:	4b49      	ldr	r3, [pc, #292]	; (8001364 <_Z15All_mode_UARTUIv+0x28c>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	4413      	add	r3, r2
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4b46      	ldr	r3, [pc, #280]	; (8001360 <_Z15All_mode_UARTUIv+0x288>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	4413      	add	r3, r2
 800124c:	b2db      	uxtb	r3, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4b46      	ldr	r3, [pc, #280]	; (800136c <_Z15All_mode_UARTUIv+0x294>)
 8001254:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 8001256:	4b41      	ldr	r3, [pc, #260]	; (800135c <_Z15All_mode_UARTUIv+0x284>)
 8001258:	781a      	ldrb	r2, [r3, #0]
 800125a:	4b44      	ldr	r3, [pc, #272]	; (800136c <_Z15All_mode_UARTUIv+0x294>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	429a      	cmp	r2, r3
 8001260:	f040 8311 	bne.w	8001886 <_Z15All_mode_UARTUIv+0x7ae>
					M_state = 4;
 8001264:	4b42      	ldr	r3, [pc, #264]	; (8001370 <_Z15All_mode_UARTUIv+0x298>)
 8001266:	2204      	movs	r2, #4
 8001268:	701a      	strb	r2, [r3, #0]
					DataProtocol_SetVelo = Set_AngVelo[1];
 800126a:	4b45      	ldr	r3, [pc, #276]	; (8001380 <_Z15All_mode_UARTUIv+0x2a8>)
 800126c:	785b      	ldrb	r3, [r3, #1]
 800126e:	ee07 3a90 	vmov	s15, r3
 8001272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001276:	4b43      	ldr	r3, [pc, #268]	; (8001384 <_Z15All_mode_UARTUIv+0x2ac>)
 8001278:	edc3 7a00 	vstr	s15, [r3]
					Velocity = (DataProtocol_SetVelo * 10)/255;
 800127c:	4b41      	ldr	r3, [pc, #260]	; (8001384 <_Z15All_mode_UARTUIv+0x2ac>)
 800127e:	edd3 7a00 	vldr	s15, [r3]
 8001282:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001286:	ee27 7a87 	vmul.f32	s14, s15, s14
 800128a:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8001388 <_Z15All_mode_UARTUIv+0x2b0>
 800128e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001292:	4b3e      	ldr	r3, [pc, #248]	; (800138c <_Z15All_mode_UARTUIv+0x2b4>)
 8001294:	edc3 7a00 	vstr	s15, [r3]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 8001298:	f000 fb3c 	bl	8001914 <_Z7xu_Uartv>
				}
				break;
 800129c:	e2f3      	b.n	8001886 <_Z15All_mode_UARTUIv+0x7ae>
		////==============[Angular Position Set]===========
			case 5:
					chksum = MainBuf[newPos_uart-1];
 800129e:	4b2d      	ldr	r3, [pc, #180]	; (8001354 <_Z15All_mode_UARTUIv+0x27c>)
 80012a0:	881b      	ldrh	r3, [r3, #0]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	4a2c      	ldr	r2, [pc, #176]	; (8001358 <_Z15All_mode_UARTUIv+0x280>)
 80012a6:	5cd2      	ldrb	r2, [r2, r3]
 80012a8:	4b2c      	ldr	r3, [pc, #176]	; (800135c <_Z15All_mode_UARTUIv+0x284>)
 80012aa:	701a      	strb	r2, [r3, #0]
					dataF2 = MainBuf[newPos_uart-2];
 80012ac:	4b29      	ldr	r3, [pc, #164]	; (8001354 <_Z15All_mode_UARTUIv+0x27c>)
 80012ae:	881b      	ldrh	r3, [r3, #0]
 80012b0:	3b02      	subs	r3, #2
 80012b2:	4a29      	ldr	r2, [pc, #164]	; (8001358 <_Z15All_mode_UARTUIv+0x280>)
 80012b4:	5cd2      	ldrb	r2, [r2, r3]
 80012b6:	4b2a      	ldr	r3, [pc, #168]	; (8001360 <_Z15All_mode_UARTUIv+0x288>)
 80012b8:	701a      	strb	r2, [r3, #0]
					dataF1 = MainBuf[newPos_uart-3];
 80012ba:	4b26      	ldr	r3, [pc, #152]	; (8001354 <_Z15All_mode_UARTUIv+0x27c>)
 80012bc:	881b      	ldrh	r3, [r3, #0]
 80012be:	3b03      	subs	r3, #3
 80012c0:	4a25      	ldr	r2, [pc, #148]	; (8001358 <_Z15All_mode_UARTUIv+0x280>)
 80012c2:	5cd2      	ldrb	r2, [r2, r3]
 80012c4:	4b27      	ldr	r3, [pc, #156]	; (8001364 <_Z15All_mode_UARTUIv+0x28c>)
 80012c6:	701a      	strb	r2, [r3, #0]
					Set_AngPosi[0] = dataF1;
 80012c8:	4b26      	ldr	r3, [pc, #152]	; (8001364 <_Z15All_mode_UARTUIv+0x28c>)
 80012ca:	781a      	ldrb	r2, [r3, #0]
 80012cc:	4b30      	ldr	r3, [pc, #192]	; (8001390 <_Z15All_mode_UARTUIv+0x2b8>)
 80012ce:	701a      	strb	r2, [r3, #0]
					Set_AngPosi[1] = dataF2;
 80012d0:	4b23      	ldr	r3, [pc, #140]	; (8001360 <_Z15All_mode_UARTUIv+0x288>)
 80012d2:	781a      	ldrb	r2, [r3, #0]
 80012d4:	4b2e      	ldr	r3, [pc, #184]	; (8001390 <_Z15All_mode_UARTUIv+0x2b8>)
 80012d6:	705a      	strb	r2, [r3, #1]
					chksum2 = ~(StartM + dataF1 + dataF2);
 80012d8:	4b23      	ldr	r3, [pc, #140]	; (8001368 <_Z15All_mode_UARTUIv+0x290>)
 80012da:	781a      	ldrb	r2, [r3, #0]
 80012dc:	4b21      	ldr	r3, [pc, #132]	; (8001364 <_Z15All_mode_UARTUIv+0x28c>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	4413      	add	r3, r2
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <_Z15All_mode_UARTUIv+0x288>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	4413      	add	r3, r2
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	4b1e      	ldr	r3, [pc, #120]	; (800136c <_Z15All_mode_UARTUIv+0x294>)
 80012f2:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 80012f4:	4b19      	ldr	r3, [pc, #100]	; (800135c <_Z15All_mode_UARTUIv+0x284>)
 80012f6:	781a      	ldrb	r2, [r3, #0]
 80012f8:	4b1c      	ldr	r3, [pc, #112]	; (800136c <_Z15All_mode_UARTUIv+0x294>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	f040 82c4 	bne.w	800188a <_Z15All_mode_UARTUIv+0x7b2>
					M_state = 5;
 8001302:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <_Z15All_mode_UARTUIv+0x298>)
 8001304:	2205      	movs	r2, #5
 8001306:	701a      	strb	r2, [r3, #0]

					DataProtocol_SetAngPosi = (Set_AngPosi[0]*256) + Set_AngPosi[1];
 8001308:	4b21      	ldr	r3, [pc, #132]	; (8001390 <_Z15All_mode_UARTUIv+0x2b8>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	021b      	lsls	r3, r3, #8
 800130e:	4a20      	ldr	r2, [pc, #128]	; (8001390 <_Z15All_mode_UARTUIv+0x2b8>)
 8001310:	7852      	ldrb	r2, [r2, #1]
 8001312:	4413      	add	r3, r2
 8001314:	4a1f      	ldr	r2, [pc, #124]	; (8001394 <_Z15All_mode_UARTUIv+0x2bc>)
 8001316:	6013      	str	r3, [r2, #0]
					//positionlog[0] = (DataProtocol_SetAngPosi / (3.14 * 10000) * 180);
					positionlog[0] = (float)(DataProtocol_SetAngPosi / 10000.0);
 8001318:	4b1e      	ldr	r3, [pc, #120]	; (8001394 <_Z15All_mode_UARTUIv+0x2bc>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff f901 	bl	8000524 <__aeabi_i2d>
 8001322:	a309      	add	r3, pc, #36	; (adr r3, 8001348 <_Z15All_mode_UARTUIv+0x270>)
 8001324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001328:	f7ff fa90 	bl	800084c <__aeabi_ddiv>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4610      	mov	r0, r2
 8001332:	4619      	mov	r1, r3
 8001334:	f7ff fc10 	bl	8000b58 <__aeabi_d2f>
 8001338:	4603      	mov	r3, r0
 800133a:	4a17      	ldr	r2, [pc, #92]	; (8001398 <_Z15All_mode_UARTUIv+0x2c0>)
 800133c:	6013      	str	r3, [r2, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 800133e:	f000 fae9 	bl	8001914 <_Z7xu_Uartv>
				}
				break;
 8001342:	e2a2      	b.n	800188a <_Z15All_mode_UARTUIv+0x7b2>
 8001344:	f3af 8000 	nop.w
 8001348:	00000000 	.word	0x00000000
 800134c:	40c38800 	.word	0x40c38800
 8001350:	2000077b 	.word	0x2000077b
 8001354:	2000073a 	.word	0x2000073a
 8001358:	20000718 	.word	0x20000718
 800135c:	2000077d 	.word	0x2000077d
 8001360:	20000782 	.word	0x20000782
 8001364:	20000781 	.word	0x20000781
 8001368:	2000077c 	.word	0x2000077c
 800136c:	2000077f 	.word	0x2000077f
 8001370:	20000783 	.word	0x20000783
 8001374:	2000077e 	.word	0x2000077e
 8001378:	200004a0 	.word	0x200004a0
 800137c:	2000051c 	.word	0x2000051c
 8001380:	20000744 	.word	0x20000744
 8001384:	20000748 	.word	0x20000748
 8001388:	437f0000 	.word	0x437f0000
 800138c:	20000530 	.word	0x20000530
 8001390:	2000074c 	.word	0x2000074c
 8001394:	20000750 	.word	0x20000750
 8001398:	200000f0 	.word	0x200000f0
		////==============[Goal 1 station]===========
			case 6:
					chksum = MainBuf[newPos_uart-1];
 800139c:	4b99      	ldr	r3, [pc, #612]	; (8001604 <_Z15All_mode_UARTUIv+0x52c>)
 800139e:	881b      	ldrh	r3, [r3, #0]
 80013a0:	3b01      	subs	r3, #1
 80013a2:	4a99      	ldr	r2, [pc, #612]	; (8001608 <_Z15All_mode_UARTUIv+0x530>)
 80013a4:	5cd2      	ldrb	r2, [r2, r3]
 80013a6:	4b99      	ldr	r3, [pc, #612]	; (800160c <_Z15All_mode_UARTUIv+0x534>)
 80013a8:	701a      	strb	r2, [r3, #0]
					dataF2 = MainBuf[newPos_uart-2];
 80013aa:	4b96      	ldr	r3, [pc, #600]	; (8001604 <_Z15All_mode_UARTUIv+0x52c>)
 80013ac:	881b      	ldrh	r3, [r3, #0]
 80013ae:	3b02      	subs	r3, #2
 80013b0:	4a95      	ldr	r2, [pc, #596]	; (8001608 <_Z15All_mode_UARTUIv+0x530>)
 80013b2:	5cd2      	ldrb	r2, [r2, r3]
 80013b4:	4b96      	ldr	r3, [pc, #600]	; (8001610 <_Z15All_mode_UARTUIv+0x538>)
 80013b6:	701a      	strb	r2, [r3, #0]
					dataF1 = MainBuf[newPos_uart-3];
 80013b8:	4b92      	ldr	r3, [pc, #584]	; (8001604 <_Z15All_mode_UARTUIv+0x52c>)
 80013ba:	881b      	ldrh	r3, [r3, #0]
 80013bc:	3b03      	subs	r3, #3
 80013be:	4a92      	ldr	r2, [pc, #584]	; (8001608 <_Z15All_mode_UARTUIv+0x530>)
 80013c0:	5cd2      	ldrb	r2, [r2, r3]
 80013c2:	4b94      	ldr	r3, [pc, #592]	; (8001614 <_Z15All_mode_UARTUIv+0x53c>)
 80013c4:	701a      	strb	r2, [r3, #0]
					Set_Goal_1Sta[0] = dataF1;
 80013c6:	4b93      	ldr	r3, [pc, #588]	; (8001614 <_Z15All_mode_UARTUIv+0x53c>)
 80013c8:	781a      	ldrb	r2, [r3, #0]
 80013ca:	4b93      	ldr	r3, [pc, #588]	; (8001618 <_Z15All_mode_UARTUIv+0x540>)
 80013cc:	701a      	strb	r2, [r3, #0]
					Set_Goal_1Sta[1] = dataF2;
 80013ce:	4b90      	ldr	r3, [pc, #576]	; (8001610 <_Z15All_mode_UARTUIv+0x538>)
 80013d0:	781a      	ldrb	r2, [r3, #0]
 80013d2:	4b91      	ldr	r3, [pc, #580]	; (8001618 <_Z15All_mode_UARTUIv+0x540>)
 80013d4:	705a      	strb	r2, [r3, #1]
					chksum2 = ~(StartM + dataF1 + dataF2);
 80013d6:	4b91      	ldr	r3, [pc, #580]	; (800161c <_Z15All_mode_UARTUIv+0x544>)
 80013d8:	781a      	ldrb	r2, [r3, #0]
 80013da:	4b8e      	ldr	r3, [pc, #568]	; (8001614 <_Z15All_mode_UARTUIv+0x53c>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	4413      	add	r3, r2
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	4b8b      	ldr	r3, [pc, #556]	; (8001610 <_Z15All_mode_UARTUIv+0x538>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	4413      	add	r3, r2
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	43db      	mvns	r3, r3
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	4b8c      	ldr	r3, [pc, #560]	; (8001620 <_Z15All_mode_UARTUIv+0x548>)
 80013f0:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 80013f2:	4b86      	ldr	r3, [pc, #536]	; (800160c <_Z15All_mode_UARTUIv+0x534>)
 80013f4:	781a      	ldrb	r2, [r3, #0]
 80013f6:	4b8a      	ldr	r3, [pc, #552]	; (8001620 <_Z15All_mode_UARTUIv+0x548>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	f040 8247 	bne.w	800188e <_Z15All_mode_UARTUIv+0x7b6>
					M_state = 6;
 8001400:	4b88      	ldr	r3, [pc, #544]	; (8001624 <_Z15All_mode_UARTUIv+0x54c>)
 8001402:	2206      	movs	r2, #6
 8001404:	701a      	strb	r2, [r3, #0]

					///////// Load 1 station Data /////////////
					positionlog[0] = PosDataSet[Set_Goal_1Sta[1]];
 8001406:	4b84      	ldr	r3, [pc, #528]	; (8001618 <_Z15All_mode_UARTUIv+0x540>)
 8001408:	785b      	ldrb	r3, [r3, #1]
 800140a:	4a87      	ldr	r2, [pc, #540]	; (8001628 <_Z15All_mode_UARTUIv+0x550>)
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4413      	add	r3, r2
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a86      	ldr	r2, [pc, #536]	; (800162c <_Z15All_mode_UARTUIv+0x554>)
 8001414:	6013      	str	r3, [r2, #0]
					Set1_Sta = Set_Goal_1Sta[1];
 8001416:	4b80      	ldr	r3, [pc, #512]	; (8001618 <_Z15All_mode_UARTUIv+0x540>)
 8001418:	785b      	ldrb	r3, [r3, #1]
 800141a:	461a      	mov	r2, r3
 800141c:	4b84      	ldr	r3, [pc, #528]	; (8001630 <_Z15All_mode_UARTUIv+0x558>)
 800141e:	601a      	str	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);

					xu_Uart();
 8001420:	f000 fa78 	bl	8001914 <_Z7xu_Uartv>
				}
				break;
 8001424:	e233      	b.n	800188e <_Z15All_mode_UARTUIv+0x7b6>
		////==============[Goal n station]===========
			case 7:
				Nstation = MainBuf[(newPos_uart - datasize_uart)+1];
 8001426:	4b77      	ldr	r3, [pc, #476]	; (8001604 <_Z15All_mode_UARTUIv+0x52c>)
 8001428:	881b      	ldrh	r3, [r3, #0]
 800142a:	461a      	mov	r2, r3
 800142c:	4b81      	ldr	r3, [pc, #516]	; (8001634 <_Z15All_mode_UARTUIv+0x55c>)
 800142e:	881b      	ldrh	r3, [r3, #0]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	3301      	adds	r3, #1
 8001434:	4a74      	ldr	r2, [pc, #464]	; (8001608 <_Z15All_mode_UARTUIv+0x530>)
 8001436:	5cd2      	ldrb	r2, [r2, r3]
 8001438:	4b7f      	ldr	r3, [pc, #508]	; (8001638 <_Z15All_mode_UARTUIv+0x560>)
 800143a:	701a      	strb	r2, [r3, #0]
				yur = Nstation;
 800143c:	4b7e      	ldr	r3, [pc, #504]	; (8001638 <_Z15All_mode_UARTUIv+0x560>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	60fb      	str	r3, [r7, #12]
				zur = ( yur / 2 ) + yur % 2;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	0fda      	lsrs	r2, r3, #31
 8001446:	4413      	add	r3, r2
 8001448:	105b      	asrs	r3, r3, #1
 800144a:	461a      	mov	r2, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2b00      	cmp	r3, #0
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	bfb8      	it	lt
 8001456:	425b      	neglt	r3, r3
 8001458:	4413      	add	r3, r2
 800145a:	60bb      	str	r3, [r7, #8]
				kur = 0; // counter
 800145c:	2300      	movs	r3, #0
 800145e:	61fb      	str	r3, [r7, #28]

				for(int i = 0; i < zur; i++ ){
 8001460:	2300      	movs	r3, #0
 8001462:	61bb      	str	r3, [r7, #24]
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	429a      	cmp	r2, r3
 800146a:	da1e      	bge.n	80014aa <_Z15All_mode_UARTUIv+0x3d2>
					dataFSum += MainBuf[oldPos_uart + (i+2)];
 800146c:	4b73      	ldr	r3, [pc, #460]	; (800163c <_Z15All_mode_UARTUIv+0x564>)
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	461a      	mov	r2, r3
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	3302      	adds	r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	4a63      	ldr	r2, [pc, #396]	; (8001608 <_Z15All_mode_UARTUIv+0x530>)
 800147a:	5cd2      	ldrb	r2, [r2, r3]
 800147c:	4b70      	ldr	r3, [pc, #448]	; (8001640 <_Z15All_mode_UARTUIv+0x568>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	4413      	add	r3, r2
 8001482:	b2da      	uxtb	r2, r3
 8001484:	4b6e      	ldr	r3, [pc, #440]	; (8001640 <_Z15All_mode_UARTUIv+0x568>)
 8001486:	701a      	strb	r2, [r3, #0]
					Goal_nSta[i] = MainBuf[oldPos_uart + (i+2)];
 8001488:	4b6c      	ldr	r3, [pc, #432]	; (800163c <_Z15All_mode_UARTUIv+0x564>)
 800148a:	881b      	ldrh	r3, [r3, #0]
 800148c:	461a      	mov	r2, r3
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	3302      	adds	r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	4a5c      	ldr	r2, [pc, #368]	; (8001608 <_Z15All_mode_UARTUIv+0x530>)
 8001496:	5cd1      	ldrb	r1, [r2, r3]
 8001498:	4a6a      	ldr	r2, [pc, #424]	; (8001644 <_Z15All_mode_UARTUIv+0x56c>)
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	4413      	add	r3, r2
 800149e:	460a      	mov	r2, r1
 80014a0:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < zur; i++ ){
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	3301      	adds	r3, #1
 80014a6:	61bb      	str	r3, [r7, #24]
 80014a8:	e7dc      	b.n	8001464 <_Z15All_mode_UARTUIv+0x38c>
				}
				for(int x = 1; x < Nstation+1; x++){
 80014aa:	2301      	movs	r3, #1
 80014ac:	617b      	str	r3, [r7, #20]
 80014ae:	4b62      	ldr	r3, [pc, #392]	; (8001638 <_Z15All_mode_UARTUIv+0x560>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	461a      	mov	r2, r3
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	4293      	cmp	r3, r2
 80014b8:	dc29      	bgt.n	800150e <_Z15All_mode_UARTUIv+0x436>
                    if(x % 2 == 1){
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	bfb8      	it	lt
 80014c4:	425b      	neglt	r3, r3
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d10b      	bne.n	80014e2 <_Z15All_mode_UARTUIv+0x40a>
                        Set_Goal_nSta[x-1] = (Goal_nSta[kur] % 16);
 80014ca:	4a5e      	ldr	r2, [pc, #376]	; (8001644 <_Z15All_mode_UARTUIv+0x56c>)
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	4413      	add	r3, r2
 80014d0:	781a      	ldrb	r2, [r3, #0]
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	3b01      	subs	r3, #1
 80014d6:	f002 020f 	and.w	r2, r2, #15
 80014da:	b2d1      	uxtb	r1, r2
 80014dc:	4a5a      	ldr	r2, [pc, #360]	; (8001648 <_Z15All_mode_UARTUIv+0x570>)
 80014de:	54d1      	strb	r1, [r2, r3]
 80014e0:	e011      	b.n	8001506 <_Z15All_mode_UARTUIv+0x42e>
                    }else if(x % 2 == 0){
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d10c      	bne.n	8001506 <_Z15All_mode_UARTUIv+0x42e>
                        Set_Goal_nSta[x-1] = (Goal_nSta[kur] / 16);
 80014ec:	4a55      	ldr	r2, [pc, #340]	; (8001644 <_Z15All_mode_UARTUIv+0x56c>)
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	4413      	add	r3, r2
 80014f2:	781a      	ldrb	r2, [r3, #0]
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	0912      	lsrs	r2, r2, #4
 80014fa:	b2d1      	uxtb	r1, r2
 80014fc:	4a52      	ldr	r2, [pc, #328]	; (8001648 <_Z15All_mode_UARTUIv+0x570>)
 80014fe:	54d1      	strb	r1, [r2, r3]
                        kur++;
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	3301      	adds	r3, #1
 8001504:	61fb      	str	r3, [r7, #28]
				for(int x = 1; x < Nstation+1; x++){
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	3301      	adds	r3, #1
 800150a:	617b      	str	r3, [r7, #20]
 800150c:	e7cf      	b.n	80014ae <_Z15All_mode_UARTUIv+0x3d6>
                    }
                }

				chksum = MainBuf[newPos_uart-1];
 800150e:	4b3d      	ldr	r3, [pc, #244]	; (8001604 <_Z15All_mode_UARTUIv+0x52c>)
 8001510:	881b      	ldrh	r3, [r3, #0]
 8001512:	3b01      	subs	r3, #1
 8001514:	4a3c      	ldr	r2, [pc, #240]	; (8001608 <_Z15All_mode_UARTUIv+0x530>)
 8001516:	5cd2      	ldrb	r2, [r2, r3]
 8001518:	4b3c      	ldr	r3, [pc, #240]	; (800160c <_Z15All_mode_UARTUIv+0x534>)
 800151a:	701a      	strb	r2, [r3, #0]
				chksum3 = ~(StartM + Nstation + dataFSum);
 800151c:	4b3f      	ldr	r3, [pc, #252]	; (800161c <_Z15All_mode_UARTUIv+0x544>)
 800151e:	781a      	ldrb	r2, [r3, #0]
 8001520:	4b45      	ldr	r3, [pc, #276]	; (8001638 <_Z15All_mode_UARTUIv+0x560>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	4413      	add	r3, r2
 8001526:	b2da      	uxtb	r2, r3
 8001528:	4b45      	ldr	r3, [pc, #276]	; (8001640 <_Z15All_mode_UARTUIv+0x568>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	4413      	add	r3, r2
 800152e:	b2db      	uxtb	r3, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	b2da      	uxtb	r2, r3
 8001534:	4b45      	ldr	r3, [pc, #276]	; (800164c <_Z15All_mode_UARTUIv+0x574>)
 8001536:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum3){
 8001538:	4b34      	ldr	r3, [pc, #208]	; (800160c <_Z15All_mode_UARTUIv+0x534>)
 800153a:	781a      	ldrb	r2, [r3, #0]
 800153c:	4b43      	ldr	r3, [pc, #268]	; (800164c <_Z15All_mode_UARTUIv+0x574>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	429a      	cmp	r2, r3
 8001542:	f040 81a6 	bne.w	8001892 <_Z15All_mode_UARTUIv+0x7ba>
					M_state = 7;
 8001546:	4b37      	ldr	r3, [pc, #220]	; (8001624 <_Z15All_mode_UARTUIv+0x54c>)
 8001548:	2207      	movs	r2, #7
 800154a:	701a      	strb	r2, [r3, #0]

					/////////// Load n station-> positionlog  //////////
					//for(int j = 0; j <= len(PosDataSet); j++){
					for(int j = 0; j <= Nstation; j++){
 800154c:	2300      	movs	r3, #0
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	4b39      	ldr	r3, [pc, #228]	; (8001638 <_Z15All_mode_UARTUIv+0x560>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	461a      	mov	r2, r3
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	4293      	cmp	r3, r2
 800155a:	dc10      	bgt.n	800157e <_Z15All_mode_UARTUIv+0x4a6>
						positionlog[j] = PosDataSet[Set_Goal_nSta[j]];
 800155c:	4a3a      	ldr	r2, [pc, #232]	; (8001648 <_Z15All_mode_UARTUIv+0x570>)
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	4413      	add	r3, r2
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	4a30      	ldr	r2, [pc, #192]	; (8001628 <_Z15All_mode_UARTUIv+0x550>)
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	492f      	ldr	r1, [pc, #188]	; (800162c <_Z15All_mode_UARTUIv+0x554>)
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	440b      	add	r3, r1
 8001574:	601a      	str	r2, [r3, #0]
					for(int j = 0; j <= Nstation; j++){
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	3301      	adds	r3, #1
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	e7e8      	b.n	8001550 <_Z15All_mode_UARTUIv+0x478>
						//Set_Goal_nSta -> raw index from UART
					}

					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					dataFSum = 0;
 800157e:	4b30      	ldr	r3, [pc, #192]	; (8001640 <_Z15All_mode_UARTUIv+0x568>)
 8001580:	2200      	movs	r2, #0
 8001582:	701a      	strb	r2, [r3, #0]
					xu_Uart();
 8001584:	f000 f9c6 	bl	8001914 <_Z7xu_Uartv>
				}
				break;
 8001588:	e183      	b.n	8001892 <_Z15All_mode_UARTUIv+0x7ba>
		////==============[RUN Go to Goal station Order to Work]===========
			case 8: //10011000 01100111
				chksum = MainBuf[newPos_uart-1];
 800158a:	4b1e      	ldr	r3, [pc, #120]	; (8001604 <_Z15All_mode_UARTUIv+0x52c>)
 800158c:	881b      	ldrh	r3, [r3, #0]
 800158e:	3b01      	subs	r3, #1
 8001590:	4a1d      	ldr	r2, [pc, #116]	; (8001608 <_Z15All_mode_UARTUIv+0x530>)
 8001592:	5cd2      	ldrb	r2, [r2, r3]
 8001594:	4b1d      	ldr	r3, [pc, #116]	; (800160c <_Z15All_mode_UARTUIv+0x534>)
 8001596:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8001598:	4b20      	ldr	r3, [pc, #128]	; (800161c <_Z15All_mode_UARTUIv+0x544>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	43db      	mvns	r3, r3
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	4b2b      	ldr	r3, [pc, #172]	; (8001650 <_Z15All_mode_UARTUIv+0x578>)
 80015a2:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 80015a4:	4b19      	ldr	r3, [pc, #100]	; (800160c <_Z15All_mode_UARTUIv+0x534>)
 80015a6:	781a      	ldrb	r2, [r3, #0]
 80015a8:	4b29      	ldr	r3, [pc, #164]	; (8001650 <_Z15All_mode_UARTUIv+0x578>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	f040 8172 	bne.w	8001896 <_Z15All_mode_UARTUIv+0x7be>
					M_state = 8;
 80015b2:	4b1c      	ldr	r3, [pc, #112]	; (8001624 <_Z15All_mode_UARTUIv+0x54c>)
 80015b4:	2208      	movs	r2, #8
 80015b6:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 80015b8:	f000 f9ac 	bl	8001914 <_Z7xu_Uartv>

		///////// Order to Work !!! ///
					grandState = work;
 80015bc:	4b25      	ldr	r3, [pc, #148]	; (8001654 <_Z15All_mode_UARTUIv+0x57c>)
 80015be:	2201      	movs	r2, #1
 80015c0:	701a      	strb	r2, [r3, #0]
					//if(grandState == Ready){grandState = work;}
					//HAL_UART_Transmit(&huart2, (uint8_t*)temp_f_ack2, 2 ,1000);
				}
				break;
 80015c2:	e168      	b.n	8001896 <_Z15All_mode_UARTUIv+0x7be>
		////==============[Request Current station]===========
			case 9: //10011001 01100110
				chksum = MainBuf[newPos_uart-1];
 80015c4:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <_Z15All_mode_UARTUIv+0x52c>)
 80015c6:	881b      	ldrh	r3, [r3, #0]
 80015c8:	3b01      	subs	r3, #1
 80015ca:	4a0f      	ldr	r2, [pc, #60]	; (8001608 <_Z15All_mode_UARTUIv+0x530>)
 80015cc:	5cd2      	ldrb	r2, [r2, r3]
 80015ce:	4b0f      	ldr	r3, [pc, #60]	; (800160c <_Z15All_mode_UARTUIv+0x534>)
 80015d0:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 80015d2:	4b12      	ldr	r3, [pc, #72]	; (800161c <_Z15All_mode_UARTUIv+0x544>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	43db      	mvns	r3, r3
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	4b1d      	ldr	r3, [pc, #116]	; (8001650 <_Z15All_mode_UARTUIv+0x578>)
 80015dc:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 80015de:	4b0b      	ldr	r3, [pc, #44]	; (800160c <_Z15All_mode_UARTUIv+0x534>)
 80015e0:	781a      	ldrb	r2, [r3, #0]
 80015e2:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <_Z15All_mode_UARTUIv+0x578>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	f040 8157 	bne.w	800189a <_Z15All_mode_UARTUIv+0x7c2>
					M_state = 9;
 80015ec:	4b0d      	ldr	r3, [pc, #52]	; (8001624 <_Z15All_mode_UARTUIv+0x54c>)
 80015ee:	2209      	movs	r2, #9
 80015f0:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 80015f2:	f000 f98f 	bl	8001914 <_Z7xu_Uartv>
					//Req_sta[1] = 0;
					//Req_sta[2] = x;
					//Req_sta[3] = ~(Req_sta[0] + Req_sta[1] + Req_sta[2]);
					HAL_UART_Transmit(&huart2, (uint8_t*)Req_sta, 4 ,100);
 80015f6:	2364      	movs	r3, #100	; 0x64
 80015f8:	2204      	movs	r2, #4
 80015fa:	4917      	ldr	r1, [pc, #92]	; (8001658 <_Z15All_mode_UARTUIv+0x580>)
 80015fc:	4817      	ldr	r0, [pc, #92]	; (800165c <_Z15All_mode_UARTUIv+0x584>)
 80015fe:	f01a f90a 	bl	801b816 <HAL_UART_Transmit>
				}
				break;
 8001602:	e14a      	b.n	800189a <_Z15All_mode_UARTUIv+0x7c2>
 8001604:	2000073a 	.word	0x2000073a
 8001608:	20000718 	.word	0x20000718
 800160c:	2000077d 	.word	0x2000077d
 8001610:	20000782 	.word	0x20000782
 8001614:	20000781 	.word	0x20000781
 8001618:	20000754 	.word	0x20000754
 800161c:	2000077c 	.word	0x2000077c
 8001620:	2000077f 	.word	0x2000077f
 8001624:	20000783 	.word	0x20000783
 8001628:	200004c0 	.word	0x200004c0
 800162c:	200000f0 	.word	0x200000f0
 8001630:	20000774 	.word	0x20000774
 8001634:	20000778 	.word	0x20000778
 8001638:	20000784 	.word	0x20000784
 800163c:	20000738 	.word	0x20000738
 8001640:	20000785 	.word	0x20000785
 8001644:	20000758 	.word	0x20000758
 8001648:	20000760 	.word	0x20000760
 800164c:	20000780 	.word	0x20000780
 8001650:	2000077e 	.word	0x2000077e
 8001654:	200004a0 	.word	0x200004a0
 8001658:	2000015c 	.word	0x2000015c
 800165c:	2000039c 	.word	0x2000039c
		////==============[Request Angular Position]===========
			case 10: //10011010 01100101
				chksum = MainBuf[newPos_uart-1];
 8001660:	4b97      	ldr	r3, [pc, #604]	; (80018c0 <_Z15All_mode_UARTUIv+0x7e8>)
 8001662:	881b      	ldrh	r3, [r3, #0]
 8001664:	3b01      	subs	r3, #1
 8001666:	4a97      	ldr	r2, [pc, #604]	; (80018c4 <_Z15All_mode_UARTUIv+0x7ec>)
 8001668:	5cd2      	ldrb	r2, [r2, r3]
 800166a:	4b97      	ldr	r3, [pc, #604]	; (80018c8 <_Z15All_mode_UARTUIv+0x7f0>)
 800166c:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 800166e:	4b97      	ldr	r3, [pc, #604]	; (80018cc <_Z15All_mode_UARTUIv+0x7f4>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	43db      	mvns	r3, r3
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4b96      	ldr	r3, [pc, #600]	; (80018d0 <_Z15All_mode_UARTUIv+0x7f8>)
 8001678:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 800167a:	4b93      	ldr	r3, [pc, #588]	; (80018c8 <_Z15All_mode_UARTUIv+0x7f0>)
 800167c:	781a      	ldrb	r2, [r3, #0]
 800167e:	4b94      	ldr	r3, [pc, #592]	; (80018d0 <_Z15All_mode_UARTUIv+0x7f8>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	429a      	cmp	r2, r3
 8001684:	f040 810b 	bne.w	800189e <_Z15All_mode_UARTUIv+0x7c6>
					M_state = 10;
 8001688:	4b92      	ldr	r3, [pc, #584]	; (80018d4 <_Z15All_mode_UARTUIv+0x7fc>)
 800168a:	220a      	movs	r2, #10
 800168c:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 800168e:	f000 f941 	bl	8001914 <_Z7xu_Uartv>
					DataProtocol_AngPosi = (CurrentEn * 10000); //KalP
 8001692:	4b91      	ldr	r3, [pc, #580]	; (80018d8 <_Z15All_mode_UARTUIv+0x800>)
 8001694:	edd3 7a00 	vldr	s15, [r3]
 8001698:	ed9f 7a90 	vldr	s14, [pc, #576]	; 80018dc <_Z15All_mode_UARTUIv+0x804>
 800169c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016a4:	ee17 2a90 	vmov	r2, s15
 80016a8:	4b8d      	ldr	r3, [pc, #564]	; (80018e0 <_Z15All_mode_UARTUIv+0x808>)
 80016aa:	601a      	str	r2, [r3, #0]
					Req_AngPosi[1] = (DataProtocol_AngPosi / 256);
 80016ac:	4b8c      	ldr	r3, [pc, #560]	; (80018e0 <_Z15All_mode_UARTUIv+0x808>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	da00      	bge.n	80016b6 <_Z15All_mode_UARTUIv+0x5de>
 80016b4:	33ff      	adds	r3, #255	; 0xff
 80016b6:	121b      	asrs	r3, r3, #8
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	4b8a      	ldr	r3, [pc, #552]	; (80018e4 <_Z15All_mode_UARTUIv+0x80c>)
 80016bc:	705a      	strb	r2, [r3, #1]
					Req_AngPosi[2] = (DataProtocol_AngPosi % 256);
 80016be:	4b88      	ldr	r3, [pc, #544]	; (80018e0 <_Z15All_mode_UARTUIv+0x808>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	425a      	negs	r2, r3
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	b2d2      	uxtb	r2, r2
 80016c8:	bf58      	it	pl
 80016ca:	4253      	negpl	r3, r2
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	4b85      	ldr	r3, [pc, #532]	; (80018e4 <_Z15All_mode_UARTUIv+0x80c>)
 80016d0:	709a      	strb	r2, [r3, #2]
					Req_AngPosi[3] = ~(Req_AngPosi[0] + Req_AngPosi[1] + Req_AngPosi[2]);
 80016d2:	4b84      	ldr	r3, [pc, #528]	; (80018e4 <_Z15All_mode_UARTUIv+0x80c>)
 80016d4:	781a      	ldrb	r2, [r3, #0]
 80016d6:	4b83      	ldr	r3, [pc, #524]	; (80018e4 <_Z15All_mode_UARTUIv+0x80c>)
 80016d8:	785b      	ldrb	r3, [r3, #1]
 80016da:	4413      	add	r3, r2
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	4b81      	ldr	r3, [pc, #516]	; (80018e4 <_Z15All_mode_UARTUIv+0x80c>)
 80016e0:	789b      	ldrb	r3, [r3, #2]
 80016e2:	4413      	add	r3, r2
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	43db      	mvns	r3, r3
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	4b7e      	ldr	r3, [pc, #504]	; (80018e4 <_Z15All_mode_UARTUIv+0x80c>)
 80016ec:	70da      	strb	r2, [r3, #3]
					HAL_UART_Transmit(&huart2, (uint8_t*)Req_AngPosi, 4 ,100);
 80016ee:	2364      	movs	r3, #100	; 0x64
 80016f0:	2204      	movs	r2, #4
 80016f2:	497c      	ldr	r1, [pc, #496]	; (80018e4 <_Z15All_mode_UARTUIv+0x80c>)
 80016f4:	487c      	ldr	r0, [pc, #496]	; (80018e8 <_Z15All_mode_UARTUIv+0x810>)
 80016f6:	f01a f88e 	bl	801b816 <HAL_UART_Transmit>
				}
				break;
 80016fa:	e0d0      	b.n	800189e <_Z15All_mode_UARTUIv+0x7c6>
		////==============[Request MAX Angular velo]===========
			case 11: //10011011 01100100
				chksum = MainBuf[newPos_uart-1];
 80016fc:	4b70      	ldr	r3, [pc, #448]	; (80018c0 <_Z15All_mode_UARTUIv+0x7e8>)
 80016fe:	881b      	ldrh	r3, [r3, #0]
 8001700:	3b01      	subs	r3, #1
 8001702:	4a70      	ldr	r2, [pc, #448]	; (80018c4 <_Z15All_mode_UARTUIv+0x7ec>)
 8001704:	5cd2      	ldrb	r2, [r2, r3]
 8001706:	4b70      	ldr	r3, [pc, #448]	; (80018c8 <_Z15All_mode_UARTUIv+0x7f0>)
 8001708:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 800170a:	4b70      	ldr	r3, [pc, #448]	; (80018cc <_Z15All_mode_UARTUIv+0x7f4>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	43db      	mvns	r3, r3
 8001710:	b2da      	uxtb	r2, r3
 8001712:	4b6f      	ldr	r3, [pc, #444]	; (80018d0 <_Z15All_mode_UARTUIv+0x7f8>)
 8001714:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8001716:	4b6c      	ldr	r3, [pc, #432]	; (80018c8 <_Z15All_mode_UARTUIv+0x7f0>)
 8001718:	781a      	ldrb	r2, [r3, #0]
 800171a:	4b6d      	ldr	r3, [pc, #436]	; (80018d0 <_Z15All_mode_UARTUIv+0x7f8>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	429a      	cmp	r2, r3
 8001720:	f040 80bf 	bne.w	80018a2 <_Z15All_mode_UARTUIv+0x7ca>
					M_state = 11;
 8001724:	4b6b      	ldr	r3, [pc, #428]	; (80018d4 <_Z15All_mode_UARTUIv+0x7fc>)
 8001726:	220b      	movs	r2, #11
 8001728:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 800172a:	f000 f8f3 	bl	8001914 <_Z7xu_Uartv>
					DataProtocol_Velo = (KalV/(2 * 3.14)) * 60;
 800172e:	4b6f      	ldr	r3, [pc, #444]	; (80018ec <_Z15All_mode_UARTUIv+0x814>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe ff08 	bl	8000548 <__aeabi_f2d>
 8001738:	a35f      	add	r3, pc, #380	; (adr r3, 80018b8 <_Z15All_mode_UARTUIv+0x7e0>)
 800173a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173e:	f7ff f885 	bl	800084c <__aeabi_ddiv>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4610      	mov	r0, r2
 8001748:	4619      	mov	r1, r3
 800174a:	f04f 0200 	mov.w	r2, #0
 800174e:	4b68      	ldr	r3, [pc, #416]	; (80018f0 <_Z15All_mode_UARTUIv+0x818>)
 8001750:	f7fe ff52 	bl	80005f8 <__aeabi_dmul>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4610      	mov	r0, r2
 800175a:	4619      	mov	r1, r3
 800175c:	f7ff f9fc 	bl	8000b58 <__aeabi_d2f>
 8001760:	4603      	mov	r3, r0
 8001762:	4a64      	ldr	r2, [pc, #400]	; (80018f4 <_Z15All_mode_UARTUIv+0x81c>)
 8001764:	6013      	str	r3, [r2, #0]
					Req_MaxVelo[1] = 0;
 8001766:	4b64      	ldr	r3, [pc, #400]	; (80018f8 <_Z15All_mode_UARTUIv+0x820>)
 8001768:	2200      	movs	r2, #0
 800176a:	705a      	strb	r2, [r3, #1]
					Req_MaxVelo[2] = (DataProtocol_Velo * 255) / 10;
 800176c:	4b61      	ldr	r3, [pc, #388]	; (80018f4 <_Z15All_mode_UARTUIv+0x81c>)
 800176e:	edd3 7a00 	vldr	s15, [r3]
 8001772:	ed9f 7a62 	vldr	s14, [pc, #392]	; 80018fc <_Z15All_mode_UARTUIv+0x824>
 8001776:	ee27 7a87 	vmul.f32	s14, s15, s14
 800177a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800177e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001782:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001786:	edc7 7a01 	vstr	s15, [r7, #4]
 800178a:	793b      	ldrb	r3, [r7, #4]
 800178c:	b2da      	uxtb	r2, r3
 800178e:	4b5a      	ldr	r3, [pc, #360]	; (80018f8 <_Z15All_mode_UARTUIv+0x820>)
 8001790:	709a      	strb	r2, [r3, #2]
					Req_MaxVelo[3] = ~(Req_MaxVelo[0] + Req_MaxVelo[1] + Req_MaxVelo[2]);
 8001792:	4b59      	ldr	r3, [pc, #356]	; (80018f8 <_Z15All_mode_UARTUIv+0x820>)
 8001794:	781a      	ldrb	r2, [r3, #0]
 8001796:	4b58      	ldr	r3, [pc, #352]	; (80018f8 <_Z15All_mode_UARTUIv+0x820>)
 8001798:	785b      	ldrb	r3, [r3, #1]
 800179a:	4413      	add	r3, r2
 800179c:	b2da      	uxtb	r2, r3
 800179e:	4b56      	ldr	r3, [pc, #344]	; (80018f8 <_Z15All_mode_UARTUIv+0x820>)
 80017a0:	789b      	ldrb	r3, [r3, #2]
 80017a2:	4413      	add	r3, r2
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	43db      	mvns	r3, r3
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4b53      	ldr	r3, [pc, #332]	; (80018f8 <_Z15All_mode_UARTUIv+0x820>)
 80017ac:	70da      	strb	r2, [r3, #3]
					HAL_UART_Transmit(&huart2, (uint8_t*)Req_MaxVelo, 4 ,1000);
 80017ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017b2:	2204      	movs	r2, #4
 80017b4:	4950      	ldr	r1, [pc, #320]	; (80018f8 <_Z15All_mode_UARTUIv+0x820>)
 80017b6:	484c      	ldr	r0, [pc, #304]	; (80018e8 <_Z15All_mode_UARTUIv+0x810>)
 80017b8:	f01a f82d 	bl	801b816 <HAL_UART_Transmit>
				}
				break;
 80017bc:	e071      	b.n	80018a2 <_Z15All_mode_UARTUIv+0x7ca>
		////==============[Enable end effector]================
			case 12: //// 12  10011100 01100011
				chksum = MainBuf[newPos_uart-1];
 80017be:	4b40      	ldr	r3, [pc, #256]	; (80018c0 <_Z15All_mode_UARTUIv+0x7e8>)
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	4a3f      	ldr	r2, [pc, #252]	; (80018c4 <_Z15All_mode_UARTUIv+0x7ec>)
 80017c6:	5cd2      	ldrb	r2, [r2, r3]
 80017c8:	4b3f      	ldr	r3, [pc, #252]	; (80018c8 <_Z15All_mode_UARTUIv+0x7f0>)
 80017ca:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 80017cc:	4b3f      	ldr	r3, [pc, #252]	; (80018cc <_Z15All_mode_UARTUIv+0x7f4>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	43db      	mvns	r3, r3
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	4b3e      	ldr	r3, [pc, #248]	; (80018d0 <_Z15All_mode_UARTUIv+0x7f8>)
 80017d6:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 80017d8:	4b3b      	ldr	r3, [pc, #236]	; (80018c8 <_Z15All_mode_UARTUIv+0x7f0>)
 80017da:	781a      	ldrb	r2, [r3, #0]
 80017dc:	4b3c      	ldr	r3, [pc, #240]	; (80018d0 <_Z15All_mode_UARTUIv+0x7f8>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d160      	bne.n	80018a6 <_Z15All_mode_UARTUIv+0x7ce>
					M_state = 12;
 80017e4:	4b3b      	ldr	r3, [pc, #236]	; (80018d4 <_Z15All_mode_UARTUIv+0x7fc>)
 80017e6:	220c      	movs	r2, #12
 80017e8:	701a      	strb	r2, [r3, #0]
					flag_efftActi = 1;
 80017ea:	4b45      	ldr	r3, [pc, #276]	; (8001900 <_Z15All_mode_UARTUIv+0x828>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	701a      	strb	r2, [r3, #0]

					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 80017f0:	f000 f890 	bl	8001914 <_Z7xu_Uartv>
				}
				break;
 80017f4:	e057      	b.n	80018a6 <_Z15All_mode_UARTUIv+0x7ce>
		////==============[Disable end effector]================
			case 13: // 13 10011101 01100010
				chksum = MainBuf[newPos_uart-1];
 80017f6:	4b32      	ldr	r3, [pc, #200]	; (80018c0 <_Z15All_mode_UARTUIv+0x7e8>)
 80017f8:	881b      	ldrh	r3, [r3, #0]
 80017fa:	3b01      	subs	r3, #1
 80017fc:	4a31      	ldr	r2, [pc, #196]	; (80018c4 <_Z15All_mode_UARTUIv+0x7ec>)
 80017fe:	5cd2      	ldrb	r2, [r2, r3]
 8001800:	4b31      	ldr	r3, [pc, #196]	; (80018c8 <_Z15All_mode_UARTUIv+0x7f0>)
 8001802:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8001804:	4b31      	ldr	r3, [pc, #196]	; (80018cc <_Z15All_mode_UARTUIv+0x7f4>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	43db      	mvns	r3, r3
 800180a:	b2da      	uxtb	r2, r3
 800180c:	4b30      	ldr	r3, [pc, #192]	; (80018d0 <_Z15All_mode_UARTUIv+0x7f8>)
 800180e:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8001810:	4b2d      	ldr	r3, [pc, #180]	; (80018c8 <_Z15All_mode_UARTUIv+0x7f0>)
 8001812:	781a      	ldrb	r2, [r3, #0]
 8001814:	4b2e      	ldr	r3, [pc, #184]	; (80018d0 <_Z15All_mode_UARTUIv+0x7f8>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	429a      	cmp	r2, r3
 800181a:	d146      	bne.n	80018aa <_Z15All_mode_UARTUIv+0x7d2>
					M_state = 13;
 800181c:	4b2d      	ldr	r3, [pc, #180]	; (80018d4 <_Z15All_mode_UARTUIv+0x7fc>)
 800181e:	220d      	movs	r2, #13
 8001820:	701a      	strb	r2, [r3, #0]
					//// End Effector Kill
					trig_efftRead = 0;
 8001822:	4b38      	ldr	r3, [pc, #224]	; (8001904 <_Z15All_mode_UARTUIv+0x82c>)
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]
					flag_efftRead = 0;
 8001828:	4b37      	ldr	r3, [pc, #220]	; (8001908 <_Z15All_mode_UARTUIv+0x830>)
 800182a:	2200      	movs	r2, #0
 800182c:	701a      	strb	r2, [r3, #0]
					flag_efftActi = 0;
 800182e:	4b34      	ldr	r3, [pc, #208]	; (8001900 <_Z15All_mode_UARTUIv+0x828>)
 8001830:	2200      	movs	r2, #0
 8001832:	701a      	strb	r2, [r3, #0]

					xu_Uart();
 8001834:	f000 f86e 	bl	8001914 <_Z7xu_Uartv>
				}
				break;
 8001838:	e037      	b.n	80018aa <_Z15All_mode_UARTUIv+0x7d2>
		////==============[Set Home]================
			case 14: //10011110 01100001
				chksum = MainBuf[newPos_uart-1];
 800183a:	4b21      	ldr	r3, [pc, #132]	; (80018c0 <_Z15All_mode_UARTUIv+0x7e8>)
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	3b01      	subs	r3, #1
 8001840:	4a20      	ldr	r2, [pc, #128]	; (80018c4 <_Z15All_mode_UARTUIv+0x7ec>)
 8001842:	5cd2      	ldrb	r2, [r2, r3]
 8001844:	4b20      	ldr	r3, [pc, #128]	; (80018c8 <_Z15All_mode_UARTUIv+0x7f0>)
 8001846:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8001848:	4b20      	ldr	r3, [pc, #128]	; (80018cc <_Z15All_mode_UARTUIv+0x7f4>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	43db      	mvns	r3, r3
 800184e:	b2da      	uxtb	r2, r3
 8001850:	4b1f      	ldr	r3, [pc, #124]	; (80018d0 <_Z15All_mode_UARTUIv+0x7f8>)
 8001852:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8001854:	4b1c      	ldr	r3, [pc, #112]	; (80018c8 <_Z15All_mode_UARTUIv+0x7f0>)
 8001856:	781a      	ldrb	r2, [r3, #0]
 8001858:	4b1d      	ldr	r3, [pc, #116]	; (80018d0 <_Z15All_mode_UARTUIv+0x7f8>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	429a      	cmp	r2, r3
 800185e:	d126      	bne.n	80018ae <_Z15All_mode_UARTUIv+0x7d6>
					M_state = 14;
 8001860:	4b1c      	ldr	r3, [pc, #112]	; (80018d4 <_Z15All_mode_UARTUIv+0x7fc>)
 8001862:	220e      	movs	r2, #14
 8001864:	701a      	strb	r2, [r3, #0]
					//act as set zero interrupt
					Finalposition = 0.0;
 8001866:	4b29      	ldr	r3, [pc, #164]	; (800190c <_Z15All_mode_UARTUIv+0x834>)
 8001868:	f04f 0200 	mov.w	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
					grandState = SetZeroGr;
 800186e:	4b28      	ldr	r3, [pc, #160]	; (8001910 <_Z15All_mode_UARTUIv+0x838>)
 8001870:	2205      	movs	r2, #5
 8001872:	701a      	strb	r2, [r3, #0]
					xu_Uart();
 8001874:	f000 f84e 	bl	8001914 <_Z7xu_Uartv>
				}
				break;
 8001878:	e019      	b.n	80018ae <_Z15All_mode_UARTUIv+0x7d6>
				break;
 800187a:	bf00      	nop
 800187c:	e018      	b.n	80018b0 <_Z15All_mode_UARTUIv+0x7d8>
				break;
 800187e:	bf00      	nop
 8001880:	e016      	b.n	80018b0 <_Z15All_mode_UARTUIv+0x7d8>
				break;
 8001882:	bf00      	nop
 8001884:	e014      	b.n	80018b0 <_Z15All_mode_UARTUIv+0x7d8>
				break;
 8001886:	bf00      	nop
 8001888:	e012      	b.n	80018b0 <_Z15All_mode_UARTUIv+0x7d8>
				break;
 800188a:	bf00      	nop
 800188c:	e010      	b.n	80018b0 <_Z15All_mode_UARTUIv+0x7d8>
				break;
 800188e:	bf00      	nop
 8001890:	e00e      	b.n	80018b0 <_Z15All_mode_UARTUIv+0x7d8>
				break;
 8001892:	bf00      	nop
 8001894:	e00c      	b.n	80018b0 <_Z15All_mode_UARTUIv+0x7d8>
				break;
 8001896:	bf00      	nop
 8001898:	e00a      	b.n	80018b0 <_Z15All_mode_UARTUIv+0x7d8>
				break;
 800189a:	bf00      	nop
 800189c:	e008      	b.n	80018b0 <_Z15All_mode_UARTUIv+0x7d8>
				break;
 800189e:	bf00      	nop
 80018a0:	e006      	b.n	80018b0 <_Z15All_mode_UARTUIv+0x7d8>
				break;
 80018a2:	bf00      	nop
 80018a4:	e004      	b.n	80018b0 <_Z15All_mode_UARTUIv+0x7d8>
				break;
 80018a6:	bf00      	nop
 80018a8:	e002      	b.n	80018b0 <_Z15All_mode_UARTUIv+0x7d8>
				break;
 80018aa:	bf00      	nop
 80018ac:	e000      	b.n	80018b0 <_Z15All_mode_UARTUIv+0x7d8>
				break;
 80018ae:	bf00      	nop
			}
}
 80018b0:	bf00      	nop
 80018b2:	3720      	adds	r7, #32
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	51eb851f 	.word	0x51eb851f
 80018bc:	40191eb8 	.word	0x40191eb8
 80018c0:	2000073a 	.word	0x2000073a
 80018c4:	20000718 	.word	0x20000718
 80018c8:	2000077d 	.word	0x2000077d
 80018cc:	2000077c 	.word	0x2000077c
 80018d0:	2000077e 	.word	0x2000077e
 80018d4:	20000783 	.word	0x20000783
 80018d8:	2000068c 	.word	0x2000068c
 80018dc:	461c4000 	.word	0x461c4000
 80018e0:	2000073c 	.word	0x2000073c
 80018e4:	20000160 	.word	0x20000160
 80018e8:	2000039c 	.word	0x2000039c
 80018ec:	20000670 	.word	0x20000670
 80018f0:	404e0000 	.word	0x404e0000
 80018f4:	20000740 	.word	0x20000740
 80018f8:	20000164 	.word	0x20000164
 80018fc:	437f0000 	.word	0x437f0000
 8001900:	200006e3 	.word	0x200006e3
 8001904:	200006e5 	.word	0x200006e5
 8001908:	200006e4 	.word	0x200006e4
 800190c:	20000528 	.word	0x20000528
 8001910:	200004a0 	.word	0x200004a0

08001914 <_Z7xu_Uartv>:

void xu_Uart(){
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
	//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
	HAL_UART_Transmit(&huart2, (uint8_t*)temp_s_ack1, 2 ,1000); //Xu
 8001918:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800191c:	2202      	movs	r2, #2
 800191e:	4903      	ldr	r1, [pc, #12]	; (800192c <_Z7xu_Uartv+0x18>)
 8001920:	4803      	ldr	r0, [pc, #12]	; (8001930 <_Z7xu_Uartv+0x1c>)
 8001922:	f019 ff78 	bl	801b816 <HAL_UART_Transmit>
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20000154 	.word	0x20000154
 8001930:	2000039c 	.word	0x2000039c

08001934 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8001934:	b5b0      	push	{r4, r5, r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
      return pow(__type(__x), __type(__y));
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7fe fdf0 	bl	8000524 <__aeabi_i2d>
 8001944:	4604      	mov	r4, r0
 8001946:	460d      	mov	r5, r1
 8001948:	6838      	ldr	r0, [r7, #0]
 800194a:	f7fe fdeb 	bl	8000524 <__aeabi_i2d>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	ec43 2b11 	vmov	d1, r2, r3
 8001956:	ec45 4b10 	vmov	d0, r4, r5
 800195a:	f01b f943 	bl	801cbe4 <pow>
 800195e:	eeb0 7a40 	vmov.f32	s14, s0
 8001962:	eef0 7a60 	vmov.f32	s15, s1
    }
 8001966:	eeb0 0a47 	vmov.f32	s0, s14
 800196a:	eef0 0a67 	vmov.f32	s1, s15
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bdb0      	pop	{r4, r5, r7, pc}

08001974 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001974:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001978:	b0f0      	sub	sp, #448	; 0x1c0
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	/////assign  Matrix  element value  //////////
		A << 1 ,   Dt    ,   (Dt*Dt)/2 ,
 800197c:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001980:	f5a3 72c0 	sub.w	r2, r3, #384	; 0x180
 8001984:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001988:	6013      	str	r3, [r2, #0]
 800198a:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 800198e:	f5a3 70c8 	sub.w	r0, r3, #400	; 0x190
 8001992:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001996:	461a      	mov	r2, r3
 8001998:	49ee      	ldr	r1, [pc, #952]	; (8001d54 <main+0x3e0>)
 800199a:	f002 fab8 	bl	8003f0e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>
 800199e:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80019a2:	f5a3 72be 	sub.w	r2, r3, #380	; 0x17c
 80019a6:	4bec      	ldr	r3, [pc, #944]	; (8001d58 <main+0x3e4>)
 80019a8:	6013      	str	r3, [r2, #0]
 80019aa:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80019ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f002 fac5 	bl	8003f44 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 80019ba:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80019be:	f5a3 72bc 	sub.w	r2, r3, #376	; 0x178
 80019c2:	4be6      	ldr	r3, [pc, #920]	; (8001d5c <main+0x3e8>)
 80019c4:	6013      	str	r3, [r2, #0]
 80019c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80019ca:	4619      	mov	r1, r3
 80019cc:	f002 faba 	bl	8003f44 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		     0 ,    1    ,      Dt    ,
 80019d0:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80019d4:	f5a3 72ba 	sub.w	r2, r3, #372	; 0x174
 80019d8:	f04f 0300 	mov.w	r3, #0
 80019dc:	6013      	str	r3, [r2, #0]
 80019de:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019e2:	4619      	mov	r1, r3
 80019e4:	f002 faae 	bl	8003f44 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 80019e8:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80019ec:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 80019f0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80019fa:	4619      	mov	r1, r3
 80019fc:	f002 faa2 	bl	8003f44 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001a00:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001a04:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 8001a08:	4bd3      	ldr	r3, [pc, #844]	; (8001d58 <main+0x3e4>)
 8001a0a:	6013      	str	r3, [r2, #0]
 8001a0c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a10:	4619      	mov	r1, r3
 8001a12:	f002 fa97 	bl	8003f44 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
			 0 ,    0    ,      1     ;
 8001a16:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001a1a:	f5a3 72b4 	sub.w	r2, r3, #360	; 0x168
 8001a1e:	f04f 0300 	mov.w	r3, #0
 8001a22:	6013      	str	r3, [r2, #0]
 8001a24:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f002 fa8b 	bl	8003f44 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001a2e:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001a32:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 8001a36:	f04f 0300 	mov.w	r3, #0
 8001a3a:	6013      	str	r3, [r2, #0]
 8001a3c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a40:	4619      	mov	r1, r3
 8001a42:	f002 fa7f 	bl	8003f44 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001a46:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001a4a:	f5a3 72b0 	sub.w	r2, r3, #352	; 0x160
 8001a4e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f002 fa73 	bl	8003f44 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		A << 1 ,   Dt    ,   (Dt*Dt)/2 ,
 8001a5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a62:	4618      	mov	r0, r3
 8001a64:	f002 fa62 	bl	8003f2c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>

		X << 0 ,    0    ,      0     ;
 8001a68:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001a6c:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 8001a70:	f04f 0300 	mov.w	r3, #0
 8001a74:	6013      	str	r3, [r2, #0]
 8001a76:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001a7a:	f5a3 70ae 	sub.w	r0, r3, #348	; 0x15c
 8001a7e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a82:	461a      	mov	r2, r3
 8001a84:	49b6      	ldr	r1, [pc, #728]	; (8001d60 <main+0x3ec>)
 8001a86:	f002 facd 	bl	8004024 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>
 8001a8a:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001a8e:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8001a92:	f04f 0300 	mov.w	r3, #0
 8001a96:	6013      	str	r3, [r2, #0]
 8001a98:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001a9c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001aa0:	4611      	mov	r1, r2
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f002 fada 	bl	800405c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001aa8:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001aac:	f5a3 72a2 	sub.w	r2, r3, #324	; 0x144
 8001ab0:	f04f 0300 	mov.w	r3, #0
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001aba:	4619      	mov	r1, r3
 8001abc:	f002 face 	bl	800405c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001ac0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f002 fabc 	bl	8004042 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>

		X1 << 0 ,    0    ,      0     ;
 8001aca:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001ace:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 8001ad2:	f04f 0300 	mov.w	r3, #0
 8001ad6:	6013      	str	r3, [r2, #0]
 8001ad8:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001adc:	f5a3 70a0 	sub.w	r0, r3, #320	; 0x140
 8001ae0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	499f      	ldr	r1, [pc, #636]	; (8001d64 <main+0x3f0>)
 8001ae8:	f002 fa9c 	bl	8004024 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>
 8001aec:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001af0:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 8001af4:	f04f 0300 	mov.w	r3, #0
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8001afe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b02:	4611      	mov	r1, r2
 8001b04:	4618      	mov	r0, r3
 8001b06:	f002 faa9 	bl	800405c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001b0a:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001b0e:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 8001b12:	f04f 0300 	mov.w	r3, #0
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f002 fa9d 	bl	800405c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001b22:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b26:	4618      	mov	r0, r3
 8001b28:	f002 fa8b 	bl	8004042 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>


		P << 0.000001 , 			0 	 , 			0     ,
 8001b2c:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001b30:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 8001b34:	4b8c      	ldr	r3, [pc, #560]	; (8001d68 <main+0x3f4>)
 8001b36:	6013      	str	r3, [r2, #0]
 8001b38:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001b3c:	f5a3 7092 	sub.w	r0, r3, #292	; 0x124
 8001b40:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b44:	461a      	mov	r2, r3
 8001b46:	4989      	ldr	r1, [pc, #548]	; (8001d6c <main+0x3f8>)
 8001b48:	f002 f9e1 	bl	8003f0e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>
 8001b4c:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001b50:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8001b54:	f04f 0300 	mov.w	r3, #0
 8001b58:	6013      	str	r3, [r2, #0]
 8001b5a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8001b5e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b62:	4611      	mov	r1, r2
 8001b64:	4618      	mov	r0, r3
 8001b66:	f002 f9ed 	bl	8003f44 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001b6a:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001b6e:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8001b72:	f04f 0300 	mov.w	r3, #0
 8001b76:	6013      	str	r3, [r2, #0]
 8001b78:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f002 f9e1 	bl	8003f44 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		     0 		 ,    0.000001    ,  		0     ,
 8001b82:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001b86:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8001b8a:	f04f 0300 	mov.w	r3, #0
 8001b8e:	6013      	str	r3, [r2, #0]
 8001b90:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001b94:	4619      	mov	r1, r3
 8001b96:	f002 f9d5 	bl	8003f44 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001b9a:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001b9e:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 8001ba2:	4b71      	ldr	r3, [pc, #452]	; (8001d68 <main+0x3f4>)
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001baa:	4619      	mov	r1, r3
 8001bac:	f002 f9ca 	bl	8003f44 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001bb0:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001bb4:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8001bb8:	f04f 0300 	mov.w	r3, #0
 8001bbc:	6013      	str	r3, [r2, #0]
 8001bbe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	f002 f9be 	bl	8003f44 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001bc8:	4602      	mov	r2, r0
			 0 		 ,    		0    ,      0.000001     ;
 8001bca:	f04f 0300 	mov.w	r3, #0
 8001bce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001bd2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4610      	mov	r0, r2
 8001bda:	f002 f9b3 	bl	8003f44 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001bde:	4602      	mov	r2, r0
 8001be0:	f04f 0300 	mov.w	r3, #0
 8001be4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001be8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001bec:	4619      	mov	r1, r3
 8001bee:	4610      	mov	r0, r2
 8001bf0:	f002 f9a8 	bl	8003f44 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	4b5c      	ldr	r3, [pc, #368]	; (8001d68 <main+0x3f4>)
 8001bf8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001bfc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c00:	4619      	mov	r1, r3
 8001c02:	4610      	mov	r0, r2
 8001c04:	f002 f99e 	bl	8003f44 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		P << 0.000001 , 			0 	 , 			0     ,
 8001c08:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f002 f98d 	bl	8003f2c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>

		O << 0 , 	0 	 , 		0     ,
 8001c12:	f04f 0300 	mov.w	r3, #0
 8001c16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001c1a:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8001c1e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001c22:	461a      	mov	r2, r3
 8001c24:	4952      	ldr	r1, [pc, #328]	; (8001d70 <main+0x3fc>)
 8001c26:	f002 f972 	bl	8003f0e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>
 8001c2a:	f04f 0300 	mov.w	r3, #0
 8001c2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001c32:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8001c36:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001c3a:	4611      	mov	r1, r2
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f002 f981 	bl	8003f44 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001c42:	4602      	mov	r2, r0
 8001c44:	f04f 0300 	mov.w	r3, #0
 8001c48:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001c4c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001c50:	4619      	mov	r1, r3
 8001c52:	4610      	mov	r0, r2
 8001c54:	f002 f976 	bl	8003f44 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001c58:	4602      	mov	r2, r0
		     0 ,    0    ,  	0     ,
 8001c5a:	f04f 0300 	mov.w	r3, #0
 8001c5e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001c62:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001c66:	4619      	mov	r1, r3
 8001c68:	4610      	mov	r0, r2
 8001c6a:	f002 f96b 	bl	8003f44 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	f04f 0300 	mov.w	r3, #0
 8001c74:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001c78:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4610      	mov	r0, r2
 8001c80:	f002 f960 	bl	8003f44 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001c84:	4602      	mov	r2, r0
 8001c86:	f04f 0300 	mov.w	r3, #0
 8001c8a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001c8e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001c92:	4619      	mov	r1, r3
 8001c94:	4610      	mov	r0, r2
 8001c96:	f002 f955 	bl	8003f44 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001c9a:	4602      	mov	r2, r0
			 0 ,    0    ,      0     ;
 8001c9c:	f04f 0300 	mov.w	r3, #0
 8001ca0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001ca4:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4610      	mov	r0, r2
 8001cac:	f002 f94a 	bl	8003f44 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	f04f 0300 	mov.w	r3, #0
 8001cb6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001cba:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4610      	mov	r0, r2
 8001cc2:	f002 f93f 	bl	8003f44 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	f04f 0300 	mov.w	r3, #0
 8001ccc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001cd0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4610      	mov	r0, r2
 8001cd8:	f002 f934 	bl	8003f44 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		O << 0 , 	0 	 , 		0     ,
 8001cdc:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f002 f923 	bl	8003f2c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>

		I << 1 , 0 , 0 ,
 8001ce6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001cea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001cee:	f507 7082 	add.w	r0, r7, #260	; 0x104
 8001cf2:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	491e      	ldr	r1, [pc, #120]	; (8001d74 <main+0x400>)
 8001cfa:	f002 f908 	bl	8003f0e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>
 8001cfe:	f04f 0300 	mov.w	r3, #0
 8001d02:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001d06:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001d0a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001d0e:	4611      	mov	r1, r2
 8001d10:	4618      	mov	r0, r3
 8001d12:	f002 f917 	bl	8003f44 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001d16:	4602      	mov	r2, r0
 8001d18:	f04f 0300 	mov.w	r3, #0
 8001d1c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001d20:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001d24:	4619      	mov	r1, r3
 8001d26:	4610      	mov	r0, r2
 8001d28:	f002 f90c 	bl	8003f44 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001d2c:	4602      	mov	r2, r0
			 0 , 1 , 0 ,
 8001d2e:	f04f 0300 	mov.w	r3, #0
 8001d32:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001d36:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	f002 f901 	bl	8003f44 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001d42:	4602      	mov	r2, r0
 8001d44:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001d48:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001d4c:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001d50:	e012      	b.n	8001d78 <main+0x404>
 8001d52:	bf00      	nop
 8001d54:	20000560 	.word	0x20000560
 8001d58:	3c23d70a 	.word	0x3c23d70a
 8001d5c:	3851b717 	.word	0x3851b717
 8001d60:	20000648 	.word	0x20000648
 8001d64:	20000654 	.word	0x20000654
 8001d68:	358637bd 	.word	0x358637bd
 8001d6c:	20000584 	.word	0x20000584
 8001d70:	200005a8 	.word	0x200005a8
 8001d74:	200005cc 	.word	0x200005cc
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4610      	mov	r0, r2
 8001d7c:	f002 f8e2 	bl	8003f44 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001d80:	4602      	mov	r2, r0
 8001d82:	f04f 0300 	mov.w	r3, #0
 8001d86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001d8a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4610      	mov	r0, r2
 8001d92:	f002 f8d7 	bl	8003f44 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001d96:	4602      	mov	r2, r0
			 0 , 0 , 1 ;
 8001d98:	f04f 0300 	mov.w	r3, #0
 8001d9c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001da0:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001da4:	4619      	mov	r1, r3
 8001da6:	4610      	mov	r0, r2
 8001da8:	f002 f8cc 	bl	8003f44 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001dac:	4602      	mov	r2, r0
 8001dae:	f04f 0300 	mov.w	r3, #0
 8001db2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001db6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4610      	mov	r0, r2
 8001dbe:	f002 f8c1 	bl	8003f44 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001dc8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001dcc:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	f002 f8b6 	bl	8003f44 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		I << 1 , 0 , 0 ,
 8001dd8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f002 f8a5 	bl	8003f2c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>

		R << pow(10, -1); ;
 8001de2:	f04f 31ff 	mov.w	r1, #4294967295
 8001de6:	200a      	movs	r0, #10
 8001de8:	f7ff fda4 	bl	8001934 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001dec:	ec53 2b10 	vmov	r2, r3, d0
 8001df0:	4610      	mov	r0, r2
 8001df2:	4619      	mov	r1, r3
 8001df4:	f7fe feb0 	bl	8000b58 <__aeabi_d2f>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8001dfe:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8001e02:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001e06:	461a      	mov	r2, r3
 8001e08:	498b      	ldr	r1, [pc, #556]	; (8002038 <main+0x6c4>)
 8001e0a:	f002 f997 	bl	800413c <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEElsERKf>
 8001e0e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001e12:	4618      	mov	r0, r3
 8001e14:	f002 f9a1 	bl	800415a <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>

		D << 0 ;
 8001e18:	f04f 0300 	mov.w	r3, #0
 8001e1c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8001e20:	f507 70a6 	add.w	r0, r7, #332	; 0x14c
 8001e24:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4984      	ldr	r1, [pc, #528]	; (800203c <main+0x6c8>)
 8001e2c:	f002 f986 	bl	800413c <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEElsERKf>
 8001e30:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8001e34:	4618      	mov	r0, r3
 8001e36:	f002 f990 	bl	800415a <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>

		B << 0 , 0 , 0 ;
 8001e3a:	f04f 0300 	mov.w	r3, #0
 8001e3e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8001e42:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 8001e46:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	497c      	ldr	r1, [pc, #496]	; (8002040 <main+0x6cc>)
 8001e4e:	f002 f8e9 	bl	8004024 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>
 8001e52:	f04f 0300 	mov.w	r3, #0
 8001e56:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8001e5a:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8001e5e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001e62:	4611      	mov	r1, r2
 8001e64:	4618      	mov	r0, r3
 8001e66:	f002 f8f9 	bl	800405c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	f04f 0300 	mov.w	r3, #0
 8001e70:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8001e74:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	f002 f8ee 	bl	800405c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001e80:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001e84:	4618      	mov	r0, r3
 8001e86:	f002 f8dc 	bl	8004042 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>

		C << 1 , 0 , 0 ;
 8001e8a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001e8e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8001e92:	f507 70be 	add.w	r0, r7, #380	; 0x17c
 8001e96:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	4969      	ldr	r1, [pc, #420]	; (8002044 <main+0x6d0>)
 8001e9e:	f002 f968 	bl	8004172 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEElsERKf>
 8001ea2:	f04f 0300 	mov.w	r3, #0
 8001ea6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8001eaa:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8001eae:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f002 f977 	bl	80041a8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	f04f 0300 	mov.w	r3, #0
 8001ec0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8001ec4:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4610      	mov	r0, r2
 8001ecc:	f002 f96c 	bl	80041a8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf>
 8001ed0:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f002 f95b 	bl	8004190 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>

		G << (Dt*Dt)/2 , Dt , 1 ;
 8001eda:	4b5b      	ldr	r3, [pc, #364]	; (8002048 <main+0x6d4>)
 8001edc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001ee0:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 8001ee4:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001ee8:	461a      	mov	r2, r3
 8001eea:	4958      	ldr	r1, [pc, #352]	; (800204c <main+0x6d8>)
 8001eec:	f002 f89a 	bl	8004024 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>
 8001ef0:	4b57      	ldr	r3, [pc, #348]	; (8002050 <main+0x6dc>)
 8001ef2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8001ef6:	f507 72d6 	add.w	r2, r7, #428	; 0x1ac
 8001efa:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001efe:	4611      	mov	r1, r2
 8001f00:	4618      	mov	r0, r3
 8001f02:	f002 f8ab 	bl	800405c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001f06:	4602      	mov	r2, r0
 8001f08:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001f0c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8001f10:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001f14:	4619      	mov	r1, r3
 8001f16:	4610      	mov	r0, r2
 8001f18:	f002 f8a0 	bl	800405c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001f1c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001f20:	4618      	mov	r0, r3
 8001f22:	f002 f88e 	bl	8004042 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f26:	f014 f98f 	bl	8016248 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f2a:	f000 f97b 	bl	8002224 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f2e:	f000 fb8b 	bl	8002648 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001f32:	f000 fb61 	bl	80025f8 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 8001f36:	f000 f9e7 	bl	8002308 <_ZL12MX_I2C1_Initv>
  MX_TIM11_Init();
 8001f3a:	f000 fb05 	bl	8002548 <_ZL13MX_TIM11_Initv>
  MX_TIM4_Init();
 8001f3e:	f000 fa4b 	bl	80023d8 <_ZL12MX_TIM4_Initv>
  MX_I2C3_Init();
 8001f42:	f000 fa15 	bl	8002370 <_ZL12MX_I2C3_Initv>
  MX_USART2_UART_Init();
 8001f46:	f000 fb27 	bl	8002598 <_ZL19MX_USART2_UART_Initv>
  MX_TIM10_Init();
 8001f4a:	f000 fad5 	bl	80024f8 <_ZL13MX_TIM10_Initv>
  /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start_IT(&htim10); // milli timer
 8001f4e:	4841      	ldr	r0, [pc, #260]	; (8002054 <main+0x6e0>)
 8001f50:	f018 fca0 	bl	801a894 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim11); // micro timer
 8001f54:	4840      	ldr	r0, [pc, #256]	; (8002058 <main+0x6e4>)
 8001f56:	f018 fc9d 	bl	801a894 <HAL_TIM_Base_Start_IT>
    //HAL_TIM_Base_Start(&htim2); // Speed
    //HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*) &capturedata,CAPTURENUM);

    //PWM Test
    HAL_TIM_Base_Start(&htim4);
 8001f5a:	4840      	ldr	r0, [pc, #256]	; (800205c <main+0x6e8>)
 8001f5c:	f018 fc40 	bl	801a7e0 <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001f60:	2100      	movs	r1, #0
 8001f62:	483e      	ldr	r0, [pc, #248]	; (800205c <main+0x6e8>)
 8001f64:	f018 fd52 	bl	801aa0c <HAL_TIM_PWM_Start>

    //UART UI
    HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuf, RxBuf_SIZE);
 8001f68:	2220      	movs	r2, #32
 8001f6a:	493d      	ldr	r1, [pc, #244]	; (8002060 <main+0x6ec>)
 8001f6c:	483d      	ldr	r0, [pc, #244]	; (8002064 <main+0x6f0>)
 8001f6e:	f019 fce4 	bl	801b93a <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001f72:	4b3d      	ldr	r3, [pc, #244]	; (8002068 <main+0x6f4>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6819      	ldr	r1, [r3, #0]
 8001f78:	4b3b      	ldr	r3, [pc, #236]	; (8002068 <main+0x6f4>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	f021 0308 	bic.w	r3, r1, #8
 8001f80:	6013      	str	r3, [r2, #0]

    ////// ===== Select DataPosition Dataset =================
    static uint8_t NumPosDataSetx  = 0 + NumPosDataSetDef;
    switch(NumPosDataSetx){
 8001f82:	4b3a      	ldr	r3, [pc, #232]	; (800206c <main+0x6f8>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b03      	cmp	r3, #3
 8001f88:	d038      	beq.n	8001ffc <main+0x688>
 8001f8a:	2b03      	cmp	r3, #3
 8001f8c:	dc79      	bgt.n	8002082 <main+0x70e>
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d002      	beq.n	8001f98 <main+0x624>
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d019      	beq.n	8001fca <main+0x656>
 8001f96:	e074      	b.n	8002082 <main+0x70e>

    case 1:
    	for(int t = 0;t <= PosBufSize ;t++){
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001f9e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001fa2:	2b14      	cmp	r3, #20
 8001fa4:	dc43      	bgt.n	800202e <main+0x6ba>
		PosDataSet[t] = rawPossw_1[t];
 8001fa6:	4a32      	ldr	r2, [pc, #200]	; (8002070 <main+0x6fc>)
 8001fa8:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	6819      	ldr	r1, [r3, #0]
 8001fb2:	4a30      	ldr	r2, [pc, #192]	; (8002074 <main+0x700>)
 8001fb4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4413      	add	r3, r2
 8001fbc:	6019      	str	r1, [r3, #0]
    	for(int t = 0;t <= PosBufSize ;t++){
 8001fbe:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001fc8:	e7e9      	b.n	8001f9e <main+0x62a>
		} break;

    case 2:
    	for(int t = 0;t <= PosBufSize ;t++){
 8001fca:	2300      	movs	r3, #0
 8001fcc:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8001fd0:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8001fd4:	2b14      	cmp	r3, #20
 8001fd6:	dc2c      	bgt.n	8002032 <main+0x6be>
		PosDataSet[t] = rawPossw_2[t];
 8001fd8:	4a27      	ldr	r2, [pc, #156]	; (8002078 <main+0x704>)
 8001fda:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	6819      	ldr	r1, [r3, #0]
 8001fe4:	4a23      	ldr	r2, [pc, #140]	; (8002074 <main+0x700>)
 8001fe6:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	6019      	str	r1, [r3, #0]
    	for(int t = 0;t <= PosBufSize ;t++){
 8001ff0:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8001ffa:	e7e9      	b.n	8001fd0 <main+0x65c>
		} break;

    case 3:
    	for(int t = 0;t <= PosBufSize ;t++){
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8002002:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002006:	2b14      	cmp	r3, #20
 8002008:	dc3a      	bgt.n	8002080 <main+0x70c>
    	PosDataSet[t] = rawPossw_3[t];
 800200a:	4a1c      	ldr	r2, [pc, #112]	; (800207c <main+0x708>)
 800200c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4413      	add	r3, r2
 8002014:	6819      	ldr	r1, [r3, #0]
 8002016:	4a17      	ldr	r2, [pc, #92]	; (8002074 <main+0x700>)
 8002018:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4413      	add	r3, r2
 8002020:	6019      	str	r1, [r3, #0]
    	for(int t = 0;t <= PosBufSize ;t++){
 8002022:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002026:	3301      	adds	r3, #1
 8002028:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 800202c:	e7e9      	b.n	8002002 <main+0x68e>
		} break;
 800202e:	bf00      	nop
 8002030:	e027      	b.n	8002082 <main+0x70e>
		} break;
 8002032:	bf00      	nop
 8002034:	e025      	b.n	8002082 <main+0x70e>
 8002036:	bf00      	nop
 8002038:	200005f4 	.word	0x200005f4
 800203c:	200005f8 	.word	0x200005f8
 8002040:	20000660 	.word	0x20000660
 8002044:	2000060c 	.word	0x2000060c
 8002048:	3851b717 	.word	0x3851b717
 800204c:	20000618 	.word	0x20000618
 8002050:	3c23d70a 	.word	0x3c23d70a
 8002054:	2000030c 	.word	0x2000030c
 8002058:	20000354 	.word	0x20000354
 800205c:	200002c4 	.word	0x200002c4
 8002060:	200006f8 	.word	0x200006f8
 8002064:	2000039c 	.word	0x2000039c
 8002068:	200003e0 	.word	0x200003e0
 800206c:	20000168 	.word	0x20000168
 8002070:	20000000 	.word	0x20000000
 8002074:	200004c0 	.word	0x200004c0
 8002078:	20000050 	.word	0x20000050
 800207c:	200000a0 	.word	0x200000a0
    	}break;
 8002080:	bf00      	nop
    ////============position buffer Set Default===================
    //for(int f = 0; f <= PosBufSize; f++){
    //		positionlog[f] = -1.0;
    //	}
    //MCP23017 setting init
    HAL_Delay(50);
 8002082:	2032      	movs	r0, #50	; 0x32
 8002084:	f014 f952 	bl	801632c <HAL_Delay>
    IOExpenderInit();
 8002088:	f001 fd16 	bl	8003ab8 <_Z14IOExpenderInitv>
	      ///// IT test
	 //HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);

	  	  ///// GrandState ///////////////////

	  	  if(micros() - TimeStampGrand >= 1000){
 800208c:	f001 fe68 	bl	8003d60 <_Z6microsv>
 8002090:	4b57      	ldr	r3, [pc, #348]	; (80021f0 <main+0x87c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2200      	movs	r2, #0
 8002096:	62bb      	str	r3, [r7, #40]	; 0x28
 8002098:	62fa      	str	r2, [r7, #44]	; 0x2c
 800209a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800209c:	ebb0 0803 	subs.w	r8, r0, r3
 80020a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a2:	eb61 0903 	sbc.w	r9, r1, r3
 80020a6:	f5b8 7f7a 	cmp.w	r8, #1000	; 0x3e8
 80020aa:	f179 0300 	sbcs.w	r3, r9, #0
 80020ae:	bf2c      	ite	cs
 80020b0:	2301      	movcs	r3, #1
 80020b2:	2300      	movcc	r3, #0
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d007      	beq.n	80020ca <main+0x756>
	  		TimeStampGrand = micros();
 80020ba:	f001 fe51 	bl	8003d60 <_Z6microsv>
 80020be:	4602      	mov	r2, r0
 80020c0:	460b      	mov	r3, r1
 80020c2:	4b4b      	ldr	r3, [pc, #300]	; (80021f0 <main+0x87c>)
 80020c4:	601a      	str	r2, [r3, #0]
	  		GrandStatumix();
 80020c6:	f000 fba9 	bl	800281c <_Z13GrandStatumixv>
	  		//CurrentEn = BinPosXI * 0.006136;
	  	  }

	  	  // Encoder I2CRead

	  	  if (micros()-timeStampSR >= 3000)      // don't use 1
 80020ca:	f001 fe49 	bl	8003d60 <_Z6microsv>
 80020ce:	4b49      	ldr	r3, [pc, #292]	; (80021f4 <main+0x880>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2200      	movs	r2, #0
 80020d4:	623b      	str	r3, [r7, #32]
 80020d6:	627a      	str	r2, [r7, #36]	; 0x24
 80020d8:	6a3b      	ldr	r3, [r7, #32]
 80020da:	1ac3      	subs	r3, r0, r3
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	eb61 0303 	sbc.w	r3, r1, r3
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80020ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80020ee:	4602      	mov	r2, r0
 80020f0:	429a      	cmp	r2, r3
 80020f2:	460b      	mov	r3, r1
 80020f4:	f173 0300 	sbcs.w	r3, r3, #0
 80020f8:	bf2c      	ite	cs
 80020fa:	2301      	movcs	r3, #1
 80020fc:	2300      	movcc	r3, #0
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b00      	cmp	r3, #0
 8002102:	d008      	beq.n	8002116 <main+0x7a2>
	  	          {
	  	              timeStampSR = micros();           //set new time stamp
 8002104:	f001 fe2c 	bl	8003d60 <_Z6microsv>
 8002108:	4602      	mov	r2, r0
 800210a:	460b      	mov	r3, r1
 800210c:	4b39      	ldr	r3, [pc, #228]	; (80021f4 <main+0x880>)
 800210e:	601a      	str	r2, [r3, #0]
	  	              flag_absenc = 1;
 8002110:	4a39      	ldr	r2, [pc, #228]	; (80021f8 <main+0x884>)
 8002112:	2301      	movs	r3, #1
 8002114:	7013      	strb	r3, [r2, #0]
	  	          }
	  	  AbsEncI2CReadx(RawEnBitAB);
 8002116:	4839      	ldr	r0, [pc, #228]	; (80021fc <main+0x888>)
 8002118:	f001 fce4 	bl	8003ae4 <_Z14AbsEncI2CReadxPh>
	  	  //Unwrapping();
	  	  //Kalmanfilter();

	  	  ///////////////////// 2KHz change PWM PB6////////////////////

	  	  if(micros() - timestampPWM >= 500){
 800211c:	f001 fe20 	bl	8003d60 <_Z6microsv>
 8002120:	4b37      	ldr	r3, [pc, #220]	; (8002200 <main+0x88c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2200      	movs	r2, #0
 8002126:	61bb      	str	r3, [r7, #24]
 8002128:	61fa      	str	r2, [r7, #28]
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	ebb0 0a03 	subs.w	sl, r0, r3
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	eb61 0b03 	sbc.w	fp, r1, r3
 8002136:	f5ba 7ffa 	cmp.w	sl, #500	; 0x1f4
 800213a:	f17b 0300 	sbcs.w	r3, fp, #0
 800213e:	bf2c      	ite	cs
 8002140:	2301      	movcs	r3, #1
 8002142:	2300      	movcc	r3, #0
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d01a      	beq.n	8002180 <main+0x80c>
	  		  	  timestampPWM = micros(); // stamp
 800214a:	f001 fe09 	bl	8003d60 <_Z6microsv>
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	4b2b      	ldr	r3, [pc, #172]	; (8002200 <main+0x88c>)
 8002154:	601a      	str	r2, [r3, #0]
	  	  		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWMOut); // dutycycle
 8002156:	4b2b      	ldr	r3, [pc, #172]	; (8002204 <main+0x890>)
 8002158:	8819      	ldrh	r1, [r3, #0]
 800215a:	4b2b      	ldr	r3, [pc, #172]	; (8002208 <main+0x894>)
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	460b      	mov	r3, r1
 8002160:	6353      	str	r3, [r2, #52]	; 0x34
	  	  		  //__HAL_TIM_SET_PRESCALER(&htim4, pscalr); // Set freq of pwm
	  	  		  //ADC_Target = ADCFeedx[1].datt;

	  	  		///// Mot Driver ///////////////////
	  	  		if (mot_dirctn == 0){
 8002162:	4b2a      	ldr	r3, [pc, #168]	; (800220c <main+0x898>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d105      	bne.n	8002176 <main+0x802>
	  	  		HAL_GPIO_WritePin(Mot_dir_GPIO_Port, Mot_dir_Pin, GPIO_PIN_SET);
 800216a:	2201      	movs	r2, #1
 800216c:	2104      	movs	r1, #4
 800216e:	4828      	ldr	r0, [pc, #160]	; (8002210 <main+0x89c>)
 8002170:	f014 ffbe 	bl	80170f0 <HAL_GPIO_WritePin>
 8002174:	e004      	b.n	8002180 <main+0x80c>
	  	  		}else{
	  	  		HAL_GPIO_WritePin(Mot_dir_GPIO_Port, Mot_dir_Pin, GPIO_PIN_RESET);
 8002176:	2200      	movs	r2, #0
 8002178:	2104      	movs	r1, #4
 800217a:	4825      	ldr	r0, [pc, #148]	; (8002210 <main+0x89c>)
 800217c:	f014 ffb8 	bl	80170f0 <HAL_GPIO_WritePin>
				controlloop();
			 }
	  	    */

	  	 //////////// End Effector /////////////////////
	  	 Efft_activate(); // Activate by flag_efftActi = 1;
 8002180:	f001 fd06 	bl	8003b90 <_Z13Efft_activatev>
	  	 Efft_read(&efft_status);
 8002184:	4823      	ldr	r0, [pc, #140]	; (8002214 <main+0x8a0>)
 8002186:	f001 fd53 	bl	8003c30 <_Z9Efft_readPh>
	  	 //// trig_efftRead up for 10 times afrer shoot / trig at shoot state

	  	 if(trig_efftRead != 0 && millis() - timestamp_efft >= 500){
 800218a:	4b23      	ldr	r3, [pc, #140]	; (8002218 <main+0x8a4>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d014      	beq.n	80021bc <main+0x848>
 8002192:	f001 fdff 	bl	8003d94 <_Z6millisv>
 8002196:	4603      	mov	r3, r0
 8002198:	2200      	movs	r2, #0
 800219a:	613b      	str	r3, [r7, #16]
 800219c:	617a      	str	r2, [r7, #20]
 800219e:	4b1f      	ldr	r3, [pc, #124]	; (800221c <main+0x8a8>)
 80021a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a4:	6939      	ldr	r1, [r7, #16]
 80021a6:	1a8c      	subs	r4, r1, r2
 80021a8:	6979      	ldr	r1, [r7, #20]
 80021aa:	eb61 0503 	sbc.w	r5, r1, r3
 80021ae:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
 80021b2:	f175 0300 	sbcs.w	r3, r5, #0
 80021b6:	d301      	bcc.n	80021bc <main+0x848>
 80021b8:	2301      	movs	r3, #1
 80021ba:	e000      	b.n	80021be <main+0x84a>
 80021bc:	2300      	movs	r3, #0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f43f af64 	beq.w	800208c <main+0x718>
	  		 timestamp_efft = millis();
 80021c4:	f001 fde6 	bl	8003d94 <_Z6millisv>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2200      	movs	r2, #0
 80021cc:	603b      	str	r3, [r7, #0]
 80021ce:	607a      	str	r2, [r7, #4]
 80021d0:	4b12      	ldr	r3, [pc, #72]	; (800221c <main+0x8a8>)
 80021d2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80021d6:	e9c3 1200 	strd	r1, r2, [r3]
	  		 flag_efftRead = 1;
 80021da:	4a11      	ldr	r2, [pc, #68]	; (8002220 <main+0x8ac>)
 80021dc:	2301      	movs	r3, #1
 80021de:	7013      	strb	r3, [r2, #0]
	  		 trig_efftRead++;
 80021e0:	4b0d      	ldr	r3, [pc, #52]	; (8002218 <main+0x8a4>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	3301      	adds	r3, #1
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	4a0b      	ldr	r2, [pc, #44]	; (8002218 <main+0x8a4>)
 80021ea:	7013      	strb	r3, [r2, #0]
	  	  if(micros() - TimeStampGrand >= 1000){
 80021ec:	e74e      	b.n	800208c <main+0x718>
 80021ee:	bf00      	nop
 80021f0:	200004a4 	.word	0x200004a4
 80021f4:	20000510 	.word	0x20000510
 80021f8:	2000051a 	.word	0x2000051a
 80021fc:	20000514 	.word	0x20000514
 8002200:	20000520 	.word	0x20000520
 8002204:	2000051c 	.word	0x2000051c
 8002208:	200002c4 	.word	0x200002c4
 800220c:	20000524 	.word	0x20000524
 8002210:	40020400 	.word	0x40020400
 8002214:	200006e2 	.word	0x200006e2
 8002218:	200006e5 	.word	0x200006e5
 800221c:	200006e8 	.word	0x200006e8
 8002220:	200006e4 	.word	0x200006e4

08002224 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b094      	sub	sp, #80	; 0x50
 8002228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800222a:	f107 0320 	add.w	r3, r7, #32
 800222e:	2230      	movs	r2, #48	; 0x30
 8002230:	2100      	movs	r1, #0
 8002232:	4618      	mov	r0, r3
 8002234:	f01b fc7a 	bl	801db2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002238:	f107 030c 	add.w	r3, r7, #12
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	60da      	str	r2, [r3, #12]
 8002246:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002248:	2300      	movs	r3, #0
 800224a:	60bb      	str	r3, [r7, #8]
 800224c:	4b2c      	ldr	r3, [pc, #176]	; (8002300 <_Z18SystemClock_Configv+0xdc>)
 800224e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002250:	4a2b      	ldr	r2, [pc, #172]	; (8002300 <_Z18SystemClock_Configv+0xdc>)
 8002252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002256:	6413      	str	r3, [r2, #64]	; 0x40
 8002258:	4b29      	ldr	r3, [pc, #164]	; (8002300 <_Z18SystemClock_Configv+0xdc>)
 800225a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002264:	2300      	movs	r3, #0
 8002266:	607b      	str	r3, [r7, #4]
 8002268:	4b26      	ldr	r3, [pc, #152]	; (8002304 <_Z18SystemClock_Configv+0xe0>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a25      	ldr	r2, [pc, #148]	; (8002304 <_Z18SystemClock_Configv+0xe0>)
 800226e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002272:	6013      	str	r3, [r2, #0]
 8002274:	4b23      	ldr	r3, [pc, #140]	; (8002304 <_Z18SystemClock_Configv+0xe0>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800227c:	607b      	str	r3, [r7, #4]
 800227e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002280:	2302      	movs	r3, #2
 8002282:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002284:	2301      	movs	r3, #1
 8002286:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002288:	2310      	movs	r3, #16
 800228a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800228c:	2302      	movs	r3, #2
 800228e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002290:	2300      	movs	r3, #0
 8002292:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002294:	2308      	movs	r3, #8
 8002296:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002298:	2364      	movs	r3, #100	; 0x64
 800229a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800229c:	2302      	movs	r3, #2
 800229e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80022a0:	2304      	movs	r3, #4
 80022a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022a4:	f107 0320 	add.w	r3, r7, #32
 80022a8:	4618      	mov	r0, r3
 80022aa:	f017 fdb1 	bl	8019e10 <HAL_RCC_OscConfig>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	bf14      	ite	ne
 80022b4:	2301      	movne	r3, #1
 80022b6:	2300      	moveq	r3, #0
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80022be:	f001 fd9f 	bl	8003e00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022c2:	230f      	movs	r3, #15
 80022c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022c6:	2302      	movs	r3, #2
 80022c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022ca:	2300      	movs	r3, #0
 80022cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022d4:	2300      	movs	r3, #0
 80022d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80022d8:	f107 030c 	add.w	r3, r7, #12
 80022dc:	2103      	movs	r1, #3
 80022de:	4618      	mov	r0, r3
 80022e0:	f018 f80e 	bl	801a300 <HAL_RCC_ClockConfig>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	bf14      	ite	ne
 80022ea:	2301      	movne	r3, #1
 80022ec:	2300      	moveq	r3, #0
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 80022f4:	f001 fd84 	bl	8003e00 <Error_Handler>
  }
}
 80022f8:	bf00      	nop
 80022fa:	3750      	adds	r7, #80	; 0x50
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40023800 	.word	0x40023800
 8002304:	40007000 	.word	0x40007000

08002308 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800230c:	4b15      	ldr	r3, [pc, #84]	; (8002364 <_ZL12MX_I2C1_Initv+0x5c>)
 800230e:	4a16      	ldr	r2, [pc, #88]	; (8002368 <_ZL12MX_I2C1_Initv+0x60>)
 8002310:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002312:	4b14      	ldr	r3, [pc, #80]	; (8002364 <_ZL12MX_I2C1_Initv+0x5c>)
 8002314:	4a15      	ldr	r2, [pc, #84]	; (800236c <_ZL12MX_I2C1_Initv+0x64>)
 8002316:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002318:	4b12      	ldr	r3, [pc, #72]	; (8002364 <_ZL12MX_I2C1_Initv+0x5c>)
 800231a:	2200      	movs	r2, #0
 800231c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800231e:	4b11      	ldr	r3, [pc, #68]	; (8002364 <_ZL12MX_I2C1_Initv+0x5c>)
 8002320:	2200      	movs	r2, #0
 8002322:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002324:	4b0f      	ldr	r3, [pc, #60]	; (8002364 <_ZL12MX_I2C1_Initv+0x5c>)
 8002326:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800232a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800232c:	4b0d      	ldr	r3, [pc, #52]	; (8002364 <_ZL12MX_I2C1_Initv+0x5c>)
 800232e:	2200      	movs	r2, #0
 8002330:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002332:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <_ZL12MX_I2C1_Initv+0x5c>)
 8002334:	2200      	movs	r2, #0
 8002336:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002338:	4b0a      	ldr	r3, [pc, #40]	; (8002364 <_ZL12MX_I2C1_Initv+0x5c>)
 800233a:	2200      	movs	r2, #0
 800233c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800233e:	4b09      	ldr	r3, [pc, #36]	; (8002364 <_ZL12MX_I2C1_Initv+0x5c>)
 8002340:	2200      	movs	r2, #0
 8002342:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002344:	4807      	ldr	r0, [pc, #28]	; (8002364 <_ZL12MX_I2C1_Initv+0x5c>)
 8002346:	f014 ff05 	bl	8017154 <HAL_I2C_Init>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	bf14      	ite	ne
 8002350:	2301      	movne	r3, #1
 8002352:	2300      	moveq	r3, #0
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800235a:	f001 fd51 	bl	8003e00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800235e:	bf00      	nop
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	2000021c 	.word	0x2000021c
 8002368:	40005400 	.word	0x40005400
 800236c:	00061a80 	.word	0x00061a80

08002370 <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002374:	4b15      	ldr	r3, [pc, #84]	; (80023cc <_ZL12MX_I2C3_Initv+0x5c>)
 8002376:	4a16      	ldr	r2, [pc, #88]	; (80023d0 <_ZL12MX_I2C3_Initv+0x60>)
 8002378:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800237a:	4b14      	ldr	r3, [pc, #80]	; (80023cc <_ZL12MX_I2C3_Initv+0x5c>)
 800237c:	4a15      	ldr	r2, [pc, #84]	; (80023d4 <_ZL12MX_I2C3_Initv+0x64>)
 800237e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002380:	4b12      	ldr	r3, [pc, #72]	; (80023cc <_ZL12MX_I2C3_Initv+0x5c>)
 8002382:	2200      	movs	r2, #0
 8002384:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002386:	4b11      	ldr	r3, [pc, #68]	; (80023cc <_ZL12MX_I2C3_Initv+0x5c>)
 8002388:	2200      	movs	r2, #0
 800238a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800238c:	4b0f      	ldr	r3, [pc, #60]	; (80023cc <_ZL12MX_I2C3_Initv+0x5c>)
 800238e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002392:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002394:	4b0d      	ldr	r3, [pc, #52]	; (80023cc <_ZL12MX_I2C3_Initv+0x5c>)
 8002396:	2200      	movs	r2, #0
 8002398:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800239a:	4b0c      	ldr	r3, [pc, #48]	; (80023cc <_ZL12MX_I2C3_Initv+0x5c>)
 800239c:	2200      	movs	r2, #0
 800239e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023a0:	4b0a      	ldr	r3, [pc, #40]	; (80023cc <_ZL12MX_I2C3_Initv+0x5c>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023a6:	4b09      	ldr	r3, [pc, #36]	; (80023cc <_ZL12MX_I2C3_Initv+0x5c>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80023ac:	4807      	ldr	r0, [pc, #28]	; (80023cc <_ZL12MX_I2C3_Initv+0x5c>)
 80023ae:	f014 fed1 	bl	8017154 <HAL_I2C_Init>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	bf14      	ite	ne
 80023b8:	2301      	movne	r3, #1
 80023ba:	2300      	moveq	r3, #0
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <_ZL12MX_I2C3_Initv+0x56>
  {
    Error_Handler();
 80023c2:	f001 fd1d 	bl	8003e00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20000270 	.word	0x20000270
 80023d0:	40005c00 	.word	0x40005c00
 80023d4:	00061a80 	.word	0x00061a80

080023d8 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08e      	sub	sp, #56	; 0x38
 80023dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	605a      	str	r2, [r3, #4]
 80023e8:	609a      	str	r2, [r3, #8]
 80023ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023ec:	f107 0320 	add.w	r3, r7, #32
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023f6:	1d3b      	adds	r3, r7, #4
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
 8002402:	611a      	str	r2, [r3, #16]
 8002404:	615a      	str	r2, [r3, #20]
 8002406:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002408:	4b39      	ldr	r3, [pc, #228]	; (80024f0 <_ZL12MX_TIM4_Initv+0x118>)
 800240a:	4a3a      	ldr	r2, [pc, #232]	; (80024f4 <_ZL12MX_TIM4_Initv+0x11c>)
 800240c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800240e:	4b38      	ldr	r3, [pc, #224]	; (80024f0 <_ZL12MX_TIM4_Initv+0x118>)
 8002410:	2200      	movs	r2, #0
 8002412:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002414:	4b36      	ldr	r3, [pc, #216]	; (80024f0 <_ZL12MX_TIM4_Initv+0x118>)
 8002416:	2200      	movs	r2, #0
 8002418:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 800241a:	4b35      	ldr	r3, [pc, #212]	; (80024f0 <_ZL12MX_TIM4_Initv+0x118>)
 800241c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002420:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002422:	4b33      	ldr	r3, [pc, #204]	; (80024f0 <_ZL12MX_TIM4_Initv+0x118>)
 8002424:	2200      	movs	r2, #0
 8002426:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002428:	4b31      	ldr	r3, [pc, #196]	; (80024f0 <_ZL12MX_TIM4_Initv+0x118>)
 800242a:	2200      	movs	r2, #0
 800242c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800242e:	4830      	ldr	r0, [pc, #192]	; (80024f0 <_ZL12MX_TIM4_Initv+0x118>)
 8002430:	f018 f986 	bl	801a740 <HAL_TIM_Base_Init>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	bf14      	ite	ne
 800243a:	2301      	movne	r3, #1
 800243c:	2300      	moveq	r3, #0
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <_ZL12MX_TIM4_Initv+0x70>
  {
    Error_Handler();
 8002444:	f001 fcdc 	bl	8003e00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800244c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800244e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002452:	4619      	mov	r1, r3
 8002454:	4826      	ldr	r0, [pc, #152]	; (80024f0 <_ZL12MX_TIM4_Initv+0x118>)
 8002456:	f018 fd53 	bl	801af00 <HAL_TIM_ConfigClockSource>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	bf14      	ite	ne
 8002460:	2301      	movne	r3, #1
 8002462:	2300      	moveq	r3, #0
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <_ZL12MX_TIM4_Initv+0x96>
  {
    Error_Handler();
 800246a:	f001 fcc9 	bl	8003e00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800246e:	4820      	ldr	r0, [pc, #128]	; (80024f0 <_ZL12MX_TIM4_Initv+0x118>)
 8002470:	f018 fa72 	bl	801a958 <HAL_TIM_PWM_Init>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	bf14      	ite	ne
 800247a:	2301      	movne	r3, #1
 800247c:	2300      	moveq	r3, #0
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <_ZL12MX_TIM4_Initv+0xb0>
  {
    Error_Handler();
 8002484:	f001 fcbc 	bl	8003e00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002488:	2300      	movs	r3, #0
 800248a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800248c:	2300      	movs	r3, #0
 800248e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002490:	f107 0320 	add.w	r3, r7, #32
 8002494:	4619      	mov	r1, r3
 8002496:	4816      	ldr	r0, [pc, #88]	; (80024f0 <_ZL12MX_TIM4_Initv+0x118>)
 8002498:	f019 f8ee 	bl	801b678 <HAL_TIMEx_MasterConfigSynchronization>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	bf14      	ite	ne
 80024a2:	2301      	movne	r3, #1
 80024a4:	2300      	moveq	r3, #0
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <_ZL12MX_TIM4_Initv+0xd8>
  {
    Error_Handler();
 80024ac:	f001 fca8 	bl	8003e00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024b0:	2360      	movs	r3, #96	; 0x60
 80024b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80024b4:	2300      	movs	r3, #0
 80024b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024b8:	2300      	movs	r3, #0
 80024ba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024bc:	2300      	movs	r3, #0
 80024be:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024c0:	1d3b      	adds	r3, r7, #4
 80024c2:	2200      	movs	r2, #0
 80024c4:	4619      	mov	r1, r3
 80024c6:	480a      	ldr	r0, [pc, #40]	; (80024f0 <_ZL12MX_TIM4_Initv+0x118>)
 80024c8:	f018 fc58 	bl	801ad7c <HAL_TIM_PWM_ConfigChannel>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	bf14      	ite	ne
 80024d2:	2301      	movne	r3, #1
 80024d4:	2300      	moveq	r3, #0
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <_ZL12MX_TIM4_Initv+0x108>
  {
    Error_Handler();
 80024dc:	f001 fc90 	bl	8003e00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80024e0:	4803      	ldr	r0, [pc, #12]	; (80024f0 <_ZL12MX_TIM4_Initv+0x118>)
 80024e2:	f013 fc25 	bl	8015d30 <HAL_TIM_MspPostInit>

}
 80024e6:	bf00      	nop
 80024e8:	3738      	adds	r7, #56	; 0x38
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	200002c4 	.word	0x200002c4
 80024f4:	40000800 	.word	0x40000800

080024f8 <_ZL13MX_TIM10_Initv>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80024fc:	4b10      	ldr	r3, [pc, #64]	; (8002540 <_ZL13MX_TIM10_Initv+0x48>)
 80024fe:	4a11      	ldr	r2, [pc, #68]	; (8002544 <_ZL13MX_TIM10_Initv+0x4c>)
 8002500:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 99;
 8002502:	4b0f      	ldr	r3, [pc, #60]	; (8002540 <_ZL13MX_TIM10_Initv+0x48>)
 8002504:	2263      	movs	r2, #99	; 0x63
 8002506:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002508:	4b0d      	ldr	r3, [pc, #52]	; (8002540 <_ZL13MX_TIM10_Initv+0x48>)
 800250a:	2200      	movs	r2, #0
 800250c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 800250e:	4b0c      	ldr	r3, [pc, #48]	; (8002540 <_ZL13MX_TIM10_Initv+0x48>)
 8002510:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002514:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002516:	4b0a      	ldr	r3, [pc, #40]	; (8002540 <_ZL13MX_TIM10_Initv+0x48>)
 8002518:	2200      	movs	r2, #0
 800251a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800251c:	4b08      	ldr	r3, [pc, #32]	; (8002540 <_ZL13MX_TIM10_Initv+0x48>)
 800251e:	2200      	movs	r2, #0
 8002520:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002522:	4807      	ldr	r0, [pc, #28]	; (8002540 <_ZL13MX_TIM10_Initv+0x48>)
 8002524:	f018 f90c 	bl	801a740 <HAL_TIM_Base_Init>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	bf14      	ite	ne
 800252e:	2301      	movne	r3, #1
 8002530:	2300      	moveq	r3, #0
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <_ZL13MX_TIM10_Initv+0x44>
  {
    Error_Handler();
 8002538:	f001 fc62 	bl	8003e00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800253c:	bf00      	nop
 800253e:	bd80      	pop	{r7, pc}
 8002540:	2000030c 	.word	0x2000030c
 8002544:	40014400 	.word	0x40014400

08002548 <_ZL13MX_TIM11_Initv>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800254c:	4b10      	ldr	r3, [pc, #64]	; (8002590 <_ZL13MX_TIM11_Initv+0x48>)
 800254e:	4a11      	ldr	r2, [pc, #68]	; (8002594 <_ZL13MX_TIM11_Initv+0x4c>)
 8002550:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8002552:	4b0f      	ldr	r3, [pc, #60]	; (8002590 <_ZL13MX_TIM11_Initv+0x48>)
 8002554:	2263      	movs	r2, #99	; 0x63
 8002556:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002558:	4b0d      	ldr	r3, [pc, #52]	; (8002590 <_ZL13MX_TIM11_Initv+0x48>)
 800255a:	2200      	movs	r2, #0
 800255c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800255e:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <_ZL13MX_TIM11_Initv+0x48>)
 8002560:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002564:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002566:	4b0a      	ldr	r3, [pc, #40]	; (8002590 <_ZL13MX_TIM11_Initv+0x48>)
 8002568:	2200      	movs	r2, #0
 800256a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800256c:	4b08      	ldr	r3, [pc, #32]	; (8002590 <_ZL13MX_TIM11_Initv+0x48>)
 800256e:	2200      	movs	r2, #0
 8002570:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002572:	4807      	ldr	r0, [pc, #28]	; (8002590 <_ZL13MX_TIM11_Initv+0x48>)
 8002574:	f018 f8e4 	bl	801a740 <HAL_TIM_Base_Init>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	bf14      	ite	ne
 800257e:	2301      	movne	r3, #1
 8002580:	2300      	moveq	r3, #0
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <_ZL13MX_TIM11_Initv+0x44>
  {
    Error_Handler();
 8002588:	f001 fc3a 	bl	8003e00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800258c:	bf00      	nop
 800258e:	bd80      	pop	{r7, pc}
 8002590:	20000354 	.word	0x20000354
 8002594:	40014800 	.word	0x40014800

08002598 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800259c:	4b14      	ldr	r3, [pc, #80]	; (80025f0 <_ZL19MX_USART2_UART_Initv+0x58>)
 800259e:	4a15      	ldr	r2, [pc, #84]	; (80025f4 <_ZL19MX_USART2_UART_Initv+0x5c>)
 80025a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 80025a2:	4b13      	ldr	r3, [pc, #76]	; (80025f0 <_ZL19MX_USART2_UART_Initv+0x58>)
 80025a4:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 80025a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80025aa:	4b11      	ldr	r3, [pc, #68]	; (80025f0 <_ZL19MX_USART2_UART_Initv+0x58>)
 80025ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025b0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025b2:	4b0f      	ldr	r3, [pc, #60]	; (80025f0 <_ZL19MX_USART2_UART_Initv+0x58>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80025b8:	4b0d      	ldr	r3, [pc, #52]	; (80025f0 <_ZL19MX_USART2_UART_Initv+0x58>)
 80025ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025c0:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <_ZL19MX_USART2_UART_Initv+0x58>)
 80025c2:	220c      	movs	r2, #12
 80025c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025c6:	4b0a      	ldr	r3, [pc, #40]	; (80025f0 <_ZL19MX_USART2_UART_Initv+0x58>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025cc:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <_ZL19MX_USART2_UART_Initv+0x58>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80025d2:	4807      	ldr	r0, [pc, #28]	; (80025f0 <_ZL19MX_USART2_UART_Initv+0x58>)
 80025d4:	f019 f8d2 	bl	801b77c <HAL_UART_Init>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	bf14      	ite	ne
 80025de:	2301      	movne	r3, #1
 80025e0:	2300      	moveq	r3, #0
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <_ZL19MX_USART2_UART_Initv+0x54>
  {
    Error_Handler();
 80025e8:	f001 fc0a 	bl	8003e00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80025ec:	bf00      	nop
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	2000039c 	.word	0x2000039c
 80025f4:	40004400 	.word	0x40004400

080025f8 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	607b      	str	r3, [r7, #4]
 8002602:	4b10      	ldr	r3, [pc, #64]	; (8002644 <_ZL11MX_DMA_Initv+0x4c>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	4a0f      	ldr	r2, [pc, #60]	; (8002644 <_ZL11MX_DMA_Initv+0x4c>)
 8002608:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800260c:	6313      	str	r3, [r2, #48]	; 0x30
 800260e:	4b0d      	ldr	r3, [pc, #52]	; (8002644 <_ZL11MX_DMA_Initv+0x4c>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002616:	607b      	str	r3, [r7, #4]
 8002618:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800261a:	2200      	movs	r2, #0
 800261c:	2100      	movs	r1, #0
 800261e:	2011      	movs	r0, #17
 8002620:	f013 ff83 	bl	801652a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002624:	2011      	movs	r0, #17
 8002626:	f013 ff9c 	bl	8016562 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800262a:	2200      	movs	r2, #0
 800262c:	2100      	movs	r1, #0
 800262e:	202f      	movs	r0, #47	; 0x2f
 8002630:	f013 ff7b 	bl	801652a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002634:	202f      	movs	r0, #47	; 0x2f
 8002636:	f013 ff94 	bl	8016562 <HAL_NVIC_EnableIRQ>

}
 800263a:	bf00      	nop
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40023800 	.word	0x40023800

08002648 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b08a      	sub	sp, #40	; 0x28
 800264c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264e:	f107 0314 	add.w	r3, r7, #20
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	605a      	str	r2, [r3, #4]
 8002658:	609a      	str	r2, [r3, #8]
 800265a:	60da      	str	r2, [r3, #12]
 800265c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800265e:	2300      	movs	r3, #0
 8002660:	613b      	str	r3, [r7, #16]
 8002662:	4b69      	ldr	r3, [pc, #420]	; (8002808 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	4a68      	ldr	r2, [pc, #416]	; (8002808 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002668:	f043 0304 	orr.w	r3, r3, #4
 800266c:	6313      	str	r3, [r2, #48]	; 0x30
 800266e:	4b66      	ldr	r3, [pc, #408]	; (8002808 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	f003 0304 	and.w	r3, r3, #4
 8002676:	613b      	str	r3, [r7, #16]
 8002678:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800267a:	2300      	movs	r3, #0
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	4b62      	ldr	r3, [pc, #392]	; (8002808 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	4a61      	ldr	r2, [pc, #388]	; (8002808 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002688:	6313      	str	r3, [r2, #48]	; 0x30
 800268a:	4b5f      	ldr	r3, [pc, #380]	; (8002808 <_ZL12MX_GPIO_Initv+0x1c0>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	60bb      	str	r3, [r7, #8]
 800269a:	4b5b      	ldr	r3, [pc, #364]	; (8002808 <_ZL12MX_GPIO_Initv+0x1c0>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	4a5a      	ldr	r2, [pc, #360]	; (8002808 <_ZL12MX_GPIO_Initv+0x1c0>)
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	6313      	str	r3, [r2, #48]	; 0x30
 80026a6:	4b58      	ldr	r3, [pc, #352]	; (8002808 <_ZL12MX_GPIO_Initv+0x1c0>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	60bb      	str	r3, [r7, #8]
 80026b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	607b      	str	r3, [r7, #4]
 80026b6:	4b54      	ldr	r3, [pc, #336]	; (8002808 <_ZL12MX_GPIO_Initv+0x1c0>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	4a53      	ldr	r2, [pc, #332]	; (8002808 <_ZL12MX_GPIO_Initv+0x1c0>)
 80026bc:	f043 0302 	orr.w	r3, r3, #2
 80026c0:	6313      	str	r3, [r2, #48]	; 0x30
 80026c2:	4b51      	ldr	r3, [pc, #324]	; (8002808 <_ZL12MX_GPIO_Initv+0x1c0>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	607b      	str	r3, [r7, #4]
 80026cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	603b      	str	r3, [r7, #0]
 80026d2:	4b4d      	ldr	r3, [pc, #308]	; (8002808 <_ZL12MX_GPIO_Initv+0x1c0>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	4a4c      	ldr	r2, [pc, #304]	; (8002808 <_ZL12MX_GPIO_Initv+0x1c0>)
 80026d8:	f043 0308 	orr.w	r3, r3, #8
 80026dc:	6313      	str	r3, [r2, #48]	; 0x30
 80026de:	4b4a      	ldr	r3, [pc, #296]	; (8002808 <_ZL12MX_GPIO_Initv+0x1c0>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	f003 0308 	and.w	r3, r3, #8
 80026e6:	603b      	str	r3, [r7, #0]
 80026e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80026ea:	2200      	movs	r2, #0
 80026ec:	2120      	movs	r1, #32
 80026ee:	4847      	ldr	r0, [pc, #284]	; (800280c <_ZL12MX_GPIO_Initv+0x1c4>)
 80026f0:	f014 fcfe 	bl	80170f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Mot_dir_Pin|PLamp_Green_Pin|PLamp_Blue_Pin|PLamp_Yellow_Pin, GPIO_PIN_RESET);
 80026f4:	2200      	movs	r2, #0
 80026f6:	f24e 0104 	movw	r1, #57348	; 0xe004
 80026fa:	4845      	ldr	r0, [pc, #276]	; (8002810 <_ZL12MX_GPIO_Initv+0x1c8>)
 80026fc:	f014 fcf8 	bl	80170f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin EXTI11_EMER_Pin */
  GPIO_InitStruct.Pin = B1_Pin|EXTI11_EMER_Pin;
 8002700:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002704:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002706:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800270a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270c:	2300      	movs	r3, #0
 800270e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002710:	f107 0314 	add.w	r3, r7, #20
 8002714:	4619      	mov	r1, r3
 8002716:	483f      	ldr	r0, [pc, #252]	; (8002814 <_ZL12MX_GPIO_Initv+0x1cc>)
 8002718:	f014 fb4e 	bl	8016db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TIM2_CH1_VINCp_Pin */
  GPIO_InitStruct.Pin = TIM2_CH1_VINCp_Pin;
 800271c:	2301      	movs	r3, #1
 800271e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002720:	2302      	movs	r3, #2
 8002722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002724:	2300      	movs	r3, #0
 8002726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002728:	2300      	movs	r3, #0
 800272a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800272c:	2301      	movs	r3, #1
 800272e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TIM2_CH1_VINCp_GPIO_Port, &GPIO_InitStruct);
 8002730:	f107 0314 	add.w	r3, r7, #20
 8002734:	4619      	mov	r1, r3
 8002736:	4835      	ldr	r0, [pc, #212]	; (800280c <_ZL12MX_GPIO_Initv+0x1c4>)
 8002738:	f014 fb3e 	bl	8016db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800273c:	2320      	movs	r3, #32
 800273e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002740:	2301      	movs	r3, #1
 8002742:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002744:	2300      	movs	r3, #0
 8002746:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002748:	2300      	movs	r3, #0
 800274a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800274c:	f107 0314 	add.w	r3, r7, #20
 8002750:	4619      	mov	r1, r3
 8002752:	482e      	ldr	r0, [pc, #184]	; (800280c <_ZL12MX_GPIO_Initv+0x1c4>)
 8002754:	f014 fb30 	bl	8016db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pwr_Sense_Pin */
  GPIO_InitStruct.Pin = Pwr_Sense_Pin;
 8002758:	2302      	movs	r3, #2
 800275a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800275c:	2300      	movs	r3, #0
 800275e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002760:	2300      	movs	r3, #0
 8002762:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pwr_Sense_GPIO_Port, &GPIO_InitStruct);
 8002764:	f107 0314 	add.w	r3, r7, #20
 8002768:	4619      	mov	r1, r3
 800276a:	4829      	ldr	r0, [pc, #164]	; (8002810 <_ZL12MX_GPIO_Initv+0x1c8>)
 800276c:	f014 fb24 	bl	8016db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Mot_dir_Pin PLamp_Green_Pin PLamp_Blue_Pin PLamp_Yellow_Pin */
  GPIO_InitStruct.Pin = Mot_dir_Pin|PLamp_Green_Pin|PLamp_Blue_Pin|PLamp_Yellow_Pin;
 8002770:	f24e 0304 	movw	r3, #57348	; 0xe004
 8002774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002776:	2301      	movs	r3, #1
 8002778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277a:	2300      	movs	r3, #0
 800277c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277e:	2300      	movs	r3, #0
 8002780:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002782:	f107 0314 	add.w	r3, r7, #20
 8002786:	4619      	mov	r1, r3
 8002788:	4821      	ldr	r0, [pc, #132]	; (8002810 <_ZL12MX_GPIO_Initv+0x1c8>)
 800278a:	f014 fb15 	bl	8016db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI10_Stop_Pin */
  GPIO_InitStruct.Pin = EXTI10_Stop_Pin;
 800278e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002794:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002798:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279a:	2300      	movs	r3, #0
 800279c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EXTI10_Stop_GPIO_Port, &GPIO_InitStruct);
 800279e:	f107 0314 	add.w	r3, r7, #20
 80027a2:	4619      	mov	r1, r3
 80027a4:	481b      	ldr	r0, [pc, #108]	; (8002814 <_ZL12MX_GPIO_Initv+0x1cc>)
 80027a6:	f014 fb07 	bl	8016db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Stop_Sense_Pin */
  GPIO_InitStruct.Pin = Stop_Sense_Pin;
 80027aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027b0:	2300      	movs	r3, #0
 80027b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b4:	2300      	movs	r3, #0
 80027b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Stop_Sense_GPIO_Port, &GPIO_InitStruct);
 80027b8:	f107 0314 	add.w	r3, r7, #20
 80027bc:	4619      	mov	r1, r3
 80027be:	4815      	ldr	r0, [pc, #84]	; (8002814 <_ZL12MX_GPIO_Initv+0x1cc>)
 80027c0:	f014 fafa 	bl	8016db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI2_SetZero_Pin */
  GPIO_InitStruct.Pin = EXTI2_SetZero_Pin;
 80027c4:	2304      	movs	r3, #4
 80027c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027c8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80027cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ce:	2300      	movs	r3, #0
 80027d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EXTI2_SetZero_GPIO_Port, &GPIO_InitStruct);
 80027d2:	f107 0314 	add.w	r3, r7, #20
 80027d6:	4619      	mov	r1, r3
 80027d8:	480f      	ldr	r0, [pc, #60]	; (8002818 <_ZL12MX_GPIO_Initv+0x1d0>)
 80027da:	f014 faed 	bl	8016db8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80027de:	2200      	movs	r2, #0
 80027e0:	2100      	movs	r1, #0
 80027e2:	2008      	movs	r0, #8
 80027e4:	f013 fea1 	bl	801652a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80027e8:	2008      	movs	r0, #8
 80027ea:	f013 feba 	bl	8016562 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80027ee:	2200      	movs	r2, #0
 80027f0:	2100      	movs	r1, #0
 80027f2:	2028      	movs	r0, #40	; 0x28
 80027f4:	f013 fe99 	bl	801652a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80027f8:	2028      	movs	r0, #40	; 0x28
 80027fa:	f013 feb2 	bl	8016562 <HAL_NVIC_EnableIRQ>

}
 80027fe:	bf00      	nop
 8002800:	3728      	adds	r7, #40	; 0x28
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40023800 	.word	0x40023800
 800280c:	40020000 	.word	0x40020000
 8002810:	40020400 	.word	0x40020400
 8002814:	40020800 	.word	0x40020800
 8002818:	40020c00 	.word	0x40020c00

0800281c <_Z13GrandStatumixv>:

/* USER CODE BEGIN 4 */
////////// [Grand State] //////////////////////// [Grand State] ////////////////////////
//======== [Grand State] ======================== [Grand State] ========================

void GrandStatumix(){
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
	if (grandState != Ready){
 8002820:	4b82      	ldr	r3, [pc, #520]	; (8002a2c <_Z13GrandStatumixv+0x210>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d005      	beq.n	8002834 <_Z13GrandStatumixv+0x18>
		HAL_GPIO_WritePin(PLamp_Green_GPIO_Port, PLamp_Green_Pin, GPIO_PIN_RESET);
 8002828:	2200      	movs	r2, #0
 800282a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800282e:	4880      	ldr	r0, [pc, #512]	; (8002a30 <_Z13GrandStatumixv+0x214>)
 8002830:	f014 fc5e 	bl	80170f0 <HAL_GPIO_WritePin>
	}
	if (grandState != work){
 8002834:	4b7d      	ldr	r3, [pc, #500]	; (8002a2c <_Z13GrandStatumixv+0x210>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d005      	beq.n	8002848 <_Z13GrandStatumixv+0x2c>
			HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_RESET);
 800283c:	2200      	movs	r2, #0
 800283e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002842:	487b      	ldr	r0, [pc, #492]	; (8002a30 <_Z13GrandStatumixv+0x214>)
 8002844:	f014 fc54 	bl	80170f0 <HAL_GPIO_WritePin>
		}
	if (grandState != stop || grandState != stopnd){
 8002848:	4b78      	ldr	r3, [pc, #480]	; (8002a2c <_Z13GrandStatumixv+0x210>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	2b02      	cmp	r3, #2
 800284e:	d103      	bne.n	8002858 <_Z13GrandStatumixv+0x3c>
 8002850:	4b76      	ldr	r3, [pc, #472]	; (8002a2c <_Z13GrandStatumixv+0x210>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b04      	cmp	r3, #4
 8002856:	d005      	beq.n	8002864 <_Z13GrandStatumixv+0x48>
				HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_RESET);
 8002858:	2200      	movs	r2, #0
 800285a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800285e:	4874      	ldr	r0, [pc, #464]	; (8002a30 <_Z13GrandStatumixv+0x214>)
 8002860:	f014 fc46 	bl	80170f0 <HAL_GPIO_WritePin>
			}

	stop_sense = HAL_GPIO_ReadPin(Stop_Sense_GPIO_Port, Stop_Sense_Pin);
 8002864:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002868:	4872      	ldr	r0, [pc, #456]	; (8002a34 <_Z13GrandStatumixv+0x218>)
 800286a:	f014 fc29 	bl	80170c0 <HAL_GPIO_ReadPin>
 800286e:	4603      	mov	r3, r0
 8002870:	461a      	mov	r2, r3
 8002872:	4b71      	ldr	r3, [pc, #452]	; (8002a38 <_Z13GrandStatumixv+0x21c>)
 8002874:	701a      	strb	r2, [r3, #0]
	pwr_sense = HAL_GPIO_ReadPin(Pwr_Sense_GPIO_Port, Pwr_Sense_Pin);
 8002876:	2102      	movs	r1, #2
 8002878:	486d      	ldr	r0, [pc, #436]	; (8002a30 <_Z13GrandStatumixv+0x214>)
 800287a:	f014 fc21 	bl	80170c0 <HAL_GPIO_ReadPin>
 800287e:	4603      	mov	r3, r0
 8002880:	461a      	mov	r2, r3
 8002882:	4b6e      	ldr	r3, [pc, #440]	; (8002a3c <_Z13GrandStatumixv+0x220>)
 8002884:	701a      	strb	r2, [r3, #0]

	switch(grandState){
 8002886:	4b69      	ldr	r3, [pc, #420]	; (8002a2c <_Z13GrandStatumixv+0x210>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	3b01      	subs	r3, #1
 800288c:	2b04      	cmp	r3, #4
 800288e:	d80d      	bhi.n	80028ac <_Z13GrandStatumixv+0x90>
 8002890:	a201      	add	r2, pc, #4	; (adr r2, 8002898 <_Z13GrandStatumixv+0x7c>)
 8002892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002896:	bf00      	nop
 8002898:	080028e1 	.word	0x080028e1
 800289c:	0800295f 	.word	0x0800295f
 80028a0:	080029f5 	.word	0x080029f5
 80028a4:	080029af 	.word	0x080029af
 80028a8:	08002927 	.word	0x08002927
	default:
	case Ready:
		HAL_GPIO_WritePin(PLamp_Green_GPIO_Port, PLamp_Green_Pin, GPIO_PIN_SET);
 80028ac:	2201      	movs	r2, #1
 80028ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028b2:	485f      	ldr	r0, [pc, #380]	; (8002a30 <_Z13GrandStatumixv+0x214>)
 80028b4:	f014 fc1c 	bl	80170f0 <HAL_GPIO_WritePin>
		//PWMOut = 1200;
		Unwrapping();
 80028b8:	f000 fce6 	bl	8003288 <_Z10Unwrappingv>
		Kalmanfilter();
 80028bc:	f000 fd98 	bl	80033f0 <_Z12Kalmanfilterv>
		//diffvelo();

		if (pwr_sense == 1){grandState = emer;}
 80028c0:	4b5e      	ldr	r3, [pc, #376]	; (8002a3c <_Z13GrandStatumixv+0x220>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d102      	bne.n	80028ce <_Z13GrandStatumixv+0xb2>
 80028c8:	4b58      	ldr	r3, [pc, #352]	; (8002a2c <_Z13GrandStatumixv+0x210>)
 80028ca:	2203      	movs	r2, #3
 80028cc:	701a      	strb	r2, [r3, #0]
		if (stop_sense == 0){grandState = stop;}
 80028ce:	4b5a      	ldr	r3, [pc, #360]	; (8002a38 <_Z13GrandStatumixv+0x21c>)
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f040 809d 	bne.w	8002a12 <_Z13GrandStatumixv+0x1f6>
 80028d8:	4b54      	ldr	r3, [pc, #336]	; (8002a2c <_Z13GrandStatumixv+0x210>)
 80028da:	2202      	movs	r2, #2
 80028dc:	701a      	strb	r2, [r3, #0]
		/// [From UART] run when get {HOME} , {RUN}
		//if (bluecounter != 0){grandState = work;} // can go work from ready only
	break;
 80028de:	e098      	b.n	8002a12 <_Z13GrandStatumixv+0x1f6>

	case work:
		HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_SET);
 80028e0:	2201      	movs	r2, #1
 80028e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028e6:	4852      	ldr	r0, [pc, #328]	; (8002a30 <_Z13GrandStatumixv+0x214>)
 80028e8:	f014 fc02 	bl	80170f0 <HAL_GPIO_WritePin>
		LaserTrajex_workflow();
 80028ec:	f000 f8b4 	bl	8002a58 <_Z20LaserTrajex_workflowv>

		if (pwr_sense == 1){
 80028f0:	4b52      	ldr	r3, [pc, #328]	; (8002a3c <_Z13GrandStatumixv+0x220>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d106      	bne.n	8002906 <_Z13GrandStatumixv+0xea>
			grandState = emer;
 80028f8:	4b4c      	ldr	r3, [pc, #304]	; (8002a2c <_Z13GrandStatumixv+0x210>)
 80028fa:	2203      	movs	r2, #3
 80028fc:	701a      	strb	r2, [r3, #0]
			u_contr = 0;
 80028fe:	4b50      	ldr	r3, [pc, #320]	; (8002a40 <_Z13GrandStatumixv+0x224>)
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	601a      	str	r2, [r3, #0]
		}
		if (stop_sense == 0){
 8002906:	4b4c      	ldr	r3, [pc, #304]	; (8002a38 <_Z13GrandStatumixv+0x21c>)
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	2b00      	cmp	r3, #0
 800290c:	f040 8083 	bne.w	8002a16 <_Z13GrandStatumixv+0x1fa>
			PWMOut = 0;
 8002910:	4b4c      	ldr	r3, [pc, #304]	; (8002a44 <_Z13GrandStatumixv+0x228>)
 8002912:	2200      	movs	r2, #0
 8002914:	801a      	strh	r2, [r3, #0]
			grandState = stopnd;
 8002916:	4b45      	ldr	r3, [pc, #276]	; (8002a2c <_Z13GrandStatumixv+0x210>)
 8002918:	2204      	movs	r2, #4
 800291a:	701a      	strb	r2, [r3, #0]
			u_contr = 0;
 800291c:	4b48      	ldr	r3, [pc, #288]	; (8002a40 <_Z13GrandStatumixv+0x224>)
 800291e:	f04f 0200 	mov.w	r2, #0
 8002922:	601a      	str	r2, [r3, #0]
		}
	break;
 8002924:	e077      	b.n	8002a16 <_Z13GrandStatumixv+0x1fa>

	case SetZeroGr:
		HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_SET);
 8002926:	2201      	movs	r2, #1
 8002928:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800292c:	4840      	ldr	r0, [pc, #256]	; (8002a30 <_Z13GrandStatumixv+0x214>)
 800292e:	f014 fbdf 	bl	80170f0 <HAL_GPIO_WritePin>
		HAL_Delay(4000); // Simulate workload
 8002932:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002936:	f013 fcf9 	bl	801632c <HAL_Delay>
		flag_finishTra = 1;
 800293a:	4b43      	ldr	r3, [pc, #268]	; (8002a48 <_Z13GrandStatumixv+0x22c>)
 800293c:	2201      	movs	r2, #1
 800293e:	701a      	strb	r2, [r3, #0]
//		 }
//		Trajectory();
//		Kalmanfilter();
//		controlloop();

		if (flag_finishTra == 1 || BinPosXI == 0){
 8002940:	4b41      	ldr	r3, [pc, #260]	; (8002a48 <_Z13GrandStatumixv+0x22c>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d003      	beq.n	8002950 <_Z13GrandStatumixv+0x134>
 8002948:	4b40      	ldr	r3, [pc, #256]	; (8002a4c <_Z13GrandStatumixv+0x230>)
 800294a:	881b      	ldrh	r3, [r3, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d164      	bne.n	8002a1a <_Z13GrandStatumixv+0x1fe>
			flag_finishTra = 0;
 8002950:	4b3d      	ldr	r3, [pc, #244]	; (8002a48 <_Z13GrandStatumixv+0x22c>)
 8002952:	2200      	movs	r2, #0
 8002954:	701a      	strb	r2, [r3, #0]
			grandState = Ready;
 8002956:	4b35      	ldr	r3, [pc, #212]	; (8002a2c <_Z13GrandStatumixv+0x210>)
 8002958:	2200      	movs	r2, #0
 800295a:	701a      	strb	r2, [r3, #0]
		}
	break;
 800295c:	e05d      	b.n	8002a1a <_Z13GrandStatumixv+0x1fe>

	case stop:
		HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_SET);
 800295e:	2201      	movs	r2, #1
 8002960:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002964:	4832      	ldr	r0, [pc, #200]	; (8002a30 <_Z13GrandStatumixv+0x214>)
 8002966:	f014 fbc3 	bl	80170f0 <HAL_GPIO_WritePin>
		PWMOut = 0;
 800296a:	4b36      	ldr	r3, [pc, #216]	; (8002a44 <_Z13GrandStatumixv+0x228>)
 800296c:	2200      	movs	r2, #0
 800296e:	801a      	strh	r2, [r3, #0]

		X(1,0)=0;
 8002970:	2200      	movs	r2, #0
 8002972:	2101      	movs	r1, #1
 8002974:	4836      	ldr	r0, [pc, #216]	; (8002a50 <_Z13GrandStatumixv+0x234>)
 8002976:	f001 fc87 	bl	8004288 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 800297a:	4603      	mov	r3, r0
 800297c:	f04f 0200 	mov.w	r2, #0
 8002980:	601a      	str	r2, [r3, #0]
		KalV = X(1,0);
 8002982:	2200      	movs	r2, #0
 8002984:	2101      	movs	r1, #1
 8002986:	4832      	ldr	r0, [pc, #200]	; (8002a50 <_Z13GrandStatumixv+0x234>)
 8002988:	f001 fc7e 	bl	8004288 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 800298c:	4603      	mov	r3, r0
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a30      	ldr	r2, [pc, #192]	; (8002a54 <_Z13GrandStatumixv+0x238>)
 8002992:	6013      	str	r3, [r2, #0]

		if (stop_sense == 1){
 8002994:	4b28      	ldr	r3, [pc, #160]	; (8002a38 <_Z13GrandStatumixv+0x21c>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d140      	bne.n	8002a1e <_Z13GrandStatumixv+0x202>
			grandState = Ready;
 800299c:	4b23      	ldr	r3, [pc, #140]	; (8002a2c <_Z13GrandStatumixv+0x210>)
 800299e:	2200      	movs	r2, #0
 80029a0:	701a      	strb	r2, [r3, #0]
			IOExpenderInit();
 80029a2:	f001 f889 	bl	8003ab8 <_Z14IOExpenderInitv>
			HAL_Delay(100);
 80029a6:	2064      	movs	r0, #100	; 0x64
 80029a8:	f013 fcc0 	bl	801632c <HAL_Delay>
			//== rotation change for dummy test
			//mot_dirctn++;
			//mot_dirctn%=2;
		}
	break;
 80029ac:	e037      	b.n	8002a1e <_Z13GrandStatumixv+0x202>

	case stopnd:
			HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_SET);
 80029ae:	2201      	movs	r2, #1
 80029b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029b4:	481e      	ldr	r0, [pc, #120]	; (8002a30 <_Z13GrandStatumixv+0x214>)
 80029b6:	f014 fb9b 	bl	80170f0 <HAL_GPIO_WritePin>
			PWMOut = 0;
 80029ba:	4b22      	ldr	r3, [pc, #136]	; (8002a44 <_Z13GrandStatumixv+0x228>)
 80029bc:	2200      	movs	r2, #0
 80029be:	801a      	strh	r2, [r3, #0]
			//Integral = 0;
			X(1,0)=0;
 80029c0:	2200      	movs	r2, #0
 80029c2:	2101      	movs	r1, #1
 80029c4:	4822      	ldr	r0, [pc, #136]	; (8002a50 <_Z13GrandStatumixv+0x234>)
 80029c6:	f001 fc5f 	bl	8004288 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 80029ca:	4603      	mov	r3, r0
 80029cc:	f04f 0200 	mov.w	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]
			KalV = X(1,0);
 80029d2:	2200      	movs	r2, #0
 80029d4:	2101      	movs	r1, #1
 80029d6:	481e      	ldr	r0, [pc, #120]	; (8002a50 <_Z13GrandStatumixv+0x234>)
 80029d8:	f001 fc56 	bl	8004288 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 80029dc:	4603      	mov	r3, r0
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a1c      	ldr	r2, [pc, #112]	; (8002a54 <_Z13GrandStatumixv+0x238>)
 80029e2:	6013      	str	r3, [r2, #0]


			if (stop_sense == 1){
 80029e4:	4b14      	ldr	r3, [pc, #80]	; (8002a38 <_Z13GrandStatumixv+0x21c>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d11a      	bne.n	8002a22 <_Z13GrandStatumixv+0x206>
				grandState = work;
 80029ec:	4b0f      	ldr	r3, [pc, #60]	; (8002a2c <_Z13GrandStatumixv+0x210>)
 80029ee:	2201      	movs	r2, #1
 80029f0:	701a      	strb	r2, [r3, #0]
			}
		break;
 80029f2:	e016      	b.n	8002a22 <_Z13GrandStatumixv+0x206>

	case emer:
		ResetParam();
 80029f4:	f000 f900 	bl	8002bf8 <_Z10ResetParamv>
		// Reset every variables at control
		if (pwr_sense == 0){
 80029f8:	4b10      	ldr	r3, [pc, #64]	; (8002a3c <_Z13GrandStatumixv+0x220>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d112      	bne.n	8002a26 <_Z13GrandStatumixv+0x20a>
			grandState = Ready;
 8002a00:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <_Z13GrandStatumixv+0x210>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	701a      	strb	r2, [r3, #0]
			HAL_Delay(250); // wait for emer release shock power
 8002a06:	20fa      	movs	r0, #250	; 0xfa
 8002a08:	f013 fc90 	bl	801632c <HAL_Delay>
			IOExpenderInit();
 8002a0c:	f001 f854 	bl	8003ab8 <_Z14IOExpenderInitv>

		}
	break;
 8002a10:	e009      	b.n	8002a26 <_Z13GrandStatumixv+0x20a>
	break;
 8002a12:	bf00      	nop
 8002a14:	e008      	b.n	8002a28 <_Z13GrandStatumixv+0x20c>
	break;
 8002a16:	bf00      	nop
 8002a18:	e006      	b.n	8002a28 <_Z13GrandStatumixv+0x20c>
	break;
 8002a1a:	bf00      	nop
 8002a1c:	e004      	b.n	8002a28 <_Z13GrandStatumixv+0x20c>
	break;
 8002a1e:	bf00      	nop
 8002a20:	e002      	b.n	8002a28 <_Z13GrandStatumixv+0x20c>
		break;
 8002a22:	bf00      	nop
 8002a24:	e000      	b.n	8002a28 <_Z13GrandStatumixv+0x20c>
	break;
 8002a26:	bf00      	nop
	}
}
 8002a28:	bf00      	nop
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	200004a0 	.word	0x200004a0
 8002a30:	40020400 	.word	0x40020400
 8002a34:	40020800 	.word	0x40020800
 8002a38:	200004a2 	.word	0x200004a2
 8002a3c:	200004a1 	.word	0x200004a1
 8002a40:	200006d8 	.word	0x200006d8
 8002a44:	2000051c 	.word	0x2000051c
 8002a48:	200004a8 	.word	0x200004a8
 8002a4c:	20000518 	.word	0x20000518
 8002a50:	20000648 	.word	0x20000648
 8002a54:	20000670 	.word	0x20000670

08002a58 <_Z20LaserTrajex_workflowv>:

void LaserTrajex_workflow(){ // 1, n loop go to shoot laser run
 8002a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a5c:	af00      	add	r7, sp, #0
	// -1 means no position value
	//if (Finalposition == -1){flag_LasxTraj = 0;}

	switch(flag_LasxTraj){
 8002a5e:	4b55      	ldr	r3, [pc, #340]	; (8002bb4 <_Z20LaserTrajex_workflowv+0x15c>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d012      	beq.n	8002a8c <_Z20LaserTrajex_workflowv+0x34>
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d048      	beq.n	8002afc <_Z20LaserTrajex_workflowv+0xa4>
	default:
	case 0: // wait go flag
		////////// raise flag to 1 if need to drive the state

		if (grandState == work){ //flag_LasxTraj != 0 ||
 8002a6a:	4b53      	ldr	r3, [pc, #332]	; (8002bb8 <_Z20LaserTrajex_workflowv+0x160>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	f040 8098 	bne.w	8002ba4 <_Z20LaserTrajex_workflowv+0x14c>
			flag_LasxTraj = 1;
 8002a74:	4b4f      	ldr	r3, [pc, #316]	; (8002bb4 <_Z20LaserTrajex_workflowv+0x15c>)
 8002a76:	2201      	movs	r2, #1
 8002a78:	701a      	strb	r2, [r3, #0]
			Finalposition = positionlog[position_order]; // receive in rad
 8002a7a:	4b50      	ldr	r3, [pc, #320]	; (8002bbc <_Z20LaserTrajex_workflowv+0x164>)
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	4a50      	ldr	r2, [pc, #320]	; (8002bc0 <_Z20LaserTrajex_workflowv+0x168>)
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a4f      	ldr	r2, [pc, #316]	; (8002bc4 <_Z20LaserTrajex_workflowv+0x16c>)
 8002a88:	6013      	str	r3, [r2, #0]
		}
		break;
 8002a8a:	e08b      	b.n	8002ba4 <_Z20LaserTrajex_workflowv+0x14c>
	case 1: //-------------traject-----
		//====flag_LasxTraj will trig trajex in while;
		//////// raise flag to 2 and flag_efftActi = 1; if reach the target the position

		Unwrapping();
 8002a8c:	f000 fbfc 	bl	8003288 <_Z10Unwrappingv>
		 if(flagNewpos==0){
 8002a90:	4b4d      	ldr	r3, [pc, #308]	; (8002bc8 <_Z20LaserTrajex_workflowv+0x170>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d114      	bne.n	8002ac2 <_Z20LaserTrajex_workflowv+0x6a>
			Currentpos = CurrentEn;
 8002a98:	4b4c      	ldr	r3, [pc, #304]	; (8002bcc <_Z20LaserTrajex_workflowv+0x174>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a4c      	ldr	r2, [pc, #304]	; (8002bd0 <_Z20LaserTrajex_workflowv+0x178>)
 8002a9e:	6013      	str	r3, [r2, #0]
			//Finalposition = 300*0.006136; // Put goal position here in rad
			Distance = Finalposition - Currentpos;
 8002aa0:	4b48      	ldr	r3, [pc, #288]	; (8002bc4 <_Z20LaserTrajex_workflowv+0x16c>)
 8002aa2:	ed93 7a00 	vldr	s14, [r3]
 8002aa6:	4b4a      	ldr	r3, [pc, #296]	; (8002bd0 <_Z20LaserTrajex_workflowv+0x178>)
 8002aa8:	edd3 7a00 	vldr	s15, [r3]
 8002aac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ab0:	4b48      	ldr	r3, [pc, #288]	; (8002bd4 <_Z20LaserTrajex_workflowv+0x17c>)
 8002ab2:	edc3 7a00 	vstr	s15, [r3]
			flagNewpos = 1;
 8002ab6:	4b44      	ldr	r3, [pc, #272]	; (8002bc8 <_Z20LaserTrajex_workflowv+0x170>)
 8002ab8:	2201      	movs	r2, #1
 8002aba:	601a      	str	r2, [r3, #0]
			check = 0;
 8002abc:	4b46      	ldr	r3, [pc, #280]	; (8002bd8 <_Z20LaserTrajex_workflowv+0x180>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	701a      	strb	r2, [r3, #0]
		 }
		Trajectory();
 8002ac2:	f000 f8d9 	bl	8002c78 <_Z10Trajectoryv>
		Kalmanfilter();
 8002ac6:	f000 fc93 	bl	80033f0 <_Z12Kalmanfilterv>
		controlloop();
 8002aca:	f000 feed 	bl	80038a8 <_Z11controlloopv>

		//HAL_Delay(2500); // Simulate workload
		//flag_finishTra = 1;

		if(flag_finishTra == 1){
 8002ace:	4b43      	ldr	r3, [pc, #268]	; (8002bdc <_Z20LaserTrajex_workflowv+0x184>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d168      	bne.n	8002ba8 <_Z20LaserTrajex_workflowv+0x150>
			flag_finishTra = 0;
 8002ad6:	4b41      	ldr	r3, [pc, #260]	; (8002bdc <_Z20LaserTrajex_workflowv+0x184>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	701a      	strb	r2, [r3, #0]
			flag_LasxTraj = 2;
 8002adc:	4b35      	ldr	r3, [pc, #212]	; (8002bb4 <_Z20LaserTrajex_workflowv+0x15c>)
 8002ade:	2202      	movs	r2, #2
 8002ae0:	701a      	strb	r2, [r3, #0]
			flag_efftActi = 1;
 8002ae2:	4b3f      	ldr	r3, [pc, #252]	; (8002be0 <_Z20LaserTrajex_workflowv+0x188>)
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	701a      	strb	r2, [r3, #0]

			timeout_efft = millis();
 8002ae8:	f001 f954 	bl	8003d94 <_Z6millisv>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2200      	movs	r2, #0
 8002af0:	469a      	mov	sl, r3
 8002af2:	4693      	mov	fp, r2
 8002af4:	4b3b      	ldr	r3, [pc, #236]	; (8002be4 <_Z20LaserTrajex_workflowv+0x18c>)
 8002af6:	e9c3 ab00 	strd	sl, fp, [r3]
		}
		break;
 8002afa:	e055      	b.n	8002ba8 <_Z20LaserTrajex_workflowv+0x150>
	case 2: //---------------Laserwork--------------
		trig_efftRead = 1;
 8002afc:	4b3a      	ldr	r3, [pc, #232]	; (8002be8 <_Z20LaserTrajex_workflowv+0x190>)
 8002afe:	2201      	movs	r2, #1
 8002b00:	701a      	strb	r2, [r3, #0]

		if(efft_status == 0x78 || millis() - timeout_efft >= 6000){ // if laser finished work or tomeout
 8002b02:	4b3a      	ldr	r3, [pc, #232]	; (8002bec <_Z20LaserTrajex_workflowv+0x194>)
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	2b78      	cmp	r3, #120	; 0x78
 8002b08:	d012      	beq.n	8002b30 <_Z20LaserTrajex_workflowv+0xd8>
 8002b0a:	f001 f943 	bl	8003d94 <_Z6millisv>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2200      	movs	r2, #0
 8002b12:	4698      	mov	r8, r3
 8002b14:	4691      	mov	r9, r2
 8002b16:	4b33      	ldr	r3, [pc, #204]	; (8002be4 <_Z20LaserTrajex_workflowv+0x18c>)
 8002b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b1c:	ebb8 0402 	subs.w	r4, r8, r2
 8002b20:	eb69 0503 	sbc.w	r5, r9, r3
 8002b24:	f241 7370 	movw	r3, #6000	; 0x1770
 8002b28:	429c      	cmp	r4, r3
 8002b2a:	f175 0300 	sbcs.w	r3, r5, #0
 8002b2e:	d301      	bcc.n	8002b34 <_Z20LaserTrajex_workflowv+0xdc>
 8002b30:	2301      	movs	r3, #1
 8002b32:	e000      	b.n	8002b36 <_Z20LaserTrajex_workflowv+0xde>
 8002b34:	2300      	movs	r3, #0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d038      	beq.n	8002bac <_Z20LaserTrajex_workflowv+0x154>
			efft_status = 0x00;
 8002b3a:	4b2c      	ldr	r3, [pc, #176]	; (8002bec <_Z20LaserTrajex_workflowv+0x194>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	701a      	strb	r2, [r3, #0]
			trig_efftRead = 0;
 8002b40:	4b29      	ldr	r3, [pc, #164]	; (8002be8 <_Z20LaserTrajex_workflowv+0x190>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	701a      	strb	r2, [r3, #0]
			position_order++; // go to next obtained position
 8002b46:	4b1d      	ldr	r3, [pc, #116]	; (8002bbc <_Z20LaserTrajex_workflowv+0x164>)
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	4b1b      	ldr	r3, [pc, #108]	; (8002bbc <_Z20LaserTrajex_workflowv+0x164>)
 8002b50:	701a      	strb	r2, [r3, #0]

			if (positionlog[position_order] == -1){
 8002b52:	4b1a      	ldr	r3, [pc, #104]	; (8002bbc <_Z20LaserTrajex_workflowv+0x164>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	4a1a      	ldr	r2, [pc, #104]	; (8002bc0 <_Z20LaserTrajex_workflowv+0x168>)
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	edd3 7a00 	vldr	s15, [r3]
 8002b60:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002b64:	eef4 7a47 	vcmp.f32	s15, s14
 8002b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b6c:	d10e      	bne.n	8002b8c <_Z20LaserTrajex_workflowv+0x134>
				//Real end, reset all position parameter
				// back to ready
				HAL_UART_Transmit(&huart2, (uint8_t*)temp_f_ack2, 2, 100);
 8002b6e:	2364      	movs	r3, #100	; 0x64
 8002b70:	2202      	movs	r2, #2
 8002b72:	491f      	ldr	r1, [pc, #124]	; (8002bf0 <_Z20LaserTrajex_workflowv+0x198>)
 8002b74:	481f      	ldr	r0, [pc, #124]	; (8002bf4 <_Z20LaserTrajex_workflowv+0x19c>)
 8002b76:	f018 fe4e 	bl	801b816 <HAL_UART_Transmit>
				flag_LasxTraj = 0;
 8002b7a:	4b0e      	ldr	r3, [pc, #56]	; (8002bb4 <_Z20LaserTrajex_workflowv+0x15c>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	701a      	strb	r2, [r3, #0]
				ResetParam();
 8002b80:	f000 f83a 	bl	8002bf8 <_Z10ResetParamv>
				grandState = Ready;
 8002b84:	4b0c      	ldr	r3, [pc, #48]	; (8002bb8 <_Z20LaserTrajex_workflowv+0x160>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	701a      	strb	r2, [r3, #0]
			else {
				Finalposition = positionlog[position_order];
				flag_LasxTraj = 1;
			} // continue next pos if have
		}
		break;
 8002b8a:	e00f      	b.n	8002bac <_Z20LaserTrajex_workflowv+0x154>
				Finalposition = positionlog[position_order];
 8002b8c:	4b0b      	ldr	r3, [pc, #44]	; (8002bbc <_Z20LaserTrajex_workflowv+0x164>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	4a0b      	ldr	r2, [pc, #44]	; (8002bc0 <_Z20LaserTrajex_workflowv+0x168>)
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a0a      	ldr	r2, [pc, #40]	; (8002bc4 <_Z20LaserTrajex_workflowv+0x16c>)
 8002b9a:	6013      	str	r3, [r2, #0]
				flag_LasxTraj = 1;
 8002b9c:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <_Z20LaserTrajex_workflowv+0x15c>)
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	701a      	strb	r2, [r3, #0]
		break;
 8002ba2:	e003      	b.n	8002bac <_Z20LaserTrajex_workflowv+0x154>
		break;
 8002ba4:	bf00      	nop
 8002ba6:	e002      	b.n	8002bae <_Z20LaserTrajex_workflowv+0x156>
		break;
 8002ba8:	bf00      	nop
 8002baa:	e000      	b.n	8002bae <_Z20LaserTrajex_workflowv+0x156>
		break;
 8002bac:	bf00      	nop
	}
}
 8002bae:	bf00      	nop
 8002bb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bb4:	200004bc 	.word	0x200004bc
 8002bb8:	200004a0 	.word	0x200004a0
 8002bbc:	200004bd 	.word	0x200004bd
 8002bc0:	200000f0 	.word	0x200000f0
 8002bc4:	20000528 	.word	0x20000528
 8002bc8:	20000554 	.word	0x20000554
 8002bcc:	2000068c 	.word	0x2000068c
 8002bd0:	20000550 	.word	0x20000550
 8002bd4:	2000052c 	.word	0x2000052c
 8002bd8:	200006e1 	.word	0x200006e1
 8002bdc:	200004a8 	.word	0x200004a8
 8002be0:	200006e3 	.word	0x200006e3
 8002be4:	200006f0 	.word	0x200006f0
 8002be8:	200006e5 	.word	0x200006e5
 8002bec:	200006e2 	.word	0x200006e2
 8002bf0:	20000158 	.word	0x20000158
 8002bf4:	2000039c 	.word	0x2000039c

08002bf8 <_Z10ResetParamv>:

void ResetParam(){
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
	// Reset every variables at control
	// reset position buffer
	PWMOut = 0;
 8002bfe:	4b15      	ldr	r3, [pc, #84]	; (8002c54 <_Z10ResetParamv+0x5c>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i <= position_order; i++){
 8002c04:	2300      	movs	r3, #0
 8002c06:	607b      	str	r3, [r7, #4]
 8002c08:	4b13      	ldr	r3, [pc, #76]	; (8002c58 <_Z10ResetParamv+0x60>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4293      	cmp	r3, r2
 8002c12:	dc09      	bgt.n	8002c28 <_Z10ResetParamv+0x30>
			positionlog[i] = -1.0;
 8002c14:	4a11      	ldr	r2, [pc, #68]	; (8002c5c <_Z10ResetParamv+0x64>)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4413      	add	r3, r2
 8002c1c:	4a10      	ldr	r2, [pc, #64]	; (8002c60 <_Z10ResetParamv+0x68>)
 8002c1e:	601a      	str	r2, [r3, #0]
	for(int i = 0; i <= position_order; i++){
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3301      	adds	r3, #1
 8002c24:	607b      	str	r3, [r7, #4]
 8002c26:	e7ef      	b.n	8002c08 <_Z10ResetParamv+0x10>
		}
	position_order = 0;
 8002c28:	4b0b      	ldr	r3, [pc, #44]	; (8002c58 <_Z10ResetParamv+0x60>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	701a      	strb	r2, [r3, #0]
	flag_LasxTraj = 0;
 8002c2e:	4b0d      	ldr	r3, [pc, #52]	; (8002c64 <_Z10ResetParamv+0x6c>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	701a      	strb	r2, [r3, #0]
	trig_efftRead = 0;
 8002c34:	4b0c      	ldr	r3, [pc, #48]	; (8002c68 <_Z10ResetParamv+0x70>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	701a      	strb	r2, [r3, #0]
	bluecounter = 0;
 8002c3a:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <_Z10ResetParamv+0x74>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	701a      	strb	r2, [r3, #0]
	efft_status = 0x00;
 8002c40:	4b0b      	ldr	r3, [pc, #44]	; (8002c70 <_Z10ResetParamv+0x78>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	701a      	strb	r2, [r3, #0]
	IOExpenderInit();
 8002c46:	f000 ff37 	bl	8003ab8 <_Z14IOExpenderInitv>
	//Integral = 0;
	//u_contr = 0;
}
 8002c4a:	bf00      	nop
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	2000051c 	.word	0x2000051c
 8002c58:	200004bd 	.word	0x200004bd
 8002c5c:	200000f0 	.word	0x200000f0
 8002c60:	bf800000 	.word	0xbf800000
 8002c64:	200004bc 	.word	0x200004bc
 8002c68:	200006e5 	.word	0x200006e5
 8002c6c:	20000698 	.word	0x20000698
 8002c70:	200006e2 	.word	0x200006e2
 8002c74:	00000000 	.word	0x00000000

08002c78 <_Z10Trajectoryv>:

//////////////////// [Trajectory Path] //////////////////////
void Trajectory(){
 8002c78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002c7c:	ed2d 8b04 	vpush	{d8-d9}
 8002c80:	af00      	add	r7, sp, #0

	if(micros() - TimeStampTraject >= 10000){
 8002c82:	f001 f86d 	bl	8003d60 <_Z6microsv>
 8002c86:	4602      	mov	r2, r0
 8002c88:	460b      	mov	r3, r1
 8002c8a:	4994      	ldr	r1, [pc, #592]	; (8002edc <_Z10Trajectoryv+0x264>)
 8002c8c:	6809      	ldr	r1, [r1, #0]
 8002c8e:	2000      	movs	r0, #0
 8002c90:	4688      	mov	r8, r1
 8002c92:	4681      	mov	r9, r0
 8002c94:	ebb2 0408 	subs.w	r4, r2, r8
 8002c98:	eb63 0509 	sbc.w	r5, r3, r9
 8002c9c:	f242 7310 	movw	r3, #10000	; 0x2710
 8002ca0:	429c      	cmp	r4, r3
 8002ca2:	f175 0300 	sbcs.w	r3, r5, #0
 8002ca6:	bf2c      	ite	cs
 8002ca8:	2301      	movcs	r3, #1
 8002caa:	2300      	movcc	r3, #0
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f000 82c5 	beq.w	800323e <_Z10Trajectoryv+0x5c6>
		TimeStampTraject = micros();
 8002cb4:	f001 f854 	bl	8003d60 <_Z6microsv>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	460b      	mov	r3, r1
 8002cbc:	4b87      	ldr	r3, [pc, #540]	; (8002edc <_Z10Trajectoryv+0x264>)
 8002cbe:	601a      	str	r2, [r3, #0]
	//if(millis() - TimeStampTraject >= 10){
	//		TimeStampTraject = millis();
		if (Distance > 0){
 8002cc0:	4b87      	ldr	r3, [pc, #540]	; (8002ee0 <_Z10Trajectoryv+0x268>)
 8002cc2:	edd3 7a00 	vldr	s15, [r3]
 8002cc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cce:	dd07      	ble.n	8002ce0 <_Z10Trajectoryv+0x68>
			//Velocity = 1.04719755; // [From UART] Put Max Velo here
			Acceleration= 0.5;   // recieve frol UART
 8002cd0:	4b84      	ldr	r3, [pc, #528]	; (8002ee4 <_Z10Trajectoryv+0x26c>)
 8002cd2:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002cd6:	601a      	str	r2, [r3, #0]
			check = 50;
 8002cd8:	4b83      	ldr	r3, [pc, #524]	; (8002ee8 <_Z10Trajectoryv+0x270>)
 8002cda:	2232      	movs	r2, #50	; 0x32
 8002cdc:	701a      	strb	r2, [r3, #0]
 8002cde:	e016      	b.n	8002d0e <_Z10Trajectoryv+0x96>
		}
		else if(Distance < 0){
 8002ce0:	4b7f      	ldr	r3, [pc, #508]	; (8002ee0 <_Z10Trajectoryv+0x268>)
 8002ce2:	edd3 7a00 	vldr	s15, [r3]
 8002ce6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cee:	d50e      	bpl.n	8002d0e <_Z10Trajectoryv+0x96>
			//Velocity=-1.04719755; // [From UART] Put Max Velo here  (negative)
			Velocity= -1 * Velocity;
 8002cf0:	4b7e      	ldr	r3, [pc, #504]	; (8002eec <_Z10Trajectoryv+0x274>)
 8002cf2:	edd3 7a00 	vldr	s15, [r3]
 8002cf6:	eef1 7a67 	vneg.f32	s15, s15
 8002cfa:	4b7c      	ldr	r3, [pc, #496]	; (8002eec <_Z10Trajectoryv+0x274>)
 8002cfc:	edc3 7a00 	vstr	s15, [r3]
		    Acceleration= -0.5;   // recieve frol UART (negative)
 8002d00:	4b78      	ldr	r3, [pc, #480]	; (8002ee4 <_Z10Trajectoryv+0x26c>)
 8002d02:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 8002d06:	601a      	str	r2, [r3, #0]
		    check = 100;
 8002d08:	4b77      	ldr	r3, [pc, #476]	; (8002ee8 <_Z10Trajectoryv+0x270>)
 8002d0a:	2264      	movs	r2, #100	; 0x64
 8002d0c:	701a      	strb	r2, [r3, #0]
		}

		if (Distance/Velocity > Velocity/Acceleration){
 8002d0e:	4b74      	ldr	r3, [pc, #464]	; (8002ee0 <_Z10Trajectoryv+0x268>)
 8002d10:	edd3 6a00 	vldr	s13, [r3]
 8002d14:	4b75      	ldr	r3, [pc, #468]	; (8002eec <_Z10Trajectoryv+0x274>)
 8002d16:	edd3 7a00 	vldr	s15, [r3]
 8002d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d1e:	4b73      	ldr	r3, [pc, #460]	; (8002eec <_Z10Trajectoryv+0x274>)
 8002d20:	ed93 6a00 	vldr	s12, [r3]
 8002d24:	4b6f      	ldr	r3, [pc, #444]	; (8002ee4 <_Z10Trajectoryv+0x26c>)
 8002d26:	edd3 6a00 	vldr	s13, [r3]
 8002d2a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002d2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d36:	dd0b      	ble.n	8002d50 <_Z10Trajectoryv+0xd8>
			Tb = Velocity/Acceleration;
 8002d38:	4b6c      	ldr	r3, [pc, #432]	; (8002eec <_Z10Trajectoryv+0x274>)
 8002d3a:	edd3 6a00 	vldr	s13, [r3]
 8002d3e:	4b69      	ldr	r3, [pc, #420]	; (8002ee4 <_Z10Trajectoryv+0x26c>)
 8002d40:	ed93 7a00 	vldr	s14, [r3]
 8002d44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d48:	4b69      	ldr	r3, [pc, #420]	; (8002ef0 <_Z10Trajectoryv+0x278>)
 8002d4a:	edc3 7a00 	vstr	s15, [r3]
 8002d4e:	e029      	b.n	8002da4 <_Z10Trajectoryv+0x12c>
		}
		else {
			Tb = sqrt(2*abs(Distance));
 8002d50:	4b63      	ldr	r3, [pc, #396]	; (8002ee0 <_Z10Trajectoryv+0x268>)
 8002d52:	edd3 7a00 	vldr	s15, [r3]
 8002d56:	eeb0 0a67 	vmov.f32	s0, s15
 8002d5a:	f7fe f8cf 	bl	8000efc <_ZSt3absf>
 8002d5e:	eef0 7a40 	vmov.f32	s15, s0
 8002d62:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002d66:	eeb0 0a67 	vmov.f32	s0, s15
 8002d6a:	f7fe f8d7 	bl	8000f1c <_ZSt4sqrtf>
 8002d6e:	eef0 7a40 	vmov.f32	s15, s0
 8002d72:	4b5f      	ldr	r3, [pc, #380]	; (8002ef0 <_Z10Trajectoryv+0x278>)
 8002d74:	edc3 7a00 	vstr	s15, [r3]
			Velocity = sqrt(abs(Distance)/2);
 8002d78:	4b59      	ldr	r3, [pc, #356]	; (8002ee0 <_Z10Trajectoryv+0x268>)
 8002d7a:	edd3 7a00 	vldr	s15, [r3]
 8002d7e:	eeb0 0a67 	vmov.f32	s0, s15
 8002d82:	f7fe f8bb 	bl	8000efc <_ZSt3absf>
 8002d86:	eeb0 7a40 	vmov.f32	s14, s0
 8002d8a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002d8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d92:	eeb0 0a67 	vmov.f32	s0, s15
 8002d96:	f7fe f8c1 	bl	8000f1c <_ZSt4sqrtf>
 8002d9a:	eef0 7a40 	vmov.f32	s15, s0
 8002d9e:	4b53      	ldr	r3, [pc, #332]	; (8002eec <_Z10Trajectoryv+0x274>)
 8002da0:	edc3 7a00 	vstr	s15, [r3]
		}
		//TimeinS = _micros/10^6;
		timeFinal = (4*abs(Velocity)) + ((abs(Distance)-(2*abs(Velocity)*abs(Velocity)))/abs(Velocity));
 8002da4:	4b51      	ldr	r3, [pc, #324]	; (8002eec <_Z10Trajectoryv+0x274>)
 8002da6:	edd3 7a00 	vldr	s15, [r3]
 8002daa:	eeb0 0a67 	vmov.f32	s0, s15
 8002dae:	f7fe f8a5 	bl	8000efc <_ZSt3absf>
 8002db2:	eef0 7a40 	vmov.f32	s15, s0
 8002db6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002dba:	ee27 8a87 	vmul.f32	s16, s15, s14
 8002dbe:	4b48      	ldr	r3, [pc, #288]	; (8002ee0 <_Z10Trajectoryv+0x268>)
 8002dc0:	edd3 7a00 	vldr	s15, [r3]
 8002dc4:	eeb0 0a67 	vmov.f32	s0, s15
 8002dc8:	f7fe f898 	bl	8000efc <_ZSt3absf>
 8002dcc:	eeb0 9a40 	vmov.f32	s18, s0
 8002dd0:	4b46      	ldr	r3, [pc, #280]	; (8002eec <_Z10Trajectoryv+0x274>)
 8002dd2:	edd3 7a00 	vldr	s15, [r3]
 8002dd6:	eeb0 0a67 	vmov.f32	s0, s15
 8002dda:	f7fe f88f 	bl	8000efc <_ZSt3absf>
 8002dde:	eef0 7a40 	vmov.f32	s15, s0
 8002de2:	ee77 8aa7 	vadd.f32	s17, s15, s15
 8002de6:	4b41      	ldr	r3, [pc, #260]	; (8002eec <_Z10Trajectoryv+0x274>)
 8002de8:	edd3 7a00 	vldr	s15, [r3]
 8002dec:	eeb0 0a67 	vmov.f32	s0, s15
 8002df0:	f7fe f884 	bl	8000efc <_ZSt3absf>
 8002df4:	eef0 7a40 	vmov.f32	s15, s0
 8002df8:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8002dfc:	ee79 8a67 	vsub.f32	s17, s18, s15
 8002e00:	4b3a      	ldr	r3, [pc, #232]	; (8002eec <_Z10Trajectoryv+0x274>)
 8002e02:	edd3 7a00 	vldr	s15, [r3]
 8002e06:	eeb0 0a67 	vmov.f32	s0, s15
 8002e0a:	f7fe f877 	bl	8000efc <_ZSt3absf>
 8002e0e:	eeb0 7a40 	vmov.f32	s14, s0
 8002e12:	eec8 7a87 	vdiv.f32	s15, s17, s14
 8002e16:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002e1a:	4b36      	ldr	r3, [pc, #216]	; (8002ef4 <_Z10Trajectoryv+0x27c>)
 8002e1c:	edc3 7a00 	vstr	s15, [r3]

		if (TimeinS < Tb){
 8002e20:	4b35      	ldr	r3, [pc, #212]	; (8002ef8 <_Z10Trajectoryv+0x280>)
 8002e22:	ed93 7a00 	vldr	s14, [r3]
 8002e26:	4b32      	ldr	r3, [pc, #200]	; (8002ef0 <_Z10Trajectoryv+0x278>)
 8002e28:	edd3 7a00 	vldr	s15, [r3]
 8002e2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e34:	d56e      	bpl.n	8002f14 <_Z10Trajectoryv+0x29c>
			OutPosition = (0.5*Acceleration*TimeinS*TimeinS)+Currentpos;
 8002e36:	4b2b      	ldr	r3, [pc, #172]	; (8002ee4 <_Z10Trajectoryv+0x26c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7fd fb84 	bl	8000548 <__aeabi_f2d>
 8002e40:	f04f 0200 	mov.w	r2, #0
 8002e44:	4b2d      	ldr	r3, [pc, #180]	; (8002efc <_Z10Trajectoryv+0x284>)
 8002e46:	f7fd fbd7 	bl	80005f8 <__aeabi_dmul>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	4614      	mov	r4, r2
 8002e50:	461d      	mov	r5, r3
 8002e52:	4b29      	ldr	r3, [pc, #164]	; (8002ef8 <_Z10Trajectoryv+0x280>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fd fb76 	bl	8000548 <__aeabi_f2d>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	460b      	mov	r3, r1
 8002e60:	4620      	mov	r0, r4
 8002e62:	4629      	mov	r1, r5
 8002e64:	f7fd fbc8 	bl	80005f8 <__aeabi_dmul>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	4614      	mov	r4, r2
 8002e6e:	461d      	mov	r5, r3
 8002e70:	4b21      	ldr	r3, [pc, #132]	; (8002ef8 <_Z10Trajectoryv+0x280>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7fd fb67 	bl	8000548 <__aeabi_f2d>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	4620      	mov	r0, r4
 8002e80:	4629      	mov	r1, r5
 8002e82:	f7fd fbb9 	bl	80005f8 <__aeabi_dmul>
 8002e86:	4602      	mov	r2, r0
 8002e88:	460b      	mov	r3, r1
 8002e8a:	4614      	mov	r4, r2
 8002e8c:	461d      	mov	r5, r3
 8002e8e:	4b1c      	ldr	r3, [pc, #112]	; (8002f00 <_Z10Trajectoryv+0x288>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7fd fb58 	bl	8000548 <__aeabi_f2d>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	4620      	mov	r0, r4
 8002e9e:	4629      	mov	r1, r5
 8002ea0:	f7fd f9f4 	bl	800028c <__adddf3>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	4610      	mov	r0, r2
 8002eaa:	4619      	mov	r1, r3
 8002eac:	f7fd fe54 	bl	8000b58 <__aeabi_d2f>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	4a14      	ldr	r2, [pc, #80]	; (8002f04 <_Z10Trajectoryv+0x28c>)
 8002eb4:	6013      	str	r3, [r2, #0]
			OutVelocity = Acceleration*TimeinS;
 8002eb6:	4b0b      	ldr	r3, [pc, #44]	; (8002ee4 <_Z10Trajectoryv+0x26c>)
 8002eb8:	ed93 7a00 	vldr	s14, [r3]
 8002ebc:	4b0e      	ldr	r3, [pc, #56]	; (8002ef8 <_Z10Trajectoryv+0x280>)
 8002ebe:	edd3 7a00 	vldr	s15, [r3]
 8002ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ec6:	4b10      	ldr	r3, [pc, #64]	; (8002f08 <_Z10Trajectoryv+0x290>)
 8002ec8:	edc3 7a00 	vstr	s15, [r3]
			OutAcceleration = Acceleration;
 8002ecc:	4b05      	ldr	r3, [pc, #20]	; (8002ee4 <_Z10Trajectoryv+0x26c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a0e      	ldr	r2, [pc, #56]	; (8002f0c <_Z10Trajectoryv+0x294>)
 8002ed2:	6013      	str	r3, [r2, #0]
			ch = 1;
 8002ed4:	4b0e      	ldr	r3, [pc, #56]	; (8002f10 <_Z10Trajectoryv+0x298>)
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	701a      	strb	r2, [r3, #0]
 8002eda:	e19d      	b.n	8003218 <_Z10Trajectoryv+0x5a0>
 8002edc:	20000558 	.word	0x20000558
 8002ee0:	2000052c 	.word	0x2000052c
 8002ee4:	20000534 	.word	0x20000534
 8002ee8:	200006e1 	.word	0x200006e1
 8002eec:	20000530 	.word	0x20000530
 8002ef0:	20000544 	.word	0x20000544
 8002ef4:	20000548 	.word	0x20000548
 8002ef8:	2000054c 	.word	0x2000054c
 8002efc:	3fe00000 	.word	0x3fe00000
 8002f00:	20000550 	.word	0x20000550
 8002f04:	20000538 	.word	0x20000538
 8002f08:	2000053c 	.word	0x2000053c
 8002f0c:	20000540 	.word	0x20000540
 8002f10:	200006e0 	.word	0x200006e0
			}
		else if(TimeinS < (timeFinal-Tb)){
 8002f14:	4bd0      	ldr	r3, [pc, #832]	; (8003258 <_Z10Trajectoryv+0x5e0>)
 8002f16:	ed93 7a00 	vldr	s14, [r3]
 8002f1a:	4bd0      	ldr	r3, [pc, #832]	; (800325c <_Z10Trajectoryv+0x5e4>)
 8002f1c:	edd3 7a00 	vldr	s15, [r3]
 8002f20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f24:	4bce      	ldr	r3, [pc, #824]	; (8003260 <_Z10Trajectoryv+0x5e8>)
 8002f26:	edd3 7a00 	vldr	s15, [r3]
 8002f2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f32:	dd5e      	ble.n	8002ff2 <_Z10Trajectoryv+0x37a>
			OutPosition = (0.5*Acceleration*(Tb*Tb)) + (Velocity*(TimeinS-Tb))+Currentpos;
 8002f34:	4bcb      	ldr	r3, [pc, #812]	; (8003264 <_Z10Trajectoryv+0x5ec>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7fd fb05 	bl	8000548 <__aeabi_f2d>
 8002f3e:	f04f 0200 	mov.w	r2, #0
 8002f42:	4bc9      	ldr	r3, [pc, #804]	; (8003268 <_Z10Trajectoryv+0x5f0>)
 8002f44:	f7fd fb58 	bl	80005f8 <__aeabi_dmul>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	4614      	mov	r4, r2
 8002f4e:	461d      	mov	r5, r3
 8002f50:	4bc2      	ldr	r3, [pc, #776]	; (800325c <_Z10Trajectoryv+0x5e4>)
 8002f52:	ed93 7a00 	vldr	s14, [r3]
 8002f56:	4bc1      	ldr	r3, [pc, #772]	; (800325c <_Z10Trajectoryv+0x5e4>)
 8002f58:	edd3 7a00 	vldr	s15, [r3]
 8002f5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f60:	ee17 0a90 	vmov	r0, s15
 8002f64:	f7fd faf0 	bl	8000548 <__aeabi_f2d>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	4620      	mov	r0, r4
 8002f6e:	4629      	mov	r1, r5
 8002f70:	f7fd fb42 	bl	80005f8 <__aeabi_dmul>
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	4614      	mov	r4, r2
 8002f7a:	461d      	mov	r5, r3
 8002f7c:	4bb8      	ldr	r3, [pc, #736]	; (8003260 <_Z10Trajectoryv+0x5e8>)
 8002f7e:	ed93 7a00 	vldr	s14, [r3]
 8002f82:	4bb6      	ldr	r3, [pc, #728]	; (800325c <_Z10Trajectoryv+0x5e4>)
 8002f84:	edd3 7a00 	vldr	s15, [r3]
 8002f88:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f8c:	4bb7      	ldr	r3, [pc, #732]	; (800326c <_Z10Trajectoryv+0x5f4>)
 8002f8e:	edd3 7a00 	vldr	s15, [r3]
 8002f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f96:	ee17 0a90 	vmov	r0, s15
 8002f9a:	f7fd fad5 	bl	8000548 <__aeabi_f2d>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	4620      	mov	r0, r4
 8002fa4:	4629      	mov	r1, r5
 8002fa6:	f7fd f971 	bl	800028c <__adddf3>
 8002faa:	4602      	mov	r2, r0
 8002fac:	460b      	mov	r3, r1
 8002fae:	4614      	mov	r4, r2
 8002fb0:	461d      	mov	r5, r3
 8002fb2:	4baf      	ldr	r3, [pc, #700]	; (8003270 <_Z10Trajectoryv+0x5f8>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fd fac6 	bl	8000548 <__aeabi_f2d>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	4620      	mov	r0, r4
 8002fc2:	4629      	mov	r1, r5
 8002fc4:	f7fd f962 	bl	800028c <__adddf3>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	4610      	mov	r0, r2
 8002fce:	4619      	mov	r1, r3
 8002fd0:	f7fd fdc2 	bl	8000b58 <__aeabi_d2f>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	4aa7      	ldr	r2, [pc, #668]	; (8003274 <_Z10Trajectoryv+0x5fc>)
 8002fd8:	6013      	str	r3, [r2, #0]
			OutVelocity = Velocity;
 8002fda:	4ba4      	ldr	r3, [pc, #656]	; (800326c <_Z10Trajectoryv+0x5f4>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4aa6      	ldr	r2, [pc, #664]	; (8003278 <_Z10Trajectoryv+0x600>)
 8002fe0:	6013      	str	r3, [r2, #0]
			OutAcceleration = 0;
 8002fe2:	4ba6      	ldr	r3, [pc, #664]	; (800327c <_Z10Trajectoryv+0x604>)
 8002fe4:	f04f 0200 	mov.w	r2, #0
 8002fe8:	601a      	str	r2, [r3, #0]
			ch = 2;
 8002fea:	4ba5      	ldr	r3, [pc, #660]	; (8003280 <_Z10Trajectoryv+0x608>)
 8002fec:	2202      	movs	r2, #2
 8002fee:	701a      	strb	r2, [r3, #0]
 8002ff0:	e112      	b.n	8003218 <_Z10Trajectoryv+0x5a0>
			}
		else if(((timeFinal-Tb) <= TimeinS) && (TimeinS <= timeFinal)){
 8002ff2:	4b99      	ldr	r3, [pc, #612]	; (8003258 <_Z10Trajectoryv+0x5e0>)
 8002ff4:	ed93 7a00 	vldr	s14, [r3]
 8002ff8:	4b98      	ldr	r3, [pc, #608]	; (800325c <_Z10Trajectoryv+0x5e4>)
 8002ffa:	edd3 7a00 	vldr	s15, [r3]
 8002ffe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003002:	4b97      	ldr	r3, [pc, #604]	; (8003260 <_Z10Trajectoryv+0x5e8>)
 8003004:	edd3 7a00 	vldr	s15, [r3]
 8003008:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800300c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003010:	f200 80e5 	bhi.w	80031de <_Z10Trajectoryv+0x566>
 8003014:	4b92      	ldr	r3, [pc, #584]	; (8003260 <_Z10Trajectoryv+0x5e8>)
 8003016:	ed93 7a00 	vldr	s14, [r3]
 800301a:	4b8f      	ldr	r3, [pc, #572]	; (8003258 <_Z10Trajectoryv+0x5e0>)
 800301c:	edd3 7a00 	vldr	s15, [r3]
 8003020:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003028:	f200 80d9 	bhi.w	80031de <_Z10Trajectoryv+0x566>
			OutPosition = (0.5*Acceleration*(Tb*Tb))+ (Velocity*(timeFinal-(2*Tb)))  + (Velocity*(TimeinS-(timeFinal-Tb))) - (0.5*Acceleration*((TimeinS-(timeFinal-Tb))*(TimeinS-(timeFinal-Tb))))+Currentpos;
 800302c:	4b8d      	ldr	r3, [pc, #564]	; (8003264 <_Z10Trajectoryv+0x5ec>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4618      	mov	r0, r3
 8003032:	f7fd fa89 	bl	8000548 <__aeabi_f2d>
 8003036:	f04f 0200 	mov.w	r2, #0
 800303a:	4b8b      	ldr	r3, [pc, #556]	; (8003268 <_Z10Trajectoryv+0x5f0>)
 800303c:	f7fd fadc 	bl	80005f8 <__aeabi_dmul>
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	4614      	mov	r4, r2
 8003046:	461d      	mov	r5, r3
 8003048:	4b84      	ldr	r3, [pc, #528]	; (800325c <_Z10Trajectoryv+0x5e4>)
 800304a:	ed93 7a00 	vldr	s14, [r3]
 800304e:	4b83      	ldr	r3, [pc, #524]	; (800325c <_Z10Trajectoryv+0x5e4>)
 8003050:	edd3 7a00 	vldr	s15, [r3]
 8003054:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003058:	ee17 0a90 	vmov	r0, s15
 800305c:	f7fd fa74 	bl	8000548 <__aeabi_f2d>
 8003060:	4602      	mov	r2, r0
 8003062:	460b      	mov	r3, r1
 8003064:	4620      	mov	r0, r4
 8003066:	4629      	mov	r1, r5
 8003068:	f7fd fac6 	bl	80005f8 <__aeabi_dmul>
 800306c:	4602      	mov	r2, r0
 800306e:	460b      	mov	r3, r1
 8003070:	4614      	mov	r4, r2
 8003072:	461d      	mov	r5, r3
 8003074:	4b78      	ldr	r3, [pc, #480]	; (8003258 <_Z10Trajectoryv+0x5e0>)
 8003076:	ed93 7a00 	vldr	s14, [r3]
 800307a:	4b78      	ldr	r3, [pc, #480]	; (800325c <_Z10Trajectoryv+0x5e4>)
 800307c:	edd3 7a00 	vldr	s15, [r3]
 8003080:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003084:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003088:	4b78      	ldr	r3, [pc, #480]	; (800326c <_Z10Trajectoryv+0x5f4>)
 800308a:	edd3 7a00 	vldr	s15, [r3]
 800308e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003092:	ee17 0a90 	vmov	r0, s15
 8003096:	f7fd fa57 	bl	8000548 <__aeabi_f2d>
 800309a:	4602      	mov	r2, r0
 800309c:	460b      	mov	r3, r1
 800309e:	4620      	mov	r0, r4
 80030a0:	4629      	mov	r1, r5
 80030a2:	f7fd f8f3 	bl	800028c <__adddf3>
 80030a6:	4602      	mov	r2, r0
 80030a8:	460b      	mov	r3, r1
 80030aa:	4614      	mov	r4, r2
 80030ac:	461d      	mov	r5, r3
 80030ae:	4b6c      	ldr	r3, [pc, #432]	; (8003260 <_Z10Trajectoryv+0x5e8>)
 80030b0:	ed93 7a00 	vldr	s14, [r3]
 80030b4:	4b68      	ldr	r3, [pc, #416]	; (8003258 <_Z10Trajectoryv+0x5e0>)
 80030b6:	edd3 6a00 	vldr	s13, [r3]
 80030ba:	4b68      	ldr	r3, [pc, #416]	; (800325c <_Z10Trajectoryv+0x5e4>)
 80030bc:	edd3 7a00 	vldr	s15, [r3]
 80030c0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80030c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030c8:	4b68      	ldr	r3, [pc, #416]	; (800326c <_Z10Trajectoryv+0x5f4>)
 80030ca:	edd3 7a00 	vldr	s15, [r3]
 80030ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030d2:	ee17 0a90 	vmov	r0, s15
 80030d6:	f7fd fa37 	bl	8000548 <__aeabi_f2d>
 80030da:	4602      	mov	r2, r0
 80030dc:	460b      	mov	r3, r1
 80030de:	4620      	mov	r0, r4
 80030e0:	4629      	mov	r1, r5
 80030e2:	f7fd f8d3 	bl	800028c <__adddf3>
 80030e6:	4602      	mov	r2, r0
 80030e8:	460b      	mov	r3, r1
 80030ea:	4614      	mov	r4, r2
 80030ec:	461d      	mov	r5, r3
 80030ee:	4b5d      	ldr	r3, [pc, #372]	; (8003264 <_Z10Trajectoryv+0x5ec>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7fd fa28 	bl	8000548 <__aeabi_f2d>
 80030f8:	f04f 0200 	mov.w	r2, #0
 80030fc:	4b5a      	ldr	r3, [pc, #360]	; (8003268 <_Z10Trajectoryv+0x5f0>)
 80030fe:	f7fd fa7b 	bl	80005f8 <__aeabi_dmul>
 8003102:	4602      	mov	r2, r0
 8003104:	460b      	mov	r3, r1
 8003106:	4690      	mov	r8, r2
 8003108:	4699      	mov	r9, r3
 800310a:	4b55      	ldr	r3, [pc, #340]	; (8003260 <_Z10Trajectoryv+0x5e8>)
 800310c:	ed93 7a00 	vldr	s14, [r3]
 8003110:	4b51      	ldr	r3, [pc, #324]	; (8003258 <_Z10Trajectoryv+0x5e0>)
 8003112:	edd3 6a00 	vldr	s13, [r3]
 8003116:	4b51      	ldr	r3, [pc, #324]	; (800325c <_Z10Trajectoryv+0x5e4>)
 8003118:	edd3 7a00 	vldr	s15, [r3]
 800311c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003120:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003124:	4b4e      	ldr	r3, [pc, #312]	; (8003260 <_Z10Trajectoryv+0x5e8>)
 8003126:	edd3 6a00 	vldr	s13, [r3]
 800312a:	4b4b      	ldr	r3, [pc, #300]	; (8003258 <_Z10Trajectoryv+0x5e0>)
 800312c:	ed93 6a00 	vldr	s12, [r3]
 8003130:	4b4a      	ldr	r3, [pc, #296]	; (800325c <_Z10Trajectoryv+0x5e4>)
 8003132:	edd3 7a00 	vldr	s15, [r3]
 8003136:	ee76 7a67 	vsub.f32	s15, s12, s15
 800313a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800313e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003142:	ee17 0a90 	vmov	r0, s15
 8003146:	f7fd f9ff 	bl	8000548 <__aeabi_f2d>
 800314a:	4602      	mov	r2, r0
 800314c:	460b      	mov	r3, r1
 800314e:	4640      	mov	r0, r8
 8003150:	4649      	mov	r1, r9
 8003152:	f7fd fa51 	bl	80005f8 <__aeabi_dmul>
 8003156:	4602      	mov	r2, r0
 8003158:	460b      	mov	r3, r1
 800315a:	4620      	mov	r0, r4
 800315c:	4629      	mov	r1, r5
 800315e:	f7fd f893 	bl	8000288 <__aeabi_dsub>
 8003162:	4602      	mov	r2, r0
 8003164:	460b      	mov	r3, r1
 8003166:	4614      	mov	r4, r2
 8003168:	461d      	mov	r5, r3
 800316a:	4b41      	ldr	r3, [pc, #260]	; (8003270 <_Z10Trajectoryv+0x5f8>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f7fd f9ea 	bl	8000548 <__aeabi_f2d>
 8003174:	4602      	mov	r2, r0
 8003176:	460b      	mov	r3, r1
 8003178:	4620      	mov	r0, r4
 800317a:	4629      	mov	r1, r5
 800317c:	f7fd f886 	bl	800028c <__adddf3>
 8003180:	4602      	mov	r2, r0
 8003182:	460b      	mov	r3, r1
 8003184:	4610      	mov	r0, r2
 8003186:	4619      	mov	r1, r3
 8003188:	f7fd fce6 	bl	8000b58 <__aeabi_d2f>
 800318c:	4603      	mov	r3, r0
 800318e:	4a39      	ldr	r2, [pc, #228]	; (8003274 <_Z10Trajectoryv+0x5fc>)
 8003190:	6013      	str	r3, [r2, #0]
			OutVelocity = Velocity-(Acceleration*(TimeinS-(timeFinal-Tb)));
 8003192:	4b36      	ldr	r3, [pc, #216]	; (800326c <_Z10Trajectoryv+0x5f4>)
 8003194:	ed93 7a00 	vldr	s14, [r3]
 8003198:	4b31      	ldr	r3, [pc, #196]	; (8003260 <_Z10Trajectoryv+0x5e8>)
 800319a:	edd3 6a00 	vldr	s13, [r3]
 800319e:	4b2e      	ldr	r3, [pc, #184]	; (8003258 <_Z10Trajectoryv+0x5e0>)
 80031a0:	ed93 6a00 	vldr	s12, [r3]
 80031a4:	4b2d      	ldr	r3, [pc, #180]	; (800325c <_Z10Trajectoryv+0x5e4>)
 80031a6:	edd3 7a00 	vldr	s15, [r3]
 80031aa:	ee76 7a67 	vsub.f32	s15, s12, s15
 80031ae:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80031b2:	4b2c      	ldr	r3, [pc, #176]	; (8003264 <_Z10Trajectoryv+0x5ec>)
 80031b4:	edd3 7a00 	vldr	s15, [r3]
 80031b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031c0:	4b2d      	ldr	r3, [pc, #180]	; (8003278 <_Z10Trajectoryv+0x600>)
 80031c2:	edc3 7a00 	vstr	s15, [r3]
			OutAcceleration = -Acceleration;
 80031c6:	4b27      	ldr	r3, [pc, #156]	; (8003264 <_Z10Trajectoryv+0x5ec>)
 80031c8:	edd3 7a00 	vldr	s15, [r3]
 80031cc:	eef1 7a67 	vneg.f32	s15, s15
 80031d0:	4b2a      	ldr	r3, [pc, #168]	; (800327c <_Z10Trajectoryv+0x604>)
 80031d2:	edc3 7a00 	vstr	s15, [r3]
			ch = 3;
 80031d6:	4b2a      	ldr	r3, [pc, #168]	; (8003280 <_Z10Trajectoryv+0x608>)
 80031d8:	2203      	movs	r2, #3
 80031da:	701a      	strb	r2, [r3, #0]
 80031dc:	e01c      	b.n	8003218 <_Z10Trajectoryv+0x5a0>
			}
		else if(TimeinS > timeFinal){
 80031de:	4b20      	ldr	r3, [pc, #128]	; (8003260 <_Z10Trajectoryv+0x5e8>)
 80031e0:	ed93 7a00 	vldr	s14, [r3]
 80031e4:	4b1c      	ldr	r3, [pc, #112]	; (8003258 <_Z10Trajectoryv+0x5e0>)
 80031e6:	edd3 7a00 	vldr	s15, [r3]
 80031ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f2:	dd11      	ble.n	8003218 <_Z10Trajectoryv+0x5a0>
			OutPosition = Distance+Currentpos;
 80031f4:	4b23      	ldr	r3, [pc, #140]	; (8003284 <_Z10Trajectoryv+0x60c>)
 80031f6:	ed93 7a00 	vldr	s14, [r3]
 80031fa:	4b1d      	ldr	r3, [pc, #116]	; (8003270 <_Z10Trajectoryv+0x5f8>)
 80031fc:	edd3 7a00 	vldr	s15, [r3]
 8003200:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003204:	4b1b      	ldr	r3, [pc, #108]	; (8003274 <_Z10Trajectoryv+0x5fc>)
 8003206:	edc3 7a00 	vstr	s15, [r3]
			OutAcceleration = 0;
 800320a:	4b1c      	ldr	r3, [pc, #112]	; (800327c <_Z10Trajectoryv+0x604>)
 800320c:	f04f 0200 	mov.w	r2, #0
 8003210:	601a      	str	r2, [r3, #0]
			ch = 4;
 8003212:	4b1b      	ldr	r3, [pc, #108]	; (8003280 <_Z10Trajectoryv+0x608>)
 8003214:	2204      	movs	r2, #4
 8003216:	701a      	strb	r2, [r3, #0]
			}

		TimeinS = TimeinS + Dt;
 8003218:	4b11      	ldr	r3, [pc, #68]	; (8003260 <_Z10Trajectoryv+0x5e8>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4618      	mov	r0, r3
 800321e:	f7fd f993 	bl	8000548 <__aeabi_f2d>
 8003222:	a30b      	add	r3, pc, #44	; (adr r3, 8003250 <_Z10Trajectoryv+0x5d8>)
 8003224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003228:	f7fd f830 	bl	800028c <__adddf3>
 800322c:	4602      	mov	r2, r0
 800322e:	460b      	mov	r3, r1
 8003230:	4610      	mov	r0, r2
 8003232:	4619      	mov	r1, r3
 8003234:	f7fd fc90 	bl	8000b58 <__aeabi_d2f>
 8003238:	4603      	mov	r3, r0
 800323a:	4a09      	ldr	r2, [pc, #36]	; (8003260 <_Z10Trajectoryv+0x5e8>)
 800323c:	6013      	str	r3, [r2, #0]
		}
	//OutVelocity = 0.523598775 ;

}
 800323e:	bf00      	nop
 8003240:	46bd      	mov	sp, r7
 8003242:	ecbd 8b04 	vpop	{d8-d9}
 8003246:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800324a:	bf00      	nop
 800324c:	f3af 8000 	nop.w
 8003250:	47ae147b 	.word	0x47ae147b
 8003254:	3f847ae1 	.word	0x3f847ae1
 8003258:	20000548 	.word	0x20000548
 800325c:	20000544 	.word	0x20000544
 8003260:	2000054c 	.word	0x2000054c
 8003264:	20000534 	.word	0x20000534
 8003268:	3fe00000 	.word	0x3fe00000
 800326c:	20000530 	.word	0x20000530
 8003270:	20000550 	.word	0x20000550
 8003274:	20000538 	.word	0x20000538
 8003278:	2000053c 	.word	0x2000053c
 800327c:	20000540 	.word	0x20000540
 8003280:	200006e0 	.word	0x200006e0
 8003284:	2000052c 	.word	0x2000052c

08003288 <_Z10Unwrappingv>:

//////////////////////// [Unwrapping] ///////////////////////
void Unwrapping(){
 8003288:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800328c:	af00      	add	r7, sp, #0

	if(micros() - TimeUnwrap >= 1000){
 800328e:	f000 fd67 	bl	8003d60 <_Z6microsv>
 8003292:	4602      	mov	r2, r0
 8003294:	460b      	mov	r3, r1
 8003296:	494c      	ldr	r1, [pc, #304]	; (80033c8 <_Z10Unwrappingv+0x140>)
 8003298:	6809      	ldr	r1, [r1, #0]
 800329a:	2000      	movs	r0, #0
 800329c:	4688      	mov	r8, r1
 800329e:	4681      	mov	r9, r0
 80032a0:	ebb2 0408 	subs.w	r4, r2, r8
 80032a4:	eb63 0509 	sbc.w	r5, r3, r9
 80032a8:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 80032ac:	f175 0300 	sbcs.w	r3, r5, #0
 80032b0:	bf2c      	ite	cs
 80032b2:	2301      	movcs	r3, #1
 80032b4:	2300      	movcc	r3, #0
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d07c      	beq.n	80033b6 <_Z10Unwrappingv+0x12e>
		TimeUnwrap = micros();
 80032bc:	f000 fd50 	bl	8003d60 <_Z6microsv>
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	4b40      	ldr	r3, [pc, #256]	; (80033c8 <_Z10Unwrappingv+0x140>)
 80032c6:	601a      	str	r2, [r3, #0]
		Pn = BinPosXI * 0.006136;
 80032c8:	4b40      	ldr	r3, [pc, #256]	; (80033cc <_Z10Unwrappingv+0x144>)
 80032ca:	881b      	ldrh	r3, [r3, #0]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7fd f929 	bl	8000524 <__aeabi_i2d>
 80032d2:	a33b      	add	r3, pc, #236	; (adr r3, 80033c0 <_Z10Unwrappingv+0x138>)
 80032d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d8:	f7fd f98e 	bl	80005f8 <__aeabi_dmul>
 80032dc:	4602      	mov	r2, r0
 80032de:	460b      	mov	r3, r1
 80032e0:	4610      	mov	r0, r2
 80032e2:	4619      	mov	r1, r3
 80032e4:	f7fd fc38 	bl	8000b58 <__aeabi_d2f>
 80032e8:	4603      	mov	r3, r0
 80032ea:	4a39      	ldr	r2, [pc, #228]	; (80033d0 <_Z10Unwrappingv+0x148>)
 80032ec:	6013      	str	r3, [r2, #0]
		if(Pn-P_n <= -1*e){
 80032ee:	4b38      	ldr	r3, [pc, #224]	; (80033d0 <_Z10Unwrappingv+0x148>)
 80032f0:	ed93 7a00 	vldr	s14, [r3]
 80032f4:	4b37      	ldr	r3, [pc, #220]	; (80033d4 <_Z10Unwrappingv+0x14c>)
 80032f6:	edd3 7a00 	vldr	s15, [r3]
 80032fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80032fe:	4b36      	ldr	r3, [pc, #216]	; (80033d8 <_Z10Unwrappingv+0x150>)
 8003300:	edd3 7a00 	vldr	s15, [r3]
 8003304:	eef1 7a67 	vneg.f32	s15, s15
 8003308:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800330c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003310:	d80b      	bhi.n	800332a <_Z10Unwrappingv+0xa2>
			P0 = P_0 + P_max;
 8003312:	4b32      	ldr	r3, [pc, #200]	; (80033dc <_Z10Unwrappingv+0x154>)
 8003314:	ed93 7a00 	vldr	s14, [r3]
 8003318:	4b31      	ldr	r3, [pc, #196]	; (80033e0 <_Z10Unwrappingv+0x158>)
 800331a:	edd3 7a00 	vldr	s15, [r3]
 800331e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003322:	4b30      	ldr	r3, [pc, #192]	; (80033e4 <_Z10Unwrappingv+0x15c>)
 8003324:	edc3 7a00 	vstr	s15, [r3]
 8003328:	e01f      	b.n	800336a <_Z10Unwrappingv+0xe2>
		}
		else if(Pn - P_n >= e){
 800332a:	4b29      	ldr	r3, [pc, #164]	; (80033d0 <_Z10Unwrappingv+0x148>)
 800332c:	ed93 7a00 	vldr	s14, [r3]
 8003330:	4b28      	ldr	r3, [pc, #160]	; (80033d4 <_Z10Unwrappingv+0x14c>)
 8003332:	edd3 7a00 	vldr	s15, [r3]
 8003336:	ee37 7a67 	vsub.f32	s14, s14, s15
 800333a:	4b27      	ldr	r3, [pc, #156]	; (80033d8 <_Z10Unwrappingv+0x150>)
 800333c:	edd3 7a00 	vldr	s15, [r3]
 8003340:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003348:	db0b      	blt.n	8003362 <_Z10Unwrappingv+0xda>
			P0 = P_0 - P_max;
 800334a:	4b24      	ldr	r3, [pc, #144]	; (80033dc <_Z10Unwrappingv+0x154>)
 800334c:	ed93 7a00 	vldr	s14, [r3]
 8003350:	4b23      	ldr	r3, [pc, #140]	; (80033e0 <_Z10Unwrappingv+0x158>)
 8003352:	edd3 7a00 	vldr	s15, [r3]
 8003356:	ee77 7a67 	vsub.f32	s15, s14, s15
 800335a:	4b22      	ldr	r3, [pc, #136]	; (80033e4 <_Z10Unwrappingv+0x15c>)
 800335c:	edc3 7a00 	vstr	s15, [r3]
 8003360:	e003      	b.n	800336a <_Z10Unwrappingv+0xe2>
		}
		else{
			P0 = P_0;
 8003362:	4b1e      	ldr	r3, [pc, #120]	; (80033dc <_Z10Unwrappingv+0x154>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a1f      	ldr	r2, [pc, #124]	; (80033e4 <_Z10Unwrappingv+0x15c>)
 8003368:	6013      	str	r3, [r2, #0]
		}

		OutUnwrap = Pn + P0;
 800336a:	4b19      	ldr	r3, [pc, #100]	; (80033d0 <_Z10Unwrappingv+0x148>)
 800336c:	ed93 7a00 	vldr	s14, [r3]
 8003370:	4b1c      	ldr	r3, [pc, #112]	; (80033e4 <_Z10Unwrappingv+0x15c>)
 8003372:	edd3 7a00 	vldr	s15, [r3]
 8003376:	ee77 7a27 	vadd.f32	s15, s14, s15
 800337a:	4b1b      	ldr	r3, [pc, #108]	; (80033e8 <_Z10Unwrappingv+0x160>)
 800337c:	edc3 7a00 	vstr	s15, [r3]
		CurrentEn = BinPosXI * 0.006136;
 8003380:	4b12      	ldr	r3, [pc, #72]	; (80033cc <_Z10Unwrappingv+0x144>)
 8003382:	881b      	ldrh	r3, [r3, #0]
 8003384:	4618      	mov	r0, r3
 8003386:	f7fd f8cd 	bl	8000524 <__aeabi_i2d>
 800338a:	a30d      	add	r3, pc, #52	; (adr r3, 80033c0 <_Z10Unwrappingv+0x138>)
 800338c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003390:	f7fd f932 	bl	80005f8 <__aeabi_dmul>
 8003394:	4602      	mov	r2, r0
 8003396:	460b      	mov	r3, r1
 8003398:	4610      	mov	r0, r2
 800339a:	4619      	mov	r1, r3
 800339c:	f7fd fbdc 	bl	8000b58 <__aeabi_d2f>
 80033a0:	4603      	mov	r3, r0
 80033a2:	4a12      	ldr	r2, [pc, #72]	; (80033ec <_Z10Unwrappingv+0x164>)
 80033a4:	6013      	str	r3, [r2, #0]
		P_n = Pn;
 80033a6:	4b0a      	ldr	r3, [pc, #40]	; (80033d0 <_Z10Unwrappingv+0x148>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a0a      	ldr	r2, [pc, #40]	; (80033d4 <_Z10Unwrappingv+0x14c>)
 80033ac:	6013      	str	r3, [r2, #0]
		P_0 = P0;
 80033ae:	4b0d      	ldr	r3, [pc, #52]	; (80033e4 <_Z10Unwrappingv+0x15c>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a0a      	ldr	r2, [pc, #40]	; (80033dc <_Z10Unwrappingv+0x154>)
 80033b4:	6013      	str	r3, [r2, #0]
	}
}
 80033b6:	bf00      	nop
 80033b8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80033bc:	f3af 8000 	nop.w
 80033c0:	f540895d 	.word	0xf540895d
 80033c4:	3f79220f 	.word	0x3f79220f
 80033c8:	20000690 	.word	0x20000690
 80033cc:	20000518 	.word	0x20000518
 80033d0:	20000680 	.word	0x20000680
 80033d4:	20000684 	.word	0x20000684
 80033d8:	20000148 	.word	0x20000148
 80033dc:	2000067c 	.word	0x2000067c
 80033e0:	20000144 	.word	0x20000144
 80033e4:	20000678 	.word	0x20000678
 80033e8:	20000688 	.word	0x20000688
 80033ec:	2000068c 	.word	0x2000068c

080033f0 <_Z12Kalmanfilterv>:
	}
}


/////////////////////////// [Kalman Filter] ///////////////////////
void Kalmanfilter(){
 80033f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80033f4:	b0d2      	sub	sp, #328	; 0x148
 80033f6:	af00      	add	r7, sp, #0

	if(micros() - TimeStampKalman >= 10000){
 80033f8:	f000 fcb2 	bl	8003d60 <_Z6microsv>
 80033fc:	4602      	mov	r2, r0
 80033fe:	460b      	mov	r3, r1
 8003400:	4992      	ldr	r1, [pc, #584]	; (800364c <_Z12Kalmanfilterv+0x25c>)
 8003402:	6809      	ldr	r1, [r1, #0]
 8003404:	2000      	movs	r0, #0
 8003406:	4688      	mov	r8, r1
 8003408:	4681      	mov	r9, r0
 800340a:	ebb2 0408 	subs.w	r4, r2, r8
 800340e:	eb63 0509 	sbc.w	r5, r3, r9
 8003412:	f242 7310 	movw	r3, #10000	; 0x2710
 8003416:	429c      	cmp	r4, r3
 8003418:	f175 0300 	sbcs.w	r3, r5, #0
 800341c:	bf2c      	ite	cs
 800341e:	2301      	movcs	r3, #1
 8003420:	2300      	movcc	r3, #0
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 810a 	beq.w	800363e <_Z12Kalmanfilterv+0x24e>
		 TimeStampKalman = micros();
 800342a:	f000 fc99 	bl	8003d60 <_Z6microsv>
 800342e:	4602      	mov	r2, r0
 8003430:	460b      	mov	r3, r1
 8003432:	4b86      	ldr	r3, [pc, #536]	; (800364c <_Z12Kalmanfilterv+0x25c>)
 8003434:	601a      	str	r2, [r3, #0]
	//if(millis() - TimeStampKalman >= 10){
	//	TimeStampKalman = millis();
		 ////////// Predict ////////////////////
		 Q = G*Q1*G.transpose();
 8003436:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800343a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800343e:	4a84      	ldr	r2, [pc, #528]	; (8003650 <_Z12Kalmanfilterv+0x260>)
 8003440:	4984      	ldr	r1, [pc, #528]	; (8003654 <_Z12Kalmanfilterv+0x264>)
 8003442:	4618      	mov	r0, r3
 8003444:	f000 ff64 	bl	8004310 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlIfEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNS6_18promote_scalar_argIfT_XsrNS6_14has_ReturnTypeINS_20ScalarBinaryOpTraitsIfS9_NS7_IfS9_EEEEEE5valueEE4typeEEEKS2_KNS6_19plain_constant_typeIS2_SG_E4typeEEERKS9_>
 8003448:	4882      	ldr	r0, [pc, #520]	; (8003654 <_Z12Kalmanfilterv+0x264>)
 800344a:	f000 ff9a 	bl	8004382 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE9transposeEv>
 800344e:	4602      	mov	r2, r0
 8003450:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003454:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800345e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003462:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003466:	f107 0114 	add.w	r1, r7, #20
 800346a:	4618      	mov	r0, r3
 800346c:	f000 ffbb 	bl	80043e6 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEmlINS_9TransposeIS6_EEEEKNS_7ProductISD_T_Li0EEERKNS0_ISJ_EE>
 8003470:	463b      	mov	r3, r7
 8003472:	4619      	mov	r1, r3
 8003474:	4878      	ldr	r0, [pc, #480]	; (8003658 <_Z12Kalmanfilterv+0x268>)
 8003476:	f000 ffcd 	bl	8004414 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS0_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS5_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEERS1_RKNS_9DenseBaseIT_EE>
		 X = A*X1 ;
 800347a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800347e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003482:	4a76      	ldr	r2, [pc, #472]	; (800365c <_Z12Kalmanfilterv+0x26c>)
 8003484:	4976      	ldr	r1, [pc, #472]	; (8003660 <_Z12Kalmanfilterv+0x270>)
 8003486:	4618      	mov	r0, r3
 8003488:	f000 ffd3 	bl	8004432 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>
 800348c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003490:	4619      	mov	r1, r3
 8003492:	4874      	ldr	r0, [pc, #464]	; (8003664 <_Z12Kalmanfilterv+0x274>)
 8003494:	f000 ffe4 	bl	8004460 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEES1_Li0EEEEERS1_RKNS_9DenseBaseIT_EE>
		 P = A*O*A.transpose()+Q;
 8003498:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800349c:	4a72      	ldr	r2, [pc, #456]	; (8003668 <_Z12Kalmanfilterv+0x278>)
 800349e:	4970      	ldr	r1, [pc, #448]	; (8003660 <_Z12Kalmanfilterv+0x270>)
 80034a0:	4618      	mov	r0, r3
 80034a2:	f000 ffec 	bl	800447e <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlIS2_EEKNS_7ProductIS2_T_Li0EEERKNS0_IS6_EE>
 80034a6:	486e      	ldr	r0, [pc, #440]	; (8003660 <_Z12Kalmanfilterv+0x270>)
 80034a8:	f001 f800 	bl	80044ac <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE9transposeEv>
 80034ac:	4603      	mov	r3, r0
 80034ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80034b0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80034b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80034b8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80034bc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80034c0:	4618      	mov	r0, r3
 80034c2:	f001 f806 	bl	80044d2 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEmlINS_9TransposeIS3_EEEEKNS1_IS4_T_Li0EEERKNS0_IS9_EE>
 80034c6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80034ca:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80034ce:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80034d2:	4a61      	ldr	r2, [pc, #388]	; (8003658 <_Z12Kalmanfilterv+0x268>)
 80034d4:	4618      	mov	r0, r3
 80034d6:	f001 f813 	bl	8004500 <_ZNK5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEplIS3_EEKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIfNSB_6traitsIT_E6ScalarEEEKS7_KSE_EERKNS0_ISE_EE>
 80034da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80034de:	4619      	mov	r1, r3
 80034e0:	4862      	ldr	r0, [pc, #392]	; (800366c <_Z12Kalmanfilterv+0x27c>)
 80034e2:	f001 f82b 	bl	800453c <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS7_IS1_S1_Li0EEENS_9TransposeIS1_EELi0EEEKS1_EEEERS1_RKNS_9DenseBaseIT_EE>

		 //////////////// Update /////////////////////
	     Z << OutUnwrap ;
 80034e6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80034ea:	4a61      	ldr	r2, [pc, #388]	; (8003670 <_Z12Kalmanfilterv+0x280>)
 80034ec:	4961      	ldr	r1, [pc, #388]	; (8003674 <_Z12Kalmanfilterv+0x284>)
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 fe24 	bl	800413c <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEElsERKf>
 80034f4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80034f8:	4618      	mov	r0, r3
 80034fa:	f000 fe2e 	bl	800415a <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
	//     Z << DiffVelo ;
		 K = (P*C.transpose())*(C*P*C.transpose()+R).inverse();
 80034fe:	485e      	ldr	r0, [pc, #376]	; (8003678 <_Z12Kalmanfilterv+0x288>)
 8003500:	f001 f82b 	bl	800455a <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>
 8003504:	4603      	mov	r3, r0
 8003506:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800350a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800350e:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8003512:	4956      	ldr	r1, [pc, #344]	; (800366c <_Z12Kalmanfilterv+0x27c>)
 8003514:	4618      	mov	r0, r3
 8003516:	f001 f833 	bl	8004580 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlINS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS9_EE>
 800351a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800351e:	4a53      	ldr	r2, [pc, #332]	; (800366c <_Z12Kalmanfilterv+0x27c>)
 8003520:	4955      	ldr	r1, [pc, #340]	; (8003678 <_Z12Kalmanfilterv+0x288>)
 8003522:	4618      	mov	r0, r3
 8003524:	f001 f843 	bl	80045ae <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEmlINS1_IfLi3ELi3ELi0ELi3ELi3EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>
 8003528:	4853      	ldr	r0, [pc, #332]	; (8003678 <_Z12Kalmanfilterv+0x288>)
 800352a:	f001 f816 	bl	800455a <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>
 800352e:	4603      	mov	r3, r0
 8003530:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003534:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003538:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 800353c:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8003540:	4618      	mov	r0, r3
 8003542:	f001 f84b 	bl	80045dc <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEmlINS_9TransposeIS3_EEEEKNS1_IS5_T_Li0EEERKNS0_ISA_EE>
 8003546:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800354a:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 800354e:	4a4b      	ldr	r2, [pc, #300]	; (800367c <_Z12Kalmanfilterv+0x28c>)
 8003550:	4618      	mov	r0, r3
 8003552:	f001 f85a 	bl	800460a <_ZNK5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEplINS2_IfLi1ELi1ELi0ELi1ELi1EEEEEKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>
 8003556:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800355a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800355e:	4611      	mov	r1, r2
 8003560:	4618      	mov	r0, r3
 8003562:	f001 f8ad 	bl	80046c0 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv>
 8003566:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800356a:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800356e:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8003572:	4618      	mov	r0, r3
 8003574:	f001 f8dc 	bl	8004730 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEmlINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEEKNS1_IS7_T_Li0EEERKNS0_ISM_EE>
 8003578:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800357c:	4619      	mov	r1, r3
 800357e:	4840      	ldr	r0, [pc, #256]	; (8003680 <_Z12Kalmanfilterv+0x290>)
 8003580:	f001 f8ed 	bl	800475e <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_7ProductINS3_INS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS3_INS3_IS6_S4_Li0EEES7_Li0EEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS1_RKNS_9DenseBaseIT_EE>
		 X1 = X+K*(Z-C*X);
 8003584:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8003588:	4a36      	ldr	r2, [pc, #216]	; (8003664 <_Z12Kalmanfilterv+0x274>)
 800358a:	493b      	ldr	r1, [pc, #236]	; (8003678 <_Z12Kalmanfilterv+0x288>)
 800358c:	4618      	mov	r0, r3
 800358e:	f001 f8f5 	bl	800477c <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEmlINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>
 8003592:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003596:	f507 728a 	add.w	r2, r7, #276	; 0x114
 800359a:	4936      	ldr	r1, [pc, #216]	; (8003674 <_Z12Kalmanfilterv+0x284>)
 800359c:	4618      	mov	r0, r3
 800359e:	f001 f904 	bl	80047aa <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEmiINS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEKNS_13CwiseBinaryOpINS_8internal20scalar_difference_opIfNSA_6traitsIT_E6ScalarEEEKS2_KSD_EERKNS0_ISD_EE>
 80035a2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80035a6:	f507 7282 	add.w	r2, r7, #260	; 0x104
 80035aa:	4935      	ldr	r1, [pc, #212]	; (8003680 <_Z12Kalmanfilterv+0x290>)
 80035ac:	4618      	mov	r0, r3
 80035ae:	f001 f939 	bl	8004824 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEEEEKNSB_IS2_T_Li0EEERKNS0_ISG_EE>
 80035b2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80035b6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80035ba:	492a      	ldr	r1, [pc, #168]	; (8003664 <_Z12Kalmanfilterv+0x274>)
 80035bc:	4618      	mov	r0, r3
 80035be:	f001 f95e 	bl	800487e <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEplINS_7ProductIS2_NS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS5_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEKNS6_INS7_13scalar_sum_opIfNS7_6traitsIT_E6ScalarEEEKS2_KSJ_EERKNS0_ISJ_EE>
 80035c2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80035c6:	4619      	mov	r1, r3
 80035c8:	4824      	ldr	r0, [pc, #144]	; (800365c <_Z12Kalmanfilterv+0x26c>)
 80035ca:	f001 f976 	bl	80048ba <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS1_KNS_7ProductIS1_NS3_INS4_20scalar_difference_opIffEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEES1_Li0EEEEELi0EEEEEEERS1_RKNS_9DenseBaseIT_EE>
		 O = (I-(K*C))*P;
 80035ce:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80035d2:	4a29      	ldr	r2, [pc, #164]	; (8003678 <_Z12Kalmanfilterv+0x288>)
 80035d4:	492a      	ldr	r1, [pc, #168]	; (8003680 <_Z12Kalmanfilterv+0x290>)
 80035d6:	4618      	mov	r0, r3
 80035d8:	f001 f97e 	bl	80048d8 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>
 80035dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80035e0:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80035e4:	4927      	ldr	r1, [pc, #156]	; (8003684 <_Z12Kalmanfilterv+0x294>)
 80035e6:	4618      	mov	r0, r3
 80035e8:	f001 f98d 	bl	8004906 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmiINS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEKNS_13CwiseBinaryOpINS_8internal20scalar_difference_opIfNSA_6traitsIT_E6ScalarEEEKS2_KSD_EERKNS0_ISD_EE>
 80035ec:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80035f0:	f507 7198 	add.w	r1, r7, #304	; 0x130
 80035f4:	4a1d      	ldr	r2, [pc, #116]	; (800366c <_Z12Kalmanfilterv+0x27c>)
 80035f6:	4618      	mov	r0, r3
 80035f8:	f001 f9c2 	bl	8004980 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEmlIS6_EEKNS8_ISD_T_Li0EEERKNS0_ISG_EE>
 80035fc:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8003600:	4619      	mov	r1, r3
 8003602:	4819      	ldr	r0, [pc, #100]	; (8003668 <_Z12Kalmanfilterv+0x278>)
 8003604:	f001 f9d3 	bl	80049ae <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS3_INS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES1_Li0EEEEERS1_RKNS_9DenseBaseIT_EE>

		 KalP = X(0,0);
 8003608:	2200      	movs	r2, #0
 800360a:	2100      	movs	r1, #0
 800360c:	4815      	ldr	r0, [pc, #84]	; (8003664 <_Z12Kalmanfilterv+0x274>)
 800360e:	f000 fe3b 	bl	8004288 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 8003612:	4603      	mov	r3, r0
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a1c      	ldr	r2, [pc, #112]	; (8003688 <_Z12Kalmanfilterv+0x298>)
 8003618:	6013      	str	r3, [r2, #0]
		 KalV = X(1,0);
 800361a:	2200      	movs	r2, #0
 800361c:	2101      	movs	r1, #1
 800361e:	4811      	ldr	r0, [pc, #68]	; (8003664 <_Z12Kalmanfilterv+0x274>)
 8003620:	f000 fe32 	bl	8004288 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 8003624:	4603      	mov	r3, r0
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a18      	ldr	r2, [pc, #96]	; (800368c <_Z12Kalmanfilterv+0x29c>)
 800362a:	6013      	str	r3, [r2, #0]
		 KalA = X(2,0);
 800362c:	2200      	movs	r2, #0
 800362e:	2102      	movs	r1, #2
 8003630:	480c      	ldr	r0, [pc, #48]	; (8003664 <_Z12Kalmanfilterv+0x274>)
 8003632:	f000 fe29 	bl	8004288 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 8003636:	4603      	mov	r3, r0
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a15      	ldr	r2, [pc, #84]	; (8003690 <_Z12Kalmanfilterv+0x2a0>)
 800363c:	6013      	str	r3, [r2, #0]
		 //runtime = micros()-TimeStampKalman;

	     //ErrPos[0] = TargetDeg - BinPosXI*0.006136;
	 }

}
 800363e:	bf00      	nop
 8003640:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8003644:	46bd      	mov	sp, r7
 8003646:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800364a:	bf00      	nop
 800364c:	2000055c 	.word	0x2000055c
 8003650:	20000140 	.word	0x20000140
 8003654:	20000618 	.word	0x20000618
 8003658:	20000624 	.word	0x20000624
 800365c:	20000654 	.word	0x20000654
 8003660:	20000560 	.word	0x20000560
 8003664:	20000648 	.word	0x20000648
 8003668:	200005a8 	.word	0x200005a8
 800366c:	20000584 	.word	0x20000584
 8003670:	20000688 	.word	0x20000688
 8003674:	200005fc 	.word	0x200005fc
 8003678:	2000060c 	.word	0x2000060c
 800367c:	200005f4 	.word	0x200005f4
 8003680:	20000600 	.word	0x20000600
 8003684:	200005cc 	.word	0x200005cc
 8003688:	2000066c 	.word	0x2000066c
 800368c:	20000670 	.word	0x20000670
 8003690:	20000674 	.word	0x20000674

08003694 <_Z11PIDPositionv>:

///////////////////// [PID cat cat Zero] /////////////////////////////
void PIDPosition(){
 8003694:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003698:	af00      	add	r7, sp, #0
	/*CrrntTime = micros();
	//DeltaTime = (CrrntTime - PreviTime) / 1000000.0; // seconds
	PreviTime = CrrntTime; // log previ here for next loop
	*/
	if(micros() - TimeStampPID_P >= 10000){
 800369a:	f000 fb61 	bl	8003d60 <_Z6microsv>
 800369e:	4602      	mov	r2, r0
 80036a0:	460b      	mov	r3, r1
 80036a2:	4936      	ldr	r1, [pc, #216]	; (800377c <_Z11PIDPositionv+0xe8>)
 80036a4:	6809      	ldr	r1, [r1, #0]
 80036a6:	2000      	movs	r0, #0
 80036a8:	4688      	mov	r8, r1
 80036aa:	4681      	mov	r9, r0
 80036ac:	ebb2 0408 	subs.w	r4, r2, r8
 80036b0:	eb63 0509 	sbc.w	r5, r3, r9
 80036b4:	f242 7310 	movw	r3, #10000	; 0x2710
 80036b8:	429c      	cmp	r4, r3
 80036ba:	f175 0300 	sbcs.w	r3, r5, #0
 80036be:	bf2c      	ite	cs
 80036c0:	2301      	movcs	r3, #1
 80036c2:	2300      	movcc	r3, #0
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d055      	beq.n	8003776 <_Z11PIDPositionv+0xe2>
		TimeStampPID_P = micros();
 80036ca:	f000 fb49 	bl	8003d60 <_Z6microsv>
 80036ce:	4602      	mov	r2, r0
 80036d0:	460b      	mov	r3, r1
 80036d2:	4b2a      	ldr	r3, [pc, #168]	; (800377c <_Z11PIDPositionv+0xe8>)
 80036d4:	601a      	str	r2, [r3, #0]

	//if(millis() - TimeStampPID_P >= 10){
	//	TimeStampPID_P = millis();

		ErrPos[0] = OutPosition - KalP;
 80036d6:	4b2a      	ldr	r3, [pc, #168]	; (8003780 <_Z11PIDPositionv+0xec>)
 80036d8:	ed93 7a00 	vldr	s14, [r3]
 80036dc:	4b29      	ldr	r3, [pc, #164]	; (8003784 <_Z11PIDPositionv+0xf0>)
 80036de:	edd3 7a00 	vldr	s15, [r3]
 80036e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036e6:	4b28      	ldr	r3, [pc, #160]	; (8003788 <_Z11PIDPositionv+0xf4>)
 80036e8:	edc3 7a00 	vstr	s15, [r3]
	//	ErrPos[0] = OutVelocity - KalV;
		sumError = sumError + ErrPos[0];
 80036ec:	4b26      	ldr	r3, [pc, #152]	; (8003788 <_Z11PIDPositionv+0xf4>)
 80036ee:	ed93 7a00 	vldr	s14, [r3]
 80036f2:	4b26      	ldr	r3, [pc, #152]	; (800378c <_Z11PIDPositionv+0xf8>)
 80036f4:	edd3 7a00 	vldr	s15, [r3]
 80036f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036fc:	4b23      	ldr	r3, [pc, #140]	; (800378c <_Z11PIDPositionv+0xf8>)
 80036fe:	edc3 7a00 	vstr	s15, [r3]

		Propo = K_P * ErrPos[0];
 8003702:	4b21      	ldr	r3, [pc, #132]	; (8003788 <_Z11PIDPositionv+0xf4>)
 8003704:	ed93 7a00 	vldr	s14, [r3]
 8003708:	4b21      	ldr	r3, [pc, #132]	; (8003790 <_Z11PIDPositionv+0xfc>)
 800370a:	edd3 7a00 	vldr	s15, [r3]
 800370e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003712:	4b20      	ldr	r3, [pc, #128]	; (8003794 <_Z11PIDPositionv+0x100>)
 8003714:	edc3 7a00 	vstr	s15, [r3]

		Integral = K_I * sumError; // Integral -Newton-Leibniz
 8003718:	4b1f      	ldr	r3, [pc, #124]	; (8003798 <_Z11PIDPositionv+0x104>)
 800371a:	ed93 7a00 	vldr	s14, [r3]
 800371e:	4b1b      	ldr	r3, [pc, #108]	; (800378c <_Z11PIDPositionv+0xf8>)
 8003720:	edd3 7a00 	vldr	s15, [r3]
 8003724:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003728:	4b1c      	ldr	r3, [pc, #112]	; (800379c <_Z11PIDPositionv+0x108>)
 800372a:	edc3 7a00 	vstr	s15, [r3]

		Derivate = K_D * (ErrPos[0]-ErrPos[1]); // d/dt position
 800372e:	4b16      	ldr	r3, [pc, #88]	; (8003788 <_Z11PIDPositionv+0xf4>)
 8003730:	ed93 7a00 	vldr	s14, [r3]
 8003734:	4b14      	ldr	r3, [pc, #80]	; (8003788 <_Z11PIDPositionv+0xf4>)
 8003736:	edd3 7a01 	vldr	s15, [r3, #4]
 800373a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800373e:	4b18      	ldr	r3, [pc, #96]	; (80037a0 <_Z11PIDPositionv+0x10c>)
 8003740:	edd3 7a00 	vldr	s15, [r3]
 8003744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003748:	4b16      	ldr	r3, [pc, #88]	; (80037a4 <_Z11PIDPositionv+0x110>)
 800374a:	edc3 7a00 	vstr	s15, [r3]

		ufromposit = Propo + Integral + Derivate;
 800374e:	4b11      	ldr	r3, [pc, #68]	; (8003794 <_Z11PIDPositionv+0x100>)
 8003750:	ed93 7a00 	vldr	s14, [r3]
 8003754:	4b11      	ldr	r3, [pc, #68]	; (800379c <_Z11PIDPositionv+0x108>)
 8003756:	edd3 7a00 	vldr	s15, [r3]
 800375a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800375e:	4b11      	ldr	r3, [pc, #68]	; (80037a4 <_Z11PIDPositionv+0x110>)
 8003760:	edd3 7a00 	vldr	s15, [r3]
 8003764:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003768:	4b0f      	ldr	r3, [pc, #60]	; (80037a8 <_Z11PIDPositionv+0x114>)
 800376a:	edc3 7a00 	vstr	s15, [r3]

		//u_contr = ufromposit ;
		ErrPos[1] = ErrPos[0]; // log previous error
 800376e:	4b06      	ldr	r3, [pc, #24]	; (8003788 <_Z11PIDPositionv+0xf4>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a05      	ldr	r2, [pc, #20]	; (8003788 <_Z11PIDPositionv+0xf4>)
 8003774:	6053      	str	r3, [r2, #4]
	}
}
 8003776:	bf00      	nop
 8003778:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800377c:	20000694 	.word	0x20000694
 8003780:	20000538 	.word	0x20000538
 8003784:	2000066c 	.word	0x2000066c
 8003788:	2000069c 	.word	0x2000069c
 800378c:	200006a8 	.word	0x200006a8
 8003790:	200006ac 	.word	0x200006ac
 8003794:	200006b8 	.word	0x200006b8
 8003798:	200006b0 	.word	0x200006b0
 800379c:	200006bc 	.word	0x200006bc
 80037a0:	200006b4 	.word	0x200006b4
 80037a4:	200006c0 	.word	0x200006c0
 80037a8:	200006a4 	.word	0x200006a4

080037ac <_Z11PIDVelocityv>:

void PIDVelocity(){
 80037ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80037b0:	af00      	add	r7, sp, #0

	if(micros() - TimeStampPID_V >= 10000){
 80037b2:	f000 fad5 	bl	8003d60 <_Z6microsv>
 80037b6:	4602      	mov	r2, r0
 80037b8:	460b      	mov	r3, r1
 80037ba:	4930      	ldr	r1, [pc, #192]	; (800387c <_Z11PIDVelocityv+0xd0>)
 80037bc:	6809      	ldr	r1, [r1, #0]
 80037be:	2000      	movs	r0, #0
 80037c0:	4688      	mov	r8, r1
 80037c2:	4681      	mov	r9, r0
 80037c4:	ebb2 0408 	subs.w	r4, r2, r8
 80037c8:	eb63 0509 	sbc.w	r5, r3, r9
 80037cc:	f242 7310 	movw	r3, #10000	; 0x2710
 80037d0:	429c      	cmp	r4, r3
 80037d2:	f175 0300 	sbcs.w	r3, r5, #0
 80037d6:	bf2c      	ite	cs
 80037d8:	2301      	movcs	r3, #1
 80037da:	2300      	movcc	r3, #0
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d048      	beq.n	8003874 <_Z11PIDVelocityv+0xc8>
		TimeStampPID_V = micros();
 80037e2:	f000 fabd 	bl	8003d60 <_Z6microsv>
 80037e6:	4602      	mov	r2, r0
 80037e8:	460b      	mov	r3, r1
 80037ea:	4b24      	ldr	r3, [pc, #144]	; (800387c <_Z11PIDVelocityv+0xd0>)
 80037ec:	601a      	str	r2, [r3, #0]
		Vcontr[1] = Vcontr[0] ;
		ErrVelo[2] = ErrVelo[1] ;
		ErrVelo[1] = ErrVelo[0] ;
		*/

		ErrVelo[0] = OutVelocity + ufromposit - KalV;
 80037ee:	4b24      	ldr	r3, [pc, #144]	; (8003880 <_Z11PIDVelocityv+0xd4>)
 80037f0:	ed93 7a00 	vldr	s14, [r3]
 80037f4:	4b23      	ldr	r3, [pc, #140]	; (8003884 <_Z11PIDVelocityv+0xd8>)
 80037f6:	edd3 7a00 	vldr	s15, [r3]
 80037fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037fe:	4b22      	ldr	r3, [pc, #136]	; (8003888 <_Z11PIDVelocityv+0xdc>)
 8003800:	edd3 7a00 	vldr	s15, [r3]
 8003804:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003808:	4b20      	ldr	r3, [pc, #128]	; (800388c <_Z11PIDVelocityv+0xe0>)
 800380a:	edc3 7a00 	vstr	s15, [r3]
		SumAll = SumAll + ErrVelo[0];
 800380e:	4b1f      	ldr	r3, [pc, #124]	; (800388c <_Z11PIDVelocityv+0xe0>)
 8003810:	ed93 7a00 	vldr	s14, [r3]
 8003814:	4b1e      	ldr	r3, [pc, #120]	; (8003890 <_Z11PIDVelocityv+0xe4>)
 8003816:	edd3 7a00 	vldr	s15, [r3]
 800381a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800381e:	4b1c      	ldr	r3, [pc, #112]	; (8003890 <_Z11PIDVelocityv+0xe4>)
 8003820:	edc3 7a00 	vstr	s15, [r3]

		u_contr = (K_P_V * ErrVelo[0])+(K_I_V * SumAll)+(K_D * (ErrVelo[0]-ErrVelo[1])) ;
 8003824:	4b19      	ldr	r3, [pc, #100]	; (800388c <_Z11PIDVelocityv+0xe0>)
 8003826:	ed93 7a00 	vldr	s14, [r3]
 800382a:	4b1a      	ldr	r3, [pc, #104]	; (8003894 <_Z11PIDVelocityv+0xe8>)
 800382c:	edd3 7a00 	vldr	s15, [r3]
 8003830:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003834:	4b18      	ldr	r3, [pc, #96]	; (8003898 <_Z11PIDVelocityv+0xec>)
 8003836:	edd3 6a00 	vldr	s13, [r3]
 800383a:	4b15      	ldr	r3, [pc, #84]	; (8003890 <_Z11PIDVelocityv+0xe4>)
 800383c:	edd3 7a00 	vldr	s15, [r3]
 8003840:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003844:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003848:	4b10      	ldr	r3, [pc, #64]	; (800388c <_Z11PIDVelocityv+0xe0>)
 800384a:	edd3 6a00 	vldr	s13, [r3]
 800384e:	4b0f      	ldr	r3, [pc, #60]	; (800388c <_Z11PIDVelocityv+0xe0>)
 8003850:	edd3 7a01 	vldr	s15, [r3, #4]
 8003854:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003858:	4b10      	ldr	r3, [pc, #64]	; (800389c <_Z11PIDVelocityv+0xf0>)
 800385a:	edd3 7a00 	vldr	s15, [r3]
 800385e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003862:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003866:	4b0e      	ldr	r3, [pc, #56]	; (80038a0 <_Z11PIDVelocityv+0xf4>)
 8003868:	edc3 7a00 	vstr	s15, [r3]
		ErrVelo[1] = ErrVelo[0]; // log previous error
 800386c:	4b07      	ldr	r3, [pc, #28]	; (800388c <_Z11PIDVelocityv+0xe0>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a06      	ldr	r2, [pc, #24]	; (800388c <_Z11PIDVelocityv+0xe0>)
 8003872:	6053      	str	r3, [r2, #4]
		}
}
 8003874:	bf00      	nop
 8003876:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800387a:	bf00      	nop
 800387c:	200006d4 	.word	0x200006d4
 8003880:	2000053c 	.word	0x2000053c
 8003884:	200006a4 	.word	0x200006a4
 8003888:	20000670 	.word	0x20000670
 800388c:	200006c4 	.word	0x200006c4
 8003890:	200006d0 	.word	0x200006d0
 8003894:	2000014c 	.word	0x2000014c
 8003898:	20000150 	.word	0x20000150
 800389c:	200006b4 	.word	0x200006b4
 80038a0:	200006d8 	.word	0x200006d8
 80038a4:	00000000 	.word	0x00000000

080038a8 <_Z11controlloopv>:

void controlloop(){
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0

	if( abs( Finalposition - KalP) < 0.005 && KalV < 0.0005){
 80038ac:	4b22      	ldr	r3, [pc, #136]	; (8003938 <_Z11controlloopv+0x90>)
 80038ae:	ed93 7a00 	vldr	s14, [r3]
 80038b2:	4b22      	ldr	r3, [pc, #136]	; (800393c <_Z11controlloopv+0x94>)
 80038b4:	edd3 7a00 	vldr	s15, [r3]
 80038b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038bc:	eeb0 0a67 	vmov.f32	s0, s15
 80038c0:	f7fd fb1c 	bl	8000efc <_ZSt3absf>
 80038c4:	ee10 3a10 	vmov	r3, s0
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7fc fe3d 	bl	8000548 <__aeabi_f2d>
 80038ce:	a316      	add	r3, pc, #88	; (adr r3, 8003928 <_Z11controlloopv+0x80>)
 80038d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d4:	f7fd f902 	bl	8000adc <__aeabi_dcmplt>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00e      	beq.n	80038fc <_Z11controlloopv+0x54>
 80038de:	4b18      	ldr	r3, [pc, #96]	; (8003940 <_Z11controlloopv+0x98>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fc fe30 	bl	8000548 <__aeabi_f2d>
 80038e8:	a311      	add	r3, pc, #68	; (adr r3, 8003930 <_Z11controlloopv+0x88>)
 80038ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ee:	f7fd f8f5 	bl	8000adc <__aeabi_dcmplt>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <_Z11controlloopv+0x54>
 80038f8:	2301      	movs	r3, #1
 80038fa:	e000      	b.n	80038fe <_Z11controlloopv+0x56>
 80038fc:	2300      	movs	r3, #0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d009      	beq.n	8003916 <_Z11controlloopv+0x6e>
		PWMOut = 0;
 8003902:	4b10      	ldr	r3, [pc, #64]	; (8003944 <_Z11controlloopv+0x9c>)
 8003904:	2200      	movs	r2, #0
 8003906:	801a      	strh	r2, [r3, #0]
		check = 8;
 8003908:	4b0f      	ldr	r3, [pc, #60]	; (8003948 <_Z11controlloopv+0xa0>)
 800390a:	2208      	movs	r2, #8
 800390c:	701a      	strb	r2, [r3, #0]
		flag_finishTra = 1;
 800390e:	4b0f      	ldr	r3, [pc, #60]	; (800394c <_Z11controlloopv+0xa4>)
 8003910:	2201      	movs	r2, #1
 8003912:	701a      	strb	r2, [r3, #0]
	else{
		PIDPosition();
		PIDVelocity();
		MotDrvCytron();
	}
}
 8003914:	e005      	b.n	8003922 <_Z11controlloopv+0x7a>
		PIDPosition();
 8003916:	f7ff febd 	bl	8003694 <_Z11PIDPositionv>
		PIDVelocity();
 800391a:	f7ff ff47 	bl	80037ac <_Z11PIDVelocityv>
		MotDrvCytron();
 800391e:	f000 f817 	bl	8003950 <_Z12MotDrvCytronv>
}
 8003922:	bf00      	nop
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	47ae147b 	.word	0x47ae147b
 800392c:	3f747ae1 	.word	0x3f747ae1
 8003930:	d2f1a9fc 	.word	0xd2f1a9fc
 8003934:	3f40624d 	.word	0x3f40624d
 8003938:	20000528 	.word	0x20000528
 800393c:	2000066c 	.word	0x2000066c
 8003940:	20000670 	.word	0x20000670
 8003944:	2000051c 	.word	0x2000051c
 8003948:	200006e1 	.word	0x200006e1
 800394c:	200004a8 	.word	0x200004a8

08003950 <_Z12MotDrvCytronv>:


void MotDrvCytron(){
 8003950:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003954:	af00      	add	r7, sp, #0
	//   direction chk
	//if(u_contr > 0){mot_dirctn= 0;}
	//else if(u_contr < 0) {mot_dirctn = 1;}
	//else{PWMOut = 0;}

	if(micros() - TimeDrive >= 10000){
 8003956:	f000 fa03 	bl	8003d60 <_Z6microsv>
 800395a:	4602      	mov	r2, r0
 800395c:	460b      	mov	r3, r1
 800395e:	4932      	ldr	r1, [pc, #200]	; (8003a28 <_Z12MotDrvCytronv+0xd8>)
 8003960:	6809      	ldr	r1, [r1, #0]
 8003962:	2000      	movs	r0, #0
 8003964:	4688      	mov	r8, r1
 8003966:	4681      	mov	r9, r0
 8003968:	ebb2 0408 	subs.w	r4, r2, r8
 800396c:	eb63 0509 	sbc.w	r5, r3, r9
 8003970:	f242 7310 	movw	r3, #10000	; 0x2710
 8003974:	429c      	cmp	r4, r3
 8003976:	f175 0300 	sbcs.w	r3, r5, #0
 800397a:	bf2c      	ite	cs
 800397c:	2301      	movcs	r3, #1
 800397e:	2300      	movcc	r3, #0
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d049      	beq.n	8003a1a <_Z12MotDrvCytronv+0xca>
			TimeDrive = micros();
 8003986:	f000 f9eb 	bl	8003d60 <_Z6microsv>
 800398a:	4602      	mov	r2, r0
 800398c:	460b      	mov	r3, r1
 800398e:	4b26      	ldr	r3, [pc, #152]	; (8003a28 <_Z12MotDrvCytronv+0xd8>)
 8003990:	601a      	str	r2, [r3, #0]
			u_contr = u_contr * 833.3;
 8003992:	4b26      	ldr	r3, [pc, #152]	; (8003a2c <_Z12MotDrvCytronv+0xdc>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f7fc fdd6 	bl	8000548 <__aeabi_f2d>
 800399c:	a320      	add	r3, pc, #128	; (adr r3, 8003a20 <_Z12MotDrvCytronv+0xd0>)
 800399e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a2:	f7fc fe29 	bl	80005f8 <__aeabi_dmul>
 80039a6:	4602      	mov	r2, r0
 80039a8:	460b      	mov	r3, r1
 80039aa:	4610      	mov	r0, r2
 80039ac:	4619      	mov	r1, r3
 80039ae:	f7fd f8d3 	bl	8000b58 <__aeabi_d2f>
 80039b2:	4603      	mov	r3, r0
 80039b4:	4a1d      	ldr	r2, [pc, #116]	; (8003a2c <_Z12MotDrvCytronv+0xdc>)
 80039b6:	6013      	str	r3, [r2, #0]
			// u_contr = 2500;
			if(u_contr > 0){
 80039b8:	4b1c      	ldr	r3, [pc, #112]	; (8003a2c <_Z12MotDrvCytronv+0xdc>)
 80039ba:	edd3 7a00 	vldr	s15, [r3]
 80039be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039c6:	dd03      	ble.n	80039d0 <_Z12MotDrvCytronv+0x80>
				mot_dirctn= 1;
 80039c8:	4b19      	ldr	r3, [pc, #100]	; (8003a30 <_Z12MotDrvCytronv+0xe0>)
 80039ca:	2201      	movs	r2, #1
 80039cc:	701a      	strb	r2, [r3, #0]
 80039ce:	e00e      	b.n	80039ee <_Z12MotDrvCytronv+0x9e>
			}
			else if(u_contr < 0) {
 80039d0:	4b16      	ldr	r3, [pc, #88]	; (8003a2c <_Z12MotDrvCytronv+0xdc>)
 80039d2:	edd3 7a00 	vldr	s15, [r3]
 80039d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039de:	d503      	bpl.n	80039e8 <_Z12MotDrvCytronv+0x98>
				mot_dirctn = 0;
 80039e0:	4b13      	ldr	r3, [pc, #76]	; (8003a30 <_Z12MotDrvCytronv+0xe0>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	701a      	strb	r2, [r3, #0]
 80039e6:	e002      	b.n	80039ee <_Z12MotDrvCytronv+0x9e>
			}
			else{
				PWMOut = 0;
 80039e8:	4b12      	ldr	r3, [pc, #72]	; (8003a34 <_Z12MotDrvCytronv+0xe4>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	801a      	strh	r2, [r3, #0]
			}
	// speed
	PWMOut= (int)fabsf(u_contr); // Absolute int
 80039ee:	4b0f      	ldr	r3, [pc, #60]	; (8003a2c <_Z12MotDrvCytronv+0xdc>)
 80039f0:	edd3 7a00 	vldr	s15, [r3]
 80039f4:	eef0 7ae7 	vabs.f32	s15, s15
 80039f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039fc:	ee17 3a90 	vmov	r3, s15
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	4b0c      	ldr	r3, [pc, #48]	; (8003a34 <_Z12MotDrvCytronv+0xe4>)
 8003a04:	801a      	strh	r2, [r3, #0]
	if(PWMOut > 5000){PWMOut = 5000;} // saturate 50% gear 1:6 - 120rpm => 10rpm
 8003a06:	4b0b      	ldr	r3, [pc, #44]	; (8003a34 <_Z12MotDrvCytronv+0xe4>)
 8003a08:	881b      	ldrh	r3, [r3, #0]
 8003a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d903      	bls.n	8003a1a <_Z12MotDrvCytronv+0xca>
 8003a12:	4b08      	ldr	r3, [pc, #32]	; (8003a34 <_Z12MotDrvCytronv+0xe4>)
 8003a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a18:	801a      	strh	r2, [r3, #0]
	//if(PWMOut < 1600 ){PWMOut = 1600;} //pvnt too low pwm that can't drive mot
	//&& fabsf(ErrPos[0]) >= 4
	//if(flag_finishTra == 1){PWMOut = 0;}
	}
}
 8003a1a:	bf00      	nop
 8003a1c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a20:	66666666 	.word	0x66666666
 8003a24:	408a0a66 	.word	0x408a0a66
 8003a28:	200006dc 	.word	0x200006dc
 8003a2c:	200006d8 	.word	0x200006d8
 8003a30:	20000524 	.word	0x20000524
 8003a34:	2000051c 	.word	0x2000051c

08003a38 <_Z13GraytoBinarioth>:

///////////////////// [Abs Encoder I2C] ////////////////////////////////////////////
////////// [Absolute Encoder] ////////////////////////////////////////////
uint16_t GraytoBinario(uint16_t grayx,uint8_t numbit){ // numbit=10
 8003a38:	b480      	push	{r7}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	4603      	mov	r3, r0
 8003a40:	460a      	mov	r2, r1
 8003a42:	80fb      	strh	r3, [r7, #6]
 8003a44:	4613      	mov	r3, r2
 8003a46:	717b      	strb	r3, [r7, #5]

	uint16_t binaryout = 0b0;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	82fb      	strh	r3, [r7, #22]

    binaryout = (grayx >> (numbit-1))&0x01;
 8003a4c:	88fa      	ldrh	r2, [r7, #6]
 8003a4e:	797b      	ldrb	r3, [r7, #5]
 8003a50:	3b01      	subs	r3, #1
 8003a52:	fa42 f303 	asr.w	r3, r2, r3
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	82fb      	strh	r3, [r7, #22]
    //std::cout << binaryout << std::endl;

    for (int i = 1; i < numbit ;i++){
 8003a5e:	2301      	movs	r3, #1
 8003a60:	613b      	str	r3, [r7, #16]
 8003a62:	797b      	ldrb	r3, [r7, #5]
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	da1e      	bge.n	8003aa8 <_Z13GraytoBinarioth+0x70>
        /* XOR operation */
        int cp1 = binaryout&0x01 ;//>> (numbit-i)
 8003a6a:	8afb      	ldrh	r3, [r7, #22]
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	60fb      	str	r3, [r7, #12]
        int cp2 = grayx >> (numbit-(i+1))&0x01; //
 8003a72:	88fa      	ldrh	r2, [r7, #6]
 8003a74:	7979      	ldrb	r1, [r7, #5]
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	1acb      	subs	r3, r1, r3
 8003a7c:	fa42 f303 	asr.w	r3, r2, r3
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	60bb      	str	r3, [r7, #8]

        if (cp1 == cp2)
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d103      	bne.n	8003a96 <_Z13GraytoBinarioth+0x5e>
            {binaryout = (binaryout << 1) + 0; } //qd = 0;
 8003a8e:	8afb      	ldrh	r3, [r7, #22]
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	82fb      	strh	r3, [r7, #22]
 8003a94:	e004      	b.n	8003aa0 <_Z13GraytoBinarioth+0x68>
        else
            {binaryout = (binaryout << 1) + 1; } //qd = 1;
 8003a96:	8afb      	ldrh	r3, [r7, #22]
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	82fb      	strh	r3, [r7, #22]
    for (int i = 1; i < numbit ;i++){
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	613b      	str	r3, [r7, #16]
 8003aa6:	e7dc      	b.n	8003a62 <_Z13GraytoBinarioth+0x2a>
        //std::cout << "cp" << i << " " << cp1 << cp2 << " " << qd << "  "<<binaryout << std::endl;
    }
    //BinPos = binaryout;
    return binaryout;
 8003aa8:	8afb      	ldrh	r3, [r7, #22]
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	371c      	adds	r7, #28
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
	...

08003ab8 <_Z14IOExpenderInitv>:

void IOExpenderInit() {// call when start system
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af04      	add	r7, sp, #16
			0x00, 0x00, 0x00, 0x00,
			0x00, // 0x12 GPIOA
			0x00, // 0x13 GPIOB
			0x00, 0x00 };
	// OLATB -> Out data for pinB
	HAL_I2C_Mem_Write(&hi2c1, ADDR_IOXT, 0x00, I2C_MEMADD_SIZE_8BIT, Xetting,
 8003abe:	2364      	movs	r3, #100	; 0x64
 8003ac0:	9302      	str	r3, [sp, #8]
 8003ac2:	2316      	movs	r3, #22
 8003ac4:	9301      	str	r3, [sp, #4]
 8003ac6:	4b05      	ldr	r3, [pc, #20]	; (8003adc <_Z14IOExpenderInitv+0x24>)
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	2301      	movs	r3, #1
 8003acc:	2200      	movs	r2, #0
 8003ace:	2140      	movs	r1, #64	; 0x40
 8003ad0:	4803      	ldr	r0, [pc, #12]	; (8003ae0 <_Z14IOExpenderInitv+0x28>)
 8003ad2:	f013 fc83 	bl	80173dc <HAL_I2C_Mem_Write>
			0x16, 100);

}
 8003ad6:	bf00      	nop
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	2000016c 	.word	0x2000016c
 8003ae0:	2000021c 	.word	0x2000021c

08003ae4 <_Z14AbsEncI2CReadxPh>:

void AbsEncI2CReadx(uint8_t *RawRAB){
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af04      	add	r7, sp, #16
 8003aea:	6078      	str	r0, [r7, #4]

	if(flag_absenc != 0 && hi2c1.State == HAL_I2C_STATE_READY){
 8003aec:	4b23      	ldr	r3, [pc, #140]	; (8003b7c <_Z14AbsEncI2CReadxPh+0x98>)
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d007      	beq.n	8003b04 <_Z14AbsEncI2CReadxPh+0x20>
 8003af4:	4b22      	ldr	r3, [pc, #136]	; (8003b80 <_Z14AbsEncI2CReadxPh+0x9c>)
 8003af6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b20      	cmp	r3, #32
 8003afe:	d101      	bne.n	8003b04 <_Z14AbsEncI2CReadxPh+0x20>
 8003b00:	2301      	movs	r3, #1
 8003b02:	e000      	b.n	8003b06 <_Z14AbsEncI2CReadxPh+0x22>
 8003b04:	2300      	movs	r3, #0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d033      	beq.n	8003b72 <_Z14AbsEncI2CReadxPh+0x8e>

		HAL_I2C_Mem_Read(&hi2c1, ADDR_IOXT, 0x12, I2C_MEMADD_SIZE_8BIT,
 8003b0a:	2364      	movs	r3, #100	; 0x64
 8003b0c:	9302      	str	r3, [sp, #8]
 8003b0e:	2302      	movs	r3, #2
 8003b10:	9301      	str	r3, [sp, #4]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	2301      	movs	r3, #1
 8003b18:	2212      	movs	r2, #18
 8003b1a:	2140      	movs	r1, #64	; 0x40
 8003b1c:	4818      	ldr	r0, [pc, #96]	; (8003b80 <_Z14AbsEncI2CReadxPh+0x9c>)
 8003b1e:	f013 fd57 	bl	80175d0 <HAL_I2C_Mem_Read>
								RawRAB, 2, 100);

		GrayCBitXI = (RawEnBitAB[1] << 8) | RawEnBitAB[0]; // GrayCBitx
 8003b22:	4b18      	ldr	r3, [pc, #96]	; (8003b84 <_Z14AbsEncI2CReadxPh+0xa0>)
 8003b24:	785b      	ldrb	r3, [r3, #1]
 8003b26:	021b      	lsls	r3, r3, #8
 8003b28:	b21a      	sxth	r2, r3
 8003b2a:	4b16      	ldr	r3, [pc, #88]	; (8003b84 <_Z14AbsEncI2CReadxPh+0xa0>)
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	b21b      	sxth	r3, r3
 8003b30:	4313      	orrs	r3, r2
 8003b32:	b21b      	sxth	r3, r3
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	4b14      	ldr	r3, [pc, #80]	; (8003b88 <_Z14AbsEncI2CReadxPh+0xa4>)
 8003b38:	801a      	strh	r2, [r3, #0]
		// 1023- to reverse
		BinPosXI = 1023 - (GraytoBinario(GrayCBitXI, 10) + POSOFFSET) ;
 8003b3a:	4b13      	ldr	r3, [pc, #76]	; (8003b88 <_Z14AbsEncI2CReadxPh+0xa4>)
 8003b3c:	881b      	ldrh	r3, [r3, #0]
 8003b3e:	210a      	movs	r1, #10
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7ff ff79 	bl	8003a38 <_Z13GraytoBinarioth>
 8003b46:	4603      	mov	r3, r0
 8003b48:	f5c3 63e9 	rsb	r3, r3, #1864	; 0x748
 8003b4c:	3305      	adds	r3, #5
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	4b0e      	ldr	r3, [pc, #56]	; (8003b8c <_Z14AbsEncI2CReadxPh+0xa8>)
 8003b52:	801a      	strh	r2, [r3, #0]
		if (BinPosXI >= 1024){BinPosXI %= 1024;}
 8003b54:	4b0d      	ldr	r3, [pc, #52]	; (8003b8c <_Z14AbsEncI2CReadxPh+0xa8>)
 8003b56:	881b      	ldrh	r3, [r3, #0]
 8003b58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b5c:	d306      	bcc.n	8003b6c <_Z14AbsEncI2CReadxPh+0x88>
 8003b5e:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <_Z14AbsEncI2CReadxPh+0xa8>)
 8003b60:	881b      	ldrh	r3, [r3, #0]
 8003b62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	4b08      	ldr	r3, [pc, #32]	; (8003b8c <_Z14AbsEncI2CReadxPh+0xa8>)
 8003b6a:	801a      	strh	r2, [r3, #0]

		flag_absenc = 0;
 8003b6c:	4b03      	ldr	r3, [pc, #12]	; (8003b7c <_Z14AbsEncI2CReadxPh+0x98>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	701a      	strb	r2, [r3, #0]
//			flag_absenc = 0;
//		break;
//
//		}
	}
}
 8003b72:	bf00      	nop
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	2000051a 	.word	0x2000051a
 8003b80:	2000021c 	.word	0x2000021c
 8003b84:	20000514 	.word	0x20000514
 8003b88:	20000516 	.word	0x20000516
 8003b8c:	20000518 	.word	0x20000518

08003b90 <_Z13Efft_activatev>:

/////////////////////// [End Effector] //////////////////////////////////

void Efft_activate(){
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af02      	add	r7, sp, #8
	uint8_t cmmd = 0x45;
 8003b96:	2345      	movs	r3, #69	; 0x45
 8003b98:	71fb      	strb	r3, [r7, #7]

	static enum{ef_INIT, ef_shoot} efshoot = ef_INIT;
	switch(efshoot){
 8003b9a:	4b21      	ldr	r3, [pc, #132]	; (8003c20 <_Z13Efft_activatev+0x90>)
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d01a      	beq.n	8003bd8 <_Z13Efft_activatev+0x48>
	default:
	case ef_INIT:
		if(flag_efftActi != 0 && hi2c3.State == HAL_I2C_STATE_READY){
 8003ba2:	4b20      	ldr	r3, [pc, #128]	; (8003c24 <_Z13Efft_activatev+0x94>)
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d007      	beq.n	8003bba <_Z13Efft_activatev+0x2a>
 8003baa:	4b1f      	ldr	r3, [pc, #124]	; (8003c28 <_Z13Efft_activatev+0x98>)
 8003bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b20      	cmp	r3, #32
 8003bb4:	d101      	bne.n	8003bba <_Z13Efft_activatev+0x2a>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e000      	b.n	8003bbc <_Z13Efft_activatev+0x2c>
 8003bba:	2300      	movs	r3, #0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d028      	beq.n	8003c12 <_Z13Efft_activatev+0x82>
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &cmmd, 0, I2C_FIRST_FRAME);
 8003bc0:	1dfa      	adds	r2, r7, #7
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	2146      	movs	r1, #70	; 0x46
 8003bca:	4817      	ldr	r0, [pc, #92]	; (8003c28 <_Z13Efft_activatev+0x98>)
 8003bcc:	f013 ff26 	bl	8017a1c <HAL_I2C_Master_Seq_Transmit_IT>
			//HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &cmmd, 1, I2C_FIRST_AND_LAST_FRAME);
			//HAL_I2C_Master_Transmit(&hi2c3, ADDR_EFFT, &cmmd, 2, 100);
			efshoot = ef_shoot;
 8003bd0:	4b13      	ldr	r3, [pc, #76]	; (8003c20 <_Z13Efft_activatev+0x90>)
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	701a      	strb	r2, [r3, #0]
		}
	break;
 8003bd6:	e01c      	b.n	8003c12 <_Z13Efft_activatev+0x82>

	case ef_shoot:
		if (hi2c3.State == HAL_I2C_STATE_READY){
 8003bd8:	4b13      	ldr	r3, [pc, #76]	; (8003c28 <_Z13Efft_activatev+0x98>)
 8003bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	2b20      	cmp	r3, #32
 8003be2:	bf0c      	ite	eq
 8003be4:	2301      	moveq	r3, #1
 8003be6:	2300      	movne	r3, #0
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d013      	beq.n	8003c16 <_Z13Efft_activatev+0x86>
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &cmmd, 1, I2C_LAST_FRAME);
 8003bee:	1dfa      	adds	r2, r7, #7
 8003bf0:	2320      	movs	r3, #32
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	2146      	movs	r1, #70	; 0x46
 8003bf8:	480b      	ldr	r0, [pc, #44]	; (8003c28 <_Z13Efft_activatev+0x98>)
 8003bfa:	f013 ff0f 	bl	8017a1c <HAL_I2C_Master_Seq_Transmit_IT>
			efshoot = ef_INIT;
 8003bfe:	4b08      	ldr	r3, [pc, #32]	; (8003c20 <_Z13Efft_activatev+0x90>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	701a      	strb	r2, [r3, #0]
			flag_efftActi = 0;
 8003c04:	4b07      	ldr	r3, [pc, #28]	; (8003c24 <_Z13Efft_activatev+0x94>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	701a      	strb	r2, [r3, #0]
			trig_efftRead = 1;
 8003c0a:	4b08      	ldr	r3, [pc, #32]	; (8003c2c <_Z13Efft_activatev+0x9c>)
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	701a      	strb	r2, [r3, #0]
		}
	break;
 8003c10:	e001      	b.n	8003c16 <_Z13Efft_activatev+0x86>
	break;
 8003c12:	bf00      	nop
 8003c14:	e000      	b.n	8003c18 <_Z13Efft_activatev+0x88>
	break;
 8003c16:	bf00      	nop
	}

}
 8003c18:	bf00      	nop
 8003c1a:	3708      	adds	r7, #8
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	20000786 	.word	0x20000786
 8003c24:	200006e3 	.word	0x200006e3
 8003c28:	20000270 	.word	0x20000270
 8003c2c:	200006e5 	.word	0x200006e5

08003c30 <_Z9Efft_readPh>:

void Efft_read(uint8_t *Rddata){
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af02      	add	r7, sp, #8
 8003c36:	6078      	str	r0, [r7, #4]
		//HAL_I2C_Mem_Read(&hi2c1, ADDR_EFFT, &readRQ, I2C_MEMADD_SIZE_8BIT, Rddata, 1, 100);
		flag_efftRead = 0;
	}
	*/
	static uint8_t efrdStatus = 0;
	switch(efrdStatus){
 8003c38:	4b1f      	ldr	r3, [pc, #124]	; (8003cb8 <_Z9Efft_readPh+0x88>)
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d01a      	beq.n	8003c76 <_Z9Efft_readPh+0x46>
	default:
	case 0:
		if (flag_efftRead != 0 && hi2c3.State == HAL_I2C_STATE_READY){
 8003c40:	4b1e      	ldr	r3, [pc, #120]	; (8003cbc <_Z9Efft_readPh+0x8c>)
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d007      	beq.n	8003c58 <_Z9Efft_readPh+0x28>
 8003c48:	4b1d      	ldr	r3, [pc, #116]	; (8003cc0 <_Z9Efft_readPh+0x90>)
 8003c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b20      	cmp	r3, #32
 8003c52:	d101      	bne.n	8003c58 <_Z9Efft_readPh+0x28>
 8003c54:	2301      	movs	r3, #1
 8003c56:	e000      	b.n	8003c5a <_Z9Efft_readPh+0x2a>
 8003c58:	2300      	movs	r3, #0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d025      	beq.n	8003caa <_Z9Efft_readPh+0x7a>
			//HAL_I2C_Master_Transmit_IT(&hi2c3, ADDR_EFFT, 0x23, 1);
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &readRQ, 1, I2C_FIRST_AND_NEXT_FRAME);
 8003c5e:	2302      	movs	r3, #2
 8003c60:	9300      	str	r3, [sp, #0]
 8003c62:	2301      	movs	r3, #1
 8003c64:	4a17      	ldr	r2, [pc, #92]	; (8003cc4 <_Z9Efft_readPh+0x94>)
 8003c66:	2146      	movs	r1, #70	; 0x46
 8003c68:	4815      	ldr	r0, [pc, #84]	; (8003cc0 <_Z9Efft_readPh+0x90>)
 8003c6a:	f013 fed7 	bl	8017a1c <HAL_I2C_Master_Seq_Transmit_IT>
			//HAL_I2C_Master_Transmit(&hi2c3, ADDR_EFFT, &readRQ, 2, 100);
			//HAL_I2C_Master_Seq_Transmit_DMA(&hi2c3, ADDR_EFFT, &readRQ, 1, I2C_FIRST_AND_NEXT_FRAME);
			efrdStatus = 1;
 8003c6e:	4b12      	ldr	r3, [pc, #72]	; (8003cb8 <_Z9Efft_readPh+0x88>)
 8003c70:	2201      	movs	r2, #1
 8003c72:	701a      	strb	r2, [r3, #0]
		}
	break;
 8003c74:	e019      	b.n	8003caa <_Z9Efft_readPh+0x7a>

	case 1:

		if (hi2c3.State == HAL_I2C_STATE_READY){
 8003c76:	4b12      	ldr	r3, [pc, #72]	; (8003cc0 <_Z9Efft_readPh+0x90>)
 8003c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b20      	cmp	r3, #32
 8003c80:	bf0c      	ite	eq
 8003c82:	2301      	moveq	r3, #1
 8003c84:	2300      	movne	r3, #0
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d010      	beq.n	8003cae <_Z9Efft_readPh+0x7e>
			HAL_I2C_Master_Seq_Receive_IT(&hi2c3, ADDR_EFFT, Rddata, 1, I2C_LAST_FRAME);
 8003c8c:	2320      	movs	r3, #32
 8003c8e:	9300      	str	r3, [sp, #0]
 8003c90:	2301      	movs	r3, #1
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	2146      	movs	r1, #70	; 0x46
 8003c96:	480a      	ldr	r0, [pc, #40]	; (8003cc0 <_Z9Efft_readPh+0x90>)
 8003c98:	f013 ff86 	bl	8017ba8 <HAL_I2C_Master_Seq_Receive_IT>
			//HAL_I2C_Master_Seq_Receive_DMA(&hi2c3, ADDR_EFFT, Rddata, 1, I2C_LAST_FRAME);
			//HAL_I2C_Master_Receive(&hi2c3, ADDR_EFFT ,Rddata, 1, 100);
		flag_efftRead = 0;
 8003c9c:	4b07      	ldr	r3, [pc, #28]	; (8003cbc <_Z9Efft_readPh+0x8c>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	701a      	strb	r2, [r3, #0]
		efrdStatus = 0;
 8003ca2:	4b05      	ldr	r3, [pc, #20]	; (8003cb8 <_Z9Efft_readPh+0x88>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	701a      	strb	r2, [r3, #0]
			}
	break;
 8003ca8:	e001      	b.n	8003cae <_Z9Efft_readPh+0x7e>
	break;
 8003caa:	bf00      	nop
 8003cac:	e000      	b.n	8003cb0 <_Z9Efft_readPh+0x80>
	break;
 8003cae:	bf00      	nop
	}

}
 8003cb0:	bf00      	nop
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	20000787 	.word	0x20000787
 8003cbc:	200006e4 	.word	0x200006e4
 8003cc0:	20000270 	.word	0x20000270
 8003cc4:	20000182 	.word	0x20000182

08003cc8 <HAL_GPIO_EXTI_Callback>:

/////////////// Emer Interrupt /////////////////////////////////
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	4603      	mov	r3, r0
 8003cd0:	80fb      	strh	r3, [r7, #6]
	//============// EMER ////=====================
	if(GPIO_Pin == GPIO_PIN_11){
 8003cd2:	88fb      	ldrh	r3, [r7, #6]
 8003cd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cd8:	d108      	bne.n	8003cec <HAL_GPIO_EXTI_Callback+0x24>
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
		grandState = emer;
 8003cda:	4b1d      	ldr	r3, [pc, #116]	; (8003d50 <HAL_GPIO_EXTI_Callback+0x88>)
 8003cdc:	2203      	movs	r2, #3
 8003cde:	701a      	strb	r2, [r3, #0]
		bluecounter = 0;
 8003ce0:	4b1c      	ldr	r3, [pc, #112]	; (8003d54 <HAL_GPIO_EXTI_Callback+0x8c>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	701a      	strb	r2, [r3, #0]
		PWMOut = 0;
 8003ce6:	4b1c      	ldr	r3, [pc, #112]	; (8003d58 <HAL_GPIO_EXTI_Callback+0x90>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	801a      	strh	r2, [r3, #0]
		// Motor Driver Torque Lock here
	}
	//=============// Stop ////======================
	if(GPIO_Pin == GPIO_PIN_10){
 8003cec:	88fb      	ldrh	r3, [r7, #6]
 8003cee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cf2:	d110      	bne.n	8003d16 <HAL_GPIO_EXTI_Callback+0x4e>
		PWMOut = 0;
 8003cf4:	4b18      	ldr	r3, [pc, #96]	; (8003d58 <HAL_GPIO_EXTI_Callback+0x90>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	801a      	strh	r2, [r3, #0]
		bluecounter = 0;
 8003cfa:	4b16      	ldr	r3, [pc, #88]	; (8003d54 <HAL_GPIO_EXTI_Callback+0x8c>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	701a      	strb	r2, [r3, #0]
		if(grandState == work){grandState = stopnd;}
 8003d00:	4b13      	ldr	r3, [pc, #76]	; (8003d50 <HAL_GPIO_EXTI_Callback+0x88>)
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d103      	bne.n	8003d10 <HAL_GPIO_EXTI_Callback+0x48>
 8003d08:	4b11      	ldr	r3, [pc, #68]	; (8003d50 <HAL_GPIO_EXTI_Callback+0x88>)
 8003d0a:	2204      	movs	r2, #4
 8003d0c:	701a      	strb	r2, [r3, #0]
 8003d0e:	e002      	b.n	8003d16 <HAL_GPIO_EXTI_Callback+0x4e>
		else{grandState = stop;}
 8003d10:	4b0f      	ldr	r3, [pc, #60]	; (8003d50 <HAL_GPIO_EXTI_Callback+0x88>)
 8003d12:	2202      	movs	r2, #2
 8003d14:	701a      	strb	r2, [r3, #0]

		}
	//=========// work Blue button //=========//
	if(GPIO_Pin == GPIO_PIN_13){
 8003d16:	88fb      	ldrh	r3, [r7, #6]
 8003d18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d1c:	d108      	bne.n	8003d30 <HAL_GPIO_EXTI_Callback+0x68>
		bluecounter++;
 8003d1e:	4b0d      	ldr	r3, [pc, #52]	; (8003d54 <HAL_GPIO_EXTI_Callback+0x8c>)
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	3301      	adds	r3, #1
 8003d24:	b2da      	uxtb	r2, r3
 8003d26:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <HAL_GPIO_EXTI_Callback+0x8c>)
 8003d28:	701a      	strb	r2, [r3, #0]
//		for(uint8_t i = 0; i <= sizeof(PosDataSet); i++){
//		    		positionlog[i] = PosDataSet[i];
//		    	}
		//if(grandState == Ready){}
		grandState = work;
 8003d2a:	4b09      	ldr	r3, [pc, #36]	; (8003d50 <HAL_GPIO_EXTI_Callback+0x88>)
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	701a      	strb	r2, [r3, #0]
		//flag_efftActi = 1;
		//trig_efftRead = 1;
	}

	//=============// setzero //================//
		if(GPIO_Pin == GPIO_PIN_2){
 8003d30:	88fb      	ldrh	r3, [r7, #6]
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	d106      	bne.n	8003d44 <HAL_GPIO_EXTI_Callback+0x7c>
			Finalposition = 0;
 8003d36:	4b09      	ldr	r3, [pc, #36]	; (8003d5c <HAL_GPIO_EXTI_Callback+0x94>)
 8003d38:	f04f 0200 	mov.w	r2, #0
 8003d3c:	601a      	str	r2, [r3, #0]
			grandState = SetZeroGr;
 8003d3e:	4b04      	ldr	r3, [pc, #16]	; (8003d50 <HAL_GPIO_EXTI_Callback+0x88>)
 8003d40:	2205      	movs	r2, #5
 8003d42:	701a      	strb	r2, [r3, #0]
		}
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr
 8003d50:	200004a0 	.word	0x200004a0
 8003d54:	20000698 	.word	0x20000698
 8003d58:	2000051c 	.word	0x2000051c
 8003d5c:	20000528 	.word	0x20000528

08003d60 <_Z6microsv>:

///////////////////////////////////// micro timer////////////////////////////////////
uint64_t micros()
{return _micros + htim11.Instance->CNT;}
 8003d60:	b4b0      	push	{r4, r5, r7}
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	4b09      	ldr	r3, [pc, #36]	; (8003d8c <_Z6microsv+0x2c>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	4611      	mov	r1, r2
 8003d70:	4b07      	ldr	r3, [pc, #28]	; (8003d90 <_Z6microsv+0x30>)
 8003d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d76:	1884      	adds	r4, r0, r2
 8003d78:	eb41 0503 	adc.w	r5, r1, r3
 8003d7c:	4622      	mov	r2, r4
 8003d7e:	462b      	mov	r3, r5
 8003d80:	4610      	mov	r0, r2
 8003d82:	4619      	mov	r1, r3
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bcb0      	pop	{r4, r5, r7}
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	20000354 	.word	0x20000354
 8003d90:	200004b0 	.word	0x200004b0

08003d94 <_Z6millisv>:
uint32_t millis()
{return _millis;}// + htim10.Instance->CNT
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	4b03      	ldr	r3, [pc, #12]	; (8003da8 <_Z6millisv+0x14>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	200004b8 	.word	0x200004b8

08003dac <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003dac:	b4b0      	push	{r4, r5, r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 if(htim == &htim11)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a0e      	ldr	r2, [pc, #56]	; (8003df0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d10a      	bne.n	8003dd2 <HAL_TIM_PeriodElapsedCallback+0x26>
 {_micros += 65535;}
 8003dbc:	4b0d      	ldr	r3, [pc, #52]	; (8003df4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8003dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003dc6:	1854      	adds	r4, r2, r1
 8003dc8:	f143 0500 	adc.w	r5, r3, #0
 8003dcc:	4b09      	ldr	r3, [pc, #36]	; (8003df4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8003dce:	e9c3 4500 	strd	r4, r5, [r3]
 if(htim == &htim10)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a08      	ldr	r2, [pc, #32]	; (8003df8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d104      	bne.n	8003de4 <HAL_TIM_PeriodElapsedCallback+0x38>
 {_millis++;}
 8003dda:	4b08      	ldr	r3, [pc, #32]	; (8003dfc <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	3301      	adds	r3, #1
 8003de0:	4a06      	ldr	r2, [pc, #24]	; (8003dfc <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003de2:	6013      	str	r3, [r2, #0]
}
 8003de4:	bf00      	nop
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bcb0      	pop	{r4, r5, r7}
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	20000354 	.word	0x20000354
 8003df4:	200004b0 	.word	0x200004b0
 8003df8:	2000030c 	.word	0x2000030c
 8003dfc:	200004b8 	.word	0x200004b8

08003e00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e00:	b480      	push	{r7}
 8003e02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e04:	b672      	cpsid	i
}
 8003e06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e08:	e7fe      	b.n	8003e08 <Error_Handler+0x8>

08003e0a <_ZN5Eigen8symbolic10SymbolExprINS_8internal17symbolic_last_tagEEC1Ev>:
{
public:
  /** Alias to the template parameter \c tag */
  typedef tag Tag;

  SymbolExpr() {}
 8003e0a:	b480      	push	{r7}
 8003e0c:	b083      	sub	sp, #12
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4618      	mov	r0, r3
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <_ZN5Eigen8internal8FixedIntILi1EEC1Ev>:
template<int N> class FixedInt
{
public:
  static const int value = N;
  EIGEN_CONSTEXPR operator int() const { return value; }
  FixedInt() {}
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr

08003e36 <_ZNK5Eigen8internal8FixedIntILi1EEclEv>:
  template<int M>
  FixedInt<N&M> operator&( FixedInt<M>) const { return FixedInt<N&M>(); }

#if EIGEN_HAS_CXX14_VARIABLE_TEMPLATES
  // Needed in C++14 to allow fix<N>():
  FixedInt operator() () const { return *this; }
 8003e36:	b480      	push	{r7}
 8003e38:	b083      	sub	sp, #12
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
 8003e3e:	bf00      	nop
 8003e40:	4618      	mov	r0, r3
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEEplILi1EEENS0_7AddExprIS5_NS0_9ValueExprINS3_8FixedIntIXT_EEEEEEESB_>:
  AddExpr<Derived,ValueExpr<internal::FixedInt<N> > > operator+(internal::FixedInt<N>) const
 8003e4c:	b5b0      	push	{r4, r5, r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	7039      	strb	r1, [r7, #0]
  { return AddExpr<Derived,ValueExpr<internal::FixedInt<N> > >(derived(), ValueExpr<internal::FixedInt<N> >()); }
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 fdb8 	bl	80049cc <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEE7derivedEv>
 8003e5c:	4604      	mov	r4, r0
 8003e5e:	f107 030c 	add.w	r3, r7, #12
 8003e62:	4618      	mov	r0, r3
 8003e64:	f000 fdbd 	bl	80049e2 <_ZN5Eigen8symbolic9ValueExprINS_8internal8FixedIntILi1EEEEC1Ev>
 8003e68:	f107 020c 	add.w	r2, r7, #12
 8003e6c:	f107 0308 	add.w	r3, r7, #8
 8003e70:	4621      	mov	r1, r4
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 fdc0 	bl	80049f8 <_ZN5Eigen8symbolic7AddExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEENS0_9ValueExprINS3_8FixedIntILi1EEEEEEC1ERKS5_RKS9_>
 8003e78:	bf00      	nop
 8003e7a:	4628      	mov	r0, r5
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bdb0      	pop	{r4, r5, r7, pc}

08003e82 <_ZN5Eigen8internal22ignore_unused_variableIiEEvRKT_>:
#endif

// Suppresses 'unused variable' warnings.
namespace Eigen {
  namespace internal {
    template<typename T> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void ignore_unused_variable(const T&) {}
 8003e82:	b480      	push	{r7}
 8003e84:	b083      	sub	sp, #12
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr

08003e96 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>:
      * a matrix to 0 is not supported.
      *
      * \sa resize(Index,Index)
      */
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    Matrix() : Base()
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b082      	sub	sp, #8
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f000 fdc2 	bl	8004a2a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
    {
      Base::_check_template_params();
 8003ea6:	f000 fdd0 	bl	8004a4a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      EIGEN_INITIALIZE_COEFFS_IF_THAT_OPTION_IS_ENABLED
    }
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4618      	mov	r0, r3
 8003eae:	3708      	adds	r7, #8
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>:
    Matrix() : Base()
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f000 fdd6 	bl	8004a70 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 8003ec4:	f000 fde4 	bl	8004a90 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
    }
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3708      	adds	r7, #8
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>:
    Matrix() : Base()
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b082      	sub	sp, #8
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f000 fdea 	bl	8004ab6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 8003ee2:	f000 fdf8 	bl	8004ad6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
    }
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3708      	adds	r7, #8
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <_ZN5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EEC1Ev>:
    Matrix() : Base()
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 fdfe 	bl	8004afc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
      Base::_check_template_params();
 8003f00:	f000 fe0c 	bl	8004b1c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE22_check_template_paramsEv>
    }
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4618      	mov	r0, r3
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>:
  * \note According the c++ standard, the argument expressions of this comma initializer are evaluated in arbitrary order.
  *
  * \sa CommaInitializer::finished(), class CommaInitializer
  */
template<typename Derived>
EIGEN_DEVICE_FUNC inline CommaInitializer<Derived> DenseBase<Derived>::operator<< (const Scalar& s)
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b084      	sub	sp, #16
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	60f8      	str	r0, [r7, #12]
 8003f16:	60b9      	str	r1, [r7, #8]
 8003f18:	607a      	str	r2, [r7, #4]
{
  return CommaInitializer<Derived>(*static_cast<Derived*>(this), s);
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	68b9      	ldr	r1, [r7, #8]
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f000 fe04 	bl	8004b2c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf>
}
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>:
  inline ~CommaInitializer()
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
    finished();
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 fe39 	bl	8004bac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv>
  }
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3708      	adds	r7, #8
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>:
  CommaInitializer& operator,(const Scalar& s)
 8003f44:	b590      	push	{r4, r7, lr}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
    if (m_col==m_xpr.cols())
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	689c      	ldr	r4, [r3, #8]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f000 fe5e 	bl	8004c18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	429c      	cmp	r4, r3
 8003f60:	bf0c      	ite	eq
 8003f62:	2301      	moveq	r3, #1
 8003f64:	2300      	movne	r3, #0
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d01d      	beq.n	8003fa8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x64>
      m_row+=m_currentBlockRows;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	441a      	add	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	605a      	str	r2, [r3, #4]
      m_col = 0;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	609a      	str	r2, [r3, #8]
      m_currentBlockRows = 1;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	60da      	str	r2, [r3, #12]
      eigen_assert(m_row<m_xpr.rows()
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685c      	ldr	r4, [r3, #4]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 fe4d 	bl	8004c2e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8003f94:	4603      	mov	r3, r0
 8003f96:	429c      	cmp	r4, r3
 8003f98:	db05      	blt.n	8003fa6 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x62>
 8003f9a:	4b1d      	ldr	r3, [pc, #116]	; (8004010 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xcc>)
 8003f9c:	4a1d      	ldr	r2, [pc, #116]	; (8004014 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd0>)
 8003f9e:	2148      	movs	r1, #72	; 0x48
 8003fa0:	481d      	ldr	r0, [pc, #116]	; (8004018 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd4>)
 8003fa2:	f019 fd5b 	bl	801da5c <__assert_func>
 8003fa6:	bf00      	nop
    eigen_assert(m_col<m_xpr.cols()
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689c      	ldr	r4, [r3, #8]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f000 fe31 	bl	8004c18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	429c      	cmp	r4, r3
 8003fba:	db05      	blt.n	8003fc8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x84>
 8003fbc:	4b17      	ldr	r3, [pc, #92]	; (800401c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd8>)
 8003fbe:	4a15      	ldr	r2, [pc, #84]	; (8004014 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd0>)
 8003fc0:	214b      	movs	r1, #75	; 0x4b
 8003fc2:	4815      	ldr	r0, [pc, #84]	; (8004018 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd4>)
 8003fc4:	f019 fd4a 	bl	801da5c <__assert_func>
 8003fc8:	bf00      	nop
    eigen_assert(m_currentBlockRows==1);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d005      	beq.n	8003fde <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x9a>
 8003fd2:	4b13      	ldr	r3, [pc, #76]	; (8004020 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xdc>)
 8003fd4:	4a0f      	ldr	r2, [pc, #60]	; (8004014 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd0>)
 8003fd6:	214d      	movs	r1, #77	; 0x4d
 8003fd8:	480f      	ldr	r0, [pc, #60]	; (8004018 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd4>)
 8003fda:	f019 fd3f 	bl	801da5c <__assert_func>
    m_xpr.coeffRef(m_row, m_col++) = s;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	461c      	mov	r4, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6858      	ldr	r0, [r3, #4]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	1c59      	adds	r1, r3, #1
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	6091      	str	r1, [r2, #8]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	4601      	mov	r1, r0
 8003ff6:	4620      	mov	r0, r4
 8003ff8:	f000 fe24 	bl	8004c44 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8coeffRefEii>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	6013      	str	r3, [r2, #0]
    return *this;
 8004004:	687b      	ldr	r3, [r7, #4]
  }
 8004006:	4618      	mov	r0, r3
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	bd90      	pop	{r4, r7, pc}
 800400e:	bf00      	nop
 8004010:	0801ead8 	.word	0x0801ead8
 8004014:	0801eb28 	.word	0x0801eb28
 8004018:	0801ebec 	.word	0x0801ebec
 800401c:	0801ec48 	.word	0x0801ec48
 8004020:	0801eca0 	.word	0x0801eca0

08004024 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>:
EIGEN_DEVICE_FUNC inline CommaInitializer<Derived> DenseBase<Derived>::operator<< (const Scalar& s)
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
  return CommaInitializer<Derived>(*static_cast<Derived*>(this), s);
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	68b9      	ldr	r1, [r7, #8]
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f000 fe1f 	bl	8004c78 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf>
}
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
  inline ~CommaInitializer()
 8004042:	b580      	push	{r7, lr}
 8004044:	b082      	sub	sp, #8
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
    finished();
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 fe54 	bl	8004cf8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv>
  }
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4618      	mov	r0, r3
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
	...

0800405c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>:
  CommaInitializer& operator,(const Scalar& s)
 800405c:	b590      	push	{r4, r7, lr}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
    if (m_col==m_xpr.cols())
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	689c      	ldr	r4, [r3, #8]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4618      	mov	r0, r3
 8004070:	f000 fe78 	bl	8004d64 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8004074:	4603      	mov	r3, r0
 8004076:	429c      	cmp	r4, r3
 8004078:	bf0c      	ite	eq
 800407a:	2301      	moveq	r3, #1
 800407c:	2300      	movne	r3, #0
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b00      	cmp	r3, #0
 8004082:	d01d      	beq.n	80040c0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x64>
      m_row+=m_currentBlockRows;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	441a      	add	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	605a      	str	r2, [r3, #4]
      m_col = 0;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	609a      	str	r2, [r3, #8]
      m_currentBlockRows = 1;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	60da      	str	r2, [r3, #12]
      eigen_assert(m_row<m_xpr.rows()
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685c      	ldr	r4, [r3, #4]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 fe67 	bl	8004d7a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80040ac:	4603      	mov	r3, r0
 80040ae:	429c      	cmp	r4, r3
 80040b0:	db05      	blt.n	80040be <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x62>
 80040b2:	4b1d      	ldr	r3, [pc, #116]	; (8004128 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xcc>)
 80040b4:	4a1d      	ldr	r2, [pc, #116]	; (800412c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd0>)
 80040b6:	2148      	movs	r1, #72	; 0x48
 80040b8:	481d      	ldr	r0, [pc, #116]	; (8004130 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd4>)
 80040ba:	f019 fccf 	bl	801da5c <__assert_func>
 80040be:	bf00      	nop
    eigen_assert(m_col<m_xpr.cols()
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689c      	ldr	r4, [r3, #8]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f000 fe4b 	bl	8004d64 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80040ce:	4603      	mov	r3, r0
 80040d0:	429c      	cmp	r4, r3
 80040d2:	db05      	blt.n	80040e0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x84>
 80040d4:	4b17      	ldr	r3, [pc, #92]	; (8004134 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd8>)
 80040d6:	4a15      	ldr	r2, [pc, #84]	; (800412c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd0>)
 80040d8:	214b      	movs	r1, #75	; 0x4b
 80040da:	4815      	ldr	r0, [pc, #84]	; (8004130 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd4>)
 80040dc:	f019 fcbe 	bl	801da5c <__assert_func>
 80040e0:	bf00      	nop
    eigen_assert(m_currentBlockRows==1);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d005      	beq.n	80040f6 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x9a>
 80040ea:	4b13      	ldr	r3, [pc, #76]	; (8004138 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xdc>)
 80040ec:	4a0f      	ldr	r2, [pc, #60]	; (800412c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd0>)
 80040ee:	214d      	movs	r1, #77	; 0x4d
 80040f0:	480f      	ldr	r0, [pc, #60]	; (8004130 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd4>)
 80040f2:	f019 fcb3 	bl	801da5c <__assert_func>
    m_xpr.coeffRef(m_row, m_col++) = s;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	461c      	mov	r4, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6858      	ldr	r0, [r3, #4]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	1c59      	adds	r1, r3, #1
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	6091      	str	r1, [r2, #8]
 800410a:	461a      	mov	r2, r3
 800410c:	4601      	mov	r1, r0
 800410e:	4620      	mov	r0, r4
 8004110:	f000 fe3e 	bl	8004d90 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8coeffRefEii>
 8004114:	4602      	mov	r2, r0
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6013      	str	r3, [r2, #0]
    return *this;
 800411c:	687b      	ldr	r3, [r7, #4]
  }
 800411e:	4618      	mov	r0, r3
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	bd90      	pop	{r4, r7, pc}
 8004126:	bf00      	nop
 8004128:	0801ead8 	.word	0x0801ead8
 800412c:	0801ecb8 	.word	0x0801ecb8
 8004130:	0801ebec 	.word	0x0801ebec
 8004134:	0801ec48 	.word	0x0801ec48
 8004138:	0801eca0 	.word	0x0801eca0

0800413c <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEElsERKf>:
EIGEN_DEVICE_FUNC inline CommaInitializer<Derived> DenseBase<Derived>::operator<< (const Scalar& s)
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
  return CommaInitializer<Derived>(*static_cast<Derived*>(this), s);
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	68b9      	ldr	r1, [r7, #8]
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 fe39 	bl	8004dc4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf>
}
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
  inline ~CommaInitializer()
 800415a:	b580      	push	{r7, lr}
 800415c:	b082      	sub	sp, #8
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
    finished();
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 fe6e 	bl	8004e44 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv>
  }
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4618      	mov	r0, r3
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEElsERKf>:
EIGEN_DEVICE_FUNC inline CommaInitializer<Derived> DenseBase<Derived>::operator<< (const Scalar& s)
 8004172:	b580      	push	{r7, lr}
 8004174:	b084      	sub	sp, #16
 8004176:	af00      	add	r7, sp, #0
 8004178:	60f8      	str	r0, [r7, #12]
 800417a:	60b9      	str	r1, [r7, #8]
 800417c:	607a      	str	r2, [r7, #4]
  return CommaInitializer<Derived>(*static_cast<Derived*>(this), s);
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	68b9      	ldr	r1, [r7, #8]
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 fe94 	bl	8004eb0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf>
}
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
  inline ~CommaInitializer()
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
    finished();
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 fec9 	bl	8004f30 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv>
  }
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4618      	mov	r0, r3
 80041a2:	3708      	adds	r7, #8
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf>:
  CommaInitializer& operator,(const Scalar& s)
 80041a8:	b590      	push	{r4, r7, lr}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
    if (m_col==m_xpr.cols())
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	689c      	ldr	r4, [r3, #8]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f000 feee 	bl	8004f9c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80041c0:	4603      	mov	r3, r0
 80041c2:	429c      	cmp	r4, r3
 80041c4:	bf0c      	ite	eq
 80041c6:	2301      	moveq	r3, #1
 80041c8:	2300      	movne	r3, #0
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d01d      	beq.n	800420c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x64>
      m_row+=m_currentBlockRows;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685a      	ldr	r2, [r3, #4]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	441a      	add	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	605a      	str	r2, [r3, #4]
      m_col = 0;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	609a      	str	r2, [r3, #8]
      m_currentBlockRows = 1;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	60da      	str	r2, [r3, #12]
      eigen_assert(m_row<m_xpr.rows()
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685c      	ldr	r4, [r3, #4]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 fedd 	bl	8004fb2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 80041f8:	4603      	mov	r3, r0
 80041fa:	429c      	cmp	r4, r3
 80041fc:	db05      	blt.n	800420a <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x62>
 80041fe:	4b1d      	ldr	r3, [pc, #116]	; (8004274 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xcc>)
 8004200:	4a1d      	ldr	r2, [pc, #116]	; (8004278 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd0>)
 8004202:	2148      	movs	r1, #72	; 0x48
 8004204:	481d      	ldr	r0, [pc, #116]	; (800427c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd4>)
 8004206:	f019 fc29 	bl	801da5c <__assert_func>
 800420a:	bf00      	nop
    eigen_assert(m_col<m_xpr.cols()
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689c      	ldr	r4, [r3, #8]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4618      	mov	r0, r3
 8004216:	f000 fec1 	bl	8004f9c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 800421a:	4603      	mov	r3, r0
 800421c:	429c      	cmp	r4, r3
 800421e:	db05      	blt.n	800422c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x84>
 8004220:	4b17      	ldr	r3, [pc, #92]	; (8004280 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd8>)
 8004222:	4a15      	ldr	r2, [pc, #84]	; (8004278 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd0>)
 8004224:	214b      	movs	r1, #75	; 0x4b
 8004226:	4815      	ldr	r0, [pc, #84]	; (800427c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd4>)
 8004228:	f019 fc18 	bl	801da5c <__assert_func>
 800422c:	bf00      	nop
    eigen_assert(m_currentBlockRows==1);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d005      	beq.n	8004242 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x9a>
 8004236:	4b13      	ldr	r3, [pc, #76]	; (8004284 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xdc>)
 8004238:	4a0f      	ldr	r2, [pc, #60]	; (8004278 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd0>)
 800423a:	214d      	movs	r1, #77	; 0x4d
 800423c:	480f      	ldr	r0, [pc, #60]	; (800427c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd4>)
 800423e:	f019 fc0d 	bl	801da5c <__assert_func>
    m_xpr.coeffRef(m_row, m_col++) = s;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	461c      	mov	r4, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6858      	ldr	r0, [r3, #4]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	1c59      	adds	r1, r3, #1
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	6091      	str	r1, [r2, #8]
 8004256:	461a      	mov	r2, r3
 8004258:	4601      	mov	r1, r0
 800425a:	4620      	mov	r0, r4
 800425c:	f000 feb4 	bl	8004fc8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8coeffRefEii>
 8004260:	4602      	mov	r2, r0
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	6013      	str	r3, [r2, #0]
    return *this;
 8004268:	687b      	ldr	r3, [r7, #4]
  }
 800426a:	4618      	mov	r0, r3
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	bd90      	pop	{r4, r7, pc}
 8004272:	bf00      	nop
 8004274:	0801ead8 	.word	0x0801ead8
 8004278:	0801ed7c 	.word	0x0801ed7c
 800427c:	0801ebec 	.word	0x0801ebec
 8004280:	0801ec48 	.word	0x0801ec48
 8004284:	0801eca0 	.word	0x0801eca0

08004288 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>:
      * \sa operator[](Index)
      */

    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE Scalar&
    operator()(Index row, Index col)
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
    {
      eigen_assert(row >= 0 && row < rows()
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	2b00      	cmp	r3, #0
 8004298:	db10      	blt.n	80042bc <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x34>
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f000 fead 	bl	8004ffa <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80042a0:	4602      	mov	r2, r0
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	4293      	cmp	r3, r2
 80042a6:	da09      	bge.n	80042bc <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x34>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	db06      	blt.n	80042bc <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x34>
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f000 feb3 	bl	800501a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80042b4:	4602      	mov	r2, r0
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4293      	cmp	r3, r2
 80042ba:	db06      	blt.n	80042ca <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x42>
 80042bc:	4b08      	ldr	r3, [pc, #32]	; (80042e0 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x58>)
 80042be:	4a09      	ldr	r2, [pc, #36]	; (80042e4 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x5c>)
 80042c0:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 80042c4:	4808      	ldr	r0, [pc, #32]	; (80042e8 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x60>)
 80042c6:	f019 fbc9 	bl	801da5c <__assert_func>
          && col >= 0 && col < cols());
      return coeffRef(row, col);
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	68b9      	ldr	r1, [r7, #8]
 80042ce:	68f8      	ldr	r0, [r7, #12]
 80042d0:	f000 fecc 	bl	800506c <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EE8coeffRefEii>
 80042d4:	4603      	mov	r3, r0
    }
 80042d6:	4618      	mov	r0, r3
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	0801ee40 	.word	0x0801ee40
 80042e4:	0801ee78 	.word	0x0801ee78
 80042e8:	0801ef64 	.word	0x0801ef64

080042ec <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS7_>:
  * on the behavior of CwiseNullaryOp.
  *
  * \sa class CwiseUnaryOp, class CwiseBinaryOp, DenseBase::NullaryExpr
  */
template<typename NullaryOp, typename PlainObjectType>
class CwiseNullaryOp : public internal::dense_xpr_base< CwiseNullaryOp<NullaryOp, PlainObjectType> >::type, internal::no_assignment_operator
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	1d1a      	adds	r2, r3, #4
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	3304      	adds	r3, #4
 80042fe:	4619      	mov	r1, r3
 8004300:	4610      	mov	r0, r2
 8004302:	f000 ffaf 	bl	8005264 <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKS2_>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4618      	mov	r0, r3
 800430a:	3708      	adds	r7, #8
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlIfEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNS6_18promote_scalar_argIfT_XsrNS6_14has_ReturnTypeINS_20ScalarBinaryOpTraitsIfS9_NS7_IfS9_EEEEEE5valueEE4typeEEEKS2_KNS6_19plain_constant_typeIS2_SG_E4typeEEERKS9_>:
  return CwiseBinaryOp<CustomBinaryOp, const Derived, const OtherDerived>(derived(), other.derived(), func);
}


#ifndef EIGEN_PARSED_BY_DOXYGEN
EIGEN_MAKE_SCALAR_BINARY_OP(operator*,product)
 8004310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004312:	b089      	sub	sp, #36	; 0x24
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
 800431c:	68b8      	ldr	r0, [r7, #8]
 800431e:	f000 fec8 	bl	80050b2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004322:	4604      	mov	r4, r0
 8004324:	68b8      	ldr	r0, [r7, #8]
 8004326:	f000 fec4 	bl	80050b2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800432a:	4603      	mov	r3, r0
 800432c:	4618      	mov	r0, r3
 800432e:	f000 fd24 	bl	8004d7a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8004332:	4605      	mov	r5, r0
 8004334:	68b8      	ldr	r0, [r7, #8]
 8004336:	f000 febc 	bl	80050b2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800433a:	4603      	mov	r3, r0
 800433c:	4618      	mov	r0, r3
 800433e:	f000 fd11 	bl	8004d64 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8004342:	4606      	mov	r6, r0
 8004344:	f107 0318 	add.w	r3, r7, #24
 8004348:	6879      	ldr	r1, [r7, #4]
 800434a:	4618      	mov	r0, r3
 800434c:	f000 febc 	bl	80050c8 <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKf>
 8004350:	f107 0318 	add.w	r3, r7, #24
 8004354:	f107 0010 	add.w	r0, r7, #16
 8004358:	4632      	mov	r2, r6
 800435a:	4629      	mov	r1, r5
 800435c:	f000 fed0 	bl	8005100 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_>
 8004360:	f107 031c 	add.w	r3, r7, #28
 8004364:	4618      	mov	r0, r3
 8004366:	f000 ff03 	bl	8005170 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800436a:	f107 031c 	add.w	r3, r7, #28
 800436e:	f107 0210 	add.w	r2, r7, #16
 8004372:	4621      	mov	r1, r4
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f000 ff35 	bl	80051e4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_>
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	3724      	adds	r7, #36	; 0x24
 800437e:	46bd      	mov	sp, r7
 8004380:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004382 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE9transposeEv>:
  *
  * \sa transposeInPlace(), adjoint() */
template<typename Derived>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
Transpose<Derived>
DenseBase<Derived>::transpose()
 8004382:	b580      	push	{r7, lr}
 8004384:	b084      	sub	sp, #16
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
{
  return TransposeReturnType(derived());
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 ff86 	bl	800529c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004390:	4602      	mov	r2, r0
 8004392:	f107 030c 	add.w	r3, r7, #12
 8004396:	4611      	mov	r1, r2
 8004398:	4618      	mov	r0, r3
 800439a:	f000 ffa2 	bl	80052e2 <_ZN5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_>
 800439e:	68fb      	ldr	r3, [r7, #12]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3710      	adds	r7, #16
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>:
  * CwiseBinaryOp types explicitly.
  *
  * \sa MatrixBase::binaryExpr(const MatrixBase<OtherDerived> &,const CustomBinaryOp &) const, class CwiseUnaryOp, class CwiseNullaryOp
  */
template<typename BinaryOp, typename LhsType, typename RhsType>
class CwiseBinaryOp :
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	601a      	str	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	1d1a      	adds	r2, r3, #4
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	3304      	adds	r3, #4
 80043c2:	4619      	mov	r1, r3
 80043c4:	4610      	mov	r0, r2
 80043c6:	f7ff ff91 	bl	80042ec <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS7_>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f103 020c 	add.w	r2, r3, #12
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	330c      	adds	r3, #12
 80043d4:	4619      	mov	r1, r3
 80043d6:	4610      	mov	r0, r2
 80043d8:	f000 ff54 	bl	8005284 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4618      	mov	r0, r3
 80043e0:	3708      	adds	r7, #8
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEmlINS_9TransposeIS6_EEEEKNS_7ProductISD_T_Li0EEERKNS0_ISJ_EE>:
  */
template<typename Derived>
template<typename OtherDerived>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
const Product<Derived, OtherDerived>
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 80043e6:	b590      	push	{r4, r7, lr}
 80043e8:	b085      	sub	sp, #20
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	60f8      	str	r0, [r7, #12]
 80043ee:	60b9      	str	r1, [r7, #8]
 80043f0:	607a      	str	r2, [r7, #4]
  EIGEN_STATIC_ASSERT(ProductIsValid || SameSizes, INVALID_MATRIX_PRODUCT)
#ifdef EIGEN_DEBUG_PRODUCT
  internal::product_type<Derived,OtherDerived>::debug();
#endif

  return Product<Derived, OtherDerived>(derived(), other.derived());
 80043f2:	68b8      	ldr	r0, [r7, #8]
 80043f4:	f000 ff85 	bl	8005302 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE7derivedEv>
 80043f8:	4604      	mov	r4, r0
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 ff8c 	bl	8005318 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 8004400:	4603      	mov	r3, r0
 8004402:	461a      	mov	r2, r3
 8004404:	4621      	mov	r1, r4
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f000 ffd2 	bl	80053b0 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_>
}
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	3714      	adds	r7, #20
 8004410:	46bd      	mov	sp, r7
 8004412:	bd90      	pop	{r4, r7, pc}

08004414 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS0_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS5_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6839      	ldr	r1, [r7, #0]
 8004422:	4618      	mov	r0, r3
 8004424:	f000 fff4 	bl	8005410 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
 8004428:	4603      	mov	r3, r0
    }
 800442a:	4618      	mov	r0, r3
 800442c:	3708      	adds	r7, #8
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004432:	b590      	push	{r4, r7, lr}
 8004434:	b085      	sub	sp, #20
 8004436:	af00      	add	r7, sp, #0
 8004438:	60f8      	str	r0, [r7, #12]
 800443a:	60b9      	str	r1, [r7, #8]
 800443c:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 800443e:	68b8      	ldr	r0, [r7, #8]
 8004440:	f000 ffff 	bl	8005442 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004444:	4604      	mov	r4, r0
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 fe33 	bl	80050b2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800444c:	4603      	mov	r3, r0
 800444e:	461a      	mov	r2, r3
 8004450:	4621      	mov	r1, r4
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f001 f824 	bl	80054a0 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_>
}
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	3714      	adds	r7, #20
 800445c:	46bd      	mov	sp, r7
 800445e:	bd90      	pop	{r4, r7, pc}

08004460 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEES1_Li0EEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6839      	ldr	r1, [r7, #0]
 800446e:	4618      	mov	r0, r3
 8004470:	f001 f844 	bl	80054fc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
 8004474:	4603      	mov	r3, r0
    }
 8004476:	4618      	mov	r0, r3
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlIS2_EEKNS_7ProductIS2_T_Li0EEERKNS0_IS6_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 800447e:	b590      	push	{r4, r7, lr}
 8004480:	b085      	sub	sp, #20
 8004482:	af00      	add	r7, sp, #0
 8004484:	60f8      	str	r0, [r7, #12]
 8004486:	60b9      	str	r1, [r7, #8]
 8004488:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 800448a:	68b8      	ldr	r0, [r7, #8]
 800448c:	f000 ffd9 	bl	8005442 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004490:	4604      	mov	r4, r0
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 ffd5 	bl	8005442 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004498:	4603      	mov	r3, r0
 800449a:	461a      	mov	r2, r3
 800449c:	4621      	mov	r1, r4
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f001 f86a 	bl	8005578 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_>
}
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	3714      	adds	r7, #20
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd90      	pop	{r4, r7, pc}

080044ac <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE9transposeEv>:
DenseBase<Derived>::transpose()
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  return TransposeReturnType(derived());
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f001 f88d 	bl	80055d4 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80044ba:	4602      	mov	r2, r0
 80044bc:	f107 030c 	add.w	r3, r7, #12
 80044c0:	4611      	mov	r1, r2
 80044c2:	4618      	mov	r0, r3
 80044c4:	f001 f8a9 	bl	800561a <_ZN5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_>
 80044c8:	68fb      	ldr	r3, [r7, #12]
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEmlINS_9TransposeIS3_EEEEKNS1_IS4_T_Li0EEERKNS0_IS9_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 80044d2:	b590      	push	{r4, r7, lr}
 80044d4:	b085      	sub	sp, #20
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	60f8      	str	r0, [r7, #12]
 80044da:	60b9      	str	r1, [r7, #8]
 80044dc:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 80044de:	68b8      	ldr	r0, [r7, #8]
 80044e0:	f001 f8ab 	bl	800563a <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE7derivedEv>
 80044e4:	4604      	mov	r4, r0
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f001 f8b2 	bl	8005650 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 80044ec:	4603      	mov	r3, r0
 80044ee:	461a      	mov	r2, r3
 80044f0:	4621      	mov	r1, r4
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f001 f8f8 	bl	80056e8 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_>
}
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd90      	pop	{r4, r7, pc}

08004500 <_ZNK5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEplIS3_EEKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIfNSB_6traitsIT_E6ScalarEEEKS7_KSE_EERKNS0_ISE_EE>:
EIGEN_MAKE_CWISE_BINARY_OP(operator+,sum)
 8004500:	b5b0      	push	{r4, r5, r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
 800450c:	68b8      	ldr	r0, [r7, #8]
 800450e:	f001 f91b 	bl	8005748 <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEE7derivedEv>
 8004512:	4604      	mov	r4, r0
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 ff94 	bl	8005442 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800451a:	4605      	mov	r5, r0
 800451c:	f107 0314 	add.w	r3, r7, #20
 8004520:	4618      	mov	r0, r3
 8004522:	f001 f91c 	bl	800575e <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8004526:	f107 0314 	add.w	r3, r7, #20
 800452a:	462a      	mov	r2, r5
 800452c:	4621      	mov	r1, r4
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f001 f954 	bl	80057dc <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_>
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	3718      	adds	r7, #24
 8004538:	46bd      	mov	sp, r7
 800453a:	bdb0      	pop	{r4, r5, r7, pc}

0800453c <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS7_IS1_S1_Li0EEENS_9TransposeIS1_EELi0EEEKS1_EEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6839      	ldr	r1, [r7, #0]
 800454a:	4618      	mov	r0, r3
 800454c:	f001 f992 	bl	8005874 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_IS2_S2_Li0EEENS_9TransposeIS2_EELi0EEEKS2_EEEERS2_RKNS_9DenseBaseIT_EE>
 8004550:	4603      	mov	r3, r0
    }
 8004552:	4618      	mov	r0, r3
 8004554:	3708      	adds	r7, #8
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>:
DenseBase<Derived>::transpose()
 800455a:	b580      	push	{r7, lr}
 800455c:	b084      	sub	sp, #16
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  return TransposeReturnType(derived());
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f001 f99f 	bl	80058a6 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8004568:	4602      	mov	r2, r0
 800456a:	f107 030c 	add.w	r3, r7, #12
 800456e:	4611      	mov	r1, r2
 8004570:	4618      	mov	r0, r3
 8004572:	f001 f9bb 	bl	80058ec <_ZN5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_>
 8004576:	68fb      	ldr	r3, [r7, #12]
}
 8004578:	4618      	mov	r0, r3
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlINS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS9_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004580:	b590      	push	{r4, r7, lr}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 800458c:	68b8      	ldr	r0, [r7, #8]
 800458e:	f000 ff58 	bl	8005442 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004592:	4604      	mov	r4, r0
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f001 f9b9 	bl	800590c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 800459a:	4603      	mov	r3, r0
 800459c:	461a      	mov	r2, r3
 800459e:	4621      	mov	r1, r4
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f001 f9f1 	bl	8005988 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_>
}
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	3714      	adds	r7, #20
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd90      	pop	{r4, r7, pc}

080045ae <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEmlINS1_IfLi3ELi3ELi0ELi3ELi3EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 80045ae:	b590      	push	{r4, r7, lr}
 80045b0:	b085      	sub	sp, #20
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	60f8      	str	r0, [r7, #12]
 80045b6:	60b9      	str	r1, [r7, #8]
 80045b8:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 80045ba:	68b8      	ldr	r0, [r7, #8]
 80045bc:	f001 fa12 	bl	80059e4 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 80045c0:	4604      	mov	r4, r0
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 ff3d 	bl	8005442 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80045c8:	4603      	mov	r3, r0
 80045ca:	461a      	mov	r2, r3
 80045cc:	4621      	mov	r1, r4
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f001 fa38 	bl	8005a44 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_>
}
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	3714      	adds	r7, #20
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd90      	pop	{r4, r7, pc}

080045dc <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEmlINS_9TransposeIS3_EEEEKNS1_IS5_T_Li0EEERKNS0_ISA_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 80045dc:	b590      	push	{r4, r7, lr}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 80045e8:	68b8      	ldr	r0, [r7, #8]
 80045ea:	f001 fa59 	bl	8005aa0 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE7derivedEv>
 80045ee:	4604      	mov	r4, r0
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f001 f98b 	bl	800590c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 80045f6:	4603      	mov	r3, r0
 80045f8:	461a      	mov	r2, r3
 80045fa:	4621      	mov	r1, r4
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f001 fa8d 	bl	8005b1c <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_>
}
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	3714      	adds	r7, #20
 8004606:	46bd      	mov	sp, r7
 8004608:	bd90      	pop	{r4, r7, pc}

0800460a <_ZNK5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEplINS2_IfLi1ELi1ELi0ELi1ELi1EEEEEKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>:
 800460a:	b5b0      	push	{r4, r5, r7, lr}
 800460c:	b086      	sub	sp, #24
 800460e:	af00      	add	r7, sp, #0
 8004610:	60f8      	str	r0, [r7, #12]
 8004612:	60b9      	str	r1, [r7, #8]
 8004614:	607a      	str	r2, [r7, #4]
 8004616:	68b8      	ldr	r0, [r7, #8]
 8004618:	f001 fab0 	bl	8005b7c <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEE7derivedEv>
 800461c:	4604      	mov	r4, r0
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f001 fab7 	bl	8005b92 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 8004624:	4605      	mov	r5, r0
 8004626:	f107 0314 	add.w	r3, r7, #20
 800462a:	4618      	mov	r0, r3
 800462c:	f001 f897 	bl	800575e <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8004630:	f107 0314 	add.w	r3, r7, #20
 8004634:	462a      	mov	r2, r5
 8004636:	4621      	mov	r1, r4
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f001 faff 	bl	8005c3c <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_>
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	3718      	adds	r7, #24
 8004642:	46bd      	mov	sp, r7
 8004644:	bdb0      	pop	{r4, r5, r7, pc}

08004646 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>:
  inline const Derived& const_derived() const
  { return *static_cast<const Derived*>(this); }

  /** \returns the number of rows. \sa cols(), RowsAtCompileTime */
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8004646:	b580      	push	{r7, lr}
 8004648:	b082      	sub	sp, #8
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f001 fb34 	bl	8005cbc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>
 8004654:	4603      	mov	r3, r0
 8004656:	4618      	mov	r0, r3
 8004658:	f001 fb3b 	bl	8005cd2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800465c:	4603      	mov	r3, r0
 800465e:	4618      	mov	r0, r3
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>:
  /** \returns the number of columns. \sa rows(), ColsAtCompileTime*/
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8004666:	b580      	push	{r7, lr}
 8004668:	b082      	sub	sp, #8
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f001 fb24 	bl	8005cbc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>
 8004674:	4603      	mov	r3, r0
 8004676:	4618      	mov	r0, r3
 8004678:	f001 fb38 	bl	8005cec <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800467c:	4603      	mov	r3, r0
 800467e:	4618      	mov	r0, r3
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKSF_>:
 8004686:	b580      	push	{r7, lr}
 8004688:	b082      	sub	sp, #8
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
 800468e:	6039      	str	r1, [r7, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	683a      	ldr	r2, [r7, #0]
 8004694:	ca07      	ldmia	r2, {r0, r1, r2}
 8004696:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	68da      	ldr	r2, [r3, #12]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	60da      	str	r2, [r3, #12]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f103 0210 	add.w	r2, r3, #16
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	3310      	adds	r3, #16
 80046ac:	4619      	mov	r1, r3
 80046ae:	4610      	mov	r0, r2
 80046b0:	f001 f8d4 	bl	800585c <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4618      	mov	r0, r3
 80046b8:	3708      	adds	r7, #8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
	...

080046c0 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv>:
  *
  * \sa computeInverseAndDetWithCheck()
  */
template<typename Derived>
EIGEN_DEVICE_FUNC
inline const Inverse<Derived> MatrixBase<Derived>::inverse() const
 80046c0:	b590      	push	{r4, r7, lr}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
{
  EIGEN_STATIC_ASSERT(!NumTraits<Scalar>::IsInteger,THIS_FUNCTION_IS_NOT_FOR_INTEGER_NUMERIC_TYPES)
  eigen_assert(rows() == cols());
 80046ca:	6838      	ldr	r0, [r7, #0]
 80046cc:	f7ff ffbb 	bl	8004646 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>
 80046d0:	4604      	mov	r4, r0
 80046d2:	6838      	ldr	r0, [r7, #0]
 80046d4:	f7ff ffc7 	bl	8004666 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>
 80046d8:	4603      	mov	r3, r0
 80046da:	429c      	cmp	r4, r3
 80046dc:	d006      	beq.n	80046ec <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv+0x2c>
 80046de:	4b09      	ldr	r3, [pc, #36]	; (8004704 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv+0x44>)
 80046e0:	4a09      	ldr	r2, [pc, #36]	; (8004708 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv+0x48>)
 80046e2:	f240 115f 	movw	r1, #351	; 0x15f
 80046e6:	4809      	ldr	r0, [pc, #36]	; (800470c <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv+0x4c>)
 80046e8:	f019 f9b8 	bl	801da5c <__assert_func>
  return Inverse<Derived>(derived());
 80046ec:	6838      	ldr	r0, [r7, #0]
 80046ee:	f001 fae5 	bl	8005cbc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>
 80046f2:	4603      	mov	r3, r0
 80046f4:	4619      	mov	r1, r3
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f001 fb1d 	bl	8005d36 <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSG_>
}
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	bd90      	pop	{r4, r7, pc}
 8004704:	0801efc0 	.word	0x0801efc0
 8004708:	0801efd4 	.word	0x0801efd4
 800470c:	0801f128 	.word	0x0801f128

08004710 <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSH_>:
  * This class represents an abstract expression of A.inverse()
  * and most of the time this is the only way it is used.
  *
  */
template<typename XprType>
class Inverse : public InverseImpl<XprType,typename internal::traits<XprType>::StorageKind>
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	683a      	ldr	r2, [r7, #0]
 800471e:	4611      	mov	r1, r2
 8004720:	4618      	mov	r0, r3
 8004722:	f7ff ffb0 	bl	8004686 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKSF_>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4618      	mov	r0, r3
 800472a:	3708      	adds	r7, #8
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEmlINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEEKNS1_IS7_T_Li0EEERKNS0_ISM_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004730:	b590      	push	{r4, r7, lr}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 800473c:	68b8      	ldr	r0, [r7, #8]
 800473e:	f001 fb0c 	bl	8005d5a <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE7derivedEv>
 8004742:	4604      	mov	r4, r0
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f001 fb13 	bl	8005d70 <_ZNK5Eigen9EigenBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEE7derivedEv>
 800474a:	4603      	mov	r3, r0
 800474c:	461a      	mov	r2, r3
 800474e:	4621      	mov	r1, r4
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f001 fb57 	bl	8005e04 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_>
}
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	3714      	adds	r7, #20
 800475a:	46bd      	mov	sp, r7
 800475c:	bd90      	pop	{r4, r7, pc}

0800475e <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_7ProductINS3_INS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS3_INS3_IS6_S4_Li0EEES7_Li0EEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 800475e:	b580      	push	{r7, lr}
 8004760:	b082      	sub	sp, #8
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
 8004766:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6839      	ldr	r1, [r7, #0]
 800476c:	4618      	mov	r0, r3
 800476e:	f001 fb7b 	bl	8005e68 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
 8004772:	4603      	mov	r3, r0
    }
 8004774:	4618      	mov	r0, r3
 8004776:	3708      	adds	r7, #8
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEmlINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 800477c:	b590      	push	{r4, r7, lr}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004788:	68b8      	ldr	r0, [r7, #8]
 800478a:	f001 f92b 	bl	80059e4 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 800478e:	4604      	mov	r4, r0
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 fc8e 	bl	80050b2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004796:	4603      	mov	r3, r0
 8004798:	461a      	mov	r2, r3
 800479a:	4621      	mov	r1, r4
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f001 fba1 	bl	8005ee4 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_>
}
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	3714      	adds	r7, #20
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd90      	pop	{r4, r7, pc}

080047aa <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEmiINS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEKNS_13CwiseBinaryOpINS_8internal20scalar_difference_opIfNSA_6traitsIT_E6ScalarEEEKS2_KSD_EERKNS0_ISD_EE>:
EIGEN_MAKE_CWISE_BINARY_OP(operator-,difference)
 80047aa:	b5b0      	push	{r4, r5, r7, lr}
 80047ac:	b086      	sub	sp, #24
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	60f8      	str	r0, [r7, #12]
 80047b2:	60b9      	str	r1, [r7, #8]
 80047b4:	607a      	str	r2, [r7, #4]
 80047b6:	68b8      	ldr	r0, [r7, #8]
 80047b8:	f001 f9eb 	bl	8005b92 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 80047bc:	4604      	mov	r4, r0
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f001 fbbe 	bl	8005f40 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>
 80047c4:	4605      	mov	r5, r0
 80047c6:	f107 0314 	add.w	r3, r7, #20
 80047ca:	4618      	mov	r0, r3
 80047cc:	f001 fbc3 	bl	8005f56 <_ZN5Eigen8internal20scalar_difference_opIffEC1Ev>
 80047d0:	f107 0314 	add.w	r3, r7, #20
 80047d4:	462a      	mov	r2, r5
 80047d6:	4621      	mov	r1, r4
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f001 fbfb 	bl	8005fd4 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_>
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	3718      	adds	r7, #24
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bdb0      	pop	{r4, r5, r7, pc}

080047e6 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERKSC_>:
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b082      	sub	sp, #8
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
 80047ee:	6039      	str	r1, [r7, #0]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	1d1a      	adds	r2, r3, #4
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	3304      	adds	r3, #4
 8004800:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004804:	e882 0003 	stmia.w	r2, {r0, r1}
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f103 020c 	add.w	r2, r3, #12
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	330c      	adds	r3, #12
 8004812:	4619      	mov	r1, r3
 8004814:	4610      	mov	r0, r2
 8004816:	f001 fc1f 	bl	8006058 <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4618      	mov	r0, r3
 800481e:	3708      	adds	r7, #8
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEEEEKNSB_IS2_T_Li0EEERKNS0_ISG_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004824:	b590      	push	{r4, r7, lr}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004830:	68b8      	ldr	r0, [r7, #8]
 8004832:	f000 fc3e 	bl	80050b2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004836:	4604      	mov	r4, r0
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f001 fc19 	bl	8006070 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEE7derivedEv>
 800483e:	4603      	mov	r3, r0
 8004840:	461a      	mov	r2, r3
 8004842:	4621      	mov	r1, r4
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	f001 fc51 	bl	80060ec <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_>
}
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	3714      	adds	r7, #20
 800484e:	46bd      	mov	sp, r7
 8004850:	bd90      	pop	{r4, r7, pc}

08004852 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKSD_>:
  * The other template parameters are:
  * \tparam Option     can be DefaultProduct, AliasFreeProduct, or LazyProduct
  *
  */
template<typename _Lhs, typename _Rhs, int Option>
class Product : public ProductImpl<_Lhs,_Rhs,Option,
 8004852:	b580      	push	{r7, lr}
 8004854:	b082      	sub	sp, #8
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
 800485a:	6039      	str	r1, [r7, #0]
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	601a      	str	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	1d1a      	adds	r2, r3, #4
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	3304      	adds	r3, #4
 800486c:	4619      	mov	r1, r3
 800486e:	4610      	mov	r0, r2
 8004870:	f7ff ffb9 	bl	80047e6 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERKSC_>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4618      	mov	r0, r3
 8004878:	3708      	adds	r7, #8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEplINS_7ProductIS2_NS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS5_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEKNS6_INS7_13scalar_sum_opIfNS7_6traitsIT_E6ScalarEEEKS2_KSJ_EERKNS0_ISJ_EE>:
EIGEN_MAKE_CWISE_BINARY_OP(operator+,sum)
 800487e:	b5b0      	push	{r4, r5, r7, lr}
 8004880:	b086      	sub	sp, #24
 8004882:	af00      	add	r7, sp, #0
 8004884:	60f8      	str	r0, [r7, #12]
 8004886:	60b9      	str	r1, [r7, #8]
 8004888:	607a      	str	r2, [r7, #4]
 800488a:	68b8      	ldr	r0, [r7, #8]
 800488c:	f000 fc11 	bl	80050b2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004890:	4604      	mov	r4, r0
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f001 fc5a 	bl	800614c <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEE7derivedEv>
 8004898:	4605      	mov	r5, r0
 800489a:	f107 0314 	add.w	r3, r7, #20
 800489e:	4618      	mov	r0, r3
 80048a0:	f000 ff5d 	bl	800575e <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 80048a4:	f107 0314 	add.w	r3, r7, #20
 80048a8:	462a      	mov	r2, r5
 80048aa:	4621      	mov	r1, r4
 80048ac:	68f8      	ldr	r0, [r7, #12]
 80048ae:	f001 fc8d 	bl	80061cc <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_>
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	3718      	adds	r7, #24
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bdb0      	pop	{r4, r5, r7, pc}

080048ba <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS1_KNS_7ProductIS1_NS3_INS4_20scalar_difference_opIffEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEES1_Li0EEEEELi0EEEEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b082      	sub	sp, #8
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
 80048c2:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6839      	ldr	r1, [r7, #0]
 80048c8:	4618      	mov	r0, r3
 80048ca:	f001 fcbf 	bl	800624c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>
 80048ce:	4603      	mov	r3, r0
    }
 80048d0:	4618      	mov	r0, r3
 80048d2:	3708      	adds	r7, #8
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 80048d8:	b590      	push	{r4, r7, lr}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 80048e4:	68b8      	ldr	r0, [r7, #8]
 80048e6:	f000 fbe4 	bl	80050b2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80048ea:	4604      	mov	r4, r0
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f001 f879 	bl	80059e4 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 80048f2:	4603      	mov	r3, r0
 80048f4:	461a      	mov	r2, r3
 80048f6:	4621      	mov	r1, r4
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f001 fce5 	bl	80062c8 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_>
}
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	bd90      	pop	{r4, r7, pc}

08004906 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmiINS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEKNS_13CwiseBinaryOpINS_8internal20scalar_difference_opIfNSA_6traitsIT_E6ScalarEEEKS2_KSD_EERKNS0_ISD_EE>:
EIGEN_MAKE_CWISE_BINARY_OP(operator-,difference)
 8004906:	b5b0      	push	{r4, r5, r7, lr}
 8004908:	b086      	sub	sp, #24
 800490a:	af00      	add	r7, sp, #0
 800490c:	60f8      	str	r0, [r7, #12]
 800490e:	60b9      	str	r1, [r7, #8]
 8004910:	607a      	str	r2, [r7, #4]
 8004912:	68b8      	ldr	r0, [r7, #8]
 8004914:	f000 fd95 	bl	8005442 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004918:	4604      	mov	r4, r0
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f001 fd02 	bl	8006324 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE7derivedEv>
 8004920:	4605      	mov	r5, r0
 8004922:	f107 0314 	add.w	r3, r7, #20
 8004926:	4618      	mov	r0, r3
 8004928:	f001 fb15 	bl	8005f56 <_ZN5Eigen8internal20scalar_difference_opIffEC1Ev>
 800492c:	f107 0314 	add.w	r3, r7, #20
 8004930:	462a      	mov	r2, r5
 8004932:	4621      	mov	r1, r4
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f001 fd35 	bl	80063a4 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_>
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	3718      	adds	r7, #24
 800493e:	46bd      	mov	sp, r7
 8004940:	bdb0      	pop	{r4, r5, r7, pc}

08004942 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERKSC_>:
 8004942:	b580      	push	{r7, lr}
 8004944:	b082      	sub	sp, #8
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
 800494a:	6039      	str	r1, [r7, #0]
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	1d1a      	adds	r2, r3, #4
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	3304      	adds	r3, #4
 800495c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004960:	e882 0003 	stmia.w	r2, {r0, r1}
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f103 020c 	add.w	r2, r3, #12
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	330c      	adds	r3, #12
 800496e:	4619      	mov	r1, r3
 8004970:	4610      	mov	r0, r2
 8004972:	f001 fb71 	bl	8006058 <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4618      	mov	r0, r3
 800497a:	3708      	adds	r7, #8
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEmlIS6_EEKNS8_ISD_T_Li0EEERKNS0_ISG_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004980:	b590      	push	{r4, r7, lr}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 800498c:	68b8      	ldr	r0, [r7, #8]
 800498e:	f001 fd4b 	bl	8006428 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE7derivedEv>
 8004992:	4604      	mov	r4, r0
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 fd54 	bl	8005442 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800499a:	4603      	mov	r3, r0
 800499c:	461a      	mov	r2, r3
 800499e:	4621      	mov	r1, r4
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f001 fd7f 	bl	80064a4 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_>
}
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	3714      	adds	r7, #20
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd90      	pop	{r4, r7, pc}

080049ae <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS3_INS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES1_Li0EEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b082      	sub	sp, #8
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
 80049b6:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6839      	ldr	r1, [r7, #0]
 80049bc:	4618      	mov	r0, r3
 80049be:	f001 fd9f 	bl	8006500 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
 80049c2:	4603      	mov	r3, r0
    }
 80049c4:	4618      	mov	r0, r3
 80049c6:	3708      	adds	r7, #8
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4618      	mov	r0, r3
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <_ZN5Eigen8symbolic9ValueExprINS_8internal8FixedIntILi1EEEEC1Ev>:
  ValueExpr() {}
 80049e2:	b480      	push	{r7}
 80049e4:	b083      	sub	sp, #12
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4618      	mov	r0, r3
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <_ZN5Eigen8symbolic7AddExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEENS0_9ValueExprINS3_8FixedIntILi1EEEEEEC1ERKS5_RKS9_>:

template<typename Arg0, typename Arg1>
class AddExpr : public BaseExpr<AddExpr<Arg0,Arg1> >
{
public:
  AddExpr(const Arg0& arg0, const Arg1& arg1) : m_arg0(arg0), m_arg1(arg1) {}
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	4618      	mov	r0, r3
 8004a08:	3714      	adds	r7, #20
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr

08004a12 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>:
    EIGEN_MATRIX_FUNCTION_1(MatrixPowerReturnValue,        pow, power to \c p, const RealScalar& p)
    EIGEN_MATRIX_FUNCTION_1(MatrixComplexPowerReturnValue, pow, power to \c p, const std::complex<RealScalar>& p)

  protected:
    EIGEN_DEFAULT_COPY_CONSTRUCTOR(MatrixBase)
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(MatrixBase)
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b082      	sub	sp, #8
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f001 fd89 	bl	8006532 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4618      	mov	r0, r3
 8004a24:	3708      	adds	r7, #8
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>:
    // Prevent user from trying to instantiate PlainObjectBase objects
    // by making all its constructor protected. See bug 1074.
  protected:

    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b082      	sub	sp, #8
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f7ff ffed 	bl	8004a12 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f001 fd84 	bl	8006548 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EEC1Ev>
    {
//       _check_template_params();
//       EIGEN_INITIALIZE_COEFFS_IF_THAT_OPTION_IS_ENABLED
    }
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4618      	mov	r0, r3
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    void swap(DenseBase<OtherDerived> const & other)
    { Base::swap(other.derived()); }

    EIGEN_DEVICE_FUNC
    static EIGEN_STRONG_INLINE void _check_template_params()
 8004a4a:	b480      	push	{r7}
 8004a4c:	af00      	add	r7, sp, #0
                        && ((MaxColsAtCompileTime == Dynamic) || (MaxColsAtCompileTime >= 0))
                        && (MaxRowsAtCompileTime == RowsAtCompileTime || RowsAtCompileTime==Dynamic)
                        && (MaxColsAtCompileTime == ColsAtCompileTime || ColsAtCompileTime==Dynamic)
                        && (Options & (DontAlign|RowMajor)) == Options),
        INVALID_MATRIX_TEMPLATE_PARAMETERS)
    }
 8004a4e:	bf00      	nop
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f001 fd7e 	bl	8006562 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3708      	adds	r7, #8
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f7ff ffed 	bl	8004a58 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4618      	mov	r0, r3
 8004a82:	f001 fd79 	bl	8006578 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EEC1Ev>
    }
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3708      	adds	r7, #8
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>:
    static EIGEN_STRONG_INLINE void _check_template_params()
 8004a90:	b480      	push	{r7}
 8004a92:	af00      	add	r7, sp, #0
    }
 8004a94:	bf00      	nop
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>:
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b082      	sub	sp, #8
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f001 fd73 	bl	8006592 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3708      	adds	r7, #8
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>:
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b082      	sub	sp, #8
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7ff ffed 	bl	8004a9e <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f001 fd6e 	bl	80065a8 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EEC1Ev>
    }
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>:
    static EIGEN_STRONG_INLINE void _check_template_params()
 8004ad6:	b480      	push	{r7}
 8004ad8:	af00      	add	r7, sp, #0
    }
 8004ada:	bf00      	nop
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f001 fd68 	bl	80065c2 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4618      	mov	r0, r3
 8004af6:	3708      	adds	r7, #8
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f7ff ffed 	bl	8004ae4 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f001 fd63 	bl	80065d8 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EEC1Ev>
    }
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4618      	mov	r0, r3
 8004b16:	3708      	adds	r7, #8
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE22_check_template_paramsEv>:
    static EIGEN_STRONG_INLINE void _check_template_params()
 8004b1c:	b480      	push	{r7}
 8004b1e:	af00      	add	r7, sp, #0
    }
 8004b20:	bf00      	nop
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
	...

08004b2c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf>:
  inline CommaInitializer(XprType& xpr, const Scalar& s)
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	68ba      	ldr	r2, [r7, #8]
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	605a      	str	r2, [r3, #4]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2201      	movs	r2, #1
 8004b48:	609a      	str	r2, [r3, #8]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	60da      	str	r2, [r3, #12]
    eigen_assert(m_xpr.rows() > 0 && m_xpr.cols() > 0
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f000 f86a 	bl	8004c2e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	dd07      	ble.n	8004b70 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x44>
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f000 f857 	bl	8004c18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	dc05      	bgt.n	8004b7c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x50>
 8004b70:	4b0b      	ldr	r3, [pc, #44]	; (8004ba0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x74>)
 8004b72:	4a0c      	ldr	r2, [pc, #48]	; (8004ba4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x78>)
 8004b74:	2124      	movs	r1, #36	; 0x24
 8004b76:	480c      	ldr	r0, [pc, #48]	; (8004ba8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x7c>)
 8004b78:	f018 ff70 	bl	801da5c <__assert_func>
 8004b7c:	bf00      	nop
    m_xpr.coeffRef(0,0) = s;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2200      	movs	r2, #0
 8004b84:	2100      	movs	r1, #0
 8004b86:	4618      	mov	r0, r3
 8004b88:	f000 f85c 	bl	8004c44 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8coeffRefEii>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	6013      	str	r3, [r2, #0]
  }
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	4618      	mov	r0, r3
 8004b98:	3710      	adds	r7, #16
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	0801f180 	.word	0x0801f180
 8004ba4:	0801f1dc 	.word	0x0801f1dc
 8004ba8:	0801ebec 	.word	0x0801ebec

08004bac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv>:
  inline XprType& finished() {
 8004bac:	b590      	push	{r4, r7, lr}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	18d4      	adds	r4, r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 f833 	bl	8004c2e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	429c      	cmp	r4, r3
 8004bcc:	d007      	beq.n	8004bde <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x32>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 f820 	bl	8004c18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d109      	bne.n	8004bf2 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x46>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	689c      	ldr	r4, [r3, #8]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f000 f816 	bl	8004c18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8004bec:	4603      	mov	r3, r0
 8004bee:	429c      	cmp	r4, r3
 8004bf0:	d005      	beq.n	8004bfe <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x52>
 8004bf2:	4b06      	ldr	r3, [pc, #24]	; (8004c0c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x60>)
 8004bf4:	4a06      	ldr	r2, [pc, #24]	; (8004c10 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x64>)
 8004bf6:	217a      	movs	r1, #122	; 0x7a
 8004bf8:	4806      	ldr	r0, [pc, #24]	; (8004c14 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x68>)
 8004bfa:	f018 ff2f 	bl	801da5c <__assert_func>
 8004bfe:	bf00      	nop
      return m_xpr;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
  }
 8004c04:	4618      	mov	r0, r3
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd90      	pop	{r4, r7, pc}
 8004c0c:	0801f28c 	.word	0x0801f28c
 8004c10:	0801f32c 	.word	0x0801f32c
 8004c14:	0801ebec 	.word	0x0801ebec

08004c18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	f001 fce7 	bl	80065f2 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4colsEv>
 8004c24:	4603      	mov	r3, r0
 8004c26:	4618      	mov	r0, r3
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b082      	sub	sp, #8
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
 8004c36:	f001 fce4 	bl	8006602 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4rowsEv>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3708      	adds	r7, #8
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)
 8004c44:	b590      	push	{r4, r7, lr}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
        return m_storage.data()[rowId + colId * m_storage.rows()];
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f001 fcdd 	bl	8006612 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4dataEv>
 8004c58:	4604      	mov	r4, r0
 8004c5a:	f001 fcd2 	bl	8006602 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4rowsEv>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	fb03 f202 	mul.w	r2, r3, r2
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	4413      	add	r3, r2
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	4423      	add	r3, r4
    }
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3714      	adds	r7, #20
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd90      	pop	{r4, r7, pc}
	...

08004c78 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf>:
  inline CommaInitializer(XprType& xpr, const Scalar& s)
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	601a      	str	r2, [r3, #0]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	605a      	str	r2, [r3, #4]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2201      	movs	r2, #1
 8004c94:	609a      	str	r2, [r3, #8]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	60da      	str	r2, [r3, #12]
    eigen_assert(m_xpr.rows() > 0 && m_xpr.cols() > 0
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f000 f86a 	bl	8004d7a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	dd07      	ble.n	8004cbc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x44>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f000 f857 	bl	8004d64 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	dc05      	bgt.n	8004cc8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x50>
 8004cbc:	4b0b      	ldr	r3, [pc, #44]	; (8004cec <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x74>)
 8004cbe:	4a0c      	ldr	r2, [pc, #48]	; (8004cf0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x78>)
 8004cc0:	2124      	movs	r1, #36	; 0x24
 8004cc2:	480c      	ldr	r0, [pc, #48]	; (8004cf4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x7c>)
 8004cc4:	f018 feca 	bl	801da5c <__assert_func>
 8004cc8:	bf00      	nop
    m_xpr.coeffRef(0,0) = s;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	2100      	movs	r1, #0
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f000 f85c 	bl	8004d90 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8coeffRefEii>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	6013      	str	r3, [r2, #0]
  }
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	0801f180 	.word	0x0801f180
 8004cf0:	0801f394 	.word	0x0801f394
 8004cf4:	0801ebec 	.word	0x0801ebec

08004cf8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv>:
  inline XprType& finished() {
 8004cf8:	b590      	push	{r4, r7, lr}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	18d4      	adds	r4, r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f000 f833 	bl	8004d7a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8004d14:	4603      	mov	r3, r0
 8004d16:	429c      	cmp	r4, r3
 8004d18:	d007      	beq.n	8004d2a <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x32>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f000 f820 	bl	8004d64 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d109      	bne.n	8004d3e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x46>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	689c      	ldr	r4, [r3, #8]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 f816 	bl	8004d64 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	429c      	cmp	r4, r3
 8004d3c:	d005      	beq.n	8004d4a <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x52>
 8004d3e:	4b06      	ldr	r3, [pc, #24]	; (8004d58 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x60>)
 8004d40:	4a06      	ldr	r2, [pc, #24]	; (8004d5c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x64>)
 8004d42:	217a      	movs	r1, #122	; 0x7a
 8004d44:	4806      	ldr	r0, [pc, #24]	; (8004d60 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x68>)
 8004d46:	f018 fe89 	bl	801da5c <__assert_func>
 8004d4a:	bf00      	nop
      return m_xpr;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
  }
 8004d50:	4618      	mov	r0, r3
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd90      	pop	{r4, r7, pc}
 8004d58:	0801f28c 	.word	0x0801f28c
 8004d5c:	0801f444 	.word	0x0801f444
 8004d60:	0801ebec 	.word	0x0801ebec

08004d64 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	f001 fc5c 	bl	8006628 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4colsEv>
 8004d70:	4603      	mov	r3, r0
 8004d72:	4618      	mov	r0, r3
 8004d74:	3708      	adds	r7, #8
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b082      	sub	sp, #8
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
 8004d82:	f001 fc59 	bl	8006638 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4rowsEv>
 8004d86:	4603      	mov	r3, r0
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3708      	adds	r7, #8
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)
 8004d90:	b590      	push	{r4, r7, lr}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
        return m_storage.data()[rowId + colId * m_storage.rows()];
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f001 fc52 	bl	8006648 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv>
 8004da4:	4604      	mov	r4, r0
 8004da6:	f001 fc47 	bl	8006638 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4rowsEv>
 8004daa:	4602      	mov	r2, r0
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	fb03 f202 	mul.w	r2, r3, r2
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	4413      	add	r3, r2
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	4423      	add	r3, r4
    }
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3714      	adds	r7, #20
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd90      	pop	{r4, r7, pc}
	...

08004dc4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf>:
  inline CommaInitializer(XprType& xpr, const Scalar& s)
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	601a      	str	r2, [r3, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	605a      	str	r2, [r3, #4]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2201      	movs	r2, #1
 8004de0:	609a      	str	r2, [r3, #8]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2201      	movs	r2, #1
 8004de6:	60da      	str	r2, [r3, #12]
    eigen_assert(m_xpr.rows() > 0 && m_xpr.cols() > 0
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4618      	mov	r0, r3
 8004dee:	f000 ff0e 	bl	8005c0e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	dd07      	ble.n	8004e08 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x44>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f000 ff11 	bl	8005c24 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	dc05      	bgt.n	8004e14 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x50>
 8004e08:	4b0b      	ldr	r3, [pc, #44]	; (8004e38 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x74>)
 8004e0a:	4a0c      	ldr	r2, [pc, #48]	; (8004e3c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x78>)
 8004e0c:	2124      	movs	r1, #36	; 0x24
 8004e0e:	480c      	ldr	r0, [pc, #48]	; (8004e40 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x7c>)
 8004e10:	f018 fe24 	bl	801da5c <__assert_func>
 8004e14:	bf00      	nop
    m_xpr.coeffRef(0,0) = s;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f001 fc1d 	bl	800665e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>
 8004e24:	4602      	mov	r2, r0
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	6013      	str	r3, [r2, #0]
  }
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	0801f180 	.word	0x0801f180
 8004e3c:	0801f4ac 	.word	0x0801f4ac
 8004e40:	0801ebec 	.word	0x0801ebec

08004e44 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv>:
  inline XprType& finished() {
 8004e44:	b590      	push	{r4, r7, lr}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685a      	ldr	r2, [r3, #4]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	18d4      	adds	r4, r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f000 fed7 	bl	8005c0e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8004e60:	4603      	mov	r3, r0
 8004e62:	429c      	cmp	r4, r3
 8004e64:	d007      	beq.n	8004e76 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x32>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f000 feda 	bl	8005c24 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d109      	bne.n	8004e8a <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x46>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689c      	ldr	r4, [r3, #8]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 fed0 	bl	8005c24 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8004e84:	4603      	mov	r3, r0
 8004e86:	429c      	cmp	r4, r3
 8004e88:	d005      	beq.n	8004e96 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x52>
 8004e8a:	4b06      	ldr	r3, [pc, #24]	; (8004ea4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x60>)
 8004e8c:	4a06      	ldr	r2, [pc, #24]	; (8004ea8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x64>)
 8004e8e:	217a      	movs	r1, #122	; 0x7a
 8004e90:	4806      	ldr	r0, [pc, #24]	; (8004eac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x68>)
 8004e92:	f018 fde3 	bl	801da5c <__assert_func>
 8004e96:	bf00      	nop
      return m_xpr;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
  }
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd90      	pop	{r4, r7, pc}
 8004ea4:	0801f28c 	.word	0x0801f28c
 8004ea8:	0801f55c 	.word	0x0801f55c
 8004eac:	0801ebec 	.word	0x0801ebec

08004eb0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf>:
  inline CommaInitializer(XprType& xpr, const Scalar& s)
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	607a      	str	r2, [r7, #4]
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	68ba      	ldr	r2, [r7, #8]
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	605a      	str	r2, [r3, #4]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	609a      	str	r2, [r3, #8]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	60da      	str	r2, [r3, #12]
    eigen_assert(m_xpr.rows() > 0 && m_xpr.cols() > 0
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f000 f86a 	bl	8004fb2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	dd07      	ble.n	8004ef4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x44>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f000 f857 	bl	8004f9c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	dc05      	bgt.n	8004f00 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x50>
 8004ef4:	4b0b      	ldr	r3, [pc, #44]	; (8004f24 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x74>)
 8004ef6:	4a0c      	ldr	r2, [pc, #48]	; (8004f28 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x78>)
 8004ef8:	2124      	movs	r1, #36	; 0x24
 8004efa:	480c      	ldr	r0, [pc, #48]	; (8004f2c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x7c>)
 8004efc:	f018 fdae 	bl	801da5c <__assert_func>
 8004f00:	bf00      	nop
    m_xpr.coeffRef(0,0) = s;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2200      	movs	r2, #0
 8004f08:	2100      	movs	r1, #0
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f000 f85c 	bl	8004fc8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8coeffRefEii>
 8004f10:	4602      	mov	r2, r0
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6013      	str	r3, [r2, #0]
  }
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	0801f180 	.word	0x0801f180
 8004f28:	0801f5c4 	.word	0x0801f5c4
 8004f2c:	0801ebec 	.word	0x0801ebec

08004f30 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv>:
  inline XprType& finished() {
 8004f30:	b590      	push	{r4, r7, lr}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685a      	ldr	r2, [r3, #4]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	18d4      	adds	r4, r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f000 f833 	bl	8004fb2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	429c      	cmp	r4, r3
 8004f50:	d007      	beq.n	8004f62 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x32>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 f820 	bl	8004f9c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d109      	bne.n	8004f76 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x46>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	689c      	ldr	r4, [r3, #8]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f000 f816 	bl	8004f9c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8004f70:	4603      	mov	r3, r0
 8004f72:	429c      	cmp	r4, r3
 8004f74:	d005      	beq.n	8004f82 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x52>
 8004f76:	4b06      	ldr	r3, [pc, #24]	; (8004f90 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x60>)
 8004f78:	4a06      	ldr	r2, [pc, #24]	; (8004f94 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x64>)
 8004f7a:	217a      	movs	r1, #122	; 0x7a
 8004f7c:	4806      	ldr	r0, [pc, #24]	; (8004f98 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x68>)
 8004f7e:	f018 fd6d 	bl	801da5c <__assert_func>
 8004f82:	bf00      	nop
      return m_xpr;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
  }
 8004f88:	4618      	mov	r0, r3
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd90      	pop	{r4, r7, pc}
 8004f90:	0801f28c 	.word	0x0801f28c
 8004f94:	0801f674 	.word	0x0801f674
 8004f98:	0801ebec 	.word	0x0801ebec

08004f9c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	f001 fb74 	bl	8006690 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4colsEv>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	4618      	mov	r0, r3
 8004fac:	3708      	adds	r7, #8
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b082      	sub	sp, #8
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
 8004fba:	f001 fb71 	bl	80066a0 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4rowsEv>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3708      	adds	r7, #8
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)
 8004fc8:	b590      	push	{r4, r7, lr}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
        return m_storage.data()[colId + rowId * m_storage.cols()];
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f001 fb6a 	bl	80066b0 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4dataEv>
 8004fdc:	4604      	mov	r4, r0
 8004fde:	f001 fb57 	bl	8006690 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4colsEv>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	fb03 f202 	mul.w	r2, r3, r2
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4413      	add	r3, r2
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	4423      	add	r3, r4
    }
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3714      	adds	r7, #20
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd90      	pop	{r4, r7, pc}

08004ffa <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b082      	sub	sp, #8
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 f855 	bl	80050b2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8005008:	4603      	mov	r3, r0
 800500a:	4618      	mov	r0, r3
 800500c:	f7ff feb5 	bl	8004d7a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8005010:	4603      	mov	r3, r0
 8005012:	4618      	mov	r0, r3
 8005014:	3708      	adds	r7, #8
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800501a:	b580      	push	{r7, lr}
 800501c:	b082      	sub	sp, #8
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 f845 	bl	80050b2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8005028:	4603      	mov	r3, r0
 800502a:	4618      	mov	r0, r3
 800502c:	f7ff fe9a 	bl	8004d64 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8005030:	4603      	mov	r3, r0
 8005032:	4618      	mov	r0, r3
 8005034:	3708      	adds	r7, #8
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}

0800503a <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
protected:
  Index m_outerStride;
};

template<typename Derived>
struct evaluator<PlainObjectBase<Derived> >
 800503a:	b580      	push	{r7, lr}
 800503c:	b082      	sub	sp, #8
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f001 fb4f 	bl	80066e6 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4618      	mov	r0, r3
 800504c:	3708      	adds	r7, #8
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:

  plainobjectbase_evaluator_data<Scalar,OuterStrideAtCompileTime> m_d;
};

template<typename Scalar, int Rows, int Cols, int Options, int MaxRows, int MaxCols>
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 8005052:	b580      	push	{r7, lr}
 8005054:	b082      	sub	sp, #8
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4618      	mov	r0, r3
 800505e:	f7ff ffec 	bl	800503a <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4618      	mov	r0, r3
 8005066:	3708      	adds	r7, #8
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index row, Index col)
 800506c:	b590      	push	{r4, r7, lr}
 800506e:	b087      	sub	sp, #28
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]
      return internal::evaluator<Derived>(derived()).coeffRef(row,col);
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f000 f90f 	bl	800529c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800507e:	4602      	mov	r2, r0
 8005080:	f107 0314 	add.w	r3, r7, #20
 8005084:	4611      	mov	r1, r2
 8005086:	4618      	mov	r0, r3
 8005088:	f001 fb1d 	bl	80066c6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 800508c:	f107 0314 	add.w	r3, r7, #20
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	68b9      	ldr	r1, [r7, #8]
 8005094:	4618      	mov	r0, r3
 8005096:	f001 fb31 	bl	80066fc <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEii>
 800509a:	4604      	mov	r4, r0
 800509c:	bf00      	nop
 800509e:	f107 0314 	add.w	r3, r7, #20
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7ff ffd5 	bl	8005052 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 80050a8:	4623      	mov	r3, r4
    }
 80050aa:	4618      	mov	r0, r3
 80050ac:	371c      	adds	r7, #28
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd90      	pop	{r4, r7, pc}

080050b2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 80050b2:	b480      	push	{r7}
 80050b4:	b083      	sub	sp, #12
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4618      	mov	r0, r3
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKf>:
namespace internal {

template<typename Scalar>
struct scalar_constant_op {
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE scalar_constant_op(const scalar_constant_op& other) : m_other(other.m_other) { }
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE scalar_constant_op(const Scalar& other) : m_other(other) { }
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	601a      	str	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4618      	mov	r0, r3
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <_ZN5Eigen10MatrixBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f001 fb1b 	bl	800672c <_ZN5Eigen9DenseBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4618      	mov	r0, r3
 80050fa:	3708      	adds	r7, #8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_>:

    typedef typename internal::dense_xpr_base<CwiseNullaryOp>::type Base;
    EIGEN_DENSE_PUBLIC_INTERFACE(CwiseNullaryOp)

    EIGEN_DEVICE_FUNC
    CwiseNullaryOp(Index rows, Index cols, const NullaryOp& func = NullaryOp())
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
 800510c:	603b      	str	r3, [r7, #0]
      : m_rows(rows), m_cols(cols), m_functor(func)
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f7ff ffea 	bl	80050e8 <_ZN5Eigen10MatrixBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	68b9      	ldr	r1, [r7, #8]
 8005118:	4618      	mov	r0, r3
 800511a:	f001 fb13 	bl	8006744 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	3301      	adds	r3, #1
 8005122:	6879      	ldr	r1, [r7, #4]
 8005124:	4618      	mov	r0, r3
 8005126:	f001 fb27 	bl	8006778 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	3304      	adds	r3, #4
 800512e:	6839      	ldr	r1, [r7, #0]
 8005130:	4618      	mov	r0, r3
 8005132:	f000 f897 	bl	8005264 <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKS2_>
    {
      eigen_assert(rows >= 0
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	2b00      	cmp	r3, #0
 800513a:	db08      	blt.n	800514e <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x4e>
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	2b03      	cmp	r3, #3
 8005140:	d105      	bne.n	800514e <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x4e>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2b00      	cmp	r3, #0
 8005146:	db02      	blt.n	800514e <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x4e>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d005      	beq.n	800515a <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x5a>
 800514e:	4b05      	ldr	r3, [pc, #20]	; (8005164 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x64>)
 8005150:	4a05      	ldr	r2, [pc, #20]	; (8005168 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x68>)
 8005152:	2147      	movs	r1, #71	; 0x47
 8005154:	4805      	ldr	r0, [pc, #20]	; (800516c <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x6c>)
 8005156:	f018 fc81 	bl	801da5c <__assert_func>
            && (RowsAtCompileTime == Dynamic || RowsAtCompileTime == rows)
            &&  cols >= 0
            && (ColsAtCompileTime == Dynamic || ColsAtCompileTime == cols));
    }
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	4618      	mov	r0, r3
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	0801f6dc 	.word	0x0801f6dc
 8005168:	0801f774 	.word	0x0801f774
 800516c:	0801f868 	.word	0x0801f868

08005170 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>:
template<typename LhsScalar,typename RhsScalar>
struct scalar_product_op  : binary_op_base<LhsScalar,RhsScalar>
{
  typedef typename ScalarBinaryOpTraits<LhsScalar,RhsScalar,scalar_product_op>::ReturnType result_type;
#ifndef EIGEN_SCALAR_BINARY_OP_PLUGIN
  EIGEN_EMPTY_STRUCT_CTOR(scalar_product_op)
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4618      	mov	r0, r3
 800517c:	370c      	adds	r7, #12
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr

08005186 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEC1Ev>:
 8005186:	b580      	push	{r7, lr}
 8005188:	b082      	sub	sp, #8
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f001 fb0c 	bl	80067ac <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEC1Ev>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4618      	mov	r0, r3
 8005198:	3708      	adds	r7, #8
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EENS_5DenseEEC1Ev>:
    const BinaryOp m_functor;
};

// Generic API dispatcher
template<typename BinaryOp, typename Lhs, typename Rhs, typename StorageKind>
class CwiseBinaryOpImpl
 800519e:	b580      	push	{r7, lr}
 80051a0:	b082      	sub	sp, #8
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f7ff ffed 	bl	8005186 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEC1Ev>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4618      	mov	r0, r3
 80051b0:	3708      	adds	r7, #8
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:

    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
    Index rows() const { return m_rows.value(); }
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b082      	sub	sp, #8
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
 80051be:	f001 fb00 	bl	80067c2 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 80051c2:	4603      	mov	r3, r0
 80051c4:	4618      	mov	r0, r3
 80051c6:	3708      	adds	r7, #8
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
    Index cols() const { return m_cols.value(); }
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	f001 fafd 	bl	80067d2 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 80051d8:	4603      	mov	r3, r0
 80051da:	4618      	mov	r0, r3
 80051dc:	3708      	adds	r7, #8
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
	...

080051e4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 80051e4:	b590      	push	{r4, r7, lr}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
 80051f0:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 80051f2:	68f8      	ldr	r0, [r7, #12]
 80051f4:	f7ff ffd3 	bl	800519e <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EENS_5DenseEEC1Ev>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	601a      	str	r2, [r3, #0]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	3304      	adds	r3, #4
 8005202:	6879      	ldr	r1, [r7, #4]
 8005204:	4618      	mov	r0, r3
 8005206:	f7ff f871 	bl	80042ec <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS7_>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	330c      	adds	r3, #12
 800520e:	6839      	ldr	r1, [r7, #0]
 8005210:	4618      	mov	r0, r3
 8005212:	f000 f837 	bl	8005284 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	4618      	mov	r0, r3
 800521a:	f7ff fdae 	bl	8004d7a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800521e:	4604      	mov	r4, r0
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f7ff ffc8 	bl	80051b6 <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8005226:	4603      	mov	r3, r0
 8005228:	429c      	cmp	r4, r3
 800522a:	d10a      	bne.n	8005242 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x5e>
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	4618      	mov	r0, r3
 8005230:	f7ff fd98 	bl	8004d64 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8005234:	4604      	mov	r4, r0
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f7ff ffc8 	bl	80051cc <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800523c:	4603      	mov	r3, r0
 800523e:	429c      	cmp	r4, r3
 8005240:	d005      	beq.n	800524e <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x6a>
 8005242:	4b05      	ldr	r3, [pc, #20]	; (8005258 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x74>)
 8005244:	4a05      	ldr	r2, [pc, #20]	; (800525c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x78>)
 8005246:	2174      	movs	r1, #116	; 0x74
 8005248:	4805      	ldr	r0, [pc, #20]	; (8005260 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x7c>)
 800524a:	f018 fc07 	bl	801da5c <__assert_func>
    }
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	4618      	mov	r0, r3
 8005252:	3714      	adds	r7, #20
 8005254:	46bd      	mov	sp, r7
 8005256:	bd90      	pop	{r4, r7, pc}
 8005258:	0801f8c4 	.word	0x0801f8c4
 800525c:	0801f900 	.word	0x0801f900
 8005260:	0801fb28 	.word	0x0801fb28

08005264 <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKS2_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE scalar_constant_op(const scalar_constant_op& other) : m_other(other.m_other) { }
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	601a      	str	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4618      	mov	r0, r3
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>:
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4618      	mov	r0, r3
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>:
  Derived& derived() { return *static_cast<Derived*>(this); }
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4618      	mov	r0, r3
 80052a8:	370c      	adds	r7, #12
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr

080052b2 <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b082      	sub	sp, #8
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f001 fa91 	bl	80067e2 <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4618      	mov	r0, r3
 80052c4:	3708      	adds	r7, #8
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <_ZN5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b082      	sub	sp, #8
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7ff ffed 	bl	80052b2 <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4618      	mov	r0, r3
 80052dc:	3708      	adds	r7, #8
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <_ZN5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b082      	sub	sp, #8
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
 80052ea:	6039      	str	r1, [r7, #0]
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f7ff ffec 	bl	80052ca <_ZN5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEEC1Ev>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	683a      	ldr	r2, [r7, #0]
 80052f6:	601a      	str	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4618      	mov	r0, r3
 80052fc:	3708      	adds	r7, #8
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8005302:	b480      	push	{r7}
 8005304:	b083      	sub	sp, #12
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4618      	mov	r0, r3
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>:
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4618      	mov	r0, r3
 8005324:	370c      	adds	r7, #12
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEEC1Ev>:
 800532e:	b580      	push	{r7, lr}
 8005330:	b082      	sub	sp, #8
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f001 fa5e 	bl	80067f8 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEEC1Ev>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4618      	mov	r0, r3
 8005340:	3708      	adds	r7, #8
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0ELi4EEC1Ev>:
};

namespace internal {

template<typename Lhs, typename Rhs, int Option, int ProductTag = internal::product_type<Lhs,Rhs>::ret>
class dense_product_base
 8005346:	b580      	push	{r7, lr}
 8005348:	b082      	sub	sp, #8
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f7ff ffed 	bl	800532e <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEEC1Ev>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4618      	mov	r0, r3
 8005358:	3708      	adds	r7, #8
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}

0800535e <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0ENS_5DenseEEC1Ev>:
  public:
    typedef typename internal::generic_xpr_base<Product<Lhs,Rhs,Option>, MatrixXpr, StorageKind>::type Base;
};

template<typename Lhs, typename Rhs, int Option>
class ProductImpl<Lhs,Rhs,Option,Dense>
 800535e:	b580      	push	{r7, lr}
 8005360:	b082      	sub	sp, #8
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f7ff ffed 	bl	8005346 <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0ELi4EEC1Ev>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4618      	mov	r0, r3
 8005370:	3708      	adds	r7, #8
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8005376:	b580      	push	{r7, lr}
 8005378:	b082      	sub	sp, #8
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4618      	mov	r0, r3
 8005384:	f7ff fcee 	bl	8004d64 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8005388:	4603      	mov	r3, r0
    }
 800538a:	4618      	mov	r0, r3
 800538c:	3708      	adds	r7, #8
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 8005392:	b580      	push	{r7, lr}
 8005394:	b082      	sub	sp, #8
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4618      	mov	r0, r3
 80053a0:	f7ff fce0 	bl	8004d64 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80053a4:	4603      	mov	r3, r0
 80053a6:	4618      	mov	r0, r3
 80053a8:	3708      	adds	r7, #8
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
	...

080053b0 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 80053b0:	b590      	push	{r4, r7, lr}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f7ff ffce 	bl	800535e <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0ENS_5DenseEEC1Ev>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	68b9      	ldr	r1, [r7, #8]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7fe ffee 	bl	80043a8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	3310      	adds	r3, #16
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	6812      	ldr	r2, [r2, #0]
 80053d4:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 80053d6:	68b8      	ldr	r0, [r7, #8]
 80053d8:	f7ff ffcd 	bl	8005376 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4colsEv>
 80053dc:	4604      	mov	r4, r0
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f7ff ffd7 	bl	8005392 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80053e4:	4603      	mov	r3, r0
 80053e6:	429c      	cmp	r4, r3
 80053e8:	d005      	beq.n	80053f6 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_+0x46>
 80053ea:	4b06      	ldr	r3, [pc, #24]	; (8005404 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_+0x54>)
 80053ec:	4a06      	ldr	r2, [pc, #24]	; (8005408 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_+0x58>)
 80053ee:	2160      	movs	r1, #96	; 0x60
 80053f0:	4806      	ldr	r0, [pc, #24]	; (800540c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_+0x5c>)
 80053f2:	f018 fb33 	bl	801da5c <__assert_func>
 80053f6:	bf00      	nop
    }
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	4618      	mov	r0, r3
 80053fc:	3714      	adds	r7, #20
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd90      	pop	{r4, r7, pc}
 8005402:	bf00      	nop
 8005404:	0801fb84 	.word	0x0801fb84
 8005408:	0801fc10 	.word	0x0801fc10
 800540c:	0801fed4 	.word	0x0801fed4

08005410 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8005410:	b590      	push	{r4, r7, lr}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f8da 	bl	80055d4 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8005420:	4604      	mov	r4, r0
 8005422:	6838      	ldr	r0, [r7, #0]
 8005424:	f001 f9f3 	bl	800680e <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEE7derivedEv>
 8005428:	4603      	mov	r3, r0
 800542a:	4619      	mov	r1, r3
 800542c:	4620      	mov	r0, r4
 800542e:	f001 f9f9 	bl	8006824 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEEvRT_RKT0_>
      return this->derived();
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f8ce 	bl	80055d4 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8005438:	4603      	mov	r3, r0
    }
 800543a:	4618      	mov	r0, r3
 800543c:	370c      	adds	r7, #12
 800543e:	46bd      	mov	sp, r7
 8005440:	bd90      	pop	{r4, r7, pc}

08005442 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>:
 8005442:	b480      	push	{r7}
 8005444:	b083      	sub	sp, #12
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4618      	mov	r0, r3
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>:
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f001 f9f4 	bl	800684e <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4618      	mov	r0, r3
 800546a:	3708      	adds	r7, #8
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0ELi3EEC1Ev>:
class dense_product_base
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f7ff ffed 	bl	8005458 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4618      	mov	r0, r3
 8005482:	3708      	adds	r7, #8
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f7ff ffed 	bl	8005470 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0ELi3EEC1Ev>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4618      	mov	r0, r3
 800549a:	3708      	adds	r7, #8
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 80054a0:	b590      	push	{r4, r7, lr}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f7ff ffeb 	bl	8005488 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0ENS_5DenseEEC1Ev>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	68ba      	ldr	r2, [r7, #8]
 80054b6:	601a      	str	r2, [r3, #0]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7ff fba9 	bl	8004c18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80054c6:	4604      	mov	r4, r0
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4618      	mov	r0, r3
 80054cc:	f7ff fc55 	bl	8004d7a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80054d0:	4603      	mov	r3, r0
 80054d2:	429c      	cmp	r4, r3
 80054d4:	d005      	beq.n	80054e2 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x42>
 80054d6:	4b06      	ldr	r3, [pc, #24]	; (80054f0 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x50>)
 80054d8:	4a06      	ldr	r2, [pc, #24]	; (80054f4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x54>)
 80054da:	2160      	movs	r1, #96	; 0x60
 80054dc:	4806      	ldr	r0, [pc, #24]	; (80054f8 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x58>)
 80054de:	f018 fabd 	bl	801da5c <__assert_func>
 80054e2:	bf00      	nop
    }
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	4618      	mov	r0, r3
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd90      	pop	{r4, r7, pc}
 80054ee:	bf00      	nop
 80054f0:	0801fb84 	.word	0x0801fb84
 80054f4:	0801ff28 	.word	0x0801ff28
 80054f8:	0801fed4 	.word	0x0801fed4

080054fc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 80054fc:	b590      	push	{r4, r7, lr}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f7ff fec8 	bl	800529c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800550c:	4604      	mov	r4, r0
 800550e:	6838      	ldr	r0, [r7, #0]
 8005510:	f001 f9a8 	bl	8006864 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>
 8005514:	4603      	mov	r3, r0
 8005516:	4619      	mov	r1, r3
 8005518:	4620      	mov	r0, r4
 800551a:	f001 f9ae 	bl	800687a <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEEvRT_RKT0_>
      return this->derived();
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f7ff febc 	bl	800529c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8005524:	4603      	mov	r3, r0
    }
 8005526:	4618      	mov	r0, r3
 8005528:	370c      	adds	r7, #12
 800552a:	46bd      	mov	sp, r7
 800552c:	bd90      	pop	{r4, r7, pc}

0800552e <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEC1Ev>:
 800552e:	b580      	push	{r7, lr}
 8005530:	b082      	sub	sp, #8
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f001 f9b4 	bl	80068a4 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEC1Ev>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4618      	mov	r0, r3
 8005540:	3708      	adds	r7, #8
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}

08005546 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0ELi3EEC1Ev>:
class dense_product_base
 8005546:	b580      	push	{r7, lr}
 8005548:	b082      	sub	sp, #8
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f7ff ffed 	bl	800552e <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEC1Ev>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4618      	mov	r0, r3
 8005558:	3708      	adds	r7, #8
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800555e:	b580      	push	{r7, lr}
 8005560:	b082      	sub	sp, #8
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f7ff ffed 	bl	8005546 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0ELi3EEC1Ev>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4618      	mov	r0, r3
 8005570:	3708      	adds	r7, #8
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
	...

08005578 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005578:	b590      	push	{r4, r7, lr}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f7ff ffea 	bl	800555e <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0ENS_5DenseEEC1Ev>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	601a      	str	r2, [r3, #0]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	4618      	mov	r0, r3
 800559a:	f7ff fb3d 	bl	8004c18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800559e:	4604      	mov	r4, r0
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7ff fb43 	bl	8004c2e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80055a8:	4603      	mov	r3, r0
 80055aa:	429c      	cmp	r4, r3
 80055ac:	d005      	beq.n	80055ba <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_+0x42>
 80055ae:	4b06      	ldr	r3, [pc, #24]	; (80055c8 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_+0x50>)
 80055b0:	4a06      	ldr	r2, [pc, #24]	; (80055cc <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_+0x54>)
 80055b2:	2160      	movs	r1, #96	; 0x60
 80055b4:	4806      	ldr	r0, [pc, #24]	; (80055d0 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_+0x58>)
 80055b6:	f018 fa51 	bl	801da5c <__assert_func>
 80055ba:	bf00      	nop
    }
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4618      	mov	r0, r3
 80055c0:	3714      	adds	r7, #20
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd90      	pop	{r4, r7, pc}
 80055c6:	bf00      	nop
 80055c8:	0801fb84 	.word	0x0801fb84
 80055cc:	08020050 	.word	0x08020050
 80055d0:	0801fed4 	.word	0x0801fed4

080055d4 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>:
  Derived& derived() { return *static_cast<Derived*>(this); }
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4618      	mov	r0, r3
 80055e0:	370c      	adds	r7, #12
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr

080055ea <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>:
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b082      	sub	sp, #8
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f001 f961 	bl	80068ba <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4618      	mov	r0, r3
 80055fc:	3708      	adds	r7, #8
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <_ZN5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 8005602:	b580      	push	{r7, lr}
 8005604:	b082      	sub	sp, #8
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7ff ffed 	bl	80055ea <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4618      	mov	r0, r3
 8005614:	3708      	adds	r7, #8
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}

0800561a <_ZN5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 800561a:	b580      	push	{r7, lr}
 800561c:	b082      	sub	sp, #8
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
 8005622:	6039      	str	r1, [r7, #0]
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f7ff ffec 	bl	8005602 <_ZN5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEEC1Ev>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	683a      	ldr	r2, [r7, #0]
 800562e:	601a      	str	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4618      	mov	r0, r3
 8005634:	3708      	adds	r7, #8
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800563a:	b480      	push	{r7}
 800563c:	b083      	sub	sp, #12
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4618      	mov	r0, r3
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>:
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4618      	mov	r0, r3
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr

08005666 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEC1Ev>:
 8005666:	b580      	push	{r7, lr}
 8005668:	b082      	sub	sp, #8
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f001 f92e 	bl	80068d0 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEC1Ev>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4618      	mov	r0, r3
 8005678:	3708      	adds	r7, #8
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0ELi3EEC1Ev>:
class dense_product_base
 800567e:	b580      	push	{r7, lr}
 8005680:	b082      	sub	sp, #8
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f7ff ffed 	bl	8005666 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEC1Ev>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4618      	mov	r0, r3
 8005690:	3708      	adds	r7, #8
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}

08005696 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005696:	b580      	push	{r7, lr}
 8005698:	b082      	sub	sp, #8
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f7ff ffed 	bl	800567e <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0ELi3EEC1Ev>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4618      	mov	r0, r3
 80056a8:	3708      	adds	r7, #8
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b082      	sub	sp, #8
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7ff faac 	bl	8004c18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80056c0:	4603      	mov	r3, r0
 80056c2:	4618      	mov	r0, r3
 80056c4:	3708      	adds	r7, #8
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b082      	sub	sp, #8
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7ff fa9e 	bl	8004c18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80056dc:	4603      	mov	r3, r0
 80056de:	4618      	mov	r0, r3
 80056e0:	3708      	adds	r7, #8
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
	...

080056e8 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 80056e8:	b590      	push	{r4, r7, lr}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	f7ff ffce 	bl	8005696 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0ENS_5DenseEEC1Ev>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	68ba      	ldr	r2, [r7, #8]
 80056fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005702:	e883 0003 	stmia.w	r3, {r0, r1}
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	3308      	adds	r3, #8
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	6812      	ldr	r2, [r2, #0]
 800570e:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 8005710:	68b8      	ldr	r0, [r7, #8]
 8005712:	f7ff ffcc 	bl	80056ae <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>
 8005716:	4604      	mov	r4, r0
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f7ff ffd6 	bl	80056ca <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800571e:	4603      	mov	r3, r0
 8005720:	429c      	cmp	r4, r3
 8005722:	d005      	beq.n	8005730 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_+0x48>
 8005724:	4b05      	ldr	r3, [pc, #20]	; (800573c <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_+0x54>)
 8005726:	4a06      	ldr	r2, [pc, #24]	; (8005740 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_+0x58>)
 8005728:	2160      	movs	r1, #96	; 0x60
 800572a:	4806      	ldr	r0, [pc, #24]	; (8005744 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_+0x5c>)
 800572c:	f018 f996 	bl	801da5c <__assert_func>
 8005730:	bf00      	nop
    }
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	4618      	mov	r0, r3
 8005736:	3714      	adds	r7, #20
 8005738:	46bd      	mov	sp, r7
 800573a:	bd90      	pop	{r4, r7, pc}
 800573c:	0801fb84 	.word	0x0801fb84
 8005740:	08020178 	.word	0x08020178
 8005744:	0801fed4 	.word	0x0801fed4

08005748 <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEE7derivedEv>:
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4618      	mov	r0, r3
 8005754:	370c      	adds	r7, #12
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>:
  EIGEN_EMPTY_STRUCT_CTOR(scalar_sum_op)
 800575e:	b480      	push	{r7}
 8005760:	b083      	sub	sp, #12
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4618      	mov	r0, r3
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>:
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f001 f8b2 	bl	80068e6 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4618      	mov	r0, r3
 8005786:	3708      	adds	r7, #8
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_NS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f7ff ffed 	bl	8005774 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4618      	mov	r0, r3
 800579e:	3708      	adds	r7, #8
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4618      	mov	r0, r3
 80057b0:	f001 f8a4 	bl	80068fc <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4rowsEv>
 80057b4:	4603      	mov	r3, r0
 80057b6:	4618      	mov	r0, r3
 80057b8:	3708      	adds	r7, #8
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80057be:	b580      	push	{r7, lr}
 80057c0:	b082      	sub	sp, #8
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	3308      	adds	r3, #8
 80057ca:	4618      	mov	r0, r3
 80057cc:	f001 f8a4 	bl	8006918 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80057d0:	4603      	mov	r3, r0
 80057d2:	4618      	mov	r0, r3
 80057d4:	3708      	adds	r7, #8
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
	...

080057dc <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 80057dc:	b590      	push	{r4, r7, lr}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
 80057e8:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f7ff ffce 	bl	800578c <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_NS_5DenseEEC1Ev>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	68ba      	ldr	r2, [r7, #8]
 80057f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80057f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	60da      	str	r2, [r3, #12]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	3310      	adds	r3, #16
 8005804:	6839      	ldr	r1, [r7, #0]
 8005806:	4618      	mov	r0, r3
 8005808:	f000 f828 	bl	800585c <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800580c:	68b8      	ldr	r0, [r7, #8]
 800580e:	f7ff ffc9 	bl	80057a4 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 8005812:	4604      	mov	r4, r0
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4618      	mov	r0, r3
 8005818:	f7ff fa09 	bl	8004c2e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800581c:	4603      	mov	r3, r0
 800581e:	429c      	cmp	r4, r3
 8005820:	d10a      	bne.n	8005838 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x5c>
 8005822:	68b8      	ldr	r0, [r7, #8]
 8005824:	f7ff ffcb 	bl	80057be <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4colsEv>
 8005828:	4604      	mov	r4, r0
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4618      	mov	r0, r3
 800582e:	f7ff f9f3 	bl	8004c18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005832:	4603      	mov	r3, r0
 8005834:	429c      	cmp	r4, r3
 8005836:	d005      	beq.n	8005844 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x68>
 8005838:	4b05      	ldr	r3, [pc, #20]	; (8005850 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x74>)
 800583a:	4a06      	ldr	r2, [pc, #24]	; (8005854 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x78>)
 800583c:	2174      	movs	r1, #116	; 0x74
 800583e:	4806      	ldr	r0, [pc, #24]	; (8005858 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x7c>)
 8005840:	f018 f90c 	bl	801da5c <__assert_func>
    }
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	4618      	mov	r0, r3
 8005848:	3714      	adds	r7, #20
 800584a:	46bd      	mov	sp, r7
 800584c:	bd90      	pop	{r4, r7, pc}
 800584e:	bf00      	nop
 8005850:	0801f8c4 	.word	0x0801f8c4
 8005854:	08020324 	.word	0x08020324
 8005858:	0801fb28 	.word	0x0801fb28

0800585c <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>:
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4618      	mov	r0, r3
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_IS2_S2_Li0EEENS_9TransposeIS2_EELi0EEEKS2_EEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8005874:	b590      	push	{r4, r7, lr}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7ff fea8 	bl	80055d4 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8005884:	4604      	mov	r4, r0
 8005886:	6838      	ldr	r0, [r7, #0]
 8005888:	f001 f854 	bl	8006934 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEE7derivedEv>
 800588c:	4603      	mov	r3, r0
 800588e:	4619      	mov	r1, r3
 8005890:	4620      	mov	r0, r4
 8005892:	f001 f85a 	bl	800694a <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRT_RKT0_>
      return this->derived();
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f7ff fe9c 	bl	80055d4 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800589c:	4603      	mov	r3, r0
    }
 800589e:	4618      	mov	r0, r3
 80058a0:	370c      	adds	r7, #12
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd90      	pop	{r4, r7, pc}

080058a6 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>:
  Derived& derived() { return *static_cast<Derived*>(this); }
 80058a6:	b480      	push	{r7}
 80058a8:	b083      	sub	sp, #12
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4618      	mov	r0, r3
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f001 f855 	bl	8006974 <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4618      	mov	r0, r3
 80058ce:	3708      	adds	r7, #8
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <_ZN5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f7ff ffed 	bl	80058bc <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4618      	mov	r0, r3
 80058e6:	3708      	adds	r7, #8
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <_ZN5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f7ff ffec 	bl	80058d4 <_ZN5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEEC1Ev>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	683a      	ldr	r2, [r7, #0]
 8005900:	601a      	str	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4618      	mov	r0, r3
 8005906:	3708      	adds	r7, #8
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4618      	mov	r0, r3
 8005918:	370c      	adds	r7, #12
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr

08005922 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEC1Ev>:
 8005922:	b580      	push	{r7, lr}
 8005924:	b082      	sub	sp, #8
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f001 f82d 	bl	800698a <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEC1Ev>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4618      	mov	r0, r3
 8005934:	3708      	adds	r7, #8
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0ELi3EEC1Ev>:
class dense_product_base
 800593a:	b580      	push	{r7, lr}
 800593c:	b082      	sub	sp, #8
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f7ff ffed 	bl	8005922 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEC1Ev>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4618      	mov	r0, r3
 800594c:	3708      	adds	r7, #8
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}

08005952 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005952:	b580      	push	{r7, lr}
 8005954:	b082      	sub	sp, #8
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f7ff ffed 	bl	800593a <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0ELi3EEC1Ev>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4618      	mov	r0, r3
 8005964:	3708      	adds	r7, #8
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}

0800596a <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 800596a:	b580      	push	{r7, lr}
 800596c:	b082      	sub	sp, #8
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4618      	mov	r0, r3
 8005978:	f7ff fb10 	bl	8004f9c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 800597c:	4603      	mov	r3, r0
 800597e:	4618      	mov	r0, r3
 8005980:	3708      	adds	r7, #8
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
	...

08005988 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005988:	b590      	push	{r4, r7, lr}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	f7ff ffdc 	bl	8005952 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0ENS_5DenseEEC1Ev>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	68ba      	ldr	r2, [r7, #8]
 800599e:	601a      	str	r2, [r3, #0]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	3304      	adds	r3, #4
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	6812      	ldr	r2, [r2, #0]
 80059a8:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7ff f933 	bl	8004c18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80059b2:	4604      	mov	r4, r0
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f7ff ffd8 	bl	800596a <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 80059ba:	4603      	mov	r3, r0
 80059bc:	429c      	cmp	r4, r3
 80059be:	d005      	beq.n	80059cc <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_+0x44>
 80059c0:	4b05      	ldr	r3, [pc, #20]	; (80059d8 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_+0x50>)
 80059c2:	4a06      	ldr	r2, [pc, #24]	; (80059dc <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_+0x54>)
 80059c4:	2160      	movs	r1, #96	; 0x60
 80059c6:	4806      	ldr	r0, [pc, #24]	; (80059e0 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_+0x58>)
 80059c8:	f018 f848 	bl	801da5c <__assert_func>
 80059cc:	bf00      	nop
    }
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	4618      	mov	r0, r3
 80059d2:	3714      	adds	r7, #20
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd90      	pop	{r4, r7, pc}
 80059d8:	0801fb84 	.word	0x0801fb84
 80059dc:	08020598 	.word	0x08020598
 80059e0:	0801fed4 	.word	0x0801fed4

080059e4 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>:
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4618      	mov	r0, r3
 80059f0:	370c      	adds	r7, #12
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr

080059fa <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1Ev>:
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b082      	sub	sp, #8
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 ffcc 	bl	80069a0 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1Ev>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0ELi3EEC1Ev>:
class dense_product_base
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b082      	sub	sp, #8
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f7ff ffed 	bl	80059fa <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1Ev>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4618      	mov	r0, r3
 8005a24:	3708      	adds	r7, #8
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b082      	sub	sp, #8
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f7ff ffed 	bl	8005a12 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0ELi3EEC1Ev>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3708      	adds	r7, #8
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
	...

08005a44 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005a44:	b590      	push	{r4, r7, lr}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f7ff ffea 	bl	8005a2a <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0ENS_5DenseEEC1Ev>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	601a      	str	r2, [r3, #0]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	4618      	mov	r0, r3
 8005a66:	f7ff fa99 	bl	8004f9c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8005a6a:	4604      	mov	r4, r0
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7ff f8dd 	bl	8004c2e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8005a74:	4603      	mov	r3, r0
 8005a76:	429c      	cmp	r4, r3
 8005a78:	d005      	beq.n	8005a86 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_+0x42>
 8005a7a:	4b06      	ldr	r3, [pc, #24]	; (8005a94 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_+0x50>)
 8005a7c:	4a06      	ldr	r2, [pc, #24]	; (8005a98 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_+0x54>)
 8005a7e:	2160      	movs	r1, #96	; 0x60
 8005a80:	4806      	ldr	r0, [pc, #24]	; (8005a9c <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_+0x58>)
 8005a82:	f017 ffeb 	bl	801da5c <__assert_func>
 8005a86:	bf00      	nop
    }
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3714      	adds	r7, #20
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd90      	pop	{r4, r7, pc}
 8005a92:	bf00      	nop
 8005a94:	0801fb84 	.word	0x0801fb84
 8005a98:	080206e4 	.word	0x080206e4
 8005a9c:	0801fed4 	.word	0x0801fed4

08005aa0 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE7derivedEv>:
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4618      	mov	r0, r3
 8005aac:	370c      	adds	r7, #12
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEC1Ev>:
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b082      	sub	sp, #8
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 ff79 	bl	80069b6 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEC1Ev>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3708      	adds	r7, #8
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0ELi6EEC1Ev>:
class dense_product_base<Lhs, Rhs, Option, InnerProduct>
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b082      	sub	sp, #8
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f7ff ffed 	bl	8005ab6 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEC1Ev>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3708      	adds	r7, #8
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}

08005ae6 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005ae6:	b580      	push	{r7, lr}
 8005ae8:	b082      	sub	sp, #8
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f7ff ffed 	bl	8005ace <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0ELi6EEC1Ev>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4618      	mov	r0, r3
 8005af8:	3708      	adds	r7, #8
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}

08005afe <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8005afe:	b580      	push	{r7, lr}
 8005b00:	b082      	sub	sp, #8
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7ff f884 	bl	8004c18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005b10:	4603      	mov	r3, r0
 8005b12:	4618      	mov	r0, r3
 8005b14:	3708      	adds	r7, #8
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
	...

08005b1c <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005b1c:	b590      	push	{r4, r7, lr}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f7ff ffdc 	bl	8005ae6 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0ENS_5DenseEEC1Ev>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	68ba      	ldr	r2, [r7, #8]
 8005b32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005b36:	e883 0003 	stmia.w	r3, {r0, r1}
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	3308      	adds	r3, #8
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	6812      	ldr	r2, [r2, #0]
 8005b42:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 8005b44:	68b8      	ldr	r0, [r7, #8]
 8005b46:	f7ff ffda 	bl	8005afe <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4colsEv>
 8005b4a:	4604      	mov	r4, r0
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f7ff ff0c 	bl	800596a <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8005b52:	4603      	mov	r3, r0
 8005b54:	429c      	cmp	r4, r3
 8005b56:	d005      	beq.n	8005b64 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_+0x48>
 8005b58:	4b05      	ldr	r3, [pc, #20]	; (8005b70 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_+0x54>)
 8005b5a:	4a06      	ldr	r2, [pc, #24]	; (8005b74 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_+0x58>)
 8005b5c:	2160      	movs	r1, #96	; 0x60
 8005b5e:	4806      	ldr	r0, [pc, #24]	; (8005b78 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_+0x5c>)
 8005b60:	f017 ff7c 	bl	801da5c <__assert_func>
 8005b64:	bf00      	nop
    }
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3714      	adds	r7, #20
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd90      	pop	{r4, r7, pc}
 8005b70:	0801fb84 	.word	0x0801fb84
 8005b74:	0802080c 	.word	0x0802080c
 8005b78:	0801fed4 	.word	0x0801fed4

08005b7c <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEE7derivedEv>:
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4618      	mov	r0, r3
 8005b88:	370c      	adds	r7, #12
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr

08005b92 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>:
 8005b92:	b480      	push	{r7}
 8005b94:	b083      	sub	sp, #12
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>:
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 ff0b 	bl	80069cc <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3708      	adds	r7, #8
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f7ff ffed 	bl	8005ba8 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3708      	adds	r7, #8
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4618      	mov	r0, r3
 8005be4:	f000 fefd 	bl	80069e2 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4rowsEv>
 8005be8:	4603      	mov	r3, r0
 8005bea:	4618      	mov	r0, r3
 8005bec:	3708      	adds	r7, #8
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b082      	sub	sp, #8
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	3308      	adds	r3, #8
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f000 fefd 	bl	80069fe <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8005c04:	4603      	mov	r3, r0
 8005c06:	4618      	mov	r0, r3
 8005c08:	3708      	adds	r7, #8
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}

08005c0e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b082      	sub	sp, #8
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
 8005c16:	f000 ff00 	bl	8006a1a <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4rowsEv>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3708      	adds	r7, #8
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	f000 fefd 	bl	8006a2a <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4colsEv>
 8005c30:	4603      	mov	r3, r0
 8005c32:	4618      	mov	r0, r3
 8005c34:	3708      	adds	r7, #8
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
	...

08005c3c <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8005c3c:	b590      	push	{r4, r7, lr}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]
 8005c48:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	f7ff ffb8 	bl	8005bc0 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEENS_5DenseEEC1Ev>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	ca07      	ldmia	r2, {r0, r1, r2}
 8005c56:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	60da      	str	r2, [r3, #12]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	3310      	adds	r3, #16
 8005c64:	6839      	ldr	r1, [r7, #0]
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7ff fdf8 	bl	800585c <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8005c6c:	68b8      	ldr	r0, [r7, #8]
 8005c6e:	f7ff ffb3 	bl	8005bd8 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 8005c72:	4604      	mov	r4, r0
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4618      	mov	r0, r3
 8005c78:	f7ff ffc9 	bl	8005c0e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	429c      	cmp	r4, r3
 8005c80:	d10a      	bne.n	8005c98 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x5c>
 8005c82:	68b8      	ldr	r0, [r7, #8]
 8005c84:	f7ff ffb5 	bl	8005bf2 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4colsEv>
 8005c88:	4604      	mov	r4, r0
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f7ff ffc9 	bl	8005c24 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8005c92:	4603      	mov	r3, r0
 8005c94:	429c      	cmp	r4, r3
 8005c96:	d005      	beq.n	8005ca4 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x68>
 8005c98:	4b05      	ldr	r3, [pc, #20]	; (8005cb0 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x74>)
 8005c9a:	4a06      	ldr	r2, [pc, #24]	; (8005cb4 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x78>)
 8005c9c:	2174      	movs	r1, #116	; 0x74
 8005c9e:	4806      	ldr	r0, [pc, #24]	; (8005cb8 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x7c>)
 8005ca0:	f017 fedc 	bl	801da5c <__assert_func>
    }
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3714      	adds	r7, #20
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd90      	pop	{r4, r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	0801f8c4 	.word	0x0801f8c4
 8005cb4:	080209b8 	.word	0x080209b8
 8005cb8:	0801fb28 	.word	0x0801fb28

08005cbc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>:
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr

08005cd2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b082      	sub	sp, #8
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f7ff ff7b 	bl	8005bd8 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 8005ce2:	4603      	mov	r3, r0
    }
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3708      	adds	r7, #8
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b082      	sub	sp, #8
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7ff ff7b 	bl	8005bf2 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4colsEv>
 8005cfc:	4603      	mov	r3, r0
    }
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3708      	adds	r7, #8
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}

08005d06 <_ZN5Eigen10MatrixBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEC1Ev>:
 8005d06:	b580      	push	{r7, lr}
 8005d08:	b082      	sub	sp, #8
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 fe93 	bl	8006a3a <_ZN5Eigen9DenseBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEC1Ev>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4618      	mov	r0, r3
 8005d18:	3708      	adds	r7, #8
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <_ZN5Eigen11InverseImplINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS_5DenseEEC1Ev>:
  XprTypeNested m_xpr;
};

// Generic API dispatcher
template<typename XprType, typename StorageKind>
class InverseImpl
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b082      	sub	sp, #8
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f7ff ffed 	bl	8005d06 <_ZN5Eigen10MatrixBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEC1Ev>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3708      	adds	r7, #8
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSG_>:
  explicit EIGEN_DEVICE_FUNC Inverse(const XprType &xpr)
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b082      	sub	sp, #8
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
 8005d3e:	6039      	str	r1, [r7, #0]
    : m_xpr(xpr)
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f7ff ffec 	bl	8005d1e <_ZN5Eigen11InverseImplINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS_5DenseEEC1Ev>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6839      	ldr	r1, [r7, #0]
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7fe fc9b 	bl	8004686 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKSF_>
  {}
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4618      	mov	r0, r3
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE7derivedEv>:
 8005d5a:	b480      	push	{r7}
 8005d5c:	b083      	sub	sp, #12
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4618      	mov	r0, r3
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <_ZNK5Eigen9EigenBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEE7derivedEv>:
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	370c      	adds	r7, #12
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr

08005d86 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEC1Ev>:
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b082      	sub	sp, #8
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 fe5e 	bl	8006a50 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEC1Ev>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4618      	mov	r0, r3
 8005d98:	3708      	adds	r7, #8
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0ELi4EEC1Ev>:
class dense_product_base
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b082      	sub	sp, #8
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f7ff ffed 	bl	8005d86 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEC1Ev>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4618      	mov	r0, r3
 8005db0:	3708      	adds	r7, #8
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b082      	sub	sp, #8
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f7ff ffed 	bl	8005d9e <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0ELi4EEC1Ev>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3708      	adds	r7, #8
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b082      	sub	sp, #8
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	3304      	adds	r3, #4
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f000 fe0f 	bl	80069fe <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8005de0:	4603      	mov	r3, r0
 8005de2:	4618      	mov	r0, r3
 8005de4:	3708      	adds	r7, #8
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>:
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR  Index rows() const EIGEN_NOEXCEPT { return m_xpr.cols(); }
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b082      	sub	sp, #8
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4618      	mov	r0, r3
 8005df6:	f7ff ff79 	bl	8005cec <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3708      	adds	r7, #8
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005e04:	b590      	push	{r4, r7, lr}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f7ff ffd0 	bl	8005db6 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0ENS_5DenseEEC1Ev>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	68ba      	ldr	r2, [r7, #8]
 8005e1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005e1e:	e883 0003 	stmia.w	r3, {r0, r1}
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	3308      	adds	r3, #8
 8005e26:	6879      	ldr	r1, [r7, #4]
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f7fe fc71 	bl	8004710 <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSH_>
      eigen_assert(lhs.cols() == rhs.rows()
 8005e2e:	68b8      	ldr	r0, [r7, #8]
 8005e30:	f7ff ffcd 	bl	8005dce <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>
 8005e34:	4604      	mov	r4, r0
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f7ff ffd7 	bl	8005dea <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	429c      	cmp	r4, r3
 8005e40:	d005      	beq.n	8005e4e <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_+0x4a>
 8005e42:	4b06      	ldr	r3, [pc, #24]	; (8005e5c <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_+0x58>)
 8005e44:	4a06      	ldr	r2, [pc, #24]	; (8005e60 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_+0x5c>)
 8005e46:	2160      	movs	r1, #96	; 0x60
 8005e48:	4806      	ldr	r0, [pc, #24]	; (8005e64 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_+0x60>)
 8005e4a:	f017 fe07 	bl	801da5c <__assert_func>
 8005e4e:	bf00      	nop
    }
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	4618      	mov	r0, r3
 8005e54:	3714      	adds	r7, #20
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd90      	pop	{r4, r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	0801fb84 	.word	0x0801fb84
 8005e60:	08020c2c 	.word	0x08020c2c
 8005e64:	0801fed4 	.word	0x0801fed4

08005e68 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8005e68:	b590      	push	{r4, r7, lr}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f7ff fa12 	bl	800529c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8005e78:	4604      	mov	r4, r0
 8005e7a:	6838      	ldr	r0, [r7, #0]
 8005e7c:	f000 fdf3 	bl	8006a66 <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEE7derivedEv>
 8005e80:	4603      	mov	r3, r0
 8005e82:	4619      	mov	r1, r3
 8005e84:	4620      	mov	r0, r4
 8005e86:	f000 fdf9 	bl	8006a7c <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEEvRT_RKT0_>
      return this->derived();
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f7ff fa06 	bl	800529c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8005e90:	4603      	mov	r3, r0
    }
 8005e92:	4618      	mov	r0, r3
 8005e94:	370c      	adds	r7, #12
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd90      	pop	{r4, r7, pc}

08005e9a <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>:
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b082      	sub	sp, #8
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 fdff 	bl	8006aa6 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3708      	adds	r7, #8
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0ELi6EEC1Ev>:
class dense_product_base<Lhs, Rhs, Option, InnerProduct>
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b082      	sub	sp, #8
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f7ff ffed 	bl	8005e9a <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3708      	adds	r7, #8
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b082      	sub	sp, #8
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f7ff ffed 	bl	8005eb2 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0ELi6EEC1Ev>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4618      	mov	r0, r3
 8005edc:	3708      	adds	r7, #8
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
	...

08005ee4 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005ee4:	b590      	push	{r4, r7, lr}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
 8005ef0:	68f8      	ldr	r0, [r7, #12]
 8005ef2:	f7ff ffea 	bl	8005eca <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0ENS_5DenseEEC1Ev>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	68ba      	ldr	r2, [r7, #8]
 8005efa:	601a      	str	r2, [r3, #0]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	4618      	mov	r0, r3
 8005f06:	f7ff f849 	bl	8004f9c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8005f0a:	4604      	mov	r4, r0
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7fe ff33 	bl	8004d7a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8005f14:	4603      	mov	r3, r0
 8005f16:	429c      	cmp	r4, r3
 8005f18:	d005      	beq.n	8005f26 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x42>
 8005f1a:	4b06      	ldr	r3, [pc, #24]	; (8005f34 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x50>)
 8005f1c:	4a06      	ldr	r2, [pc, #24]	; (8005f38 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x54>)
 8005f1e:	2160      	movs	r1, #96	; 0x60
 8005f20:	4806      	ldr	r0, [pc, #24]	; (8005f3c <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x58>)
 8005f22:	f017 fd9b 	bl	801da5c <__assert_func>
 8005f26:	bf00      	nop
    }
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3714      	adds	r7, #20
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd90      	pop	{r4, r7, pc}
 8005f32:	bf00      	nop
 8005f34:	0801fb84 	.word	0x0801fb84
 8005f38:	08020fb4 	.word	0x08020fb4
 8005f3c:	0801fed4 	.word	0x0801fed4

08005f40 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>:
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	370c      	adds	r7, #12
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr

08005f56 <_ZN5Eigen8internal20scalar_difference_opIffEC1Ev>:
template<typename LhsScalar,typename RhsScalar>
struct scalar_difference_op : binary_op_base<LhsScalar,RhsScalar>
{
  typedef typename ScalarBinaryOpTraits<LhsScalar,RhsScalar,scalar_difference_op>::ReturnType result_type;
#ifndef EIGEN_SCALAR_BINARY_OP_PLUGIN
  EIGEN_EMPTY_STRUCT_CTOR(scalar_difference_op)
 8005f56:	b480      	push	{r7}
 8005f58:	b083      	sub	sp, #12
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4618      	mov	r0, r3
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEC1Ev>:
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 fda1 	bl	8006abc <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEC1Ev>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3708      	adds	r7, #8
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f7ff ffed 	bl	8005f6c <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEC1Ev>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4618      	mov	r0, r3
 8005f96:	3708      	adds	r7, #8
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f7ff f802 	bl	8004fb2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3708      	adds	r7, #8
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f7fe fecd 	bl	8004d64 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3708      	adds	r7, #8
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8005fd4:	b590      	push	{r4, r7, lr}
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	607a      	str	r2, [r7, #4]
 8005fe0:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8005fe2:	68f8      	ldr	r0, [r7, #12]
 8005fe4:	f7ff ffce 	bl	8005f84 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS_5DenseEEC1Ev>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	601a      	str	r2, [r3, #0]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	3304      	adds	r3, #4
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005ff8:	e883 0003 	stmia.w	r3, {r0, r1}
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	330c      	adds	r3, #12
 8006000:	6839      	ldr	r1, [r7, #0]
 8006002:	4618      	mov	r0, r3
 8006004:	f000 f828 	bl	8006058 <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	4618      	mov	r0, r3
 800600c:	f7ff fdff 	bl	8005c0e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8006010:	4604      	mov	r4, r0
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7ff ffc2 	bl	8005f9c <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>
 8006018:	4603      	mov	r3, r0
 800601a:	429c      	cmp	r4, r3
 800601c:	d10a      	bne.n	8006034 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x60>
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	4618      	mov	r0, r3
 8006022:	f7ff fdff 	bl	8005c24 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8006026:	4604      	mov	r4, r0
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f7ff ffc5 	bl	8005fb8 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>
 800602e:	4603      	mov	r3, r0
 8006030:	429c      	cmp	r4, r3
 8006032:	d005      	beq.n	8006040 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x6c>
 8006034:	4b05      	ldr	r3, [pc, #20]	; (800604c <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x78>)
 8006036:	4a06      	ldr	r2, [pc, #24]	; (8006050 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x7c>)
 8006038:	2174      	movs	r1, #116	; 0x74
 800603a:	4806      	ldr	r0, [pc, #24]	; (8006054 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x80>)
 800603c:	f017 fd0e 	bl	801da5c <__assert_func>
    }
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	4618      	mov	r0, r3
 8006044:	3714      	adds	r7, #20
 8006046:	46bd      	mov	sp, r7
 8006048:	bd90      	pop	{r4, r7, pc}
 800604a:	bf00      	nop
 800604c:	0801f8c4 	.word	0x0801f8c4
 8006050:	080210dc 	.word	0x080210dc
 8006054:	0801fb28 	.word	0x0801fb28

08006058 <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>:
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4618      	mov	r0, r3
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEE7derivedEv>:
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4618      	mov	r0, r3
 800607c:	370c      	adds	r7, #12
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr

08006086 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEC1Ev>:
 8006086:	b580      	push	{r7, lr}
 8006088:	b082      	sub	sp, #8
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 fd1f 	bl	8006ad2 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEC1Ev>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4618      	mov	r0, r3
 8006098:	3708      	adds	r7, #8
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0ELi4EEC1Ev>:
class dense_product_base
 800609e:	b580      	push	{r7, lr}
 80060a0:	b082      	sub	sp, #8
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f7ff ffed 	bl	8006086 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEC1Ev>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4618      	mov	r0, r3
 80060b0:	3708      	adds	r7, #8
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b082      	sub	sp, #8
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7ff ffed 	bl	800609e <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0ELi4EEC1Ev>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4618      	mov	r0, r3
 80060c8:	3708      	adds	r7, #8
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}

080060ce <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b082      	sub	sp, #8
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4618      	mov	r0, r3
 80060dc:	f7ff fd97 	bl	8005c0e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 80060e0:	4603      	mov	r3, r0
    }
 80060e2:	4618      	mov	r0, r3
 80060e4:	3708      	adds	r7, #8
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
	...

080060ec <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 80060ec:	b590      	push	{r4, r7, lr}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f7ff ffdc 	bl	80060b6 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0ENS_5DenseEEC1Ev>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	68ba      	ldr	r2, [r7, #8]
 8006102:	601a      	str	r2, [r3, #0]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	3304      	adds	r3, #4
 8006108:	6879      	ldr	r1, [r7, #4]
 800610a:	4618      	mov	r0, r3
 800610c:	f7fe fb6b 	bl	80047e6 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERKSC_>
      eigen_assert(lhs.cols() == rhs.rows()
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	4618      	mov	r0, r3
 8006114:	f7fe fe26 	bl	8004d64 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8006118:	4604      	mov	r4, r0
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f7ff ffd7 	bl	80060ce <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4rowsEv>
 8006120:	4603      	mov	r3, r0
 8006122:	429c      	cmp	r4, r3
 8006124:	d005      	beq.n	8006132 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_+0x46>
 8006126:	4b06      	ldr	r3, [pc, #24]	; (8006140 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_+0x54>)
 8006128:	4a06      	ldr	r2, [pc, #24]	; (8006144 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_+0x58>)
 800612a:	2160      	movs	r1, #96	; 0x60
 800612c:	4806      	ldr	r0, [pc, #24]	; (8006148 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_+0x5c>)
 800612e:	f017 fc95 	bl	801da5c <__assert_func>
 8006132:	bf00      	nop
    }
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	4618      	mov	r0, r3
 8006138:	3714      	adds	r7, #20
 800613a:	46bd      	mov	sp, r7
 800613c:	bd90      	pop	{r4, r7, pc}
 800613e:	bf00      	nop
 8006140:	0801fb84 	.word	0x0801fb84
 8006144:	080212d4 	.word	0x080212d4
 8006148:	0801fed4 	.word	0x0801fed4

0800614c <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEE7derivedEv>:
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4618      	mov	r0, r3
 8006158:	370c      	adds	r7, #12
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr

08006162 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEEC1Ev>:
 8006162:	b580      	push	{r7, lr}
 8006164:	b082      	sub	sp, #8
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 fcbc 	bl	8006ae8 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEEC1Ev>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4618      	mov	r0, r3
 8006174:	3708      	adds	r7, #8
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS_13CwiseBinaryOpINS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800617a:	b580      	push	{r7, lr}
 800617c:	b082      	sub	sp, #8
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f7ff ffed 	bl	8006162 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEEC1Ev>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4618      	mov	r0, r3
 800618c:	3708      	adds	r7, #8
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}

08006192 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8006192:	b580      	push	{r7, lr}
 8006194:	b082      	sub	sp, #8
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4618      	mov	r0, r3
 80061a0:	f7fe fdeb 	bl	8004d7a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80061a4:	4603      	mov	r3, r0
 80061a6:	4618      	mov	r0, r3
 80061a8:	3708      	adds	r7, #8
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b082      	sub	sp, #8
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	3304      	adds	r3, #4
 80061ba:	4618      	mov	r0, r3
 80061bc:	f000 fc9f 	bl	8006afe <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4colsEv>
 80061c0:	4603      	mov	r3, r0
 80061c2:	4618      	mov	r0, r3
 80061c4:	3708      	adds	r7, #8
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
	...

080061cc <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 80061cc:	b590      	push	{r4, r7, lr}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	607a      	str	r2, [r7, #4]
 80061d8:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	f7ff ffcd 	bl	800617a <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS_13CwiseBinaryOpINS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEENS_5DenseEEC1Ev>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	68ba      	ldr	r2, [r7, #8]
 80061e4:	601a      	str	r2, [r3, #0]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	3304      	adds	r3, #4
 80061ea:	6879      	ldr	r1, [r7, #4]
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7fe fb30 	bl	8004852 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKSD_>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	3318      	adds	r3, #24
 80061f6:	6839      	ldr	r1, [r7, #0]
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7ff fb2f 	bl	800585c <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	4618      	mov	r0, r3
 8006202:	f7fe fdba 	bl	8004d7a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8006206:	4604      	mov	r4, r0
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f7ff ffc2 	bl	8006192 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4rowsEv>
 800620e:	4603      	mov	r3, r0
 8006210:	429c      	cmp	r4, r3
 8006212:	d10a      	bne.n	800622a <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x5e>
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	4618      	mov	r0, r3
 8006218:	f7fe fda4 	bl	8004d64 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800621c:	4604      	mov	r4, r0
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f7ff ffc5 	bl	80061ae <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4colsEv>
 8006224:	4603      	mov	r3, r0
 8006226:	429c      	cmp	r4, r3
 8006228:	d005      	beq.n	8006236 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x6a>
 800622a:	4b05      	ldr	r3, [pc, #20]	; (8006240 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x74>)
 800622c:	4a05      	ldr	r2, [pc, #20]	; (8006244 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x78>)
 800622e:	2174      	movs	r1, #116	; 0x74
 8006230:	4805      	ldr	r0, [pc, #20]	; (8006248 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x7c>)
 8006232:	f017 fc13 	bl	801da5c <__assert_func>
    }
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	4618      	mov	r0, r3
 800623a:	3714      	adds	r7, #20
 800623c:	46bd      	mov	sp, r7
 800623e:	bd90      	pop	{r4, r7, pc}
 8006240:	0801f8c4 	.word	0x0801f8c4
 8006244:	08021540 	.word	0x08021540
 8006248:	0801fb28 	.word	0x0801fb28

0800624c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 800624c:	b590      	push	{r4, r7, lr}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f7ff f820 	bl	800529c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800625c:	4604      	mov	r4, r0
 800625e:	6838      	ldr	r0, [r7, #0]
 8006260:	f000 fc5b 	bl	8006b1a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEE7derivedEv>
 8006264:	4603      	mov	r3, r0
 8006266:	4619      	mov	r1, r3
 8006268:	4620      	mov	r0, r4
 800626a:	f000 fc61 	bl	8006b30 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEEEEvRT_RKT0_>
      return this->derived();
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f7ff f814 	bl	800529c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8006274:	4603      	mov	r3, r0
    }
 8006276:	4618      	mov	r0, r3
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	bd90      	pop	{r4, r7, pc}

0800627e <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1Ev>:
 800627e:	b580      	push	{r7, lr}
 8006280:	b082      	sub	sp, #8
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 fc67 	bl	8006b5a <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1Ev>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4618      	mov	r0, r3
 8006290:	3708      	adds	r7, #8
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0ELi4EEC1Ev>:
class dense_product_base
 8006296:	b580      	push	{r7, lr}
 8006298:	b082      	sub	sp, #8
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f7ff ffed 	bl	800627e <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1Ev>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4618      	mov	r0, r3
 80062a8:	3708      	adds	r7, #8
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b082      	sub	sp, #8
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f7ff ffed 	bl	8006296 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0ELi4EEC1Ev>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4618      	mov	r0, r3
 80062c0:	3708      	adds	r7, #8
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
	...

080062c8 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 80062c8:	b590      	push	{r4, r7, lr}
 80062ca:	b085      	sub	sp, #20
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	f7ff ffea 	bl	80062ae <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0ENS_5DenseEEC1Ev>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	601a      	str	r2, [r3, #0]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	4618      	mov	r0, r3
 80062ea:	f7fe fd3b 	bl	8004d64 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80062ee:	4604      	mov	r4, r0
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7fe fe5d 	bl	8004fb2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 80062f8:	4603      	mov	r3, r0
 80062fa:	429c      	cmp	r4, r3
 80062fc:	d005      	beq.n	800630a <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_+0x42>
 80062fe:	4b06      	ldr	r3, [pc, #24]	; (8006318 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_+0x50>)
 8006300:	4a06      	ldr	r2, [pc, #24]	; (800631c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_+0x54>)
 8006302:	2160      	movs	r1, #96	; 0x60
 8006304:	4806      	ldr	r0, [pc, #24]	; (8006320 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_+0x58>)
 8006306:	f017 fba9 	bl	801da5c <__assert_func>
 800630a:	bf00      	nop
    }
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	4618      	mov	r0, r3
 8006310:	3714      	adds	r7, #20
 8006312:	46bd      	mov	sp, r7
 8006314:	bd90      	pop	{r4, r7, pc}
 8006316:	bf00      	nop
 8006318:	0801fb84 	.word	0x0801fb84
 800631c:	08021874 	.word	0x08021874
 8006320:	0801fed4 	.word	0x0801fed4

08006324 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE7derivedEv>:
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4618      	mov	r0, r3
 8006330:	370c      	adds	r7, #12
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr

0800633a <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEC1Ev>:
 800633a:	b580      	push	{r7, lr}
 800633c:	b082      	sub	sp, #8
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 fc14 	bl	8006b70 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEC1Ev>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4618      	mov	r0, r3
 800634c:	3708      	adds	r7, #8
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8006352:	b580      	push	{r7, lr}
 8006354:	b082      	sub	sp, #8
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f7ff ffed 	bl	800633a <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEC1Ev>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4618      	mov	r0, r3
 8006364:	3708      	adds	r7, #8
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800636a:	b580      	push	{r7, lr}
 800636c:	b082      	sub	sp, #8
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4618      	mov	r0, r3
 8006378:	f7fe fcff 	bl	8004d7a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800637c:	4603      	mov	r3, r0
 800637e:	4618      	mov	r0, r3
 8006380:	3708      	adds	r7, #8
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8006386:	b580      	push	{r7, lr}
 8006388:	b082      	sub	sp, #8
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	4618      	mov	r0, r3
 8006394:	f7fe fe02 	bl	8004f9c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8006398:	4603      	mov	r3, r0
 800639a:	4618      	mov	r0, r3
 800639c:	3708      	adds	r7, #8
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
	...

080063a4 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 80063a4:	b590      	push	{r4, r7, lr}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	607a      	str	r2, [r7, #4]
 80063b0:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 80063b2:	68f8      	ldr	r0, [r7, #12]
 80063b4:	f7ff ffcd 	bl	8006352 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS_5DenseEEC1Ev>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	68ba      	ldr	r2, [r7, #8]
 80063bc:	601a      	str	r2, [r3, #0]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	3304      	adds	r3, #4
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80063c8:	e883 0003 	stmia.w	r3, {r0, r1}
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	330c      	adds	r3, #12
 80063d0:	6839      	ldr	r1, [r7, #0]
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7ff fe40 	bl	8006058 <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	4618      	mov	r0, r3
 80063dc:	f7fe fc27 	bl	8004c2e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80063e0:	4604      	mov	r4, r0
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f7ff ffc1 	bl	800636a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4rowsEv>
 80063e8:	4603      	mov	r3, r0
 80063ea:	429c      	cmp	r4, r3
 80063ec:	d10a      	bne.n	8006404 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x60>
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7fe fc11 	bl	8004c18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80063f6:	4604      	mov	r4, r0
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f7ff ffc4 	bl	8006386 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4colsEv>
 80063fe:	4603      	mov	r3, r0
 8006400:	429c      	cmp	r4, r3
 8006402:	d005      	beq.n	8006410 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x6c>
 8006404:	4b05      	ldr	r3, [pc, #20]	; (800641c <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x78>)
 8006406:	4a06      	ldr	r2, [pc, #24]	; (8006420 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x7c>)
 8006408:	2174      	movs	r1, #116	; 0x74
 800640a:	4806      	ldr	r0, [pc, #24]	; (8006424 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x80>)
 800640c:	f017 fb26 	bl	801da5c <__assert_func>
    }
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	4618      	mov	r0, r3
 8006414:	3714      	adds	r7, #20
 8006416:	46bd      	mov	sp, r7
 8006418:	bd90      	pop	{r4, r7, pc}
 800641a:	bf00      	nop
 800641c:	0801f8c4 	.word	0x0801f8c4
 8006420:	0802199c 	.word	0x0802199c
 8006424:	0801fb28 	.word	0x0801fb28

08006428 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE7derivedEv>:
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4618      	mov	r0, r3
 8006434:	370c      	adds	r7, #12
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr

0800643e <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEEC1Ev>:
 800643e:	b580      	push	{r7, lr}
 8006440:	b082      	sub	sp, #8
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 fb9d 	bl	8006b86 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEEC1Ev>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4618      	mov	r0, r3
 8006450:	3708      	adds	r7, #8
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}

08006456 <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0ELi3EEC1Ev>:
class dense_product_base
 8006456:	b580      	push	{r7, lr}
 8006458:	b082      	sub	sp, #8
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f7ff ffed 	bl	800643e <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEEC1Ev>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4618      	mov	r0, r3
 8006468:	3708      	adds	r7, #8
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}

0800646e <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800646e:	b580      	push	{r7, lr}
 8006470:	b082      	sub	sp, #8
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f7ff ffed 	bl	8006456 <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0ELi3EEC1Ev>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4618      	mov	r0, r3
 8006480:	3708      	adds	r7, #8
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8006486:	b580      	push	{r7, lr}
 8006488:	b082      	sub	sp, #8
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4618      	mov	r0, r3
 8006494:	f7fe fbc0 	bl	8004c18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8006498:	4603      	mov	r3, r0
    }
 800649a:	4618      	mov	r0, r3
 800649c:	3708      	adds	r7, #8
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
	...

080064a4 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 80064a4:	b590      	push	{r4, r7, lr}
 80064a6:	b085      	sub	sp, #20
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	607a      	str	r2, [r7, #4]
 80064b0:	68f8      	ldr	r0, [r7, #12]
 80064b2:	f7ff ffdc 	bl	800646e <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0ENS_5DenseEEC1Ev>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	68b9      	ldr	r1, [r7, #8]
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7fe fa41 	bl	8004942 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERKSC_>
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	611a      	str	r2, [r3, #16]
      eigen_assert(lhs.cols() == rhs.rows()
 80064c6:	68b8      	ldr	r0, [r7, #8]
 80064c8:	f7ff ffdd 	bl	8006486 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4colsEv>
 80064cc:	4604      	mov	r4, r0
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4618      	mov	r0, r3
 80064d2:	f7fe fbac 	bl	8004c2e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80064d6:	4603      	mov	r3, r0
 80064d8:	429c      	cmp	r4, r3
 80064da:	d005      	beq.n	80064e8 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_+0x44>
 80064dc:	4b05      	ldr	r3, [pc, #20]	; (80064f4 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_+0x50>)
 80064de:	4a06      	ldr	r2, [pc, #24]	; (80064f8 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_+0x54>)
 80064e0:	2160      	movs	r1, #96	; 0x60
 80064e2:	4806      	ldr	r0, [pc, #24]	; (80064fc <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_+0x58>)
 80064e4:	f017 faba 	bl	801da5c <__assert_func>
 80064e8:	bf00      	nop
    }
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	4618      	mov	r0, r3
 80064ee:	3714      	adds	r7, #20
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd90      	pop	{r4, r7, pc}
 80064f4:	0801fb84 	.word	0x0801fb84
 80064f8:	08021b94 	.word	0x08021b94
 80064fc:	0801fed4 	.word	0x0801fed4

08006500 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8006500:	b590      	push	{r4, r7, lr}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f7ff f862 	bl	80055d4 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8006510:	4604      	mov	r4, r0
 8006512:	6838      	ldr	r0, [r7, #0]
 8006514:	f000 fb42 	bl	8006b9c <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEE7derivedEv>
 8006518:	4603      	mov	r3, r0
 800651a:	4619      	mov	r1, r3
 800651c:	4620      	mov	r0, r4
 800651e:	f000 fb48 	bl	8006bb2 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEEEEvRT_RKT0_>
      return this->derived();
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f7ff f856 	bl	80055d4 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8006528:	4603      	mov	r3, r0
    }
 800652a:	4618      	mov	r0, r3
 800652c:	370c      	adds	r7, #12
 800652e:	46bd      	mov	sp, r7
 8006530:	bd90      	pop	{r4, r7, pc}

08006532 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>:
    }

  protected:
    EIGEN_DEFAULT_COPY_CONSTRUCTOR(DenseBase)
    /** Default constructor. Do nothing. */
    EIGEN_DEVICE_FUNC DenseBase()
 8006532:	b480      	push	{r7}
 8006534:	b083      	sub	sp, #12
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
#ifdef EIGEN_INTERNAL_DEBUGGING
      EIGEN_STATIC_ASSERT((EIGEN_IMPLIES(MaxRowsAtCompileTime==1 && MaxColsAtCompileTime!=1, int(IsRowMajor))
                        && EIGEN_IMPLIES(MaxColsAtCompileTime==1 && MaxRowsAtCompileTime!=1, int(!IsRowMajor))),
                          INVALID_STORAGE_ORDER_FOR_THIS_VECTOR_EXPRESSION)
#endif
    }
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4618      	mov	r0, r3
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EEC1Ev>:
// purely fixed-size matrix
template<typename T, int Size, int _Rows, int _Cols, int _Options> class DenseStorage
{
    internal::plain_array<T,Size,_Options> m_data;
  public:
    EIGEN_DEVICE_FUNC DenseStorage() {
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4618      	mov	r0, r3
 8006554:	f000 fb42 	bl	8006bdc <_ZN5Eigen8internal11plain_arrayIfLi9ELi0ELi0EEC1Ev>
      EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN(Index size = Size)
    }
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4618      	mov	r0, r3
 800655c:	3708      	adds	r7, #8
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006562:	b480      	push	{r7}
 8006564:	b083      	sub	sp, #12
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
    }
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4618      	mov	r0, r3
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EEC1Ev>:
    EIGEN_DEVICE_FUNC DenseStorage() {
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4618      	mov	r0, r3
 8006584:	f000 fb35 	bl	8006bf2 <_ZN5Eigen8internal11plain_arrayIfLi1ELi0ELi0EEC1Ev>
    }
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4618      	mov	r0, r3
 800658c:	3708      	adds	r7, #8
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}

08006592 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006592:	b480      	push	{r7}
 8006594:	b083      	sub	sp, #12
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
    }
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4618      	mov	r0, r3
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EEC1Ev>:
    EIGEN_DEVICE_FUNC DenseStorage() {
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4618      	mov	r0, r3
 80065b4:	f000 fb28 	bl	8006c08 <_ZN5Eigen8internal11plain_arrayIfLi3ELi0ELi0EEC1Ev>
    }
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4618      	mov	r0, r3
 80065bc:	3708      	adds	r7, #8
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}

080065c2 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80065c2:	b480      	push	{r7}
 80065c4:	b083      	sub	sp, #12
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
    }
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4618      	mov	r0, r3
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EEC1Ev>:
    EIGEN_DEVICE_FUNC DenseStorage() {
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4618      	mov	r0, r3
 80065e4:	f000 fb1b 	bl	8006c1e <_ZN5Eigen8internal11plain_arrayIfLi3ELi1ELi0EEC1Ev>
    }
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4618      	mov	r0, r3
 80065ec:	3708      	adds	r7, #8
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4colsEv>:
    }
    EIGEN_DEVICE_FUNC void swap(DenseStorage& other) {
      numext::swap(m_data, other.m_data);
    }
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 80065f2:	b480      	push	{r7}
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	2303      	movs	r3, #3
 80065f8:	4618      	mov	r0, r3
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr

08006602 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 8006602:	b480      	push	{r7}
 8006604:	af00      	add	r7, sp, #0
 8006606:	2303      	movs	r3, #3
 8006608:	4618      	mov	r0, r3
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr

08006612 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC void conservativeResize(Index,Index,Index) {}
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
 8006612:	b480      	push	{r7}
 8006614:	b083      	sub	sp, #12
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4618      	mov	r0, r3
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4colsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 8006628:	b480      	push	{r7}
 800662a:	af00      	add	r7, sp, #0
 800662c:	2301      	movs	r3, #1
 800662e:	4618      	mov	r0, r3
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 8006638:	b480      	push	{r7}
 800663a:	af00      	add	r7, sp, #0
 800663c:	2303      	movs	r3, #3
 800663e:	4618      	mov	r0, r3
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4618      	mov	r0, r3
 8006654:	370c      	adds	r7, #12
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr

0800665e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)
 800665e:	b590      	push	{r4, r7, lr}
 8006660:	b085      	sub	sp, #20
 8006662:	af00      	add	r7, sp, #0
 8006664:	60f8      	str	r0, [r7, #12]
 8006666:	60b9      	str	r1, [r7, #8]
 8006668:	607a      	str	r2, [r7, #4]
        return m_storage.data()[rowId + colId * m_storage.rows()];
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	4618      	mov	r0, r3
 800666e:	f000 fae1 	bl	8006c34 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4dataEv>
 8006672:	4604      	mov	r4, r0
 8006674:	f000 f9d1 	bl	8006a1a <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4rowsEv>
 8006678:	4602      	mov	r2, r0
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	fb03 f202 	mul.w	r2, r3, r2
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	4413      	add	r3, r2
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	4423      	add	r3, r4
    }
 8006688:	4618      	mov	r0, r3
 800668a:	3714      	adds	r7, #20
 800668c:	46bd      	mov	sp, r7
 800668e:	bd90      	pop	{r4, r7, pc}

08006690 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4colsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 8006690:	b480      	push	{r7}
 8006692:	af00      	add	r7, sp, #0
 8006694:	2303      	movs	r3, #3
 8006696:	4618      	mov	r0, r3
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 80066a0:	b480      	push	{r7}
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	2301      	movs	r3, #1
 80066a6:	4618      	mov	r0, r3
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4dataEv>:
    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4618      	mov	r0, r3
 80066bc:	370c      	adds	r7, #12
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr

080066c6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>:

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  evaluator() {}

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  explicit evaluator(const XprType& m)
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b082      	sub	sp, #8
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
 80066ce:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	683a      	ldr	r2, [r7, #0]
 80066d4:	4611      	mov	r1, r2
 80066d6:	4618      	mov	r0, r3
 80066d8:	f000 fab7 	bl	8006c4a <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS5_>
  { }
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4618      	mov	r0, r3
 80066e0:	3708      	adds	r7, #8
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}

080066e6 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 80066e6:	b480      	push	{r7}
 80066e8:	b083      	sub	sp, #12
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4618      	mov	r0, r3
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEii>:
  Scalar& coeffRef(Index row, Index col)
 80066fc:	b590      	push	{r4, r7, lr}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	607a      	str	r2, [r7, #4]
      return const_cast<Scalar*>(m_d.data)[row + col * m_d.outerStride()];
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681c      	ldr	r4, [r3, #0]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	4618      	mov	r0, r3
 8006710:	f000 fab2 	bl	8006c78 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>
 8006714:	4602      	mov	r2, r0
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	fb03 f202 	mul.w	r2, r3, r2
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	4413      	add	r3, r2
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	4423      	add	r3, r4
  }
 8006724:	4618      	mov	r0, r3
 8006726:	3714      	adds	r7, #20
 8006728:	46bd      	mov	sp, r7
 800672a:	bd90      	pop	{r4, r7, pc}

0800672c <_ZN5Eigen9DenseBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
    }
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4618      	mov	r0, r3
 8006738:	370c      	adds	r7, #12
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
	...

08006744 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>:
  */
template<typename T, int Value> class variable_if_dynamic
{
  public:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(variable_if_dynamic)
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_DEBUG(v); eigen_assert(v == T(Value)); }
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	2b03      	cmp	r3, #3
 8006752:	d005      	beq.n	8006760 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei+0x1c>
 8006754:	4b05      	ldr	r3, [pc, #20]	; (800676c <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei+0x28>)
 8006756:	4a06      	ldr	r2, [pc, #24]	; (8006770 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei+0x2c>)
 8006758:	2185      	movs	r1, #133	; 0x85
 800675a:	4806      	ldr	r0, [pc, #24]	; (8006774 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei+0x30>)
 800675c:	f017 f97e 	bl	801da5c <__assert_func>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4618      	mov	r0, r3
 8006764:	3708      	adds	r7, #8
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	08021e00 	.word	0x08021e00
 8006770:	08021e10 	.word	0x08021e10
 8006774:	08021e78 	.word	0x08021e78

08006778 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>:
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	2b01      	cmp	r3, #1
 8006786:	d005      	beq.n	8006794 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei+0x1c>
 8006788:	4b05      	ldr	r3, [pc, #20]	; (80067a0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei+0x28>)
 800678a:	4a06      	ldr	r2, [pc, #24]	; (80067a4 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei+0x2c>)
 800678c:	2185      	movs	r1, #133	; 0x85
 800678e:	4806      	ldr	r0, [pc, #24]	; (80067a8 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei+0x30>)
 8006790:	f017 f964 	bl	801da5c <__assert_func>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4618      	mov	r0, r3
 8006798:	3708      	adds	r7, #8
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop
 80067a0:	08021e00 	.word	0x08021e00
 80067a4:	08021ed4 	.word	0x08021ed4
 80067a8:	08021e78 	.word	0x08021e78

080067ac <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
    }
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4618      	mov	r0, r3
 80067b8:	370c      	adds	r7, #12
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr

080067c2 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>:
    EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
    T value() { return T(Value); }
 80067c2:	b480      	push	{r7}
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	2303      	movs	r3, #3
 80067c8:	4618      	mov	r0, r3
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr

080067d2 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>:
 80067d2:	b480      	push	{r7}
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	2301      	movs	r3, #1
 80067d8:	4618      	mov	r0, r3
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr

080067e2 <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80067e2:	b480      	push	{r7}
 80067e4:	b083      	sub	sp, #12
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
    }
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4618      	mov	r0, r3
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
    }
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4618      	mov	r0, r3
 8006804:	370c      	adds	r7, #12
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr

0800680e <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEE7derivedEv>:
 800680e:	b480      	push	{r7}
 8006810:	b083      	sub	sp, #12
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4618      	mov	r0, r3
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEEvRT_RKT0_>:
// So this intermediate function removes everything related to "assume-aliasing" such that Assignment
// does not has to bother about these annoying details.

template<typename Dst, typename Src>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
void call_assignment(Dst& dst, const Src& src)
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
{
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 800682e:	f107 030c 	add.w	r3, r7, #12
 8006832:	4618      	mov	r0, r3
 8006834:	f000 fa2b 	bl	8006c8e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006838:	f107 020c 	add.w	r2, r7, #12
 800683c:	2300      	movs	r3, #0
 800683e:	6839      	ldr	r1, [r7, #0]
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 fa2f 	bl	8006ca4 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISN_NS0_16evaluator_traitsISN_E5ShapeEEE5valueEPvE4typeE>
}
 8006846:	bf00      	nop
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800684e:	b480      	push	{r7}
 8006850:	b083      	sub	sp, #12
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
    }
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4618      	mov	r0, r3
 800685a:	370c      	adds	r7, #12
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>:
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4618      	mov	r0, r3
 8006870:	370c      	adds	r7, #12
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr

0800687a <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 800687a:	b580      	push	{r7, lr}
 800687c:	b084      	sub	sp, #16
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
 8006882:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 8006884:	f107 030c 	add.w	r3, r7, #12
 8006888:	4618      	mov	r0, r3
 800688a:	f000 fa00 	bl	8006c8e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800688e:	f107 020c 	add.w	r2, r7, #12
 8006892:	2300      	movs	r3, #0
 8006894:	6839      	ldr	r1, [r7, #0]
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 fa1c 	bl	8006cd4 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISB_NS0_16evaluator_traitsISB_E5ShapeEEE5valueEPvE4typeE>
}
 800689c:	bf00      	nop
 800689e:	3710      	adds	r7, #16
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
    }
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4618      	mov	r0, r3
 80068b0:	370c      	adds	r7, #12
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr

080068ba <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80068ba:	b480      	push	{r7}
 80068bc:	b083      	sub	sp, #12
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
    }
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4618      	mov	r0, r3
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
    }
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4618      	mov	r0, r3
 80068dc:	370c      	adds	r7, #12
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr

080068e6 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80068e6:	b480      	push	{r7}
 80068e8:	b083      	sub	sp, #12
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
    }
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4618      	mov	r0, r3
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4618      	mov	r0, r3
 800690a:	f7fe f990 	bl	8004c2e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800690e:	4603      	mov	r3, r0
 8006910:	4618      	mov	r0, r3
 8006912:	3708      	adds	r7, #8
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4618      	mov	r0, r3
 8006926:	f7fe f982 	bl	8004c2e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800692a:	4603      	mov	r3, r0
 800692c:	4618      	mov	r0, r3
 800692e:	3708      	adds	r7, #8
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEE7derivedEv>:
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4618      	mov	r0, r3
 8006940:	370c      	adds	r7, #12
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr

0800694a <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 800694a:	b580      	push	{r7, lr}
 800694c:	b084      	sub	sp, #16
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
 8006952:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 8006954:	f107 030c 	add.w	r3, r7, #12
 8006958:	4618      	mov	r0, r3
 800695a:	f000 f998 	bl	8006c8e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800695e:	f107 020c 	add.w	r2, r7, #12
 8006962:	2300      	movs	r3, #0
 8006964:	6839      	ldr	r1, [r7, #0]
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f9cc 	bl	8006d04 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXntsrNS0_25evaluator_assume_aliasingISJ_NS0_16evaluator_traitsISJ_E5ShapeEEE5valueEPvE4typeE>
}
 800696c:	bf00      	nop
 800696e:	3710      	adds	r7, #16
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
    }
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4618      	mov	r0, r3
 8006980:	370c      	adds	r7, #12
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr

0800698a <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800698a:	b480      	push	{r7}
 800698c:	b083      	sub	sp, #12
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
    }
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4618      	mov	r0, r3
 8006996:	370c      	adds	r7, #12
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
    }
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4618      	mov	r0, r3
 80069ac:	370c      	adds	r7, #12
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr

080069b6 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80069b6:	b480      	push	{r7}
 80069b8:	b083      	sub	sp, #12
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
    }
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4618      	mov	r0, r3
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
    }
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4618      	mov	r0, r3
 80069d8:	370c      	adds	r7, #12
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr

080069e2 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4rowsEv>:
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b082      	sub	sp, #8
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7fe fadf 	bl	8004fb2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 80069f4:	4603      	mov	r3, r0
 80069f6:	4618      	mov	r0, r3
 80069f8:	3708      	adds	r7, #8
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}

080069fe <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>:
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b082      	sub	sp, #8
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7fe fad1 	bl	8004fb2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8006a10:	4603      	mov	r3, r0
 8006a12:	4618      	mov	r0, r3
 8006a14:	3708      	adds	r7, #8
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 8006a1a:	b480      	push	{r7}
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	2301      	movs	r3, #1
 8006a20:	4618      	mov	r0, r3
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr

08006a2a <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4colsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 8006a2a:	b480      	push	{r7}
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	2301      	movs	r3, #1
 8006a30:	4618      	mov	r0, r3
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr

08006a3a <_ZN5Eigen9DenseBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006a3a:	b480      	push	{r7}
 8006a3c:	b083      	sub	sp, #12
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
    }
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4618      	mov	r0, r3
 8006a46:	370c      	adds	r7, #12
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
    }
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	370c      	adds	r7, #12
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr

08006a66 <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEE7derivedEv>:
 8006a66:	b480      	push	{r7}
 8006a68:	b083      	sub	sp, #12
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4618      	mov	r0, r3
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 8006a86:	f107 030c 	add.w	r3, r7, #12
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f000 f8ff 	bl	8006c8e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006a90:	f107 020c 	add.w	r2, r7, #12
 8006a94:	2300      	movs	r3, #0
 8006a96:	6839      	ldr	r1, [r7, #0]
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 f943 	bl	8006d24 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISQ_NS0_16evaluator_traitsISQ_E5ShapeEEE5valueEPvE4typeE>
}
 8006a9e:	bf00      	nop
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006aa6:	b480      	push	{r7}
 8006aa8:	b083      	sub	sp, #12
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
    }
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
    }
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	370c      	adds	r7, #12
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr

08006ad2 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006ad2:	b480      	push	{r7}
 8006ad4:	b083      	sub	sp, #12
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
    }
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4618      	mov	r0, r3
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
    }
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4618      	mov	r0, r3
 8006af4:	370c      	adds	r7, #12
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr

08006afe <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b082      	sub	sp, #8
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f7ff f88a 	bl	8005c24 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8006b10:	4603      	mov	r3, r0
    }
 8006b12:	4618      	mov	r0, r3
 8006b14:	3708      	adds	r7, #8
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEE7derivedEv>:
 8006b1a:	b480      	push	{r7}
 8006b1c:	b083      	sub	sp, #12
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4618      	mov	r0, r3
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 8006b3a:	f107 030c 	add.w	r3, r7, #12
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f000 f8a5 	bl	8006c8e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006b44:	f107 020c 	add.w	r2, r7, #12
 8006b48:	2300      	movs	r3, #0
 8006b4a:	6839      	ldr	r1, [r7, #0]
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 f901 	bl	8006d54 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISO_NS0_16evaluator_traitsISO_E5ShapeEEE5valueEPvE4typeE>
}
 8006b52:	bf00      	nop
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006b5a:	b480      	push	{r7}
 8006b5c:	b083      	sub	sp, #12
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
    }
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4618      	mov	r0, r3
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
    }
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	370c      	adds	r7, #12
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr

08006b86 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006b86:	b480      	push	{r7}
 8006b88:	b083      	sub	sp, #12
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
    }
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4618      	mov	r0, r3
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEE7derivedEv>:
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	370c      	adds	r7, #12
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr

08006bb2 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b084      	sub	sp, #16
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
 8006bba:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 8006bbc:	f107 030c 	add.w	r3, r7, #12
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f000 f864 	bl	8006c8e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006bc6:	f107 020c 	add.w	r2, r7, #12
 8006bca:	2300      	movs	r3, #0
 8006bcc:	6839      	ldr	r1, [r7, #0]
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 f8d8 	bl	8006d84 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISJ_NS0_16evaluator_traitsISJ_E5ShapeEEE5valueEPvE4typeE>
}
 8006bd4:	bf00      	nop
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <_ZN5Eigen8internal11plain_arrayIfLi9ELi0ELi0EEC1Ev>:
  plain_array()
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 8006be4:	f000 f8e6 	bl	8006db4 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi9EEEvv>
  }
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4618      	mov	r0, r3
 8006bec:	3708      	adds	r7, #8
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <_ZN5Eigen8internal11plain_arrayIfLi1ELi0ELi0EEC1Ev>:
  plain_array()
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b082      	sub	sp, #8
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 8006bfa:	f000 f8e2 	bl	8006dc2 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi1EEEvv>
  }
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4618      	mov	r0, r3
 8006c02:	3708      	adds	r7, #8
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <_ZN5Eigen8internal11plain_arrayIfLi3ELi0ELi0EEC1Ev>:
  plain_array()
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 8006c10:	f000 f8de 	bl	8006dd0 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi3EEEvv>
  }
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4618      	mov	r0, r3
 8006c18:	3708      	adds	r7, #8
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <_ZN5Eigen8internal11plain_arrayIfLi3ELi1ELi0EEC1Ev>:
  plain_array()
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b082      	sub	sp, #8
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 8006c26:	f000 f8d3 	bl	8006dd0 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi3EEEvv>
  }
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3708      	adds	r7, #8
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4618      	mov	r0, r3
 8006c40:	370c      	adds	r7, #12
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr

08006c4a <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 8006c4a:	b590      	push	{r4, r7, lr}
 8006c4c:	b083      	sub	sp, #12
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
 8006c52:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 f8cf 	bl	8006df8 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
 8006c5a:	687c      	ldr	r4, [r7, #4]
 8006c5c:	6838      	ldr	r0, [r7, #0]
 8006c5e:	f000 f8be 	bl	8006dde <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2200      	movs	r2, #0
 8006c66:	4619      	mov	r1, r3
 8006c68:	4620      	mov	r0, r4
 8006c6a:	f000 f8d0 	bl	8006e0e <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4618      	mov	r0, r3
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd90      	pop	{r4, r7, pc}

08006c78 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>:
  Index outerStride() const EIGEN_NOEXCEPT { return OuterStride; }
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	2300      	movs	r3, #0
 8006c82:	4618      	mov	r0, r3
 8006c84:	370c      	adds	r7, #12
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr

08006c8e <_ZN5Eigen8internal9assign_opIffEC1Ev>:
  * \brief Template functor for scalar/packet assignment
  *
  */
template<typename DstScalar,typename SrcScalar> struct assign_op {

  EIGEN_EMPTY_STRUCT_CTOR(assign_op)
 8006c8e:	b480      	push	{r7}
 8006c90:	b083      	sub	sp, #12
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4618      	mov	r0, r3
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISN_NS0_16evaluator_traitsISN_E5ShapeEEE5valueEPvE4typeE>:
}

// Deal with "assume-aliasing"
template<typename Dst, typename Src, typename Func>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b08e      	sub	sp, #56	; 0x38
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]
 8006cb0:	603b      	str	r3, [r7, #0]
{
  typename plain_matrix_type<Src>::type tmp(src);
 8006cb2:	f107 0314 	add.w	r3, r7, #20
 8006cb6:	68b9      	ldr	r1, [r7, #8]
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f000 f8ba 	bl	8006e32 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS0_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS5_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 8006cbe:	f107 0314 	add.w	r3, r7, #20
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	f000 f8c8 	bl	8006e5c <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 8006ccc:	bf00      	nop
 8006cce:	3738      	adds	r7, #56	; 0x38
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISB_NS0_16evaluator_traitsISB_E5ShapeEEE5valueEPvE4typeE>:
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b088      	sub	sp, #32
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]
 8006ce0:	603b      	str	r3, [r7, #0]
  typename plain_matrix_type<Src>::type tmp(src);
 8006ce2:	f107 0314 	add.w	r3, r7, #20
 8006ce6:	68b9      	ldr	r1, [r7, #8]
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f000 f8c8 	bl	8006e7e <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEES1_Li0EEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 8006cee:	f107 0314 	add.w	r3, r7, #20
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	68f8      	ldr	r0, [r7, #12]
 8006cf8:	f000 f8d6 	bl	8006ea8 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 8006cfc:	bf00      	nop
 8006cfe:	3720      	adds	r7, #32
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXntsrNS0_25evaluator_assume_aliasingISJ_NS0_16evaluator_traitsISJ_E5ShapeEEE5valueEPvE4typeE>:

template<typename Dst, typename Src, typename Func>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if<!evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	607a      	str	r2, [r7, #4]
 8006d10:	603b      	str	r3, [r7, #0]
{
  call_assignment_no_alias(dst, src, func);
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	68b9      	ldr	r1, [r7, #8]
 8006d16:	68f8      	ldr	r0, [r7, #12]
 8006d18:	f000 f8d7 	bl	8006eca <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 8006d1c:	bf00      	nop
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISQ_NS0_16evaluator_traitsISQ_E5ShapeEEE5valueEPvE4typeE>:
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b088      	sub	sp, #32
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]
 8006d30:	603b      	str	r3, [r7, #0]
  typename plain_matrix_type<Src>::type tmp(src);
 8006d32:	f107 0314 	add.w	r3, r7, #20
 8006d36:	68b9      	ldr	r1, [r7, #8]
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f000 f8d7 	bl	8006eec <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS3_INS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS3_INS3_IS6_S4_Li0EEES7_Li0EEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 8006d3e:	f107 0314 	add.w	r3, r7, #20
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	4619      	mov	r1, r3
 8006d46:	68f8      	ldr	r0, [r7, #12]
 8006d48:	f000 f8ae 	bl	8006ea8 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 8006d4c:	bf00      	nop
 8006d4e:	3720      	adds	r7, #32
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISO_NS0_16evaluator_traitsISO_E5ShapeEEE5valueEPvE4typeE>:
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b088      	sub	sp, #32
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	607a      	str	r2, [r7, #4]
 8006d60:	603b      	str	r3, [r7, #0]
  typename plain_matrix_type<Src>::type tmp(src);
 8006d62:	f107 0314 	add.w	r3, r7, #20
 8006d66:	68b9      	ldr	r1, [r7, #8]
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f000 f8d4 	bl	8006f16 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS1_KNS_7ProductIS1_NS3_INS4_20scalar_difference_opIffEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEES1_Li0EEEEELi0EEEEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 8006d6e:	f107 0314 	add.w	r3, r7, #20
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	4619      	mov	r1, r3
 8006d76:	68f8      	ldr	r0, [r7, #12]
 8006d78:	f000 f896 	bl	8006ea8 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 8006d7c:	bf00      	nop
 8006d7e:	3720      	adds	r7, #32
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISJ_NS0_16evaluator_traitsISJ_E5ShapeEEE5valueEPvE4typeE>:
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b08e      	sub	sp, #56	; 0x38
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	607a      	str	r2, [r7, #4]
 8006d90:	603b      	str	r3, [r7, #0]
  typename plain_matrix_type<Src>::type tmp(src);
 8006d92:	f107 0314 	add.w	r3, r7, #20
 8006d96:	68b9      	ldr	r1, [r7, #8]
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f000 f8d1 	bl	8006f40 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS3_INS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES1_Li0EEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 8006d9e:	f107 0314 	add.w	r3, r7, #20
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	4619      	mov	r1, r3
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f000 f858 	bl	8006e5c <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 8006dac:	bf00      	nop
 8006dae:	3738      	adds	r7, #56	; 0x38
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi9EEEvv>:
void check_static_allocation_size()
 8006db4:	b480      	push	{r7}
 8006db6:	af00      	add	r7, sp, #0
}
 8006db8:	bf00      	nop
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr

08006dc2 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi1EEEvv>:
void check_static_allocation_size()
 8006dc2:	b480      	push	{r7}
 8006dc4:	af00      	add	r7, sp, #0
}
 8006dc6:	bf00      	nop
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi3EEEvv>:
void check_static_allocation_size()
 8006dd0:	b480      	push	{r7}
 8006dd2:	af00      	add	r7, sp, #0
}
 8006dd4:	bf00      	nop
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr

08006dde <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b082      	sub	sp, #8
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4618      	mov	r0, r3
 8006dea:	f000 f8be 	bl	8006f6a <_ZNK5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv>
 8006dee:	4603      	mov	r3, r0
 8006df0:	4618      	mov	r0, r3
 8006df2:	3708      	adds	r7, #8
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4618      	mov	r0, r3
 8006e04:	370c      	adds	r7, #12
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr

08006e0e <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>:
  plainobjectbase_evaluator_data(const Scalar* ptr, Index outerStride) : data(ptr)
 8006e0e:	b580      	push	{r7, lr}
 8006e10:	b084      	sub	sp, #16
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	60f8      	str	r0, [r7, #12]
 8006e16:	60b9      	str	r1, [r7, #8]
 8006e18:	607a      	str	r2, [r7, #4]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	68ba      	ldr	r2, [r7, #8]
 8006e1e:	601a      	str	r2, [r3, #0]
    EIGEN_UNUSED_VARIABLE(outerStride);
 8006e20:	1d3b      	adds	r3, r7, #4
 8006e22:	4618      	mov	r0, r3
 8006e24:	f7fd f82d 	bl	8003e82 <_ZN5Eigen8internal22ignore_unused_variableIiEEvRKT_>
  }
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS0_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS5_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEERKT_>:
#ifndef EIGEN_PARSED_BY_DOXYGEN

    // This constructor is for both 1x1 matrices and dynamic vectors
    template<typename T>
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    explicit Matrix(const T& x)
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b082      	sub	sp, #8
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
 8006e3a:	6039      	str	r1, [r7, #0]
    {
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f7fd fdf3 	bl	8004a2a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 8006e44:	f7fd fe01 	bl	8004a4a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6839      	ldr	r1, [r7, #0]
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f000 f8a3 	bl	8006f98 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEESK_EEvRKNS_9DenseBaseIT0_EE>
    }
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4618      	mov	r0, r3
 8006e56:	3708      	adds	r7, #8
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
}


template<typename Dst, typename Src, typename Func>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b086      	sub	sp, #24
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	607a      	str	r2, [r7, #4]
                      ) && int(Dst::SizeAtCompileTime) != 1
  };

  typedef typename internal::conditional<NeedToTranspose, Transpose<Dst>, Dst>::type ActualDstTypeCleaned;
  typedef typename internal::conditional<NeedToTranspose, Transpose<Dst>, Dst&>::type ActualDstType;
  ActualDstType actualDst(dst);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	617b      	str	r3, [r7, #20]
  // TODO check whether this is the right place to perform these checks:
  EIGEN_STATIC_ASSERT_LVALUE(Dst)
  EIGEN_STATIC_ASSERT_SAME_MATRIX_SIZE(ActualDstTypeCleaned,Src)
  EIGEN_CHECK_BINARY_COMPATIBILIY(Func,typename ActualDstTypeCleaned::Scalar,typename Src::Scalar);

  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	68b9      	ldr	r1, [r7, #8]
 8006e70:	6978      	ldr	r0, [r7, #20]
 8006e72:	f000 f89e 	bl	8006fb2 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>
}
 8006e76:	bf00      	nop
 8006e78:	3718      	adds	r7, #24
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEES1_Li0EEEEERKT_>:
    explicit Matrix(const T& x)
 8006e7e:	b580      	push	{r7, lr}
 8006e80:	b082      	sub	sp, #8
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
 8006e86:	6039      	str	r1, [r7, #0]
    {
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7fd fe13 	bl	8004ab6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 8006e90:	f7fd fe21 	bl	8004ad6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6839      	ldr	r1, [r7, #0]
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f000 f89d 	bl	8006fd8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEES7_EEvRKNS_9DenseBaseIT0_EE>
    }
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3708      	adds	r7, #8
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b086      	sub	sp, #24
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	68b9      	ldr	r1, [r7, #8]
 8006ebc:	6978      	ldr	r0, [r7, #20]
 8006ebe:	f000 f898 	bl	8006ff2 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>
}
 8006ec2:	bf00      	nop
 8006ec4:	3718      	adds	r7, #24
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}

08006eca <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	b086      	sub	sp, #24
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	60f8      	str	r0, [r7, #12]
 8006ed2:	60b9      	str	r1, [r7, #8]
 8006ed4:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	68b9      	ldr	r1, [r7, #8]
 8006ede:	6978      	ldr	r0, [r7, #20]
 8006ee0:	f000 f89a 	bl	8007018 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 8006ee4:	bf00      	nop
 8006ee6:	3718      	adds	r7, #24
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS3_INS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS3_INS3_IS6_S4_Li0EEES7_Li0EEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERKT_>:
    explicit Matrix(const T& x)
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
    {
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7fd fddc 	bl	8004ab6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 8006efe:	f7fd fdea 	bl	8004ad6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6839      	ldr	r1, [r7, #0]
 8006f06:	4618      	mov	r0, r3
 8006f08:	f000 f899 	bl	800703e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEESN_EEvRKNS_9DenseBaseIT0_EE>
    }
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3708      	adds	r7, #8
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS1_KNS_7ProductIS1_NS3_INS4_20scalar_difference_opIffEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEES1_Li0EEEEELi0EEEEEEERKT_>:
    explicit Matrix(const T& x)
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b082      	sub	sp, #8
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
 8006f1e:	6039      	str	r1, [r7, #0]
    {
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7fd fdc7 	bl	8004ab6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 8006f28:	f7fd fdd5 	bl	8004ad6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6839      	ldr	r1, [r7, #0]
 8006f30:	4618      	mov	r0, r3
 8006f32:	f000 f891 	bl	8007058 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEESL_EEvRKNS_9DenseBaseIT0_EE>
    }
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3708      	adds	r7, #8
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS3_INS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES1_Li0EEEEERKT_>:
    explicit Matrix(const T& x)
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
    {
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f7fd fd6c 	bl	8004a2a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 8006f52:	f7fd fd7a 	bl	8004a4a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6839      	ldr	r1, [r7, #0]
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f000 f889 	bl	8007072 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEESG_EEvRKNS_9DenseBaseIT0_EE>
    }
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4618      	mov	r0, r3
 8006f64:	3708      	adds	r7, #8
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}

08006f6a <_ZNK5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 8006f6a:	b480      	push	{r7}
 8006f6c:	b083      	sub	sp, #12
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4618      	mov	r0, r3
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>:
    { }

    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index innerStride() const EIGEN_NOEXCEPT { return 1; }
    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index outerStride() const EIGEN_NOEXCEPT { return this->innerSize(); }
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 f87f 	bl	800708c <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE9innerSizeEv>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	4618      	mov	r0, r3
 8006f92:	3708      	adds	r7, #8
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEESK_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 8006fa2:	6839      	ldr	r1, [r7, #0]
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 f87d 	bl	80070a4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 8006faa:	bf00      	nop
 8006fac:	3708      	adds	r7, #8
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>:
// both partial specialization+SFINAE without ambiguous specialization
template< typename DstXprType, typename SrcXprType, typename Functor, typename Weak>
struct Assignment<DstXprType, SrcXprType, Functor, Dense2Dense, Weak>
{
  EIGEN_DEVICE_FUNC
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b084      	sub	sp, #16
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	60f8      	str	r0, [r7, #12]
 8006fba:	60b9      	str	r1, [r7, #8]
 8006fbc:	607a      	str	r2, [r7, #4]
  {
#ifndef EIGEN_NO_DEBUG
    internal::check_for_aliasing(dst, src);
 8006fbe:	68b9      	ldr	r1, [r7, #8]
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	f000 f890 	bl	80070e6 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_>
#endif

    call_dense_assignment_loop(dst, src, func);
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	68b9      	ldr	r1, [r7, #8]
 8006fca:	68f8      	ldr	r0, [r7, #12]
 8006fcc:	f000 f8c4 	bl	8007158 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8006fd0:	bf00      	nop
 8006fd2:	3710      	adds	r7, #16
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEES7_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 8006fe2:	6839      	ldr	r1, [r7, #0]
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 f8ef 	bl	80071c8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 8006fea:	bf00      	nop
 8006fec:	3708      	adds	r7, #8
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b084      	sub	sp, #16
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	60f8      	str	r0, [r7, #12]
 8006ffa:	60b9      	str	r1, [r7, #8]
 8006ffc:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8006ffe:	68b9      	ldr	r1, [r7, #8]
 8007000:	68f8      	ldr	r0, [r7, #12]
 8007002:	f000 f902 	bl	800720a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_EEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	68b9      	ldr	r1, [r7, #8]
 800700a:	68f8      	ldr	r0, [r7, #12]
 800700c:	f000 f908 	bl	8007220 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8007010:	bf00      	nop
 8007012:	3710      	adds	r7, #16
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8007024:	68b9      	ldr	r1, [r7, #8]
 8007026:	68f8      	ldr	r0, [r7, #12]
 8007028:	f000 f932 	bl	8007290 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	68b9      	ldr	r1, [r7, #8]
 8007030:	68f8      	ldr	r0, [r7, #12]
 8007032:	f000 f9ca 	bl	80073ca <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8007036:	bf00      	nop
 8007038:	3710      	adds	r7, #16
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}

0800703e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEESN_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800703e:	b580      	push	{r7, lr}
 8007040:	b082      	sub	sp, #8
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
 8007046:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 8007048:	6839      	ldr	r1, [r7, #0]
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 f9f5 	bl	800743a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 8007050:	bf00      	nop
 8007052:	3708      	adds	r7, #8
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEESL_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 8007062:	6839      	ldr	r1, [r7, #0]
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 fa09 	bl	800747c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800706a:	bf00      	nop
 800706c:	3708      	adds	r7, #8
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEESG_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 8007072:	b580      	push	{r7, lr}
 8007074:	b082      	sub	sp, #8
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
 800707a:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800707c:	6839      	ldr	r1, [r7, #0]
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 fa1d 	bl	80074be <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 8007084:	bf00      	nop
 8007086:	3708      	adds	r7, #8
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE9innerSizeEv>:
    Index innerSize() const
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 fa33 	bl	8007500 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4sizeEv>
 800709a:	4603      	mov	r3, r0
    }
 800709c:	4618      	mov	r0, r3
 800709e:	3708      	adds	r7, #8
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 80070a4:	b5b0      	push	{r4, r5, r7, lr}
 80070a6:	b084      	sub	sp, #16
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f7fe fa90 	bl	80055d4 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80070b4:	4604      	mov	r4, r0
 80070b6:	6838      	ldr	r0, [r7, #0]
 80070b8:	f7ff fba9 	bl	800680e <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEE7derivedEv>
 80070bc:	4605      	mov	r5, r0
 80070be:	f107 030c 	add.w	r3, r7, #12
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7ff fde3 	bl	8006c8e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 80070c8:	f107 030c 	add.w	r3, r7, #12
 80070cc:	461a      	mov	r2, r3
 80070ce:	4629      	mov	r1, r5
 80070d0:	4620      	mov	r0, r4
 80070d2:	f000 fa27 	bl	8007524 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f7fe fa7c 	bl	80055d4 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80070dc:	4603      	mov	r3, r0
    }
 80070de:	4618      	mov	r0, r3
 80070e0:	3710      	adds	r7, #16
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bdb0      	pop	{r4, r5, r7, pc}

080070e6 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_>:
    {
    }
};

template<typename Dst, typename Src>
void check_for_aliasing(const Dst &dst, const Src &src)
 80070e6:	b580      	push	{r7, lr}
 80070e8:	b082      	sub	sp, #8
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
 80070ee:	6039      	str	r1, [r7, #0]
{
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	4618      	mov	r0, r3
 80070f4:	f7fd fd9b 	bl	8004c2e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	dd08      	ble.n	8007110 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_+0x2a>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4618      	mov	r0, r3
 8007102:	f7fd fd89 	bl	8004c18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007106:	4603      	mov	r3, r0
 8007108:	2b01      	cmp	r3, #1
 800710a:	dd01      	ble.n	8007110 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_+0x2a>
 800710c:	2301      	movs	r3, #1
 800710e:	e000      	b.n	8007112 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_+0x2c>
 8007110:	2300      	movs	r3, #0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d003      	beq.n	800711e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 8007116:	6839      	ldr	r1, [r7, #0]
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 fa14 	bl	8007546 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Lb0EE3runERKS3_S6_>
}
 800711e:	bf00      	nop
 8007120:	3708      	adds	r7, #8
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>:
struct evaluator<PlainObjectBase<Derived> >
 8007126:	b580      	push	{r7, lr}
 8007128:	b082      	sub	sp, #8
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 fa24 	bl	800757c <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4618      	mov	r0, r3
 8007138:	3708      	adds	r7, #8
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>:
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 800713e:	b580      	push	{r7, lr}
 8007140:	b082      	sub	sp, #8
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4618      	mov	r0, r3
 800714a:	f7ff ffec 	bl	8007126 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4618      	mov	r0, r3
 8007152:	3708      	adds	r7, #8
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8007158:	b580      	push	{r7, lr}
 800715a:	b08c      	sub	sp, #48	; 0x30
 800715c:	af02      	add	r7, sp, #8
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8007164:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007168:	68b9      	ldr	r1, [r7, #8]
 800716a:	4618      	mov	r0, r3
 800716c:	f000 f9f6 	bl	800755c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  resize_if_allowed(dst, src, func);
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	68b9      	ldr	r1, [r7, #8]
 8007174:	68f8      	ldr	r0, [r7, #12]
 8007176:	f000 fa0d 	bl	8007594 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800717a:	f107 0320 	add.w	r3, r7, #32
 800717e:	68f9      	ldr	r1, [r7, #12]
 8007180:	4618      	mov	r0, r3
 8007182:	f000 f9eb 	bl	800755c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8007186:	68f8      	ldr	r0, [r7, #12]
 8007188:	f000 fa50 	bl	800762c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 800718c:	4603      	mov	r3, r0
 800718e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007192:	f107 0120 	add.w	r1, r7, #32
 8007196:	f107 0010 	add.w	r0, r7, #16
 800719a:	9300      	str	r3, [sp, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f000 fa50 	bl	8007642 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 80071a2:	f107 0310 	add.w	r3, r7, #16
 80071a6:	4618      	mov	r0, r3
 80071a8:	f000 fa65 	bl	8007676 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>
  DstEvaluatorType dstEvaluator(dst);
 80071ac:	f107 0320 	add.w	r3, r7, #32
 80071b0:	4618      	mov	r0, r3
 80071b2:	f7ff ffc4 	bl	800713e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 80071b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7ff ffbf 	bl	800713e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
}
 80071c0:	bf00      	nop
 80071c2:	3728      	adds	r7, #40	; 0x28
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 80071c8:	b5b0      	push	{r4, r5, r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f7fe f862 	bl	800529c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80071d8:	4604      	mov	r4, r0
 80071da:	6838      	ldr	r0, [r7, #0]
 80071dc:	f7ff fb42 	bl	8006864 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>
 80071e0:	4605      	mov	r5, r0
 80071e2:	f107 030c 	add.w	r3, r7, #12
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7ff fd51 	bl	8006c8e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 80071ec:	f107 030c 	add.w	r3, r7, #12
 80071f0:	461a      	mov	r2, r3
 80071f2:	4629      	mov	r1, r5
 80071f4:	4620      	mov	r0, r4
 80071f6:	f000 fa49 	bl	800768c <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f7fe f84e 	bl	800529c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8007200:	4603      	mov	r3, r0
    }
 8007202:	4618      	mov	r0, r3
 8007204:	3710      	adds	r7, #16
 8007206:	46bd      	mov	sp, r7
 8007208:	bdb0      	pop	{r4, r5, r7, pc}

0800720a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_EEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800720a:	b480      	push	{r7}
 800720c:	b083      	sub	sp, #12
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
 8007212:	6039      	str	r1, [r7, #0]
}
 8007214:	bf00      	nop
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8007220:	b580      	push	{r7, lr}
 8007222:	b08c      	sub	sp, #48	; 0x30
 8007224:	af02      	add	r7, sp, #8
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800722c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007230:	68b9      	ldr	r1, [r7, #8]
 8007232:	4618      	mov	r0, r3
 8007234:	f7ff fa47 	bl	80066c6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  resize_if_allowed(dst, src, func);
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	68b9      	ldr	r1, [r7, #8]
 800723c:	68f8      	ldr	r0, [r7, #12]
 800723e:	f000 fa37 	bl	80076b0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8007242:	f107 0320 	add.w	r3, r7, #32
 8007246:	68f9      	ldr	r1, [r7, #12]
 8007248:	4618      	mov	r0, r3
 800724a:	f7ff fa3c 	bl	80066c6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f000 fa7a 	bl	8007748 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 8007254:	4603      	mov	r3, r0
 8007256:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800725a:	f107 0120 	add.w	r1, r7, #32
 800725e:	f107 0010 	add.w	r0, r7, #16
 8007262:	9300      	str	r3, [sp, #0]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f000 fa7a 	bl	800775e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800726a:	f107 0310 	add.w	r3, r7, #16
 800726e:	4618      	mov	r0, r3
 8007270:	f000 fa8f 	bl	8007792 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>
  DstEvaluatorType dstEvaluator(dst);
 8007274:	f107 0320 	add.w	r3, r7, #32
 8007278:	4618      	mov	r0, r3
 800727a:	f7fd feea 	bl	8005052 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800727e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007282:	4618      	mov	r0, r3
 8007284:	f7fd fee5 	bl	8005052 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
}
 8007288:	bf00      	nop
 800728a:	3728      	adds	r7, #40	; 0x28
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4618      	mov	r0, r3
 800729e:	f7fd fcc6 	bl	8004c2e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	dd08      	ble.n	80072ba <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_+0x2a>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7fd fcb4 	bl	8004c18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	dd01      	ble.n	80072ba <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_+0x2a>
 80072b6:	2301      	movs	r3, #1
 80072b8:	e000      	b.n	80072bc <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_+0x2c>
 80072ba:	2300      	movs	r3, #0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d003      	beq.n	80072c8 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 80072c0:	6839      	ldr	r1, [r7, #0]
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 fa70 	bl	80077a8 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EELb0EE3runERSD_RKSE_>
}
 80072c8:	bf00      	nop
 80072ca:	3708      	adds	r7, #8
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEED1Ev>:
struct evaluator<PlainObjectBase<Derived> >
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b082      	sub	sp, #8
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 fa8a 	bl	80077f2 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4618      	mov	r0, r3
 80072e2:	3708      	adds	r7, #8
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>:
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	4618      	mov	r0, r3
 80072f4:	f7ff ffec 	bl	80072d0 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEED1Ev>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	4618      	mov	r0, r3
 80072fc:	3708      	adds	r7, #8
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEELi3ENS_10DenseShapeES9_ffED1Ev>:
};

// This is the default evaluator implementation for products:
// It creates a temporary and call generic_product_impl
template<typename Lhs, typename Rhs, int Options, int ProductTag, typename LhsShape, typename RhsShape>
struct product_evaluator<Product<Lhs, Rhs, Options>, ProductTag, LhsShape, RhsShape>
 8007302:	b580      	push	{r7, lr}
 8007304:	b082      	sub	sp, #8
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4618      	mov	r0, r3
 800730e:	f7ff ffeb 	bl	80072e8 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4618      	mov	r0, r3
 8007316:	3708      	adds	r7, #8
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4618      	mov	r0, r3
 8007328:	f7ff ffeb 	bl	8007302 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEELi3ENS_10DenseShapeES9_ffED1Ev>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4618      	mov	r0, r3
 8007330:	3708      	adds	r7, #8
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEED1Ev>:
struct evaluator<const T>
 8007336:	b580      	push	{r7, lr}
 8007338:	b082      	sub	sp, #8
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	4618      	mov	r0, r3
 8007342:	f7ff ffeb 	bl	800731c <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEED1Ev>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	4618      	mov	r0, r3
 800734a:	3708      	adds	r7, #8
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>:
 8007350:	b580      	push	{r7, lr}
 8007352:	b082      	sub	sp, #8
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4618      	mov	r0, r3
 800735c:	f7ff feef 	bl	800713e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4618      	mov	r0, r3
 8007364:	3708      	adds	r7, #8
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4DataD1Ev>:
  }

protected:

  // this helper permits to completely eliminate the functor if it is empty
  struct Data
 800736a:	b580      	push	{r7, lr}
 800736c:	b082      	sub	sp, #8
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	332c      	adds	r3, #44	; 0x2c
 8007376:	4618      	mov	r0, r3
 8007378:	f7ff ffea 	bl	8007350 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	3304      	adds	r3, #4
 8007380:	4618      	mov	r0, r3
 8007382:	f7ff ffd8 	bl	8007336 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEED1Ev>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4618      	mov	r0, r3
 800738a:	3708      	adds	r7, #8
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4618      	mov	r0, r3
 800739c:	f7ff ffe5 	bl	800736a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4DataD1Ev>
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 fa1b 	bl	80077dc <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEED1Ev>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4618      	mov	r0, r3
 80073aa:	3708      	adds	r7, #8
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	4618      	mov	r0, r3
 80073bc:	f7ff ffe8 	bl	8007390 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffED1Ev>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	4618      	mov	r0, r3
 80073c4:	3708      	adds	r7, #8
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b098      	sub	sp, #96	; 0x60
 80073ce:	af02      	add	r7, sp, #8
 80073d0:	60f8      	str	r0, [r7, #12]
 80073d2:	60b9      	str	r1, [r7, #8]
 80073d4:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 80073d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80073da:	68b9      	ldr	r1, [r7, #8]
 80073dc:	4618      	mov	r0, r3
 80073de:	f000 f9ee 	bl	80077be <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1ERKSE_>
  resize_if_allowed(dst, src, func);
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	68b9      	ldr	r1, [r7, #8]
 80073e6:	68f8      	ldr	r0, [r7, #12]
 80073e8:	f000 fa28 	bl	800783c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 80073ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073f0:	68f9      	ldr	r1, [r7, #12]
 80073f2:	4618      	mov	r0, r3
 80073f4:	f000 f8b2 	bl	800755c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 80073f8:	68f8      	ldr	r0, [r7, #12]
 80073fa:	f000 f917 	bl	800762c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 80073fe:	4603      	mov	r3, r0
 8007400:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007404:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8007408:	f107 0014 	add.w	r0, r7, #20
 800740c:	9300      	str	r3, [sp, #0]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f000 fa5e 	bl	80078d0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8007414:	f107 0314 	add.w	r3, r7, #20
 8007418:	4618      	mov	r0, r3
 800741a:	f000 fa73 	bl	8007904 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSL_>
  DstEvaluatorType dstEvaluator(dst);
 800741e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007422:	4618      	mov	r0, r3
 8007424:	f7ff fe8b 	bl	800713e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8007428:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800742c:	4618      	mov	r0, r3
 800742e:	f7ff ffbf 	bl	80073b0 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEED1Ev>
}
 8007432:	bf00      	nop
 8007434:	3758      	adds	r7, #88	; 0x58
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800743a:	b5b0      	push	{r4, r5, r7, lr}
 800743c:	b084      	sub	sp, #16
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
 8007442:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f7fd ff29 	bl	800529c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800744a:	4604      	mov	r4, r0
 800744c:	6838      	ldr	r0, [r7, #0]
 800744e:	f7ff fb0a 	bl	8006a66 <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEE7derivedEv>
 8007452:	4605      	mov	r5, r0
 8007454:	f107 030c 	add.w	r3, r7, #12
 8007458:	4618      	mov	r0, r3
 800745a:	f7ff fc18 	bl	8006c8e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800745e:	f107 030c 	add.w	r3, r7, #12
 8007462:	461a      	mov	r2, r3
 8007464:	4629      	mov	r1, r5
 8007466:	4620      	mov	r0, r4
 8007468:	f000 fa57 	bl	800791a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f7fd ff15 	bl	800529c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8007472:	4603      	mov	r3, r0
    }
 8007474:	4618      	mov	r0, r3
 8007476:	3710      	adds	r7, #16
 8007478:	46bd      	mov	sp, r7
 800747a:	bdb0      	pop	{r4, r5, r7, pc}

0800747c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800747c:	b5b0      	push	{r4, r5, r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f7fd ff08 	bl	800529c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800748c:	4604      	mov	r4, r0
 800748e:	6838      	ldr	r0, [r7, #0]
 8007490:	f7ff fb43 	bl	8006b1a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEE7derivedEv>
 8007494:	4605      	mov	r5, r0
 8007496:	f107 030c 	add.w	r3, r7, #12
 800749a:	4618      	mov	r0, r3
 800749c:	f7ff fbf7 	bl	8006c8e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 80074a0:	f107 030c 	add.w	r3, r7, #12
 80074a4:	461a      	mov	r2, r3
 80074a6:	4629      	mov	r1, r5
 80074a8:	4620      	mov	r0, r4
 80074aa:	f000 fa47 	bl	800793c <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f7fd fef4 	bl	800529c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80074b4:	4603      	mov	r3, r0
    }
 80074b6:	4618      	mov	r0, r3
 80074b8:	3710      	adds	r7, #16
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bdb0      	pop	{r4, r5, r7, pc}

080074be <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 80074be:	b5b0      	push	{r4, r5, r7, lr}
 80074c0:	b084      	sub	sp, #16
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
 80074c6:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f7fe f883 	bl	80055d4 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80074ce:	4604      	mov	r4, r0
 80074d0:	6838      	ldr	r0, [r7, #0]
 80074d2:	f7ff fb63 	bl	8006b9c <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEE7derivedEv>
 80074d6:	4605      	mov	r5, r0
 80074d8:	f107 030c 	add.w	r3, r7, #12
 80074dc:	4618      	mov	r0, r3
 80074de:	f7ff fbd6 	bl	8006c8e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 80074e2:	f107 030c 	add.w	r3, r7, #12
 80074e6:	461a      	mov	r2, r3
 80074e8:	4629      	mov	r1, r5
 80074ea:	4620      	mov	r0, r4
 80074ec:	f000 fa37 	bl	800795e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f7fe f86f 	bl	80055d4 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80074f6:	4603      	mov	r3, r0
    }
 80074f8:	4618      	mov	r0, r3
 80074fa:	3710      	adds	r7, #16
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bdb0      	pop	{r4, r5, r7, pc}

08007500 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4sizeEv>:
  /** \returns the number of coefficients, which is rows()*cols().
    * \sa rows(), cols(), SizeAtCompileTime. */
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
  inline Index size() const EIGEN_NOEXCEPT { return rows() * cols(); }
 8007500:	b590      	push	{r4, r7, lr}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f7fd fd76 	bl	8004ffa <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800750e:	4604      	mov	r4, r0
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f7fd fd82 	bl	800501a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007516:	4603      	mov	r3, r0
 8007518:	fb04 f303 	mul.w	r3, r4, r3
 800751c:	4618      	mov	r0, r3
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	bd90      	pop	{r4, r7, pc}

08007524 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8007524:	b580      	push	{r7, lr}
 8007526:	b086      	sub	sp, #24
 8007528:	af00      	add	r7, sp, #0
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	68b9      	ldr	r1, [r7, #8]
 8007538:	6978      	ldr	r0, [r7, #20]
 800753a:	f000 fa3c 	bl	80079b6 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>
}
 800753e:	bf00      	nop
 8007540:	3718      	adds	r7, #24
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Lb0EE3runERKS3_S6_>:
    static void run(const Derived&, const OtherDerived&)
 8007546:	b480      	push	{r7}
 8007548:	b083      	sub	sp, #12
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
 800754e:	6039      	str	r1, [r7, #0]
    }
 8007550:	bf00      	nop
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>:
  explicit evaluator(const XprType& m)
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	683a      	ldr	r2, [r7, #0]
 800756a:	4611      	mov	r1, r2
 800756c:	4618      	mov	r0, r3
 800756e:	f000 fa5c 	bl	8007a2a <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1ERKS5_>
  { }
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4618      	mov	r0, r3
 8007576:	3708      	adds	r7, #8
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4618      	mov	r0, r3
 8007588:	370c      	adds	r7, #12
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr
	...

08007594 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8007594:	b580      	push	{r7, lr}
 8007596:	b086      	sub	sp, #24
 8007598:	af00      	add	r7, sp, #0
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	60b9      	str	r1, [r7, #8]
 800759e:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7fd fb43 	bl	8004c2e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80075a8:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7fd fb33 	bl	8004c18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80075b2:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7fd fb39 	bl	8004c2e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80075bc:	4602      	mov	r2, r0
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d107      	bne.n	80075d4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	4618      	mov	r0, r3
 80075c8:	f7fd fb26 	bl	8004c18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80075cc:	4602      	mov	r2, r0
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d001      	beq.n	80075d8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x44>
 80075d4:	2301      	movs	r3, #1
 80075d6:	e000      	b.n	80075da <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x46>
 80075d8:	2300      	movs	r3, #0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d005      	beq.n	80075ea <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x56>
    dst.resize(dstRows, dstCols);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	693a      	ldr	r2, [r7, #16]
 80075e2:	6979      	ldr	r1, [r7, #20]
 80075e4:	4618      	mov	r0, r3
 80075e6:	f000 fa3b 	bl	8007a60 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	4618      	mov	r0, r3
 80075ee:	f7fd fb1e 	bl	8004c2e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80075f2:	4602      	mov	r2, r0
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d107      	bne.n	800760a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x76>
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	4618      	mov	r0, r3
 80075fe:	f7fd fb0b 	bl	8004c18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007602:	4602      	mov	r2, r0
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	4293      	cmp	r3, r2
 8007608:	d006      	beq.n	8007618 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x84>
 800760a:	4b05      	ldr	r3, [pc, #20]	; (8007620 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 800760c:	4a05      	ldr	r2, [pc, #20]	; (8007624 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 800760e:	f240 21fd 	movw	r1, #765	; 0x2fd
 8007612:	4805      	ldr	r0, [pc, #20]	; (8007628 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x94>)
 8007614:	f016 fa22 	bl	801da5c <__assert_func>
}
 8007618:	bf00      	nop
 800761a:	3718      	adds	r7, #24
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	08021f3c 	.word	0x08021f3c
 8007624:	08021f6c 	.word	0x08021f6c
 8007628:	08022050 	.word	0x08022050

0800762c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	4618      	mov	r0, r3
 8007638:	370c      	adds	r7, #12
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr

08007642 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8007642:	b480      	push	{r7}
 8007644:	b085      	sub	sp, #20
 8007646:	af00      	add	r7, sp, #0
 8007648:	60f8      	str	r0, [r7, #12]
 800764a:	60b9      	str	r1, [r7, #8]
 800764c:	607a      	str	r2, [r7, #4]
 800764e:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	68ba      	ldr	r2, [r7, #8]
 8007654:	601a      	str	r2, [r3, #0]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	605a      	str	r2, [r3, #4]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	683a      	ldr	r2, [r7, #0]
 8007660:	609a      	str	r2, [r3, #8]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	69ba      	ldr	r2, [r7, #24]
 8007666:	60da      	str	r2, [r3, #12]
  }
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	4618      	mov	r0, r3
 800766c:	3714      	adds	r7, #20
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr

08007676 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8007676:	b580      	push	{r7, lr}
 8007678:	b082      	sub	sp, #8
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 fa20 	bl	8007ac4 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi9EE3runERS9_>
  }
 8007684:	bf00      	nop
 8007686:	3708      	adds	r7, #8
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800768c:	b580      	push	{r7, lr}
 800768e:	b086      	sub	sp, #24
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	68b9      	ldr	r1, [r7, #8]
 80076a0:	6978      	ldr	r0, [r7, #20]
 80076a2:	f000 fa3a 	bl	8007b1a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>
}
 80076a6:	bf00      	nop
 80076a8:	3718      	adds	r7, #24
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
	...

080076b0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b086      	sub	sp, #24
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	4618      	mov	r0, r3
 80076c0:	f7fd fb5b 	bl	8004d7a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80076c4:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	4618      	mov	r0, r3
 80076ca:	f7fd fb4b 	bl	8004d64 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80076ce:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7fd fb51 	bl	8004d7a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80076d8:	4602      	mov	r2, r0
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	4293      	cmp	r3, r2
 80076de:	d107      	bne.n	80076f0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7fd fb3e 	bl	8004d64 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80076e8:	4602      	mov	r2, r0
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d001      	beq.n	80076f4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x44>
 80076f0:	2301      	movs	r3, #1
 80076f2:	e000      	b.n	80076f6 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x46>
 80076f4:	2300      	movs	r3, #0
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d005      	beq.n	8007706 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x56>
    dst.resize(dstRows, dstCols);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	693a      	ldr	r2, [r7, #16]
 80076fe:	6979      	ldr	r1, [r7, #20]
 8007700:	4618      	mov	r0, r3
 8007702:	f000 fa45 	bl	8007b90 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	4618      	mov	r0, r3
 800770a:	f7fd fb36 	bl	8004d7a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800770e:	4602      	mov	r2, r0
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	4293      	cmp	r3, r2
 8007714:	d107      	bne.n	8007726 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x76>
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	4618      	mov	r0, r3
 800771a:	f7fd fb23 	bl	8004d64 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800771e:	4602      	mov	r2, r0
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	4293      	cmp	r3, r2
 8007724:	d006      	beq.n	8007734 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x84>
 8007726:	4b05      	ldr	r3, [pc, #20]	; (800773c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8007728:	4a05      	ldr	r2, [pc, #20]	; (8007740 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 800772a:	f240 21fd 	movw	r1, #765	; 0x2fd
 800772e:	4805      	ldr	r0, [pc, #20]	; (8007744 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x94>)
 8007730:	f016 f994 	bl	801da5c <__assert_func>
}
 8007734:	bf00      	nop
 8007736:	3718      	adds	r7, #24
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}
 800773c:	08021f3c 	.word	0x08021f3c
 8007740:	080220ac 	.word	0x080220ac
 8007744:	08022050 	.word	0x08022050

08007748 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	4618      	mov	r0, r3
 8007754:	370c      	adds	r7, #12
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr

0800775e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 800775e:	b480      	push	{r7}
 8007760:	b085      	sub	sp, #20
 8007762:	af00      	add	r7, sp, #0
 8007764:	60f8      	str	r0, [r7, #12]
 8007766:	60b9      	str	r1, [r7, #8]
 8007768:	607a      	str	r2, [r7, #4]
 800776a:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	68ba      	ldr	r2, [r7, #8]
 8007770:	601a      	str	r2, [r3, #0]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	605a      	str	r2, [r3, #4]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	683a      	ldr	r2, [r7, #0]
 800777c:	609a      	str	r2, [r3, #8]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	69ba      	ldr	r2, [r7, #24]
 8007782:	60da      	str	r2, [r3, #12]
  }
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	4618      	mov	r0, r3
 8007788:	3714      	adds	r7, #20
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr

08007792 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8007792:	b580      	push	{r7, lr}
 8007794:	b082      	sub	sp, #8
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 fa2a 	bl	8007bf4 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi3EE3runERS9_>
  }
 80077a0:	bf00      	nop
 80077a2:	3708      	adds	r7, #8
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EELb0EE3runERSD_RKSE_>:
    static void run(const Derived&, const OtherDerived&)
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
    }
 80077b2:	bf00      	nop
 80077b4:	370c      	adds	r7, #12
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr

080077be <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1ERKSE_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 80077be:	b580      	push	{r7, lr}
 80077c0:	b082      	sub	sp, #8
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
 80077c6:	6039      	str	r1, [r7, #0]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6839      	ldr	r1, [r7, #0]
 80077cc:	4618      	mov	r0, r3
 80077ce:	f000 fa20 	bl	8007c12 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffEC1ERKSE_>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4618      	mov	r0, r3
 80077d6:	3708      	adds	r7, #8
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 80077dc:	b480      	push	{r7}
 80077de:	b083      	sub	sp, #12
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4618      	mov	r0, r3
 80077e8:	370c      	adds	r7, #12
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr

080077f2 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>:
 80077f2:	b480      	push	{r7}
 80077f4:	b083      	sub	sp, #12
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4618      	mov	r0, r3
 80077fe:	370c      	adds	r7, #12
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4618      	mov	r0, r3
 8007814:	f7fd ffc6 	bl	80057a4 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 8007818:	4603      	mov	r3, r0
    }
 800781a:	4618      	mov	r0, r3
 800781c:	3708      	adds	r7, #8
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}

08007822 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8007822:	b580      	push	{r7, lr}
 8007824:	b082      	sub	sp, #8
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4618      	mov	r0, r3
 800782e:	f7fd ffc6 	bl	80057be <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4colsEv>
 8007832:	4603      	mov	r3, r0
    }
 8007834:	4618      	mov	r0, r3
 8007836:	3708      	adds	r7, #8
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 800783c:	b580      	push	{r7, lr}
 800783e:	b086      	sub	sp, #24
 8007840:	af00      	add	r7, sp, #0
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	60b9      	str	r1, [r7, #8]
 8007846:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8007848:	68b8      	ldr	r0, [r7, #8]
 800784a:	f7ff ffdd 	bl	8007808 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E4rowsEv>
 800784e:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8007850:	68b8      	ldr	r0, [r7, #8]
 8007852:	f7ff ffe6 	bl	8007822 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E4colsEv>
 8007856:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	4618      	mov	r0, r3
 800785c:	f7fd f9e7 	bl	8004c2e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007860:	4602      	mov	r2, r0
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	4293      	cmp	r3, r2
 8007866:	d107      	bne.n	8007878 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	4618      	mov	r0, r3
 800786c:	f7fd f9d4 	bl	8004c18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007870:	4602      	mov	r2, r0
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	4293      	cmp	r3, r2
 8007876:	d001      	beq.n	800787c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8007878:	2301      	movs	r3, #1
 800787a:	e000      	b.n	800787e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 800787c:	2300      	movs	r3, #0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d005      	beq.n	800788e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	693a      	ldr	r2, [r7, #16]
 8007886:	6979      	ldr	r1, [r7, #20]
 8007888:	4618      	mov	r0, r3
 800788a:	f000 f8e9 	bl	8007a60 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	4618      	mov	r0, r3
 8007892:	f7fd f9cc 	bl	8004c2e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007896:	4602      	mov	r2, r0
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	4293      	cmp	r3, r2
 800789c:	d107      	bne.n	80078ae <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	4618      	mov	r0, r3
 80078a2:	f7fd f9b9 	bl	8004c18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80078a6:	4602      	mov	r2, r0
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d006      	beq.n	80078bc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 80078ae:	4b05      	ldr	r3, [pc, #20]	; (80078c4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 80078b0:	4a05      	ldr	r2, [pc, #20]	; (80078c8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 80078b2:	f240 21fd 	movw	r1, #765	; 0x2fd
 80078b6:	4805      	ldr	r0, [pc, #20]	; (80078cc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 80078b8:	f016 f8d0 	bl	801da5c <__assert_func>
}
 80078bc:	bf00      	nop
 80078be:	3718      	adds	r7, #24
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	08021f3c 	.word	0x08021f3c
 80078c8:	08022190 	.word	0x08022190
 80078cc:	08022050 	.word	0x08022050

080078d0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 80078d0:	b480      	push	{r7}
 80078d2:	b085      	sub	sp, #20
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	607a      	str	r2, [r7, #4]
 80078dc:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	68ba      	ldr	r2, [r7, #8]
 80078e2:	601a      	str	r2, [r3, #0]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	605a      	str	r2, [r3, #4]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	683a      	ldr	r2, [r7, #0]
 80078ee:	609a      	str	r2, [r3, #8]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	69ba      	ldr	r2, [r7, #24]
 80078f4:	60da      	str	r2, [r3, #12]
  }
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	4618      	mov	r0, r3
 80078fa:	3714      	adds	r7, #20
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 f992 	bl	8007c36 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSL_>
  }
 8007912:	bf00      	nop
 8007914:	3708      	adds	r7, #8
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800791a:	b580      	push	{r7, lr}
 800791c:	b086      	sub	sp, #24
 800791e:	af00      	add	r7, sp, #0
 8007920:	60f8      	str	r0, [r7, #12]
 8007922:	60b9      	str	r1, [r7, #8]
 8007924:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	68b9      	ldr	r1, [r7, #8]
 800792e:	6978      	ldr	r0, [r7, #20]
 8007930:	f000 f9ac 	bl	8007c8c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_>
}
 8007934:	bf00      	nop
 8007936:	3718      	adds	r7, #24
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800793c:	b580      	push	{r7, lr}
 800793e:	b086      	sub	sp, #24
 8007940:	af00      	add	r7, sp, #0
 8007942:	60f8      	str	r0, [r7, #12]
 8007944:	60b9      	str	r1, [r7, #8]
 8007946:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	68b9      	ldr	r1, [r7, #8]
 8007950:	6978      	ldr	r0, [r7, #20]
 8007952:	f000 f9d5 	bl	8007d00 <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_9assign_opIffEENS0_13add_assign_opIffEEE3runINS5_INS0_13scalar_sum_opIffEEKS3_KSE_EESG_EEvRS3_RKT_RKT0_>
}
 8007956:	bf00      	nop
 8007958:	3718      	adds	r7, #24
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800795e:	b580      	push	{r7, lr}
 8007960:	b086      	sub	sp, #24
 8007962:	af00      	add	r7, sp, #0
 8007964:	60f8      	str	r0, [r7, #12]
 8007966:	60b9      	str	r1, [r7, #8]
 8007968:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	68b9      	ldr	r1, [r7, #8]
 8007972:	6978      	ldr	r0, [r7, #20]
 8007974:	f000 fa09 	bl	8007d8a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 8007978:	bf00      	nop
 800797a:	3718      	adds	r7, #24
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE4rowsEv>:
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	4618      	mov	r0, r3
 800798c:	f000 fa37 	bl	8007dfe <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>
 8007990:	4603      	mov	r3, r0
 8007992:	4618      	mov	r0, r3
 8007994:	3708      	adds	r7, #8
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}

0800799a <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800799a:	b580      	push	{r7, lr}
 800799c:	b082      	sub	sp, #8
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	3310      	adds	r3, #16
 80079a6:	4618      	mov	r0, r3
 80079a8:	f000 fa37 	bl	8007e1a <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80079ac:	4603      	mov	r3, r0
 80079ae:	4618      	mov	r0, r3
 80079b0:	3708      	adds	r7, #8
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>:
struct Assignment<DstXprType, Product<Lhs,Rhs,Options>, internal::assign_op<Scalar,Scalar>, Dense2Dense,
  typename enable_if<(Options==DefaultProduct || Options==AliasFreeProduct)>::type>
{
  typedef Product<Lhs,Rhs,Options> SrcXprType;
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 80079b6:	b590      	push	{r4, r7, lr}
 80079b8:	b087      	sub	sp, #28
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	60f8      	str	r0, [r7, #12]
 80079be:	60b9      	str	r1, [r7, #8]
 80079c0:	607a      	str	r2, [r7, #4]
  {
    Index dstRows = src.rows();
 80079c2:	68b8      	ldr	r0, [r7, #8]
 80079c4:	f7ff ffdc 	bl	8007980 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE4rowsEv>
 80079c8:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 80079ca:	68b8      	ldr	r0, [r7, #8]
 80079cc:	f7ff ffe5 	bl	800799a <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE4colsEv>
 80079d0:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	4618      	mov	r0, r3
 80079d6:	f7fd f92a 	bl	8004c2e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80079da:	4602      	mov	r2, r0
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	4293      	cmp	r3, r2
 80079e0:	d107      	bne.n	80079f2 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x3c>
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	4618      	mov	r0, r3
 80079e6:	f7fd f917 	bl	8004c18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80079ea:	4602      	mov	r2, r0
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d001      	beq.n	80079f6 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x40>
 80079f2:	2301      	movs	r3, #1
 80079f4:	e000      	b.n	80079f8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x42>
 80079f6:	2300      	movs	r3, #0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d005      	beq.n	8007a08 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x52>
      dst.resize(dstRows, dstCols);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	693a      	ldr	r2, [r7, #16]
 8007a00:	6979      	ldr	r1, [r7, #20]
 8007a02:	4618      	mov	r0, r3
 8007a04:	f000 f82c 	bl	8007a60 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
    // FIXME shall we handle nested_eval here?
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 8007a08:	68b8      	ldr	r0, [r7, #8]
 8007a0a:	f000 fa14 	bl	8007e36 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE3lhsEv>
 8007a0e:	4604      	mov	r4, r0
 8007a10:	68b8      	ldr	r0, [r7, #8]
 8007a12:	f000 fa1b 	bl	8007e4c <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE3rhsEv>
 8007a16:	4603      	mov	r3, r0
 8007a18:	461a      	mov	r2, r3
 8007a1a:	4621      	mov	r1, r4
 8007a1c:	68f8      	ldr	r0, [r7, #12]
 8007a1e:	f000 fa21 	bl	8007e64 <_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EENS_10DenseShapeESG_Li3EE6evalToINS5_IfLi3ELi3ELi0ELi3ELi3EEEEEvRT_RKSD_RKSF_>
  }
 8007a22:	bf00      	nop
 8007a24:	371c      	adds	r7, #28
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd90      	pop	{r4, r7, pc}

08007a2a <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 8007a2a:	b5b0      	push	{r4, r5, r7, lr}
 8007a2c:	b082      	sub	sp, #8
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
 8007a32:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 fa50 	bl	8007eda <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
 8007a3a:	687c      	ldr	r4, [r7, #4]
 8007a3c:	6838      	ldr	r0, [r7, #0]
 8007a3e:	f000 fa2f 	bl	8007ea0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 8007a42:	4605      	mov	r5, r0
 8007a44:	6838      	ldr	r0, [r7, #0]
 8007a46:	f000 fa38 	bl	8007eba <_ZNK5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3EE11outerStrideEv>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	4629      	mov	r1, r5
 8007a50:	4620      	mov	r0, r4
 8007a52:	f000 fa4d 	bl	8007ef0 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EEC1EPKfi>
  }
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3708      	adds	r7, #8
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bdb0      	pop	{r4, r5, r7, pc}

08007a60 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b086      	sub	sp, #24
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	2b03      	cmp	r3, #3
 8007a70:	d108      	bne.n	8007a84 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x24>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2b03      	cmp	r3, #3
 8007a76:	d105      	bne.n	8007a84 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x24>
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	db02      	blt.n	8007a84 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x24>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	da06      	bge.n	8007a92 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x32>
 8007a84:	4b0c      	ldr	r3, [pc, #48]	; (8007ab8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x58>)
 8007a86:	4a0d      	ldr	r2, [pc, #52]	; (8007abc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x5c>)
 8007a88:	f240 1111 	movw	r1, #273	; 0x111
 8007a8c:	480c      	ldr	r0, [pc, #48]	; (8007ac0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x60>)
 8007a8e:	f015 ffe5 	bl	801da5c <__assert_func>
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	617b      	str	r3, [r7, #20]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	613b      	str	r3, [r7, #16]
  }
 8007a9a:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 8007a9c:	68f8      	ldr	r0, [r7, #12]
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	fb02 f103 	mul.w	r1, r2, r3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	68ba      	ldr	r2, [r7, #8]
 8007aaa:	f000 fa33 	bl	8007f14 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE6resizeEiii>
    }
 8007aae:	bf00      	nop
 8007ab0:	3718      	adds	r7, #24
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	08022354 	.word	0x08022354
 8007abc:	080224e4 	.word	0x080224e4
 8007ac0:	08022570 	.word	0x08022570

08007ac4 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8007acc:	2100      	movs	r1, #0
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 fa2d 	bl	8007f2e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 fa48 	bl	8007f6a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi9EE3runERS9_>
  }
 8007ada:	bf00      	nop
 8007adc:	3708      	adds	r7, #8
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}

08007ae2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8007ae2:	b580      	push	{r7, lr}
 8007ae4:	b082      	sub	sp, #8
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4618      	mov	r0, r3
 8007af0:	f7fd f89d 	bl	8004c2e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007af4:	4603      	mov	r3, r0
 8007af6:	4618      	mov	r0, r3
 8007af8:	3708      	adds	r7, #8
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b082      	sub	sp, #8
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7fd f92a 	bl	8004d64 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007b10:	4603      	mov	r3, r0
 8007b12:	4618      	mov	r0, r3
 8007b14:	3708      	adds	r7, #8
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 8007b1a:	b590      	push	{r4, r7, lr}
 8007b1c:	b087      	sub	sp, #28
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	60f8      	str	r0, [r7, #12]
 8007b22:	60b9      	str	r1, [r7, #8]
 8007b24:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 8007b26:	68b8      	ldr	r0, [r7, #8]
 8007b28:	f7ff ffdb 	bl	8007ae2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>
 8007b2c:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 8007b2e:	68b8      	ldr	r0, [r7, #8]
 8007b30:	f7ff ffe5 	bl	8007afe <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>
 8007b34:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f7fd f91e 	bl	8004d7a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d107      	bne.n	8007b56 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_+0x3c>
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7fd f90b 	bl	8004d64 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d001      	beq.n	8007b5a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_+0x40>
 8007b56:	2301      	movs	r3, #1
 8007b58:	e000      	b.n	8007b5c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_+0x42>
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d005      	beq.n	8007b6c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_+0x52>
      dst.resize(dstRows, dstCols);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	693a      	ldr	r2, [r7, #16]
 8007b64:	6979      	ldr	r1, [r7, #20]
 8007b66:	4618      	mov	r0, r3
 8007b68:	f000 f812 	bl	8007b90 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 8007b6c:	68b8      	ldr	r0, [r7, #8]
 8007b6e:	f000 fa0b 	bl	8007f88 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3lhsEv>
 8007b72:	4604      	mov	r4, r0
 8007b74:	68b8      	ldr	r0, [r7, #8]
 8007b76:	f000 fa13 	bl	8007fa0 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3rhsEv>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	4621      	mov	r1, r4
 8007b80:	68f8      	ldr	r0, [r7, #12]
 8007b82:	f000 fa19 	bl	8007fb8 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEENS_10DenseShapeES5_Li3EE6evalToIS4_EEvRT_RKS3_RKS4_>
  }
 8007b86:	bf00      	nop
 8007b88:	371c      	adds	r7, #28
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd90      	pop	{r4, r7, pc}
	...

08007b90 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b086      	sub	sp, #24
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	60b9      	str	r1, [r7, #8]
 8007b9a:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	2b03      	cmp	r3, #3
 8007ba0:	d108      	bne.n	8007bb4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x24>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d105      	bne.n	8007bb4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x24>
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	db02      	blt.n	8007bb4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x24>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	da06      	bge.n	8007bc2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x32>
 8007bb4:	4b0c      	ldr	r3, [pc, #48]	; (8007be8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x58>)
 8007bb6:	4a0d      	ldr	r2, [pc, #52]	; (8007bec <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x5c>)
 8007bb8:	f240 1111 	movw	r1, #273	; 0x111
 8007bbc:	480c      	ldr	r0, [pc, #48]	; (8007bf0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x60>)
 8007bbe:	f015 ff4d 	bl	801da5c <__assert_func>
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	617b      	str	r3, [r7, #20]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	613b      	str	r3, [r7, #16]
  }
 8007bca:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	fb02 f103 	mul.w	r1, r2, r3
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	68ba      	ldr	r2, [r7, #8]
 8007bda:	f000 fa0b 	bl	8007ff4 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE6resizeEiii>
    }
 8007bde:	bf00      	nop
 8007be0:	3718      	adds	r7, #24
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	08022354 	.word	0x08022354
 8007bec:	080225cc 	.word	0x080225cc
 8007bf0:	08022570 	.word	0x08022570

08007bf4 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi3EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8007bfc:	2100      	movs	r1, #0
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 fa05 	bl	800800e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 fa20 	bl	800804a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi3EE3runERS9_>
  }
 8007c0a:	bf00      	nop
 8007c0c:	3708      	adds	r7, #8
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}

08007c12 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffEC1ERKSE_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b082      	sub	sp, #8
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
 8007c1a:	6039      	str	r1, [r7, #0]
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 fa23 	bl	8008068 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6839      	ldr	r1, [r7, #0]
 8007c26:	4618      	mov	r0, r3
 8007c28:	f000 fa29 	bl	800807e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4DataC1ERKSE_>
  }
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3708      	adds	r7, #8
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b082      	sub	sp, #8
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8007c3e:	2200      	movs	r2, #0
 8007c40:	2100      	movs	r1, #0
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 fa43 	bl	80080ce <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 fa59 	bl	8008100 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSL_>
  }
 8007c4e:	bf00      	nop
 8007c50:	3708      	adds	r7, #8
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b082      	sub	sp, #8
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4618      	mov	r0, r3
 8007c62:	f000 fa5d 	bl	8008120 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4rowsEv>
 8007c66:	4603      	mov	r3, r0
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3708      	adds	r7, #8
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	3308      	adds	r3, #8
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f000 fa5d 	bl	800813c <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>
 8007c82:	4603      	mov	r3, r0
 8007c84:	4618      	mov	r0, r3
 8007c86:	3708      	adds	r7, #8
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 8007c8c:	b590      	push	{r4, r7, lr}
 8007c8e:	b087      	sub	sp, #28
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	60b9      	str	r1, [r7, #8]
 8007c96:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 8007c98:	68b8      	ldr	r0, [r7, #8]
 8007c9a:	f7ff ffdc 	bl	8007c56 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE4rowsEv>
 8007c9e:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 8007ca0:	68b8      	ldr	r0, [r7, #8]
 8007ca2:	f7ff ffe5 	bl	8007c70 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE4colsEv>
 8007ca6:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7fd f865 	bl	8004d7a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d107      	bne.n	8007cc8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_+0x3c>
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f7fd f852 	bl	8004d64 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d001      	beq.n	8007ccc <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_+0x40>
 8007cc8:	2301      	movs	r3, #1
 8007cca:	e000      	b.n	8007cce <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_+0x42>
 8007ccc:	2300      	movs	r3, #0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d005      	beq.n	8007cde <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_+0x52>
      dst.resize(dstRows, dstCols);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	693a      	ldr	r2, [r7, #16]
 8007cd6:	6979      	ldr	r1, [r7, #20]
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f7ff ff59 	bl	8007b90 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 8007cde:	68b8      	ldr	r0, [r7, #8]
 8007ce0:	f000 fa39 	bl	8008156 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE3lhsEv>
 8007ce4:	4604      	mov	r4, r0
 8007ce6:	68b8      	ldr	r0, [r7, #8]
 8007ce8:	f000 fa40 	bl	800816c <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE3rhsEv>
 8007cec:	4603      	mov	r3, r0
 8007cee:	461a      	mov	r2, r3
 8007cf0:	4621      	mov	r1, r4
 8007cf2:	68f8      	ldr	r0, [r7, #12]
 8007cf4:	f000 fa46 	bl	8008184 <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEENS_10DenseShapeESK_Li3EE6evalToINS3_IfLi3ELi1ELi0ELi3ELi1EEEEEvRT_RKS8_RKSJ_>
  }
 8007cf8:	bf00      	nop
 8007cfa:	371c      	adds	r7, #28
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd90      	pop	{r4, r7, pc}

08007d00 <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_9assign_opIffEENS0_13add_assign_opIffEEE3runINS5_INS0_13scalar_sum_opIffEEKS3_KSE_EESG_EEvRS3_RKT_RKT0_>:
template<typename DstXprType, typename OtherXpr, typename ProductType, typename Func1, typename Func2>
struct assignment_from_xpr_op_product
{
  template<typename SrcXprType, typename InitialFunc>
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  void run(DstXprType &dst, const SrcXprType &src, const InitialFunc& /*func*/)
 8007d00:	b590      	push	{r4, r7, lr}
 8007d02:	b087      	sub	sp, #28
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	60f8      	str	r0, [r7, #12]
 8007d08:	60b9      	str	r1, [r7, #8]
 8007d0a:	607a      	str	r2, [r7, #4]
  {
    call_assignment_no_alias(dst, src.lhs(), Func1());
 8007d0c:	68b8      	ldr	r0, [r7, #8]
 8007d0e:	f000 fa57 	bl	80081c0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEE3lhsEv>
 8007d12:	4604      	mov	r4, r0
 8007d14:	f107 0310 	add.w	r3, r7, #16
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f7fe ffb8 	bl	8006c8e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8007d1e:	f107 0310 	add.w	r3, r7, #16
 8007d22:	461a      	mov	r2, r3
 8007d24:	4621      	mov	r1, r4
 8007d26:	68f8      	ldr	r0, [r7, #12]
 8007d28:	f7ff f8be 	bl	8006ea8 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
    call_assignment_no_alias(dst, src.rhs(), Func2());
 8007d2c:	68b8      	ldr	r0, [r7, #8]
 8007d2e:	f000 fa53 	bl	80081d8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEE3rhsEv>
 8007d32:	4604      	mov	r4, r0
 8007d34:	f107 0314 	add.w	r3, r7, #20
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f000 fa59 	bl	80081f0 <_ZN5Eigen8internal13add_assign_opIffEC1Ev>
 8007d3e:	f107 0314 	add.w	r3, r7, #20
 8007d42:	461a      	mov	r2, r3
 8007d44:	4621      	mov	r1, r4
 8007d46:	68f8      	ldr	r0, [r7, #12]
 8007d48:	f000 fa5d 	bl	8008206 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8007d4c:	bf00      	nop
 8007d4e:	371c      	adds	r7, #28
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd90      	pop	{r4, r7, pc}

08007d54 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b082      	sub	sp, #8
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f000 fa62 	bl	8008228 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4rowsEv>
 8007d64:	4603      	mov	r3, r0
 8007d66:	4618      	mov	r0, r3
 8007d68:	3708      	adds	r7, #8
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8007d6e:	b580      	push	{r7, lr}
 8007d70:	b082      	sub	sp, #8
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	691b      	ldr	r3, [r3, #16]
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7fc ff4c 	bl	8004c18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007d80:	4603      	mov	r3, r0
 8007d82:	4618      	mov	r0, r3
 8007d84:	3708      	adds	r7, #8
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 8007d8a:	b590      	push	{r4, r7, lr}
 8007d8c:	b087      	sub	sp, #28
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	60f8      	str	r0, [r7, #12]
 8007d92:	60b9      	str	r1, [r7, #8]
 8007d94:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 8007d96:	68b8      	ldr	r0, [r7, #8]
 8007d98:	f7ff ffdc 	bl	8007d54 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE4rowsEv>
 8007d9c:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 8007d9e:	68b8      	ldr	r0, [r7, #8]
 8007da0:	f7ff ffe5 	bl	8007d6e <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE4colsEv>
 8007da4:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	4618      	mov	r0, r3
 8007daa:	f7fc ff40 	bl	8004c2e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007dae:	4602      	mov	r2, r0
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d107      	bne.n	8007dc6 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x3c>
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	4618      	mov	r0, r3
 8007dba:	f7fc ff2d 	bl	8004c18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d001      	beq.n	8007dca <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x40>
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e000      	b.n	8007dcc <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x42>
 8007dca:	2300      	movs	r3, #0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d005      	beq.n	8007ddc <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x52>
      dst.resize(dstRows, dstCols);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	693a      	ldr	r2, [r7, #16]
 8007dd4:	6979      	ldr	r1, [r7, #20]
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f7ff fe42 	bl	8007a60 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 8007ddc:	68b8      	ldr	r0, [r7, #8]
 8007dde:	f000 fa31 	bl	8008244 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE3lhsEv>
 8007de2:	4604      	mov	r4, r0
 8007de4:	68b8      	ldr	r0, [r7, #8]
 8007de6:	f000 fa38 	bl	800825a <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE3rhsEv>
 8007dea:	4603      	mov	r3, r0
 8007dec:	461a      	mov	r2, r3
 8007dee:	4621      	mov	r1, r4
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f000 fa3e 	bl	8008272 <_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_NS_10DenseShapeESE_Li3EE6evalToIS6_EEvRT_RKSD_RS7_>
  }
 8007df6:	bf00      	nop
 8007df8:	371c      	adds	r7, #28
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd90      	pop	{r4, r7, pc}

08007dfe <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b082      	sub	sp, #8
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f7fc ffb5 	bl	8004d7a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007e10:	4603      	mov	r3, r0
    }
 8007e12:	4618      	mov	r0, r3
 8007e14:	3708      	adds	r7, #8
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}

08007e1a <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 8007e1a:	b580      	push	{r7, lr}
 8007e1c:	b082      	sub	sp, #8
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7fc ffa7 	bl	8004d7a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3708      	adds	r7, #8
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8007e36:	b480      	push	{r7}
 8007e38:	b083      	sub	sp, #12
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4618      	mov	r0, r3
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	3310      	adds	r3, #16
 8007e58:	4618      	mov	r0, r3
 8007e5a:	370c      	adds	r7, #12
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EENS_10DenseShapeESG_Li3EE6evalToINS5_IfLi3ELi3ELi0ELi3ELi3EEEEEvRT_RKSD_RKSF_>:
struct generic_product_impl<Lhs,Rhs,DenseShape,DenseShape,CoeffBasedProductMode>
{
  typedef typename Product<Lhs,Rhs>::Scalar Scalar;

  template<typename Dst>
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b08a      	sub	sp, #40	; 0x28
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	607a      	str	r2, [r7, #4]
  {
    // Same as: dst.noalias() = lhs.lazyProduct(rhs);
    // but easier on the compiler side
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 8007e70:	f107 0310 	add.w	r3, r7, #16
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	68b9      	ldr	r1, [r7, #8]
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f000 fa18 	bl	80082ae <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE11lazyProductINS_9TransposeIS6_EEEEKNS_7ProductISD_T_Li1EEERKNS0_ISJ_EE>
 8007e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7fe ff03 	bl	8006c8e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8007e88:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007e8c:	f107 0310 	add.w	r3, r7, #16
 8007e90:	4619      	mov	r1, r3
 8007e92:	68f8      	ldr	r0, [r7, #12]
 8007e94:	f000 fa22 	bl	80082dc <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8007e98:	bf00      	nop
 8007e9a:	3728      	adds	r7, #40	; 0x28
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f000 fa27 	bl	80082fe <_ZNK5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4dataEv>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3708      	adds	r7, #8
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}

08007eba <_ZNK5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3EE11outerStrideEv>:
      *          in a column-major matrix).
      *
      * \sa innerStride(), rowStride(), colStride()
      */
    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index outerStride() const EIGEN_NOEXCEPT
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b082      	sub	sp, #8
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
    {
      return derived().outerStride();
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f7fd fabd 	bl	8005442 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f000 fa22 	bl	8008314 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 8007ed0:	4603      	mov	r3, r0
    }
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3708      	adds	r7, #8
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}

08007eda <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8007eda:	b480      	push	{r7}
 8007edc:	b083      	sub	sp, #12
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EEC1EPKfi>:
  plainobjectbase_evaluator_data(const Scalar* ptr, Index outerStride) : data(ptr)
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	607a      	str	r2, [r7, #4]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	68ba      	ldr	r2, [r7, #8]
 8007f00:	601a      	str	r2, [r3, #0]
    EIGEN_UNUSED_VARIABLE(outerStride);
 8007f02:	1d3b      	adds	r3, r7, #4
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7fb ffbc 	bl	8003e82 <_ZN5Eigen8internal22ignore_unused_variableIiEEvRKT_>
  }
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3710      	adds	r7, #16
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE6resizeEiii>:
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
 8007f14:	b480      	push	{r7}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	60b9      	str	r1, [r7, #8]
 8007f1e:	607a      	str	r2, [r7, #4]
 8007f20:	603b      	str	r3, [r7, #0]
 8007f22:	bf00      	nop
 8007f24:	3714      	adds	r7, #20
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr

08007f2e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8007f2e:	b5b0      	push	{r4, r5, r7, lr}
 8007f30:	b082      	sub	sp, #8
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
 8007f36:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	689c      	ldr	r4, [r3, #8]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	6839      	ldr	r1, [r7, #0]
 8007f42:	4618      	mov	r0, r3
 8007f44:	f000 f9f2 	bl	800832c <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEi>
 8007f48:	4605      	mov	r5, r0
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	6839      	ldr	r1, [r7, #0]
 8007f50:	4618      	mov	r0, r3
 8007f52:	f000 f9fb 	bl	800834c <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE5coeffEi>
 8007f56:	4603      	mov	r3, r0
 8007f58:	461a      	mov	r2, r3
 8007f5a:	4629      	mov	r1, r5
 8007f5c:	4620      	mov	r0, r4
 8007f5e:	f000 fa05 	bl	800836c <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8007f62:	bf00      	nop
 8007f64:	3708      	adds	r7, #8
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bdb0      	pop	{r4, r5, r7, pc}

08007f6a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8007f6a:	b580      	push	{r7, lr}
 8007f6c:	b082      	sub	sp, #8
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8007f72:	2101      	movs	r1, #1
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f7ff ffda 	bl	8007f2e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 fa06 	bl	800838c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi2ELi9EE3runERS9_>
  }
 8007f80:	bf00      	nop
 8007f82:	3708      	adds	r7, #8
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4618      	mov	r0, r3
 8007f96:	370c      	adds	r7, #12
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	4618      	mov	r0, r3
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEENS_10DenseShapeES5_Li3EE6evalToIS4_EEvRT_RKS3_RKS4_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b088      	sub	sp, #32
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 8007fc4:	f107 0314 	add.w	r3, r7, #20
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	68b9      	ldr	r1, [r7, #8]
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f000 f9ec 	bl	80083aa <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>
 8007fd2:	f107 031c 	add.w	r3, r7, #28
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f7fe fe59 	bl	8006c8e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8007fdc:	f107 021c 	add.w	r2, r7, #28
 8007fe0:	f107 0314 	add.w	r3, r7, #20
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	68f8      	ldr	r0, [r7, #12]
 8007fe8:	f000 f9f6 	bl	80083d8 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8007fec:	bf00      	nop
 8007fee:	3720      	adds	r7, #32
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE6resizeEiii>:
 8007ff4:	b480      	push	{r7}
 8007ff6:	b085      	sub	sp, #20
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	607a      	str	r2, [r7, #4]
 8008000:	603b      	str	r3, [r7, #0]
 8008002:	bf00      	nop
 8008004:	3714      	adds	r7, #20
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr

0800800e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 800800e:	b5b0      	push	{r4, r5, r7, lr}
 8008010:	b082      	sub	sp, #8
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
 8008016:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	689c      	ldr	r4, [r3, #8]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	6839      	ldr	r1, [r7, #0]
 8008022:	4618      	mov	r0, r3
 8008024:	f000 f9e9 	bl	80083fa <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 8008028:	4605      	mov	r5, r0
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	6839      	ldr	r1, [r7, #0]
 8008030:	4618      	mov	r0, r3
 8008032:	f000 f9f2 	bl	800841a <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEi>
 8008036:	4603      	mov	r3, r0
 8008038:	461a      	mov	r2, r3
 800803a:	4629      	mov	r1, r5
 800803c:	4620      	mov	r0, r4
 800803e:	f000 f995 	bl	800836c <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8008042:	bf00      	nop
 8008044:	3708      	adds	r7, #8
 8008046:	46bd      	mov	sp, r7
 8008048:	bdb0      	pop	{r4, r5, r7, pc}

0800804a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi3EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800804a:	b580      	push	{r7, lr}
 800804c:	b082      	sub	sp, #8
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8008052:	2101      	movs	r1, #1
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f7ff ffda 	bl	800800e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 f9ed 	bl	800843a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi2ELi3EE3runERS9_>
  }
 8008060:	bf00      	nop
 8008062:	3708      	adds	r7, #8
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4618      	mov	r0, r3
 8008074:	370c      	adds	r7, #12
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr

0800807e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4DataC1ERKSE_>:
  {
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800807e:	b590      	push	{r4, r7, lr}
 8008080:	b083      	sub	sp, #12
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
 8008086:	6039      	str	r1, [r7, #0]
 8008088:	687c      	ldr	r4, [r7, #4]
 800808a:	6838      	ldr	r0, [r7, #0]
 800808c:	f000 f9e4 	bl	8008458 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E7functorEv>
 8008090:	4603      	mov	r3, r0
 8008092:	4619      	mov	r1, r3
 8008094:	4620      	mov	r0, r4
 8008096:	f7fd fbe1 	bl	800585c <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	1d1c      	adds	r4, r3, #4
 800809e:	6838      	ldr	r0, [r7, #0]
 80080a0:	f000 f9e6 	bl	8008470 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E3lhsEv>
 80080a4:	4603      	mov	r3, r0
 80080a6:	4619      	mov	r1, r3
 80080a8:	4620      	mov	r0, r4
 80080aa:	f000 f9f8 	bl	800849e <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEC1ERS9_>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80080b4:	6838      	ldr	r0, [r7, #0]
 80080b6:	f000 f9e6 	bl	8008486 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E3rhsEv>
 80080ba:	4603      	mov	r3, r0
 80080bc:	4619      	mov	r1, r3
 80080be:	4620      	mov	r0, r4
 80080c0:	f000 f9fc 	bl	80084bc <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS4_>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	4618      	mov	r0, r3
 80080c8:	370c      	adds	r7, #12
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd90      	pop	{r4, r7, pc}

080080ce <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b086      	sub	sp, #24
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	60f8      	str	r0, [r7, #12]
 80080d6:	60b9      	str	r1, [r7, #8]
 80080d8:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 80080da:	6879      	ldr	r1, [r7, #4]
 80080dc:	68b8      	ldr	r0, [r7, #8]
 80080de:	f000 f9fc 	bl	80084da <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 80080e2:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 80080e4:	6879      	ldr	r1, [r7, #4]
 80080e6:	68b8      	ldr	r0, [r7, #8]
 80080e8:	f000 fa03 	bl	80084f2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 80080ec:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 80080ee:	693a      	ldr	r2, [r7, #16]
 80080f0:	6979      	ldr	r1, [r7, #20]
 80080f2:	68f8      	ldr	r0, [r7, #12]
 80080f4:	f000 fa09 	bl	800850a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 80080f8:	bf00      	nop
 80080fa:	3718      	adds	r7, #24
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8008108:	2201      	movs	r2, #1
 800810a:	2100      	movs	r1, #0
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f7ff ffde 	bl	80080ce <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 fa1f 	bl	8008556 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSL_>
  }
 8008118:	bf00      	nop
 800811a:	3708      	adds	r7, #8
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4618      	mov	r0, r3
 800812e:	f7fc fd7e 	bl	8004c2e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8008132:	4603      	mov	r3, r0
 8008134:	4618      	mov	r0, r3
 8008136:	3708      	adds	r7, #8
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>:
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR  Index cols() const EIGEN_NOEXCEPT { return m_xpr.rows(); }
 800813c:	b580      	push	{r7, lr}
 800813e:	b082      	sub	sp, #8
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4618      	mov	r0, r3
 8008148:	f7fd fdc3 	bl	8005cd2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800814c:	4603      	mov	r3, r0
 800814e:	4618      	mov	r0, r3
 8008150:	3708      	adds	r7, #8
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}

08008156 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8008156:	b480      	push	{r7}
 8008158:	b083      	sub	sp, #12
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4618      	mov	r0, r3
 8008162:	370c      	adds	r7, #12
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	3308      	adds	r3, #8
 8008178:	4618      	mov	r0, r3
 800817a:	370c      	adds	r7, #12
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEENS_10DenseShapeESK_Li3EE6evalToINS3_IfLi3ELi1ELi0ELi3ELi1EEEEEvRT_RKS8_RKSJ_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8008184:	b580      	push	{r7, lr}
 8008186:	b08c      	sub	sp, #48	; 0x30
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 8008190:	f107 0310 	add.w	r3, r7, #16
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	68b9      	ldr	r1, [r7, #8]
 8008198:	4618      	mov	r0, r3
 800819a:	f000 f9ec 	bl	8008576 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE11lazyProductINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEEKNS1_IS7_T_Li1EEERKNS0_ISM_EE>
 800819e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80081a2:	4618      	mov	r0, r3
 80081a4:	f7fe fd73 	bl	8006c8e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 80081a8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80081ac:	f107 0310 	add.w	r3, r7, #16
 80081b0:	4619      	mov	r1, r3
 80081b2:	68f8      	ldr	r0, [r7, #12]
 80081b4:	f000 f9f6 	bl	80085a4 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 80081b8:	bf00      	nop
 80081ba:	3730      	adds	r7, #48	; 0x30
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4618      	mov	r0, r3
 80081ce:	370c      	adds	r7, #12
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr

080081d8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 80081d8:	b480      	push	{r7}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	3304      	adds	r3, #4
 80081e4:	4618      	mov	r0, r3
 80081e6:	370c      	adds	r7, #12
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <_ZN5Eigen8internal13add_assign_opIffEC1Ev>:
  * \brief Template functor for scalar/packet assignment with addition
  *
  */
template<typename DstScalar,typename SrcScalar> struct add_assign_op {

  EIGEN_EMPTY_STRUCT_CTOR(add_assign_op)
 80081f0:	b480      	push	{r7}
 80081f2:	b083      	sub	sp, #12
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	4618      	mov	r0, r3
 80081fc:	370c      	adds	r7, #12
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr

08008206 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8008206:	b580      	push	{r7, lr}
 8008208:	b086      	sub	sp, #24
 800820a:	af00      	add	r7, sp, #0
 800820c:	60f8      	str	r0, [r7, #12]
 800820e:	60b9      	str	r1, [r7, #8]
 8008210:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	68b9      	ldr	r1, [r7, #8]
 800821a:	6978      	ldr	r0, [r7, #20]
 800821c:	f000 f9d4 	bl	80085c8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 8008220:	bf00      	nop
 8008222:	3718      	adds	r7, #24
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4618      	mov	r0, r3
 8008236:	f7fc fcfa 	bl	8004c2e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800823a:	4603      	mov	r3, r0
    }
 800823c:	4618      	mov	r0, r3
 800823e:	3708      	adds	r7, #8
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8008244:	b480      	push	{r7}
 8008246:	b083      	sub	sp, #12
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	4618      	mov	r0, r3
 8008250:	370c      	adds	r7, #12
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr

0800825a <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800825a:	b480      	push	{r7}
 800825c:	b083      	sub	sp, #12
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	691b      	ldr	r3, [r3, #16]
 8008266:	4618      	mov	r0, r3
 8008268:	370c      	adds	r7, #12
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr

08008272 <_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_NS_10DenseShapeESE_Li3EE6evalToIS6_EEvRT_RKSD_RS7_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8008272:	b580      	push	{r7, lr}
 8008274:	b08a      	sub	sp, #40	; 0x28
 8008276:	af00      	add	r7, sp, #0
 8008278:	60f8      	str	r0, [r7, #12]
 800827a:	60b9      	str	r1, [r7, #8]
 800827c:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 800827e:	f107 0310 	add.w	r3, r7, #16
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	68b9      	ldr	r1, [r7, #8]
 8008286:	4618      	mov	r0, r3
 8008288:	f000 f9d8 	bl	800863c <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE11lazyProductIS6_EEKNS8_ISD_T_Li1EEERKNS0_ISG_EE>
 800828c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008290:	4618      	mov	r0, r3
 8008292:	f7fe fcfc 	bl	8006c8e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8008296:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800829a:	f107 0310 	add.w	r3, r7, #16
 800829e:	4619      	mov	r1, r3
 80082a0:	68f8      	ldr	r0, [r7, #12]
 80082a2:	f000 f9e2 	bl	800866a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 80082a6:	bf00      	nop
 80082a8:	3728      	adds	r7, #40	; 0x28
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}

080082ae <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE11lazyProductINS_9TransposeIS6_EEEEKNS_7ProductISD_T_Li1EEERKNS0_ISJ_EE>:
  */
template<typename Derived>
template<typename OtherDerived>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
const Product<Derived,OtherDerived,LazyProduct>
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 80082ae:	b590      	push	{r4, r7, lr}
 80082b0:	b085      	sub	sp, #20
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	60f8      	str	r0, [r7, #12]
 80082b6:	60b9      	str	r1, [r7, #8]
 80082b8:	607a      	str	r2, [r7, #4]
    INVALID_VECTOR_VECTOR_PRODUCT__IF_YOU_WANTED_A_DOT_OR_COEFF_WISE_PRODUCT_YOU_MUST_USE_THE_EXPLICIT_FUNCTIONS)
  EIGEN_STATIC_ASSERT(ProductIsValid || !(SameSizes && !AreVectors),
    INVALID_MATRIX_PRODUCT__IF_YOU_WANTED_A_COEFF_WISE_PRODUCT_YOU_MUST_USE_THE_EXPLICIT_FUNCTION)
  EIGEN_STATIC_ASSERT(ProductIsValid || SameSizes, INVALID_MATRIX_PRODUCT)

  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 80082ba:	68b8      	ldr	r0, [r7, #8]
 80082bc:	f7fd f821 	bl	8005302 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE7derivedEv>
 80082c0:	4604      	mov	r4, r0
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f7fd f828 	bl	8005318 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 80082c8:	4603      	mov	r3, r0
 80082ca:	461a      	mov	r2, r3
 80082cc:	4621      	mov	r1, r4
 80082ce:	68f8      	ldr	r0, [r7, #12]
 80082d0:	f000 fa00 	bl	80086d4 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_>
}
 80082d4:	68f8      	ldr	r0, [r7, #12]
 80082d6:	3714      	adds	r7, #20
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd90      	pop	{r4, r7, pc}

080082dc <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 80082dc:	b580      	push	{r7, lr}
 80082de:	b086      	sub	sp, #24
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	68b9      	ldr	r1, [r7, #8]
 80082f0:	6978      	ldr	r0, [r7, #20]
 80082f2:	f000 fa1f 	bl	8008734 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>
}
 80082f6:	bf00      	nop
 80082f8:	3718      	adds	r7, #24
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}

080082fe <_ZNK5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 80082fe:	b480      	push	{r7}
 8008300:	b083      	sub	sp, #12
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	4618      	mov	r0, r3
 800830a:	370c      	adds	r7, #12
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>:
 8008314:	b580      	push	{r7, lr}
 8008316:	b082      	sub	sp, #8
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 fa1c 	bl	800875a <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE9innerSizeEv>
 8008322:	4603      	mov	r3, r0
 8008324:	4618      	mov	r0, r3
 8008326:	3708      	adds	r7, #8
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEi>:
  Scalar& coeffRef(Index index)
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
    return const_cast<Scalar*>(m_d.data)[index];
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	4413      	add	r3, r2
  }
 8008340:	4618      	mov	r0, r3
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE5coeffEi>:
  CoeffReturnType coeff(Index index) const
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
    return m_d.data[index];
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	4413      	add	r3, r2
  }
 8008360:	4618      	mov	r0, r3
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a = b; }
 800836c:	b480      	push	{r7}
 800836e:	b085      	sub	sp, #20
 8008370:	af00      	add	r7, sp, #0
 8008372:	60f8      	str	r0, [r7, #12]
 8008374:	60b9      	str	r1, [r7, #8]
 8008376:	607a      	str	r2, [r7, #4]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	601a      	str	r2, [r3, #0]
 8008380:	bf00      	nop
 8008382:	3714      	adds	r7, #20
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi2ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800838c:	b580      	push	{r7, lr}
 800838e:	b082      	sub	sp, #8
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8008394:	2102      	movs	r1, #2
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f7ff fdc9 	bl	8007f2e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 f9e8 	bl	8008772 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi3ELi9EE3runERS9_>
  }
 80083a2:	bf00      	nop
 80083a4:	3708      	adds	r7, #8
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}

080083aa <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 80083aa:	b590      	push	{r4, r7, lr}
 80083ac:	b085      	sub	sp, #20
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	60f8      	str	r0, [r7, #12]
 80083b2:	60b9      	str	r1, [r7, #8]
 80083b4:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 80083b6:	68b8      	ldr	r0, [r7, #8]
 80083b8:	f7fd f843 	bl	8005442 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80083bc:	4604      	mov	r4, r0
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f7fc fe77 	bl	80050b2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80083c4:	4603      	mov	r3, r0
 80083c6:	461a      	mov	r2, r3
 80083c8:	4621      	mov	r1, r4
 80083ca:	68f8      	ldr	r0, [r7, #12]
 80083cc:	f000 fa04 	bl	80087d8 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_>
}
 80083d0:	68f8      	ldr	r0, [r7, #12]
 80083d2:	3714      	adds	r7, #20
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd90      	pop	{r4, r7, pc}

080083d8 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 80083d8:	b580      	push	{r7, lr}
 80083da:	b086      	sub	sp, #24
 80083dc:	af00      	add	r7, sp, #0
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	60b9      	str	r1, [r7, #8]
 80083e2:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	68b9      	ldr	r1, [r7, #8]
 80083ec:	6978      	ldr	r0, [r7, #20]
 80083ee:	f000 fa21 	bl	8008834 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>
}
 80083f2:	bf00      	nop
 80083f4:	3718      	adds	r7, #24
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}

080083fa <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>:
  Scalar& coeffRef(Index index)
 80083fa:	b480      	push	{r7}
 80083fc:	b083      	sub	sp, #12
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
 8008402:	6039      	str	r1, [r7, #0]
    return const_cast<Scalar*>(m_d.data)[index];
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	4413      	add	r3, r2
  }
 800840e:	4618      	mov	r0, r3
 8008410:	370c      	adds	r7, #12
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr

0800841a <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEi>:
  CoeffReturnType coeff(Index index) const
 800841a:	b480      	push	{r7}
 800841c:	b083      	sub	sp, #12
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
 8008422:	6039      	str	r1, [r7, #0]
    return m_d.data[index];
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	4413      	add	r3, r2
  }
 800842e:	4618      	mov	r0, r3
 8008430:	370c      	adds	r7, #12
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr

0800843a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi2ELi3EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800843a:	b580      	push	{r7, lr}
 800843c:	b082      	sub	sp, #8
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8008442:	2102      	movs	r1, #2
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f7ff fde2 	bl	800800e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 fa05 	bl	800885a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi3ELi3EE3runERS9_>
  }
 8008450:	bf00      	nop
 8008452:	3708      	adds	r7, #8
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	3310      	adds	r3, #16
 8008464:	4618      	mov	r0, r3
 8008466:	370c      	adds	r7, #12
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr

08008470 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8008470:	b480      	push	{r7}
 8008472:	b083      	sub	sp, #12
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4618      	mov	r0, r3
 800847c:	370c      	adds	r7, #12
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr

08008486 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8008486:	b480      	push	{r7}
 8008488:	b083      	sub	sp, #12
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	4618      	mov	r0, r3
 8008494:	370c      	adds	r7, #12
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr

0800849e <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEC1ERS9_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800849e:	b580      	push	{r7, lr}
 80084a0:	b082      	sub	sp, #8
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	6078      	str	r0, [r7, #4]
 80084a6:	6039      	str	r1, [r7, #0]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6839      	ldr	r1, [r7, #0]
 80084ac:	4618      	mov	r0, r3
 80084ae:	f000 f9de 	bl	800886e <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEC1ERKS8_>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	4618      	mov	r0, r3
 80084b6:	3708      	adds	r7, #8
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS4_>:
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6839      	ldr	r1, [r7, #0]
 80084ca:	4618      	mov	r0, r3
 80084cc:	f7ff f846 	bl	800755c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	4618      	mov	r0, r3
 80084d4:	3708      	adds	r7, #8
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}

080084da <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 80084da:	b480      	push	{r7}
 80084dc:	b083      	sub	sp, #12
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
 80084e2:	6039      	str	r1, [r7, #0]
      : inner;
 80084e4:	683b      	ldr	r3, [r7, #0]
  }
 80084e6:	4618      	mov	r0, r3
 80084e8:	370c      	adds	r7, #12
 80084ea:	46bd      	mov	sp, r7
 80084ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f0:	4770      	bx	lr

080084f2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 80084f2:	b480      	push	{r7}
 80084f4:	b083      	sub	sp, #12
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
 80084fa:	6039      	str	r1, [r7, #0]
      : outer;
 80084fc:	687b      	ldr	r3, [r7, #4]
  }
 80084fe:	4618      	mov	r0, r3
 8008500:	370c      	adds	r7, #12
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr

0800850a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 800850a:	b5b0      	push	{r4, r5, r7, lr}
 800850c:	b086      	sub	sp, #24
 800850e:	af00      	add	r7, sp, #0
 8008510:	60f8      	str	r0, [r7, #12]
 8008512:	60b9      	str	r1, [r7, #8]
 8008514:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	689c      	ldr	r4, [r3, #8]
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	68b9      	ldr	r1, [r7, #8]
 8008522:	4618      	mov	r0, r3
 8008524:	f000 f9b2 	bl	800888c <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 8008528:	4605      	mov	r5, r0
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	68b9      	ldr	r1, [r7, #8]
 8008532:	4618      	mov	r0, r3
 8008534:	f000 f9c2 	bl	80088bc <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE5coeffEii>
 8008538:	eef0 7a40 	vmov.f32	s15, s0
 800853c:	edc7 7a05 	vstr	s15, [r7, #20]
 8008540:	f107 0314 	add.w	r3, r7, #20
 8008544:	461a      	mov	r2, r3
 8008546:	4629      	mov	r1, r5
 8008548:	4620      	mov	r0, r4
 800854a:	f7ff ff0f 	bl	800836c <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800854e:	bf00      	nop
 8008550:	3718      	adds	r7, #24
 8008552:	46bd      	mov	sp, r7
 8008554:	bdb0      	pop	{r4, r5, r7, pc}

08008556 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8008556:	b580      	push	{r7, lr}
 8008558:	b082      	sub	sp, #8
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800855e:	2202      	movs	r2, #2
 8008560:	2100      	movs	r1, #0
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f7ff fdb3 	bl	80080ce <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 f9ce 	bl	800890a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSL_>
  }
 800856e:	bf00      	nop
 8008570:	3708      	adds	r7, #8
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}

08008576 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE11lazyProductINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEEKNS1_IS7_T_Li1EEERKNS0_ISM_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 8008576:	b590      	push	{r4, r7, lr}
 8008578:	b085      	sub	sp, #20
 800857a:	af00      	add	r7, sp, #0
 800857c:	60f8      	str	r0, [r7, #12]
 800857e:	60b9      	str	r1, [r7, #8]
 8008580:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 8008582:	68b8      	ldr	r0, [r7, #8]
 8008584:	f7fd fbe9 	bl	8005d5a <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE7derivedEv>
 8008588:	4604      	mov	r4, r0
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f7fd fbf0 	bl	8005d70 <_ZNK5Eigen9EigenBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEE7derivedEv>
 8008590:	4603      	mov	r3, r0
 8008592:	461a      	mov	r2, r3
 8008594:	4621      	mov	r1, r4
 8008596:	68f8      	ldr	r0, [r7, #12]
 8008598:	f000 f9ec 	bl	8008974 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_>
}
 800859c:	68f8      	ldr	r0, [r7, #12]
 800859e:	3714      	adds	r7, #20
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd90      	pop	{r4, r7, pc}

080085a4 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b086      	sub	sp, #24
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	68b9      	ldr	r1, [r7, #8]
 80085b8:	6978      	ldr	r0, [r7, #20]
 80085ba:	f000 fa0d 	bl	80089d8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_>
}
 80085be:	bf00      	nop
 80085c0:	3718      	adds	r7, #24
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
	...

080085c8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::add_assign_op<Scalar,Scalar> &)
 80085c8:	b590      	push	{r4, r7, lr}
 80085ca:	b085      	sub	sp, #20
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	60f8      	str	r0, [r7, #12]
 80085d0:	60b9      	str	r1, [r7, #8]
 80085d2:	607a      	str	r2, [r7, #4]
    eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	4618      	mov	r0, r3
 80085d8:	f7fc fbcf 	bl	8004d7a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80085dc:	4604      	mov	r4, r0
 80085de:	68b8      	ldr	r0, [r7, #8]
 80085e0:	f7fd fdd7 	bl	8006192 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4rowsEv>
 80085e4:	4603      	mov	r3, r0
 80085e6:	429c      	cmp	r4, r3
 80085e8:	d10a      	bne.n	8008600 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x38>
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	4618      	mov	r0, r3
 80085ee:	f7fc fbb9 	bl	8004d64 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80085f2:	4604      	mov	r4, r0
 80085f4:	68b8      	ldr	r0, [r7, #8]
 80085f6:	f7fd fdda 	bl	80061ae <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4colsEv>
 80085fa:	4603      	mov	r3, r0
 80085fc:	429c      	cmp	r4, r3
 80085fe:	d005      	beq.n	800860c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x44>
 8008600:	4b0b      	ldr	r3, [pc, #44]	; (8008630 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x68>)
 8008602:	4a0c      	ldr	r2, [pc, #48]	; (8008634 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x6c>)
 8008604:	21a1      	movs	r1, #161	; 0xa1
 8008606:	480c      	ldr	r0, [pc, #48]	; (8008638 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x70>)
 8008608:	f015 fa28 	bl	801da5c <__assert_func>
    generic_product_impl<Lhs, Rhs>::addTo(dst, src.lhs(), src.rhs());
 800860c:	68b8      	ldr	r0, [r7, #8]
 800860e:	f000 f9f6 	bl	80089fe <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE3lhsEv>
 8008612:	4604      	mov	r4, r0
 8008614:	68b8      	ldr	r0, [r7, #8]
 8008616:	f000 f9fe 	bl	8008a16 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE3rhsEv>
 800861a:	4603      	mov	r3, r0
 800861c:	461a      	mov	r2, r3
 800861e:	4621      	mov	r1, r4
 8008620:	68f8      	ldr	r0, [r7, #12]
 8008622:	f000 fa04 	bl	8008a2e <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEENS_10DenseShapeESE_Li3EE5addToIS3_EEvRT_RKS3_RKSD_>
  }
 8008626:	bf00      	nop
 8008628:	3714      	adds	r7, #20
 800862a:	46bd      	mov	sp, r7
 800862c:	bd90      	pop	{r4, r7, pc}
 800862e:	bf00      	nop
 8008630:	08022658 	.word	0x08022658
 8008634:	08022690 	.word	0x08022690
 8008638:	08022b50 	.word	0x08022b50

0800863c <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE11lazyProductIS6_EEKNS8_ISD_T_Li1EEERKNS0_ISG_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 800863c:	b590      	push	{r4, r7, lr}
 800863e:	b085      	sub	sp, #20
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 8008648:	68b8      	ldr	r0, [r7, #8]
 800864a:	f7fd feed 	bl	8006428 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE7derivedEv>
 800864e:	4604      	mov	r4, r0
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f7fc fef6 	bl	8005442 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8008656:	4603      	mov	r3, r0
 8008658:	461a      	mov	r2, r3
 800865a:	4621      	mov	r1, r4
 800865c:	68f8      	ldr	r0, [r7, #12]
 800865e:	f000 fa29 	bl	8008ab4 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_>
}
 8008662:	68f8      	ldr	r0, [r7, #12]
 8008664:	3714      	adds	r7, #20
 8008666:	46bd      	mov	sp, r7
 8008668:	bd90      	pop	{r4, r7, pc}

0800866a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800866a:	b580      	push	{r7, lr}
 800866c:	b086      	sub	sp, #24
 800866e:	af00      	add	r7, sp, #0
 8008670:	60f8      	str	r0, [r7, #12]
 8008672:	60b9      	str	r1, [r7, #8]
 8008674:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	68b9      	ldr	r1, [r7, #8]
 800867e:	6978      	ldr	r0, [r7, #20]
 8008680:	f000 fa46 	bl	8008b10 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 8008684:	bf00      	nop
 8008686:	3718      	adds	r7, #24
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>:
 800868c:	b580      	push	{r7, lr}
 800868e:	b082      	sub	sp, #8
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 fa4e 	bl	8008b36 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4618      	mov	r0, r3
 800869e:	3708      	adds	r7, #8
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1ELi4EEC1Ev>:
class dense_product_base
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b082      	sub	sp, #8
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f7ff ffed 	bl	800868c <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	4618      	mov	r0, r3
 80086b6:	3708      	adds	r7, #8
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80086bc:	b580      	push	{r7, lr}
 80086be:	b082      	sub	sp, #8
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f7ff ffed 	bl	80086a4 <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1ELi4EEC1Ev>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	4618      	mov	r0, r3
 80086ce:	3708      	adds	r7, #8
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 80086d4:	b590      	push	{r4, r7, lr}
 80086d6:	b085      	sub	sp, #20
 80086d8:	af00      	add	r7, sp, #0
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	60b9      	str	r1, [r7, #8]
 80086de:	607a      	str	r2, [r7, #4]
 80086e0:	68f8      	ldr	r0, [r7, #12]
 80086e2:	f7ff ffeb 	bl	80086bc <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1ENS_5DenseEEC1Ev>
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	68b9      	ldr	r1, [r7, #8]
 80086ea:	4618      	mov	r0, r3
 80086ec:	f7fb fe5c 	bl	80043a8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	3310      	adds	r3, #16
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	6812      	ldr	r2, [r2, #0]
 80086f8:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 80086fa:	68b8      	ldr	r0, [r7, #8]
 80086fc:	f7fc fe3b 	bl	8005376 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4colsEv>
 8008700:	4604      	mov	r4, r0
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f7fc fe45 	bl	8005392 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8008708:	4603      	mov	r3, r0
 800870a:	429c      	cmp	r4, r3
 800870c:	d005      	beq.n	800871a <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_+0x46>
 800870e:	4b06      	ldr	r3, [pc, #24]	; (8008728 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_+0x54>)
 8008710:	4a06      	ldr	r2, [pc, #24]	; (800872c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_+0x58>)
 8008712:	2160      	movs	r1, #96	; 0x60
 8008714:	4806      	ldr	r0, [pc, #24]	; (8008730 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_+0x5c>)
 8008716:	f015 f9a1 	bl	801da5c <__assert_func>
 800871a:	bf00      	nop
    }
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	4618      	mov	r0, r3
 8008720:	3714      	adds	r7, #20
 8008722:	46bd      	mov	sp, r7
 8008724:	bd90      	pop	{r4, r7, pc}
 8008726:	bf00      	nop
 8008728:	0801fb84 	.word	0x0801fb84
 800872c:	08022bb0 	.word	0x08022bb0
 8008730:	0801fed4 	.word	0x0801fed4

08008734 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	60b9      	str	r1, [r7, #8]
 800873e:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8008740:	68b9      	ldr	r1, [r7, #8]
 8008742:	68f8      	ldr	r0, [r7, #12]
 8008744:	f000 fa02 	bl	8008b4c <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	68b9      	ldr	r1, [r7, #8]
 800874c:	68f8      	ldr	r0, [r7, #12]
 800874e:	f000 fab3 	bl	8008cb8 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008752:	bf00      	nop
 8008754:	3710      	adds	r7, #16
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}

0800875a <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE9innerSizeEv>:
    Index innerSize() const
 800875a:	b580      	push	{r7, lr}
 800875c:	b082      	sub	sp, #8
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 fae0 	bl	8008d28 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8008768:	4603      	mov	r3, r0
    }
 800876a:	4618      	mov	r0, r3
 800876c:	3708      	adds	r7, #8
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}

08008772 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi3ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8008772:	b580      	push	{r7, lr}
 8008774:	b082      	sub	sp, #8
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800877a:	2103      	movs	r1, #3
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f7ff fbd6 	bl	8007f2e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 fae0 	bl	8008d48 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi4ELi9EE3runERS9_>
  }
 8008788:	bf00      	nop
 800878a:	3708      	adds	r7, #8
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>:
 8008790:	b580      	push	{r7, lr}
 8008792:	b082      	sub	sp, #8
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 fae4 	bl	8008d66 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	4618      	mov	r0, r3
 80087a2:	3708      	adds	r7, #8
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1ELi3EEC1Ev>:
class dense_product_base
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b082      	sub	sp, #8
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f7ff ffed 	bl	8008790 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	4618      	mov	r0, r3
 80087ba:	3708      	adds	r7, #8
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f7ff ffed 	bl	80087a8 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1ELi3EEC1Ev>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	4618      	mov	r0, r3
 80087d2:	3708      	adds	r7, #8
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 80087d8:	b590      	push	{r4, r7, lr}
 80087da:	b085      	sub	sp, #20
 80087dc:	af00      	add	r7, sp, #0
 80087de:	60f8      	str	r0, [r7, #12]
 80087e0:	60b9      	str	r1, [r7, #8]
 80087e2:	607a      	str	r2, [r7, #4]
 80087e4:	68f8      	ldr	r0, [r7, #12]
 80087e6:	f7ff ffeb 	bl	80087c0 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1ENS_5DenseEEC1Ev>
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	68ba      	ldr	r2, [r7, #8]
 80087ee:	601a      	str	r2, [r3, #0]
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	4618      	mov	r0, r3
 80087fa:	f7fc fa0d 	bl	8004c18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80087fe:	4604      	mov	r4, r0
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	4618      	mov	r0, r3
 8008804:	f7fc fab9 	bl	8004d7a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8008808:	4603      	mov	r3, r0
 800880a:	429c      	cmp	r4, r3
 800880c:	d005      	beq.n	800881a <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_+0x42>
 800880e:	4b06      	ldr	r3, [pc, #24]	; (8008828 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_+0x50>)
 8008810:	4a06      	ldr	r2, [pc, #24]	; (800882c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_+0x54>)
 8008812:	2160      	movs	r1, #96	; 0x60
 8008814:	4806      	ldr	r0, [pc, #24]	; (8008830 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_+0x58>)
 8008816:	f015 f921 	bl	801da5c <__assert_func>
 800881a:	bf00      	nop
    }
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	4618      	mov	r0, r3
 8008820:	3714      	adds	r7, #20
 8008822:	46bd      	mov	sp, r7
 8008824:	bd90      	pop	{r4, r7, pc}
 8008826:	bf00      	nop
 8008828:	0801fb84 	.word	0x0801fb84
 800882c:	08022e74 	.word	0x08022e74
 8008830:	0801fed4 	.word	0x0801fed4

08008834 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	60b9      	str	r1, [r7, #8]
 800883e:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8008840:	68b9      	ldr	r1, [r7, #8]
 8008842:	68f8      	ldr	r0, [r7, #12]
 8008844:	f000 fa9a 	bl	8008d7c <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8008848:	687a      	ldr	r2, [r7, #4]
 800884a:	68b9      	ldr	r1, [r7, #8]
 800884c:	68f8      	ldr	r0, [r7, #12]
 800884e:	f000 fac3 	bl	8008dd8 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008852:	bf00      	nop
 8008854:	3710      	adds	r7, #16
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}

0800885a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi3ELi3EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800885a:	b480      	push	{r7}
 800885c:	b083      	sub	sp, #12
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
 8008862:	bf00      	nop
 8008864:	370c      	adds	r7, #12
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr

0800886e <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEC1ERKS8_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800886e:	b580      	push	{r7, lr}
 8008870:	b082      	sub	sp, #8
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
 8008876:	6039      	str	r1, [r7, #0]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6839      	ldr	r1, [r7, #0]
 800887c:	4618      	mov	r0, r3
 800887e:	f000 fae3 	bl	8008e48 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4618      	mov	r0, r3
 8008886:	3708      	adds	r7, #8
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>:
  Scalar& coeffRef(Index row, Index col)
 800888c:	b590      	push	{r4, r7, lr}
 800888e:	b085      	sub	sp, #20
 8008890:	af00      	add	r7, sp, #0
 8008892:	60f8      	str	r0, [r7, #12]
 8008894:	60b9      	str	r1, [r7, #8]
 8008896:	607a      	str	r2, [r7, #4]
      return const_cast<Scalar*>(m_d.data)[row + col * m_d.outerStride()];
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681c      	ldr	r4, [r3, #0]
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	4618      	mov	r0, r3
 80088a0:	f000 fb0f 	bl	8008ec2 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>
 80088a4:	4602      	mov	r2, r0
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	fb03 f202 	mul.w	r2, r3, r2
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	4413      	add	r3, r2
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	4423      	add	r3, r4
  }
 80088b4:	4618      	mov	r0, r3
 80088b6:	3714      	adds	r7, #20
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd90      	pop	{r4, r7, pc}

080088bc <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 80088bc:	b5b0      	push	{r4, r5, r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	4618      	mov	r0, r3
 80088cc:	f000 fb04 	bl	8008ed8 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4Data4funcEv>
 80088d0:	4604      	mov	r4, r0
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	3304      	adds	r3, #4
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	68b9      	ldr	r1, [r7, #8]
 80088da:	4618      	mov	r0, r3
 80088dc:	f000 fb07 	bl	8008eee <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEE5coeffEii>
 80088e0:	4605      	mov	r5, r0
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	332c      	adds	r3, #44	; 0x2c
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	68b9      	ldr	r1, [r7, #8]
 80088ea:	4618      	mov	r0, r3
 80088ec:	f000 fb17 	bl	8008f1e <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE5coeffEii>
 80088f0:	4603      	mov	r3, r0
 80088f2:	461a      	mov	r2, r3
 80088f4:	4629      	mov	r1, r5
 80088f6:	4620      	mov	r0, r4
 80088f8:	f000 fb29 	bl	8008f4e <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 80088fc:	eef0 7a40 	vmov.f32	s15, s0
  }
 8008900:	eeb0 0a67 	vmov.f32	s0, s15
 8008904:	3710      	adds	r7, #16
 8008906:	46bd      	mov	sp, r7
 8008908:	bdb0      	pop	{r4, r5, r7, pc}

0800890a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800890a:	b580      	push	{r7, lr}
 800890c:	b082      	sub	sp, #8
 800890e:	af00      	add	r7, sp, #0
 8008910:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8008912:	2200      	movs	r2, #0
 8008914:	2101      	movs	r1, #1
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f7ff fbd9 	bl	80080ce <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 fb2b 	bl	8008f78 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSL_>
  }
 8008922:	bf00      	nop
 8008924:	3708      	adds	r7, #8
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}

0800892a <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>:
 800892a:	b580      	push	{r7, lr}
 800892c:	b082      	sub	sp, #8
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 fb30 	bl	8008f98 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4618      	mov	r0, r3
 800893c:	3708      	adds	r7, #8
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}

08008942 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1ELi4EEC1Ev>:
class dense_product_base
 8008942:	b580      	push	{r7, lr}
 8008944:	b082      	sub	sp, #8
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f7ff ffed 	bl	800892a <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	4618      	mov	r0, r3
 8008954:	3708      	adds	r7, #8
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}

0800895a <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800895a:	b580      	push	{r7, lr}
 800895c:	b082      	sub	sp, #8
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f7ff ffed 	bl	8008942 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1ELi4EEC1Ev>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	4618      	mov	r0, r3
 800896c:	3708      	adds	r7, #8
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
	...

08008974 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8008974:	b590      	push	{r4, r7, lr}
 8008976:	b085      	sub	sp, #20
 8008978:	af00      	add	r7, sp, #0
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	60b9      	str	r1, [r7, #8]
 800897e:	607a      	str	r2, [r7, #4]
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	f7ff ffea 	bl	800895a <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1ENS_5DenseEEC1Ev>
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	68ba      	ldr	r2, [r7, #8]
 800898a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800898e:	e883 0003 	stmia.w	r3, {r0, r1}
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	3308      	adds	r3, #8
 8008996:	6879      	ldr	r1, [r7, #4]
 8008998:	4618      	mov	r0, r3
 800899a:	f7fb feb9 	bl	8004710 <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSH_>
      eigen_assert(lhs.cols() == rhs.rows()
 800899e:	68b8      	ldr	r0, [r7, #8]
 80089a0:	f7fd fa15 	bl	8005dce <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>
 80089a4:	4604      	mov	r4, r0
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f7fd fa1f 	bl	8005dea <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>
 80089ac:	4603      	mov	r3, r0
 80089ae:	429c      	cmp	r4, r3
 80089b0:	d005      	beq.n	80089be <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_+0x4a>
 80089b2:	4b06      	ldr	r3, [pc, #24]	; (80089cc <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_+0x58>)
 80089b4:	4a06      	ldr	r2, [pc, #24]	; (80089d0 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_+0x5c>)
 80089b6:	2160      	movs	r1, #96	; 0x60
 80089b8:	4806      	ldr	r0, [pc, #24]	; (80089d4 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_+0x60>)
 80089ba:	f015 f84f 	bl	801da5c <__assert_func>
 80089be:	bf00      	nop
    }
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	4618      	mov	r0, r3
 80089c4:	3714      	adds	r7, #20
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd90      	pop	{r4, r7, pc}
 80089ca:	bf00      	nop
 80089cc:	0801fb84 	.word	0x0801fb84
 80089d0:	08022f9c 	.word	0x08022f9c
 80089d4:	0801fed4 	.word	0x0801fed4

080089d8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 80089d8:	b580      	push	{r7, lr}
 80089da:	b084      	sub	sp, #16
 80089dc:	af00      	add	r7, sp, #0
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	60b9      	str	r1, [r7, #8]
 80089e2:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 80089e4:	68b9      	ldr	r1, [r7, #8]
 80089e6:	68f8      	ldr	r0, [r7, #12]
 80089e8:	f000 fae1 	bl	8008fae <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	68b9      	ldr	r1, [r7, #8]
 80089f0:	68f8      	ldr	r0, [r7, #12]
 80089f2:	f000 fb23 	bl	800903c <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 80089f6:	bf00      	nop
 80089f8:	3710      	adds	r7, #16
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}

080089fe <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 80089fe:	b480      	push	{r7}
 8008a00:	b083      	sub	sp, #12
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	370c      	adds	r7, #12
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr

08008a16 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8008a16:	b480      	push	{r7}
 8008a18:	b083      	sub	sp, #12
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	3304      	adds	r3, #4
 8008a22:	4618      	mov	r0, r3
 8008a24:	370c      	adds	r7, #12
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr

08008a2e <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEENS_10DenseShapeESE_Li3EE5addToIS3_EEvRT_RKS3_RKSD_>:

  template<typename Dst>
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void addTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8008a2e:	b580      	push	{r7, lr}
 8008a30:	b08a      	sub	sp, #40	; 0x28
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	60f8      	str	r0, [r7, #12]
 8008a36:	60b9      	str	r1, [r7, #8]
 8008a38:	607a      	str	r2, [r7, #4]
  {
    // dst.noalias() += lhs.lazyProduct(rhs);
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::add_assign_op<typename Dst::Scalar,Scalar>());
 8008a3a:	f107 0310 	add.w	r3, r7, #16
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	68b9      	ldr	r1, [r7, #8]
 8008a42:	4618      	mov	r0, r3
 8008a44:	f000 fb32 	bl	80090ac <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE11lazyProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEEEEKNSB_IS2_T_Li1EEERKNS0_ISG_EE>
 8008a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f7ff fbcf 	bl	80081f0 <_ZN5Eigen8internal13add_assign_opIffEC1Ev>
 8008a52:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008a56:	f107 0310 	add.w	r3, r7, #16
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	68f8      	ldr	r0, [r7, #12]
 8008a5e:	f000 fb3c 	bl	80090da <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008a62:	bf00      	nop
 8008a64:	3728      	adds	r7, #40	; 0x28
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}

08008a6a <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>:
 8008a6a:	b580      	push	{r7, lr}
 8008a6c:	b082      	sub	sp, #8
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	6078      	str	r0, [r7, #4]
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 fb42 	bl	80090fc <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3708      	adds	r7, #8
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1ELi3EEC1Ev>:
class dense_product_base
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b082      	sub	sp, #8
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f7ff ffed 	bl	8008a6a <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	4618      	mov	r0, r3
 8008a94:	3708      	adds	r7, #8
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}

08008a9a <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8008a9a:	b580      	push	{r7, lr}
 8008a9c:	b082      	sub	sp, #8
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f7ff ffed 	bl	8008a82 <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1ELi3EEC1Ev>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3708      	adds	r7, #8
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
	...

08008ab4 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8008ab4:	b590      	push	{r4, r7, lr}
 8008ab6:	b085      	sub	sp, #20
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	60f8      	str	r0, [r7, #12]
 8008abc:	60b9      	str	r1, [r7, #8]
 8008abe:	607a      	str	r2, [r7, #4]
 8008ac0:	68f8      	ldr	r0, [r7, #12]
 8008ac2:	f7ff ffea 	bl	8008a9a <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1ENS_5DenseEEC1Ev>
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	68b9      	ldr	r1, [r7, #8]
 8008aca:	4618      	mov	r0, r3
 8008acc:	f7fb ff39 	bl	8004942 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERKSC_>
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	611a      	str	r2, [r3, #16]
      eigen_assert(lhs.cols() == rhs.rows()
 8008ad6:	68b8      	ldr	r0, [r7, #8]
 8008ad8:	f7fd fcd5 	bl	8006486 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4colsEv>
 8008adc:	4604      	mov	r4, r0
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f7fc f8a4 	bl	8004c2e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	429c      	cmp	r4, r3
 8008aea:	d005      	beq.n	8008af8 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_+0x44>
 8008aec:	4b05      	ldr	r3, [pc, #20]	; (8008b04 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_+0x50>)
 8008aee:	4a06      	ldr	r2, [pc, #24]	; (8008b08 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_+0x54>)
 8008af0:	2160      	movs	r1, #96	; 0x60
 8008af2:	4806      	ldr	r0, [pc, #24]	; (8008b0c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_+0x58>)
 8008af4:	f014 ffb2 	bl	801da5c <__assert_func>
 8008af8:	bf00      	nop
    }
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	4618      	mov	r0, r3
 8008afe:	3714      	adds	r7, #20
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd90      	pop	{r4, r7, pc}
 8008b04:	0801fb84 	.word	0x0801fb84
 8008b08:	08023324 	.word	0x08023324
 8008b0c:	0801fed4 	.word	0x0801fed4

08008b10 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	60f8      	str	r0, [r7, #12]
 8008b18:	60b9      	str	r1, [r7, #8]
 8008b1a:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8008b1c:	68b9      	ldr	r1, [r7, #8]
 8008b1e:	68f8      	ldr	r0, [r7, #12]
 8008b20:	f000 faf7 	bl	8009112 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	68b9      	ldr	r1, [r7, #8]
 8008b28:	68f8      	ldr	r0, [r7, #12]
 8008b2a:	f000 fb35 	bl	8009198 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008b2e:	bf00      	nop
 8008b30:	3710      	adds	r7, #16
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}

08008b36 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8008b36:	b480      	push	{r7}
 8008b38:	b083      	sub	sp, #12
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
    }
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	4618      	mov	r0, r3
 8008b42:	370c      	adds	r7, #12
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr

08008b4c <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b082      	sub	sp, #8
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f7fc f868 	bl	8004c2e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	dd08      	ble.n	8008b76 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_+0x2a>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	4618      	mov	r0, r3
 8008b68:	f7fc f856 	bl	8004c18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	dd01      	ble.n	8008b76 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_+0x2a>
 8008b72:	2301      	movs	r3, #1
 8008b74:	e000      	b.n	8008b78 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_+0x2c>
 8008b76:	2300      	movs	r3, #0
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d003      	beq.n	8008b84 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 8008b7c:	6839      	ldr	r1, [r7, #0]
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 fb42 	bl	8009208 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEELb0EE3runERKS3_RKSI_>
}
 8008b84:	bf00      	nop
 8008b86:	3708      	adds	r7, #8
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
struct evaluator<const T>
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	4618      	mov	r0, r3
 8008b98:	f7fc fa5b 	bl	8005052 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3708      	adds	r7, #8
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}

08008ba6 <_ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
struct evaluator<CwiseNullaryOp<NullaryOp,PlainObjectType> >
 8008ba6:	b580      	push	{r7, lr}
 8008ba8:	b082      	sub	sp, #8
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 fb5a 	bl	8009268 <_ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3708      	adds	r7, #8
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}

08008bbe <_ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
struct evaluator<const T>
 8008bbe:	b580      	push	{r7, lr}
 8008bc0:	b082      	sub	sp, #8
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f7ff ffec 	bl	8008ba6 <_ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3708      	adds	r7, #8
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4DataD1Ev>:
  struct Data
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	3308      	adds	r3, #8
 8008be4:	4618      	mov	r0, r3
 8008be6:	f7ff ffea 	bl	8008bbe <_ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	3304      	adds	r3, #4
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7ff ffcc 	bl	8008b8c <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3708      	adds	r7, #8
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}

08008bfe <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b082      	sub	sp, #8
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f7ff ffe5 	bl	8008bd8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4DataD1Ev>
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 fb1f 	bl	8009252 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	4618      	mov	r0, r3
 8008c18:	3708      	adds	r7, #8
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}

08008c1e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8008c1e:	b580      	push	{r7, lr}
 8008c20:	b082      	sub	sp, #8
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f7ff ffe8 	bl	8008bfe <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffED1Ev>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	4618      	mov	r0, r3
 8008c32:	3708      	adds	r7, #8
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7fc fa05 	bl	8005052 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f000 fb18 	bl	800927e <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	4618      	mov	r0, r3
 8008c52:	3708      	adds	r7, #8
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7ff ffe8 	bl	8008c38 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedEfED1Ev>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3708      	adds	r7, #8
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffED1Ev>:

template<int StorageOrder, int UnrollingIndex, typename Lhs, typename Rhs, typename Packet, int LoadMode>
struct etor_product_packet_impl;

template<typename Lhs, typename Rhs, int ProductTag>
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 8008c72:	b580      	push	{r7, lr}
 8008c74:	b082      	sub	sp, #8
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	3324      	adds	r3, #36	; 0x24
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7ff ffea 	bl	8008c58 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	3314      	adds	r3, #20
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f7ff ffc8 	bl	8008c1e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 fad4 	bl	800923c <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEED1Ev>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	4618      	mov	r0, r3
 8008c98:	3708      	adds	r7, #8
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}

08008c9e <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8008c9e:	b580      	push	{r7, lr}
 8008ca0:	b082      	sub	sp, #8
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f7ff ffe2 	bl	8008c72 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffED1Ev>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3708      	adds	r7, #8
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b096      	sub	sp, #88	; 0x58
 8008cbc:	af02      	add	r7, sp, #8
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8008cc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008cc8:	68b9      	ldr	r1, [r7, #8]
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f000 faa7 	bl	800921e <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1ERKSH_>
  resize_if_allowed(dst, src, func);
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	68b9      	ldr	r1, [r7, #8]
 8008cd4:	68f8      	ldr	r0, [r7, #12]
 8008cd6:	f000 faf9 	bl	80092cc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8008cda:	f107 0320 	add.w	r3, r7, #32
 8008cde:	68f9      	ldr	r1, [r7, #12]
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f7fe fc3b 	bl	800755c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8008ce6:	68f8      	ldr	r0, [r7, #12]
 8008ce8:	f7fe fca0 	bl	800762c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 8008cec:	4603      	mov	r3, r0
 8008cee:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008cf2:	f107 0120 	add.w	r1, r7, #32
 8008cf6:	f107 0010 	add.w	r0, r7, #16
 8008cfa:	9300      	str	r3, [sp, #0]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f000 fb2f 	bl	8009360 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSL_RKSN_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8008d02:	f107 0310 	add.w	r3, r7, #16
 8008d06:	4618      	mov	r0, r3
 8008d08:	f000 fb44 	bl	8009394 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSP_>
  DstEvaluatorType dstEvaluator(dst);
 8008d0c:	f107 0320 	add.w	r3, r7, #32
 8008d10:	4618      	mov	r0, r3
 8008d12:	f7fe fa14 	bl	800713e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8008d16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f7ff ffbf 	bl	8008c9e <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEED1Ev>
}
 8008d20:	bf00      	nop
 8008d22:	3750      	adds	r7, #80	; 0x50
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b082      	sub	sp, #8
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f7fc fb86 	bl	8005442 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8008d36:	4603      	mov	r3, r0
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f7fb ff78 	bl	8004c2e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	4618      	mov	r0, r3
 8008d42:	3708      	adds	r7, #8
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi4ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8008d50:	2104      	movs	r1, #4
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f7ff f8eb 	bl	8007f2e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f000 fb26 	bl	80093aa <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi5ELi9EE3runERS9_>
  }
 8008d5e:	bf00      	nop
 8008d60:	3708      	adds	r7, #8
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}

08008d66 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8008d66:	b480      	push	{r7}
 8008d68:	b083      	sub	sp, #12
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
    }
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	4618      	mov	r0, r3
 8008d72:	370c      	adds	r7, #12
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr

08008d7c <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
}
 8008d86:	bf00      	nop
 8008d88:	370c      	adds	r7, #12
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr

08008d92 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 8008d92:	b580      	push	{r7, lr}
 8008d94:	b082      	sub	sp, #8
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	6078      	str	r0, [r7, #4]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	330c      	adds	r3, #12
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7fc f957 	bl	8005052 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	3308      	adds	r3, #8
 8008da8:	4618      	mov	r0, r3
 8008daa:	f7fe f9c8 	bl	800713e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 fb19 	bl	80093e6 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEED1Ev>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	4618      	mov	r0, r3
 8008db8:	3708      	adds	r7, #8
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}

08008dbe <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b082      	sub	sp, #8
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f7ff ffe2 	bl	8008d92 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffED1Ev>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3708      	adds	r7, #8
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b090      	sub	sp, #64	; 0x40
 8008ddc:	af02      	add	r7, sp, #8
 8008dde:	60f8      	str	r0, [r7, #12]
 8008de0:	60b9      	str	r1, [r7, #8]
 8008de2:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8008de4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008de8:	68b9      	ldr	r1, [r7, #8]
 8008dea:	4618      	mov	r0, r3
 8008dec:	f000 faec 	bl	80093c8 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1ERKS6_>
  resize_if_allowed(dst, src, func);
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	68b9      	ldr	r1, [r7, #8]
 8008df4:	68f8      	ldr	r0, [r7, #12]
 8008df6:	f000 fb1d 	bl	8009434 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8008dfa:	f107 0320 	add.w	r3, r7, #32
 8008dfe:	68f9      	ldr	r1, [r7, #12]
 8008e00:	4618      	mov	r0, r3
 8008e02:	f7fd fc60 	bl	80066c6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8008e06:	68f8      	ldr	r0, [r7, #12]
 8008e08:	f7fe fc9e 	bl	8007748 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008e12:	f107 0120 	add.w	r1, r7, #32
 8008e16:	f107 0010 	add.w	r0, r7, #16
 8008e1a:	9300      	str	r3, [sp, #0]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f000 fb53 	bl	80094c8 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS9_RKSB_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8008e22:	f107 0310 	add.w	r3, r7, #16
 8008e26:	4618      	mov	r0, r3
 8008e28:	f000 fb68 	bl	80094fc <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSD_>
  DstEvaluatorType dstEvaluator(dst);
 8008e2c:	f107 0320 	add.w	r3, r7, #32
 8008e30:	4618      	mov	r0, r3
 8008e32:	f7fc f90e 	bl	8005052 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8008e36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f7ff ffbf 	bl	8008dbe <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEED1Ev>
}
 8008e40:	bf00      	nop
 8008e42:	3738      	adds	r7, #56	; 0x38
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>:
  explicit product_evaluator(const XprType& xpr)
 8008e48:	b5b0      	push	{r4, r5, r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
    : m_result(xpr.rows(), xpr.cols())
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	4618      	mov	r0, r3
 8008e56:	f000 fb5c 	bl	8009512 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	1d1c      	adds	r4, r3, #4
 8008e5e:	6838      	ldr	r0, [r7, #0]
 8008e60:	f7fc fca0 	bl	80057a4 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 8008e64:	4603      	mov	r3, r0
 8008e66:	60bb      	str	r3, [r7, #8]
 8008e68:	6838      	ldr	r0, [r7, #0]
 8008e6a:	f7fc fca8 	bl	80057be <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4colsEv>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	60fb      	str	r3, [r7, #12]
 8008e72:	f107 020c 	add.w	r2, r7, #12
 8008e76:	f107 0308 	add.w	r3, r7, #8
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	4620      	mov	r0, r4
 8008e7e:	f000 fb55 	bl	800952c <_ZN5Eigen6MatrixIfLi3ELi3ELi1ELi3ELi3EEC1IiiEERKT_RKT0_>
    ::new (static_cast<Base*>(this)) Base(m_result);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	4619      	mov	r1, r3
 8008e86:	2004      	movs	r0, #4
 8008e88:	f7f8 f858 	bl	8000f3c <_ZnwjPv>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	3304      	adds	r3, #4
 8008e92:	4619      	mov	r1, r3
 8008e94:	4610      	mov	r0, r2
 8008e96:	f000 fb62 	bl	800955e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1ERKS3_>
    generic_product_impl<Lhs, Rhs, LhsShape, RhsShape, ProductTag>::evalTo(m_result, xpr.lhs(), xpr.rhs());
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	1d1c      	adds	r4, r3, #4
 8008e9e:	6838      	ldr	r0, [r7, #0]
 8008ea0:	f000 fb6d 	bl	800957e <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE3lhsEv>
 8008ea4:	4605      	mov	r5, r0
 8008ea6:	6838      	ldr	r0, [r7, #0]
 8008ea8:	f000 fb74 	bl	8009594 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE3rhsEv>
 8008eac:	4603      	mov	r3, r0
 8008eae:	461a      	mov	r2, r3
 8008eb0:	4629      	mov	r1, r5
 8008eb2:	4620      	mov	r0, r4
 8008eb4:	f000 fb7a 	bl	80095ac <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EENS_10DenseShapeES8_Li3EE6evalToINS3_IfLi3ELi3ELi1ELi3ELi3EEEEEvRT_RKS5_RKS7_>
  }
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3710      	adds	r7, #16
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bdb0      	pop	{r4, r5, r7, pc}

08008ec2 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>:
  Index outerStride() const EIGEN_NOEXCEPT { return OuterStride; }
 8008ec2:	b480      	push	{r7}
 8008ec4:	b083      	sub	sp, #12
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	6078      	str	r0, [r7, #4]
 8008eca:	2303      	movs	r3, #3
 8008ecc:	4618      	mov	r0, r3
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4Data4funcEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    const BinaryOp& func() const { return op; }
 8008ed8:	b480      	push	{r7}
 8008eda:	b083      	sub	sp, #12
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	370c      	adds	r7, #12
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr

08008eee <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8008eee:	b590      	push	{r4, r7, lr}
 8008ef0:	b085      	sub	sp, #20
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	60f8      	str	r0, [r7, #12]
 8008ef6:	60b9      	str	r1, [r7, #8]
 8008ef8:	607a      	str	r2, [r7, #4]
      return m_d.data[row * m_d.outerStride() + col];
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681c      	ldr	r4, [r3, #0]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	4618      	mov	r0, r3
 8008f02:	f7ff ffde 	bl	8008ec2 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>
 8008f06:	4602      	mov	r2, r0
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	fb03 f202 	mul.w	r2, r3, r2
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	4413      	add	r3, r2
 8008f12:	009b      	lsls	r3, r3, #2
 8008f14:	4423      	add	r3, r4
  }
 8008f16:	4618      	mov	r0, r3
 8008f18:	3714      	adds	r7, #20
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd90      	pop	{r4, r7, pc}

08008f1e <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8008f1e:	b590      	push	{r4, r7, lr}
 8008f20:	b085      	sub	sp, #20
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	60f8      	str	r0, [r7, #12]
 8008f26:	60b9      	str	r1, [r7, #8]
 8008f28:	607a      	str	r2, [r7, #4]
      return m_d.data[row + col * m_d.outerStride()];
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681c      	ldr	r4, [r3, #0]
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	4618      	mov	r0, r3
 8008f32:	f7ff ffc6 	bl	8008ec2 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>
 8008f36:	4602      	mov	r2, r0
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	fb03 f202 	mul.w	r2, r3, r2
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	4413      	add	r3, r2
 8008f42:	009b      	lsls	r3, r3, #2
 8008f44:	4423      	add	r3, r4
  }
 8008f46:	4618      	mov	r0, r3
 8008f48:	3714      	adds	r7, #20
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd90      	pop	{r4, r7, pc}

08008f4e <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 8008f4e:	b480      	push	{r7}
 8008f50:	b085      	sub	sp, #20
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	60f8      	str	r0, [r7, #12]
 8008f56:	60b9      	str	r1, [r7, #8]
 8008f58:	607a      	str	r2, [r7, #4]
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	ed93 7a00 	vldr	s14, [r3]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	edd3 7a00 	vldr	s15, [r3]
 8008f66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f6a:	eeb0 0a67 	vmov.f32	s0, s15
 8008f6e:	3714      	adds	r7, #20
 8008f70:	46bd      	mov	sp, r7
 8008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f76:	4770      	bx	lr

08008f78 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8008f80:	2201      	movs	r2, #1
 8008f82:	2101      	movs	r1, #1
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f7ff f8a2 	bl	80080ce <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 fb2c 	bl	80095e8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSL_>
  }
 8008f90:	bf00      	nop
 8008f92:	3708      	adds	r7, #8
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8008f98:	b480      	push	{r7}
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
    }
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	370c      	adds	r7, #12
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr

08008fae <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8008fae:	b480      	push	{r7}
 8008fb0:	b083      	sub	sp, #12
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
 8008fb6:	6039      	str	r1, [r7, #0]
}
 8008fb8:	bf00      	nop
 8008fba:	370c      	adds	r7, #12
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>:
struct evaluator<PlainObjectBase<Derived> >
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 fb35 	bl	800963c <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3708      	adds	r7, #8
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b082      	sub	sp, #8
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f7ff ffec 	bl	8008fc4 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3708      	adds	r7, #8
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}

08008ff6 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 8008ff6:	b580      	push	{r7, lr}
 8008ff8:	b082      	sub	sp, #8
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	3314      	adds	r3, #20
 8009002:	4618      	mov	r0, r3
 8009004:	f7ff ffea 	bl	8008fdc <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	3310      	adds	r3, #16
 800900c:	4618      	mov	r0, r3
 800900e:	f7fc f820 	bl	8005052 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 fb07 	bl	8009626 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEED1Ev>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	4618      	mov	r0, r3
 800901c:	3708      	adds	r7, #8
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}

08009022 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8009022:	b580      	push	{r7, lr}
 8009024:	b082      	sub	sp, #8
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	4618      	mov	r0, r3
 800902e:	f7ff ffe2 	bl	8008ff6 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffED1Ev>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	4618      	mov	r0, r3
 8009036:	3708      	adds	r7, #8
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800903c:	b580      	push	{r7, lr}
 800903e:	b092      	sub	sp, #72	; 0x48
 8009040:	af02      	add	r7, sp, #8
 8009042:	60f8      	str	r0, [r7, #12]
 8009044:	60b9      	str	r1, [r7, #8]
 8009046:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8009048:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800904c:	68b9      	ldr	r1, [r7, #8]
 800904e:	4618      	mov	r0, r3
 8009050:	f000 fada 	bl	8009608 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1ERKSK_>
  resize_if_allowed(dst, src, func);
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	68b9      	ldr	r1, [r7, #8]
 8009058:	68f8      	ldr	r0, [r7, #12]
 800905a:	f000 fb15 	bl	8009688 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800905e:	f107 0320 	add.w	r3, r7, #32
 8009062:	68f9      	ldr	r1, [r7, #12]
 8009064:	4618      	mov	r0, r3
 8009066:	f7fd fb2e 	bl	80066c6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800906a:	68f8      	ldr	r0, [r7, #12]
 800906c:	f7fe fb6c 	bl	8007748 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 8009070:	4603      	mov	r3, r0
 8009072:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009076:	f107 0120 	add.w	r1, r7, #32
 800907a:	f107 0010 	add.w	r0, r7, #16
 800907e:	9300      	str	r3, [sp, #0]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f000 fb4b 	bl	800971c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSO_RKSQ_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8009086:	f107 0310 	add.w	r3, r7, #16
 800908a:	4618      	mov	r0, r3
 800908c:	f000 fb60 	bl	8009750 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSS_>
  DstEvaluatorType dstEvaluator(dst);
 8009090:	f107 0320 	add.w	r3, r7, #32
 8009094:	4618      	mov	r0, r3
 8009096:	f7fb ffdc 	bl	8005052 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800909a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800909e:	4618      	mov	r0, r3
 80090a0:	f7ff ffbf 	bl	8009022 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEED1Ev>
}
 80090a4:	bf00      	nop
 80090a6:	3740      	adds	r7, #64	; 0x40
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE11lazyProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEEEEKNSB_IS2_T_Li1EEERKNS0_ISG_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 80090ac:	b590      	push	{r4, r7, lr}
 80090ae:	b085      	sub	sp, #20
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	60f8      	str	r0, [r7, #12]
 80090b4:	60b9      	str	r1, [r7, #8]
 80090b6:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 80090b8:	68b8      	ldr	r0, [r7, #8]
 80090ba:	f7fb fffa 	bl	80050b2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80090be:	4604      	mov	r4, r0
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f7fc ffd5 	bl	8006070 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEE7derivedEv>
 80090c6:	4603      	mov	r3, r0
 80090c8:	461a      	mov	r2, r3
 80090ca:	4621      	mov	r1, r4
 80090cc:	68f8      	ldr	r0, [r7, #12]
 80090ce:	f000 fb6f 	bl	80097b0 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_>
}
 80090d2:	68f8      	ldr	r0, [r7, #12]
 80090d4:	3714      	adds	r7, #20
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd90      	pop	{r4, r7, pc}

080090da <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 80090da:	b580      	push	{r7, lr}
 80090dc:	b086      	sub	sp, #24
 80090de:	af00      	add	r7, sp, #0
 80090e0:	60f8      	str	r0, [r7, #12]
 80090e2:	60b9      	str	r1, [r7, #8]
 80090e4:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 80090ea:	687a      	ldr	r2, [r7, #4]
 80090ec:	68b9      	ldr	r1, [r7, #8]
 80090ee:	6978      	ldr	r0, [r7, #20]
 80090f0:	f000 fb8e 	bl	8009810 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 80090f4:	bf00      	nop
 80090f6:	3718      	adds	r7, #24
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80090fc:	b480      	push	{r7}
 80090fe:	b083      	sub	sp, #12
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
    }
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	4618      	mov	r0, r3
 8009108:	370c      	adds	r7, #12
 800910a:	46bd      	mov	sp, r7
 800910c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009110:	4770      	bx	lr

08009112 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8009112:	b580      	push	{r7, lr}
 8009114:	b082      	sub	sp, #8
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
 800911a:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	4618      	mov	r0, r3
 8009120:	f7fb fd85 	bl	8004c2e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8009124:	4603      	mov	r3, r0
 8009126:	2b01      	cmp	r3, #1
 8009128:	dd08      	ble.n	800913c <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_+0x2a>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	4618      	mov	r0, r3
 800912e:	f7fb fd73 	bl	8004c18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8009132:	4603      	mov	r3, r0
 8009134:	2b01      	cmp	r3, #1
 8009136:	dd01      	ble.n	800913c <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_+0x2a>
 8009138:	2301      	movs	r3, #1
 800913a:	e000      	b.n	800913e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_+0x2c>
 800913c:	2300      	movs	r3, #0
 800913e:	2b00      	cmp	r3, #0
 8009140:	d003      	beq.n	800914a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 8009142:	6839      	ldr	r1, [r7, #0]
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 fb76 	bl	8009836 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEELb0EE3runERS8_RKSE_>
}
 800914a:	bf00      	nop
 800914c:	3708      	adds	r7, #8
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}

08009152 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 8009152:	b580      	push	{r7, lr}
 8009154:	b082      	sub	sp, #8
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	332c      	adds	r3, #44	; 0x2c
 800915e:	4618      	mov	r0, r3
 8009160:	f7fd ffed 	bl	800713e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	3328      	adds	r3, #40	; 0x28
 8009168:	4618      	mov	r0, r3
 800916a:	f7fd ffe8 	bl	800713e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 fb7b 	bl	800986a <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEED1Ev>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	4618      	mov	r0, r3
 8009178:	3708      	adds	r7, #8
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}

0800917e <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 800917e:	b580      	push	{r7, lr}
 8009180:	b082      	sub	sp, #8
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	4618      	mov	r0, r3
 800918a:	f7ff ffe2 	bl	8009152 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffED1Ev>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	4618      	mov	r0, r3
 8009192:	3708      	adds	r7, #8
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8009198:	b580      	push	{r7, lr}
 800919a:	b098      	sub	sp, #96	; 0x60
 800919c:	af02      	add	r7, sp, #8
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	60b9      	str	r1, [r7, #8]
 80091a2:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 80091a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091a8:	68b9      	ldr	r1, [r7, #8]
 80091aa:	4618      	mov	r0, r3
 80091ac:	f000 fb4e 	bl	800984c <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1ERKSE_>
  resize_if_allowed(dst, src, func);
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	68b9      	ldr	r1, [r7, #8]
 80091b4:	68f8      	ldr	r0, [r7, #12]
 80091b6:	f000 fb7f 	bl	80098b8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 80091ba:	f107 0320 	add.w	r3, r7, #32
 80091be:	68f9      	ldr	r1, [r7, #12]
 80091c0:	4618      	mov	r0, r3
 80091c2:	f7fe f9cb 	bl	800755c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 80091c6:	68f8      	ldr	r0, [r7, #12]
 80091c8:	f7fe fa30 	bl	800762c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 80091cc:	4603      	mov	r3, r0
 80091ce:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80091d2:	f107 0120 	add.w	r1, r7, #32
 80091d6:	f107 0010 	add.w	r0, r7, #16
 80091da:	9300      	str	r3, [sp, #0]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f000 fbb5 	bl	800994c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 80091e2:	f107 0310 	add.w	r3, r7, #16
 80091e6:	4618      	mov	r0, r3
 80091e8:	f000 fbca 	bl	8009980 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSL_>
  DstEvaluatorType dstEvaluator(dst);
 80091ec:	f107 0320 	add.w	r3, r7, #32
 80091f0:	4618      	mov	r0, r3
 80091f2:	f7fd ffa4 	bl	800713e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 80091f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7ff ffbf 	bl	800917e <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEED1Ev>
}
 8009200:	bf00      	nop
 8009202:	3758      	adds	r7, #88	; 0x58
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEELb0EE3runERKS3_RKSI_>:
    static void run(const Derived&, const OtherDerived&)
 8009208:	b480      	push	{r7}
 800920a:	b083      	sub	sp, #12
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
 8009210:	6039      	str	r1, [r7, #0]
    }
 8009212:	bf00      	nop
 8009214:	370c      	adds	r7, #12
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr

0800921e <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1ERKSH_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800921e:	b580      	push	{r7, lr}
 8009220:	b082      	sub	sp, #8
 8009222:	af00      	add	r7, sp, #0
 8009224:	6078      	str	r0, [r7, #4]
 8009226:	6039      	str	r1, [r7, #0]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6839      	ldr	r1, [r7, #0]
 800922c:	4618      	mov	r0, r3
 800922e:	f000 fbb2 	bl	8009996 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffEC1ERKSH_>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	4618      	mov	r0, r3
 8009236:	3708      	adds	r7, #8
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	4618      	mov	r0, r3
 8009248:	370c      	adds	r7, #12
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr

08009252 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>:
 8009252:	b480      	push	{r7}
 8009254:	b083      	sub	sp, #12
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	4618      	mov	r0, r3
 800925e:	370c      	adds	r7, #12
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr

08009268 <_ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
 8009268:	b480      	push	{r7}
 800926a:	b083      	sub	sp, #12
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	4618      	mov	r0, r3
 8009274:	370c      	adds	r7, #12
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr

0800927e <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
 800927e:	b480      	push	{r7}
 8009280:	b083      	sub	sp, #12
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	4618      	mov	r0, r3
 800928a:	370c      	adds	r7, #12
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr

08009294 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8009294:	b580      	push	{r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	4618      	mov	r0, r3
 80092a0:	f7fe fdad 	bl	8007dfe <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>
 80092a4:	4603      	mov	r3, r0
 80092a6:	4618      	mov	r0, r3
 80092a8:	3708      	adds	r7, #8
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}

080092ae <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80092ae:	b580      	push	{r7, lr}
 80092b0:	b082      	sub	sp, #8
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	6078      	str	r0, [r7, #4]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	3310      	adds	r3, #16
 80092ba:	4618      	mov	r0, r3
 80092bc:	f7fe fdad 	bl	8007e1a <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80092c0:	4603      	mov	r3, r0
 80092c2:	4618      	mov	r0, r3
 80092c4:	3708      	adds	r7, #8
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
	...

080092cc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b086      	sub	sp, #24
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	60f8      	str	r0, [r7, #12]
 80092d4:	60b9      	str	r1, [r7, #8]
 80092d6:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 80092d8:	68b8      	ldr	r0, [r7, #8]
 80092da:	f7ff ffdb 	bl	8009294 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE4rowsEv>
 80092de:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 80092e0:	68b8      	ldr	r0, [r7, #8]
 80092e2:	f7ff ffe4 	bl	80092ae <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE4colsEv>
 80092e6:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	4618      	mov	r0, r3
 80092ec:	f7fb fc9f 	bl	8004c2e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80092f0:	4602      	mov	r2, r0
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d107      	bne.n	8009308 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7fb fc8c 	bl	8004c18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8009300:	4602      	mov	r2, r0
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	4293      	cmp	r3, r2
 8009306:	d001      	beq.n	800930c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8009308:	2301      	movs	r3, #1
 800930a:	e000      	b.n	800930e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 800930c:	2300      	movs	r3, #0
 800930e:	2b00      	cmp	r3, #0
 8009310:	d005      	beq.n	800931e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	693a      	ldr	r2, [r7, #16]
 8009316:	6979      	ldr	r1, [r7, #20]
 8009318:	4618      	mov	r0, r3
 800931a:	f7fe fba1 	bl	8007a60 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	4618      	mov	r0, r3
 8009322:	f7fb fc84 	bl	8004c2e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8009326:	4602      	mov	r2, r0
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	4293      	cmp	r3, r2
 800932c:	d107      	bne.n	800933e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	4618      	mov	r0, r3
 8009332:	f7fb fc71 	bl	8004c18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8009336:	4602      	mov	r2, r0
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	4293      	cmp	r3, r2
 800933c:	d006      	beq.n	800934c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 800933e:	4b05      	ldr	r3, [pc, #20]	; (8009354 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8009340:	4a05      	ldr	r2, [pc, #20]	; (8009358 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8009342:	f240 21fd 	movw	r1, #765	; 0x2fd
 8009346:	4805      	ldr	r0, [pc, #20]	; (800935c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8009348:	f014 fb88 	bl	801da5c <__assert_func>
}
 800934c:	bf00      	nop
 800934e:	3718      	adds	r7, #24
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}
 8009354:	08021f3c 	.word	0x08021f3c
 8009358:	08023590 	.word	0x08023590
 800935c:	08022050 	.word	0x08022050

08009360 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSL_RKSN_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8009360:	b480      	push	{r7}
 8009362:	b085      	sub	sp, #20
 8009364:	af00      	add	r7, sp, #0
 8009366:	60f8      	str	r0, [r7, #12]
 8009368:	60b9      	str	r1, [r7, #8]
 800936a:	607a      	str	r2, [r7, #4]
 800936c:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	68ba      	ldr	r2, [r7, #8]
 8009372:	601a      	str	r2, [r3, #0]
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	605a      	str	r2, [r3, #4]
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	683a      	ldr	r2, [r7, #0]
 800937e:	609a      	str	r2, [r3, #8]
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	69ba      	ldr	r2, [r7, #24]
 8009384:	60da      	str	r2, [r3, #12]
  }
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	4618      	mov	r0, r3
 800938a:	3714      	adds	r7, #20
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr

08009394 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009394:	b580      	push	{r7, lr}
 8009396:	b082      	sub	sp, #8
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 fb32 	bl	8009a06 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSP_>
  }
 80093a2:	bf00      	nop
 80093a4:	3708      	adds	r7, #8
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}

080093aa <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi5ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b082      	sub	sp, #8
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80093b2:	2105      	movs	r1, #5
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f7fe fdba 	bl	8007f2e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f000 fb33 	bl	8009a26 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi6ELi9EE3runERS9_>
  }
 80093c0:	bf00      	nop
 80093c2:	3708      	adds	r7, #8
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1ERKS6_>:
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b082      	sub	sp, #8
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	6039      	str	r1, [r7, #0]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6839      	ldr	r1, [r7, #0]
 80093d6:	4618      	mov	r0, r3
 80093d8:	f000 fb34 	bl	8009a44 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	4618      	mov	r0, r3
 80093e0:	3708      	adds	r7, #8
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}

080093e6 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEED1Ev>:
 80093e6:	b480      	push	{r7}
 80093e8:	b083      	sub	sp, #12
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	6078      	str	r0, [r7, #4]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	4618      	mov	r0, r3
 80093f2:	370c      	adds	r7, #12
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr

080093fc <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b082      	sub	sp, #8
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4618      	mov	r0, r3
 800940a:	f7fb fc10 	bl	8004c2e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800940e:	4603      	mov	r3, r0
 8009410:	4618      	mov	r0, r3
 8009412:	3708      	adds	r7, #8
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	4618      	mov	r0, r3
 8009426:	f7fb fc9d 	bl	8004d64 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800942a:	4603      	mov	r3, r0
 800942c:	4618      	mov	r0, r3
 800942e:	3708      	adds	r7, #8
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8009434:	b580      	push	{r7, lr}
 8009436:	b086      	sub	sp, #24
 8009438:	af00      	add	r7, sp, #0
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	60b9      	str	r1, [r7, #8]
 800943e:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8009440:	68b8      	ldr	r0, [r7, #8]
 8009442:	f7ff ffdb 	bl	80093fc <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE4rowsEv>
 8009446:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8009448:	68b8      	ldr	r0, [r7, #8]
 800944a:	f7ff ffe5 	bl	8009418 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE4colsEv>
 800944e:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	4618      	mov	r0, r3
 8009454:	f7fb fc91 	bl	8004d7a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8009458:	4602      	mov	r2, r0
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	4293      	cmp	r3, r2
 800945e:	d107      	bne.n	8009470 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	4618      	mov	r0, r3
 8009464:	f7fb fc7e 	bl	8004d64 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8009468:	4602      	mov	r2, r0
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	4293      	cmp	r3, r2
 800946e:	d001      	beq.n	8009474 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8009470:	2301      	movs	r3, #1
 8009472:	e000      	b.n	8009476 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8009474:	2300      	movs	r3, #0
 8009476:	2b00      	cmp	r3, #0
 8009478:	d005      	beq.n	8009486 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	693a      	ldr	r2, [r7, #16]
 800947e:	6979      	ldr	r1, [r7, #20]
 8009480:	4618      	mov	r0, r3
 8009482:	f7fe fb85 	bl	8007b90 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	4618      	mov	r0, r3
 800948a:	f7fb fc76 	bl	8004d7a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800948e:	4602      	mov	r2, r0
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	4293      	cmp	r3, r2
 8009494:	d107      	bne.n	80094a6 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	4618      	mov	r0, r3
 800949a:	f7fb fc63 	bl	8004d64 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800949e:	4602      	mov	r2, r0
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d006      	beq.n	80094b4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 80094a6:	4b05      	ldr	r3, [pc, #20]	; (80094bc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 80094a8:	4a05      	ldr	r2, [pc, #20]	; (80094c0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 80094aa:	f240 21fd 	movw	r1, #765	; 0x2fd
 80094ae:	4805      	ldr	r0, [pc, #20]	; (80094c4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 80094b0:	f014 fad4 	bl	801da5c <__assert_func>
}
 80094b4:	bf00      	nop
 80094b6:	3718      	adds	r7, #24
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}
 80094bc:	08021f3c 	.word	0x08021f3c
 80094c0:	08023770 	.word	0x08023770
 80094c4:	08022050 	.word	0x08022050

080094c8 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS9_RKSB_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 80094c8:	b480      	push	{r7}
 80094ca:	b085      	sub	sp, #20
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	60f8      	str	r0, [r7, #12]
 80094d0:	60b9      	str	r1, [r7, #8]
 80094d2:	607a      	str	r2, [r7, #4]
 80094d4:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	68ba      	ldr	r2, [r7, #8]
 80094da:	601a      	str	r2, [r3, #0]
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	605a      	str	r2, [r3, #4]
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	683a      	ldr	r2, [r7, #0]
 80094e6:	609a      	str	r2, [r3, #8]
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	69ba      	ldr	r2, [r7, #24]
 80094ec:	60da      	str	r2, [r3, #12]
  }
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	4618      	mov	r0, r3
 80094f2:	3714      	adds	r7, #20
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr

080094fc <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b082      	sub	sp, #8
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 fad2 	bl	8009aae <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSD_>
  }
 800950a:	bf00      	nop
 800950c:	3708      	adds	r7, #8
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
  evaluator() {}
 8009512:	b580      	push	{r7, lr}
 8009514:	b082      	sub	sp, #8
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	4618      	mov	r0, r3
 800951e:	f000 fad5 	bl	8009acc <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEEC1Ev>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	4618      	mov	r0, r3
 8009526:	3708      	adds	r7, #8
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}

0800952c <_ZN5Eigen6MatrixIfLi3ELi3ELi1ELi3ELi3EEC1IiiEERKT_RKT0_>:
    Matrix(const T0& x, const T1& y)
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
 8009532:	60f8      	str	r0, [r7, #12]
 8009534:	60b9      	str	r1, [r7, #8]
 8009536:	607a      	str	r2, [r7, #4]
    {
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	4618      	mov	r0, r3
 800953c:	f000 fae4 	bl	8009b08 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 8009540:	f000 faf2 	bl	8009b28 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init2<T0,T1>(x, y);
 8009544:	68f8      	ldr	r0, [r7, #12]
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	6819      	ldr	r1, [r3, #0]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	2300      	movs	r3, #0
 8009550:	f000 faf1 	bl	8009b36 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>
    }
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	4618      	mov	r0, r3
 8009558:	3710      	adds	r7, #16
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}

0800955e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1ERKS3_>:
  explicit evaluator(const XprType& m)
 800955e:	b580      	push	{r7, lr}
 8009560:	b082      	sub	sp, #8
 8009562:	af00      	add	r7, sp, #0
 8009564:	6078      	str	r0, [r7, #4]
 8009566:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	683a      	ldr	r2, [r7, #0]
 800956c:	4611      	mov	r1, r2
 800956e:	4618      	mov	r0, r3
 8009570:	f000 faf5 	bl	8009b5e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEEC1ERKS5_>
  { }
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	4618      	mov	r0, r3
 8009578:	3708      	adds	r7, #8
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}

0800957e <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800957e:	b480      	push	{r7}
 8009580:	b083      	sub	sp, #12
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	4618      	mov	r0, r3
 800958a:	370c      	adds	r7, #12
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr

08009594 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8009594:	b480      	push	{r7}
 8009596:	b083      	sub	sp, #12
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	3308      	adds	r3, #8
 80095a0:	4618      	mov	r0, r3
 80095a2:	370c      	adds	r7, #12
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr

080095ac <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EENS_10DenseShapeES8_Li3EE6evalToINS3_IfLi3ELi3ELi1ELi3ELi3EEEEEvRT_RKS5_RKS7_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b088      	sub	sp, #32
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	60b9      	str	r1, [r7, #8]
 80095b6:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 80095b8:	f107 0310 	add.w	r3, r7, #16
 80095bc:	687a      	ldr	r2, [r7, #4]
 80095be:	68b9      	ldr	r1, [r7, #8]
 80095c0:	4618      	mov	r0, r3
 80095c2:	f000 fae7 	bl	8009b94 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE11lazyProductINS_9TransposeIS3_EEEEKNS1_IS4_T_Li1EEERKNS0_IS9_EE>
 80095c6:	f107 031c 	add.w	r3, r7, #28
 80095ca:	4618      	mov	r0, r3
 80095cc:	f7fd fb5f 	bl	8006c8e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 80095d0:	f107 021c 	add.w	r2, r7, #28
 80095d4:	f107 0310 	add.w	r3, r7, #16
 80095d8:	4619      	mov	r1, r3
 80095da:	68f8      	ldr	r0, [r7, #12]
 80095dc:	f000 faf1 	bl	8009bc2 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 80095e0:	bf00      	nop
 80095e2:	3720      	adds	r7, #32
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80095f0:	2202      	movs	r2, #2
 80095f2:	2101      	movs	r1, #1
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f7fe fd6a 	bl	80080ce <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f000 faf2 	bl	8009be4 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSL_>
  }
 8009600:	bf00      	nop
 8009602:	3708      	adds	r7, #8
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1ERKSK_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8009608:	b580      	push	{r7, lr}
 800960a:	b082      	sub	sp, #8
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6839      	ldr	r1, [r7, #0]
 8009616:	4618      	mov	r0, r3
 8009618:	f000 faf4 	bl	8009c04 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffEC1ERKSK_>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	4618      	mov	r0, r3
 8009620:	3708      	adds	r7, #8
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}

08009626 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8009626:	b480      	push	{r7}
 8009628:	b083      	sub	sp, #12
 800962a:	af00      	add	r7, sp, #0
 800962c:	6078      	str	r0, [r7, #4]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	4618      	mov	r0, r3
 8009632:	370c      	adds	r7, #12
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr

0800963c <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
 800963c:	b480      	push	{r7}
 800963e:	b083      	sub	sp, #12
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	4618      	mov	r0, r3
 8009648:	370c      	adds	r7, #12
 800964a:	46bd      	mov	sp, r7
 800964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009650:	4770      	bx	lr

08009652 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8009652:	b580      	push	{r7, lr}
 8009654:	b082      	sub	sp, #8
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	4618      	mov	r0, r3
 800965e:	f7fe fd5f 	bl	8008120 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4rowsEv>
 8009662:	4603      	mov	r3, r0
 8009664:	4618      	mov	r0, r3
 8009666:	3708      	adds	r7, #8
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800966c:	b580      	push	{r7, lr}
 800966e:	b082      	sub	sp, #8
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	3308      	adds	r3, #8
 8009678:	4618      	mov	r0, r3
 800967a:	f7fe fd5f 	bl	800813c <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>
 800967e:	4603      	mov	r3, r0
 8009680:	4618      	mov	r0, r3
 8009682:	3708      	adds	r7, #8
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8009688:	b580      	push	{r7, lr}
 800968a:	b086      	sub	sp, #24
 800968c:	af00      	add	r7, sp, #0
 800968e:	60f8      	str	r0, [r7, #12]
 8009690:	60b9      	str	r1, [r7, #8]
 8009692:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8009694:	68b8      	ldr	r0, [r7, #8]
 8009696:	f7ff ffdc 	bl	8009652 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE4rowsEv>
 800969a:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 800969c:	68b8      	ldr	r0, [r7, #8]
 800969e:	f7ff ffe5 	bl	800966c <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE4colsEv>
 80096a2:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7fb fb67 	bl	8004d7a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80096ac:	4602      	mov	r2, r0
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d107      	bne.n	80096c4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	4618      	mov	r0, r3
 80096b8:	f7fb fb54 	bl	8004d64 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80096bc:	4602      	mov	r2, r0
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d001      	beq.n	80096c8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 80096c4:	2301      	movs	r3, #1
 80096c6:	e000      	b.n	80096ca <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 80096c8:	2300      	movs	r3, #0
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d005      	beq.n	80096da <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	693a      	ldr	r2, [r7, #16]
 80096d2:	6979      	ldr	r1, [r7, #20]
 80096d4:	4618      	mov	r0, r3
 80096d6:	f7fe fa5b 	bl	8007b90 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	4618      	mov	r0, r3
 80096de:	f7fb fb4c 	bl	8004d7a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80096e2:	4602      	mov	r2, r0
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d107      	bne.n	80096fa <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	4618      	mov	r0, r3
 80096ee:	f7fb fb39 	bl	8004d64 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80096f2:	4602      	mov	r2, r0
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d006      	beq.n	8009708 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 80096fa:	4b05      	ldr	r3, [pc, #20]	; (8009710 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 80096fc:	4a05      	ldr	r2, [pc, #20]	; (8009714 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 80096fe:	f240 21fd 	movw	r1, #765	; 0x2fd
 8009702:	4805      	ldr	r0, [pc, #20]	; (8009718 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8009704:	f014 f9aa 	bl	801da5c <__assert_func>
}
 8009708:	bf00      	nop
 800970a:	3718      	adds	r7, #24
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}
 8009710:	08021f3c 	.word	0x08021f3c
 8009714:	08023884 	.word	0x08023884
 8009718:	08022050 	.word	0x08022050

0800971c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSO_RKSQ_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 800971c:	b480      	push	{r7}
 800971e:	b085      	sub	sp, #20
 8009720:	af00      	add	r7, sp, #0
 8009722:	60f8      	str	r0, [r7, #12]
 8009724:	60b9      	str	r1, [r7, #8]
 8009726:	607a      	str	r2, [r7, #4]
 8009728:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	68ba      	ldr	r2, [r7, #8]
 800972e:	601a      	str	r2, [r3, #0]
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	687a      	ldr	r2, [r7, #4]
 8009734:	605a      	str	r2, [r3, #4]
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	683a      	ldr	r2, [r7, #0]
 800973a:	609a      	str	r2, [r3, #8]
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	69ba      	ldr	r2, [r7, #24]
 8009740:	60da      	str	r2, [r3, #12]
  }
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	4618      	mov	r0, r3
 8009746:	3714      	adds	r7, #20
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr

08009750 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009750:	b580      	push	{r7, lr}
 8009752:	b082      	sub	sp, #8
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f000 fa8e 	bl	8009c7a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSS_>
  }
 800975e:	bf00      	nop
 8009760:	3708      	adds	r7, #8
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}

08009766 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEC1Ev>:
 8009766:	b580      	push	{r7, lr}
 8009768:	b082      	sub	sp, #8
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 fa92 	bl	8009c98 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEC1Ev>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	4618      	mov	r0, r3
 8009778:	3708      	adds	r7, #8
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}

0800977e <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1ELi4EEC1Ev>:
class dense_product_base
 800977e:	b580      	push	{r7, lr}
 8009780:	b082      	sub	sp, #8
 8009782:	af00      	add	r7, sp, #0
 8009784:	6078      	str	r0, [r7, #4]
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f7ff ffed 	bl	8009766 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEC1Ev>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	4618      	mov	r0, r3
 8009790:	3708      	adds	r7, #8
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}

08009796 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8009796:	b580      	push	{r7, lr}
 8009798:	b082      	sub	sp, #8
 800979a:	af00      	add	r7, sp, #0
 800979c:	6078      	str	r0, [r7, #4]
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f7ff ffed 	bl	800977e <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1ELi4EEC1Ev>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	4618      	mov	r0, r3
 80097a8:	3708      	adds	r7, #8
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
	...

080097b0 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 80097b0:	b590      	push	{r4, r7, lr}
 80097b2:	b085      	sub	sp, #20
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	60f8      	str	r0, [r7, #12]
 80097b8:	60b9      	str	r1, [r7, #8]
 80097ba:	607a      	str	r2, [r7, #4]
 80097bc:	68f8      	ldr	r0, [r7, #12]
 80097be:	f7ff ffea 	bl	8009796 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1ENS_5DenseEEC1Ev>
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	68ba      	ldr	r2, [r7, #8]
 80097c6:	601a      	str	r2, [r3, #0]
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	3304      	adds	r3, #4
 80097cc:	6879      	ldr	r1, [r7, #4]
 80097ce:	4618      	mov	r0, r3
 80097d0:	f7fb f809 	bl	80047e6 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERKSC_>
      eigen_assert(lhs.cols() == rhs.rows()
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	4618      	mov	r0, r3
 80097d8:	f7fb fac4 	bl	8004d64 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80097dc:	4604      	mov	r4, r0
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f7fc fc75 	bl	80060ce <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4rowsEv>
 80097e4:	4603      	mov	r3, r0
 80097e6:	429c      	cmp	r4, r3
 80097e8:	d005      	beq.n	80097f6 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_+0x46>
 80097ea:	4b06      	ldr	r3, [pc, #24]	; (8009804 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_+0x54>)
 80097ec:	4a06      	ldr	r2, [pc, #24]	; (8009808 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_+0x58>)
 80097ee:	2160      	movs	r1, #96	; 0x60
 80097f0:	4806      	ldr	r0, [pc, #24]	; (800980c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_+0x5c>)
 80097f2:	f014 f933 	bl	801da5c <__assert_func>
 80097f6:	bf00      	nop
    }
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	4618      	mov	r0, r3
 80097fc:	3714      	adds	r7, #20
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd90      	pop	{r4, r7, pc}
 8009802:	bf00      	nop
 8009804:	0801fb84 	.word	0x0801fb84
 8009808:	08023ac8 	.word	0x08023ac8
 800980c:	0801fed4 	.word	0x0801fed4

08009810 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
 8009816:	60f8      	str	r0, [r7, #12]
 8009818:	60b9      	str	r1, [r7, #8]
 800981a:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800981c:	68b9      	ldr	r1, [r7, #8]
 800981e:	68f8      	ldr	r0, [r7, #12]
 8009820:	f000 fa45 	bl	8009cae <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8009824:	687a      	ldr	r2, [r7, #4]
 8009826:	68b9      	ldr	r1, [r7, #8]
 8009828:	68f8      	ldr	r0, [r7, #12]
 800982a:	f000 fa6e 	bl	8009d0a <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800982e:	bf00      	nop
 8009830:	3710      	adds	r7, #16
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}

08009836 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEELb0EE3runERS8_RKSE_>:
    static void run(const Derived&, const OtherDerived&)
 8009836:	b480      	push	{r7}
 8009838:	b083      	sub	sp, #12
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
 800983e:	6039      	str	r1, [r7, #0]
    }
 8009840:	bf00      	nop
 8009842:	370c      	adds	r7, #12
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr

0800984c <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1ERKSE_>:
 800984c:	b580      	push	{r7, lr}
 800984e:	b082      	sub	sp, #8
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	6039      	str	r1, [r7, #0]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6839      	ldr	r1, [r7, #0]
 800985a:	4618      	mov	r0, r3
 800985c:	f000 fa8d 	bl	8009d7a <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffEC1ERKSE_>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	4618      	mov	r0, r3
 8009864:	3708      	adds	r7, #8
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}

0800986a <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEED1Ev>:
 800986a:	b480      	push	{r7}
 800986c:	b083      	sub	sp, #12
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	4618      	mov	r0, r3
 8009876:	370c      	adds	r7, #12
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr

08009880 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8009880:	b580      	push	{r7, lr}
 8009882:	b082      	sub	sp, #8
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	4618      	mov	r0, r3
 800988c:	f7fe fccc 	bl	8008228 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4rowsEv>
 8009890:	4603      	mov	r3, r0
 8009892:	4618      	mov	r0, r3
 8009894:	3708      	adds	r7, #8
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}

0800989a <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800989a:	b580      	push	{r7, lr}
 800989c:	b082      	sub	sp, #8
 800989e:	af00      	add	r7, sp, #0
 80098a0:	6078      	str	r0, [r7, #4]
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	691b      	ldr	r3, [r3, #16]
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7fb f9b6 	bl	8004c18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80098ac:	4603      	mov	r3, r0
 80098ae:	4618      	mov	r0, r3
 80098b0:	3708      	adds	r7, #8
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
	...

080098b8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b086      	sub	sp, #24
 80098bc:	af00      	add	r7, sp, #0
 80098be:	60f8      	str	r0, [r7, #12]
 80098c0:	60b9      	str	r1, [r7, #8]
 80098c2:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 80098c4:	68b8      	ldr	r0, [r7, #8]
 80098c6:	f7ff ffdb 	bl	8009880 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE4rowsEv>
 80098ca:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 80098cc:	68b8      	ldr	r0, [r7, #8]
 80098ce:	f7ff ffe4 	bl	800989a <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE4colsEv>
 80098d2:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	4618      	mov	r0, r3
 80098d8:	f7fb f9a9 	bl	8004c2e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80098dc:	4602      	mov	r2, r0
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d107      	bne.n	80098f4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	4618      	mov	r0, r3
 80098e8:	f7fb f996 	bl	8004c18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80098ec:	4602      	mov	r2, r0
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d001      	beq.n	80098f8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 80098f4:	2301      	movs	r3, #1
 80098f6:	e000      	b.n	80098fa <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 80098f8:	2300      	movs	r3, #0
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d005      	beq.n	800990a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	693a      	ldr	r2, [r7, #16]
 8009902:	6979      	ldr	r1, [r7, #20]
 8009904:	4618      	mov	r0, r3
 8009906:	f7fe f8ab 	bl	8007a60 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	4618      	mov	r0, r3
 800990e:	f7fb f98e 	bl	8004c2e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8009912:	4602      	mov	r2, r0
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	4293      	cmp	r3, r2
 8009918:	d107      	bne.n	800992a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	4618      	mov	r0, r3
 800991e:	f7fb f97b 	bl	8004c18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8009922:	4602      	mov	r2, r0
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	4293      	cmp	r3, r2
 8009928:	d006      	beq.n	8009938 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 800992a:	4b05      	ldr	r3, [pc, #20]	; (8009940 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 800992c:	4a05      	ldr	r2, [pc, #20]	; (8009944 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 800992e:	f240 21fd 	movw	r1, #765	; 0x2fd
 8009932:	4805      	ldr	r0, [pc, #20]	; (8009948 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8009934:	f014 f892 	bl	801da5c <__assert_func>
}
 8009938:	bf00      	nop
 800993a:	3718      	adds	r7, #24
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}
 8009940:	08021f3c 	.word	0x08021f3c
 8009944:	08023d34 	.word	0x08023d34
 8009948:	08022050 	.word	0x08022050

0800994c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 800994c:	b480      	push	{r7}
 800994e:	b085      	sub	sp, #20
 8009950:	af00      	add	r7, sp, #0
 8009952:	60f8      	str	r0, [r7, #12]
 8009954:	60b9      	str	r1, [r7, #8]
 8009956:	607a      	str	r2, [r7, #4]
 8009958:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	68ba      	ldr	r2, [r7, #8]
 800995e:	601a      	str	r2, [r3, #0]
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	605a      	str	r2, [r3, #4]
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	683a      	ldr	r2, [r7, #0]
 800996a:	609a      	str	r2, [r3, #8]
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	69ba      	ldr	r2, [r7, #24]
 8009970:	60da      	str	r2, [r3, #12]
  }
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	4618      	mov	r0, r3
 8009976:	3714      	adds	r7, #20
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr

08009980 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 fa2c 	bl	8009de6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSL_>
  }
 800998e:	bf00      	nop
 8009990:	3708      	adds	r7, #8
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffEC1ERKSH_>:
  typedef Product<Lhs, Rhs, LazyProduct> XprType;
  typedef typename XprType::Scalar Scalar;
  typedef typename XprType::CoeffReturnType CoeffReturnType;

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  explicit product_evaluator(const XprType& xpr)
 8009996:	b590      	push	{r4, r7, lr}
 8009998:	b083      	sub	sp, #12
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
 800999e:	6039      	str	r1, [r7, #0]
    : m_lhs(xpr.lhs()),
      m_rhs(xpr.rhs()),
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
                            //       or perhaps declare them on the fly on the packet method... We have experiment to check what's best.
      m_innerDim(xpr.lhs().cols())
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f000 fa47 	bl	8009e34 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>
 80099a6:	687c      	ldr	r4, [r7, #4]
    : m_lhs(xpr.lhs()),
 80099a8:	6838      	ldr	r0, [r7, #0]
 80099aa:	f000 fa2c 	bl	8009e06 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3lhsEv>
 80099ae:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 80099b0:	4619      	mov	r1, r3
 80099b2:	4620      	mov	r0, r4
 80099b4:	f7fa fcf8 	bl	80043a8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
      m_rhs(xpr.rhs()),
 80099b8:	6838      	ldr	r0, [r7, #0]
 80099ba:	f000 fa2f 	bl	8009e1c <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3rhsEv>
 80099be:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	3310      	adds	r3, #16
 80099c4:	6812      	ldr	r2, [r2, #0]
 80099c6:	601a      	str	r2, [r3, #0]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	3314      	adds	r3, #20
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 80099cc:	687a      	ldr	r2, [r7, #4]
      m_innerDim(xpr.lhs().cols())
 80099ce:	4611      	mov	r1, r2
 80099d0:	4618      	mov	r0, r3
 80099d2:	f000 fa3a 	bl	8009e4a <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERKSD_>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f103 0224 	add.w	r2, r3, #36	; 0x24
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	3310      	adds	r3, #16
      m_innerDim(xpr.lhs().cols())
 80099e0:	4619      	mov	r1, r3
 80099e2:	4610      	mov	r0, r2
 80099e4:	f000 fa40 	bl	8009e68 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS5_>
 80099e8:	6838      	ldr	r0, [r7, #0]
 80099ea:	f000 fa0c 	bl	8009e06 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3lhsEv>
 80099ee:	4603      	mov	r3, r0
 80099f0:	4618      	mov	r0, r3
 80099f2:	f7fb fcc0 	bl	8005376 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4colsEv>
 80099f6:	4602      	mov	r2, r0
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	629a      	str	r2, [r3, #40]	; 0x28
    std::cerr << "CanVectorizeInner=    " << CanVectorizeInner << "\n";
    std::cerr << "EvalToRowMajor=       " << EvalToRowMajor << "\n";
    std::cerr << "Alignment=            " << Alignment << "\n";
    std::cerr << "Flags=                " << Flags << "\n";
#endif
  }
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	4618      	mov	r0, r3
 8009a00:	370c      	adds	r7, #12
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd90      	pop	{r4, r7, pc}

08009a06 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009a06:	b580      	push	{r7, lr}
 8009a08:	b082      	sub	sp, #8
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8009a0e:	2200      	movs	r2, #0
 8009a10:	2100      	movs	r1, #0
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f000 fa37 	bl	8009e86 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f000 fa4d 	bl	8009eb8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSP_>
  }
 8009a1e:	bf00      	nop
 8009a20:	3708      	adds	r7, #8
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}

08009a26 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi6ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8009a26:	b580      	push	{r7, lr}
 8009a28:	b082      	sub	sp, #8
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8009a2e:	2106      	movs	r1, #6
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f7fe fa7c 	bl	8007f2e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 fa4e 	bl	8009ed8 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi7ELi9EE3runERS9_>
  }
 8009a3c:	bf00      	nop
 8009a3e:	3708      	adds	r7, #8
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>:
  explicit product_evaluator(const XprType& xpr)
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b082      	sub	sp, #8
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 fa69 	bl	8009f26 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 8009a54:	6838      	ldr	r0, [r7, #0]
 8009a56:	f000 fa4e 	bl	8009ef6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3lhsEv>
 8009a5a:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 8009a60:	6838      	ldr	r0, [r7, #0]
 8009a62:	f000 fa54 	bl	8009f0e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3rhsEv>
 8009a66:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	605a      	str	r2, [r3, #4]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 8009a76:	4619      	mov	r1, r3
 8009a78:	4610      	mov	r0, r2
 8009a7a:	f7fd fd6f 	bl	800755c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	685b      	ldr	r3, [r3, #4]
      m_innerDim(xpr.lhs().cols())
 8009a88:	4619      	mov	r1, r3
 8009a8a:	4610      	mov	r0, r2
 8009a8c:	f7fc fe1b 	bl	80066c6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 8009a90:	6838      	ldr	r0, [r7, #0]
 8009a92:	f000 fa30 	bl	8009ef6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3lhsEv>
 8009a96:	4603      	mov	r3, r0
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f7fb f8bd 	bl	8004c18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	611a      	str	r2, [r3, #16]
  }
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3708      	adds	r7, #8
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}

08009aae <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8009aae:	b580      	push	{r7, lr}
 8009ab0:	b082      	sub	sp, #8
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8009ab6:	2100      	movs	r1, #0
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f000 fa3f 	bl	8009f3c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 fa5f 	bl	8009f82 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSD_>
  }
 8009ac4:	bf00      	nop
 8009ac6:	3708      	adds	r7, #8
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEEC1Ev>:
  evaluator()
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b082      	sub	sp, #8
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
    : m_d(0,OuterStrideAtCompileTime)
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 fa63 	bl	8009fa0 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2203      	movs	r2, #3
 8009ade:	2100      	movs	r1, #0
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f7fe fa05 	bl	8007ef0 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EEC1EPKfi>
  }
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3708      	adds	r7, #8
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}

08009af0 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b082      	sub	sp, #8
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f000 fa5c 	bl	8009fb6 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	4618      	mov	r0, r3
 8009b02:	3708      	adds	r7, #8
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f7ff ffed 	bl	8009af0 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f000 fa57 	bl	8009fcc <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EEC1Ev>
    }
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	4618      	mov	r0, r3
 8009b22:	3708      	adds	r7, #8
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE22_check_template_paramsEv>:
    static EIGEN_STRONG_INLINE void _check_template_params()
 8009b28:	b480      	push	{r7}
 8009b2a:	af00      	add	r7, sp, #0
    }
 8009b2c:	bf00      	nop
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b34:	4770      	bx	lr

08009b36 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>:
    EIGEN_STRONG_INLINE void _init2(Index rows, Index cols, typename internal::enable_if<Base::SizeAtCompileTime!=2,T0>::type* = 0)
 8009b36:	b580      	push	{r7, lr}
 8009b38:	b086      	sub	sp, #24
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	60f8      	str	r0, [r7, #12]
 8009b3e:	60b9      	str	r1, [r7, #8]
 8009b40:	607a      	str	r2, [r7, #4]
 8009b42:	603b      	str	r3, [r7, #0]
      const bool t0_is_integer_alike = internal::is_valid_index_type<T0>::value;
 8009b44:	2301      	movs	r3, #1
 8009b46:	75fb      	strb	r3, [r7, #23]
      const bool t1_is_integer_alike = internal::is_valid_index_type<T1>::value;
 8009b48:	2301      	movs	r3, #1
 8009b4a:	75bb      	strb	r3, [r7, #22]
      resize(rows,cols);
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	68b9      	ldr	r1, [r7, #8]
 8009b50:	68f8      	ldr	r0, [r7, #12]
 8009b52:	f000 fa49 	bl	8009fe8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii>
    }
 8009b56:	bf00      	nop
 8009b58:	3718      	adds	r7, #24
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}

08009b5e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 8009b5e:	b5b0      	push	{r4, r5, r7, lr}
 8009b60:	b082      	sub	sp, #8
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	6078      	str	r0, [r7, #4]
 8009b66:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f000 fa19 	bl	8009fa0 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 8009b6e:	687c      	ldr	r4, [r7, #4]
 8009b70:	6838      	ldr	r0, [r7, #0]
 8009b72:	f000 fa6b 	bl	800a04c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4dataEv>
 8009b76:	4605      	mov	r5, r0
 8009b78:	6838      	ldr	r0, [r7, #0]
 8009b7a:	f000 fa74 	bl	800a066 <_ZNK5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEELi3EE11outerStrideEv>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	461a      	mov	r2, r3
 8009b82:	4629      	mov	r1, r5
 8009b84:	4620      	mov	r0, r4
 8009b86:	f7fe f9b3 	bl	8007ef0 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EEC1EPKfi>
  }
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3708      	adds	r7, #8
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bdb0      	pop	{r4, r5, r7, pc}

08009b94 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE11lazyProductINS_9TransposeIS3_EEEEKNS1_IS4_T_Li1EEERKNS0_IS9_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 8009b94:	b590      	push	{r4, r7, lr}
 8009b96:	b085      	sub	sp, #20
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	60f8      	str	r0, [r7, #12]
 8009b9c:	60b9      	str	r1, [r7, #8]
 8009b9e:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 8009ba0:	68b8      	ldr	r0, [r7, #8]
 8009ba2:	f7fb fd4a 	bl	800563a <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE7derivedEv>
 8009ba6:	4604      	mov	r4, r0
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f7fb fd51 	bl	8005650 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	4621      	mov	r1, r4
 8009bb4:	68f8      	ldr	r0, [r7, #12]
 8009bb6:	f000 fa8b 	bl	800a0d0 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_>
}
 8009bba:	68f8      	ldr	r0, [r7, #12]
 8009bbc:	3714      	adds	r7, #20
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd90      	pop	{r4, r7, pc}

08009bc2 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8009bc2:	b580      	push	{r7, lr}
 8009bc4:	b086      	sub	sp, #24
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	60f8      	str	r0, [r7, #12]
 8009bca:	60b9      	str	r1, [r7, #8]
 8009bcc:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8009bd2:	687a      	ldr	r2, [r7, #4]
 8009bd4:	68b9      	ldr	r1, [r7, #8]
 8009bd6:	6978      	ldr	r0, [r7, #20]
 8009bd8:	f000 faaa 	bl	800a130 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>
}
 8009bdc:	bf00      	nop
 8009bde:	3718      	adds	r7, #24
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8009bec:	2200      	movs	r2, #0
 8009bee:	2102      	movs	r1, #2
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f7fe fa6c 	bl	80080ce <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 faad 	bl	800a156 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSL_>
  }
 8009bfc:	bf00      	nop
 8009bfe:	3708      	adds	r7, #8
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffEC1ERKSK_>:
  explicit product_evaluator(const XprType& xpr)
 8009c04:	b590      	push	{r4, r7, lr}
 8009c06:	b083      	sub	sp, #12
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 fac8 	bl	800a1a4 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>
 8009c14:	687c      	ldr	r4, [r7, #4]
    : m_lhs(xpr.lhs()),
 8009c16:	6838      	ldr	r0, [r7, #0]
 8009c18:	f000 faad 	bl	800a176 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3lhsEv>
 8009c1c:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 8009c1e:	4619      	mov	r1, r3
 8009c20:	4620      	mov	r0, r4
 8009c22:	f000 faca 	bl	800a1ba <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEERKT_>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f103 040c 	add.w	r4, r3, #12
      m_rhs(xpr.rhs()),
 8009c2c:	6838      	ldr	r0, [r7, #0]
 8009c2e:	f000 faad 	bl	800a18c <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3rhsEv>
 8009c32:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 8009c34:	4619      	mov	r1, r3
 8009c36:	4620      	mov	r0, r4
 8009c38:	f000 fad4 	bl	800a1e4 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS1_EEEEEERKT_>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	3310      	adds	r3, #16
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8009c40:	687a      	ldr	r2, [r7, #4]
      m_innerDim(xpr.lhs().cols())
 8009c42:	4611      	mov	r1, r2
 8009c44:	4618      	mov	r0, r3
 8009c46:	f7fc fd3e 	bl	80066c6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f103 0214 	add.w	r2, r3, #20
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	330c      	adds	r3, #12
      m_innerDim(xpr.lhs().cols())
 8009c54:	4619      	mov	r1, r3
 8009c56:	4610      	mov	r0, r2
 8009c58:	f000 fad9 	bl	800a20e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
 8009c5c:	6838      	ldr	r0, [r7, #0]
 8009c5e:	f000 fa8a 	bl	800a176 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3lhsEv>
 8009c62:	4603      	mov	r3, r0
 8009c64:	4618      	mov	r0, r3
 8009c66:	f7fc f8b2 	bl	8005dce <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>
 8009c6a:	4602      	mov	r2, r0
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	619a      	str	r2, [r3, #24]
  }
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	4618      	mov	r0, r3
 8009c74:	370c      	adds	r7, #12
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd90      	pop	{r4, r7, pc}

08009c7a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8009c7a:	b580      	push	{r7, lr}
 8009c7c:	b082      	sub	sp, #8
 8009c7e:	af00      	add	r7, sp, #0
 8009c80:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8009c82:	2100      	movs	r1, #0
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f000 fad2 	bl	800a22e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 faf2 	bl	800a274 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSS_>
  }
 8009c90:	bf00      	nop
 8009c92:	3708      	adds	r7, #8
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}

08009c98 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8009c98:	b480      	push	{r7}
 8009c9a:	b083      	sub	sp, #12
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
    }
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	370c      	adds	r7, #12
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cac:	4770      	bx	lr

08009cae <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8009cae:	b480      	push	{r7}
 8009cb0:	b083      	sub	sp, #12
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6078      	str	r0, [r7, #4]
 8009cb6:	6039      	str	r1, [r7, #0]
}
 8009cb8:	bf00      	nop
 8009cba:	370c      	adds	r7, #12
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr

08009cc4 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b082      	sub	sp, #8
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	330c      	adds	r3, #12
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f7ff f983 	bl	8008fdc <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	3308      	adds	r3, #8
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f7fb f9b9 	bl	8005052 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f000 fae5 	bl	800a2b0 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEED1Ev>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3708      	adds	r7, #8
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b082      	sub	sp, #8
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f7ff ffe2 	bl	8009cc4 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffED1Ev>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	4618      	mov	r0, r3
 8009d04:	3708      	adds	r7, #8
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}

08009d0a <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8009d0a:	b580      	push	{r7, lr}
 8009d0c:	b090      	sub	sp, #64	; 0x40
 8009d0e:	af02      	add	r7, sp, #8
 8009d10:	60f8      	str	r0, [r7, #12]
 8009d12:	60b9      	str	r1, [r7, #8]
 8009d14:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8009d16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d1a:	68b9      	ldr	r1, [r7, #8]
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f000 fab8 	bl	800a292 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEC1ERKSE_>
  resize_if_allowed(dst, src, func);
 8009d22:	687a      	ldr	r2, [r7, #4]
 8009d24:	68b9      	ldr	r1, [r7, #8]
 8009d26:	68f8      	ldr	r0, [r7, #12]
 8009d28:	f000 faea 	bl	800a300 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>
  DstEvaluatorType dstEvaluator(dst);
 8009d2c:	f107 0320 	add.w	r3, r7, #32
 8009d30:	68f9      	ldr	r1, [r7, #12]
 8009d32:	4618      	mov	r0, r3
 8009d34:	f7fc fcc7 	bl	80066c6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8009d38:	68f8      	ldr	r0, [r7, #12]
 8009d3a:	f7fd fd05 	bl	8007748 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009d44:	f107 0120 	add.w	r1, r7, #32
 8009d48:	f107 0010 	add.w	r0, r7, #16
 8009d4c:	9300      	str	r3, [sp, #0]
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f000 fb04 	bl	800a35c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8009d54:	f107 0310 	add.w	r3, r7, #16
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f000 fb19 	bl	800a390 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi1ELi2EE3runERSL_>
  DstEvaluatorType dstEvaluator(dst);
 8009d5e:	f107 0320 	add.w	r3, r7, #32
 8009d62:	4618      	mov	r0, r3
 8009d64:	f7fb f975 	bl	8005052 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8009d68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f7ff ffbf 	bl	8009cf0 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEED1Ev>
}
 8009d72:	bf00      	nop
 8009d74:	3738      	adds	r7, #56	; 0x38
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}

08009d7a <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffEC1ERKSE_>:
  explicit product_evaluator(const XprType& xpr)
 8009d7a:	b590      	push	{r4, r7, lr}
 8009d7c:	b083      	sub	sp, #12
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	6078      	str	r0, [r7, #4]
 8009d82:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f000 fb25 	bl	800a3d4 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>
 8009d8a:	687c      	ldr	r4, [r7, #4]
    : m_lhs(xpr.lhs()),
 8009d8c:	6838      	ldr	r0, [r7, #0]
 8009d8e:	f000 fb0a 	bl	800a3a6 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3lhsEv>
 8009d92:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 8009d94:	4619      	mov	r1, r3
 8009d96:	4620      	mov	r0, r4
 8009d98:	f000 fb27 	bl	800a3ea <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS_7ProductINS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEERKT_>
      m_rhs(xpr.rhs()),
 8009d9c:	6838      	ldr	r0, [r7, #0]
 8009d9e:	f000 fb0d 	bl	800a3bc <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3rhsEv>
 8009da2:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	625a      	str	r2, [r3, #36]	; 0x24
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	3328      	adds	r3, #40	; 0x28
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8009dac:	687a      	ldr	r2, [r7, #4]
      m_innerDim(xpr.lhs().cols())
 8009dae:	4611      	mov	r1, r2
 8009db0:	4618      	mov	r0, r3
 8009db2:	f7fd fbd3 	bl	800755c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f103 022c 	add.w	r2, r3, #44	; 0x2c
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      m_innerDim(xpr.lhs().cols())
 8009dc0:	4619      	mov	r1, r3
 8009dc2:	4610      	mov	r0, r2
 8009dc4:	f7fd fbca 	bl	800755c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 8009dc8:	6838      	ldr	r0, [r7, #0]
 8009dca:	f000 faec 	bl	800a3a6 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3lhsEv>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f7fc fb58 	bl	8006486 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4colsEv>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	631a      	str	r2, [r3, #48]	; 0x30
  }
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	4618      	mov	r0, r3
 8009de0:	370c      	adds	r7, #12
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd90      	pop	{r4, r7, pc}

08009de6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009de6:	b580      	push	{r7, lr}
 8009de8:	b082      	sub	sp, #8
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8009dee:	2200      	movs	r2, #0
 8009df0:	2100      	movs	r1, #0
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f000 fb0e 	bl	800a414 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f000 fb24 	bl	800a446 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSL_>
  }
 8009dfe:	bf00      	nop
 8009e00:	3708      	adds	r7, #8
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}

08009e06 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8009e06:	b480      	push	{r7}
 8009e08:	b083      	sub	sp, #12
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	6078      	str	r0, [r7, #4]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	4618      	mov	r0, r3
 8009e12:	370c      	adds	r7, #12
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr

08009e1c <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8009e1c:	b480      	push	{r7}
 8009e1e:	b083      	sub	sp, #12
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	3310      	adds	r3, #16
 8009e28:	4618      	mov	r0, r3
 8009e2a:	370c      	adds	r7, #12
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr

08009e34 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8009e34:	b480      	push	{r7}
 8009e36:	b083      	sub	sp, #12
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	4618      	mov	r0, r3
 8009e40:	370c      	adds	r7, #12
 8009e42:	46bd      	mov	sp, r7
 8009e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e48:	4770      	bx	lr

08009e4a <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERKSD_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8009e4a:	b580      	push	{r7, lr}
 8009e4c:	b082      	sub	sp, #8
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	6078      	str	r0, [r7, #4]
 8009e52:	6039      	str	r1, [r7, #0]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6839      	ldr	r1, [r7, #0]
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f000 fb04 	bl	800a466 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffEC1ERKSD_>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	4618      	mov	r0, r3
 8009e62:	3708      	adds	r7, #8
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS5_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b082      	sub	sp, #8
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	6039      	str	r1, [r7, #0]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6839      	ldr	r1, [r7, #0]
 8009e76:	4618      	mov	r0, r3
 8009e78:	f000 fb07 	bl	800a48a <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedEfEC1ERKS5_>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3708      	adds	r7, #8
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}

08009e86 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 8009e86:	b580      	push	{r7, lr}
 8009e88:	b086      	sub	sp, #24
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	60f8      	str	r0, [r7, #12]
 8009e8e:	60b9      	str	r1, [r7, #8]
 8009e90:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 8009e92:	6879      	ldr	r1, [r7, #4]
 8009e94:	68b8      	ldr	r0, [r7, #8]
 8009e96:	f000 fb0e 	bl	800a4b6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 8009e9a:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 8009e9c:	6879      	ldr	r1, [r7, #4]
 8009e9e:	68b8      	ldr	r0, [r7, #8]
 8009ea0:	f000 fb15 	bl	800a4ce <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 8009ea4:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 8009ea6:	693a      	ldr	r2, [r7, #16]
 8009ea8:	6979      	ldr	r1, [r7, #20]
 8009eaa:	68f8      	ldr	r0, [r7, #12]
 8009eac:	f000 fb1b 	bl	800a4e6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 8009eb0:	bf00      	nop
 8009eb2:	3718      	adds	r7, #24
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b082      	sub	sp, #8
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	2100      	movs	r1, #0
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f7ff ffde 	bl	8009e86 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f000 fb31 	bl	800a532 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSP_>
  }
 8009ed0:	bf00      	nop
 8009ed2:	3708      	adds	r7, #8
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}

08009ed8 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi7ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b082      	sub	sp, #8
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8009ee0:	2107      	movs	r1, #7
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f7fe f823 	bl	8007f2e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f000 fb32 	bl	800a552 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi8ELi9EE3runERS9_>
  }
 8009eee:	bf00      	nop
 8009ef0:	3708      	adds	r7, #8
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}

08009ef6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8009ef6:	b480      	push	{r7}
 8009ef8:	b083      	sub	sp, #12
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	4618      	mov	r0, r3
 8009f04:	370c      	adds	r7, #12
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr

08009f0e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8009f0e:	b480      	push	{r7}
 8009f10:	b083      	sub	sp, #12
 8009f12:	af00      	add	r7, sp, #0
 8009f14:	6078      	str	r0, [r7, #4]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	685b      	ldr	r3, [r3, #4]
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	370c      	adds	r7, #12
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f24:	4770      	bx	lr

08009f26 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8009f26:	b480      	push	{r7}
 8009f28:	b083      	sub	sp, #12
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	6078      	str	r0, [r7, #4]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	4618      	mov	r0, r3
 8009f32:	370c      	adds	r7, #12
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr

08009f3c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8009f3c:	b5b0      	push	{r4, r5, r7, lr}
 8009f3e:	b084      	sub	sp, #16
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	689c      	ldr	r4, [r3, #8]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	6839      	ldr	r1, [r7, #0]
 8009f50:	4618      	mov	r0, r3
 8009f52:	f7fe fa52 	bl	80083fa <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 8009f56:	4605      	mov	r5, r0
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	6839      	ldr	r1, [r7, #0]
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f000 fb06 	bl	800a570 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffE5coeffEi>
 8009f64:	eef0 7a40 	vmov.f32	s15, s0
 8009f68:	edc7 7a03 	vstr	s15, [r7, #12]
 8009f6c:	f107 030c 	add.w	r3, r7, #12
 8009f70:	461a      	mov	r2, r3
 8009f72:	4629      	mov	r1, r5
 8009f74:	4620      	mov	r0, r4
 8009f76:	f7fe f9f9 	bl	800836c <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8009f7a:	bf00      	nop
 8009f7c:	3710      	adds	r7, #16
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bdb0      	pop	{r4, r5, r7, pc}

08009f82 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8009f82:	b580      	push	{r7, lr}
 8009f84:	b082      	sub	sp, #8
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8009f8a:	2101      	movs	r1, #1
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f7ff ffd5 	bl	8009f3c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 fb25 	bl	800a5e2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSD_>
  }
 8009f98:	bf00      	nop
 8009f9a:	3708      	adds	r7, #8
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
 8009fa0:	b480      	push	{r7}
 8009fa2:	b083      	sub	sp, #12
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	4618      	mov	r0, r3
 8009fac:	370c      	adds	r7, #12
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb4:	4770      	bx	lr

08009fb6 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8009fb6:	b480      	push	{r7}
 8009fb8:	b083      	sub	sp, #12
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	6078      	str	r0, [r7, #4]
    }
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	370c      	adds	r7, #12
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr

08009fcc <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EEC1Ev>:
    EIGEN_DEVICE_FUNC DenseStorage() {
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b082      	sub	sp, #8
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f000 fb12 	bl	800a600 <_ZN5Eigen8internal11plain_arrayIfLi9ELi1ELi0EEC1Ev>
    }
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3708      	adds	r7, #8
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}
	...

08009fe8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b086      	sub	sp, #24
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	60f8      	str	r0, [r7, #12]
 8009ff0:	60b9      	str	r1, [r7, #8]
 8009ff2:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	2b03      	cmp	r3, #3
 8009ff8:	d108      	bne.n	800a00c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x24>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2b03      	cmp	r3, #3
 8009ffe:	d105      	bne.n	800a00c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x24>
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	2b00      	cmp	r3, #0
 800a004:	db02      	blt.n	800a00c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x24>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	da06      	bge.n	800a01a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x32>
 800a00c:	4b0c      	ldr	r3, [pc, #48]	; (800a040 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x58>)
 800a00e:	4a0d      	ldr	r2, [pc, #52]	; (800a044 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x5c>)
 800a010:	f240 1111 	movw	r1, #273	; 0x111
 800a014:	480c      	ldr	r0, [pc, #48]	; (800a048 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x60>)
 800a016:	f013 fd21 	bl	801da5c <__assert_func>
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	617b      	str	r3, [r7, #20]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	613b      	str	r3, [r7, #16]
  }
 800a022:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 800a024:	68f8      	ldr	r0, [r7, #12]
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	687a      	ldr	r2, [r7, #4]
 800a02a:	fb02 f103 	mul.w	r1, r2, r3
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	68ba      	ldr	r2, [r7, #8]
 800a032:	f000 faf0 	bl	800a616 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE6resizeEiii>
    }
 800a036:	bf00      	nop
 800a038:	3718      	adds	r7, #24
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
 800a03e:	bf00      	nop
 800a040:	08022354 	.word	0x08022354
 800a044:	08023eec 	.word	0x08023eec
 800a048:	08022570 	.word	0x08022570

0800a04c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b082      	sub	sp, #8
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	4618      	mov	r0, r3
 800a058:	f000 faea 	bl	800a630 <_ZNK5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4dataEv>
 800a05c:	4603      	mov	r3, r0
 800a05e:	4618      	mov	r0, r3
 800a060:	3708      	adds	r7, #8
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}

0800a066 <_ZNK5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEELi3EE11outerStrideEv>:
    inline Index outerStride() const EIGEN_NOEXCEPT
 800a066:	b580      	push	{r7, lr}
 800a068:	b082      	sub	sp, #8
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	6078      	str	r0, [r7, #4]
      return derived().outerStride();
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 fae9 	bl	800a646 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE7derivedEv>
 800a074:	4603      	mov	r3, r0
 800a076:	4618      	mov	r0, r3
 800a078:	f000 faf0 	bl	800a65c <_ZNK5Eigen6MatrixIfLi3ELi3ELi1ELi3ELi3EE11outerStrideEv>
 800a07c:	4603      	mov	r3, r0
    }
 800a07e:	4618      	mov	r0, r3
 800a080:	3708      	adds	r7, #8
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}

0800a086 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1EEEEC1Ev>:
 800a086:	b580      	push	{r7, lr}
 800a088:	b082      	sub	sp, #8
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	6078      	str	r0, [r7, #4]
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f000 faf0 	bl	800a674 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1EEEEC1Ev>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	4618      	mov	r0, r3
 800a098:	3708      	adds	r7, #8
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}

0800a09e <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1ELi3EEC1Ev>:
class dense_product_base
 800a09e:	b580      	push	{r7, lr}
 800a0a0:	b082      	sub	sp, #8
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	6078      	str	r0, [r7, #4]
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f7ff ffed 	bl	800a086 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1EEEEC1Ev>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3708      	adds	r7, #8
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}

0800a0b6 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800a0b6:	b580      	push	{r7, lr}
 800a0b8:	b082      	sub	sp, #8
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	6078      	str	r0, [r7, #4]
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f7ff ffed 	bl	800a09e <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1ELi3EEC1Ev>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3708      	adds	r7, #8
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}
	...

0800a0d0 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 800a0d0:	b590      	push	{r4, r7, lr}
 800a0d2:	b085      	sub	sp, #20
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	60f8      	str	r0, [r7, #12]
 800a0d8:	60b9      	str	r1, [r7, #8]
 800a0da:	607a      	str	r2, [r7, #4]
 800a0dc:	68f8      	ldr	r0, [r7, #12]
 800a0de:	f7ff ffea 	bl	800a0b6 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1ENS_5DenseEEC1Ev>
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	68ba      	ldr	r2, [r7, #8]
 800a0e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a0ea:	e883 0003 	stmia.w	r3, {r0, r1}
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	3308      	adds	r3, #8
 800a0f2:	687a      	ldr	r2, [r7, #4]
 800a0f4:	6812      	ldr	r2, [r2, #0]
 800a0f6:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 800a0f8:	68b8      	ldr	r0, [r7, #8]
 800a0fa:	f7fb fad8 	bl	80056ae <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>
 800a0fe:	4604      	mov	r4, r0
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f7fb fae2 	bl	80056ca <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800a106:	4603      	mov	r3, r0
 800a108:	429c      	cmp	r4, r3
 800a10a:	d005      	beq.n	800a118 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_+0x48>
 800a10c:	4b05      	ldr	r3, [pc, #20]	; (800a124 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_+0x54>)
 800a10e:	4a06      	ldr	r2, [pc, #24]	; (800a128 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_+0x58>)
 800a110:	2160      	movs	r1, #96	; 0x60
 800a112:	4806      	ldr	r0, [pc, #24]	; (800a12c <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_+0x5c>)
 800a114:	f013 fca2 	bl	801da5c <__assert_func>
 800a118:	bf00      	nop
    }
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	4618      	mov	r0, r3
 800a11e:	3714      	adds	r7, #20
 800a120:	46bd      	mov	sp, r7
 800a122:	bd90      	pop	{r4, r7, pc}
 800a124:	0801fb84 	.word	0x0801fb84
 800a128:	08023f80 	.word	0x08023f80
 800a12c:	0801fed4 	.word	0x0801fed4

0800a130 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800a130:	b580      	push	{r7, lr}
 800a132:	b084      	sub	sp, #16
 800a134:	af00      	add	r7, sp, #0
 800a136:	60f8      	str	r0, [r7, #12]
 800a138:	60b9      	str	r1, [r7, #8]
 800a13a:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800a13c:	68b9      	ldr	r1, [r7, #8]
 800a13e:	68f8      	ldr	r0, [r7, #12]
 800a140:	f000 fab9 	bl	800a6b6 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800a144:	687a      	ldr	r2, [r7, #4]
 800a146:	68b9      	ldr	r1, [r7, #8]
 800a148:	68f8      	ldr	r0, [r7, #12]
 800a14a:	f000 fb14 	bl	800a776 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800a14e:	bf00      	nop
 800a150:	3710      	adds	r7, #16
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}

0800a156 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a156:	b580      	push	{r7, lr}
 800a158:	b082      	sub	sp, #8
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a15e:	2201      	movs	r2, #1
 800a160:	2102      	movs	r1, #2
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f7fd ffb3 	bl	80080ce <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f000 fb3c 	bl	800a7e6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSL_>
  }
 800a16e:	bf00      	nop
 800a170:	3708      	adds	r7, #8
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}

0800a176 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800a176:	b480      	push	{r7}
 800a178:	b083      	sub	sp, #12
 800a17a:	af00      	add	r7, sp, #0
 800a17c:	6078      	str	r0, [r7, #4]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	4618      	mov	r0, r3
 800a182:	370c      	adds	r7, #12
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr

0800a18c <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800a18c:	b480      	push	{r7}
 800a18e:	b083      	sub	sp, #12
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	3308      	adds	r3, #8
 800a198:	4618      	mov	r0, r3
 800a19a:	370c      	adds	r7, #12
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr

0800a1a4 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>:
 800a1a4:	b480      	push	{r7}
 800a1a6:	b083      	sub	sp, #12
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	370c      	adds	r7, #12
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr

0800a1ba <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEERKT_>:
    explicit Matrix(const T& x)
 800a1ba:	b580      	push	{r7, lr}
 800a1bc:	b082      	sub	sp, #8
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	6078      	str	r0, [r7, #4]
 800a1c2:	6039      	str	r1, [r7, #0]
    {
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f7fa fc75 	bl	8004ab6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 800a1cc:	f7fa fc83 	bl	8004ad6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6839      	ldr	r1, [r7, #0]
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f000 fb16 	bl	800a806 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEESA_EEvRKNS_9DenseBaseIT0_EE>
    }
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3708      	adds	r7, #8
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}

0800a1e4 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS1_EEEEEERKT_>:
    explicit Matrix(const T& x)
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b082      	sub	sp, #8
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	6039      	str	r1, [r7, #0]
    {
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f7fa fc3d 	bl	8004a70 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 800a1f6:	f7fa fc4b 	bl	8004a90 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6839      	ldr	r1, [r7, #0]
 800a1fe:	4618      	mov	r0, r3
 800a200:	f000 fb0e 	bl	800a820 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS2_EEEESK_EEvRKNS_9DenseBaseIT0_EE>
    }
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	4618      	mov	r0, r3
 800a208:	3708      	adds	r7, #8
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}

0800a20e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>:
  explicit evaluator(const XprType& m)
 800a20e:	b580      	push	{r7, lr}
 800a210:	b082      	sub	sp, #8
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
 800a216:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	683a      	ldr	r2, [r7, #0]
 800a21c:	4611      	mov	r1, r2
 800a21e:	4618      	mov	r0, r3
 800a220:	f000 fb0b 	bl	800a83a <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKS5_>
  { }
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	4618      	mov	r0, r3
 800a228:	3708      	adds	r7, #8
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}

0800a22e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 800a22e:	b5b0      	push	{r4, r5, r7, lr}
 800a230:	b084      	sub	sp, #16
 800a232:	af00      	add	r7, sp, #0
 800a234:	6078      	str	r0, [r7, #4]
 800a236:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	689c      	ldr	r4, [r3, #8]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	6839      	ldr	r1, [r7, #0]
 800a242:	4618      	mov	r0, r3
 800a244:	f7fe f8d9 	bl	80083fa <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 800a248:	4605      	mov	r5, r0
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	6839      	ldr	r1, [r7, #0]
 800a250:	4618      	mov	r0, r3
 800a252:	f000 fb09 	bl	800a868 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffE5coeffEi>
 800a256:	eef0 7a40 	vmov.f32	s15, s0
 800a25a:	edc7 7a03 	vstr	s15, [r7, #12]
 800a25e:	f107 030c 	add.w	r3, r7, #12
 800a262:	461a      	mov	r2, r3
 800a264:	4629      	mov	r1, r5
 800a266:	4620      	mov	r0, r4
 800a268:	f7fe f880 	bl	800836c <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800a26c:	bf00      	nop
 800a26e:	3710      	adds	r7, #16
 800a270:	46bd      	mov	sp, r7
 800a272:	bdb0      	pop	{r4, r5, r7, pc}

0800a274 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a274:	b580      	push	{r7, lr}
 800a276:	b082      	sub	sp, #8
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a27c:	2101      	movs	r1, #1
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f7ff ffd5 	bl	800a22e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f000 fb28 	bl	800a8da <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSS_>
  }
 800a28a:	bf00      	nop
 800a28c:	3708      	adds	r7, #8
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}

0800a292 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEC1ERKSE_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800a292:	b580      	push	{r7, lr}
 800a294:	b082      	sub	sp, #8
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
 800a29a:	6039      	str	r1, [r7, #0]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6839      	ldr	r1, [r7, #0]
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f000 fb29 	bl	800a8f8 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffEC1ERKSE_>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3708      	adds	r7, #8
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}

0800a2b0 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800a2b0:	b480      	push	{r7}
 800a2b2:	b083      	sub	sp, #12
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	370c      	adds	r7, #12
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c4:	4770      	bx	lr

0800a2c6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800a2c6:	b580      	push	{r7, lr}
 800a2c8:	b082      	sub	sp, #8
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	6078      	str	r0, [r7, #4]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f7fa fd51 	bl	8004d7a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3708      	adds	r7, #8
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}

0800a2e2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800a2e2:	b580      	push	{r7, lr}
 800a2e4:	b082      	sub	sp, #8
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	6078      	str	r0, [r7, #4]
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	3304      	adds	r3, #4
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f7fc fc05 	bl	8006afe <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4colsEv>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3708      	adds	r7, #8
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}
	...

0800a300 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const Functor &/*func*/)
 800a300:	b590      	push	{r4, r7, lr}
 800a302:	b085      	sub	sp, #20
 800a304:	af00      	add	r7, sp, #0
 800a306:	60f8      	str	r0, [r7, #12]
 800a308:	60b9      	str	r1, [r7, #8]
 800a30a:	607a      	str	r2, [r7, #4]
  eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	4618      	mov	r0, r3
 800a310:	f7fa fd33 	bl	8004d7a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800a314:	4604      	mov	r4, r0
 800a316:	68b8      	ldr	r0, [r7, #8]
 800a318:	f7ff ffd5 	bl	800a2c6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE4rowsEv>
 800a31c:	4603      	mov	r3, r0
 800a31e:	429c      	cmp	r4, r3
 800a320:	d10a      	bne.n	800a338 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x38>
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	4618      	mov	r0, r3
 800a326:	f7fa fd1d 	bl	8004d64 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800a32a:	4604      	mov	r4, r0
 800a32c:	68b8      	ldr	r0, [r7, #8]
 800a32e:	f7ff ffd8 	bl	800a2e2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE4colsEv>
 800a332:	4603      	mov	r3, r0
 800a334:	429c      	cmp	r4, r3
 800a336:	d006      	beq.n	800a346 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x46>
 800a338:	4b05      	ldr	r3, [pc, #20]	; (800a350 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x50>)
 800a33a:	4a06      	ldr	r2, [pc, #24]	; (800a354 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x54>)
 800a33c:	f240 21f2 	movw	r1, #754	; 0x2f2
 800a340:	4805      	ldr	r0, [pc, #20]	; (800a358 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x58>)
 800a342:	f013 fb8b 	bl	801da5c <__assert_func>
}
 800a346:	bf00      	nop
 800a348:	3714      	adds	r7, #20
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd90      	pop	{r4, r7, pc}
 800a34e:	bf00      	nop
 800a350:	08022658 	.word	0x08022658
 800a354:	0802412c 	.word	0x0802412c
 800a358:	08022050 	.word	0x08022050

0800a35c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 800a35c:	b480      	push	{r7}
 800a35e:	b085      	sub	sp, #20
 800a360:	af00      	add	r7, sp, #0
 800a362:	60f8      	str	r0, [r7, #12]
 800a364:	60b9      	str	r1, [r7, #8]
 800a366:	607a      	str	r2, [r7, #4]
 800a368:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	68ba      	ldr	r2, [r7, #8]
 800a36e:	601a      	str	r2, [r3, #0]
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	605a      	str	r2, [r3, #4]
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	683a      	ldr	r2, [r7, #0]
 800a37a:	609a      	str	r2, [r3, #8]
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	69ba      	ldr	r2, [r7, #24]
 800a380:	60da      	str	r2, [r3, #12]
  }
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	4618      	mov	r0, r3
 800a386:	3714      	adds	r7, #20
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr

0800a390 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi1ELi2EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a390:	b580      	push	{r7, lr}
 800a392:	b082      	sub	sp, #8
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f000 fae6 	bl	800a96a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi0ELi3EE3runERSL_>
  }
 800a39e:	bf00      	nop
 800a3a0:	3708      	adds	r7, #8
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}

0800a3a6 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800a3a6:	b480      	push	{r7}
 800a3a8:	b083      	sub	sp, #12
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	370c      	adds	r7, #12
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr

0800a3bc <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800a3bc:	b480      	push	{r7}
 800a3be:	b083      	sub	sp, #12
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	691b      	ldr	r3, [r3, #16]
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	370c      	adds	r7, #12
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr

0800a3d4 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800a3d4:	b480      	push	{r7}
 800a3d6:	b083      	sub	sp, #12
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	4618      	mov	r0, r3
 800a3e0:	370c      	adds	r7, #12
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e8:	4770      	bx	lr

0800a3ea <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS_7ProductINS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEERKT_>:
    explicit Matrix(const T& x)
 800a3ea:	b580      	push	{r7, lr}
 800a3ec:	b082      	sub	sp, #8
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	6078      	str	r0, [r7, #4]
 800a3f2:	6039      	str	r1, [r7, #0]
    {
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f7fa fb17 	bl	8004a2a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 800a3fc:	f7fa fb25 	bl	8004a4a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6839      	ldr	r1, [r7, #0]
 800a404:	4618      	mov	r0, r3
 800a406:	f000 fabf 	bl	800a988 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEESF_EEvRKNS_9DenseBaseIT0_EE>
    }
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	4618      	mov	r0, r3
 800a40e:	3708      	adds	r7, #8
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}

0800a414 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 800a414:	b580      	push	{r7, lr}
 800a416:	b086      	sub	sp, #24
 800a418:	af00      	add	r7, sp, #0
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	60b9      	str	r1, [r7, #8]
 800a41e:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 800a420:	6879      	ldr	r1, [r7, #4]
 800a422:	68b8      	ldr	r0, [r7, #8]
 800a424:	f000 fabd 	bl	800a9a2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 800a428:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 800a42a:	6879      	ldr	r1, [r7, #4]
 800a42c:	68b8      	ldr	r0, [r7, #8]
 800a42e:	f000 fac4 	bl	800a9ba <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 800a432:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 800a434:	693a      	ldr	r2, [r7, #16]
 800a436:	6979      	ldr	r1, [r7, #20]
 800a438:	68f8      	ldr	r0, [r7, #12]
 800a43a:	f000 faca 	bl	800a9d2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 800a43e:	bf00      	nop
 800a440:	3718      	adds	r7, #24
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}

0800a446 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a446:	b580      	push	{r7, lr}
 800a448:	b082      	sub	sp, #8
 800a44a:	af00      	add	r7, sp, #0
 800a44c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a44e:	2201      	movs	r2, #1
 800a450:	2100      	movs	r1, #0
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f7ff ffde 	bl	800a414 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f000 fae0 	bl	800aa1e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSL_>
  }
 800a45e:	bf00      	nop
 800a460:	3708      	adds	r7, #8
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}

0800a466 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffEC1ERKSD_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800a466:	b580      	push	{r7, lr}
 800a468:	b082      	sub	sp, #8
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	6078      	str	r0, [r7, #4]
 800a46e:	6039      	str	r1, [r7, #0]
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f000 fae4 	bl	800aa3e <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1Ev>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6839      	ldr	r1, [r7, #0]
 800a47a:	4618      	mov	r0, r3
 800a47c:	f000 faea 	bl	800aa54 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4DataC1ERKSD_>
  }
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	4618      	mov	r0, r3
 800a484:	3708      	adds	r7, #8
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}

0800a48a <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedEfEC1ERKS5_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 800a48a:	b590      	push	{r4, r7, lr}
 800a48c:	b083      	sub	sp, #12
 800a48e:	af00      	add	r7, sp, #0
 800a490:	6078      	str	r0, [r7, #4]
 800a492:	6039      	str	r1, [r7, #0]
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f000 fb11 	bl	800aabc <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 800a49a:	687c      	ldr	r4, [r7, #4]
 800a49c:	6838      	ldr	r0, [r7, #0]
 800a49e:	f000 fb01 	bl	800aaa4 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	4620      	mov	r0, r4
 800a4a8:	f7fc f90d 	bl	80066c6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	370c      	adds	r7, #12
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd90      	pop	{r4, r7, pc}

0800a4b6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 800a4b6:	b480      	push	{r7}
 800a4b8:	b083      	sub	sp, #12
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
 800a4be:	6039      	str	r1, [r7, #0]
      : inner;
 800a4c0:	683b      	ldr	r3, [r7, #0]
  }
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	370c      	adds	r7, #12
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr

0800a4ce <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 800a4ce:	b480      	push	{r7}
 800a4d0:	b083      	sub	sp, #12
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	6078      	str	r0, [r7, #4]
 800a4d6:	6039      	str	r1, [r7, #0]
      : outer;
 800a4d8:	687b      	ldr	r3, [r7, #4]
  }
 800a4da:	4618      	mov	r0, r3
 800a4dc:	370c      	adds	r7, #12
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e4:	4770      	bx	lr

0800a4e6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 800a4e6:	b5b0      	push	{r4, r5, r7, lr}
 800a4e8:	b086      	sub	sp, #24
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	60f8      	str	r0, [r7, #12]
 800a4ee:	60b9      	str	r1, [r7, #8]
 800a4f0:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	689c      	ldr	r4, [r3, #8]
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	687a      	ldr	r2, [r7, #4]
 800a4fc:	68b9      	ldr	r1, [r7, #8]
 800a4fe:	4618      	mov	r0, r3
 800a500:	f7fe f9c4 	bl	800888c <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 800a504:	4605      	mov	r5, r0
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	687a      	ldr	r2, [r7, #4]
 800a50c:	68b9      	ldr	r1, [r7, #8]
 800a50e:	4618      	mov	r0, r3
 800a510:	f000 fadf 	bl	800aad2 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffE5coeffEii>
 800a514:	eef0 7a40 	vmov.f32	s15, s0
 800a518:	edc7 7a05 	vstr	s15, [r7, #20]
 800a51c:	f107 0314 	add.w	r3, r7, #20
 800a520:	461a      	mov	r2, r3
 800a522:	4629      	mov	r1, r5
 800a524:	4620      	mov	r0, r4
 800a526:	f7fd ff21 	bl	800836c <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800a52a:	bf00      	nop
 800a52c:	3718      	adds	r7, #24
 800a52e:	46bd      	mov	sp, r7
 800a530:	bdb0      	pop	{r4, r5, r7, pc}

0800a532 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a532:	b580      	push	{r7, lr}
 800a534:	b082      	sub	sp, #8
 800a536:	af00      	add	r7, sp, #0
 800a538:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a53a:	2202      	movs	r2, #2
 800a53c:	2100      	movs	r1, #0
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f7ff fca1 	bl	8009e86 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f000 faf7 	bl	800ab38 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSP_>
  }
 800a54a:	bf00      	nop
 800a54c:	3708      	adds	r7, #8
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}

0800a552 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi8ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a552:	b580      	push	{r7, lr}
 800a554:	b082      	sub	sp, #8
 800a556:	af00      	add	r7, sp, #0
 800a558:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a55a:	2108      	movs	r1, #8
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f7fd fce6 	bl	8007f2e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f000 faf8 	bl	800ab58 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi9ELi9EE3runERS9_>
  }
 800a568:	bf00      	nop
 800a56a:	3708      	adds	r7, #8
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffE5coeffEi>:
  /* Allow index-based non-packet access. It is impossible though to allow index-based packed access,
   * which is why we don't set the LinearAccessBit.
   * TODO: this seems possible when the result is a vector
   */
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  const CoeffReturnType coeff(Index index) const
 800a570:	b580      	push	{r7, lr}
 800a572:	b0a4      	sub	sp, #144	; 0x90
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	6039      	str	r1, [r7, #0]
  {
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 800a580:	2300      	movs	r3, #0
 800a582:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6819      	ldr	r1, [r3, #0]
 800a58a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a58e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800a592:	4618      	mov	r0, r3
 800a594:	f000 faea 	bl	800ab6c <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 800a598:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a59c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a5a0:	4611      	mov	r1, r2
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f000 faf5 	bl	800ab92 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6859      	ldr	r1, [r3, #4]
 800a5ac:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f000 fafe 	bl	800abb4 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3colEi>
 800a5b8:	f107 030c 	add.w	r3, r7, #12
 800a5bc:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800a5c0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f000 fb08 	bl	800abda <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 800a5ca:	f107 030c 	add.w	r3, r7, #12
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f000 fb31 	bl	800ac36 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE3sumEv>
 800a5d4:	eef0 7a40 	vmov.f32	s15, s0
  }
 800a5d8:	eeb0 0a67 	vmov.f32	s0, s15
 800a5dc:	3790      	adds	r7, #144	; 0x90
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}

0800a5e2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a5e2:	b580      	push	{r7, lr}
 800a5e4:	b082      	sub	sp, #8
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a5ea:	2102      	movs	r1, #2
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f7ff fca5 	bl	8009f3c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f000 fb3a 	bl	800ac6c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSD_>
  }
 800a5f8:	bf00      	nop
 800a5fa:	3708      	adds	r7, #8
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}

0800a600 <_ZN5Eigen8internal11plain_arrayIfLi9ELi1ELi0EEC1Ev>:
  plain_array()
 800a600:	b580      	push	{r7, lr}
 800a602:	b082      	sub	sp, #8
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 800a608:	f7fc fbd4 	bl	8006db4 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi9EEEvv>
  }
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	4618      	mov	r0, r3
 800a610:	3708      	adds	r7, #8
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}

0800a616 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE6resizeEiii>:
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
 800a616:	b480      	push	{r7}
 800a618:	b085      	sub	sp, #20
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	60f8      	str	r0, [r7, #12]
 800a61e:	60b9      	str	r1, [r7, #8]
 800a620:	607a      	str	r2, [r7, #4]
 800a622:	603b      	str	r3, [r7, #0]
 800a624:	bf00      	nop
 800a626:	3714      	adds	r7, #20
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr

0800a630 <_ZNK5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 800a630:	b480      	push	{r7}
 800a632:	b083      	sub	sp, #12
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	4618      	mov	r0, r3
 800a63c:	370c      	adds	r7, #12
 800a63e:	46bd      	mov	sp, r7
 800a640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a644:	4770      	bx	lr

0800a646 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800a646:	b480      	push	{r7}
 800a648:	b083      	sub	sp, #12
 800a64a:	af00      	add	r7, sp, #0
 800a64c:	6078      	str	r0, [r7, #4]
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	4618      	mov	r0, r3
 800a652:	370c      	adds	r7, #12
 800a654:	46bd      	mov	sp, r7
 800a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65a:	4770      	bx	lr

0800a65c <_ZNK5Eigen6MatrixIfLi3ELi3ELi1ELi3ELi3EE11outerStrideEv>:
    inline Index outerStride() const EIGEN_NOEXCEPT { return this->innerSize(); }
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b082      	sub	sp, #8
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f000 fb0b 	bl	800ac80 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE9innerSizeEv>
 800a66a:	4603      	mov	r3, r0
 800a66c:	4618      	mov	r0, r3
 800a66e:	3708      	adds	r7, #8
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}

0800a674 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800a674:	b480      	push	{r7}
 800a676:	b083      	sub	sp, #12
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
    }
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	4618      	mov	r0, r3
 800a680:	370c      	adds	r7, #12
 800a682:	46bd      	mov	sp, r7
 800a684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a688:	4770      	bx	lr

0800a68a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 800a68a:	b580      	push	{r7, lr}
 800a68c:	b082      	sub	sp, #8
 800a68e:	af00      	add	r7, sp, #0
 800a690:	6078      	str	r0, [r7, #4]
 800a692:	f000 fb01 	bl	800ac98 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4rowsEv>
 800a696:	4603      	mov	r3, r0
 800a698:	4618      	mov	r0, r3
 800a69a:	3708      	adds	r7, #8
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}

0800a6a0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b082      	sub	sp, #8
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	f000 fafe 	bl	800aca8 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4colsEv>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3708      	adds	r7, #8
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}

0800a6b6 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800a6b6:	b580      	push	{r7, lr}
 800a6b8:	b082      	sub	sp, #8
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	6078      	str	r0, [r7, #4]
 800a6be:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f7ff ffe1 	bl	800a68a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4rowsEv>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	2b01      	cmp	r3, #1
 800a6cc:	dd08      	ble.n	800a6e0 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_+0x2a>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f7ff ffe5 	bl	800a6a0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	dd01      	ble.n	800a6e0 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_+0x2a>
 800a6dc:	2301      	movs	r3, #1
 800a6de:	e000      	b.n	800a6e2 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_+0x2c>
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d003      	beq.n	800a6ee <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 800a6e6:	6839      	ldr	r1, [r7, #0]
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 fae5 	bl	800acb8 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEELb0EE3runERKS3_RKS9_>
}
 800a6ee:	bf00      	nop
 800a6f0:	3708      	adds	r7, #8
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}

0800a6f6 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800a6f6:	b580      	push	{r7, lr}
 800a6f8:	b082      	sub	sp, #8
 800a6fa:	af00      	add	r7, sp, #0
 800a6fc:	6078      	str	r0, [r7, #4]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	4618      	mov	r0, r3
 800a702:	f7fc fd1c 	bl	800713e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f000 fafb 	bl	800ad02 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	4618      	mov	r0, r3
 800a710:	3708      	adds	r7, #8
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}

0800a716 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800a716:	b580      	push	{r7, lr}
 800a718:	b082      	sub	sp, #8
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	6078      	str	r0, [r7, #4]
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	4618      	mov	r0, r3
 800a722:	f7ff ffe8 	bl	800a6f6 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS0_10IndexBasedEfED1Ev>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	4618      	mov	r0, r3
 800a72a:	3708      	adds	r7, #8
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}

0800a730 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 800a730:	b580      	push	{r7, lr}
 800a732:	b082      	sub	sp, #8
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	332c      	adds	r3, #44	; 0x2c
 800a73c:	4618      	mov	r0, r3
 800a73e:	f7ff ffea 	bl	800a716 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	3328      	adds	r3, #40	; 0x28
 800a746:	4618      	mov	r0, r3
 800a748:	f7fc fcf9 	bl	800713e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f000 facd 	bl	800acec <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEED1Ev>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	4618      	mov	r0, r3
 800a756:	3708      	adds	r7, #8
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}

0800a75c <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b082      	sub	sp, #8
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	4618      	mov	r0, r3
 800a768:	f7ff ffe2 	bl	800a730 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffED1Ev>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	4618      	mov	r0, r3
 800a770:	3708      	adds	r7, #8
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}

0800a776 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800a776:	b580      	push	{r7, lr}
 800a778:	b098      	sub	sp, #96	; 0x60
 800a77a:	af02      	add	r7, sp, #8
 800a77c:	60f8      	str	r0, [r7, #12]
 800a77e:	60b9      	str	r1, [r7, #8]
 800a780:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800a782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a786:	68b9      	ldr	r1, [r7, #8]
 800a788:	4618      	mov	r0, r3
 800a78a:	f000 faa0 	bl	800acce <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEEC1ERKS8_>
  resize_if_allowed(dst, src, func);
 800a78e:	687a      	ldr	r2, [r7, #4]
 800a790:	68b9      	ldr	r1, [r7, #8]
 800a792:	68f8      	ldr	r0, [r7, #12]
 800a794:	f000 fadc 	bl	800ad50 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800a798:	f107 0320 	add.w	r3, r7, #32
 800a79c:	68f9      	ldr	r1, [r7, #12]
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f7fe fedd 	bl	800955e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800a7a4:	68f8      	ldr	r0, [r7, #12]
 800a7a6:	f000 fb1d 	bl	800ade4 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE18const_cast_derivedEv>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800a7b0:	f107 0120 	add.w	r1, r7, #32
 800a7b4:	f107 0010 	add.w	r0, r7, #16
 800a7b8:	9300      	str	r3, [sp, #0]
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f000 fb1d 	bl	800adfa <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSC_RKSE_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800a7c0:	f107 0310 	add.w	r3, r7, #16
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f000 fb32 	bl	800ae2e <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSG_>
  DstEvaluatorType dstEvaluator(dst);
 800a7ca:	f107 0320 	add.w	r3, r7, #32
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f7fc fd8a 	bl	80072e8 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800a7d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f7ff ffbf 	bl	800a75c <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEED1Ev>
}
 800a7de:	bf00      	nop
 800a7e0:	3758      	adds	r7, #88	; 0x58
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}

0800a7e6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a7e6:	b580      	push	{r7, lr}
 800a7e8:	b082      	sub	sp, #8
 800a7ea:	af00      	add	r7, sp, #0
 800a7ec:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a7ee:	2202      	movs	r2, #2
 800a7f0:	2102      	movs	r1, #2
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f7fd fc6b 	bl	80080ce <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f000 fb23 	bl	800ae44 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSL_>
  }
 800a7fe:	bf00      	nop
 800a800:	3708      	adds	r7, #8
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}

0800a806 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEESA_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800a806:	b580      	push	{r7, lr}
 800a808:	b082      	sub	sp, #8
 800a80a:	af00      	add	r7, sp, #0
 800a80c:	6078      	str	r0, [r7, #4]
 800a80e:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800a810:	6839      	ldr	r1, [r7, #0]
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f000 fb20 	bl	800ae58 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800a818:	bf00      	nop
 800a81a:	3708      	adds	r7, #8
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}

0800a820 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS2_EEEESK_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800a820:	b580      	push	{r7, lr}
 800a822:	b082      	sub	sp, #8
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800a82a:	6839      	ldr	r1, [r7, #0]
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f000 fb34 	bl	800ae9a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS2_EEEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800a832:	bf00      	nop
 800a834:	3708      	adds	r7, #8
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}

0800a83a <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 800a83a:	b590      	push	{r4, r7, lr}
 800a83c:	b083      	sub	sp, #12
 800a83e:	af00      	add	r7, sp, #0
 800a840:	6078      	str	r0, [r7, #4]
 800a842:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f000 fb56 	bl	800aef6 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 800a84a:	687c      	ldr	r4, [r7, #4]
 800a84c:	6838      	ldr	r0, [r7, #0]
 800a84e:	f000 fb45 	bl	800aedc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4dataEv>
 800a852:	4603      	mov	r3, r0
 800a854:	2200      	movs	r2, #0
 800a856:	4619      	mov	r1, r3
 800a858:	4620      	mov	r0, r4
 800a85a:	f7fc fad8 	bl	8006e0e <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	4618      	mov	r0, r3
 800a862:	370c      	adds	r7, #12
 800a864:	46bd      	mov	sp, r7
 800a866:	bd90      	pop	{r4, r7, pc}

0800a868 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffE5coeffEi>:
  const CoeffReturnType coeff(Index index) const
 800a868:	b580      	push	{r7, lr}
 800a86a:	b0a2      	sub	sp, #136	; 0x88
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	6039      	str	r1, [r7, #0]
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 800a878:	2300      	movs	r3, #0
 800a87a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800a87e:	6879      	ldr	r1, [r7, #4]
 800a880:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800a884:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a888:	4618      	mov	r0, r3
 800a88a:	f000 fb3f 	bl	800af0c <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3rowEi>
 800a88e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a892:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800a896:	4611      	mov	r1, r2
 800a898:	4618      	mov	r0, r3
 800a89a:	f000 fb4a 	bl	800af32 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE9transposeEv>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f103 010c 	add.w	r1, r3, #12
 800a8a4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f000 fb52 	bl	800af54 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE3colEi>
 800a8b0:	f107 030c 	add.w	r3, r7, #12
 800a8b4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800a8b8:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f000 fb5c 	bl	800af7a <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 800a8c2:	f107 030c 	add.w	r3, r7, #12
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f000 fb85 	bl	800afd6 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE3sumEv>
 800a8cc:	eef0 7a40 	vmov.f32	s15, s0
  }
 800a8d0:	eeb0 0a67 	vmov.f32	s0, s15
 800a8d4:	3788      	adds	r7, #136	; 0x88
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}

0800a8da <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a8da:	b580      	push	{r7, lr}
 800a8dc:	b082      	sub	sp, #8
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a8e2:	2102      	movs	r1, #2
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f7ff fca2 	bl	800a22e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f000 fb8e 	bl	800b00c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSS_>
  }
 800a8f0:	bf00      	nop
 800a8f2:	3708      	adds	r7, #8
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}

0800a8f8 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffEC1ERKSE_>:
  explicit product_evaluator(const XprType& xpr)
 800a8f8:	b590      	push	{r4, r7, lr}
 800a8fa:	b083      	sub	sp, #12
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
 800a900:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f000 fba4 	bl	800b050 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 800a908:	6838      	ldr	r0, [r7, #0]
 800a90a:	f000 fb89 	bl	800b020 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3lhsEv>
 800a90e:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	601a      	str	r2, [r3, #0]
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	1d1c      	adds	r4, r3, #4
      m_rhs(xpr.rhs()),
 800a918:	6838      	ldr	r0, [r7, #0]
 800a91a:	f000 fb8d 	bl	800b038 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3rhsEv>
 800a91e:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 800a920:	4619      	mov	r1, r3
 800a922:	4620      	mov	r0, r4
 800a924:	f000 fb9f 	bl	800b066 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS_7ProductINS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEERKT_>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 800a932:	4619      	mov	r1, r3
 800a934:	4610      	mov	r0, r2
 800a936:	f7fb fec6 	bl	80066c6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	3304      	adds	r3, #4
      m_innerDim(xpr.lhs().cols())
 800a944:	4619      	mov	r1, r3
 800a946:	4610      	mov	r0, r2
 800a948:	f7ff fc61 	bl	800a20e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
 800a94c:	6838      	ldr	r0, [r7, #0]
 800a94e:	f000 fb67 	bl	800b020 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3lhsEv>
 800a952:	4603      	mov	r3, r0
 800a954:	4618      	mov	r0, r3
 800a956:	f7fa fa05 	bl	8004d64 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800a95a:	4602      	mov	r2, r0
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	611a      	str	r2, [r3, #16]
  }
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	4618      	mov	r0, r3
 800a964:	370c      	adds	r7, #12
 800a966:	46bd      	mov	sp, r7
 800a968:	bd90      	pop	{r4, r7, pc}

0800a96a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi0ELi3EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a96a:	b580      	push	{r7, lr}
 800a96c:	b082      	sub	sp, #8
 800a96e:	af00      	add	r7, sp, #0
 800a970:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a972:	2100      	movs	r1, #0
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f000 fb8b 	bl	800b090 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 fbab 	bl	800b0d6 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi1ELi3EE3runERSL_>
  }
 800a980:	bf00      	nop
 800a982:	3708      	adds	r7, #8
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}

0800a988 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEESF_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800a988:	b580      	push	{r7, lr}
 800a98a:	b082      	sub	sp, #8
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800a992:	6839      	ldr	r1, [r7, #0]
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f000 fbad 	bl	800b0f4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800a99a:	bf00      	nop
 800a99c:	3708      	adds	r7, #8
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}

0800a9a2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 800a9a2:	b480      	push	{r7}
 800a9a4:	b083      	sub	sp, #12
 800a9a6:	af00      	add	r7, sp, #0
 800a9a8:	6078      	str	r0, [r7, #4]
 800a9aa:	6039      	str	r1, [r7, #0]
      : inner;
 800a9ac:	683b      	ldr	r3, [r7, #0]
  }
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	370c      	adds	r7, #12
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b8:	4770      	bx	lr

0800a9ba <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 800a9ba:	b480      	push	{r7}
 800a9bc:	b083      	sub	sp, #12
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	6078      	str	r0, [r7, #4]
 800a9c2:	6039      	str	r1, [r7, #0]
      : outer;
 800a9c4:	687b      	ldr	r3, [r7, #4]
  }
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	370c      	adds	r7, #12
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d0:	4770      	bx	lr

0800a9d2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 800a9d2:	b5b0      	push	{r4, r5, r7, lr}
 800a9d4:	b086      	sub	sp, #24
 800a9d6:	af00      	add	r7, sp, #0
 800a9d8:	60f8      	str	r0, [r7, #12]
 800a9da:	60b9      	str	r1, [r7, #8]
 800a9dc:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	689c      	ldr	r4, [r3, #8]
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	687a      	ldr	r2, [r7, #4]
 800a9e8:	68b9      	ldr	r1, [r7, #8]
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f7fd ff4e 	bl	800888c <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 800a9f0:	4605      	mov	r5, r0
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	685b      	ldr	r3, [r3, #4]
 800a9f6:	687a      	ldr	r2, [r7, #4]
 800a9f8:	68b9      	ldr	r1, [r7, #8]
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f000 fb9b 	bl	800b136 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffE5coeffEii>
 800aa00:	eef0 7a40 	vmov.f32	s15, s0
 800aa04:	edc7 7a05 	vstr	s15, [r7, #20]
 800aa08:	f107 0314 	add.w	r3, r7, #20
 800aa0c:	461a      	mov	r2, r3
 800aa0e:	4629      	mov	r1, r5
 800aa10:	4620      	mov	r0, r4
 800aa12:	f7fd fcab 	bl	800836c <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800aa16:	bf00      	nop
 800aa18:	3718      	adds	r7, #24
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bdb0      	pop	{r4, r5, r7, pc}

0800aa1e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800aa1e:	b580      	push	{r7, lr}
 800aa20:	b082      	sub	sp, #8
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800aa26:	2202      	movs	r2, #2
 800aa28:	2100      	movs	r1, #0
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f7ff fcf2 	bl	800a414 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f000 fbb2 	bl	800b19a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSL_>
  }
 800aa36:	bf00      	nop
 800aa38:	3708      	adds	r7, #8
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}

0800aa3e <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800aa3e:	b480      	push	{r7}
 800aa40:	b083      	sub	sp, #12
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	6078      	str	r0, [r7, #4]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	4618      	mov	r0, r3
 800aa4a:	370c      	adds	r7, #12
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa52:	4770      	bx	lr

0800aa54 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4DataC1ERKSD_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800aa54:	b590      	push	{r4, r7, lr}
 800aa56:	b083      	sub	sp, #12
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
 800aa5c:	6039      	str	r1, [r7, #0]
 800aa5e:	687c      	ldr	r4, [r7, #4]
 800aa60:	6838      	ldr	r0, [r7, #0]
 800aa62:	f000 fbaa 	bl	800b1ba <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE7functorEv>
 800aa66:	4603      	mov	r3, r0
 800aa68:	4619      	mov	r1, r3
 800aa6a:	4620      	mov	r0, r4
 800aa6c:	f7fa fc0a 	bl	8005284 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	1d1c      	adds	r4, r3, #4
 800aa74:	6838      	ldr	r0, [r7, #0]
 800aa76:	f000 fbac 	bl	800b1d2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3lhsEv>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	4620      	mov	r0, r4
 800aa80:	f000 fbbf 	bl	800b202 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS4_>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f103 0408 	add.w	r4, r3, #8
 800aa8a:	6838      	ldr	r0, [r7, #0]
 800aa8c:	f000 fbad 	bl	800b1ea <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3rhsEv>
 800aa90:	4603      	mov	r3, r0
 800aa92:	4619      	mov	r1, r3
 800aa94:	4620      	mov	r0, r4
 800aa96:	f000 fbc3 	bl	800b220 <_ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERS9_>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	370c      	adds	r7, #12
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd90      	pop	{r4, r7, pc}

0800aaa4 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 800aaa4:	b480      	push	{r7}
 800aaa6:	b083      	sub	sp, #12
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	4618      	mov	r0, r3
 800aab2:	370c      	adds	r7, #12
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr

0800aabc <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800aabc:	b480      	push	{r7}
 800aabe:	b083      	sub	sp, #12
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	4618      	mov	r0, r3
 800aac8:	370c      	adds	r7, #12
 800aaca:	46bd      	mov	sp, r7
 800aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad0:	4770      	bx	lr

0800aad2 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 800aad2:	b580      	push	{r7, lr}
 800aad4:	b0a4      	sub	sp, #144	; 0x90
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	60f8      	str	r0, [r7, #12]
 800aada:	60b9      	str	r1, [r7, #8]
 800aadc:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800aade:	68f9      	ldr	r1, [r7, #12]
 800aae0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800aae4:	68ba      	ldr	r2, [r7, #8]
 800aae6:	4618      	mov	r0, r3
 800aae8:	f000 fbde 	bl	800b2a8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE3rowEi>
 800aaec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800aaf0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800aaf4:	4611      	mov	r1, r2
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f000 fbf9 	bl	800b2ee <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE9transposeEv>
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f103 0110 	add.w	r1, r3, #16
 800ab02:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800ab06:	687a      	ldr	r2, [r7, #4]
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f000 fc01 	bl	800b310 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE3colEi>
 800ab0e:	f107 0310 	add.w	r3, r7, #16
 800ab12:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800ab16:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f000 fc0b 	bl	800b336 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS1_IS8_EELi1ELi1ELb0EEEEEKNS3_INS5_IfNS4_6traitsIT_E6ScalarEEEKSJ_KSQ_EERKNS0_ISQ_EE>
 800ab20:	f107 0310 	add.w	r3, r7, #16
 800ab24:	4618      	mov	r0, r3
 800ab26:	f000 fc34 	bl	800b392 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE3sumEv>
 800ab2a:	eef0 7a40 	vmov.f32	s15, s0
  }
 800ab2e:	eeb0 0a67 	vmov.f32	s0, s15
 800ab32:	3790      	adds	r7, #144	; 0x90
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}

0800ab38 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b082      	sub	sp, #8
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800ab40:	2200      	movs	r2, #0
 800ab42:	2101      	movs	r1, #1
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f7ff f99e 	bl	8009e86 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f000 fc3c 	bl	800b3c8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSP_>
  }
 800ab50:	bf00      	nop
 800ab52:	3708      	adds	r7, #8
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi9ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800ab58:	b480      	push	{r7}
 800ab5a:	b083      	sub	sp, #12
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	bf00      	nop
 800ab62:	370c      	adds	r7, #12
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr

0800ab6c <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>:
  return RowXpr(derived(), i);
}

/// This is the const version of row(). */
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
ConstRowXpr row(Index i) const
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b084      	sub	sp, #16
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	60f8      	str	r0, [r7, #12]
 800ab74:	60b9      	str	r1, [r7, #8]
 800ab76:	607a      	str	r2, [r7, #4]
{
  return ConstRowXpr(derived(), i);
 800ab78:	68b8      	ldr	r0, [r7, #8]
 800ab7a:	f7fa fc62 	bl	8005442 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	687a      	ldr	r2, [r7, #4]
 800ab82:	4619      	mov	r1, r3
 800ab84:	68f8      	ldr	r0, [r7, #12]
 800ab86:	f000 fc2f 	bl	800b3e8 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i>
}
 800ab8a:	68f8      	ldr	r0, [r7, #12]
 800ab8c:	3710      	adds	r7, #16
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}

0800ab92 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 800ab92:	b580      	push	{r7, lr}
 800ab94:	b082      	sub	sp, #8
 800ab96:	af00      	add	r7, sp, #0
 800ab98:	6078      	str	r0, [r7, #4]
 800ab9a:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 800ab9c:	6838      	ldr	r0, [r7, #0]
 800ab9e:	f000 fc4d 	bl	800b43c <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE7derivedEv>
 800aba2:	4603      	mov	r3, r0
 800aba4:	4619      	mov	r1, r3
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f000 fc6b 	bl	800b482 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS6_>
}
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	3708      	adds	r7, #8
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}

0800abb4 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3colEi>:
ConstColXpr col(Index i) const
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b084      	sub	sp, #16
 800abb8:	af00      	add	r7, sp, #0
 800abba:	60f8      	str	r0, [r7, #12]
 800abbc:	60b9      	str	r1, [r7, #8]
 800abbe:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800abc0:	68b8      	ldr	r0, [r7, #8]
 800abc2:	f7fa fa76 	bl	80050b2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800abc6:	4603      	mov	r3, r0
 800abc8:	687a      	ldr	r2, [r7, #4]
 800abca:	4619      	mov	r1, r3
 800abcc:	68f8      	ldr	r0, [r7, #12]
 800abce:	f000 fc6f 	bl	800b4b0 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i>
}
 800abd2:	68f8      	ldr	r0, [r7, #12]
 800abd4:	3710      	adds	r7, #16
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}

0800abda <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
  * \sa class CwiseBinaryOp, cwiseAbs2
  */
template<typename OtherDerived>
EIGEN_DEVICE_FUNC
EIGEN_STRONG_INLINE const EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800abda:	b5b0      	push	{r4, r5, r7, lr}
 800abdc:	b086      	sub	sp, #24
 800abde:	af00      	add	r7, sp, #0
 800abe0:	60f8      	str	r0, [r7, #12]
 800abe2:	60b9      	str	r1, [r7, #8]
 800abe4:	607a      	str	r2, [r7, #4]
{
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800abe6:	68b8      	ldr	r0, [r7, #8]
 800abe8:	f000 fc8a 	bl	800b500 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>
 800abec:	4604      	mov	r4, r0
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f000 fc91 	bl	800b516 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE7derivedEv>
 800abf4:	4605      	mov	r5, r0
 800abf6:	f107 0314 	add.w	r3, r7, #20
 800abfa:	4618      	mov	r0, r3
 800abfc:	f7fa fab8 	bl	8005170 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800ac00:	f107 0314 	add.w	r3, r7, #20
 800ac04:	462a      	mov	r2, r5
 800ac06:	4621      	mov	r1, r4
 800ac08:	68f8      	ldr	r0, [r7, #12]
 800ac0a:	f000 fcd7 	bl	800b5bc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_>
}
 800ac0e:	68f8      	ldr	r0, [r7, #12]
 800ac10:	3718      	adds	r7, #24
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bdb0      	pop	{r4, r5, r7, pc}

0800ac16 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800ac16:	b580      	push	{r7, lr}
 800ac18:	b082      	sub	sp, #8
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	6078      	str	r0, [r7, #4]
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f000 fd2a 	bl	800b678 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800ac24:	4603      	mov	r3, r0
 800ac26:	4618      	mov	r0, r3
 800ac28:	f000 fd31 	bl	800b68e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE4rowsEv>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3708      	adds	r7, #8
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}

0800ac36 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE3sumEv>:
  *
  * \sa trace(), prod(), mean()
  */
template<typename Derived>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE typename internal::traits<Derived>::Scalar
DenseBase<Derived>::sum() const
 800ac36:	b590      	push	{r4, r7, lr}
 800ac38:	b085      	sub	sp, #20
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	6078      	str	r0, [r7, #4]
{
  if(SizeAtCompileTime==0 || (SizeAtCompileTime==Dynamic && size()==0))
    return Scalar(0);
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f000 fd1a 	bl	800b678 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800ac44:	4604      	mov	r4, r0
 800ac46:	f107 030c 	add.w	r3, r7, #12
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f7fa fd87 	bl	800575e <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800ac50:	f107 030c 	add.w	r3, r7, #12
 800ac54:	4619      	mov	r1, r3
 800ac56:	4620      	mov	r0, r4
 800ac58:	f000 fdf4 	bl	800b844 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800ac5c:	eef0 7a40 	vmov.f32	s15, s0
 800ac60:	bf00      	nop
}
 800ac62:	eeb0 0a67 	vmov.f32	s0, s15
 800ac66:	3714      	adds	r7, #20
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd90      	pop	{r4, r7, pc}

0800ac6c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSD_>:
 800ac6c:	b480      	push	{r7}
 800ac6e:	b083      	sub	sp, #12
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	bf00      	nop
 800ac76:	370c      	adds	r7, #12
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr

0800ac80 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE9innerSizeEv>:
    Index innerSize() const
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b082      	sub	sp, #8
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f000 fe21 	bl	800b8d0 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800ac8e:	4603      	mov	r3, r0
    }
 800ac90:	4618      	mov	r0, r3
 800ac92:	3708      	adds	r7, #8
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}

0800ac98 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 800ac98:	b480      	push	{r7}
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	2303      	movs	r3, #3
 800ac9e:	4618      	mov	r0, r3
 800aca0:	46bd      	mov	sp, r7
 800aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca6:	4770      	bx	lr

0800aca8 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4colsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 800aca8:	b480      	push	{r7}
 800acaa:	af00      	add	r7, sp, #0
 800acac:	2303      	movs	r3, #3
 800acae:	4618      	mov	r0, r3
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr

0800acb8 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEELb0EE3runERKS3_RKS9_>:
    static void run(const Derived&, const OtherDerived&)
 800acb8:	b480      	push	{r7}
 800acba:	b083      	sub	sp, #12
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	6039      	str	r1, [r7, #0]
    }
 800acc2:	bf00      	nop
 800acc4:	370c      	adds	r7, #12
 800acc6:	46bd      	mov	sp, r7
 800acc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800accc:	4770      	bx	lr

0800acce <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEEC1ERKS8_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800acce:	b580      	push	{r7, lr}
 800acd0:	b082      	sub	sp, #8
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	6078      	str	r0, [r7, #4]
 800acd6:	6039      	str	r1, [r7, #0]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6839      	ldr	r1, [r7, #0]
 800acdc:	4618      	mov	r0, r3
 800acde:	f000 fe07 	bl	800b8f0 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	4618      	mov	r0, r3
 800ace6:	3708      	adds	r7, #8
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}

0800acec <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800acec:	b480      	push	{r7}
 800acee:	b083      	sub	sp, #12
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	4618      	mov	r0, r3
 800acf8:	370c      	adds	r7, #12
 800acfa:	46bd      	mov	sp, r7
 800acfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad00:	4770      	bx	lr

0800ad02 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>:
 800ad02:	b480      	push	{r7}
 800ad04:	b083      	sub	sp, #12
 800ad06:	af00      	add	r7, sp, #0
 800ad08:	6078      	str	r0, [r7, #4]
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	370c      	adds	r7, #12
 800ad10:	46bd      	mov	sp, r7
 800ad12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad16:	4770      	bx	lr

0800ad18 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b082      	sub	sp, #8
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	4618      	mov	r0, r3
 800ad24:	f7fb fdea 	bl	80068fc <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4rowsEv>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3708      	adds	r7, #8
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}

0800ad32 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800ad32:	b580      	push	{r7, lr}
 800ad34:	b082      	sub	sp, #8
 800ad36:	af00      	add	r7, sp, #0
 800ad38:	6078      	str	r0, [r7, #4]
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	3308      	adds	r3, #8
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f7fb fdea 	bl	8006918 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800ad44:	4603      	mov	r3, r0
 800ad46:	4618      	mov	r0, r3
 800ad48:	3708      	adds	r7, #8
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}
	...

0800ad50 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b086      	sub	sp, #24
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	60f8      	str	r0, [r7, #12]
 800ad58:	60b9      	str	r1, [r7, #8]
 800ad5a:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 800ad5c:	68b8      	ldr	r0, [r7, #8]
 800ad5e:	f7ff ffdb 	bl	800ad18 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE4rowsEv>
 800ad62:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 800ad64:	68b8      	ldr	r0, [r7, #8]
 800ad66:	f7ff ffe4 	bl	800ad32 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE4colsEv>
 800ad6a:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f7ff fc8b 	bl	800a68a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4rowsEv>
 800ad74:	4602      	mov	r2, r0
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d107      	bne.n	800ad8c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f7ff fc8e 	bl	800a6a0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800ad84:	4602      	mov	r2, r0
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	4293      	cmp	r3, r2
 800ad8a:	d001      	beq.n	800ad90 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	e000      	b.n	800ad92 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 800ad90:	2300      	movs	r3, #0
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d005      	beq.n	800ada2 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	693a      	ldr	r2, [r7, #16]
 800ad9a:	6979      	ldr	r1, [r7, #20]
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f7ff f923 	bl	8009fe8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	4618      	mov	r0, r3
 800ada6:	f7ff fc70 	bl	800a68a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4rowsEv>
 800adaa:	4602      	mov	r2, r0
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	4293      	cmp	r3, r2
 800adb0:	d107      	bne.n	800adc2 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	4618      	mov	r0, r3
 800adb6:	f7ff fc73 	bl	800a6a0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800adba:	4602      	mov	r2, r0
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d006      	beq.n	800add0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 800adc2:	4b05      	ldr	r3, [pc, #20]	; (800add8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 800adc4:	4a05      	ldr	r2, [pc, #20]	; (800addc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 800adc6:	f240 21fd 	movw	r1, #765	; 0x2fd
 800adca:	4805      	ldr	r0, [pc, #20]	; (800ade0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 800adcc:	f012 fe46 	bl	801da5c <__assert_func>
}
 800add0:	bf00      	nop
 800add2:	3718      	adds	r7, #24
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}
 800add8:	08021f3c 	.word	0x08021f3c
 800addc:	080242e8 	.word	0x080242e8
 800ade0:	08022050 	.word	0x08022050

0800ade4 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 800ade4:	b480      	push	{r7}
 800ade6:	b083      	sub	sp, #12
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	4618      	mov	r0, r3
 800adf0:	370c      	adds	r7, #12
 800adf2:	46bd      	mov	sp, r7
 800adf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf8:	4770      	bx	lr

0800adfa <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSC_RKSE_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 800adfa:	b480      	push	{r7}
 800adfc:	b085      	sub	sp, #20
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	60f8      	str	r0, [r7, #12]
 800ae02:	60b9      	str	r1, [r7, #8]
 800ae04:	607a      	str	r2, [r7, #4]
 800ae06:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	68ba      	ldr	r2, [r7, #8]
 800ae0c:	601a      	str	r2, [r3, #0]
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	687a      	ldr	r2, [r7, #4]
 800ae12:	605a      	str	r2, [r3, #4]
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	683a      	ldr	r2, [r7, #0]
 800ae18:	609a      	str	r2, [r3, #8]
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	69ba      	ldr	r2, [r7, #24]
 800ae1e:	60da      	str	r2, [r3, #12]
  }
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	4618      	mov	r0, r3
 800ae24:	3714      	adds	r7, #20
 800ae26:	46bd      	mov	sp, r7
 800ae28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2c:	4770      	bx	lr

0800ae2e <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800ae2e:	b580      	push	{r7, lr}
 800ae30:	b082      	sub	sp, #8
 800ae32:	af00      	add	r7, sp, #0
 800ae34:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f000 fd92 	bl	800b960 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSG_>
  }
 800ae3c:	bf00      	nop
 800ae3e:	3708      	adds	r7, #8
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}

0800ae44 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800ae44:	b480      	push	{r7}
 800ae46:	b083      	sub	sp, #12
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	bf00      	nop
 800ae4e:	370c      	adds	r7, #12
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr

0800ae58 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800ae58:	b5b0      	push	{r4, r5, r7, lr}
 800ae5a:	b084      	sub	sp, #16
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
 800ae60:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f7fa fa1a 	bl	800529c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800ae68:	4604      	mov	r4, r0
 800ae6a:	6838      	ldr	r0, [r7, #0]
 800ae6c:	f7fa ff75 	bl	8005d5a <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE7derivedEv>
 800ae70:	4605      	mov	r5, r0
 800ae72:	f107 030c 	add.w	r3, r7, #12
 800ae76:	4618      	mov	r0, r3
 800ae78:	f7fb ff09 	bl	8006c8e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800ae7c:	f107 030c 	add.w	r3, r7, #12
 800ae80:	461a      	mov	r2, r3
 800ae82:	4629      	mov	r1, r5
 800ae84:	4620      	mov	r0, r4
 800ae86:	f000 fd7b 	bl	800b980 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f7fa fa06 	bl	800529c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800ae90:	4603      	mov	r3, r0
    }
 800ae92:	4618      	mov	r0, r3
 800ae94:	3710      	adds	r7, #16
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bdb0      	pop	{r4, r5, r7, pc}

0800ae9a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS2_EEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800ae9a:	b5b0      	push	{r4, r5, r7, lr}
 800ae9c:	b084      	sub	sp, #16
 800ae9e:	af00      	add	r7, sp, #0
 800aea0:	6078      	str	r0, [r7, #4]
 800aea2:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f000 fd7c 	bl	800b9a2 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800aeaa:	4604      	mov	r4, r0
 800aeac:	6838      	ldr	r0, [r7, #0]
 800aeae:	f7fa ff5f 	bl	8005d70 <_ZNK5Eigen9EigenBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEE7derivedEv>
 800aeb2:	4605      	mov	r5, r0
 800aeb4:	f107 030c 	add.w	r3, r7, #12
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f7fb fee8 	bl	8006c8e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800aebe:	f107 030c 	add.w	r3, r7, #12
 800aec2:	461a      	mov	r2, r3
 800aec4:	4629      	mov	r1, r5
 800aec6:	4620      	mov	r0, r4
 800aec8:	f000 fd76 	bl	800b9b8 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f000 fd68 	bl	800b9a2 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800aed2:	4603      	mov	r3, r0
    }
 800aed4:	4618      	mov	r0, r3
 800aed6:	3710      	adds	r7, #16
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bdb0      	pop	{r4, r5, r7, pc}

0800aedc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 800aedc:	b580      	push	{r7, lr}
 800aede:	b082      	sub	sp, #8
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	4618      	mov	r0, r3
 800aee8:	f000 fd77 	bl	800b9da <_ZNK5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4dataEv>
 800aeec:	4603      	mov	r3, r0
 800aeee:	4618      	mov	r0, r3
 800aef0:	3708      	adds	r7, #8
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}

0800aef6 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800aef6:	b480      	push	{r7}
 800aef8:	b083      	sub	sp, #12
 800aefa:	af00      	add	r7, sp, #0
 800aefc:	6078      	str	r0, [r7, #4]
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	4618      	mov	r0, r3
 800af02:	370c      	adds	r7, #12
 800af04:	46bd      	mov	sp, r7
 800af06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0a:	4770      	bx	lr

0800af0c <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3rowEi>:
ConstRowXpr row(Index i) const
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b084      	sub	sp, #16
 800af10:	af00      	add	r7, sp, #0
 800af12:	60f8      	str	r0, [r7, #12]
 800af14:	60b9      	str	r1, [r7, #8]
 800af16:	607a      	str	r2, [r7, #4]
  return ConstRowXpr(derived(), i);
 800af18:	68b8      	ldr	r0, [r7, #8]
 800af1a:	f7fa f8ca 	bl	80050b2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800af1e:	4603      	mov	r3, r0
 800af20:	687a      	ldr	r2, [r7, #4]
 800af22:	4619      	mov	r1, r3
 800af24:	68f8      	ldr	r0, [r7, #12]
 800af26:	f000 fd6f 	bl	800ba08 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i>
}
 800af2a:	68f8      	ldr	r0, [r7, #12]
 800af2c:	3710      	adds	r7, #16
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}

0800af32 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 800af32:	b580      	push	{r7, lr}
 800af34:	b082      	sub	sp, #8
 800af36:	af00      	add	r7, sp, #0
 800af38:	6078      	str	r0, [r7, #4]
 800af3a:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 800af3c:	6838      	ldr	r0, [r7, #0]
 800af3e:	f000 fd8d 	bl	800ba5c <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE7derivedEv>
 800af42:	4603      	mov	r3, r0
 800af44:	4619      	mov	r1, r3
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 fdab 	bl	800baa2 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERS6_>
}
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	3708      	adds	r7, #8
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}

0800af54 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE3colEi>:
ConstColXpr col(Index i) const
 800af54:	b580      	push	{r7, lr}
 800af56:	b084      	sub	sp, #16
 800af58:	af00      	add	r7, sp, #0
 800af5a:	60f8      	str	r0, [r7, #12]
 800af5c:	60b9      	str	r1, [r7, #8]
 800af5e:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800af60:	68b8      	ldr	r0, [r7, #8]
 800af62:	f7fa fe16 	bl	8005b92 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800af66:	4603      	mov	r3, r0
 800af68:	687a      	ldr	r2, [r7, #4]
 800af6a:	4619      	mov	r1, r3
 800af6c:	68f8      	ldr	r0, [r7, #12]
 800af6e:	f000 fdaf 	bl	800bad0 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i>
}
 800af72:	68f8      	ldr	r0, [r7, #12]
 800af74:	3710      	adds	r7, #16
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}

0800af7a <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800af7a:	b5b0      	push	{r4, r5, r7, lr}
 800af7c:	b086      	sub	sp, #24
 800af7e:	af00      	add	r7, sp, #0
 800af80:	60f8      	str	r0, [r7, #12]
 800af82:	60b9      	str	r1, [r7, #8]
 800af84:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800af86:	68b8      	ldr	r0, [r7, #8]
 800af88:	f000 fdd4 	bl	800bb34 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE7derivedEv>
 800af8c:	4604      	mov	r4, r0
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f000 fddb 	bl	800bb4a <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE7derivedEv>
 800af94:	4605      	mov	r5, r0
 800af96:	f107 0314 	add.w	r3, r7, #20
 800af9a:	4618      	mov	r0, r3
 800af9c:	f7fa f8e8 	bl	8005170 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800afa0:	f107 0314 	add.w	r3, r7, #20
 800afa4:	462a      	mov	r2, r5
 800afa6:	4621      	mov	r1, r4
 800afa8:	68f8      	ldr	r0, [r7, #12]
 800afaa:	f000 fe21 	bl	800bbf0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_>
}
 800afae:	68f8      	ldr	r0, [r7, #12]
 800afb0:	3718      	adds	r7, #24
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bdb0      	pop	{r4, r5, r7, pc}

0800afb6 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800afb6:	b580      	push	{r7, lr}
 800afb8:	b082      	sub	sp, #8
 800afba:	af00      	add	r7, sp, #0
 800afbc:	6078      	str	r0, [r7, #4]
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f000 fe72 	bl	800bca8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800afc4:	4603      	mov	r3, r0
 800afc6:	4618      	mov	r0, r3
 800afc8:	f000 fe79 	bl	800bcbe <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE4rowsEv>
 800afcc:	4603      	mov	r3, r0
 800afce:	4618      	mov	r0, r3
 800afd0:	3708      	adds	r7, #8
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}

0800afd6 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 800afd6:	b590      	push	{r4, r7, lr}
 800afd8:	b085      	sub	sp, #20
 800afda:	af00      	add	r7, sp, #0
 800afdc:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f000 fe62 	bl	800bca8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800afe4:	4604      	mov	r4, r0
 800afe6:	f107 030c 	add.w	r3, r7, #12
 800afea:	4618      	mov	r0, r3
 800afec:	f7fa fbb7 	bl	800575e <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800aff0:	f107 030c 	add.w	r3, r7, #12
 800aff4:	4619      	mov	r1, r3
 800aff6:	4620      	mov	r0, r4
 800aff8:	f000 ff3c 	bl	800be74 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800affc:	eef0 7a40 	vmov.f32	s15, s0
 800b000:	bf00      	nop
}
 800b002:	eeb0 0a67 	vmov.f32	s0, s15
 800b006:	3714      	adds	r7, #20
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd90      	pop	{r4, r7, pc}

0800b00c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800b00c:	b480      	push	{r7}
 800b00e:	b083      	sub	sp, #12
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	bf00      	nop
 800b016:	370c      	adds	r7, #12
 800b018:	46bd      	mov	sp, r7
 800b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01e:	4770      	bx	lr

0800b020 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800b020:	b480      	push	{r7}
 800b022:	b083      	sub	sp, #12
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	4618      	mov	r0, r3
 800b02e:	370c      	adds	r7, #12
 800b030:	46bd      	mov	sp, r7
 800b032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b036:	4770      	bx	lr

0800b038 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800b038:	b480      	push	{r7}
 800b03a:	b083      	sub	sp, #12
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	3304      	adds	r3, #4
 800b044:	4618      	mov	r0, r3
 800b046:	370c      	adds	r7, #12
 800b048:	46bd      	mov	sp, r7
 800b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04e:	4770      	bx	lr

0800b050 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEC1Ev>:
 800b050:	b480      	push	{r7}
 800b052:	b083      	sub	sp, #12
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	4618      	mov	r0, r3
 800b05c:	370c      	adds	r7, #12
 800b05e:	46bd      	mov	sp, r7
 800b060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b064:	4770      	bx	lr

0800b066 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS_7ProductINS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEERKT_>:
    explicit Matrix(const T& x)
 800b066:	b580      	push	{r7, lr}
 800b068:	b082      	sub	sp, #8
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	6078      	str	r0, [r7, #4]
 800b06e:	6039      	str	r1, [r7, #0]
    {
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	4618      	mov	r0, r3
 800b074:	f7f9 fcfc 	bl	8004a70 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 800b078:	f7f9 fd0a 	bl	8004a90 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6839      	ldr	r1, [r7, #0]
 800b080:	4618      	mov	r0, r3
 800b082:	f000 ff3d 	bl	800bf00 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEESF_EEvRKNS_9DenseBaseIT0_EE>
    }
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	4618      	mov	r0, r3
 800b08a:	3708      	adds	r7, #8
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 800b090:	b5b0      	push	{r4, r5, r7, lr}
 800b092:	b084      	sub	sp, #16
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	689c      	ldr	r4, [r3, #8]
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	6839      	ldr	r1, [r7, #0]
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f7fd f9a8 	bl	80083fa <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 800b0aa:	4605      	mov	r5, r0
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	6839      	ldr	r1, [r7, #0]
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f000 ff31 	bl	800bf1a <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffE5coeffEi>
 800b0b8:	eef0 7a40 	vmov.f32	s15, s0
 800b0bc:	edc7 7a03 	vstr	s15, [r7, #12]
 800b0c0:	f107 030c 	add.w	r3, r7, #12
 800b0c4:	461a      	mov	r2, r3
 800b0c6:	4629      	mov	r1, r5
 800b0c8:	4620      	mov	r0, r4
 800b0ca:	f000 ff5f 	bl	800bf8c <_ZNK5Eigen8internal13add_assign_opIffE11assignCoeffERfRKf>
  }
 800b0ce:	bf00      	nop
 800b0d0:	3710      	adds	r7, #16
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bdb0      	pop	{r4, r5, r7, pc}

0800b0d6 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi1ELi3EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800b0d6:	b580      	push	{r7, lr}
 800b0d8:	b082      	sub	sp, #8
 800b0da:	af00      	add	r7, sp, #0
 800b0dc:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800b0de:	2101      	movs	r1, #1
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f7ff ffd5 	bl	800b090 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f000 ff67 	bl	800bfba <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi2ELi3EE3runERSL_>
  }
 800b0ec:	bf00      	nop
 800b0ee:	3708      	adds	r7, #8
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}

0800b0f4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800b0f4:	b5b0      	push	{r4, r5, r7, lr}
 800b0f6:	b084      	sub	sp, #16
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f7fa fa68 	bl	80055d4 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800b104:	4604      	mov	r4, r0
 800b106:	6838      	ldr	r0, [r7, #0]
 800b108:	f7fb f98e 	bl	8006428 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE7derivedEv>
 800b10c:	4605      	mov	r5, r0
 800b10e:	f107 030c 	add.w	r3, r7, #12
 800b112:	4618      	mov	r0, r3
 800b114:	f7fb fdbb 	bl	8006c8e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800b118:	f107 030c 	add.w	r3, r7, #12
 800b11c:	461a      	mov	r2, r3
 800b11e:	4629      	mov	r1, r5
 800b120:	4620      	mov	r0, r4
 800b122:	f000 ff59 	bl	800bfd8 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f7fa fa54 	bl	80055d4 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800b12c:	4603      	mov	r3, r0
    }
 800b12e:	4618      	mov	r0, r3
 800b130:	3710      	adds	r7, #16
 800b132:	46bd      	mov	sp, r7
 800b134:	bdb0      	pop	{r4, r5, r7, pc}

0800b136 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 800b136:	b580      	push	{r7, lr}
 800b138:	b0a4      	sub	sp, #144	; 0x90
 800b13a:	af00      	add	r7, sp, #0
 800b13c:	60f8      	str	r0, [r7, #12]
 800b13e:	60b9      	str	r1, [r7, #8]
 800b140:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800b142:	68f9      	ldr	r1, [r7, #12]
 800b144:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b148:	68ba      	ldr	r2, [r7, #8]
 800b14a:	4618      	mov	r0, r3
 800b14c:	f7ff fd0e 	bl	800ab6c <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 800b150:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b154:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b158:	4611      	mov	r1, r2
 800b15a:	4618      	mov	r0, r3
 800b15c:	f7ff fd19 	bl	800ab92 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800b164:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b168:	687a      	ldr	r2, [r7, #4]
 800b16a:	4618      	mov	r0, r3
 800b16c:	f000 ff45 	bl	800bffa <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3colEi>
 800b170:	f107 0314 	add.w	r3, r7, #20
 800b174:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800b178:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800b17c:	4618      	mov	r0, r3
 800b17e:	f000 ff4f 	bl	800c020 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IS5_Li3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>
 800b182:	f107 0314 	add.w	r3, r7, #20
 800b186:	4618      	mov	r0, r3
 800b188:	f000 ff78 	bl	800c07c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE3sumEv>
 800b18c:	eef0 7a40 	vmov.f32	s15, s0
  }
 800b190:	eeb0 0a67 	vmov.f32	s0, s15
 800b194:	3790      	adds	r7, #144	; 0x90
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}

0800b19a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800b19a:	b580      	push	{r7, lr}
 800b19c:	b082      	sub	sp, #8
 800b19e:	af00      	add	r7, sp, #0
 800b1a0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	2101      	movs	r1, #1
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f7ff f934 	bl	800a414 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f000 ff80 	bl	800c0b2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSL_>
  }
 800b1b2:	bf00      	nop
 800b1b4:	3708      	adds	r7, #8
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}

0800b1ba <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800b1ba:	b480      	push	{r7}
 800b1bc:	b083      	sub	sp, #12
 800b1be:	af00      	add	r7, sp, #0
 800b1c0:	6078      	str	r0, [r7, #4]
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	330c      	adds	r3, #12
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	370c      	adds	r7, #12
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d0:	4770      	bx	lr

0800b1d2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800b1d2:	b480      	push	{r7}
 800b1d4:	b083      	sub	sp, #12
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	6078      	str	r0, [r7, #4]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	4618      	mov	r0, r3
 800b1e0:	370c      	adds	r7, #12
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e8:	4770      	bx	lr

0800b1ea <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800b1ea:	b480      	push	{r7}
 800b1ec:	b083      	sub	sp, #12
 800b1ee:	af00      	add	r7, sp, #0
 800b1f0:	6078      	str	r0, [r7, #4]
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	3304      	adds	r3, #4
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	370c      	adds	r7, #12
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b200:	4770      	bx	lr

0800b202 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS4_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800b202:	b580      	push	{r7, lr}
 800b204:	b082      	sub	sp, #8
 800b206:	af00      	add	r7, sp, #0
 800b208:	6078      	str	r0, [r7, #4]
 800b20a:	6039      	str	r1, [r7, #0]
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6839      	ldr	r1, [r7, #0]
 800b210:	4618      	mov	r0, r3
 800b212:	f7fb fa58 	bl	80066c6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	4618      	mov	r0, r3
 800b21a:	3708      	adds	r7, #8
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}

0800b220 <_ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERS9_>:
 800b220:	b580      	push	{r7, lr}
 800b222:	b082      	sub	sp, #8
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
 800b228:	6039      	str	r1, [r7, #0]
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6839      	ldr	r1, [r7, #0]
 800b22e:	4618      	mov	r0, r3
 800b230:	f000 ff4f 	bl	800c0d2 <_ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS8_>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	4618      	mov	r0, r3
 800b238:	3708      	adds	r7, #8
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}

0800b23e <_ZN5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERKSF_>:
    typedef typename internal::ref_selector<XprType>::non_const_type XprTypeNested;
  public:

    typedef typename internal::dense_xpr_base<BlockType>::type Base;
    EIGEN_DENSE_PUBLIC_INTERFACE(BlockType)
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(BlockImpl_dense)
 800b23e:	b580      	push	{r7, lr}
 800b240:	b082      	sub	sp, #8
 800b242:	af00      	add	r7, sp, #0
 800b244:	6078      	str	r0, [r7, #4]
 800b246:	6039      	str	r1, [r7, #0]
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	683a      	ldr	r2, [r7, #0]
 800b24c:	4611      	mov	r1, r2
 800b24e:	4618      	mov	r0, r3
 800b250:	f7f9 f8aa 	bl	80043a8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	3310      	adds	r3, #16
 800b258:	683a      	ldr	r2, [r7, #0]
 800b25a:	6912      	ldr	r2, [r2, #16]
 800b25c:	601a      	str	r2, [r3, #0]
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	4618      	mov	r0, r3
 800b262:	3708      	adds	r7, #8
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <_ZN5Eigen9BlockImplIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ENS_5DenseEEC1ERKSG_>:
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(BlockImpl)
 800b268:	b580      	push	{r7, lr}
 800b26a:	b082      	sub	sp, #8
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	6039      	str	r1, [r7, #0]
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	683a      	ldr	r2, [r7, #0]
 800b276:	4611      	mov	r1, r2
 800b278:	4618      	mov	r0, r3
 800b27a:	f7ff ffe0 	bl	800b23e <_ZN5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERKSF_>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	4618      	mov	r0, r3
 800b282:	3708      	adds	r7, #8
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}

0800b288 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERKSF_>:
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(Block)
 800b288:	b580      	push	{r7, lr}
 800b28a:	b082      	sub	sp, #8
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
 800b290:	6039      	str	r1, [r7, #0]
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	683a      	ldr	r2, [r7, #0]
 800b296:	4611      	mov	r1, r2
 800b298:	4618      	mov	r0, r3
 800b29a:	f7ff ffe5 	bl	800b268 <_ZN5Eigen9BlockImplIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ENS_5DenseEEC1ERKSG_>
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	3708      	adds	r7, #8
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd80      	pop	{r7, pc}

0800b2a8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE3rowEi>:
ConstRowXpr row(Index i) const
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b084      	sub	sp, #16
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	60f8      	str	r0, [r7, #12]
 800b2b0:	60b9      	str	r1, [r7, #8]
 800b2b2:	607a      	str	r2, [r7, #4]
  return ConstRowXpr(derived(), i);
 800b2b4:	68b8      	ldr	r0, [r7, #8]
 800b2b6:	f7fa f824 	bl	8005302 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE7derivedEv>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	687a      	ldr	r2, [r7, #4]
 800b2be:	4619      	mov	r1, r3
 800b2c0:	68f8      	ldr	r0, [r7, #12]
 800b2c2:	f000 ff1d 	bl	800c100 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i>
}
 800b2c6:	68f8      	ldr	r0, [r7, #12]
 800b2c8:	3710      	adds	r7, #16
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}

0800b2ce <_ZN5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERKSI_>:
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(Transpose)
 800b2ce:	b580      	push	{r7, lr}
 800b2d0:	b082      	sub	sp, #8
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	6078      	str	r0, [r7, #4]
 800b2d6:	6039      	str	r1, [r7, #0]
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	683a      	ldr	r2, [r7, #0]
 800b2dc:	4611      	mov	r1, r2
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f7ff ffd2 	bl	800b288 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERKSF_>
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3708      	adds	r7, #8
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}

0800b2ee <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 800b2ee:	b580      	push	{r7, lr}
 800b2f0:	b082      	sub	sp, #8
 800b2f2:	af00      	add	r7, sp, #0
 800b2f4:	6078      	str	r0, [r7, #4]
 800b2f6:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 800b2f8:	6838      	ldr	r0, [r7, #0]
 800b2fa:	f000 ff29 	bl	800c150 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE7derivedEv>
 800b2fe:	4603      	mov	r3, r0
 800b300:	4619      	mov	r1, r3
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f000 ff47 	bl	800c196 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERSH_>
}
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	3708      	adds	r7, #8
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE3colEi>:
ConstColXpr col(Index i) const
 800b310:	b580      	push	{r7, lr}
 800b312:	b084      	sub	sp, #16
 800b314:	af00      	add	r7, sp, #0
 800b316:	60f8      	str	r0, [r7, #12]
 800b318:	60b9      	str	r1, [r7, #8]
 800b31a:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800b31c:	68b8      	ldr	r0, [r7, #8]
 800b31e:	f7f9 fffb 	bl	8005318 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800b322:	4603      	mov	r3, r0
 800b324:	687a      	ldr	r2, [r7, #4]
 800b326:	4619      	mov	r1, r3
 800b328:	68f8      	ldr	r0, [r7, #12]
 800b32a:	f000 ff47 	bl	800c1bc <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i>
}
 800b32e:	68f8      	ldr	r0, [r7, #12]
 800b330:	3710      	adds	r7, #16
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}

0800b336 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS1_IS8_EELi1ELi1ELb0EEEEEKNS3_INS5_IfNS4_6traitsIT_E6ScalarEEEKSJ_KSQ_EERKNS0_ISQ_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800b336:	b5b0      	push	{r4, r5, r7, lr}
 800b338:	b086      	sub	sp, #24
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	60f8      	str	r0, [r7, #12]
 800b33e:	60b9      	str	r1, [r7, #8]
 800b340:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800b342:	68b8      	ldr	r0, [r7, #8]
 800b344:	f000 ff62 	bl	800c20c <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEE7derivedEv>
 800b348:	4604      	mov	r4, r0
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f000 ff69 	bl	800c222 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEE7derivedEv>
 800b350:	4605      	mov	r5, r0
 800b352:	f107 0314 	add.w	r3, r7, #20
 800b356:	4618      	mov	r0, r3
 800b358:	f7f9 ff0a 	bl	8005170 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800b35c:	f107 0314 	add.w	r3, r7, #20
 800b360:	462a      	mov	r2, r5
 800b362:	4621      	mov	r1, r4
 800b364:	68f8      	ldr	r0, [r7, #12]
 800b366:	f000 ffaf 	bl	800c2c8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_>
}
 800b36a:	68f8      	ldr	r0, [r7, #12]
 800b36c:	3718      	adds	r7, #24
 800b36e:	46bd      	mov	sp, r7
 800b370:	bdb0      	pop	{r4, r5, r7, pc}

0800b372 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE4rowsEv>:
 800b372:	b580      	push	{r7, lr}
 800b374:	b082      	sub	sp, #8
 800b376:	af00      	add	r7, sp, #0
 800b378:	6078      	str	r0, [r7, #4]
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f000 fffe 	bl	800c37c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800b380:	4603      	mov	r3, r0
 800b382:	4618      	mov	r0, r3
 800b384:	f001 f805 	bl	800c392 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE4rowsEv>
 800b388:	4603      	mov	r3, r0
 800b38a:	4618      	mov	r0, r3
 800b38c:	3708      	adds	r7, #8
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}

0800b392 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 800b392:	b590      	push	{r4, r7, lr}
 800b394:	b085      	sub	sp, #20
 800b396:	af00      	add	r7, sp, #0
 800b398:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f000 ffee 	bl	800c37c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800b3a0:	4604      	mov	r4, r0
 800b3a2:	f107 030c 	add.w	r3, r7, #12
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f7fa f9d9 	bl	800575e <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800b3ac:	f107 030c 	add.w	r3, r7, #12
 800b3b0:	4619      	mov	r1, r3
 800b3b2:	4620      	mov	r0, r4
 800b3b4:	f001 f8da 	bl	800c56c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800b3b8:	eef0 7a40 	vmov.f32	s15, s0
 800b3bc:	bf00      	nop
}
 800b3be:	eeb0 0a67 	vmov.f32	s0, s15
 800b3c2:	3714      	adds	r7, #20
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd90      	pop	{r4, r7, pc}

0800b3c8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b082      	sub	sp, #8
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800b3d0:	2201      	movs	r2, #1
 800b3d2:	2101      	movs	r1, #1
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f7fe fd56 	bl	8009e86 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f001 f90c 	bl	800c5f8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSP_>
  }
 800b3e0:	bf00      	nop
 800b3e2:	3708      	adds	r7, #8
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}

0800b3e8 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b084      	sub	sp, #16
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	60f8      	str	r0, [r7, #12]
 800b3f0:	60b9      	str	r1, [r7, #8]
 800b3f2:	607a      	str	r2, [r7, #4]
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	687a      	ldr	r2, [r7, #4]
 800b3f8:	68b9      	ldr	r1, [r7, #8]
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f001 f90c 	bl	800c618 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2b00      	cmp	r3, #0
 800b404:	db07      	blt.n	800b416 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x2e>
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	4618      	mov	r0, r3
 800b40a:	f7f9 fc10 	bl	8004c2e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800b40e:	4602      	mov	r2, r0
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	4293      	cmp	r3, r2
 800b414:	db05      	blt.n	800b422 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x3a>
 800b416:	4b06      	ldr	r3, [pc, #24]	; (800b430 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x48>)
 800b418:	4a06      	ldr	r2, [pc, #24]	; (800b434 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x4c>)
 800b41a:	2178      	movs	r1, #120	; 0x78
 800b41c:	4806      	ldr	r0, [pc, #24]	; (800b438 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x50>)
 800b41e:	f012 fb1d 	bl	801da5c <__assert_func>
 800b422:	bf00      	nop
    }
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	4618      	mov	r0, r3
 800b428:	3710      	adds	r7, #16
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}
 800b42e:	bf00      	nop
 800b430:	08024448 	.word	0x08024448
 800b434:	080244f0 	.word	0x080244f0
 800b438:	080245cc 	.word	0x080245cc

0800b43c <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800b43c:	b480      	push	{r7}
 800b43e:	b083      	sub	sp, #12
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	4618      	mov	r0, r3
 800b448:	370c      	adds	r7, #12
 800b44a:	46bd      	mov	sp, r7
 800b44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b450:	4770      	bx	lr

0800b452 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>:
 800b452:	b580      	push	{r7, lr}
 800b454:	b082      	sub	sp, #8
 800b456:	af00      	add	r7, sp, #0
 800b458:	6078      	str	r0, [r7, #4]
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f001 f8ed 	bl	800c63a <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	4618      	mov	r0, r3
 800b464:	3708      	adds	r7, #8
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}

0800b46a <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 800b46a:	b580      	push	{r7, lr}
 800b46c:	b082      	sub	sp, #8
 800b46e:	af00      	add	r7, sp, #0
 800b470:	6078      	str	r0, [r7, #4]
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f7ff ffed 	bl	800b452 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	4618      	mov	r0, r3
 800b47c:	3708      	adds	r7, #8
 800b47e:	46bd      	mov	sp, r7
 800b480:	bd80      	pop	{r7, pc}

0800b482 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS6_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 800b482:	b5b0      	push	{r4, r5, r7, lr}
 800b484:	b082      	sub	sp, #8
 800b486:	af00      	add	r7, sp, #0
 800b488:	6078      	str	r0, [r7, #4]
 800b48a:	6039      	str	r1, [r7, #0]
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f7ff ffec 	bl	800b46a <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS_5DenseEEC1Ev>
 800b492:	687a      	ldr	r2, [r7, #4]
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	4614      	mov	r4, r2
 800b498:	461d      	mov	r5, r3
 800b49a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b49c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b49e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b4a2:	e884 0003 	stmia.w	r4, {r0, r1}
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	3708      	adds	r7, #8
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bdb0      	pop	{r4, r5, r7, pc}

0800b4b0 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b084      	sub	sp, #16
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	60f8      	str	r0, [r7, #12]
 800b4b8:	60b9      	str	r1, [r7, #8]
 800b4ba:	607a      	str	r2, [r7, #4]
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	687a      	ldr	r2, [r7, #4]
 800b4c0:	68b9      	ldr	r1, [r7, #8]
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f001 f8c4 	bl	800c650 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	db07      	blt.n	800b4de <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x2e>
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f7f9 fc47 	bl	8004d64 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800b4d6:	4602      	mov	r2, r0
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	db05      	blt.n	800b4ea <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x3a>
 800b4de:	4b05      	ldr	r3, [pc, #20]	; (800b4f4 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x44>)
 800b4e0:	4a05      	ldr	r2, [pc, #20]	; (800b4f8 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x48>)
 800b4e2:	2178      	movs	r1, #120	; 0x78
 800b4e4:	4805      	ldr	r0, [pc, #20]	; (800b4fc <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x4c>)
 800b4e6:	f012 fab9 	bl	801da5c <__assert_func>
    }
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3710      	adds	r7, #16
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}
 800b4f4:	08024448 	.word	0x08024448
 800b4f8:	08024620 	.word	0x08024620
 800b4fc:	080245cc 	.word	0x080245cc

0800b500 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>:
 800b500:	b480      	push	{r7}
 800b502:	b083      	sub	sp, #12
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	4618      	mov	r0, r3
 800b50c:	370c      	adds	r7, #12
 800b50e:	46bd      	mov	sp, r7
 800b510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b514:	4770      	bx	lr

0800b516 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE7derivedEv>:
 800b516:	b480      	push	{r7}
 800b518:	b083      	sub	sp, #12
 800b51a:	af00      	add	r7, sp, #0
 800b51c:	6078      	str	r0, [r7, #4]
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	4618      	mov	r0, r3
 800b522:	370c      	adds	r7, #12
 800b524:	46bd      	mov	sp, r7
 800b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52a:	4770      	bx	lr

0800b52c <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>:
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b082      	sub	sp, #8
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f001 f89c 	bl	800c672 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	4618      	mov	r0, r3
 800b53e:	3708      	adds	r7, #8
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}

0800b544 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800b544:	b580      	push	{r7, lr}
 800b546:	b082      	sub	sp, #8
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f7ff ffed 	bl	800b52c <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	4618      	mov	r0, r3
 800b556:	3708      	adds	r7, #8
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}

0800b55c <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b082      	sub	sp, #8
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	4618      	mov	r0, r3
 800b568:	f001 f88e 	bl	800c688 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4colsEv>
 800b56c:	4603      	mov	r3, r0
 800b56e:	4618      	mov	r0, r3
 800b570:	3708      	adds	r7, #8
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}

0800b576 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 800b576:	b580      	push	{r7, lr}
 800b578:	b082      	sub	sp, #8
 800b57a:	af00      	add	r7, sp, #0
 800b57c:	6078      	str	r0, [r7, #4]
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	4618      	mov	r0, r3
 800b582:	f001 f88c 	bl	800c69e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4rowsEv>
 800b586:	4603      	mov	r3, r0
 800b588:	4618      	mov	r0, r3
 800b58a:	3708      	adds	r7, #8
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}

0800b590 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4rowsEv>:

    typedef typename Base::CoeffReturnType CoeffReturnType;

    /** \copydoc DenseBase::rows() */
    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800b590:	b580      	push	{r7, lr}
 800b592:	b082      	sub	sp, #8
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	f7fb f913 	bl	80067c2 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800b59c:	4603      	mov	r3, r0
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3708      	adds	r7, #8
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}

0800b5a6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4colsEv>:
    /** \copydoc DenseBase::cols() */
    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800b5a6:	b580      	push	{r7, lr}
 800b5a8:	b082      	sub	sp, #8
 800b5aa:	af00      	add	r7, sp, #0
 800b5ac:	6078      	str	r0, [r7, #4]
 800b5ae:	f7fb f910 	bl	80067d2 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	3708      	adds	r7, #8
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}

0800b5bc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800b5bc:	b5b0      	push	{r4, r5, r7, lr}
 800b5be:	b084      	sub	sp, #16
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	60f8      	str	r0, [r7, #12]
 800b5c4:	60b9      	str	r1, [r7, #8]
 800b5c6:	607a      	str	r2, [r7, #4]
 800b5c8:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800b5ca:	68f8      	ldr	r0, [r7, #12]
 800b5cc:	f7ff ffba 	bl	800b544 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEENS_5DenseEEC1Ev>
 800b5d0:	68fa      	ldr	r2, [r7, #12]
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	4614      	mov	r4, r2
 800b5d6:	461d      	mov	r5, r3
 800b5d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b5da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b5dc:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b5e0:	e884 0003 	stmia.w	r4, {r0, r1}
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	f103 0218 	add.w	r2, r3, #24
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	4614      	mov	r4, r2
 800b5ee:	461d      	mov	r5, r3
 800b5f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b5f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b5f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b5f8:	e884 0003 	stmia.w	r4, {r0, r1}
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	3330      	adds	r3, #48	; 0x30
 800b600:	6839      	ldr	r1, [r7, #0]
 800b602:	4618      	mov	r0, r3
 800b604:	f7f9 fe3e 	bl	8005284 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800b608:	68b8      	ldr	r0, [r7, #8]
 800b60a:	f7ff ffa7 	bl	800b55c <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800b60e:	4604      	mov	r4, r0
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	4618      	mov	r0, r3
 800b614:	f7ff ffbc 	bl	800b590 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4rowsEv>
 800b618:	4603      	mov	r3, r0
 800b61a:	429c      	cmp	r4, r3
 800b61c:	d10a      	bne.n	800b634 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x78>
 800b61e:	68b8      	ldr	r0, [r7, #8]
 800b620:	f7ff ffa9 	bl	800b576 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800b624:	4604      	mov	r4, r0
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	4618      	mov	r0, r3
 800b62a:	f7ff ffbc 	bl	800b5a6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4colsEv>
 800b62e:	4603      	mov	r3, r0
 800b630:	429c      	cmp	r4, r3
 800b632:	d005      	beq.n	800b640 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x84>
 800b634:	4b05      	ldr	r3, [pc, #20]	; (800b64c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x90>)
 800b636:	4a06      	ldr	r2, [pc, #24]	; (800b650 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x94>)
 800b638:	2174      	movs	r1, #116	; 0x74
 800b63a:	4806      	ldr	r0, [pc, #24]	; (800b654 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x98>)
 800b63c:	f012 fa0e 	bl	801da5c <__assert_func>
    }
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	4618      	mov	r0, r3
 800b644:	3710      	adds	r7, #16
 800b646:	46bd      	mov	sp, r7
 800b648:	bdb0      	pop	{r4, r5, r7, pc}
 800b64a:	bf00      	nop
 800b64c:	0801f8c4 	.word	0x0801f8c4
 800b650:	080246fc 	.word	0x080246fc
 800b654:	0801fb28 	.word	0x0801fb28

0800b658 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800b658:	b580      	push	{r7, lr}
 800b65a:	b082      	sub	sp, #8
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f000 f809 	bl	800b678 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800b666:	4603      	mov	r3, r0
 800b668:	4618      	mov	r0, r3
 800b66a:	f001 f823 	bl	800c6b4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE4colsEv>
 800b66e:	4603      	mov	r3, r0
 800b670:	4618      	mov	r0, r3
 800b672:	3708      	adds	r7, #8
 800b674:	46bd      	mov	sp, r7
 800b676:	bd80      	pop	{r7, pc}

0800b678 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800b678:	b480      	push	{r7}
 800b67a:	b083      	sub	sp, #12
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	4618      	mov	r0, r3
 800b684:	370c      	adds	r7, #12
 800b686:	46bd      	mov	sp, r7
 800b688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68c:	4770      	bx	lr

0800b68e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800b68e:	b580      	push	{r7, lr}
 800b690:	b082      	sub	sp, #8
 800b692:	af00      	add	r7, sp, #0
 800b694:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	4618      	mov	r0, r3
 800b69a:	f7ff ff5f 	bl	800b55c <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800b69e:	4603      	mov	r3, r0
    }
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	3708      	adds	r7, #8
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}

0800b6a8 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
// but that might complicate template specialization
template<typename Derived, typename PlainObjectType>
struct mapbase_evaluator;

template<typename Derived, typename PlainObjectType>
struct mapbase_evaluator : evaluator_base<Derived>
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b082      	sub	sp, #8
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f001 f831 	bl	800c718 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	3708      	adds	r7, #8
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd80      	pop	{r7, pc}

0800b6c0 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EED1Ev>:

// TODO: This evaluator does not actually use the child evaluator;
// all action is via the data() as returned by the Block expression.

template<typename ArgType, int BlockRows, int BlockCols, bool InnerPanel>
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b082      	sub	sp, #8
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f7ff ffec 	bl	800b6a8 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3708      	adds	r7, #8
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}

0800b6da <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800b6da:	b580      	push	{r7, lr}
 800b6dc:	b082      	sub	sp, #8
 800b6de:	af00      	add	r7, sp, #0
 800b6e0:	6078      	str	r0, [r7, #4]
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f7ff ffeb 	bl	800b6c0 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EED1Ev>
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	3708      	adds	r7, #8
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}

0800b6f4 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>:
struct evaluator<const T>
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b082      	sub	sp, #8
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	4618      	mov	r0, r3
 800b700:	f7ff ffeb 	bl	800b6da <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	4618      	mov	r0, r3
 800b708:	3708      	adds	r7, #8
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}

0800b70e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800b70e:	b580      	push	{r7, lr}
 800b710:	b082      	sub	sp, #8
 800b712:	af00      	add	r7, sp, #0
 800b714:	6078      	str	r0, [r7, #4]
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	4618      	mov	r0, r3
 800b71a:	f7ff ffeb 	bl	800b6f4 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f000 ffef 	bl	800c702 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	4618      	mov	r0, r3
 800b728:	3708      	adds	r7, #8
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}

0800b72e <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800b72e:	b580      	push	{r7, lr}
 800b730:	b082      	sub	sp, #8
 800b732:	af00      	add	r7, sp, #0
 800b734:	6078      	str	r0, [r7, #4]
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	4618      	mov	r0, r3
 800b73a:	f7ff ffe8 	bl	800b70e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfED1Ev>
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	4618      	mov	r0, r3
 800b742:	3708      	adds	r7, #8
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}

0800b748 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>:
struct evaluator<const T>
 800b748:	b580      	push	{r7, lr}
 800b74a:	b082      	sub	sp, #8
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	4618      	mov	r0, r3
 800b754:	f7ff ffeb 	bl	800b72e <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	4618      	mov	r0, r3
 800b75c:	3708      	adds	r7, #8
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}

0800b762 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_ED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800b762:	b580      	push	{r7, lr}
 800b764:	b082      	sub	sp, #8
 800b766:	af00      	add	r7, sp, #0
 800b768:	6078      	str	r0, [r7, #4]
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f000 ffdf 	bl	800c72e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	4618      	mov	r0, r3
 800b774:	3708      	adds	r7, #8
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}

0800b77a <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800b77a:	b580      	push	{r7, lr}
 800b77c:	b082      	sub	sp, #8
 800b77e:	af00      	add	r7, sp, #0
 800b780:	6078      	str	r0, [r7, #4]
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	4618      	mov	r0, r3
 800b786:	f7ff ffec 	bl	800b762 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_ED1Ev>
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	4618      	mov	r0, r3
 800b78e:	3708      	adds	r7, #8
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}

0800b794 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800b794:	b580      	push	{r7, lr}
 800b796:	b082      	sub	sp, #8
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f7ff ffeb 	bl	800b77a <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EED1Ev>
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	3708      	adds	r7, #8
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}

0800b7ae <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<const T>
 800b7ae:	b580      	push	{r7, lr}
 800b7b0:	b082      	sub	sp, #8
 800b7b2:	af00      	add	r7, sp, #0
 800b7b4:	6078      	str	r0, [r7, #4]
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f7ff ffeb 	bl	800b794 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	3708      	adds	r7, #8
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}

0800b7c8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b082      	sub	sp, #8
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	330c      	adds	r3, #12
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f7ff ffea 	bl	800b7ae <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	3304      	adds	r3, #4
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f7ff ffb2 	bl	800b748 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3708      	adds	r7, #8
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}

0800b7ee <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800b7ee:	b580      	push	{r7, lr}
 800b7f0:	b082      	sub	sp, #8
 800b7f2:	af00      	add	r7, sp, #0
 800b7f4:	6078      	str	r0, [r7, #4]
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	f7ff ffe5 	bl	800b7c8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f000 ff74 	bl	800c6ec <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	4618      	mov	r0, r3
 800b808:	3708      	adds	r7, #8
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}

0800b80e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800b80e:	b580      	push	{r7, lr}
 800b810:	b082      	sub	sp, #8
 800b812:	af00      	add	r7, sp, #0
 800b814:	6078      	str	r0, [r7, #4]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	4618      	mov	r0, r3
 800b81a:	f7ff ffe8 	bl	800b7ee <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	4618      	mov	r0, r3
 800b822:	3708      	adds	r7, #8
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}

0800b828 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800b828:	b580      	push	{r7, lr}
 800b82a:	b082      	sub	sp, #8
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	4618      	mov	r0, r3
 800b834:	f7ff ffeb 	bl	800b80e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	4618      	mov	r0, r3
 800b83c:	3708      	adds	r7, #8
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}
	...

0800b844 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800b844:	b580      	push	{r7, lr}
 800b846:	ed2d 8b02 	vpush	{d8}
 800b84a:	b088      	sub	sp, #32
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800b852:	6878      	ldr	r0, [r7, #4]
 800b854:	f7ff f9df 	bl	800ac16 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE4rowsEv>
 800b858:	4603      	mov	r3, r0
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	dd05      	ble.n	800b86a <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f7ff fefa 	bl	800b658 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE4colsEv>
 800b864:	4603      	mov	r3, r0
 800b866:	2b00      	cmp	r3, #0
 800b868:	dc06      	bgt.n	800b878 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800b86a:	4b16      	ldr	r3, [pc, #88]	; (800b8c4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800b86c:	4a16      	ldr	r2, [pc, #88]	; (800b8c8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800b86e:	f240 119b 	movw	r1, #411	; 0x19b
 800b872:	4816      	ldr	r0, [pc, #88]	; (800b8cc <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800b874:	f012 f8f2 	bl	801da5c <__assert_func>
 800b878:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f7ff fefc 	bl	800b678 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800b880:	4602      	mov	r2, r0
 800b882:	f107 030c 	add.w	r3, r7, #12
 800b886:	4611      	mov	r1, r2
 800b888:	4618      	mov	r0, r3
 800b88a:	f000 ff20 	bl	800c6ce <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f7ff fef2 	bl	800b678 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800b894:	4602      	mov	r2, r0
 800b896:	f107 030c 	add.w	r3, r7, #12
 800b89a:	6839      	ldr	r1, [r7, #0]
 800b89c:	4618      	mov	r0, r3
 800b89e:	f000 ff51 	bl	800c744 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 800b8a2:	eeb0 8a40 	vmov.f32	s16, s0
 800b8a6:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800b8a8:	f107 030c 	add.w	r3, r7, #12
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f7ff ffbb 	bl	800b828 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800b8b2:	eef0 7a48 	vmov.f32	s15, s16
}
 800b8b6:	eeb0 0a67 	vmov.f32	s0, s15
 800b8ba:	3720      	adds	r7, #32
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	ecbd 8b02 	vpop	{d8}
 800b8c2:	bd80      	pop	{r7, pc}
 800b8c4:	08024944 	.word	0x08024944
 800b8c8:	08024988 	.word	0x08024988
 800b8cc:	08024b50 	.word	0x08024b50

0800b8d0 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b082      	sub	sp, #8
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f7fe feb4 	bl	800a646 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE7derivedEv>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f7fe fedd 	bl	800a6a0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	3708      	adds	r7, #8
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}

0800b8f0 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>:
  explicit product_evaluator(const XprType& xpr)
 800b8f0:	b590      	push	{r4, r7, lr}
 800b8f2:	b083      	sub	sp, #12
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
 800b8f8:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f000 ff4a 	bl	800c794 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEEC1Ev>
 800b900:	687c      	ldr	r4, [r7, #4]
    : m_lhs(xpr.lhs()),
 800b902:	6838      	ldr	r0, [r7, #0]
 800b904:	f000 ff2f 	bl	800c766 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3lhsEv>
 800b908:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 800b90a:	4619      	mov	r1, r3
 800b90c:	4620      	mov	r0, r4
 800b90e:	f000 ff4c 	bl	800c7aa <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductIS1_S1_Li0EEEEERKT_>
      m_rhs(xpr.rhs()),
 800b912:	6838      	ldr	r0, [r7, #0]
 800b914:	f000 ff32 	bl	800c77c <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3rhsEv>
 800b918:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	3324      	adds	r3, #36	; 0x24
 800b91e:	6812      	ldr	r2, [r2, #0]
 800b920:	601a      	str	r2, [r3, #0]
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	3328      	adds	r3, #40	; 0x28
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 800b926:	687a      	ldr	r2, [r7, #4]
      m_innerDim(xpr.lhs().cols())
 800b928:	4611      	mov	r1, r2
 800b92a:	4618      	mov	r0, r3
 800b92c:	f7fb fe16 	bl	800755c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f103 022c 	add.w	r2, r3, #44	; 0x2c
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	3324      	adds	r3, #36	; 0x24
      m_innerDim(xpr.lhs().cols())
 800b93a:	4619      	mov	r1, r3
 800b93c:	4610      	mov	r0, r2
 800b93e:	f000 ff49 	bl	800c7d4 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1ERKS5_>
 800b942:	6838      	ldr	r0, [r7, #0]
 800b944:	f000 ff0f 	bl	800c766 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3lhsEv>
 800b948:	4603      	mov	r3, r0
 800b94a:	4618      	mov	r0, r3
 800b94c:	f7f9 feaf 	bl	80056ae <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>
 800b950:	4602      	mov	r2, r0
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	631a      	str	r2, [r3, #48]	; 0x30
  }
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	4618      	mov	r0, r3
 800b95a:	370c      	adds	r7, #12
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd90      	pop	{r4, r7, pc}

0800b960 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800b960:	b580      	push	{r7, lr}
 800b962:	b082      	sub	sp, #8
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800b968:	2200      	movs	r2, #0
 800b96a:	2100      	movs	r1, #0
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	f000 ff40 	bl	800c7f2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f000 ff56 	bl	800c824 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSG_>
  }
 800b978:	bf00      	nop
 800b97a:	3708      	adds	r7, #8
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bd80      	pop	{r7, pc}

0800b980 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800b980:	b580      	push	{r7, lr}
 800b982:	b086      	sub	sp, #24
 800b984:	af00      	add	r7, sp, #0
 800b986:	60f8      	str	r0, [r7, #12]
 800b988:	60b9      	str	r1, [r7, #8]
 800b98a:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800b990:	687a      	ldr	r2, [r7, #4]
 800b992:	68b9      	ldr	r1, [r7, #8]
 800b994:	6978      	ldr	r0, [r7, #20]
 800b996:	f000 ff55 	bl	800c844 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>
}
 800b99a:	bf00      	nop
 800b99c:	3718      	adds	r7, #24
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}

0800b9a2 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>:
  Derived& derived() { return *static_cast<Derived*>(this); }
 800b9a2:	b480      	push	{r7}
 800b9a4:	b083      	sub	sp, #12
 800b9a6:	af00      	add	r7, sp, #0
 800b9a8:	6078      	str	r0, [r7, #4]
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	370c      	adds	r7, #12
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b6:	4770      	bx	lr

0800b9b8 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b086      	sub	sp, #24
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	60f8      	str	r0, [r7, #12]
 800b9c0:	60b9      	str	r1, [r7, #8]
 800b9c2:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800b9c8:	687a      	ldr	r2, [r7, #4]
 800b9ca:	68b9      	ldr	r1, [r7, #8]
 800b9cc:	6978      	ldr	r0, [r7, #20]
 800b9ce:	f000 ff73 	bl	800c8b8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>
}
 800b9d2:	bf00      	nop
 800b9d4:	3718      	adds	r7, #24
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}

0800b9da <_ZNK5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 800b9da:	b480      	push	{r7}
 800b9dc:	b083      	sub	sp, #12
 800b9de:	af00      	add	r7, sp, #0
 800b9e0:	6078      	str	r0, [r7, #4]
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	370c      	adds	r7, #12
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ee:	4770      	bx	lr

0800b9f0 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11outerStrideEv>:
    inline Index outerStride() const EIGEN_NOEXCEPT { return this->innerSize(); }
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b082      	sub	sp, #8
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f000 ff9c 	bl	800c936 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE9innerSizeEv>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	4618      	mov	r0, r3
 800ba02:	3708      	adds	r7, #8
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}

0800ba08 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b084      	sub	sp, #16
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	60f8      	str	r0, [r7, #12]
 800ba10:	60b9      	str	r1, [r7, #8]
 800ba12:	607a      	str	r2, [r7, #4]
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	687a      	ldr	r2, [r7, #4]
 800ba18:	68b9      	ldr	r1, [r7, #8]
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f000 ff97 	bl	800c94e <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	db07      	blt.n	800ba36 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x2e>
 800ba26:	68bb      	ldr	r3, [r7, #8]
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f7f9 f9a6 	bl	8004d7a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800ba2e:	4602      	mov	r2, r0
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	4293      	cmp	r3, r2
 800ba34:	db05      	blt.n	800ba42 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x3a>
 800ba36:	4b06      	ldr	r3, [pc, #24]	; (800ba50 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x48>)
 800ba38:	4a06      	ldr	r2, [pc, #24]	; (800ba54 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x4c>)
 800ba3a:	2178      	movs	r1, #120	; 0x78
 800ba3c:	4806      	ldr	r0, [pc, #24]	; (800ba58 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x50>)
 800ba3e:	f012 f80d 	bl	801da5c <__assert_func>
 800ba42:	bf00      	nop
    }
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	4618      	mov	r0, r3
 800ba48:	3710      	adds	r7, #16
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
 800ba4e:	bf00      	nop
 800ba50:	08024448 	.word	0x08024448
 800ba54:	08024ba4 	.word	0x08024ba4
 800ba58:	080245cc 	.word	0x080245cc

0800ba5c <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800ba5c:	b480      	push	{r7}
 800ba5e:	b083      	sub	sp, #12
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	4618      	mov	r0, r3
 800ba68:	370c      	adds	r7, #12
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba70:	4770      	bx	lr

0800ba72 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>:
 800ba72:	b580      	push	{r7, lr}
 800ba74:	b082      	sub	sp, #8
 800ba76:	af00      	add	r7, sp, #0
 800ba78:	6078      	str	r0, [r7, #4]
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f000 ff78 	bl	800c970 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	4618      	mov	r0, r3
 800ba84:	3708      	adds	r7, #8
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}

0800ba8a <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 800ba8a:	b580      	push	{r7, lr}
 800ba8c:	b082      	sub	sp, #8
 800ba8e:	af00      	add	r7, sp, #0
 800ba90:	6078      	str	r0, [r7, #4]
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	f7ff ffed 	bl	800ba72 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3708      	adds	r7, #8
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}

0800baa2 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERS6_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 800baa2:	b5b0      	push	{r4, r5, r7, lr}
 800baa4:	b082      	sub	sp, #8
 800baa6:	af00      	add	r7, sp, #0
 800baa8:	6078      	str	r0, [r7, #4]
 800baaa:	6039      	str	r1, [r7, #0]
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f7ff ffec 	bl	800ba8a <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS_5DenseEEC1Ev>
 800bab2:	687a      	ldr	r2, [r7, #4]
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	4614      	mov	r4, r2
 800bab8:	461d      	mov	r5, r3
 800baba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800babc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800babe:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bac2:	e884 0003 	stmia.w	r4, {r0, r1}
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	4618      	mov	r0, r3
 800baca:	3708      	adds	r7, #8
 800bacc:	46bd      	mov	sp, r7
 800bace:	bdb0      	pop	{r4, r5, r7, pc}

0800bad0 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b084      	sub	sp, #16
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	60f8      	str	r0, [r7, #12]
 800bad8:	60b9      	str	r1, [r7, #8]
 800bada:	607a      	str	r2, [r7, #4]
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	687a      	ldr	r2, [r7, #4]
 800bae0:	68b9      	ldr	r1, [r7, #8]
 800bae2:	4618      	mov	r0, r3
 800bae4:	f000 ff4f 	bl	800c986 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2b00      	cmp	r3, #0
 800baec:	db0f      	blt.n	800bb0e <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x3e>
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	4618      	mov	r0, r3
 800baf2:	f7fa f88c 	bl	8005c0e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800baf6:	4602      	mov	r2, r0
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	4293      	cmp	r3, r2
 800bafc:	db0d      	blt.n	800bb1a <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x4a>
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	4618      	mov	r0, r3
 800bb02:	f7fa f88f 	bl	8005c24 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800bb06:	4602      	mov	r2, r0
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	db05      	blt.n	800bb1a <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x4a>
 800bb0e:	4b06      	ldr	r3, [pc, #24]	; (800bb28 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x58>)
 800bb10:	4a06      	ldr	r2, [pc, #24]	; (800bb2c <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x5c>)
 800bb12:	2178      	movs	r1, #120	; 0x78
 800bb14:	4806      	ldr	r0, [pc, #24]	; (800bb30 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x60>)
 800bb16:	f011 ffa1 	bl	801da5c <__assert_func>
 800bb1a:	bf00      	nop
    }
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3710      	adds	r7, #16
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}
 800bb26:	bf00      	nop
 800bb28:	08024448 	.word	0x08024448
 800bb2c:	08024c80 	.word	0x08024c80
 800bb30:	080245cc 	.word	0x080245cc

0800bb34 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE7derivedEv>:
 800bb34:	b480      	push	{r7}
 800bb36:	b083      	sub	sp, #12
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	4618      	mov	r0, r3
 800bb40:	370c      	adds	r7, #12
 800bb42:	46bd      	mov	sp, r7
 800bb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb48:	4770      	bx	lr

0800bb4a <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE7derivedEv>:
 800bb4a:	b480      	push	{r7}
 800bb4c:	b083      	sub	sp, #12
 800bb4e:	af00      	add	r7, sp, #0
 800bb50:	6078      	str	r0, [r7, #4]
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	4618      	mov	r0, r3
 800bb56:	370c      	adds	r7, #12
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5e:	4770      	bx	lr

0800bb60 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>:
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b082      	sub	sp, #8
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f000 ff1d 	bl	800c9a8 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	4618      	mov	r0, r3
 800bb72:	3708      	adds	r7, #8
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}

0800bb78 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b082      	sub	sp, #8
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f7ff ffed 	bl	800bb60 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	4618      	mov	r0, r3
 800bb8a:	3708      	adds	r7, #8
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd80      	pop	{r7, pc}

0800bb90 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b082      	sub	sp, #8
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f000 ff0f 	bl	800c9be <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4colsEv>
 800bba0:	4603      	mov	r3, r0
 800bba2:	4618      	mov	r0, r3
 800bba4:	3708      	adds	r7, #8
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}

0800bbaa <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 800bbaa:	b580      	push	{r7, lr}
 800bbac:	b082      	sub	sp, #8
 800bbae:	af00      	add	r7, sp, #0
 800bbb0:	6078      	str	r0, [r7, #4]
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f000 ff0d 	bl	800c9d4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4rowsEv>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	3708      	adds	r7, #8
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}

0800bbc4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b082      	sub	sp, #8
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
 800bbcc:	f7fa fe01 	bl	80067d2 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	3708      	adds	r7, #8
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}

0800bbda <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800bbda:	b580      	push	{r7, lr}
 800bbdc:	b082      	sub	sp, #8
 800bbde:	af00      	add	r7, sp, #0
 800bbe0:	6078      	str	r0, [r7, #4]
 800bbe2:	f7fa fdf6 	bl	80067d2 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3708      	adds	r7, #8
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}

0800bbf0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800bbf0:	b5b0      	push	{r4, r5, r7, lr}
 800bbf2:	b084      	sub	sp, #16
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	60f8      	str	r0, [r7, #12]
 800bbf8:	60b9      	str	r1, [r7, #8]
 800bbfa:	607a      	str	r2, [r7, #4]
 800bbfc:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800bbfe:	68f8      	ldr	r0, [r7, #12]
 800bc00:	f7ff ffba 	bl	800bb78 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEENS_5DenseEEC1Ev>
 800bc04:	68fa      	ldr	r2, [r7, #12]
 800bc06:	68bb      	ldr	r3, [r7, #8]
 800bc08:	4614      	mov	r4, r2
 800bc0a:	461d      	mov	r5, r3
 800bc0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bc10:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bc14:	e884 0003 	stmia.w	r4, {r0, r1}
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	f103 0218 	add.w	r2, r3, #24
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	4614      	mov	r4, r2
 800bc22:	461d      	mov	r5, r3
 800bc24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bc28:	682b      	ldr	r3, [r5, #0]
 800bc2a:	6023      	str	r3, [r4, #0]
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	332c      	adds	r3, #44	; 0x2c
 800bc30:	6839      	ldr	r1, [r7, #0]
 800bc32:	4618      	mov	r0, r3
 800bc34:	f7f9 fb26 	bl	8005284 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800bc38:	68b8      	ldr	r0, [r7, #8]
 800bc3a:	f7ff ffa9 	bl	800bb90 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>
 800bc3e:	4604      	mov	r4, r0
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	4618      	mov	r0, r3
 800bc44:	f7ff ffbe 	bl	800bbc4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4rowsEv>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	429c      	cmp	r4, r3
 800bc4c:	d10a      	bne.n	800bc64 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x74>
 800bc4e:	68b8      	ldr	r0, [r7, #8]
 800bc50:	f7ff ffab 	bl	800bbaa <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>
 800bc54:	4604      	mov	r4, r0
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f7ff ffbe 	bl	800bbda <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4colsEv>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	429c      	cmp	r4, r3
 800bc62:	d005      	beq.n	800bc70 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x80>
 800bc64:	4b05      	ldr	r3, [pc, #20]	; (800bc7c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x8c>)
 800bc66:	4a06      	ldr	r2, [pc, #24]	; (800bc80 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x90>)
 800bc68:	2174      	movs	r1, #116	; 0x74
 800bc6a:	4806      	ldr	r0, [pc, #24]	; (800bc84 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x94>)
 800bc6c:	f011 fef6 	bl	801da5c <__assert_func>
    }
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	4618      	mov	r0, r3
 800bc74:	3710      	adds	r7, #16
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bdb0      	pop	{r4, r5, r7, pc}
 800bc7a:	bf00      	nop
 800bc7c:	0801f8c4 	.word	0x0801f8c4
 800bc80:	08024d5c 	.word	0x08024d5c
 800bc84:	0801fb28 	.word	0x0801fb28

0800bc88 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b082      	sub	sp, #8
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f000 f809 	bl	800bca8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800bc96:	4603      	mov	r3, r0
 800bc98:	4618      	mov	r0, r3
 800bc9a:	f000 fea6 	bl	800c9ea <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE4colsEv>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	4618      	mov	r0, r3
 800bca2:	3708      	adds	r7, #8
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}

0800bca8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800bca8:	b480      	push	{r7}
 800bcaa:	b083      	sub	sp, #12
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	370c      	adds	r7, #12
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbc:	4770      	bx	lr

0800bcbe <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800bcbe:	b580      	push	{r7, lr}
 800bcc0:	b082      	sub	sp, #8
 800bcc2:	af00      	add	r7, sp, #0
 800bcc4:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f7ff ff61 	bl	800bb90 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>
 800bcce:	4603      	mov	r3, r0
    }
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	3708      	adds	r7, #8
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}

0800bcd8 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b082      	sub	sp, #8
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f000 feb4 	bl	800ca4e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	4618      	mov	r0, r3
 800bcea:	3708      	adds	r7, #8
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd80      	pop	{r7, pc}

0800bcf0 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b082      	sub	sp, #8
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f7ff ffec 	bl	800bcd8 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	4618      	mov	r0, r3
 800bd04:	3708      	adds	r7, #8
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}

0800bd0a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800bd0a:	b580      	push	{r7, lr}
 800bd0c:	b082      	sub	sp, #8
 800bd0e:	af00      	add	r7, sp, #0
 800bd10:	6078      	str	r0, [r7, #4]
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	4618      	mov	r0, r3
 800bd16:	f7ff ffeb 	bl	800bcf0 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EED1Ev>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3708      	adds	r7, #8
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}

0800bd24 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b082      	sub	sp, #8
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f7ff ffeb 	bl	800bd0a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	4618      	mov	r0, r3
 800bd38:	3708      	adds	r7, #8
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}

0800bd3e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800bd3e:	b580      	push	{r7, lr}
 800bd40:	b082      	sub	sp, #8
 800bd42:	af00      	add	r7, sp, #0
 800bd44:	6078      	str	r0, [r7, #4]
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f7ff ffeb 	bl	800bd24 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f000 fe72 	bl	800ca38 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	4618      	mov	r0, r3
 800bd58:	3708      	adds	r7, #8
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}

0800bd5e <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800bd5e:	b580      	push	{r7, lr}
 800bd60:	b082      	sub	sp, #8
 800bd62:	af00      	add	r7, sp, #0
 800bd64:	6078      	str	r0, [r7, #4]
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	4618      	mov	r0, r3
 800bd6a:	f7ff ffe8 	bl	800bd3e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfED1Ev>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	4618      	mov	r0, r3
 800bd72:	3708      	adds	r7, #8
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}

0800bd78 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator<const T>
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b082      	sub	sp, #8
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	4618      	mov	r0, r3
 800bd84:	f7ff ffeb 	bl	800bd5e <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	3708      	adds	r7, #8
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}

0800bd92 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_ED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800bd92:	b580      	push	{r7, lr}
 800bd94:	b082      	sub	sp, #8
 800bd96:	af00      	add	r7, sp, #0
 800bd98:	6078      	str	r0, [r7, #4]
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f000 fe62 	bl	800ca64 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	4618      	mov	r0, r3
 800bda4:	3708      	adds	r7, #8
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}

0800bdaa <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800bdaa:	b580      	push	{r7, lr}
 800bdac:	b082      	sub	sp, #8
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	6078      	str	r0, [r7, #4]
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f7ff ffec 	bl	800bd92 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_ED1Ev>
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	3708      	adds	r7, #8
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}

0800bdc4 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b082      	sub	sp, #8
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f7ff ffeb 	bl	800bdaa <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EED1Ev>
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	3708      	adds	r7, #8
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}

0800bdde <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>:
struct evaluator<const T>
 800bdde:	b580      	push	{r7, lr}
 800bde0:	b082      	sub	sp, #8
 800bde2:	af00      	add	r7, sp, #0
 800bde4:	6078      	str	r0, [r7, #4]
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	4618      	mov	r0, r3
 800bdea:	f7ff ffeb 	bl	800bdc4 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	3708      	adds	r7, #8
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}

0800bdf8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b082      	sub	sp, #8
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	330c      	adds	r3, #12
 800be04:	4618      	mov	r0, r3
 800be06:	f7ff ffea 	bl	800bdde <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	3304      	adds	r3, #4
 800be0e:	4618      	mov	r0, r3
 800be10:	f7ff ffb2 	bl	800bd78 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	4618      	mov	r0, r3
 800be18:	3708      	adds	r7, #8
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}

0800be1e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800be1e:	b580      	push	{r7, lr}
 800be20:	b082      	sub	sp, #8
 800be22:	af00      	add	r7, sp, #0
 800be24:	6078      	str	r0, [r7, #4]
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	4618      	mov	r0, r3
 800be2a:	f7ff ffe5 	bl	800bdf8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	f000 fdf7 	bl	800ca22 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	4618      	mov	r0, r3
 800be38:	3708      	adds	r7, #8
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}

0800be3e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800be3e:	b580      	push	{r7, lr}
 800be40:	b082      	sub	sp, #8
 800be42:	af00      	add	r7, sp, #0
 800be44:	6078      	str	r0, [r7, #4]
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	4618      	mov	r0, r3
 800be4a:	f7ff ffe8 	bl	800be1e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	4618      	mov	r0, r3
 800be52:	3708      	adds	r7, #8
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}

0800be58 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800be58:	b580      	push	{r7, lr}
 800be5a:	b082      	sub	sp, #8
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	4618      	mov	r0, r3
 800be64:	f7ff ffeb 	bl	800be3e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	4618      	mov	r0, r3
 800be6c:	3708      	adds	r7, #8
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}
	...

0800be74 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800be74:	b580      	push	{r7, lr}
 800be76:	ed2d 8b02 	vpush	{d8}
 800be7a:	b088      	sub	sp, #32
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
 800be80:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f7ff f897 	bl	800afb6 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE4rowsEv>
 800be88:	4603      	mov	r3, r0
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	dd05      	ble.n	800be9a <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f7ff fefa 	bl	800bc88 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE4colsEv>
 800be94:	4603      	mov	r3, r0
 800be96:	2b00      	cmp	r3, #0
 800be98:	dc06      	bgt.n	800bea8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800be9a:	4b16      	ldr	r3, [pc, #88]	; (800bef4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800be9c:	4a16      	ldr	r2, [pc, #88]	; (800bef8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800be9e:	f240 119b 	movw	r1, #411	; 0x19b
 800bea2:	4816      	ldr	r0, [pc, #88]	; (800befc <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800bea4:	f011 fdda 	bl	801da5c <__assert_func>
 800bea8:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f7ff fefc 	bl	800bca8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800beb0:	4602      	mov	r2, r0
 800beb2:	f107 030c 	add.w	r3, r7, #12
 800beb6:	4611      	mov	r1, r2
 800beb8:	4618      	mov	r0, r3
 800beba:	f000 fda3 	bl	800ca04 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f7ff fef2 	bl	800bca8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800bec4:	4602      	mov	r2, r0
 800bec6:	f107 030c 	add.w	r3, r7, #12
 800beca:	6839      	ldr	r1, [r7, #0]
 800becc:	4618      	mov	r0, r3
 800bece:	f000 fdd4 	bl	800ca7a <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 800bed2:	eeb0 8a40 	vmov.f32	s16, s0
 800bed6:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800bed8:	f107 030c 	add.w	r3, r7, #12
 800bedc:	4618      	mov	r0, r3
 800bede:	f7ff ffbb 	bl	800be58 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800bee2:	eef0 7a48 	vmov.f32	s15, s16
}
 800bee6:	eeb0 0a67 	vmov.f32	s0, s15
 800beea:	3720      	adds	r7, #32
 800beec:	46bd      	mov	sp, r7
 800beee:	ecbd 8b02 	vpop	{d8}
 800bef2:	bd80      	pop	{r7, pc}
 800bef4:	08024944 	.word	0x08024944
 800bef8:	08024fa4 	.word	0x08024fa4
 800befc:	08024b50 	.word	0x08024b50

0800bf00 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEESF_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b082      	sub	sp, #8
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
 800bf08:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800bf0a:	6839      	ldr	r1, [r7, #0]
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	f000 fdc5 	bl	800ca9c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800bf12:	bf00      	nop
 800bf14:	3708      	adds	r7, #8
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}

0800bf1a <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffE5coeffEi>:
  const CoeffReturnType coeff(Index index) const
 800bf1a:	b580      	push	{r7, lr}
 800bf1c:	b0a2      	sub	sp, #136	; 0x88
 800bf1e:	af00      	add	r7, sp, #0
 800bf20:	6078      	str	r0, [r7, #4]
 800bf22:	6039      	str	r1, [r7, #0]
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6819      	ldr	r1, [r3, #0]
 800bf34:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800bf38:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	f7fe ffe5 	bl	800af0c <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3rowEi>
 800bf42:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bf46:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800bf4a:	4611      	mov	r1, r2
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f7fe fff0 	bl	800af32 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE9transposeEv>
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	1d19      	adds	r1, r3, #4
 800bf56:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f7fe fff9 	bl	800af54 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE3colEi>
 800bf62:	f107 030c 	add.w	r3, r7, #12
 800bf66:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800bf6a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800bf6e:	4618      	mov	r0, r3
 800bf70:	f7ff f803 	bl	800af7a <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 800bf74:	f107 030c 	add.w	r3, r7, #12
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f7ff f82c 	bl	800afd6 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE3sumEv>
 800bf7e:	eef0 7a40 	vmov.f32	s15, s0
  }
 800bf82:	eeb0 0a67 	vmov.f32	s0, s15
 800bf86:	3788      	adds	r7, #136	; 0x88
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bd80      	pop	{r7, pc}

0800bf8c <_ZNK5Eigen8internal13add_assign_opIffE11assignCoeffERfRKf>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a += b; }
 800bf8c:	b480      	push	{r7}
 800bf8e:	b085      	sub	sp, #20
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	60f8      	str	r0, [r7, #12]
 800bf94:	60b9      	str	r1, [r7, #8]
 800bf96:	607a      	str	r2, [r7, #4]
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	ed93 7a00 	vldr	s14, [r3]
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	edd3 7a00 	vldr	s15, [r3]
 800bfa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bfa8:	68bb      	ldr	r3, [r7, #8]
 800bfaa:	edc3 7a00 	vstr	s15, [r3]
 800bfae:	bf00      	nop
 800bfb0:	3714      	adds	r7, #20
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb8:	4770      	bx	lr

0800bfba <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi2ELi3EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800bfba:	b580      	push	{r7, lr}
 800bfbc:	b082      	sub	sp, #8
 800bfbe:	af00      	add	r7, sp, #0
 800bfc0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800bfc2:	2102      	movs	r1, #2
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	f7ff f863 	bl	800b090 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f000 fd87 	bl	800cade <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi3ELi3EE3runERSL_>
  }
 800bfd0:	bf00      	nop
 800bfd2:	3708      	adds	r7, #8
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}

0800bfd8 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b086      	sub	sp, #24
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	60f8      	str	r0, [r7, #12]
 800bfe0:	60b9      	str	r1, [r7, #8]
 800bfe2:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800bfe8:	687a      	ldr	r2, [r7, #4]
 800bfea:	68b9      	ldr	r1, [r7, #8]
 800bfec:	6978      	ldr	r0, [r7, #20]
 800bfee:	f000 fd80 	bl	800caf2 <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_9assign_opIffEENS0_13sub_assign_opIffEEE3runINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KS7_EES9_EEvRS3_RKT_RKT0_>
}
 800bff2:	bf00      	nop
 800bff4:	3718      	adds	r7, #24
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bd80      	pop	{r7, pc}

0800bffa <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3colEi>:
ConstColXpr col(Index i) const
 800bffa:	b580      	push	{r7, lr}
 800bffc:	b084      	sub	sp, #16
 800bffe:	af00      	add	r7, sp, #0
 800c000:	60f8      	str	r0, [r7, #12]
 800c002:	60b9      	str	r1, [r7, #8]
 800c004:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800c006:	68b8      	ldr	r0, [r7, #8]
 800c008:	f7f9 fa1b 	bl	8005442 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800c00c:	4603      	mov	r3, r0
 800c00e:	687a      	ldr	r2, [r7, #4]
 800c010:	4619      	mov	r1, r3
 800c012:	68f8      	ldr	r0, [r7, #12]
 800c014:	f000 fd98 	bl	800cb48 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i>
}
 800c018:	68f8      	ldr	r0, [r7, #12]
 800c01a:	3710      	adds	r7, #16
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}

0800c020 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IS5_Li3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800c020:	b5b0      	push	{r4, r5, r7, lr}
 800c022:	b086      	sub	sp, #24
 800c024:	af00      	add	r7, sp, #0
 800c026:	60f8      	str	r0, [r7, #12]
 800c028:	60b9      	str	r1, [r7, #8]
 800c02a:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800c02c:	68b8      	ldr	r0, [r7, #8]
 800c02e:	f7ff fa67 	bl	800b500 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>
 800c032:	4604      	mov	r4, r0
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f000 fdaf 	bl	800cb98 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7derivedEv>
 800c03a:	4605      	mov	r5, r0
 800c03c:	f107 0314 	add.w	r3, r7, #20
 800c040:	4618      	mov	r0, r3
 800c042:	f7f9 f895 	bl	8005170 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800c046:	f107 0314 	add.w	r3, r7, #20
 800c04a:	462a      	mov	r2, r5
 800c04c:	4621      	mov	r1, r4
 800c04e:	68f8      	ldr	r0, [r7, #12]
 800c050:	f000 fddc 	bl	800cc0c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_>
}
 800c054:	68f8      	ldr	r0, [r7, #12]
 800c056:	3718      	adds	r7, #24
 800c058:	46bd      	mov	sp, r7
 800c05a:	bdb0      	pop	{r4, r5, r7, pc}

0800c05c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b082      	sub	sp, #8
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
 800c064:	6878      	ldr	r0, [r7, #4]
 800c066:	f000 fe2f 	bl	800ccc8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800c06a:	4603      	mov	r3, r0
 800c06c:	4618      	mov	r0, r3
 800c06e:	f000 fe36 	bl	800ccde <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE4rowsEv>
 800c072:	4603      	mov	r3, r0
 800c074:	4618      	mov	r0, r3
 800c076:	3708      	adds	r7, #8
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}

0800c07c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 800c07c:	b590      	push	{r4, r7, lr}
 800c07e:	b085      	sub	sp, #20
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f000 fe1f 	bl	800ccc8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800c08a:	4604      	mov	r4, r0
 800c08c:	f107 030c 	add.w	r3, r7, #12
 800c090:	4618      	mov	r0, r3
 800c092:	f7f9 fb64 	bl	800575e <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800c096:	f107 030c 	add.w	r3, r7, #12
 800c09a:	4619      	mov	r1, r3
 800c09c:	4620      	mov	r0, r4
 800c09e:	f000 fe9b 	bl	800cdd8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800c0a2:	eef0 7a40 	vmov.f32	s15, s0
 800c0a6:	bf00      	nop
}
 800c0a8:	eeb0 0a67 	vmov.f32	s0, s15
 800c0ac:	3714      	adds	r7, #20
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd90      	pop	{r4, r7, pc}

0800c0b2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800c0b2:	b580      	push	{r7, lr}
 800c0b4:	b082      	sub	sp, #8
 800c0b6:	af00      	add	r7, sp, #0
 800c0b8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800c0ba:	2201      	movs	r2, #1
 800c0bc:	2101      	movs	r1, #1
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f7fe f9a8 	bl	800a414 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f000 fecd 	bl	800ce64 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSL_>
  }
 800c0ca:	bf00      	nop
 800c0cc:	3708      	adds	r7, #8
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}

0800c0d2 <_ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS8_>:
  EIGEN_DEVICE_FUNC explicit evaluator(const XprType& n)
 800c0d2:	b590      	push	{r4, r7, lr}
 800c0d4:	b083      	sub	sp, #12
 800c0d6:	af00      	add	r7, sp, #0
 800c0d8:	6078      	str	r0, [r7, #4]
 800c0da:	6039      	str	r1, [r7, #0]
    : m_functor(n.functor()), m_wrapper()
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f000 fedd 	bl	800ce9c <_ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 800c0e2:	687c      	ldr	r4, [r7, #4]
 800c0e4:	6838      	ldr	r0, [r7, #0]
 800c0e6:	f000 fecd 	bl	800ce84 <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7functorEv>
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	4619      	mov	r1, r3
 800c0ee:	4620      	mov	r0, r4
 800c0f0:	f7f9 f8b8 	bl	8005264 <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKS2_>
  }
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	370c      	adds	r7, #12
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd90      	pop	{r4, r7, pc}
	...

0800c100 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800c100:	b580      	push	{r7, lr}
 800c102:	b084      	sub	sp, #16
 800c104:	af00      	add	r7, sp, #0
 800c106:	60f8      	str	r0, [r7, #12]
 800c108:	60b9      	str	r1, [r7, #8]
 800c10a:	607a      	str	r2, [r7, #4]
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	687a      	ldr	r2, [r7, #4]
 800c110:	68b9      	ldr	r1, [r7, #8]
 800c112:	4618      	mov	r0, r3
 800c114:	f000 fecd 	bl	800ceb2 <_ZN5Eigen9BlockImplIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ENS_5DenseEEC1ERSE_i>
      eigen_assert( (i>=0) && (
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	db06      	blt.n	800c12c <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x2c>
 800c11e:	68b8      	ldr	r0, [r7, #8]
 800c120:	f7fb fe6d 	bl	8007dfe <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>
 800c124:	4602      	mov	r2, r0
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	4293      	cmp	r3, r2
 800c12a:	db05      	blt.n	800c138 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x38>
 800c12c:	4b05      	ldr	r3, [pc, #20]	; (800c144 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x44>)
 800c12e:	4a06      	ldr	r2, [pc, #24]	; (800c148 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x48>)
 800c130:	2178      	movs	r1, #120	; 0x78
 800c132:	4806      	ldr	r0, [pc, #24]	; (800c14c <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x4c>)
 800c134:	f011 fc92 	bl	801da5c <__assert_func>
 800c138:	bf00      	nop
    }
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	4618      	mov	r0, r3
 800c13e:	3710      	adds	r7, #16
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}
 800c144:	08024448 	.word	0x08024448
 800c148:	0802516c 	.word	0x0802516c
 800c14c:	080245cc 	.word	0x080245cc

0800c150 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800c150:	b480      	push	{r7}
 800c152:	b083      	sub	sp, #12
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	4618      	mov	r0, r3
 800c15c:	370c      	adds	r7, #12
 800c15e:	46bd      	mov	sp, r7
 800c160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c164:	4770      	bx	lr

0800c166 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>:
 800c166:	b580      	push	{r7, lr}
 800c168:	b082      	sub	sp, #8
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	6078      	str	r0, [r7, #4]
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f000 feb0 	bl	800ced4 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	4618      	mov	r0, r3
 800c178:	3708      	adds	r7, #8
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}

0800c17e <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 800c17e:	b580      	push	{r7, lr}
 800c180:	b082      	sub	sp, #8
 800c182:	af00      	add	r7, sp, #0
 800c184:	6078      	str	r0, [r7, #4]
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f7ff ffed 	bl	800c166 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	4618      	mov	r0, r3
 800c190:	3708      	adds	r7, #8
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}

0800c196 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERSH_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 800c196:	b580      	push	{r7, lr}
 800c198:	b082      	sub	sp, #8
 800c19a:	af00      	add	r7, sp, #0
 800c19c:	6078      	str	r0, [r7, #4]
 800c19e:	6039      	str	r1, [r7, #0]
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f7ff ffec 	bl	800c17e <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS_5DenseEEC1Ev>
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	6839      	ldr	r1, [r7, #0]
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f7ff f86c 	bl	800b288 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERKSF_>
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3708      	adds	r7, #8
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}
	...

0800c1bc <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b084      	sub	sp, #16
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	60f8      	str	r0, [r7, #12]
 800c1c4:	60b9      	str	r1, [r7, #8]
 800c1c6:	607a      	str	r2, [r7, #4]
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	687a      	ldr	r2, [r7, #4]
 800c1cc:	68b9      	ldr	r1, [r7, #8]
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	f000 fe8b 	bl	800ceea <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ENS_5DenseEEC1ERS5_i>
      eigen_assert( (i>=0) && (
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	db06      	blt.n	800c1e8 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x2c>
 800c1da:	68b8      	ldr	r0, [r7, #8]
 800c1dc:	f7fb fe1d 	bl	8007e1a <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800c1e0:	4602      	mov	r2, r0
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	db05      	blt.n	800c1f4 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x38>
 800c1e8:	4b05      	ldr	r3, [pc, #20]	; (800c200 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x44>)
 800c1ea:	4a06      	ldr	r2, [pc, #24]	; (800c204 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x48>)
 800c1ec:	2178      	movs	r1, #120	; 0x78
 800c1ee:	4806      	ldr	r0, [pc, #24]	; (800c208 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x4c>)
 800c1f0:	f011 fc34 	bl	801da5c <__assert_func>
    }
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	3710      	adds	r7, #16
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}
 800c1fe:	bf00      	nop
 800c200:	08024448 	.word	0x08024448
 800c204:	08025304 	.word	0x08025304
 800c208:	080245cc 	.word	0x080245cc

0800c20c <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEE7derivedEv>:
 800c20c:	b480      	push	{r7}
 800c20e:	b083      	sub	sp, #12
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	4618      	mov	r0, r3
 800c218:	370c      	adds	r7, #12
 800c21a:	46bd      	mov	sp, r7
 800c21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c220:	4770      	bx	lr

0800c222 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEE7derivedEv>:
 800c222:	b480      	push	{r7}
 800c224:	b083      	sub	sp, #12
 800c226:	af00      	add	r7, sp, #0
 800c228:	6078      	str	r0, [r7, #4]
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	4618      	mov	r0, r3
 800c22e:	370c      	adds	r7, #12
 800c230:	46bd      	mov	sp, r7
 800c232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c236:	4770      	bx	lr

0800c238 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>:
 800c238:	b580      	push	{r7, lr}
 800c23a:	b082      	sub	sp, #8
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f000 fe63 	bl	800cf0c <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	4618      	mov	r0, r3
 800c24a:	3708      	adds	r7, #8
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}

0800c250 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpIS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS8_EELi1ELi1ELb0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800c250:	b580      	push	{r7, lr}
 800c252:	b082      	sub	sp, #8
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f7ff ffed 	bl	800c238 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	4618      	mov	r0, r3
 800c262:	3708      	adds	r7, #8
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}

0800c268 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 800c268:	b580      	push	{r7, lr}
 800c26a:	b082      	sub	sp, #8
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	4618      	mov	r0, r3
 800c274:	f000 fe55 	bl	800cf22 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE4colsEv>
 800c278:	4603      	mov	r3, r0
 800c27a:	4618      	mov	r0, r3
 800c27c:	3708      	adds	r7, #8
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}

0800c282 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 800c282:	b580      	push	{r7, lr}
 800c284:	b082      	sub	sp, #8
 800c286:	af00      	add	r7, sp, #0
 800c288:	6078      	str	r0, [r7, #4]
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	4618      	mov	r0, r3
 800c28e:	f000 fe53 	bl	800cf38 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE4rowsEv>
 800c292:	4603      	mov	r3, r0
 800c294:	4618      	mov	r0, r3
 800c296:	3708      	adds	r7, #8
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}

0800c29c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b082      	sub	sp, #8
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
 800c2a4:	f7fa fa95 	bl	80067d2 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3708      	adds	r7, #8
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}

0800c2b2 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800c2b2:	b580      	push	{r7, lr}
 800c2b4:	b082      	sub	sp, #8
 800c2b6:	af00      	add	r7, sp, #0
 800c2b8:	6078      	str	r0, [r7, #4]
 800c2ba:	f7fa fa8a 	bl	80067d2 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3708      	adds	r7, #8
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}

0800c2c8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800c2c8:	b5b0      	push	{r4, r5, r7, lr}
 800c2ca:	b084      	sub	sp, #16
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	60f8      	str	r0, [r7, #12]
 800c2d0:	60b9      	str	r1, [r7, #8]
 800c2d2:	607a      	str	r2, [r7, #4]
 800c2d4:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800c2d6:	68f8      	ldr	r0, [r7, #12]
 800c2d8:	f7ff ffba 	bl	800c250 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpIS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS8_EELi1ELi1ELb0EEENS_5DenseEEC1Ev>
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	3304      	adds	r3, #4
 800c2e0:	68b9      	ldr	r1, [r7, #8]
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f7fe fff3 	bl	800b2ce <_ZN5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERKSI_>
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	f103 021c 	add.w	r2, r3, #28
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	4614      	mov	r4, r2
 800c2f2:	461d      	mov	r5, r3
 800c2f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c2f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c2f8:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c2fc:	e884 0003 	stmia.w	r4, {r0, r1}
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	3334      	adds	r3, #52	; 0x34
 800c304:	6839      	ldr	r1, [r7, #0]
 800c306:	4618      	mov	r0, r3
 800c308:	f7f8 ffbc 	bl	8005284 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800c30c:	68b8      	ldr	r0, [r7, #8]
 800c30e:	f7ff ffab 	bl	800c268 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4rowsEv>
 800c312:	4604      	mov	r4, r0
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	4618      	mov	r0, r3
 800c318:	f7ff ffc0 	bl	800c29c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4rowsEv>
 800c31c:	4603      	mov	r3, r0
 800c31e:	429c      	cmp	r4, r3
 800c320:	d10a      	bne.n	800c338 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x70>
 800c322:	68b8      	ldr	r0, [r7, #8]
 800c324:	f7ff ffad 	bl	800c282 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4colsEv>
 800c328:	4604      	mov	r4, r0
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	4618      	mov	r0, r3
 800c32e:	f7ff ffc0 	bl	800c2b2 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4colsEv>
 800c332:	4603      	mov	r3, r0
 800c334:	429c      	cmp	r4, r3
 800c336:	d005      	beq.n	800c344 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x7c>
 800c338:	4b05      	ldr	r3, [pc, #20]	; (800c350 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x88>)
 800c33a:	4a06      	ldr	r2, [pc, #24]	; (800c354 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x8c>)
 800c33c:	2174      	movs	r1, #116	; 0x74
 800c33e:	4806      	ldr	r0, [pc, #24]	; (800c358 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x90>)
 800c340:	f011 fb8c 	bl	801da5c <__assert_func>
    }
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	4618      	mov	r0, r3
 800c348:	3710      	adds	r7, #16
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bdb0      	pop	{r4, r5, r7, pc}
 800c34e:	bf00      	nop
 800c350:	0801f8c4 	.word	0x0801f8c4
 800c354:	080253f4 	.word	0x080253f4
 800c358:	0801fb28 	.word	0x0801fb28

0800c35c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b082      	sub	sp, #8
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
 800c364:	6878      	ldr	r0, [r7, #4]
 800c366:	f000 f809 	bl	800c37c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800c36a:	4603      	mov	r3, r0
 800c36c:	4618      	mov	r0, r3
 800c36e:	f000 fdee 	bl	800cf4e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE4colsEv>
 800c372:	4603      	mov	r3, r0
 800c374:	4618      	mov	r0, r3
 800c376:	3708      	adds	r7, #8
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd80      	pop	{r7, pc}

0800c37c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800c37c:	b480      	push	{r7}
 800c37e:	b083      	sub	sp, #12
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	4618      	mov	r0, r3
 800c388:	370c      	adds	r7, #12
 800c38a:	46bd      	mov	sp, r7
 800c38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c390:	4770      	bx	lr

0800c392 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800c392:	b580      	push	{r7, lr}
 800c394:	b082      	sub	sp, #8
 800c396:	af00      	add	r7, sp, #0
 800c398:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	3304      	adds	r3, #4
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f7ff ff62 	bl	800c268 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4rowsEv>
 800c3a4:	4603      	mov	r3, r0
    }
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3708      	adds	r7, #8
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}

0800c3ae <_ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>:
struct evaluator<const T>
 800c3ae:	b580      	push	{r7, lr}
 800c3b0:	b082      	sub	sp, #8
 800c3b2:	af00      	add	r7, sp, #0
 800c3b4:	6078      	str	r0, [r7, #4]
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f7fc fc30 	bl	8008c1e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	3708      	adds	r7, #8
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}

0800c3c8 <_ZN5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel>, IndexBased>
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b082      	sub	sp, #8
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f7ff ffeb 	bl	800c3ae <_ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>
 800c3d8:	6878      	ldr	r0, [r7, #4]
 800c3da:	f000 fdeb 	bl	800cfb4 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	3708      	adds	r7, #8
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}

0800c3e8 <_ZN5Eigen8internal15block_evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /*HasDirectAccess*/ false>
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b082      	sub	sp, #8
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f7ff ffe8 	bl	800c3c8 <_ZN5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfED1Ev>
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	3708      	adds	r7, #8
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}

0800c402 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800c402:	b580      	push	{r7, lr}
 800c404:	b082      	sub	sp, #8
 800c406:	af00      	add	r7, sp, #0
 800c408:	6078      	str	r0, [r7, #4]
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	4618      	mov	r0, r3
 800c40e:	f7ff ffeb 	bl	800c3e8 <_ZN5Eigen8internal15block_evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EED1Ev>
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	4618      	mov	r0, r3
 800c416:	3708      	adds	r7, #8
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd80      	pop	{r7, pc}

0800c41c <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b082      	sub	sp, #8
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	4618      	mov	r0, r3
 800c428:	f7ff ffeb 	bl	800c402 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	4618      	mov	r0, r3
 800c430:	3708      	adds	r7, #8
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}

0800c436 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800c436:	b580      	push	{r7, lr}
 800c438:	b082      	sub	sp, #8
 800c43a:	af00      	add	r7, sp, #0
 800c43c:	6078      	str	r0, [r7, #4]
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	4618      	mov	r0, r3
 800c442:	f7ff ffeb 	bl	800c41c <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f000 fda9 	bl	800cf9e <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	4618      	mov	r0, r3
 800c450:	3708      	adds	r7, #8
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}

0800c456 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800c456:	b580      	push	{r7, lr}
 800c458:	b082      	sub	sp, #8
 800c45a:	af00      	add	r7, sp, #0
 800c45c:	6078      	str	r0, [r7, #4]
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	4618      	mov	r0, r3
 800c462:	f7ff ffe8 	bl	800c436 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfED1Ev>
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	4618      	mov	r0, r3
 800c46a:	3708      	adds	r7, #8
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}

0800c470 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator<const T>
 800c470:	b580      	push	{r7, lr}
 800c472:	b082      	sub	sp, #8
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	4618      	mov	r0, r3
 800c47c:	f7ff ffeb 	bl	800c456 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	4618      	mov	r0, r3
 800c484:	3708      	adds	r7, #8
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}

0800c48a <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800c48a:	b580      	push	{r7, lr}
 800c48c:	b082      	sub	sp, #8
 800c48e:	af00      	add	r7, sp, #0
 800c490:	6078      	str	r0, [r7, #4]
 800c492:	6878      	ldr	r0, [r7, #4]
 800c494:	f000 fd99 	bl	800cfca <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	4618      	mov	r0, r3
 800c49c:	3708      	adds	r7, #8
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}

0800c4a2 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800c4a2:	b580      	push	{r7, lr}
 800c4a4:	b082      	sub	sp, #8
 800c4a6:	af00      	add	r7, sp, #0
 800c4a8:	6078      	str	r0, [r7, #4]
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	f7ff ffec 	bl	800c48a <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEED1Ev>
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	3708      	adds	r7, #8
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}

0800c4bc <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b082      	sub	sp, #8
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f7ff ffeb 	bl	800c4a2 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EED1Ev>
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	3708      	adds	r7, #8
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}

0800c4d6 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 800c4d6:	b580      	push	{r7, lr}
 800c4d8:	b082      	sub	sp, #8
 800c4da:	af00      	add	r7, sp, #0
 800c4dc:	6078      	str	r0, [r7, #4]
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f7ff ffeb 	bl	800c4bc <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3708      	adds	r7, #8
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}

0800c4f0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4DataD1Ev>:
  struct Data
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b082      	sub	sp, #8
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	3320      	adds	r3, #32
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f7ff ffea 	bl	800c4d6 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	3304      	adds	r3, #4
 800c506:	4618      	mov	r0, r3
 800c508:	f7ff ffb2 	bl	800c470 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	4618      	mov	r0, r3
 800c510:	3708      	adds	r7, #8
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}

0800c516 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800c516:	b580      	push	{r7, lr}
 800c518:	b082      	sub	sp, #8
 800c51a:	af00      	add	r7, sp, #0
 800c51c:	6078      	str	r0, [r7, #4]
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	4618      	mov	r0, r3
 800c522:	f7ff ffe5 	bl	800c4f0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4DataD1Ev>
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f000 fd2e 	bl	800cf88 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	4618      	mov	r0, r3
 800c530:	3708      	adds	r7, #8
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}

0800c536 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800c536:	b580      	push	{r7, lr}
 800c538:	b082      	sub	sp, #8
 800c53a:	af00      	add	r7, sp, #0
 800c53c:	6078      	str	r0, [r7, #4]
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	4618      	mov	r0, r3
 800c542:	f7ff ffe8 	bl	800c516 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffED1Ev>
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	4618      	mov	r0, r3
 800c54a:	3708      	adds	r7, #8
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}

0800c550 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800c550:	b580      	push	{r7, lr}
 800c552:	b082      	sub	sp, #8
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	4618      	mov	r0, r3
 800c55c:	f7ff ffeb 	bl	800c536 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	4618      	mov	r0, r3
 800c564:	3708      	adds	r7, #8
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}
	...

0800c56c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800c56c:	b580      	push	{r7, lr}
 800c56e:	ed2d 8b02 	vpush	{d8}
 800c572:	b08c      	sub	sp, #48	; 0x30
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
 800c578:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f7fe fef9 	bl	800b372 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE4rowsEv>
 800c580:	4603      	mov	r3, r0
 800c582:	2b00      	cmp	r3, #0
 800c584:	dd05      	ble.n	800c592 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	f7ff fee8 	bl	800c35c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE4colsEv>
 800c58c:	4603      	mov	r3, r0
 800c58e:	2b00      	cmp	r3, #0
 800c590:	dc06      	bgt.n	800c5a0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800c592:	4b16      	ldr	r3, [pc, #88]	; (800c5ec <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800c594:	4a16      	ldr	r2, [pc, #88]	; (800c5f0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800c596:	f240 119b 	movw	r1, #411	; 0x19b
 800c59a:	4816      	ldr	r0, [pc, #88]	; (800c5f4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800c59c:	f011 fa5e 	bl	801da5c <__assert_func>
 800c5a0:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f7ff feea 	bl	800c37c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800c5a8:	4602      	mov	r2, r0
 800c5aa:	f107 0308 	add.w	r3, r7, #8
 800c5ae:	4611      	mov	r1, r2
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	f000 fcda 	bl	800cf6a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1ERKSP_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800c5b6:	6878      	ldr	r0, [r7, #4]
 800c5b8:	f7ff fee0 	bl	800c37c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800c5bc:	4602      	mov	r2, r0
 800c5be:	f107 0308 	add.w	r3, r7, #8
 800c5c2:	6839      	ldr	r1, [r7, #0]
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	f000 fd0b 	bl	800cfe0 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS5_IS7_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEELi1ELi1ELb0EEEEEKNS9_IKNS8_ISB_EELi1ELi1ELb0EEEEEEELi0ELi2EE3runISS_EEfRKST_RKS3_RKT_>
 800c5ca:	eeb0 8a40 	vmov.f32	s16, s0
 800c5ce:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800c5d0:	f107 0308 	add.w	r3, r7, #8
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f7ff ffbb 	bl	800c550 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800c5da:	eef0 7a48 	vmov.f32	s15, s16
}
 800c5de:	eeb0 0a67 	vmov.f32	s0, s15
 800c5e2:	3730      	adds	r7, #48	; 0x30
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	ecbd 8b02 	vpop	{d8}
 800c5ea:	bd80      	pop	{r7, pc}
 800c5ec:	08024944 	.word	0x08024944
 800c5f0:	080257dc 	.word	0x080257dc
 800c5f4:	08024b50 	.word	0x08024b50

0800c5f8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b082      	sub	sp, #8
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800c600:	2202      	movs	r2, #2
 800c602:	2101      	movs	r1, #1
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	f7fd fc3e 	bl	8009e86 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	f000 fcf9 	bl	800d002 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSP_>
  }
 800c610:	bf00      	nop
 800c612:	3708      	adds	r7, #8
 800c614:	46bd      	mov	sp, r7
 800c616:	bd80      	pop	{r7, pc}

0800c618 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ENS_5DenseEEC1ERS3_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 800c618:	b580      	push	{r7, lr}
 800c61a:	b084      	sub	sp, #16
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	60f8      	str	r0, [r7, #12]
 800c620:	60b9      	str	r1, [r7, #8]
 800c622:	607a      	str	r2, [r7, #4]
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	687a      	ldr	r2, [r7, #4]
 800c628:	68b9      	ldr	r1, [r7, #8]
 800c62a:	4618      	mov	r0, r3
 800c62c:	f000 fcf9 	bl	800d022 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERS4_i>
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	4618      	mov	r0, r3
 800c634:	3710      	adds	r7, #16
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}

0800c63a <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800c63a:	b480      	push	{r7}
 800c63c:	b083      	sub	sp, #12
 800c63e:	af00      	add	r7, sp, #0
 800c640:	6078      	str	r0, [r7, #4]
    }
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	4618      	mov	r0, r3
 800c646:	370c      	adds	r7, #12
 800c648:	46bd      	mov	sp, r7
 800c64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64e:	4770      	bx	lr

0800c650 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ENS_5DenseEEC1ERS3_i>:
 800c650:	b580      	push	{r7, lr}
 800c652:	b084      	sub	sp, #16
 800c654:	af00      	add	r7, sp, #0
 800c656:	60f8      	str	r0, [r7, #12]
 800c658:	60b9      	str	r1, [r7, #8]
 800c65a:	607a      	str	r2, [r7, #4]
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	687a      	ldr	r2, [r7, #4]
 800c660:	68b9      	ldr	r1, [r7, #8]
 800c662:	4618      	mov	r0, r3
 800c664:	f000 fd13 	bl	800d08e <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EEC1ERS4_i>
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	4618      	mov	r0, r3
 800c66c:	3710      	adds	r7, #16
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}

0800c672 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800c672:	b480      	push	{r7}
 800c674:	b083      	sub	sp, #12
 800c676:	af00      	add	r7, sp, #0
 800c678:	6078      	str	r0, [r7, #4]
    }
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	4618      	mov	r0, r3
 800c67e:	370c      	adds	r7, #12
 800c680:	46bd      	mov	sp, r7
 800c682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c686:	4770      	bx	lr

0800c688 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4colsEv>:
 800c688:	b580      	push	{r7, lr}
 800c68a:	b082      	sub	sp, #8
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
 800c690:	f7fa f897 	bl	80067c2 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800c694:	4603      	mov	r3, r0
 800c696:	4618      	mov	r0, r3
 800c698:	3708      	adds	r7, #8
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}

0800c69e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800c69e:	b580      	push	{r7, lr}
 800c6a0:	b082      	sub	sp, #8
 800c6a2:	af00      	add	r7, sp, #0
 800c6a4:	6078      	str	r0, [r7, #4]
 800c6a6:	f7fa f894 	bl	80067d2 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	3708      	adds	r7, #8
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}

0800c6b4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b082      	sub	sp, #8
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f7fe ff59 	bl	800b576 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800c6c4:	4603      	mov	r3, r0
    }
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	3708      	adds	r7, #8
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}

0800c6ce <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800c6ce:	b580      	push	{r7, lr}
 800c6d0:	b082      	sub	sp, #8
 800c6d2:	af00      	add	r7, sp, #0
 800c6d4:	6078      	str	r0, [r7, #4]
 800c6d6:	6039      	str	r1, [r7, #0]
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	6839      	ldr	r1, [r7, #0]
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f000 fd0c 	bl	800d0fa <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1ERKSI_>
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	3708      	adds	r7, #8
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}

0800c6ec <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800c6ec:	b480      	push	{r7}
 800c6ee:	b083      	sub	sp, #12
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	370c      	adds	r7, #12
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c700:	4770      	bx	lr

0800c702 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>:
 800c702:	b480      	push	{r7}
 800c704:	b083      	sub	sp, #12
 800c706:	af00      	add	r7, sp, #0
 800c708:	6078      	str	r0, [r7, #4]
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	4618      	mov	r0, r3
 800c70e:	370c      	adds	r7, #12
 800c710:	46bd      	mov	sp, r7
 800c712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c716:	4770      	bx	lr

0800c718 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>:
 800c718:	b480      	push	{r7}
 800c71a:	b083      	sub	sp, #12
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	4618      	mov	r0, r3
 800c724:	370c      	adds	r7, #12
 800c726:	46bd      	mov	sp, r7
 800c728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72c:	4770      	bx	lr

0800c72e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>:
 800c72e:	b480      	push	{r7}
 800c730:	b083      	sub	sp, #12
 800c732:	af00      	add	r7, sp, #0
 800c734:	6078      	str	r0, [r7, #4]
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	4618      	mov	r0, r3
 800c73a:	370c      	adds	r7, #12
 800c73c:	46bd      	mov	sp, r7
 800c73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c742:	4770      	bx	lr

0800c744 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800c744:	b580      	push	{r7, lr}
 800c746:	b084      	sub	sp, #16
 800c748:	af00      	add	r7, sp, #0
 800c74a:	60f8      	str	r0, [r7, #12]
 800c74c:	60b9      	str	r1, [r7, #8]
 800c74e:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800c750:	68b9      	ldr	r1, [r7, #8]
 800c752:	68f8      	ldr	r0, [r7, #12]
 800c754:	f000 fce0 	bl	800d118 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSM_RKS3_>
 800c758:	eef0 7a40 	vmov.f32	s15, s0
  }
 800c75c:	eeb0 0a67 	vmov.f32	s0, s15
 800c760:	3710      	adds	r7, #16
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}

0800c766 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800c766:	b480      	push	{r7}
 800c768:	b083      	sub	sp, #12
 800c76a:	af00      	add	r7, sp, #0
 800c76c:	6078      	str	r0, [r7, #4]
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	4618      	mov	r0, r3
 800c772:	370c      	adds	r7, #12
 800c774:	46bd      	mov	sp, r7
 800c776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77a:	4770      	bx	lr

0800c77c <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800c77c:	b480      	push	{r7}
 800c77e:	b083      	sub	sp, #12
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	3308      	adds	r3, #8
 800c788:	4618      	mov	r0, r3
 800c78a:	370c      	adds	r7, #12
 800c78c:	46bd      	mov	sp, r7
 800c78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c792:	4770      	bx	lr

0800c794 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800c794:	b480      	push	{r7}
 800c796:	b083      	sub	sp, #12
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	4618      	mov	r0, r3
 800c7a0:	370c      	adds	r7, #12
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a8:	4770      	bx	lr

0800c7aa <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductIS1_S1_Li0EEEEERKT_>:
    explicit Matrix(const T& x)
 800c7aa:	b580      	push	{r7, lr}
 800c7ac:	b082      	sub	sp, #8
 800c7ae:	af00      	add	r7, sp, #0
 800c7b0:	6078      	str	r0, [r7, #4]
 800c7b2:	6039      	str	r1, [r7, #0]
    {
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f7f8 f937 	bl	8004a2a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 800c7bc:	f7f8 f945 	bl	8004a4a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	6839      	ldr	r1, [r7, #0]
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	f000 fccb 	bl	800d160 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductIS2_S2_Li0EEES6_EEvRKNS_9DenseBaseIT0_EE>
    }
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	3708      	adds	r7, #8
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}

0800c7d4 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b082      	sub	sp, #8
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
 800c7dc:	6039      	str	r1, [r7, #0]
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6839      	ldr	r1, [r7, #0]
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f000 fcc9 	bl	800d17a <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS0_10IndexBasedEfEC1ERKS5_>
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	3708      	adds	r7, #8
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bd80      	pop	{r7, pc}

0800c7f2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 800c7f2:	b580      	push	{r7, lr}
 800c7f4:	b086      	sub	sp, #24
 800c7f6:	af00      	add	r7, sp, #0
 800c7f8:	60f8      	str	r0, [r7, #12]
 800c7fa:	60b9      	str	r1, [r7, #8]
 800c7fc:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 800c7fe:	6879      	ldr	r1, [r7, #4]
 800c800:	68b8      	ldr	r0, [r7, #8]
 800c802:	f000 fcd0 	bl	800d1a6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 800c806:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 800c808:	6879      	ldr	r1, [r7, #4]
 800c80a:	68b8      	ldr	r0, [r7, #8]
 800c80c:	f000 fcd7 	bl	800d1be <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 800c810:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 800c812:	693a      	ldr	r2, [r7, #16]
 800c814:	6979      	ldr	r1, [r7, #20]
 800c816:	68f8      	ldr	r0, [r7, #12]
 800c818:	f000 fcdd 	bl	800d1d6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 800c81c:	bf00      	nop
 800c81e:	3718      	adds	r7, #24
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}

0800c824 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800c824:	b580      	push	{r7, lr}
 800c826:	b082      	sub	sp, #8
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800c82c:	2201      	movs	r2, #1
 800c82e:	2100      	movs	r1, #0
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f7ff ffde 	bl	800c7f2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f000 fcf3 	bl	800d222 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSG_>
  }
 800c83c:	bf00      	nop
 800c83e:	3708      	adds	r7, #8
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}

0800c844 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 800c844:	b590      	push	{r4, r7, lr}
 800c846:	b087      	sub	sp, #28
 800c848:	af00      	add	r7, sp, #0
 800c84a:	60f8      	str	r0, [r7, #12]
 800c84c:	60b9      	str	r1, [r7, #8]
 800c84e:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 800c850:	68b8      	ldr	r0, [r7, #8]
 800c852:	f7fb fc65 	bl	8008120 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4rowsEv>
 800c856:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 800c858:	68b8      	ldr	r0, [r7, #8]
 800c85a:	f7f9 fab8 	bl	8005dce <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>
 800c85e:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	4618      	mov	r0, r3
 800c864:	f7f8 fa89 	bl	8004d7a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800c868:	4602      	mov	r2, r0
 800c86a:	697b      	ldr	r3, [r7, #20]
 800c86c:	4293      	cmp	r3, r2
 800c86e:	d107      	bne.n	800c880 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_+0x3c>
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	4618      	mov	r0, r3
 800c874:	f7f8 fa76 	bl	8004d64 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800c878:	4602      	mov	r2, r0
 800c87a:	693b      	ldr	r3, [r7, #16]
 800c87c:	4293      	cmp	r3, r2
 800c87e:	d001      	beq.n	800c884 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_+0x40>
 800c880:	2301      	movs	r3, #1
 800c882:	e000      	b.n	800c886 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_+0x42>
 800c884:	2300      	movs	r3, #0
 800c886:	2b00      	cmp	r3, #0
 800c888:	d005      	beq.n	800c896 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_+0x52>
      dst.resize(dstRows, dstCols);
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	693a      	ldr	r2, [r7, #16]
 800c88e:	6979      	ldr	r1, [r7, #20]
 800c890:	4618      	mov	r0, r3
 800c892:	f7fb f97d 	bl	8007b90 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 800c896:	68b8      	ldr	r0, [r7, #8]
 800c898:	f000 fcd3 	bl	800d242 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE3lhsEv>
 800c89c:	4604      	mov	r4, r0
 800c89e:	68b8      	ldr	r0, [r7, #8]
 800c8a0:	f000 fcdb 	bl	800d25a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE3rhsEv>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	461a      	mov	r2, r3
 800c8a8:	4621      	mov	r1, r4
 800c8aa:	68f8      	ldr	r0, [r7, #12]
 800c8ac:	f000 fce1 	bl	800d272 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEENS_10DenseShapeES7_Li3EE6evalToINS2_IfLi3ELi1ELi0ELi3ELi1EEEEEvRT_RKS3_RKS6_>
  }
 800c8b0:	bf00      	nop
 800c8b2:	371c      	adds	r7, #28
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd90      	pop	{r4, r7, pc}

0800c8b8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>:
  static void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<typename DstXprType::Scalar,typename XprType::Scalar> &)
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b088      	sub	sp, #32
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	60f8      	str	r0, [r7, #12]
 800c8c0:	60b9      	str	r1, [r7, #8]
 800c8c2:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 800c8c4:	68b8      	ldr	r0, [r7, #8]
 800c8c6:	f7f9 fa90 	bl	8005dea <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>
 800c8ca:	61f8      	str	r0, [r7, #28]
    Index dstCols = src.cols();
 800c8cc:	68b8      	ldr	r0, [r7, #8]
 800c8ce:	f7fb fc35 	bl	800813c <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>
 800c8d2:	61b8      	str	r0, [r7, #24]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	f7f9 f999 	bl	8005c0e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800c8dc:	4602      	mov	r2, r0
 800c8de:	69fb      	ldr	r3, [r7, #28]
 800c8e0:	4293      	cmp	r3, r2
 800c8e2:	d107      	bne.n	800c8f4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x3c>
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f7f9 f99c 	bl	8005c24 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800c8ec:	4602      	mov	r2, r0
 800c8ee:	69bb      	ldr	r3, [r7, #24]
 800c8f0:	4293      	cmp	r3, r2
 800c8f2:	d001      	beq.n	800c8f8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x40>
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	e000      	b.n	800c8fa <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x42>
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d005      	beq.n	800c90a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x52>
      dst.resize(dstRows, dstCols);
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	69ba      	ldr	r2, [r7, #24]
 800c902:	69f9      	ldr	r1, [r7, #28]
 800c904:	4618      	mov	r0, r3
 800c906:	f000 fcd3 	bl	800d2b0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>
    const int Size = EIGEN_PLAIN_ENUM_MIN(XprType::ColsAtCompileTime,DstXprType::ColsAtCompileTime);
 800c90a:	2301      	movs	r3, #1
 800c90c:	617b      	str	r3, [r7, #20]
    ActualXprType actual_xpr(src.nestedExpression());
 800c90e:	68b8      	ldr	r0, [r7, #8]
 800c910:	f000 fd00 	bl	800d314 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE16nestedExpressionEv>
 800c914:	4602      	mov	r2, r0
 800c916:	f107 0310 	add.w	r3, r7, #16
 800c91a:	4611      	mov	r1, r2
 800c91c:	4618      	mov	r0, r3
 800c91e:	f000 fd04 	bl	800d32a <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS7_INS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS1_EEEERKT_>
    compute_inverse<ActualXprTypeCleanded, DstXprType>::run(actual_xpr, dst);
 800c922:	f107 0310 	add.w	r3, r7, #16
 800c926:	68f9      	ldr	r1, [r7, #12]
 800c928:	4618      	mov	r0, r3
 800c92a:	f000 fd13 	bl	800d354 <_ZN5Eigen8internal15compute_inverseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_Li1EE3runERKS3_RS3_>
  }
 800c92e:	bf00      	nop
 800c930:	3720      	adds	r7, #32
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}

0800c936 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE9innerSizeEv>:
    Index innerSize() const
 800c936:	b580      	push	{r7, lr}
 800c938:	b082      	sub	sp, #8
 800c93a:	af00      	add	r7, sp, #0
 800c93c:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f000 fd47 	bl	800d3d2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4sizeEv>
 800c944:	4603      	mov	r3, r0
    }
 800c946:	4618      	mov	r0, r3
 800c948:	3708      	adds	r7, #8
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}

0800c94e <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ENS_5DenseEEC1ERS3_i>:
 800c94e:	b580      	push	{r7, lr}
 800c950:	b084      	sub	sp, #16
 800c952:	af00      	add	r7, sp, #0
 800c954:	60f8      	str	r0, [r7, #12]
 800c956:	60b9      	str	r1, [r7, #8]
 800c958:	607a      	str	r2, [r7, #4]
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	687a      	ldr	r2, [r7, #4]
 800c95e:	68b9      	ldr	r1, [r7, #8]
 800c960:	4618      	mov	r0, r3
 800c962:	f000 fd58 	bl	800d416 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EEC1ERS4_i>
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	4618      	mov	r0, r3
 800c96a:	3710      	adds	r7, #16
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}

0800c970 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800c970:	b480      	push	{r7}
 800c972:	b083      	sub	sp, #12
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
    }
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	4618      	mov	r0, r3
 800c97c:	370c      	adds	r7, #12
 800c97e:	46bd      	mov	sp, r7
 800c980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c984:	4770      	bx	lr

0800c986 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ENS_5DenseEEC1ERS3_i>:
 800c986:	b580      	push	{r7, lr}
 800c988:	b084      	sub	sp, #16
 800c98a:	af00      	add	r7, sp, #0
 800c98c:	60f8      	str	r0, [r7, #12]
 800c98e:	60b9      	str	r1, [r7, #8]
 800c990:	607a      	str	r2, [r7, #4]
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	687a      	ldr	r2, [r7, #4]
 800c996:	68b9      	ldr	r1, [r7, #8]
 800c998:	4618      	mov	r0, r3
 800c99a:	f000 fd6d 	bl	800d478 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EEC1ERS4_i>
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	3710      	adds	r7, #16
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd80      	pop	{r7, pc}

0800c9a8 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800c9a8:	b480      	push	{r7}
 800c9aa:	b083      	sub	sp, #12
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
    }
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	370c      	adds	r7, #12
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9bc:	4770      	bx	lr

0800c9be <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800c9be:	b580      	push	{r7, lr}
 800c9c0:	b082      	sub	sp, #8
 800c9c2:	af00      	add	r7, sp, #0
 800c9c4:	6078      	str	r0, [r7, #4]
 800c9c6:	f7f9 ff04 	bl	80067d2 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	3708      	adds	r7, #8
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd80      	pop	{r7, pc}

0800c9d4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b082      	sub	sp, #8
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
 800c9dc:	f7f9 fef9 	bl	80067d2 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	3708      	adds	r7, #8
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd80      	pop	{r7, pc}

0800c9ea <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800c9ea:	b580      	push	{r7, lr}
 800c9ec:	b082      	sub	sp, #8
 800c9ee:	af00      	add	r7, sp, #0
 800c9f0:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f7ff f8d8 	bl	800bbaa <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>
 800c9fa:	4603      	mov	r3, r0
    }
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3708      	adds	r7, #8
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}

0800ca04 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b082      	sub	sp, #8
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	6039      	str	r1, [r7, #0]
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6839      	ldr	r1, [r7, #0]
 800ca12:	4618      	mov	r0, r3
 800ca14:	f000 fd61 	bl	800d4da <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1ERKSI_>
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	3708      	adds	r7, #8
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}

0800ca22 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800ca22:	b480      	push	{r7}
 800ca24:	b083      	sub	sp, #12
 800ca26:	af00      	add	r7, sp, #0
 800ca28:	6078      	str	r0, [r7, #4]
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	370c      	adds	r7, #12
 800ca30:	46bd      	mov	sp, r7
 800ca32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca36:	4770      	bx	lr

0800ca38 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>:
 800ca38:	b480      	push	{r7}
 800ca3a:	b083      	sub	sp, #12
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	4618      	mov	r0, r3
 800ca44:	370c      	adds	r7, #12
 800ca46:	46bd      	mov	sp, r7
 800ca48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4c:	4770      	bx	lr

0800ca4e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>:
 800ca4e:	b480      	push	{r7}
 800ca50:	b083      	sub	sp, #12
 800ca52:	af00      	add	r7, sp, #0
 800ca54:	6078      	str	r0, [r7, #4]
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	4618      	mov	r0, r3
 800ca5a:	370c      	adds	r7, #12
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca62:	4770      	bx	lr

0800ca64 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>:
 800ca64:	b480      	push	{r7}
 800ca66:	b083      	sub	sp, #12
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	4618      	mov	r0, r3
 800ca70:	370c      	adds	r7, #12
 800ca72:	46bd      	mov	sp, r7
 800ca74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca78:	4770      	bx	lr

0800ca7a <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800ca7a:	b580      	push	{r7, lr}
 800ca7c:	b084      	sub	sp, #16
 800ca7e:	af00      	add	r7, sp, #0
 800ca80:	60f8      	str	r0, [r7, #12]
 800ca82:	60b9      	str	r1, [r7, #8]
 800ca84:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800ca86:	68b9      	ldr	r1, [r7, #8]
 800ca88:	68f8      	ldr	r0, [r7, #12]
 800ca8a:	f000 fd35 	bl	800d4f8 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 800ca8e:	eef0 7a40 	vmov.f32	s15, s0
  }
 800ca92:	eeb0 0a67 	vmov.f32	s0, s15
 800ca96:	3710      	adds	r7, #16
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}

0800ca9c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800ca9c:	b5b0      	push	{r4, r5, r7, lr}
 800ca9e:	b084      	sub	sp, #16
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
 800caa4:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f7fe ff7b 	bl	800b9a2 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800caac:	4604      	mov	r4, r0
 800caae:	6838      	ldr	r0, [r7, #0]
 800cab0:	f7f9 fade 	bl	8006070 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEE7derivedEv>
 800cab4:	4605      	mov	r5, r0
 800cab6:	f107 030c 	add.w	r3, r7, #12
 800caba:	4618      	mov	r0, r3
 800cabc:	f7fa f8e7 	bl	8006c8e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800cac0:	f107 030c 	add.w	r3, r7, #12
 800cac4:	461a      	mov	r2, r3
 800cac6:	4629      	mov	r1, r5
 800cac8:	4620      	mov	r0, r4
 800caca:	f000 fd26 	bl	800d51a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f7fe ff67 	bl	800b9a2 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800cad4:	4603      	mov	r3, r0
    }
 800cad6:	4618      	mov	r0, r3
 800cad8:	3710      	adds	r7, #16
 800cada:	46bd      	mov	sp, r7
 800cadc:	bdb0      	pop	{r4, r5, r7, pc}

0800cade <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi3ELi3EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800cade:	b480      	push	{r7}
 800cae0:	b083      	sub	sp, #12
 800cae2:	af00      	add	r7, sp, #0
 800cae4:	6078      	str	r0, [r7, #4]
 800cae6:	bf00      	nop
 800cae8:	370c      	adds	r7, #12
 800caea:	46bd      	mov	sp, r7
 800caec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf0:	4770      	bx	lr

0800caf2 <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_9assign_opIffEENS0_13sub_assign_opIffEEE3runINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KS7_EES9_EEvRS3_RKT_RKT0_>:
  void run(DstXprType &dst, const SrcXprType &src, const InitialFunc& /*func*/)
 800caf2:	b590      	push	{r4, r7, lr}
 800caf4:	b087      	sub	sp, #28
 800caf6:	af00      	add	r7, sp, #0
 800caf8:	60f8      	str	r0, [r7, #12]
 800cafa:	60b9      	str	r1, [r7, #8]
 800cafc:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, src.lhs(), Func1());
 800cafe:	68b8      	ldr	r0, [r7, #8]
 800cb00:	f000 fd1c 	bl	800d53c <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE3lhsEv>
 800cb04:	4604      	mov	r4, r0
 800cb06:	f107 0310 	add.w	r3, r7, #16
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f7fa f8bf 	bl	8006c8e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800cb10:	f107 0310 	add.w	r3, r7, #16
 800cb14:	461a      	mov	r2, r3
 800cb16:	4621      	mov	r1, r4
 800cb18:	68f8      	ldr	r0, [r7, #12]
 800cb1a:	f7fa f99f 	bl	8006e5c <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
    call_assignment_no_alias(dst, src.rhs(), Func2());
 800cb1e:	68b8      	ldr	r0, [r7, #8]
 800cb20:	f000 fd18 	bl	800d554 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE3rhsEv>
 800cb24:	4604      	mov	r4, r0
 800cb26:	f107 0314 	add.w	r3, r7, #20
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	f000 fd1e 	bl	800d56c <_ZN5Eigen8internal13sub_assign_opIffEC1Ev>
 800cb30:	f107 0314 	add.w	r3, r7, #20
 800cb34:	461a      	mov	r2, r3
 800cb36:	4621      	mov	r1, r4
 800cb38:	68f8      	ldr	r0, [r7, #12]
 800cb3a:	f000 fd22 	bl	800d582 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800cb3e:	bf00      	nop
 800cb40:	371c      	adds	r7, #28
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd90      	pop	{r4, r7, pc}
	...

0800cb48 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b084      	sub	sp, #16
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	60f8      	str	r0, [r7, #12]
 800cb50:	60b9      	str	r1, [r7, #8]
 800cb52:	607a      	str	r2, [r7, #4]
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	687a      	ldr	r2, [r7, #4]
 800cb58:	68b9      	ldr	r1, [r7, #8]
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f000 fd22 	bl	800d5a4 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	db07      	blt.n	800cb76 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x2e>
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f7f8 f855 	bl	8004c18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800cb6e:	4602      	mov	r2, r0
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	4293      	cmp	r3, r2
 800cb74:	db05      	blt.n	800cb82 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x3a>
 800cb76:	4b05      	ldr	r3, [pc, #20]	; (800cb8c <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x44>)
 800cb78:	4a05      	ldr	r2, [pc, #20]	; (800cb90 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x48>)
 800cb7a:	2178      	movs	r1, #120	; 0x78
 800cb7c:	4805      	ldr	r0, [pc, #20]	; (800cb94 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x4c>)
 800cb7e:	f010 ff6d 	bl	801da5c <__assert_func>
    }
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	4618      	mov	r0, r3
 800cb86:	3710      	adds	r7, #16
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}
 800cb8c:	08024448 	.word	0x08024448
 800cb90:	08025a70 	.word	0x08025a70
 800cb94:	080245cc 	.word	0x080245cc

0800cb98 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7derivedEv>:
 800cb98:	b480      	push	{r7}
 800cb9a:	b083      	sub	sp, #12
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	4618      	mov	r0, r3
 800cba4:	370c      	adds	r7, #12
 800cba6:	46bd      	mov	sp, r7
 800cba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbac:	4770      	bx	lr

0800cbae <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>:
 800cbae:	b580      	push	{r7, lr}
 800cbb0:	b082      	sub	sp, #8
 800cbb2:	af00      	add	r7, sp, #0
 800cbb4:	6078      	str	r0, [r7, #4]
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	f000 fd05 	bl	800d5c6 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	3708      	adds	r7, #8
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	bd80      	pop	{r7, pc}

0800cbc6 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800cbc6:	b580      	push	{r7, lr}
 800cbc8:	b082      	sub	sp, #8
 800cbca:	af00      	add	r7, sp, #0
 800cbcc:	6078      	str	r0, [r7, #4]
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f7ff ffed 	bl	800cbae <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3708      	adds	r7, #8
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}

0800cbde <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4rowsEv>:
 800cbde:	b580      	push	{r7, lr}
 800cbe0:	b082      	sub	sp, #8
 800cbe2:	af00      	add	r7, sp, #0
 800cbe4:	6078      	str	r0, [r7, #4]
 800cbe6:	f7f9 fdec 	bl	80067c2 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800cbea:	4603      	mov	r3, r0
 800cbec:	4618      	mov	r0, r3
 800cbee:	3708      	adds	r7, #8
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	bd80      	pop	{r7, pc}

0800cbf4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b082      	sub	sp, #8
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
 800cbfc:	f7f9 fde9 	bl	80067d2 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800cc00:	4603      	mov	r3, r0
 800cc02:	4618      	mov	r0, r3
 800cc04:	3708      	adds	r7, #8
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}
	...

0800cc0c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800cc0c:	b5b0      	push	{r4, r5, r7, lr}
 800cc0e:	b084      	sub	sp, #16
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	60f8      	str	r0, [r7, #12]
 800cc14:	60b9      	str	r1, [r7, #8]
 800cc16:	607a      	str	r2, [r7, #4]
 800cc18:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800cc1a:	68f8      	ldr	r0, [r7, #12]
 800cc1c:	f7ff ffd3 	bl	800cbc6 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEENS_5DenseEEC1Ev>
 800cc20:	68fa      	ldr	r2, [r7, #12]
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	4614      	mov	r4, r2
 800cc26:	461d      	mov	r5, r3
 800cc28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cc2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cc2c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800cc30:	e884 0003 	stmia.w	r4, {r0, r1}
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	f103 0218 	add.w	r2, r3, #24
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	4614      	mov	r4, r2
 800cc3e:	461d      	mov	r5, r3
 800cc40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cc42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cc44:	e895 0003 	ldmia.w	r5, {r0, r1}
 800cc48:	e884 0003 	stmia.w	r4, {r0, r1}
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	3330      	adds	r3, #48	; 0x30
 800cc50:	6839      	ldr	r1, [r7, #0]
 800cc52:	4618      	mov	r0, r3
 800cc54:	f7f8 fb16 	bl	8005284 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800cc58:	68b8      	ldr	r0, [r7, #8]
 800cc5a:	f7fe fc7f 	bl	800b55c <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800cc5e:	4604      	mov	r4, r0
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	4618      	mov	r0, r3
 800cc64:	f7ff ffbb 	bl	800cbde <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4rowsEv>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	429c      	cmp	r4, r3
 800cc6c:	d10a      	bne.n	800cc84 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x78>
 800cc6e:	68b8      	ldr	r0, [r7, #8]
 800cc70:	f7fe fc81 	bl	800b576 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800cc74:	4604      	mov	r4, r0
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f7ff ffbb 	bl	800cbf4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4colsEv>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	429c      	cmp	r4, r3
 800cc82:	d005      	beq.n	800cc90 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x84>
 800cc84:	4b05      	ldr	r3, [pc, #20]	; (800cc9c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x90>)
 800cc86:	4a06      	ldr	r2, [pc, #24]	; (800cca0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x94>)
 800cc88:	2174      	movs	r1, #116	; 0x74
 800cc8a:	4806      	ldr	r0, [pc, #24]	; (800cca4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x98>)
 800cc8c:	f010 fee6 	bl	801da5c <__assert_func>
    }
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	4618      	mov	r0, r3
 800cc94:	3710      	adds	r7, #16
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bdb0      	pop	{r4, r5, r7, pc}
 800cc9a:	bf00      	nop
 800cc9c:	0801f8c4 	.word	0x0801f8c4
 800cca0:	08025b4c 	.word	0x08025b4c
 800cca4:	0801fb28 	.word	0x0801fb28

0800cca8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b082      	sub	sp, #8
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
 800ccb0:	6878      	ldr	r0, [r7, #4]
 800ccb2:	f000 f809 	bl	800ccc8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f000 fc8f 	bl	800d5dc <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE4colsEv>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3708      	adds	r7, #8
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}

0800ccc8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800ccc8:	b480      	push	{r7}
 800ccca:	b083      	sub	sp, #12
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	370c      	adds	r7, #12
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccdc:	4770      	bx	lr

0800ccde <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800ccde:	b580      	push	{r7, lr}
 800cce0:	b082      	sub	sp, #8
 800cce2:	af00      	add	r7, sp, #0
 800cce4:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	4618      	mov	r0, r3
 800ccea:	f7fe fc37 	bl	800b55c <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800ccee:	4603      	mov	r3, r0
    }
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3708      	adds	r7, #8
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}

0800ccf8 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b082      	sub	sp, #8
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f000 fc92 	bl	800d62a <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	4618      	mov	r0, r3
 800cd0a:	3708      	adds	r7, #8
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}

0800cd10 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b082      	sub	sp, #8
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	f7ff ffec 	bl	800ccf8 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	4618      	mov	r0, r3
 800cd24:	3708      	adds	r7, #8
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}

0800cd2a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800cd2a:	b580      	push	{r7, lr}
 800cd2c:	b082      	sub	sp, #8
 800cd2e:	af00      	add	r7, sp, #0
 800cd30:	6078      	str	r0, [r7, #4]
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	4618      	mov	r0, r3
 800cd36:	f7ff ffeb 	bl	800cd10 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EED1Ev>
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	3708      	adds	r7, #8
 800cd40:	46bd      	mov	sp, r7
 800cd42:	bd80      	pop	{r7, pc}

0800cd44 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<const T>
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b082      	sub	sp, #8
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f7ff ffeb 	bl	800cd2a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	4618      	mov	r0, r3
 800cd58:	3708      	adds	r7, #8
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}

0800cd5e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4DataD1Ev>:
  struct Data
 800cd5e:	b580      	push	{r7, lr}
 800cd60:	b082      	sub	sp, #8
 800cd62:	af00      	add	r7, sp, #0
 800cd64:	6078      	str	r0, [r7, #4]
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	330c      	adds	r3, #12
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	f7ff ffea 	bl	800cd44 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	3304      	adds	r3, #4
 800cd74:	4618      	mov	r0, r3
 800cd76:	f7fe fce7 	bl	800b748 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	3708      	adds	r7, #8
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}

0800cd84 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b082      	sub	sp, #8
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	4618      	mov	r0, r3
 800cd90:	f7ff ffe5 	bl	800cd5e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4DataD1Ev>
 800cd94:	6878      	ldr	r0, [r7, #4]
 800cd96:	f000 fc3d 	bl	800d614 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	3708      	adds	r7, #8
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}

0800cda4 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b082      	sub	sp, #8
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f7ff ffe8 	bl	800cd84 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffED1Ev>
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	3708      	adds	r7, #8
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	bd80      	pop	{r7, pc}

0800cdbe <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800cdbe:	b580      	push	{r7, lr}
 800cdc0:	b082      	sub	sp, #8
 800cdc2:	af00      	add	r7, sp, #0
 800cdc4:	6078      	str	r0, [r7, #4]
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	4618      	mov	r0, r3
 800cdca:	f7ff ffeb 	bl	800cda4 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	3708      	adds	r7, #8
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	bd80      	pop	{r7, pc}

0800cdd8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	ed2d 8b02 	vpush	{d8}
 800cdde:	b088      	sub	sp, #32
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
 800cde4:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800cde6:	6878      	ldr	r0, [r7, #4]
 800cde8:	f7ff f938 	bl	800c05c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE4rowsEv>
 800cdec:	4603      	mov	r3, r0
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	dd05      	ble.n	800cdfe <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800cdf2:	6878      	ldr	r0, [r7, #4]
 800cdf4:	f7ff ff58 	bl	800cca8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE4colsEv>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	dc06      	bgt.n	800ce0c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800cdfe:	4b16      	ldr	r3, [pc, #88]	; (800ce58 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800ce00:	4a16      	ldr	r2, [pc, #88]	; (800ce5c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800ce02:	f240 119b 	movw	r1, #411	; 0x19b
 800ce06:	4816      	ldr	r0, [pc, #88]	; (800ce60 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800ce08:	f010 fe28 	bl	801da5c <__assert_func>
 800ce0c:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f7ff ff5a 	bl	800ccc8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800ce14:	4602      	mov	r2, r0
 800ce16:	f107 030c 	add.w	r3, r7, #12
 800ce1a:	4611      	mov	r1, r2
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f000 fbea 	bl	800d5f6 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1ERKSG_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f7ff ff50 	bl	800ccc8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800ce28:	4602      	mov	r2, r0
 800ce2a:	f107 030c 	add.w	r3, r7, #12
 800ce2e:	6839      	ldr	r1, [r7, #0]
 800ce30:	4618      	mov	r0, r3
 800ce32:	f000 fc05 	bl	800d640 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi2EE3runISJ_EEfRKSK_RKS3_RKT_>
 800ce36:	eeb0 8a40 	vmov.f32	s16, s0
 800ce3a:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800ce3c:	f107 030c 	add.w	r3, r7, #12
 800ce40:	4618      	mov	r0, r3
 800ce42:	f7ff ffbc 	bl	800cdbe <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800ce46:	eef0 7a48 	vmov.f32	s15, s16
}
 800ce4a:	eeb0 0a67 	vmov.f32	s0, s15
 800ce4e:	3720      	adds	r7, #32
 800ce50:	46bd      	mov	sp, r7
 800ce52:	ecbd 8b02 	vpop	{d8}
 800ce56:	bd80      	pop	{r7, pc}
 800ce58:	08024944 	.word	0x08024944
 800ce5c:	08025d94 	.word	0x08025d94
 800ce60:	08024b50 	.word	0x08024b50

0800ce64 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b082      	sub	sp, #8
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800ce6c:	2202      	movs	r2, #2
 800ce6e:	2101      	movs	r1, #1
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	f7fd facf 	bl	800a414 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	f000 fbf3 	bl	800d662 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSL_>
  }
 800ce7c:	bf00      	nop
 800ce7e:	3708      	adds	r7, #8
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd80      	pop	{r7, pc}

0800ce84 <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7functorEv>:

    /** \returns the functor representing the nullary operation */
    EIGEN_DEVICE_FUNC
    const NullaryOp& functor() const { return m_functor; }
 800ce84:	b480      	push	{r7}
 800ce86:	b083      	sub	sp, #12
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	3304      	adds	r3, #4
 800ce90:	4618      	mov	r0, r3
 800ce92:	370c      	adds	r7, #12
 800ce94:	46bd      	mov	sp, r7
 800ce96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9a:	4770      	bx	lr

0800ce9c <_ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800ce9c:	b480      	push	{r7}
 800ce9e:	b083      	sub	sp, #12
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	4618      	mov	r0, r3
 800cea8:	370c      	adds	r7, #12
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb0:	4770      	bx	lr

0800ceb2 <_ZN5Eigen9BlockImplIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ENS_5DenseEEC1ERSE_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 800ceb2:	b580      	push	{r7, lr}
 800ceb4:	b084      	sub	sp, #16
 800ceb6:	af00      	add	r7, sp, #0
 800ceb8:	60f8      	str	r0, [r7, #12]
 800ceba:	60b9      	str	r1, [r7, #8]
 800cebc:	607a      	str	r2, [r7, #4]
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	687a      	ldr	r2, [r7, #4]
 800cec2:	68b9      	ldr	r1, [r7, #8]
 800cec4:	4618      	mov	r0, r3
 800cec6:	f000 fbe8 	bl	800d69a <_ZN5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERSE_i>
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	4618      	mov	r0, r3
 800cece:	3710      	adds	r7, #16
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}

0800ced4 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800ced4:	b480      	push	{r7}
 800ced6:	b083      	sub	sp, #12
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
    }
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	4618      	mov	r0, r3
 800cee0:	370c      	adds	r7, #12
 800cee2:	46bd      	mov	sp, r7
 800cee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee8:	4770      	bx	lr

0800ceea <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ENS_5DenseEEC1ERS5_i>:
 800ceea:	b580      	push	{r7, lr}
 800ceec:	b084      	sub	sp, #16
 800ceee:	af00      	add	r7, sp, #0
 800cef0:	60f8      	str	r0, [r7, #12]
 800cef2:	60b9      	str	r1, [r7, #8]
 800cef4:	607a      	str	r2, [r7, #4]
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	687a      	ldr	r2, [r7, #4]
 800cefa:	68b9      	ldr	r1, [r7, #8]
 800cefc:	4618      	mov	r0, r3
 800cefe:	f000 fbf7 	bl	800d6f0 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EEC1ERS6_i>
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	4618      	mov	r0, r3
 800cf06:	3710      	adds	r7, #16
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}

0800cf0c <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800cf0c:	b480      	push	{r7}
 800cf0e:	b083      	sub	sp, #12
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
    }
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	4618      	mov	r0, r3
 800cf18:	370c      	adds	r7, #12
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf20:	4770      	bx	lr

0800cf22 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE4colsEv>:
      : m_xpr(xpr), m_startRow(startRow), m_startCol(startCol),
                    m_blockRows(blockRows), m_blockCols(blockCols)
    {}

    EIGEN_DEVICE_FUNC inline Index rows() const { return m_blockRows.value(); }
    EIGEN_DEVICE_FUNC inline Index cols() const { return m_blockCols.value(); }
 800cf22:	b580      	push	{r7, lr}
 800cf24:	b082      	sub	sp, #8
 800cf26:	af00      	add	r7, sp, #0
 800cf28:	6078      	str	r0, [r7, #4]
 800cf2a:	f7f9 fc52 	bl	80067d2 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	4618      	mov	r0, r3
 800cf32:	3708      	adds	r7, #8
 800cf34:	46bd      	mov	sp, r7
 800cf36:	bd80      	pop	{r7, pc}

0800cf38 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE4rowsEv>:
    EIGEN_DEVICE_FUNC inline Index rows() const { return m_blockRows.value(); }
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b082      	sub	sp, #8
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
 800cf40:	f7f9 fc47 	bl	80067d2 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800cf44:	4603      	mov	r3, r0
 800cf46:	4618      	mov	r0, r3
 800cf48:	3708      	adds	r7, #8
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}

0800cf4e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800cf4e:	b580      	push	{r7, lr}
 800cf50:	b082      	sub	sp, #8
 800cf52:	af00      	add	r7, sp, #0
 800cf54:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	3304      	adds	r3, #4
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f7ff f991 	bl	800c282 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4colsEv>
 800cf60:	4603      	mov	r3, r0
    }
 800cf62:	4618      	mov	r0, r3
 800cf64:	3708      	adds	r7, #8
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}

0800cf6a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1ERKSP_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800cf6a:	b580      	push	{r7, lr}
 800cf6c:	b082      	sub	sp, #8
 800cf6e:	af00      	add	r7, sp, #0
 800cf70:	6078      	str	r0, [r7, #4]
 800cf72:	6039      	str	r1, [r7, #0]
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	6839      	ldr	r1, [r7, #0]
 800cf78:	4618      	mov	r0, r3
 800cf7a:	f000 fbeb 	bl	800d754 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1ERKSP_>
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	4618      	mov	r0, r3
 800cf82:	3708      	adds	r7, #8
 800cf84:	46bd      	mov	sp, r7
 800cf86:	bd80      	pop	{r7, pc}

0800cf88 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800cf88:	b480      	push	{r7}
 800cf8a:	b083      	sub	sp, #12
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	4618      	mov	r0, r3
 800cf94:	370c      	adds	r7, #12
 800cf96:	46bd      	mov	sp, r7
 800cf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9c:	4770      	bx	lr

0800cf9e <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>:
 800cf9e:	b480      	push	{r7}
 800cfa0:	b083      	sub	sp, #12
 800cfa2:	af00      	add	r7, sp, #0
 800cfa4:	6078      	str	r0, [r7, #4]
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	370c      	adds	r7, #12
 800cfac:	46bd      	mov	sp, r7
 800cfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb2:	4770      	bx	lr

0800cfb4 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>:
 800cfb4:	b480      	push	{r7}
 800cfb6:	b083      	sub	sp, #12
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	370c      	adds	r7, #12
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc8:	4770      	bx	lr

0800cfca <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>:
 800cfca:	b480      	push	{r7}
 800cfcc:	b083      	sub	sp, #12
 800cfce:	af00      	add	r7, sp, #0
 800cfd0:	6078      	str	r0, [r7, #4]
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	370c      	adds	r7, #12
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfde:	4770      	bx	lr

0800cfe0 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS5_IS7_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEELi1ELi1ELb0EEEEEKNS9_IKNS8_ISB_EELi1ELi1ELb0EEEEEEELi0ELi2EE3runISS_EEfRKST_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b084      	sub	sp, #16
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	60f8      	str	r0, [r7, #12]
 800cfe8:	60b9      	str	r1, [r7, #8]
 800cfea:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800cfec:	68b9      	ldr	r1, [r7, #8]
 800cfee:	68f8      	ldr	r0, [r7, #12]
 800cff0:	f000 fbbf 	bl	800d772 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS5_IS7_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEELi1ELi1ELb0EEEEEKNS9_IKNS8_ISB_EELi1ELi1ELb0EEEEEEELi0ELi1EE3runERKST_RKS3_>
 800cff4:	eef0 7a40 	vmov.f32	s15, s0
  }
 800cff8:	eeb0 0a67 	vmov.f32	s0, s15
 800cffc:	3710      	adds	r7, #16
 800cffe:	46bd      	mov	sp, r7
 800d000:	bd80      	pop	{r7, pc}

0800d002 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800d002:	b580      	push	{r7, lr}
 800d004:	b082      	sub	sp, #8
 800d006:	af00      	add	r7, sp, #0
 800d008:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800d00a:	2200      	movs	r2, #0
 800d00c:	2102      	movs	r1, #2
 800d00e:	6878      	ldr	r0, [r7, #4]
 800d010:	f7fc ff39 	bl	8009e86 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800d014:	6878      	ldr	r0, [r7, #4]
 800d016:	f000 fbbd 	bl	800d794 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSP_>
  }
 800d01a:	bf00      	nop
 800d01c:	3708      	adds	r7, #8
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}

0800d022 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERS4_i>:
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(BlockImpl_dense)

    /** Column or Row constructor
      */
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    BlockImpl_dense(XprType& xpr, Index i)
 800d022:	b5b0      	push	{r4, r5, r7, lr}
 800d024:	b084      	sub	sp, #16
 800d026:	af00      	add	r7, sp, #0
 800d028:	60f8      	str	r0, [r7, #12]
 800d02a:	60b9      	str	r1, [r7, #8]
 800d02c:	607a      	str	r2, [r7, #4]
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
             BlockRows==1 ? 1 : xpr.rows(),
             BlockCols==1 ? 1 : xpr.cols()),
        m_xpr(xpr),
        m_startRow( (BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) ? i : 0),
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d02e:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d030:	68bb      	ldr	r3, [r7, #8]
 800d032:	4618      	mov	r0, r3
 800d034:	f7fa ff34 	bl	8007ea0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 800d038:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800d03a:	68b8      	ldr	r0, [r7, #8]
 800d03c:	f000 fbba 	bl	800d7b4 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 800d040:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	fb02 f303 	mul.w	r3, r2, r3
 800d048:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d04a:	441d      	add	r5, r3
 800d04c:	68bb      	ldr	r3, [r7, #8]
 800d04e:	4618      	mov	r0, r3
 800d050:	f7f7 fde2 	bl	8004c18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800d054:	4603      	mov	r3, r0
 800d056:	2201      	movs	r2, #1
 800d058:	4629      	mov	r1, r5
 800d05a:	4620      	mov	r0, r4
 800d05c:	f000 fbc2 	bl	800d7e4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii>
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	68ba      	ldr	r2, [r7, #8]
 800d064:	609a      	str	r2, [r3, #8]
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	330c      	adds	r3, #12
 800d06a:	6879      	ldr	r1, [r7, #4]
 800d06c:	4618      	mov	r0, r3
 800d06e:	f000 fbf7 	bl	800d860 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	3310      	adds	r3, #16
 800d076:	2100      	movs	r1, #0
 800d078:	4618      	mov	r0, r3
 800d07a:	f000 fbf1 	bl	800d860 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
    {
      init();
 800d07e:	68f8      	ldr	r0, [r7, #12]
 800d080:	f000 fbfd 	bl	800d87e <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE4initEv>
    }
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	4618      	mov	r0, r3
 800d088:	3710      	adds	r7, #16
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bdb0      	pop	{r4, r5, r7, pc}

0800d08e <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800d08e:	b5b0      	push	{r4, r5, r7, lr}
 800d090:	b084      	sub	sp, #16
 800d092:	af00      	add	r7, sp, #0
 800d094:	60f8      	str	r0, [r7, #12]
 800d096:	60b9      	str	r1, [r7, #8]
 800d098:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d09a:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d09c:	68bb      	ldr	r3, [r7, #8]
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f7f9 fe9d 	bl	8006dde <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>
 800d0a4:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800d0a6:	68b8      	ldr	r0, [r7, #8]
 800d0a8:	f7f9 ff6a 	bl	8006f80 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 800d0ac:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	fb02 f303 	mul.w	r3, r2, r3
 800d0b4:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d0b6:	441d      	add	r5, r3
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f7f7 fe5d 	bl	8004d7a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800d0c0:	4602      	mov	r2, r0
 800d0c2:	2301      	movs	r3, #1
 800d0c4:	4629      	mov	r1, r5
 800d0c6:	4620      	mov	r0, r4
 800d0c8:	f000 fc00 	bl	800d8cc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii>
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	68ba      	ldr	r2, [r7, #8]
 800d0d0:	609a      	str	r2, [r3, #8]
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	330c      	adds	r3, #12
 800d0d6:	2100      	movs	r1, #0
 800d0d8:	4618      	mov	r0, r3
 800d0da:	f000 fbc1 	bl	800d860 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	3310      	adds	r3, #16
 800d0e2:	6879      	ldr	r1, [r7, #4]
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	f000 fc2f 	bl	800d948 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
      init();
 800d0ea:	68f8      	ldr	r0, [r7, #12]
 800d0ec:	f000 fc46 	bl	800d97c <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE4initEv>
    }
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	3710      	adds	r7, #16
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	bdb0      	pop	{r4, r5, r7, pc}

0800d0fa <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800d0fa:	b580      	push	{r7, lr}
 800d0fc:	b082      	sub	sp, #8
 800d0fe:	af00      	add	r7, sp, #0
 800d100:	6078      	str	r0, [r7, #4]
 800d102:	6039      	str	r1, [r7, #0]
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	6839      	ldr	r1, [r7, #0]
 800d108:	4618      	mov	r0, r3
 800d10a:	f000 fc47 	bl	800d99c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	4618      	mov	r0, r3
 800d112:	3708      	adds	r7, #8
 800d114:	46bd      	mov	sp, r7
 800d116:	bd80      	pop	{r7, pc}

0800d118 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800d118:	b580      	push	{r7, lr}
 800d11a:	b084      	sub	sp, #16
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
 800d120:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800d122:	6839      	ldr	r1, [r7, #0]
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f000 fc4b 	bl	800d9c0 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 800d12a:	eef0 7a40 	vmov.f32	s15, s0
 800d12e:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800d132:	6839      	ldr	r1, [r7, #0]
 800d134:	6878      	ldr	r0, [r7, #4]
 800d136:	f000 fc54 	bl	800d9e2 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSM_RKS3_>
 800d13a:	eef0 7a40 	vmov.f32	s15, s0
 800d13e:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800d142:	f107 020c 	add.w	r2, r7, #12
 800d146:	f107 0308 	add.w	r3, r7, #8
 800d14a:	4619      	mov	r1, r3
 800d14c:	6838      	ldr	r0, [r7, #0]
 800d14e:	f7fb fefe 	bl	8008f4e <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800d152:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d156:	eeb0 0a67 	vmov.f32	s0, s15
 800d15a:	3710      	adds	r7, #16
 800d15c:	46bd      	mov	sp, r7
 800d15e:	bd80      	pop	{r7, pc}

0800d160 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductIS2_S2_Li0EEES6_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800d160:	b580      	push	{r7, lr}
 800d162:	b082      	sub	sp, #8
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
 800d168:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800d16a:	6839      	ldr	r1, [r7, #0]
 800d16c:	6878      	ldr	r0, [r7, #4]
 800d16e:	f000 fc5c 	bl	800da2a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductIS2_S2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800d172:	bf00      	nop
 800d174:	3708      	adds	r7, #8
 800d176:	46bd      	mov	sp, r7
 800d178:	bd80      	pop	{r7, pc}

0800d17a <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS0_10IndexBasedEfEC1ERKS5_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 800d17a:	b590      	push	{r4, r7, lr}
 800d17c:	b083      	sub	sp, #12
 800d17e:	af00      	add	r7, sp, #0
 800d180:	6078      	str	r0, [r7, #4]
 800d182:	6039      	str	r1, [r7, #0]
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f000 fc7d 	bl	800da84 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>
 800d18a:	687c      	ldr	r4, [r7, #4]
 800d18c:	6838      	ldr	r0, [r7, #0]
 800d18e:	f000 fc6d 	bl	800da6c <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>
 800d192:	4603      	mov	r3, r0
 800d194:	4619      	mov	r1, r3
 800d196:	4620      	mov	r0, r4
 800d198:	f7fa f9e0 	bl	800755c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	4618      	mov	r0, r3
 800d1a0:	370c      	adds	r7, #12
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd90      	pop	{r4, r7, pc}

0800d1a6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 800d1a6:	b480      	push	{r7}
 800d1a8:	b083      	sub	sp, #12
 800d1aa:	af00      	add	r7, sp, #0
 800d1ac:	6078      	str	r0, [r7, #4]
 800d1ae:	6039      	str	r1, [r7, #0]
      : inner;
 800d1b0:	687b      	ldr	r3, [r7, #4]
  }
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	370c      	adds	r7, #12
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1bc:	4770      	bx	lr

0800d1be <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 800d1be:	b480      	push	{r7}
 800d1c0:	b083      	sub	sp, #12
 800d1c2:	af00      	add	r7, sp, #0
 800d1c4:	6078      	str	r0, [r7, #4]
 800d1c6:	6039      	str	r1, [r7, #0]
      : outer;
 800d1c8:	683b      	ldr	r3, [r7, #0]
  }
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	370c      	adds	r7, #12
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d4:	4770      	bx	lr

0800d1d6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 800d1d6:	b5b0      	push	{r4, r5, r7, lr}
 800d1d8:	b086      	sub	sp, #24
 800d1da:	af00      	add	r7, sp, #0
 800d1dc:	60f8      	str	r0, [r7, #12]
 800d1de:	60b9      	str	r1, [r7, #8]
 800d1e0:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	689c      	ldr	r4, [r3, #8]
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	687a      	ldr	r2, [r7, #4]
 800d1ec:	68b9      	ldr	r1, [r7, #8]
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f000 fc53 	bl	800da9a <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEE8coeffRefEii>
 800d1f4:	4605      	mov	r5, r0
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	685b      	ldr	r3, [r3, #4]
 800d1fa:	687a      	ldr	r2, [r7, #4]
 800d1fc:	68b9      	ldr	r1, [r7, #8]
 800d1fe:	4618      	mov	r0, r3
 800d200:	f000 fc63 	bl	800daca <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffE5coeffEii>
 800d204:	eef0 7a40 	vmov.f32	s15, s0
 800d208:	edc7 7a05 	vstr	s15, [r7, #20]
 800d20c:	f107 0314 	add.w	r3, r7, #20
 800d210:	461a      	mov	r2, r3
 800d212:	4629      	mov	r1, r5
 800d214:	4620      	mov	r0, r4
 800d216:	f7fb f8a9 	bl	800836c <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800d21a:	bf00      	nop
 800d21c:	3718      	adds	r7, #24
 800d21e:	46bd      	mov	sp, r7
 800d220:	bdb0      	pop	{r4, r5, r7, pc}

0800d222 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800d222:	b580      	push	{r7, lr}
 800d224:	b082      	sub	sp, #8
 800d226:	af00      	add	r7, sp, #0
 800d228:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800d22a:	2202      	movs	r2, #2
 800d22c:	2100      	movs	r1, #0
 800d22e:	6878      	ldr	r0, [r7, #4]
 800d230:	f7ff fadf 	bl	800c7f2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800d234:	6878      	ldr	r0, [r7, #4]
 800d236:	f000 fc7b 	bl	800db30 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSG_>
  }
 800d23a:	bf00      	nop
 800d23c:	3708      	adds	r7, #8
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}

0800d242 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800d242:	b480      	push	{r7}
 800d244:	b083      	sub	sp, #12
 800d246:	af00      	add	r7, sp, #0
 800d248:	6078      	str	r0, [r7, #4]
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	4618      	mov	r0, r3
 800d250:	370c      	adds	r7, #12
 800d252:	46bd      	mov	sp, r7
 800d254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d258:	4770      	bx	lr

0800d25a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800d25a:	b480      	push	{r7}
 800d25c:	b083      	sub	sp, #12
 800d25e:	af00      	add	r7, sp, #0
 800d260:	6078      	str	r0, [r7, #4]
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	3304      	adds	r3, #4
 800d266:	4618      	mov	r0, r3
 800d268:	370c      	adds	r7, #12
 800d26a:	46bd      	mov	sp, r7
 800d26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d270:	4770      	bx	lr

0800d272 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEENS_10DenseShapeES7_Li3EE6evalToINS2_IfLi3ELi1ELi0ELi3ELi1EEEEEvRT_RKS3_RKS6_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800d272:	b580      	push	{r7, lr}
 800d274:	b088      	sub	sp, #32
 800d276:	af00      	add	r7, sp, #0
 800d278:	60f8      	str	r0, [r7, #12]
 800d27a:	60b9      	str	r1, [r7, #8]
 800d27c:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 800d27e:	f107 0314 	add.w	r3, r7, #20
 800d282:	687a      	ldr	r2, [r7, #4]
 800d284:	68b9      	ldr	r1, [r7, #8]
 800d286:	4618      	mov	r0, r3
 800d288:	f000 fc62 	bl	800db50 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductINS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS9_EE>
 800d28c:	f107 031c 	add.w	r3, r7, #28
 800d290:	4618      	mov	r0, r3
 800d292:	f7f9 fcfc 	bl	8006c8e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800d296:	f107 021c 	add.w	r2, r7, #28
 800d29a:	f107 0314 	add.w	r3, r7, #20
 800d29e:	4619      	mov	r1, r3
 800d2a0:	68f8      	ldr	r0, [r7, #12]
 800d2a2:	f000 fc6c 	bl	800db7e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800d2a6:	bf00      	nop
 800d2a8:	3720      	adds	r7, #32
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}
	...

0800d2b0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b086      	sub	sp, #24
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	60f8      	str	r0, [r7, #12]
 800d2b8:	60b9      	str	r1, [r7, #8]
 800d2ba:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	2b01      	cmp	r3, #1
 800d2c0:	d108      	bne.n	800d2d4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x24>
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2b01      	cmp	r3, #1
 800d2c6:	d105      	bne.n	800d2d4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x24>
 800d2c8:	68bb      	ldr	r3, [r7, #8]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	db02      	blt.n	800d2d4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x24>
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	da06      	bge.n	800d2e2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x32>
 800d2d4:	4b0c      	ldr	r3, [pc, #48]	; (800d308 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x58>)
 800d2d6:	4a0d      	ldr	r2, [pc, #52]	; (800d30c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x5c>)
 800d2d8:	f240 1111 	movw	r1, #273	; 0x111
 800d2dc:	480c      	ldr	r0, [pc, #48]	; (800d310 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x60>)
 800d2de:	f010 fbbd 	bl	801da5c <__assert_func>
 800d2e2:	68bb      	ldr	r3, [r7, #8]
 800d2e4:	617b      	str	r3, [r7, #20]
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	613b      	str	r3, [r7, #16]
  }
 800d2ea:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 800d2ec:	68f8      	ldr	r0, [r7, #12]
 800d2ee:	68bb      	ldr	r3, [r7, #8]
 800d2f0:	687a      	ldr	r2, [r7, #4]
 800d2f2:	fb02 f103 	mul.w	r1, r2, r3
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	68ba      	ldr	r2, [r7, #8]
 800d2fa:	f000 fc51 	bl	800dba0 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE6resizeEiii>
    }
 800d2fe:	bf00      	nop
 800d300:	3718      	adds	r7, #24
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}
 800d306:	bf00      	nop
 800d308:	08022354 	.word	0x08022354
 800d30c:	08025f5c 	.word	0x08025f5c
 800d310:	08022570 	.word	0x08022570

0800d314 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE16nestedExpressionEv>:
  EIGEN_DEVICE_FUNC const XprTypeNestedCleaned& nestedExpression() const { return m_xpr; }
 800d314:	b480      	push	{r7}
 800d316:	b083      	sub	sp, #12
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	4618      	mov	r0, r3
 800d320:	370c      	adds	r7, #12
 800d322:	46bd      	mov	sp, r7
 800d324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d328:	4770      	bx	lr

0800d32a <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS7_INS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS1_EEEERKT_>:
    explicit Matrix(const T& x)
 800d32a:	b580      	push	{r7, lr}
 800d32c:	b082      	sub	sp, #8
 800d32e:	af00      	add	r7, sp, #0
 800d330:	6078      	str	r0, [r7, #4]
 800d332:	6039      	str	r1, [r7, #0]
    {
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	4618      	mov	r0, r3
 800d338:	f7f7 fb9a 	bl	8004a70 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 800d33c:	f7f7 fba8 	bl	8004a90 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	6839      	ldr	r1, [r7, #0]
 800d344:	4618      	mov	r0, r3
 800d346:	f000 fc38 	bl	800dbba <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS2_EESI_EEvRKNS_9DenseBaseIT0_EE>
    }
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	4618      	mov	r0, r3
 800d34e:	3708      	adds	r7, #8
 800d350:	46bd      	mov	sp, r7
 800d352:	bd80      	pop	{r7, pc}

0800d354 <_ZN5Eigen8internal15compute_inverseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_Li1EE3runERKS3_RS3_>:
  static inline void run(const MatrixType& matrix, ResultType& result)
 800d354:	b580      	push	{r7, lr}
 800d356:	ed2d 8b02 	vpush	{d8}
 800d35a:	b084      	sub	sp, #16
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
 800d360:	6039      	str	r1, [r7, #0]
    internal::evaluator<MatrixType> matrixEval(matrix);
 800d362:	f107 030c 	add.w	r3, r7, #12
 800d366:	6879      	ldr	r1, [r7, #4]
 800d368:	4618      	mov	r0, r3
 800d36a:	f7fc ff50 	bl	800a20e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
    result.coeffRef(0,0) = Scalar(1) / matrixEval.coeff(0,0);
 800d36e:	f107 030c 	add.w	r3, r7, #12
 800d372:	2200      	movs	r2, #0
 800d374:	2100      	movs	r1, #0
 800d376:	4618      	mov	r0, r3
 800d378:	f000 fc2c 	bl	800dbd4 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEii>
 800d37c:	4603      	mov	r3, r0
 800d37e:	ed93 8a00 	vldr	s16, [r3]
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	2200      	movs	r2, #0
 800d386:	2100      	movs	r1, #0
 800d388:	4618      	mov	r0, r3
 800d38a:	f7f9 f968 	bl	800665e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>
 800d38e:	4603      	mov	r3, r0
 800d390:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d394:	eec7 7a08 	vdiv.f32	s15, s14, s16
 800d398:	edc3 7a00 	vstr	s15, [r3]
    internal::evaluator<MatrixType> matrixEval(matrix);
 800d39c:	f107 030c 	add.w	r3, r7, #12
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	f7fb fe1b 	bl	8008fdc <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
  }
 800d3a6:	bf00      	nop
 800d3a8:	3710      	adds	r7, #16
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	ecbd 8b02 	vpop	{d8}
 800d3b0:	bd80      	pop	{r7, pc}

0800d3b2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800d3b2:	b580      	push	{r7, lr}
 800d3b4:	b082      	sub	sp, #8
 800d3b6:	af00      	add	r7, sp, #0
 800d3b8:	6078      	str	r0, [r7, #4]
 800d3ba:	6878      	ldr	r0, [r7, #4]
 800d3bc:	f7f8 fbe9 	bl	8005b92 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	f7f8 fc23 	bl	8005c0e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	3708      	adds	r7, #8
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bd80      	pop	{r7, pc}

0800d3d2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4sizeEv>:
  inline Index size() const EIGEN_NOEXCEPT { return rows() * cols(); }
 800d3d2:	b590      	push	{r4, r7, lr}
 800d3d4:	b083      	sub	sp, #12
 800d3d6:	af00      	add	r7, sp, #0
 800d3d8:	6078      	str	r0, [r7, #4]
 800d3da:	6878      	ldr	r0, [r7, #4]
 800d3dc:	f7ff ffe9 	bl	800d3b2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800d3e0:	4604      	mov	r4, r0
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	f000 f807 	bl	800d3f6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	fb04 f303 	mul.w	r3, r4, r3
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	370c      	adds	r7, #12
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bd90      	pop	{r4, r7, pc}

0800d3f6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800d3f6:	b580      	push	{r7, lr}
 800d3f8:	b082      	sub	sp, #8
 800d3fa:	af00      	add	r7, sp, #0
 800d3fc:	6078      	str	r0, [r7, #4]
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	f7f8 fbc7 	bl	8005b92 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800d404:	4603      	mov	r3, r0
 800d406:	4618      	mov	r0, r3
 800d408:	f7f8 fc0c 	bl	8005c24 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800d40c:	4603      	mov	r3, r0
 800d40e:	4618      	mov	r0, r3
 800d410:	3708      	adds	r7, #8
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}

0800d416 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800d416:	b5b0      	push	{r4, r5, r7, lr}
 800d418:	b084      	sub	sp, #16
 800d41a:	af00      	add	r7, sp, #0
 800d41c:	60f8      	str	r0, [r7, #12]
 800d41e:	60b9      	str	r1, [r7, #8]
 800d420:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d422:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d424:	68bb      	ldr	r3, [r7, #8]
 800d426:	4618      	mov	r0, r3
 800d428:	f7f9 fcd9 	bl	8006dde <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>
 800d42c:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800d42e:	68b8      	ldr	r0, [r7, #8]
 800d430:	f000 fa35 	bl	800d89e <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>
 800d434:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	fb02 f303 	mul.w	r3, r2, r3
 800d43c:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d43e:	18e9      	adds	r1, r5, r3
 800d440:	2301      	movs	r3, #1
 800d442:	2201      	movs	r2, #1
 800d444:	4620      	mov	r0, r4
 800d446:	f000 fbe9 	bl	800dc1c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii>
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	68ba      	ldr	r2, [r7, #8]
 800d44e:	609a      	str	r2, [r3, #8]
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	330c      	adds	r3, #12
 800d454:	6879      	ldr	r1, [r7, #4]
 800d456:	4618      	mov	r0, r3
 800d458:	f000 fa02 	bl	800d860 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	3310      	adds	r3, #16
 800d460:	2100      	movs	r1, #0
 800d462:	4618      	mov	r0, r3
 800d464:	f000 fa70 	bl	800d948 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
      init();
 800d468:	68f8      	ldr	r0, [r7, #12]
 800d46a:	f000 fc15 	bl	800dc98 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE4initEv>
    }
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	4618      	mov	r0, r3
 800d472:	3710      	adds	r7, #16
 800d474:	46bd      	mov	sp, r7
 800d476:	bdb0      	pop	{r4, r5, r7, pc}

0800d478 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800d478:	b5b0      	push	{r4, r5, r7, lr}
 800d47a:	b084      	sub	sp, #16
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	60f8      	str	r0, [r7, #12]
 800d480:	60b9      	str	r1, [r7, #8]
 800d482:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d484:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d486:	68bb      	ldr	r3, [r7, #8]
 800d488:	4618      	mov	r0, r3
 800d48a:	f7fd fd27 	bl	800aedc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4dataEv>
 800d48e:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800d490:	68b8      	ldr	r0, [r7, #8]
 800d492:	f000 fc11 	bl	800dcb8 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11innerStrideEv>
 800d496:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	fb02 f303 	mul.w	r3, r2, r3
 800d49e:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d4a0:	18e9      	adds	r1, r5, r3
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	2201      	movs	r2, #1
 800d4a6:	4620      	mov	r0, r4
 800d4a8:	f000 fc1e 	bl	800dce8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii>
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	68ba      	ldr	r2, [r7, #8]
 800d4b0:	609a      	str	r2, [r3, #8]
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	330c      	adds	r3, #12
 800d4b6:	6879      	ldr	r1, [r7, #4]
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	f000 fa45 	bl	800d948 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	330d      	adds	r3, #13
 800d4c2:	6879      	ldr	r1, [r7, #4]
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	f000 fa3f 	bl	800d948 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
      init();
 800d4ca:	68f8      	ldr	r0, [r7, #12]
 800d4cc:	f000 fc4a 	bl	800dd64 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE4initEv>
    }
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	3710      	adds	r7, #16
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	bdb0      	pop	{r4, r5, r7, pc}

0800d4da <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800d4da:	b580      	push	{r7, lr}
 800d4dc:	b082      	sub	sp, #8
 800d4de:	af00      	add	r7, sp, #0
 800d4e0:	6078      	str	r0, [r7, #4]
 800d4e2:	6039      	str	r1, [r7, #0]
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	6839      	ldr	r1, [r7, #0]
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f000 fc4b 	bl	800dd84 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	3708      	adds	r7, #8
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bd80      	pop	{r7, pc}

0800d4f8 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b082      	sub	sp, #8
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
 800d500:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800d502:	2200      	movs	r2, #0
 800d504:	2100      	movs	r1, #0
 800d506:	6878      	ldr	r0, [r7, #4]
 800d508:	f000 fc4e 	bl	800dda8 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800d50c:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d510:	eeb0 0a67 	vmov.f32	s0, s15
 800d514:	3708      	adds	r7, #8
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}

0800d51a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800d51a:	b580      	push	{r7, lr}
 800d51c:	b086      	sub	sp, #24
 800d51e:	af00      	add	r7, sp, #0
 800d520:	60f8      	str	r0, [r7, #12]
 800d522:	60b9      	str	r1, [r7, #8]
 800d524:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800d52a:	687a      	ldr	r2, [r7, #4]
 800d52c:	68b9      	ldr	r1, [r7, #8]
 800d52e:	6978      	ldr	r0, [r7, #20]
 800d530:	f000 fc4d 	bl	800ddce <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_9assign_opIffEENS0_13sub_assign_opIffEEE3runINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KS7_EES9_EEvRS3_RKT_RKT0_>
}
 800d534:	bf00      	nop
 800d536:	3718      	adds	r7, #24
 800d538:	46bd      	mov	sp, r7
 800d53a:	bd80      	pop	{r7, pc}

0800d53c <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800d53c:	b480      	push	{r7}
 800d53e:	b083      	sub	sp, #12
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	4618      	mov	r0, r3
 800d54a:	370c      	adds	r7, #12
 800d54c:	46bd      	mov	sp, r7
 800d54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d552:	4770      	bx	lr

0800d554 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800d554:	b480      	push	{r7}
 800d556:	b083      	sub	sp, #12
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	3304      	adds	r3, #4
 800d560:	4618      	mov	r0, r3
 800d562:	370c      	adds	r7, #12
 800d564:	46bd      	mov	sp, r7
 800d566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56a:	4770      	bx	lr

0800d56c <_ZN5Eigen8internal13sub_assign_opIffEC1Ev>:
  * \brief Template functor for scalar/packet assignment with subtraction
  *
  */
template<typename DstScalar,typename SrcScalar> struct sub_assign_op {

  EIGEN_EMPTY_STRUCT_CTOR(sub_assign_op)
 800d56c:	b480      	push	{r7}
 800d56e:	b083      	sub	sp, #12
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	4618      	mov	r0, r3
 800d578:	370c      	adds	r7, #12
 800d57a:	46bd      	mov	sp, r7
 800d57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d580:	4770      	bx	lr

0800d582 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800d582:	b580      	push	{r7, lr}
 800d584:	b086      	sub	sp, #24
 800d586:	af00      	add	r7, sp, #0
 800d588:	60f8      	str	r0, [r7, #12]
 800d58a:	60b9      	str	r1, [r7, #8]
 800d58c:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800d592:	687a      	ldr	r2, [r7, #4]
 800d594:	68b9      	ldr	r1, [r7, #8]
 800d596:	6978      	ldr	r0, [r7, #20]
 800d598:	f000 fc44 	bl	800de24 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>
}
 800d59c:	bf00      	nop
 800d59e:	3718      	adds	r7, #24
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bd80      	pop	{r7, pc}

0800d5a4 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ENS_5DenseEEC1ERS3_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b084      	sub	sp, #16
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	60f8      	str	r0, [r7, #12]
 800d5ac:	60b9      	str	r1, [r7, #8]
 800d5ae:	607a      	str	r2, [r7, #4]
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	687a      	ldr	r2, [r7, #4]
 800d5b4:	68b9      	ldr	r1, [r7, #8]
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f000 fc6e 	bl	800de98 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EEC1ERS4_i>
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	4618      	mov	r0, r3
 800d5c0:	3710      	adds	r7, #16
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bd80      	pop	{r7, pc}

0800d5c6 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800d5c6:	b480      	push	{r7}
 800d5c8:	b083      	sub	sp, #12
 800d5ca:	af00      	add	r7, sp, #0
 800d5cc:	6078      	str	r0, [r7, #4]
    }
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	370c      	adds	r7, #12
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5da:	4770      	bx	lr

0800d5dc <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b082      	sub	sp, #8
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f7fd ffc5 	bl	800b576 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800d5ec:	4603      	mov	r3, r0
    }
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	3708      	adds	r7, #8
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}

0800d5f6 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1ERKSG_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800d5f6:	b580      	push	{r7, lr}
 800d5f8:	b082      	sub	sp, #8
 800d5fa:	af00      	add	r7, sp, #0
 800d5fc:	6078      	str	r0, [r7, #4]
 800d5fe:	6039      	str	r1, [r7, #0]
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	6839      	ldr	r1, [r7, #0]
 800d604:	4618      	mov	r0, r3
 800d606:	f000 fc7d 	bl	800df04 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1ERKSG_>
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	4618      	mov	r0, r3
 800d60e:	3708      	adds	r7, #8
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}

0800d614 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800d614:	b480      	push	{r7}
 800d616:	b083      	sub	sp, #12
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	4618      	mov	r0, r3
 800d620:	370c      	adds	r7, #12
 800d622:	46bd      	mov	sp, r7
 800d624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d628:	4770      	bx	lr

0800d62a <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>:
 800d62a:	b480      	push	{r7}
 800d62c:	b083      	sub	sp, #12
 800d62e:	af00      	add	r7, sp, #0
 800d630:	6078      	str	r0, [r7, #4]
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	4618      	mov	r0, r3
 800d636:	370c      	adds	r7, #12
 800d638:	46bd      	mov	sp, r7
 800d63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63e:	4770      	bx	lr

0800d640 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi2EE3runISJ_EEfRKSK_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800d640:	b580      	push	{r7, lr}
 800d642:	b084      	sub	sp, #16
 800d644:	af00      	add	r7, sp, #0
 800d646:	60f8      	str	r0, [r7, #12]
 800d648:	60b9      	str	r1, [r7, #8]
 800d64a:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800d64c:	68b9      	ldr	r1, [r7, #8]
 800d64e:	68f8      	ldr	r0, [r7, #12]
 800d650:	f000 fc67 	bl	800df22 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi3EE3runERKSK_RKS3_>
 800d654:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d658:	eeb0 0a67 	vmov.f32	s0, s15
 800d65c:	3710      	adds	r7, #16
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd80      	pop	{r7, pc}

0800d662 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800d662:	b580      	push	{r7, lr}
 800d664:	b082      	sub	sp, #8
 800d666:	af00      	add	r7, sp, #0
 800d668:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800d66a:	2200      	movs	r2, #0
 800d66c:	2102      	movs	r1, #2
 800d66e:	6878      	ldr	r0, [r7, #4]
 800d670:	f7fc fed0 	bl	800a414 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800d674:	6878      	ldr	r0, [r7, #4]
 800d676:	f000 fc78 	bl	800df6a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSL_>
  }
 800d67a:	bf00      	nop
 800d67c:	3708      	adds	r7, #8
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}

0800d682 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>:
 800d682:	b580      	push	{r7, lr}
 800d684:	b082      	sub	sp, #8
 800d686:	af00      	add	r7, sp, #0
 800d688:	6078      	str	r0, [r7, #4]
 800d68a:	6878      	ldr	r0, [r7, #4]
 800d68c:	f000 fc7d 	bl	800df8a <_ZN5Eigen9DenseBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	4618      	mov	r0, r3
 800d694:	3708      	adds	r7, #8
 800d696:	46bd      	mov	sp, r7
 800d698:	bd80      	pop	{r7, pc}

0800d69a <_ZN5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERSE_i>:
    inline BlockImpl_dense(XprType& xpr, Index i)
 800d69a:	b580      	push	{r7, lr}
 800d69c:	b084      	sub	sp, #16
 800d69e:	af00      	add	r7, sp, #0
 800d6a0:	60f8      	str	r0, [r7, #12]
 800d6a2:	60b9      	str	r1, [r7, #8]
 800d6a4:	607a      	str	r2, [r7, #4]
        m_blockCols(BlockCols==1 ? 1 : xpr.cols())
 800d6a6:	68f8      	ldr	r0, [r7, #12]
 800d6a8:	f7ff ffeb 	bl	800d682 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	68b9      	ldr	r1, [r7, #8]
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f7f6 fe79 	bl	80043a8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	3310      	adds	r3, #16
 800d6ba:	6879      	ldr	r1, [r7, #4]
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f000 f8cf 	bl	800d860 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	3314      	adds	r3, #20
 800d6c6:	2100      	movs	r1, #0
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f000 f93d 	bl	800d948 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	3315      	adds	r3, #21
 800d6d2:	2101      	movs	r1, #1
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f7f9 f84f 	bl	8006778 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	3316      	adds	r3, #22
 800d6de:	2101      	movs	r1, #1
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	f7f9 f849 	bl	8006778 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
    {}
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	3710      	adds	r7, #16
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	bd80      	pop	{r7, pc}

0800d6f0 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EEC1ERS6_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800d6f0:	b5b0      	push	{r4, r5, r7, lr}
 800d6f2:	b084      	sub	sp, #16
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	60f8      	str	r0, [r7, #12]
 800d6f8:	60b9      	str	r1, [r7, #8]
 800d6fa:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d6fc:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d6fe:	68b8      	ldr	r0, [r7, #8]
 800d700:	f000 fc4e 	bl	800dfa0 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE4dataEv>
 800d704:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800d706:	68b8      	ldr	r0, [r7, #8]
 800d708:	f000 fc5e 	bl	800dfc8 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11innerStrideEv>
 800d70c:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	fb02 f303 	mul.w	r3, r2, r3
 800d714:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d716:	18e9      	adds	r1, r5, r3
 800d718:	2301      	movs	r3, #1
 800d71a:	2201      	movs	r2, #1
 800d71c:	4620      	mov	r0, r4
 800d71e:	f000 fc87 	bl	800e030 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii>
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	3308      	adds	r3, #8
 800d726:	68ba      	ldr	r2, [r7, #8]
 800d728:	6812      	ldr	r2, [r2, #0]
 800d72a:	601a      	str	r2, [r3, #0]
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	330c      	adds	r3, #12
 800d730:	2100      	movs	r1, #0
 800d732:	4618      	mov	r0, r3
 800d734:	f000 f908 	bl	800d948 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	3310      	adds	r3, #16
 800d73c:	6879      	ldr	r1, [r7, #4]
 800d73e:	4618      	mov	r0, r3
 800d740:	f000 f88e 	bl	800d860 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 800d744:	68f8      	ldr	r0, [r7, #12]
 800d746:	f000 fcb1 	bl	800e0ac <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE4initEv>
    }
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	4618      	mov	r0, r3
 800d74e:	3710      	adds	r7, #16
 800d750:	46bd      	mov	sp, r7
 800d752:	bdb0      	pop	{r4, r5, r7, pc}

0800d754 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1ERKSP_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800d754:	b580      	push	{r7, lr}
 800d756:	b082      	sub	sp, #8
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
 800d75c:	6039      	str	r1, [r7, #0]
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6839      	ldr	r1, [r7, #0]
 800d762:	4618      	mov	r0, r3
 800d764:	f000 fcb2 	bl	800e0cc <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffEC1ERKSP_>
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	4618      	mov	r0, r3
 800d76c:	3708      	adds	r7, #8
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}

0800d772 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS5_IS7_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEELi1ELi1ELb0EEEEEKNS9_IKNS8_ISB_EELi1ELi1ELb0EEEEEEELi0ELi1EE3runERKST_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800d772:	b580      	push	{r7, lr}
 800d774:	b082      	sub	sp, #8
 800d776:	af00      	add	r7, sp, #0
 800d778:	6078      	str	r0, [r7, #4]
 800d77a:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800d77c:	2200      	movs	r2, #0
 800d77e:	2100      	movs	r1, #0
 800d780:	6878      	ldr	r0, [r7, #4]
 800d782:	f000 fcb5 	bl	800e0f0 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 800d786:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d78a:	eeb0 0a67 	vmov.f32	s0, s15
 800d78e:	3708      	adds	r7, #8
 800d790:	46bd      	mov	sp, r7
 800d792:	bd80      	pop	{r7, pc}

0800d794 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800d794:	b580      	push	{r7, lr}
 800d796:	b082      	sub	sp, #8
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800d79c:	2201      	movs	r2, #1
 800d79e:	2102      	movs	r1, #2
 800d7a0:	6878      	ldr	r0, [r7, #4]
 800d7a2:	f7fc fb70 	bl	8009e86 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800d7a6:	6878      	ldr	r0, [r7, #4]
 800d7a8:	f000 fcb5 	bl	800e116 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSP_>
  }
 800d7ac:	bf00      	nop
 800d7ae:	3708      	adds	r7, #8
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd80      	pop	{r7, pc}

0800d7b4 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>:
    inline Index innerStride() const EIGEN_NOEXCEPT { return 1; }
 800d7b4:	b480      	push	{r7}
 800d7b6:	b083      	sub	sp, #12
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
 800d7bc:	2301      	movs	r3, #1
 800d7be:	4618      	mov	r0, r3
 800d7c0:	370c      	adds	r7, #12
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c8:	4770      	bx	lr

0800d7ca <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>:
 800d7ca:	b580      	push	{r7, lr}
 800d7cc:	b082      	sub	sp, #8
 800d7ce:	af00      	add	r7, sp, #0
 800d7d0:	6078      	str	r0, [r7, #4]
 800d7d2:	6878      	ldr	r0, [r7, #4]
 800d7d4:	f000 fcaf 	bl	800e136 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	4618      	mov	r0, r3
 800d7dc:	3708      	adds	r7, #8
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}
	...

0800d7e4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii>:
      checkSanity<Derived>();
    }

    /** \internal Constructor for dynamically sized matrices */
    EIGEN_DEVICE_FUNC
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b084      	sub	sp, #16
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	60f8      	str	r0, [r7, #12]
 800d7ec:	60b9      	str	r1, [r7, #8]
 800d7ee:	607a      	str	r2, [r7, #4]
 800d7f0:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800d7f2:	68f8      	ldr	r0, [r7, #12]
 800d7f4:	f7ff ffe9 	bl	800d7ca <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	68ba      	ldr	r2, [r7, #8]
 800d7fc:	601a      	str	r2, [r3, #0]
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	3304      	adds	r3, #4
 800d802:	6879      	ldr	r1, [r7, #4]
 800d804:	4618      	mov	r0, r3
 800d806:	f7f8 ffb7 	bl	8006778 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	3305      	adds	r3, #5
 800d80e:	6839      	ldr	r1, [r7, #0]
 800d810:	4618      	mov	r0, r3
 800d812:	f7f8 ff97 	bl	8006744 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
    {
      eigen_assert( (dataPtr == 0)
 800d816:	68bb      	ldr	r3, [r7, #8]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d011      	beq.n	800d840 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x5c>
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	db08      	blt.n	800d834 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x50>
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	2b01      	cmp	r3, #1
 800d826:	d105      	bne.n	800d834 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x50>
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	db02      	blt.n	800d834 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x50>
 800d82e:	683b      	ldr	r3, [r7, #0]
 800d830:	2b03      	cmp	r3, #3
 800d832:	d005      	beq.n	800d840 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x5c>
 800d834:	4b07      	ldr	r3, [pc, #28]	; (800d854 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x70>)
 800d836:	4a08      	ldr	r2, [pc, #32]	; (800d858 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x74>)
 800d838:	21b0      	movs	r1, #176	; 0xb0
 800d83a:	4808      	ldr	r0, [pc, #32]	; (800d85c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x78>)
 800d83c:	f010 f90e 	bl	801da5c <__assert_func>
              || (   rows >= 0 && (RowsAtCompileTime == Dynamic || RowsAtCompileTime == rows)
                  && cols >= 0 && (ColsAtCompileTime == Dynamic || ColsAtCompileTime == cols)));
      checkSanity<Derived>();
 800d840:	2100      	movs	r1, #0
 800d842:	68f8      	ldr	r0, [r7, #12]
 800d844:	f000 fc82 	bl	800e14c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	4618      	mov	r0, r3
 800d84c:	3710      	adds	r7, #16
 800d84e:	46bd      	mov	sp, r7
 800d850:	bd80      	pop	{r7, pc}
 800d852:	bf00      	nop
 800d854:	08025fe8 	.word	0x08025fe8
 800d858:	08026094 	.word	0x08026094
 800d85c:	08026198 	.word	0x08026198

0800d860 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>:

template<typename T> class variable_if_dynamic<T, Dynamic>
{
    T m_value;
  public:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T value = 0) EIGEN_NO_THROW : m_value(value) {}
 800d860:	b480      	push	{r7}
 800d862:	b083      	sub	sp, #12
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
 800d868:	6039      	str	r1, [r7, #0]
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	683a      	ldr	r2, [r7, #0]
 800d86e:	601a      	str	r2, [r3, #0]
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	4618      	mov	r0, r3
 800d874:	370c      	adds	r7, #12
 800d876:	46bd      	mov	sp, r7
 800d878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87c:	4770      	bx	lr

0800d87e <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE4initEv>:
    }
    #endif

  protected:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    void init()
 800d87e:	b580      	push	{r7, lr}
 800d880:	b082      	sub	sp, #8
 800d882:	af00      	add	r7, sp, #0
 800d884:	6078      	str	r0, [r7, #4]
    {
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
                    ? m_xpr.outerStride()
                    : m_xpr.innerStride();
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	689b      	ldr	r3, [r3, #8]
                    ? m_xpr.outerStride()
 800d88a:	4618      	mov	r0, r3
 800d88c:	f7ff ff92 	bl	800d7b4 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 800d890:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	615a      	str	r2, [r3, #20]
    }
 800d896:	bf00      	nop
 800d898:	3708      	adds	r7, #8
 800d89a:	46bd      	mov	sp, r7
 800d89c:	bd80      	pop	{r7, pc}

0800d89e <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>:
 800d89e:	b480      	push	{r7}
 800d8a0:	b083      	sub	sp, #12
 800d8a2:	af00      	add	r7, sp, #0
 800d8a4:	6078      	str	r0, [r7, #4]
 800d8a6:	2301      	movs	r3, #1
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	370c      	adds	r7, #12
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b2:	4770      	bx	lr

0800d8b4 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>:
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b082      	sub	sp, #8
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
 800d8bc:	6878      	ldr	r0, [r7, #4]
 800d8be:	f000 fc50 	bl	800e162 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	3708      	adds	r7, #8
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bd80      	pop	{r7, pc}

0800d8cc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b084      	sub	sp, #16
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	60f8      	str	r0, [r7, #12]
 800d8d4:	60b9      	str	r1, [r7, #8]
 800d8d6:	607a      	str	r2, [r7, #4]
 800d8d8:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800d8da:	68f8      	ldr	r0, [r7, #12]
 800d8dc:	f7ff ffea 	bl	800d8b4 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	68ba      	ldr	r2, [r7, #8]
 800d8e4:	601a      	str	r2, [r3, #0]
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	3304      	adds	r3, #4
 800d8ea:	6879      	ldr	r1, [r7, #4]
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	f7f8 ff29 	bl	8006744 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	3305      	adds	r3, #5
 800d8f6:	6839      	ldr	r1, [r7, #0]
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f7f8 ff3d 	bl	8006778 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800d8fe:	68bb      	ldr	r3, [r7, #8]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d011      	beq.n	800d928 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2b00      	cmp	r3, #0
 800d908:	db08      	blt.n	800d91c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	2b03      	cmp	r3, #3
 800d90e:	d105      	bne.n	800d91c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800d910:	683b      	ldr	r3, [r7, #0]
 800d912:	2b00      	cmp	r3, #0
 800d914:	db02      	blt.n	800d91c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	2b01      	cmp	r3, #1
 800d91a:	d005      	beq.n	800d928 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800d91c:	4b07      	ldr	r3, [pc, #28]	; (800d93c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x70>)
 800d91e:	4a08      	ldr	r2, [pc, #32]	; (800d940 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x74>)
 800d920:	21b0      	movs	r1, #176	; 0xb0
 800d922:	4808      	ldr	r0, [pc, #32]	; (800d944 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x78>)
 800d924:	f010 f89a 	bl	801da5c <__assert_func>
      checkSanity<Derived>();
 800d928:	2100      	movs	r1, #0
 800d92a:	68f8      	ldr	r0, [r7, #12]
 800d92c:	f000 fc24 	bl	800e178 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	4618      	mov	r0, r3
 800d934:	3710      	adds	r7, #16
 800d936:	46bd      	mov	sp, r7
 800d938:	bd80      	pop	{r7, pc}
 800d93a:	bf00      	nop
 800d93c:	08025fe8 	.word	0x08025fe8
 800d940:	080261ec 	.word	0x080261ec
 800d944:	08026198 	.word	0x08026198

0800d948 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_DEBUG(v); eigen_assert(v == T(Value)); }
 800d948:	b580      	push	{r7, lr}
 800d94a:	b082      	sub	sp, #8
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
 800d950:	6039      	str	r1, [r7, #0]
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d005      	beq.n	800d964 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei+0x1c>
 800d958:	4b05      	ldr	r3, [pc, #20]	; (800d970 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei+0x28>)
 800d95a:	4a06      	ldr	r2, [pc, #24]	; (800d974 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei+0x2c>)
 800d95c:	2185      	movs	r1, #133	; 0x85
 800d95e:	4806      	ldr	r0, [pc, #24]	; (800d978 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei+0x30>)
 800d960:	f010 f87c 	bl	801da5c <__assert_func>
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	4618      	mov	r0, r3
 800d968:	3708      	adds	r7, #8
 800d96a:	46bd      	mov	sp, r7
 800d96c:	bd80      	pop	{r7, pc}
 800d96e:	bf00      	nop
 800d970:	08021e00 	.word	0x08021e00
 800d974:	080262f0 	.word	0x080262f0
 800d978:	08021e78 	.word	0x08021e78

0800d97c <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE4initEv>:
    void init()
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b082      	sub	sp, #8
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	689b      	ldr	r3, [r3, #8]
 800d988:	4618      	mov	r0, r3
 800d98a:	f7f9 faf9 	bl	8006f80 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 800d98e:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	615a      	str	r2, [r3, #20]
    }
 800d994:	bf00      	nop
 800d996:	3708      	adds	r7, #8
 800d998:	46bd      	mov	sp, r7
 800d99a:	bd80      	pop	{r7, pc}

0800d99c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b082      	sub	sp, #8
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
 800d9a4:	6039      	str	r1, [r7, #0]
 800d9a6:	6878      	ldr	r0, [r7, #4]
 800d9a8:	f000 fbf1 	bl	800e18e <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	6839      	ldr	r1, [r7, #0]
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f000 fbf7 	bl	800e1a4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	3708      	adds	r7, #8
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	bd80      	pop	{r7, pc}

0800d9c0 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b082      	sub	sp, #8
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
 800d9c8:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	2100      	movs	r1, #0
 800d9ce:	6878      	ldr	r0, [r7, #4]
 800d9d0:	f000 fc10 	bl	800e1f4 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800d9d4:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d9d8:	eeb0 0a67 	vmov.f32	s0, s15
 800d9dc:	3708      	adds	r7, #8
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}

0800d9e2 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800d9e2:	b580      	push	{r7, lr}
 800d9e4:	b084      	sub	sp, #16
 800d9e6:	af00      	add	r7, sp, #0
 800d9e8:	6078      	str	r0, [r7, #4]
 800d9ea:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800d9ec:	6839      	ldr	r1, [r7, #0]
 800d9ee:	6878      	ldr	r0, [r7, #4]
 800d9f0:	f000 fc13 	bl	800e21a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSM_RKS3_>
 800d9f4:	eef0 7a40 	vmov.f32	s15, s0
 800d9f8:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800d9fc:	6839      	ldr	r1, [r7, #0]
 800d9fe:	6878      	ldr	r0, [r7, #4]
 800da00:	f000 fc1c 	bl	800e23c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSM_RKS3_>
 800da04:	eef0 7a40 	vmov.f32	s15, s0
 800da08:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800da0c:	f107 020c 	add.w	r2, r7, #12
 800da10:	f107 0308 	add.w	r3, r7, #8
 800da14:	4619      	mov	r1, r3
 800da16:	6838      	ldr	r0, [r7, #0]
 800da18:	f7fb fa99 	bl	8008f4e <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800da1c:	eef0 7a40 	vmov.f32	s15, s0
  }
 800da20:	eeb0 0a67 	vmov.f32	s0, s15
 800da24:	3710      	adds	r7, #16
 800da26:	46bd      	mov	sp, r7
 800da28:	bd80      	pop	{r7, pc}

0800da2a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductIS2_S2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800da2a:	b5b0      	push	{r4, r5, r7, lr}
 800da2c:	b084      	sub	sp, #16
 800da2e:	af00      	add	r7, sp, #0
 800da30:	6078      	str	r0, [r7, #4]
 800da32:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800da34:	6878      	ldr	r0, [r7, #4]
 800da36:	f7f7 fdcd 	bl	80055d4 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800da3a:	4604      	mov	r4, r0
 800da3c:	6838      	ldr	r0, [r7, #0]
 800da3e:	f7f7 fdfc 	bl	800563a <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE7derivedEv>
 800da42:	4605      	mov	r5, r0
 800da44:	f107 030c 	add.w	r3, r7, #12
 800da48:	4618      	mov	r0, r3
 800da4a:	f7f9 f920 	bl	8006c8e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800da4e:	f107 030c 	add.w	r3, r7, #12
 800da52:	461a      	mov	r2, r3
 800da54:	4629      	mov	r1, r5
 800da56:	4620      	mov	r0, r4
 800da58:	f000 fc01 	bl	800e25e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800da5c:	6878      	ldr	r0, [r7, #4]
 800da5e:	f7f7 fdb9 	bl	80055d4 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800da62:	4603      	mov	r3, r0
    }
 800da64:	4618      	mov	r0, r3
 800da66:	3710      	adds	r7, #16
 800da68:	46bd      	mov	sp, r7
 800da6a:	bdb0      	pop	{r4, r5, r7, pc}

0800da6c <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 800da6c:	b480      	push	{r7}
 800da6e:	b083      	sub	sp, #12
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	4618      	mov	r0, r3
 800da7a:	370c      	adds	r7, #12
 800da7c:	46bd      	mov	sp, r7
 800da7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da82:	4770      	bx	lr

0800da84 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800da84:	b480      	push	{r7}
 800da86:	b083      	sub	sp, #12
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	4618      	mov	r0, r3
 800da90:	370c      	adds	r7, #12
 800da92:	46bd      	mov	sp, r7
 800da94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da98:	4770      	bx	lr

0800da9a <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEE8coeffRefEii>:
  Scalar& coeffRef(Index row, Index col)
 800da9a:	b590      	push	{r4, r7, lr}
 800da9c:	b085      	sub	sp, #20
 800da9e:	af00      	add	r7, sp, #0
 800daa0:	60f8      	str	r0, [r7, #12]
 800daa2:	60b9      	str	r1, [r7, #8]
 800daa4:	607a      	str	r2, [r7, #4]
      return const_cast<Scalar*>(m_d.data)[row * m_d.outerStride() + col];
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	681c      	ldr	r4, [r3, #0]
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	4618      	mov	r0, r3
 800daae:	f7fb fa08 	bl	8008ec2 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>
 800dab2:	4602      	mov	r2, r0
 800dab4:	68bb      	ldr	r3, [r7, #8]
 800dab6:	fb03 f202 	mul.w	r2, r3, r2
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	4413      	add	r3, r2
 800dabe:	009b      	lsls	r3, r3, #2
 800dac0:	4423      	add	r3, r4
  }
 800dac2:	4618      	mov	r0, r3
 800dac4:	3714      	adds	r7, #20
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd90      	pop	{r4, r7, pc}

0800daca <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 800daca:	b580      	push	{r7, lr}
 800dacc:	b0a4      	sub	sp, #144	; 0x90
 800dace:	af00      	add	r7, sp, #0
 800dad0:	60f8      	str	r0, [r7, #12]
 800dad2:	60b9      	str	r1, [r7, #8]
 800dad4:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800dad6:	68f9      	ldr	r1, [r7, #12]
 800dad8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800dadc:	68ba      	ldr	r2, [r7, #8]
 800dade:	4618      	mov	r0, r3
 800dae0:	f7fd f844 	bl	800ab6c <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 800dae4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dae8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800daec:	4611      	mov	r1, r2
 800daee:	4618      	mov	r0, r3
 800daf0:	f7fd f84f 	bl	800ab92 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800dafa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800dafe:	687a      	ldr	r2, [r7, #4]
 800db00:	4618      	mov	r0, r3
 800db02:	f000 fbbd 	bl	800e280 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE3colEi>
 800db06:	f107 0314 	add.w	r3, r7, #20
 800db0a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800db0e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800db12:	4618      	mov	r0, r3
 800db14:	f000 fbc7 	bl	800e2a6 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS1_IS4_EELi3ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 800db18:	f107 0314 	add.w	r3, r7, #20
 800db1c:	4618      	mov	r0, r3
 800db1e:	f000 fbf0 	bl	800e302 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE3sumEv>
 800db22:	eef0 7a40 	vmov.f32	s15, s0
  }
 800db26:	eeb0 0a67 	vmov.f32	s0, s15
 800db2a:	3790      	adds	r7, #144	; 0x90
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bd80      	pop	{r7, pc}

0800db30 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800db30:	b580      	push	{r7, lr}
 800db32:	b082      	sub	sp, #8
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800db38:	2200      	movs	r2, #0
 800db3a:	2101      	movs	r1, #1
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	f7fe fe58 	bl	800c7f2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800db42:	6878      	ldr	r0, [r7, #4]
 800db44:	f000 fbf8 	bl	800e338 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSG_>
  }
 800db48:	bf00      	nop
 800db4a:	3708      	adds	r7, #8
 800db4c:	46bd      	mov	sp, r7
 800db4e:	bd80      	pop	{r7, pc}

0800db50 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductINS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS9_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 800db50:	b590      	push	{r4, r7, lr}
 800db52:	b085      	sub	sp, #20
 800db54:	af00      	add	r7, sp, #0
 800db56:	60f8      	str	r0, [r7, #12]
 800db58:	60b9      	str	r1, [r7, #8]
 800db5a:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 800db5c:	68b8      	ldr	r0, [r7, #8]
 800db5e:	f7f7 fc70 	bl	8005442 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800db62:	4604      	mov	r4, r0
 800db64:	6878      	ldr	r0, [r7, #4]
 800db66:	f7f7 fed1 	bl	800590c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 800db6a:	4603      	mov	r3, r0
 800db6c:	461a      	mov	r2, r3
 800db6e:	4621      	mov	r1, r4
 800db70:	68f8      	ldr	r0, [r7, #12]
 800db72:	f000 fc15 	bl	800e3a0 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_>
}
 800db76:	68f8      	ldr	r0, [r7, #12]
 800db78:	3714      	adds	r7, #20
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd90      	pop	{r4, r7, pc}

0800db7e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800db7e:	b580      	push	{r7, lr}
 800db80:	b086      	sub	sp, #24
 800db82:	af00      	add	r7, sp, #0
 800db84:	60f8      	str	r0, [r7, #12]
 800db86:	60b9      	str	r1, [r7, #8]
 800db88:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800db8e:	687a      	ldr	r2, [r7, #4]
 800db90:	68b9      	ldr	r1, [r7, #8]
 800db92:	6978      	ldr	r0, [r7, #20]
 800db94:	f000 fc32 	bl	800e3fc <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>
}
 800db98:	bf00      	nop
 800db9a:	3718      	adds	r7, #24
 800db9c:	46bd      	mov	sp, r7
 800db9e:	bd80      	pop	{r7, pc}

0800dba0 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE6resizeEiii>:
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
 800dba0:	b480      	push	{r7}
 800dba2:	b085      	sub	sp, #20
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	60f8      	str	r0, [r7, #12]
 800dba8:	60b9      	str	r1, [r7, #8]
 800dbaa:	607a      	str	r2, [r7, #4]
 800dbac:	603b      	str	r3, [r7, #0]
 800dbae:	bf00      	nop
 800dbb0:	3714      	adds	r7, #20
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb8:	4770      	bx	lr

0800dbba <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS2_EESI_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800dbba:	b580      	push	{r7, lr}
 800dbbc:	b082      	sub	sp, #8
 800dbbe:	af00      	add	r7, sp, #0
 800dbc0:	6078      	str	r0, [r7, #4]
 800dbc2:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800dbc4:	6839      	ldr	r1, [r7, #0]
 800dbc6:	6878      	ldr	r0, [r7, #4]
 800dbc8:	f000 fc2b 	bl	800e422 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS2_EEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800dbcc:	bf00      	nop
 800dbce:	3708      	adds	r7, #8
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	bd80      	pop	{r7, pc}

0800dbd4 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800dbd4:	b590      	push	{r4, r7, lr}
 800dbd6:	b085      	sub	sp, #20
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	60f8      	str	r0, [r7, #12]
 800dbdc:	60b9      	str	r1, [r7, #8]
 800dbde:	607a      	str	r2, [r7, #4]
      return m_d.data[row + col * m_d.outerStride()];
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	681c      	ldr	r4, [r3, #0]
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	f7f9 f846 	bl	8006c78 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>
 800dbec:	4602      	mov	r2, r0
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	fb03 f202 	mul.w	r2, r3, r2
 800dbf4:	68bb      	ldr	r3, [r7, #8]
 800dbf6:	4413      	add	r3, r2
 800dbf8:	009b      	lsls	r3, r3, #2
 800dbfa:	4423      	add	r3, r4
  }
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	3714      	adds	r7, #20
 800dc00:	46bd      	mov	sp, r7
 800dc02:	bd90      	pop	{r4, r7, pc}

0800dc04 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>:
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b082      	sub	sp, #8
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
 800dc0c:	6878      	ldr	r0, [r7, #4]
 800dc0e:	f000 fc29 	bl	800e464 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	4618      	mov	r0, r3
 800dc16:	3708      	adds	r7, #8
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	bd80      	pop	{r7, pc}

0800dc1c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b084      	sub	sp, #16
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	60f8      	str	r0, [r7, #12]
 800dc24:	60b9      	str	r1, [r7, #8]
 800dc26:	607a      	str	r2, [r7, #4]
 800dc28:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800dc2a:	68f8      	ldr	r0, [r7, #12]
 800dc2c:	f7ff ffea 	bl	800dc04 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	68ba      	ldr	r2, [r7, #8]
 800dc34:	601a      	str	r2, [r3, #0]
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	3304      	adds	r3, #4
 800dc3a:	6879      	ldr	r1, [r7, #4]
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	f7f8 fd9b 	bl	8006778 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	3305      	adds	r3, #5
 800dc46:	6839      	ldr	r1, [r7, #0]
 800dc48:	4618      	mov	r0, r3
 800dc4a:	f7f8 fd95 	bl	8006778 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800dc4e:	68bb      	ldr	r3, [r7, #8]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d011      	beq.n	800dc78 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	db08      	blt.n	800dc6c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	2b01      	cmp	r3, #1
 800dc5e:	d105      	bne.n	800dc6c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800dc60:	683b      	ldr	r3, [r7, #0]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	db02      	blt.n	800dc6c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	2b01      	cmp	r3, #1
 800dc6a:	d005      	beq.n	800dc78 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 800dc6c:	4b07      	ldr	r3, [pc, #28]	; (800dc8c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x70>)
 800dc6e:	4a08      	ldr	r2, [pc, #32]	; (800dc90 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x74>)
 800dc70:	21b0      	movs	r1, #176	; 0xb0
 800dc72:	4808      	ldr	r0, [pc, #32]	; (800dc94 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x78>)
 800dc74:	f00f fef2 	bl	801da5c <__assert_func>
      checkSanity<Derived>();
 800dc78:	2100      	movs	r1, #0
 800dc7a:	68f8      	ldr	r0, [r7, #12]
 800dc7c:	f000 fbfd 	bl	800e47a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	4618      	mov	r0, r3
 800dc84:	3710      	adds	r7, #16
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd80      	pop	{r7, pc}
 800dc8a:	bf00      	nop
 800dc8c:	08025fe8 	.word	0x08025fe8
 800dc90:	08026358 	.word	0x08026358
 800dc94:	08026198 	.word	0x08026198

0800dc98 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE4initEv>:
    void init()
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b082      	sub	sp, #8
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	689b      	ldr	r3, [r3, #8]
 800dca4:	4618      	mov	r0, r3
 800dca6:	f7f9 f96b 	bl	8006f80 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 800dcaa:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	615a      	str	r2, [r3, #20]
    }
 800dcb0:	bf00      	nop
 800dcb2:	3708      	adds	r7, #8
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}

0800dcb8 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11innerStrideEv>:
 800dcb8:	b480      	push	{r7}
 800dcba:	b083      	sub	sp, #12
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
 800dcc0:	2301      	movs	r3, #1
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	370c      	adds	r7, #12
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dccc:	4770      	bx	lr

0800dcce <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>:
 800dcce:	b580      	push	{r7, lr}
 800dcd0:	b082      	sub	sp, #8
 800dcd2:	af00      	add	r7, sp, #0
 800dcd4:	6078      	str	r0, [r7, #4]
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	f000 fbda 	bl	800e490 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	4618      	mov	r0, r3
 800dce0:	3708      	adds	r7, #8
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}
	...

0800dce8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b084      	sub	sp, #16
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	60f8      	str	r0, [r7, #12]
 800dcf0:	60b9      	str	r1, [r7, #8]
 800dcf2:	607a      	str	r2, [r7, #4]
 800dcf4:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800dcf6:	68f8      	ldr	r0, [r7, #12]
 800dcf8:	f7ff ffe9 	bl	800dcce <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	68ba      	ldr	r2, [r7, #8]
 800dd00:	601a      	str	r2, [r3, #0]
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	3304      	adds	r3, #4
 800dd06:	6879      	ldr	r1, [r7, #4]
 800dd08:	4618      	mov	r0, r3
 800dd0a:	f7f8 fd35 	bl	8006778 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	3305      	adds	r3, #5
 800dd12:	6839      	ldr	r1, [r7, #0]
 800dd14:	4618      	mov	r0, r3
 800dd16:	f7f8 fd2f 	bl	8006778 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800dd1a:	68bb      	ldr	r3, [r7, #8]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d011      	beq.n	800dd44 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	db08      	blt.n	800dd38 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	2b01      	cmp	r3, #1
 800dd2a:	d105      	bne.n	800dd38 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800dd2c:	683b      	ldr	r3, [r7, #0]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	db02      	blt.n	800dd38 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	2b01      	cmp	r3, #1
 800dd36:	d005      	beq.n	800dd44 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800dd38:	4b07      	ldr	r3, [pc, #28]	; (800dd58 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x70>)
 800dd3a:	4a08      	ldr	r2, [pc, #32]	; (800dd5c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x74>)
 800dd3c:	21b0      	movs	r1, #176	; 0xb0
 800dd3e:	4808      	ldr	r0, [pc, #32]	; (800dd60 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x78>)
 800dd40:	f00f fe8c 	bl	801da5c <__assert_func>
      checkSanity<Derived>();
 800dd44:	2100      	movs	r1, #0
 800dd46:	68f8      	ldr	r0, [r7, #12]
 800dd48:	f000 fbad 	bl	800e4a6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	4618      	mov	r0, r3
 800dd50:	3710      	adds	r7, #16
 800dd52:	46bd      	mov	sp, r7
 800dd54:	bd80      	pop	{r7, pc}
 800dd56:	bf00      	nop
 800dd58:	08025fe8 	.word	0x08025fe8
 800dd5c:	0802645c 	.word	0x0802645c
 800dd60:	08026198 	.word	0x08026198

0800dd64 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE4initEv>:
    void init()
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b082      	sub	sp, #8
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	689b      	ldr	r3, [r3, #8]
 800dd70:	4618      	mov	r0, r3
 800dd72:	f7fd fe3d 	bl	800b9f0 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11outerStrideEv>
 800dd76:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	611a      	str	r2, [r3, #16]
    }
 800dd7c:	bf00      	nop
 800dd7e:	3708      	adds	r7, #8
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}

0800dd84 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b082      	sub	sp, #8
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
 800dd8c:	6039      	str	r1, [r7, #0]
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f000 fb94 	bl	800e4bc <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	6839      	ldr	r1, [r7, #0]
 800dd98:	4618      	mov	r0, r3
 800dd9a:	f000 fb9a 	bl	800e4d2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	4618      	mov	r0, r3
 800dda2:	3708      	adds	r7, #8
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd80      	pop	{r7, pc}

0800dda8 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b084      	sub	sp, #16
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	60f8      	str	r0, [r7, #12]
 800ddb0:	60b9      	str	r1, [r7, #8]
 800ddb2:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	687a      	ldr	r2, [r7, #4]
 800ddb8:	68b9      	ldr	r1, [r7, #8]
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f000 fbb1 	bl	800e522 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 800ddc0:	eef0 7a40 	vmov.f32	s15, s0
 800ddc4:	eeb0 0a67 	vmov.f32	s0, s15
 800ddc8:	3710      	adds	r7, #16
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	bd80      	pop	{r7, pc}

0800ddce <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_9assign_opIffEENS0_13sub_assign_opIffEEE3runINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KS7_EES9_EEvRS3_RKT_RKT0_>:
  void run(DstXprType &dst, const SrcXprType &src, const InitialFunc& /*func*/)
 800ddce:	b590      	push	{r4, r7, lr}
 800ddd0:	b087      	sub	sp, #28
 800ddd2:	af00      	add	r7, sp, #0
 800ddd4:	60f8      	str	r0, [r7, #12]
 800ddd6:	60b9      	str	r1, [r7, #8]
 800ddd8:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, src.lhs(), Func1());
 800ddda:	68b8      	ldr	r0, [r7, #8]
 800dddc:	f000 fbd1 	bl	800e582 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE3lhsEv>
 800dde0:	4604      	mov	r4, r0
 800dde2:	f107 0310 	add.w	r3, r7, #16
 800dde6:	4618      	mov	r0, r3
 800dde8:	f7f8 ff51 	bl	8006c8e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800ddec:	f107 0310 	add.w	r3, r7, #16
 800ddf0:	461a      	mov	r2, r3
 800ddf2:	4621      	mov	r1, r4
 800ddf4:	68f8      	ldr	r0, [r7, #12]
 800ddf6:	f000 fbd0 	bl	800e59a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
    call_assignment_no_alias(dst, src.rhs(), Func2());
 800ddfa:	68b8      	ldr	r0, [r7, #8]
 800ddfc:	f000 fbde 	bl	800e5bc <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE3rhsEv>
 800de00:	4604      	mov	r4, r0
 800de02:	f107 0314 	add.w	r3, r7, #20
 800de06:	4618      	mov	r0, r3
 800de08:	f7ff fbb0 	bl	800d56c <_ZN5Eigen8internal13sub_assign_opIffEC1Ev>
 800de0c:	f107 0314 	add.w	r3, r7, #20
 800de10:	461a      	mov	r2, r3
 800de12:	4621      	mov	r1, r4
 800de14:	68f8      	ldr	r0, [r7, #12]
 800de16:	f000 fbdd 	bl	800e5d4 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800de1a:	bf00      	nop
 800de1c:	371c      	adds	r7, #28
 800de1e:	46bd      	mov	sp, r7
 800de20:	bd90      	pop	{r4, r7, pc}
	...

0800de24 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::sub_assign_op<Scalar,Scalar> &)
 800de24:	b590      	push	{r4, r7, lr}
 800de26:	b085      	sub	sp, #20
 800de28:	af00      	add	r7, sp, #0
 800de2a:	60f8      	str	r0, [r7, #12]
 800de2c:	60b9      	str	r1, [r7, #8]
 800de2e:	607a      	str	r2, [r7, #4]
    eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	4618      	mov	r0, r3
 800de34:	f7f6 fefb 	bl	8004c2e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800de38:	4604      	mov	r4, r0
 800de3a:	68b8      	ldr	r0, [r7, #8]
 800de3c:	f7f8 fa95 	bl	800636a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4rowsEv>
 800de40:	4603      	mov	r3, r0
 800de42:	429c      	cmp	r4, r3
 800de44:	d10a      	bne.n	800de5c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x38>
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	4618      	mov	r0, r3
 800de4a:	f7f6 fee5 	bl	8004c18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800de4e:	4604      	mov	r4, r0
 800de50:	68b8      	ldr	r0, [r7, #8]
 800de52:	f7f8 fa98 	bl	8006386 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4colsEv>
 800de56:	4603      	mov	r3, r0
 800de58:	429c      	cmp	r4, r3
 800de5a:	d005      	beq.n	800de68 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x44>
 800de5c:	4b0b      	ldr	r3, [pc, #44]	; (800de8c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x68>)
 800de5e:	4a0c      	ldr	r2, [pc, #48]	; (800de90 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x6c>)
 800de60:	21b0      	movs	r1, #176	; 0xb0
 800de62:	480c      	ldr	r0, [pc, #48]	; (800de94 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x70>)
 800de64:	f00f fdfa 	bl	801da5c <__assert_func>
    generic_product_impl<Lhs, Rhs>::subTo(dst, src.lhs(), src.rhs());
 800de68:	68b8      	ldr	r0, [r7, #8]
 800de6a:	f000 fbc4 	bl	800e5f6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE3lhsEv>
 800de6e:	4604      	mov	r4, r0
 800de70:	68b8      	ldr	r0, [r7, #8]
 800de72:	f000 fbcc 	bl	800e60e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE3rhsEv>
 800de76:	4603      	mov	r3, r0
 800de78:	461a      	mov	r2, r3
 800de7a:	4621      	mov	r1, r4
 800de7c:	68f8      	ldr	r0, [r7, #12]
 800de7e:	f000 fbd2 	bl	800e626 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEENS_10DenseShapeES5_Li3EE5subToINS2_IfLi3ELi3ELi0ELi3ELi3EEEEEvRT_RKS3_RKS4_>
  }
 800de82:	bf00      	nop
 800de84:	3714      	adds	r7, #20
 800de86:	46bd      	mov	sp, r7
 800de88:	bd90      	pop	{r4, r7, pc}
 800de8a:	bf00      	nop
 800de8c:	08022658 	.word	0x08022658
 800de90:	08026560 	.word	0x08026560
 800de94:	08022b50 	.word	0x08022b50

0800de98 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800de98:	b5b0      	push	{r4, r5, r7, lr}
 800de9a:	b084      	sub	sp, #16
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	60f8      	str	r0, [r7, #12]
 800dea0:	60b9      	str	r1, [r7, #8]
 800dea2:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800dea4:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800dea6:	68bb      	ldr	r3, [r7, #8]
 800dea8:	4618      	mov	r0, r3
 800deaa:	f7f9 fff9 	bl	8007ea0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 800deae:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800deb0:	68b8      	ldr	r0, [r7, #8]
 800deb2:	f7fa fa2f 	bl	8008314 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 800deb6:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	fb02 f303 	mul.w	r3, r2, r3
 800debe:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800dec0:	441d      	add	r5, r3
 800dec2:	68bb      	ldr	r3, [r7, #8]
 800dec4:	4618      	mov	r0, r3
 800dec6:	f7f6 feb2 	bl	8004c2e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800deca:	4602      	mov	r2, r0
 800decc:	2301      	movs	r3, #1
 800dece:	4629      	mov	r1, r5
 800ded0:	4620      	mov	r0, r4
 800ded2:	f000 fbd3 	bl	800e67c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii>
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	68ba      	ldr	r2, [r7, #8]
 800deda:	609a      	str	r2, [r3, #8]
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	330c      	adds	r3, #12
 800dee0:	2100      	movs	r1, #0
 800dee2:	4618      	mov	r0, r3
 800dee4:	f7ff fcbc 	bl	800d860 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	3310      	adds	r3, #16
 800deec:	6879      	ldr	r1, [r7, #4]
 800deee:	4618      	mov	r0, r3
 800def0:	f7ff fcb6 	bl	800d860 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 800def4:	68f8      	ldr	r0, [r7, #12]
 800def6:	f000 fbff 	bl	800e6f8 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE4initEv>
    }
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	4618      	mov	r0, r3
 800defe:	3710      	adds	r7, #16
 800df00:	46bd      	mov	sp, r7
 800df02:	bdb0      	pop	{r4, r5, r7, pc}

0800df04 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1ERKSG_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800df04:	b580      	push	{r7, lr}
 800df06:	b082      	sub	sp, #8
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
 800df0c:	6039      	str	r1, [r7, #0]
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	6839      	ldr	r1, [r7, #0]
 800df12:	4618      	mov	r0, r3
 800df14:	f000 fc00 	bl	800e718 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffEC1ERKSG_>
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	4618      	mov	r0, r3
 800df1c:	3708      	adds	r7, #8
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}

0800df22 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi3EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800df22:	b580      	push	{r7, lr}
 800df24:	b084      	sub	sp, #16
 800df26:	af00      	add	r7, sp, #0
 800df28:	6078      	str	r0, [r7, #4]
 800df2a:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800df2c:	6839      	ldr	r1, [r7, #0]
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f000 fc04 	bl	800e73c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi1EE3runERKSK_RKS3_>
 800df34:	eef0 7a40 	vmov.f32	s15, s0
 800df38:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800df3c:	6839      	ldr	r1, [r7, #0]
 800df3e:	6878      	ldr	r0, [r7, #4]
 800df40:	f000 fc0d 	bl	800e75e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi1ELi2EE3runERKSK_RKS3_>
 800df44:	eef0 7a40 	vmov.f32	s15, s0
 800df48:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800df4c:	f107 020c 	add.w	r2, r7, #12
 800df50:	f107 0308 	add.w	r3, r7, #8
 800df54:	4619      	mov	r1, r3
 800df56:	6838      	ldr	r0, [r7, #0]
 800df58:	f7fa fff9 	bl	8008f4e <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800df5c:	eef0 7a40 	vmov.f32	s15, s0
  }
 800df60:	eeb0 0a67 	vmov.f32	s0, s15
 800df64:	3710      	adds	r7, #16
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}

0800df6a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800df6a:	b580      	push	{r7, lr}
 800df6c:	b082      	sub	sp, #8
 800df6e:	af00      	add	r7, sp, #0
 800df70:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800df72:	2201      	movs	r2, #1
 800df74:	2102      	movs	r1, #2
 800df76:	6878      	ldr	r0, [r7, #4]
 800df78:	f7fc fa4c 	bl	800a414 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800df7c:	6878      	ldr	r0, [r7, #4]
 800df7e:	f000 fc12 	bl	800e7a6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSL_>
  }
 800df82:	bf00      	nop
 800df84:	3708      	adds	r7, #8
 800df86:	46bd      	mov	sp, r7
 800df88:	bd80      	pop	{r7, pc}

0800df8a <_ZN5Eigen9DenseBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800df8a:	b480      	push	{r7}
 800df8c:	b083      	sub	sp, #12
 800df8e:	af00      	add	r7, sp, #0
 800df90:	6078      	str	r0, [r7, #4]
    }
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	4618      	mov	r0, r3
 800df96:	370c      	adds	r7, #12
 800df98:	46bd      	mov	sp, r7
 800df9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9e:	4770      	bx	lr

0800dfa0 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE4dataEv>:
    const Scalar* data() const { return derived().nestedExpression().data(); }
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b082      	sub	sp, #8
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
 800dfa8:	6878      	ldr	r0, [r7, #4]
 800dfaa:	f7f7 f9b5 	bl	8005318 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	f7fc fd77 	bl	800aaa4 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	4618      	mov	r0, r3
 800dfba:	f7f8 ff10 	bl	8006dde <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	3708      	adds	r7, #8
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}

0800dfc8 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11innerStrideEv>:
    Index innerStride() const { return derived().nestedExpression().innerStride(); }
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b082      	sub	sp, #8
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
 800dfd0:	6878      	ldr	r0, [r7, #4]
 800dfd2:	f7f7 f9a1 	bl	8005318 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	4618      	mov	r0, r3
 800dfda:	f7fc fd63 	bl	800aaa4 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>
 800dfde:	4603      	mov	r3, r0
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	f7ff fc5c 	bl	800d89e <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	4618      	mov	r0, r3
 800dfea:	3708      	adds	r7, #8
 800dfec:	46bd      	mov	sp, r7
 800dfee:	bd80      	pop	{r7, pc}

0800dff0 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11outerStrideEv>:
    Index outerStride() const { return derived().nestedExpression().outerStride(); }
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b082      	sub	sp, #8
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]
 800dff8:	6878      	ldr	r0, [r7, #4]
 800dffa:	f7f7 f98d 	bl	8005318 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800dffe:	4603      	mov	r3, r0
 800e000:	4618      	mov	r0, r3
 800e002:	f7fc fd4f 	bl	800aaa4 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>
 800e006:	4603      	mov	r3, r0
 800e008:	4618      	mov	r0, r3
 800e00a:	f7f8 ffb9 	bl	8006f80 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 800e00e:	4603      	mov	r3, r0
 800e010:	4618      	mov	r0, r3
 800e012:	3708      	adds	r7, #8
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}

0800e018 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>:
 800e018:	b580      	push	{r7, lr}
 800e01a:	b082      	sub	sp, #8
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
 800e020:	6878      	ldr	r0, [r7, #4]
 800e022:	f000 fbd0 	bl	800e7c6 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	4618      	mov	r0, r3
 800e02a:	3708      	adds	r7, #8
 800e02c:	46bd      	mov	sp, r7
 800e02e:	bd80      	pop	{r7, pc}

0800e030 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800e030:	b580      	push	{r7, lr}
 800e032:	b084      	sub	sp, #16
 800e034:	af00      	add	r7, sp, #0
 800e036:	60f8      	str	r0, [r7, #12]
 800e038:	60b9      	str	r1, [r7, #8]
 800e03a:	607a      	str	r2, [r7, #4]
 800e03c:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800e03e:	68f8      	ldr	r0, [r7, #12]
 800e040:	f7ff ffea 	bl	800e018 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	68ba      	ldr	r2, [r7, #8]
 800e048:	601a      	str	r2, [r3, #0]
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	3304      	adds	r3, #4
 800e04e:	6879      	ldr	r1, [r7, #4]
 800e050:	4618      	mov	r0, r3
 800e052:	f7f8 fb91 	bl	8006778 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	3305      	adds	r3, #5
 800e05a:	6839      	ldr	r1, [r7, #0]
 800e05c:	4618      	mov	r0, r3
 800e05e:	f7f8 fb8b 	bl	8006778 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800e062:	68bb      	ldr	r3, [r7, #8]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d011      	beq.n	800e08c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	db08      	blt.n	800e080 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	2b01      	cmp	r3, #1
 800e072:	d105      	bne.n	800e080 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800e074:	683b      	ldr	r3, [r7, #0]
 800e076:	2b00      	cmp	r3, #0
 800e078:	db02      	blt.n	800e080 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800e07a:	683b      	ldr	r3, [r7, #0]
 800e07c:	2b01      	cmp	r3, #1
 800e07e:	d005      	beq.n	800e08c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 800e080:	4b07      	ldr	r3, [pc, #28]	; (800e0a0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x70>)
 800e082:	4a08      	ldr	r2, [pc, #32]	; (800e0a4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x74>)
 800e084:	21b0      	movs	r1, #176	; 0xb0
 800e086:	4808      	ldr	r0, [pc, #32]	; (800e0a8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x78>)
 800e088:	f00f fce8 	bl	801da5c <__assert_func>
      checkSanity<Derived>();
 800e08c:	2100      	movs	r1, #0
 800e08e:	68f8      	ldr	r0, [r7, #12]
 800e090:	f000 fba4 	bl	800e7dc <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	4618      	mov	r0, r3
 800e098:	3710      	adds	r7, #16
 800e09a:	46bd      	mov	sp, r7
 800e09c:	bd80      	pop	{r7, pc}
 800e09e:	bf00      	nop
 800e0a0:	08025fe8 	.word	0x08025fe8
 800e0a4:	080268dc 	.word	0x080268dc
 800e0a8:	08026198 	.word	0x08026198

0800e0ac <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE4initEv>:
    void init()
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b082      	sub	sp, #8
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	3308      	adds	r3, #8
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	f7ff ff99 	bl	800dff0 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11outerStrideEv>
 800e0be:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	615a      	str	r2, [r3, #20]
    }
 800e0c4:	bf00      	nop
 800e0c6:	3708      	adds	r7, #8
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	bd80      	pop	{r7, pc}

0800e0cc <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffEC1ERKSP_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b082      	sub	sp, #8
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
 800e0d4:	6039      	str	r1, [r7, #0]
 800e0d6:	6878      	ldr	r0, [r7, #4]
 800e0d8:	f000 fb8b 	bl	800e7f2 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	6839      	ldr	r1, [r7, #0]
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f000 fb91 	bl	800e808 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4DataC1ERKSP_>
  }
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	3708      	adds	r7, #8
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd80      	pop	{r7, pc}

0800e0f0 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b084      	sub	sp, #16
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	60f8      	str	r0, [r7, #12]
 800e0f8:	60b9      	str	r1, [r7, #8]
 800e0fa:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	687a      	ldr	r2, [r7, #4]
 800e100:	68b9      	ldr	r1, [r7, #8]
 800e102:	4618      	mov	r0, r3
 800e104:	f000 fba8 	bl	800e858 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE5coeffEii>
 800e108:	eef0 7a40 	vmov.f32	s15, s0
 800e10c:	eeb0 0a67 	vmov.f32	s0, s15
 800e110:	3710      	adds	r7, #16
 800e112:	46bd      	mov	sp, r7
 800e114:	bd80      	pop	{r7, pc}

0800e116 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800e116:	b580      	push	{r7, lr}
 800e118:	b082      	sub	sp, #8
 800e11a:	af00      	add	r7, sp, #0
 800e11c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800e11e:	2202      	movs	r2, #2
 800e120:	2102      	movs	r1, #2
 800e122:	6878      	ldr	r0, [r7, #4]
 800e124:	f7fb feaf 	bl	8009e86 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800e128:	6878      	ldr	r0, [r7, #4]
 800e12a:	f000 fbc5 	bl	800e8b8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSP_>
  }
 800e12e:	bf00      	nop
 800e130:	3708      	adds	r7, #8
 800e132:	46bd      	mov	sp, r7
 800e134:	bd80      	pop	{r7, pc}

0800e136 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800e136:	b480      	push	{r7}
 800e138:	b083      	sub	sp, #12
 800e13a:	af00      	add	r7, sp, #0
 800e13c:	6078      	str	r0, [r7, #4]
    }
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	4618      	mov	r0, r3
 800e142:	370c      	adds	r7, #12
 800e144:	46bd      	mov	sp, r7
 800e146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14a:	4770      	bx	lr

0800e14c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
#endif
    }

    template<typename T>
    EIGEN_DEVICE_FUNC
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800e14c:	b480      	push	{r7}
 800e14e:	b083      	sub	sp, #12
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
 800e154:	6039      	str	r1, [r7, #0]
    {}
 800e156:	bf00      	nop
 800e158:	370c      	adds	r7, #12
 800e15a:	46bd      	mov	sp, r7
 800e15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e160:	4770      	bx	lr

0800e162 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800e162:	b480      	push	{r7}
 800e164:	b083      	sub	sp, #12
 800e166:	af00      	add	r7, sp, #0
 800e168:	6078      	str	r0, [r7, #4]
    }
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	4618      	mov	r0, r3
 800e16e:	370c      	adds	r7, #12
 800e170:	46bd      	mov	sp, r7
 800e172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e176:	4770      	bx	lr

0800e178 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800e178:	b480      	push	{r7}
 800e17a:	b083      	sub	sp, #12
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
 800e180:	6039      	str	r1, [r7, #0]
    {}
 800e182:	bf00      	nop
 800e184:	370c      	adds	r7, #12
 800e186:	46bd      	mov	sp, r7
 800e188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18c:	4770      	bx	lr

0800e18e <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800e18e:	b480      	push	{r7}
 800e190:	b083      	sub	sp, #12
 800e192:	af00      	add	r7, sp, #0
 800e194:	6078      	str	r0, [r7, #4]
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	4618      	mov	r0, r3
 800e19a:	370c      	adds	r7, #12
 800e19c:	46bd      	mov	sp, r7
 800e19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a2:	4770      	bx	lr

0800e1a4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800e1a4:	b590      	push	{r4, r7, lr}
 800e1a6:	b083      	sub	sp, #12
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
 800e1ac:	6039      	str	r1, [r7, #0]
 800e1ae:	687c      	ldr	r4, [r7, #4]
 800e1b0:	6838      	ldr	r0, [r7, #0]
 800e1b2:	f000 fb8b 	bl	800e8cc <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE7functorEv>
 800e1b6:	4603      	mov	r3, r0
 800e1b8:	4619      	mov	r1, r3
 800e1ba:	4620      	mov	r0, r4
 800e1bc:	f7f7 f862 	bl	8005284 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	1d1c      	adds	r4, r3, #4
 800e1c4:	6838      	ldr	r0, [r7, #0]
 800e1c6:	f000 fb8d 	bl	800e8e4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE3lhsEv>
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	4619      	mov	r1, r3
 800e1ce:	4620      	mov	r0, r4
 800e1d0:	f000 fb9f 	bl	800e912 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	f103 040c 	add.w	r4, r3, #12
 800e1da:	6838      	ldr	r0, [r7, #0]
 800e1dc:	f000 fb8d 	bl	800e8fa <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE3rhsEv>
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	4619      	mov	r1, r3
 800e1e4:	4620      	mov	r0, r4
 800e1e6:	f000 fba3 	bl	800e930 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERS7_>
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	370c      	adds	r7, #12
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	bd90      	pop	{r4, r7, pc}

0800e1f4 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b084      	sub	sp, #16
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	60f8      	str	r0, [r7, #12]
 800e1fc:	60b9      	str	r1, [r7, #8]
 800e1fe:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	68ba      	ldr	r2, [r7, #8]
 800e204:	6879      	ldr	r1, [r7, #4]
 800e206:	4618      	mov	r0, r3
 800e208:	f000 fba1 	bl	800e94e <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 800e20c:	eef0 7a40 	vmov.f32	s15, s0
 800e210:	eeb0 0a67 	vmov.f32	s0, s15
 800e214:	3710      	adds	r7, #16
 800e216:	46bd      	mov	sp, r7
 800e218:	bd80      	pop	{r7, pc}

0800e21a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800e21a:	b580      	push	{r7, lr}
 800e21c:	b082      	sub	sp, #8
 800e21e:	af00      	add	r7, sp, #0
 800e220:	6078      	str	r0, [r7, #4]
 800e222:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800e224:	2201      	movs	r2, #1
 800e226:	2100      	movs	r1, #0
 800e228:	6878      	ldr	r0, [r7, #4]
 800e22a:	f7ff ffe3 	bl	800e1f4 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800e22e:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e232:	eeb0 0a67 	vmov.f32	s0, s15
 800e236:	3708      	adds	r7, #8
 800e238:	46bd      	mov	sp, r7
 800e23a:	bd80      	pop	{r7, pc}

0800e23c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b082      	sub	sp, #8
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
 800e244:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800e246:	2202      	movs	r2, #2
 800e248:	2100      	movs	r1, #0
 800e24a:	6878      	ldr	r0, [r7, #4]
 800e24c:	f7ff ffd2 	bl	800e1f4 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800e250:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e254:	eeb0 0a67 	vmov.f32	s0, s15
 800e258:	3708      	adds	r7, #8
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}

0800e25e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800e25e:	b580      	push	{r7, lr}
 800e260:	b086      	sub	sp, #24
 800e262:	af00      	add	r7, sp, #0
 800e264:	60f8      	str	r0, [r7, #12]
 800e266:	60b9      	str	r1, [r7, #8]
 800e268:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800e26e:	687a      	ldr	r2, [r7, #4]
 800e270:	68b9      	ldr	r1, [r7, #8]
 800e272:	6978      	ldr	r0, [r7, #20]
 800e274:	f000 fb9b 	bl	800e9ae <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_>
}
 800e278:	bf00      	nop
 800e27a:	3718      	adds	r7, #24
 800e27c:	46bd      	mov	sp, r7
 800e27e:	bd80      	pop	{r7, pc}

0800e280 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE3colEi>:
ConstColXpr col(Index i) const
 800e280:	b580      	push	{r7, lr}
 800e282:	b084      	sub	sp, #16
 800e284:	af00      	add	r7, sp, #0
 800e286:	60f8      	str	r0, [r7, #12]
 800e288:	60b9      	str	r1, [r7, #8]
 800e28a:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800e28c:	68b8      	ldr	r0, [r7, #8]
 800e28e:	f7f7 f9df 	bl	8005650 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 800e292:	4603      	mov	r3, r0
 800e294:	687a      	ldr	r2, [r7, #4]
 800e296:	4619      	mov	r1, r3
 800e298:	68f8      	ldr	r0, [r7, #12]
 800e29a:	f000 fbc3 	bl	800ea24 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i>
}
 800e29e:	68f8      	ldr	r0, [r7, #12]
 800e2a0:	3710      	adds	r7, #16
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	bd80      	pop	{r7, pc}

0800e2a6 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS1_IS4_EELi3ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800e2a6:	b5b0      	push	{r4, r5, r7, lr}
 800e2a8:	b086      	sub	sp, #24
 800e2aa:	af00      	add	r7, sp, #0
 800e2ac:	60f8      	str	r0, [r7, #12]
 800e2ae:	60b9      	str	r1, [r7, #8]
 800e2b0:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800e2b2:	68b8      	ldr	r0, [r7, #8]
 800e2b4:	f7fd f924 	bl	800b500 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>
 800e2b8:	4604      	mov	r4, r0
 800e2ba:	6878      	ldr	r0, [r7, #4]
 800e2bc:	f000 fbda 	bl	800ea74 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEE7derivedEv>
 800e2c0:	4605      	mov	r5, r0
 800e2c2:	f107 0314 	add.w	r3, r7, #20
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	f7f6 ff52 	bl	8005170 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800e2cc:	f107 0314 	add.w	r3, r7, #20
 800e2d0:	462a      	mov	r2, r5
 800e2d2:	4621      	mov	r1, r4
 800e2d4:	68f8      	ldr	r0, [r7, #12]
 800e2d6:	f000 fc07 	bl	800eae8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_>
}
 800e2da:	68f8      	ldr	r0, [r7, #12]
 800e2dc:	3718      	adds	r7, #24
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bdb0      	pop	{r4, r5, r7, pc}

0800e2e2 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800e2e2:	b580      	push	{r7, lr}
 800e2e4:	b082      	sub	sp, #8
 800e2e6:	af00      	add	r7, sp, #0
 800e2e8:	6078      	str	r0, [r7, #4]
 800e2ea:	6878      	ldr	r0, [r7, #4]
 800e2ec:	f000 fc5a 	bl	800eba4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	f000 fc61 	bl	800ebba <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE4rowsEv>
 800e2f8:	4603      	mov	r3, r0
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	3708      	adds	r7, #8
 800e2fe:	46bd      	mov	sp, r7
 800e300:	bd80      	pop	{r7, pc}

0800e302 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 800e302:	b590      	push	{r4, r7, lr}
 800e304:	b085      	sub	sp, #20
 800e306:	af00      	add	r7, sp, #0
 800e308:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	f000 fc4a 	bl	800eba4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800e310:	4604      	mov	r4, r0
 800e312:	f107 030c 	add.w	r3, r7, #12
 800e316:	4618      	mov	r0, r3
 800e318:	f7f7 fa21 	bl	800575e <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800e31c:	f107 030c 	add.w	r3, r7, #12
 800e320:	4619      	mov	r1, r3
 800e322:	4620      	mov	r0, r4
 800e324:	f000 fcc6 	bl	800ecb4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800e328:	eef0 7a40 	vmov.f32	s15, s0
 800e32c:	bf00      	nop
}
 800e32e:	eeb0 0a67 	vmov.f32	s0, s15
 800e332:	3714      	adds	r7, #20
 800e334:	46bd      	mov	sp, r7
 800e336:	bd90      	pop	{r4, r7, pc}

0800e338 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800e338:	b580      	push	{r7, lr}
 800e33a:	b082      	sub	sp, #8
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800e340:	2201      	movs	r2, #1
 800e342:	2101      	movs	r1, #1
 800e344:	6878      	ldr	r0, [r7, #4]
 800e346:	f7fe fa54 	bl	800c7f2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	f000 fcf8 	bl	800ed40 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSG_>
  }
 800e350:	bf00      	nop
 800e352:	3708      	adds	r7, #8
 800e354:	46bd      	mov	sp, r7
 800e356:	bd80      	pop	{r7, pc}

0800e358 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>:
 800e358:	b580      	push	{r7, lr}
 800e35a:	b082      	sub	sp, #8
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
 800e360:	6878      	ldr	r0, [r7, #4]
 800e362:	f000 fcfd 	bl	800ed60 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	4618      	mov	r0, r3
 800e36a:	3708      	adds	r7, #8
 800e36c:	46bd      	mov	sp, r7
 800e36e:	bd80      	pop	{r7, pc}

0800e370 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1ELi3EEC1Ev>:
class dense_product_base
 800e370:	b580      	push	{r7, lr}
 800e372:	b082      	sub	sp, #8
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
 800e378:	6878      	ldr	r0, [r7, #4]
 800e37a:	f7ff ffed 	bl	800e358 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	4618      	mov	r0, r3
 800e382:	3708      	adds	r7, #8
 800e384:	46bd      	mov	sp, r7
 800e386:	bd80      	pop	{r7, pc}

0800e388 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800e388:	b580      	push	{r7, lr}
 800e38a:	b082      	sub	sp, #8
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
 800e390:	6878      	ldr	r0, [r7, #4]
 800e392:	f7ff ffed 	bl	800e370 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1ELi3EEC1Ev>
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	4618      	mov	r0, r3
 800e39a:	3708      	adds	r7, #8
 800e39c:	46bd      	mov	sp, r7
 800e39e:	bd80      	pop	{r7, pc}

0800e3a0 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 800e3a0:	b590      	push	{r4, r7, lr}
 800e3a2:	b085      	sub	sp, #20
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	60f8      	str	r0, [r7, #12]
 800e3a8:	60b9      	str	r1, [r7, #8]
 800e3aa:	607a      	str	r2, [r7, #4]
 800e3ac:	68f8      	ldr	r0, [r7, #12]
 800e3ae:	f7ff ffeb 	bl	800e388 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1ENS_5DenseEEC1Ev>
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	68ba      	ldr	r2, [r7, #8]
 800e3b6:	601a      	str	r2, [r3, #0]
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	3304      	adds	r3, #4
 800e3bc:	687a      	ldr	r2, [r7, #4]
 800e3be:	6812      	ldr	r2, [r2, #0]
 800e3c0:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 800e3c2:	68bb      	ldr	r3, [r7, #8]
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	f7f6 fc27 	bl	8004c18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800e3ca:	4604      	mov	r4, r0
 800e3cc:	6878      	ldr	r0, [r7, #4]
 800e3ce:	f7f7 facc 	bl	800596a <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 800e3d2:	4603      	mov	r3, r0
 800e3d4:	429c      	cmp	r4, r3
 800e3d6:	d005      	beq.n	800e3e4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_+0x44>
 800e3d8:	4b05      	ldr	r3, [pc, #20]	; (800e3f0 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_+0x50>)
 800e3da:	4a06      	ldr	r2, [pc, #24]	; (800e3f4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_+0x54>)
 800e3dc:	2160      	movs	r1, #96	; 0x60
 800e3de:	4806      	ldr	r0, [pc, #24]	; (800e3f8 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_+0x58>)
 800e3e0:	f00f fb3c 	bl	801da5c <__assert_func>
 800e3e4:	bf00      	nop
    }
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	3714      	adds	r7, #20
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	bd90      	pop	{r4, r7, pc}
 800e3f0:	0801fb84 	.word	0x0801fb84
 800e3f4:	080269f4 	.word	0x080269f4
 800e3f8:	0801fed4 	.word	0x0801fed4

0800e3fc <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b084      	sub	sp, #16
 800e400:	af00      	add	r7, sp, #0
 800e402:	60f8      	str	r0, [r7, #12]
 800e404:	60b9      	str	r1, [r7, #8]
 800e406:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800e408:	68b9      	ldr	r1, [r7, #8]
 800e40a:	68f8      	ldr	r0, [r7, #12]
 800e40c:	f000 fcb3 	bl	800ed76 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800e410:	687a      	ldr	r2, [r7, #4]
 800e412:	68b9      	ldr	r1, [r7, #8]
 800e414:	68f8      	ldr	r0, [r7, #12]
 800e416:	f000 fd12 	bl	800ee3e <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800e41a:	bf00      	nop
 800e41c:	3710      	adds	r7, #16
 800e41e:	46bd      	mov	sp, r7
 800e420:	bd80      	pop	{r7, pc}

0800e422 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS2_EEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800e422:	b5b0      	push	{r4, r5, r7, lr}
 800e424:	b084      	sub	sp, #16
 800e426:	af00      	add	r7, sp, #0
 800e428:	6078      	str	r0, [r7, #4]
 800e42a:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800e42c:	6878      	ldr	r0, [r7, #4]
 800e42e:	f7fd fab8 	bl	800b9a2 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800e432:	4604      	mov	r4, r0
 800e434:	6838      	ldr	r0, [r7, #0]
 800e436:	f7f7 fc41 	bl	8005cbc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>
 800e43a:	4605      	mov	r5, r0
 800e43c:	f107 030c 	add.w	r3, r7, #12
 800e440:	4618      	mov	r0, r3
 800e442:	f7f8 fc24 	bl	8006c8e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800e446:	f107 030c 	add.w	r3, r7, #12
 800e44a:	461a      	mov	r2, r3
 800e44c:	4629      	mov	r1, r5
 800e44e:	4620      	mov	r0, r4
 800e450:	f000 fd2d 	bl	800eeae <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800e454:	6878      	ldr	r0, [r7, #4]
 800e456:	f7fd faa4 	bl	800b9a2 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800e45a:	4603      	mov	r3, r0
    }
 800e45c:	4618      	mov	r0, r3
 800e45e:	3710      	adds	r7, #16
 800e460:	46bd      	mov	sp, r7
 800e462:	bdb0      	pop	{r4, r5, r7, pc}

0800e464 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800e464:	b480      	push	{r7}
 800e466:	b083      	sub	sp, #12
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
    }
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	4618      	mov	r0, r3
 800e470:	370c      	adds	r7, #12
 800e472:	46bd      	mov	sp, r7
 800e474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e478:	4770      	bx	lr

0800e47a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800e47a:	b480      	push	{r7}
 800e47c:	b083      	sub	sp, #12
 800e47e:	af00      	add	r7, sp, #0
 800e480:	6078      	str	r0, [r7, #4]
 800e482:	6039      	str	r1, [r7, #0]
    {}
 800e484:	bf00      	nop
 800e486:	370c      	adds	r7, #12
 800e488:	46bd      	mov	sp, r7
 800e48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48e:	4770      	bx	lr

0800e490 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800e490:	b480      	push	{r7}
 800e492:	b083      	sub	sp, #12
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
    }
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	4618      	mov	r0, r3
 800e49c:	370c      	adds	r7, #12
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a4:	4770      	bx	lr

0800e4a6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800e4a6:	b480      	push	{r7}
 800e4a8:	b083      	sub	sp, #12
 800e4aa:	af00      	add	r7, sp, #0
 800e4ac:	6078      	str	r0, [r7, #4]
 800e4ae:	6039      	str	r1, [r7, #0]
    {}
 800e4b0:	bf00      	nop
 800e4b2:	370c      	adds	r7, #12
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ba:	4770      	bx	lr

0800e4bc <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800e4bc:	b480      	push	{r7}
 800e4be:	b083      	sub	sp, #12
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	370c      	adds	r7, #12
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d0:	4770      	bx	lr

0800e4d2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800e4d2:	b590      	push	{r4, r7, lr}
 800e4d4:	b083      	sub	sp, #12
 800e4d6:	af00      	add	r7, sp, #0
 800e4d8:	6078      	str	r0, [r7, #4]
 800e4da:	6039      	str	r1, [r7, #0]
 800e4dc:	687c      	ldr	r4, [r7, #4]
 800e4de:	6838      	ldr	r0, [r7, #0]
 800e4e0:	f000 fcf6 	bl	800eed0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE7functorEv>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	4619      	mov	r1, r3
 800e4e8:	4620      	mov	r0, r4
 800e4ea:	f7f6 fecb 	bl	8005284 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	1d1c      	adds	r4, r3, #4
 800e4f2:	6838      	ldr	r0, [r7, #0]
 800e4f4:	f000 fcf8 	bl	800eee8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE3lhsEv>
 800e4f8:	4603      	mov	r3, r0
 800e4fa:	4619      	mov	r1, r3
 800e4fc:	4620      	mov	r0, r4
 800e4fe:	f000 fd0a 	bl	800ef16 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERSA_>
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	f103 040c 	add.w	r4, r3, #12
 800e508:	6838      	ldr	r0, [r7, #0]
 800e50a:	f000 fcf8 	bl	800eefe <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE3rhsEv>
 800e50e:	4603      	mov	r3, r0
 800e510:	4619      	mov	r1, r3
 800e512:	4620      	mov	r0, r4
 800e514:	f000 fd0e 	bl	800ef34 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERS7_>
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	4618      	mov	r0, r3
 800e51c:	370c      	adds	r7, #12
 800e51e:	46bd      	mov	sp, r7
 800e520:	bd90      	pop	{r4, r7, pc}

0800e522 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800e522:	b590      	push	{r4, r7, lr}
 800e524:	b087      	sub	sp, #28
 800e526:	af00      	add	r7, sp, #0
 800e528:	60f8      	str	r0, [r7, #12]
 800e52a:	60b9      	str	r1, [r7, #8]
 800e52c:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	4618      	mov	r0, r3
 800e532:	f000 fd0e 	bl	800ef52 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 800e536:	4604      	mov	r4, r0
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	3304      	adds	r3, #4
 800e53c:	687a      	ldr	r2, [r7, #4]
 800e53e:	68b9      	ldr	r1, [r7, #8]
 800e540:	4618      	mov	r0, r3
 800e542:	f000 fd11 	bl	800ef68 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 800e546:	eef0 7a40 	vmov.f32	s15, s0
 800e54a:	edc7 7a04 	vstr	s15, [r7, #16]
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	330c      	adds	r3, #12
 800e552:	687a      	ldr	r2, [r7, #4]
 800e554:	68b9      	ldr	r1, [r7, #8]
 800e556:	4618      	mov	r0, r3
 800e558:	f000 fd19 	bl	800ef8e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E5coeffEii>
 800e55c:	eef0 7a40 	vmov.f32	s15, s0
 800e560:	edc7 7a05 	vstr	s15, [r7, #20]
 800e564:	f107 0214 	add.w	r2, r7, #20
 800e568:	f107 0310 	add.w	r3, r7, #16
 800e56c:	4619      	mov	r1, r3
 800e56e:	4620      	mov	r0, r4
 800e570:	f000 fd2e 	bl	800efd0 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 800e574:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e578:	eeb0 0a67 	vmov.f32	s0, s15
 800e57c:	371c      	adds	r7, #28
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd90      	pop	{r4, r7, pc}

0800e582 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800e582:	b480      	push	{r7}
 800e584:	b083      	sub	sp, #12
 800e586:	af00      	add	r7, sp, #0
 800e588:	6078      	str	r0, [r7, #4]
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	4618      	mov	r0, r3
 800e590:	370c      	adds	r7, #12
 800e592:	46bd      	mov	sp, r7
 800e594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e598:	4770      	bx	lr

0800e59a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800e59a:	b580      	push	{r7, lr}
 800e59c:	b086      	sub	sp, #24
 800e59e:	af00      	add	r7, sp, #0
 800e5a0:	60f8      	str	r0, [r7, #12]
 800e5a2:	60b9      	str	r1, [r7, #8]
 800e5a4:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800e5aa:	687a      	ldr	r2, [r7, #4]
 800e5ac:	68b9      	ldr	r1, [r7, #8]
 800e5ae:	6978      	ldr	r0, [r7, #20]
 800e5b0:	f000 fd23 	bl	800effa <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>
}
 800e5b4:	bf00      	nop
 800e5b6:	3718      	adds	r7, #24
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bd80      	pop	{r7, pc}

0800e5bc <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800e5bc:	b480      	push	{r7}
 800e5be:	b083      	sub	sp, #12
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	3304      	adds	r3, #4
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	370c      	adds	r7, #12
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d2:	4770      	bx	lr

0800e5d4 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	b086      	sub	sp, #24
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	60f8      	str	r0, [r7, #12]
 800e5dc:	60b9      	str	r1, [r7, #8]
 800e5de:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800e5e4:	687a      	ldr	r2, [r7, #4]
 800e5e6:	68b9      	ldr	r1, [r7, #8]
 800e5e8:	6978      	ldr	r0, [r7, #20]
 800e5ea:	f000 fd19 	bl	800f020 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>
}
 800e5ee:	bf00      	nop
 800e5f0:	3718      	adds	r7, #24
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	bd80      	pop	{r7, pc}

0800e5f6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800e5f6:	b480      	push	{r7}
 800e5f8:	b083      	sub	sp, #12
 800e5fa:	af00      	add	r7, sp, #0
 800e5fc:	6078      	str	r0, [r7, #4]
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	4618      	mov	r0, r3
 800e604:	370c      	adds	r7, #12
 800e606:	46bd      	mov	sp, r7
 800e608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60c:	4770      	bx	lr

0800e60e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800e60e:	b480      	push	{r7}
 800e610:	b083      	sub	sp, #12
 800e612:	af00      	add	r7, sp, #0
 800e614:	6078      	str	r0, [r7, #4]
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	685b      	ldr	r3, [r3, #4]
 800e61a:	4618      	mov	r0, r3
 800e61c:	370c      	adds	r7, #12
 800e61e:	46bd      	mov	sp, r7
 800e620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e624:	4770      	bx	lr

0800e626 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEENS_10DenseShapeES5_Li3EE5subToINS2_IfLi3ELi3ELi0ELi3ELi3EEEEEvRT_RKS3_RKS4_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void subTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800e626:	b580      	push	{r7, lr}
 800e628:	b088      	sub	sp, #32
 800e62a:	af00      	add	r7, sp, #0
 800e62c:	60f8      	str	r0, [r7, #12]
 800e62e:	60b9      	str	r1, [r7, #8]
 800e630:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::sub_assign_op<typename Dst::Scalar,Scalar>());
 800e632:	f107 0314 	add.w	r3, r7, #20
 800e636:	687a      	ldr	r2, [r7, #4]
 800e638:	68b9      	ldr	r1, [r7, #8]
 800e63a:	4618      	mov	r0, r3
 800e63c:	f000 fd2a 	bl	800f094 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE11lazyProductINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>
 800e640:	f107 031c 	add.w	r3, r7, #28
 800e644:	4618      	mov	r0, r3
 800e646:	f7fe ff91 	bl	800d56c <_ZN5Eigen8internal13sub_assign_opIffEC1Ev>
 800e64a:	f107 021c 	add.w	r2, r7, #28
 800e64e:	f107 0314 	add.w	r3, r7, #20
 800e652:	4619      	mov	r1, r3
 800e654:	68f8      	ldr	r0, [r7, #12]
 800e656:	f000 fd34 	bl	800f0c2 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800e65a:	bf00      	nop
 800e65c:	3720      	adds	r7, #32
 800e65e:	46bd      	mov	sp, r7
 800e660:	bd80      	pop	{r7, pc}

0800e662 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>:
 800e662:	b580      	push	{r7, lr}
 800e664:	b082      	sub	sp, #8
 800e666:	af00      	add	r7, sp, #0
 800e668:	6078      	str	r0, [r7, #4]
 800e66a:	6878      	ldr	r0, [r7, #4]
 800e66c:	f000 fd3a 	bl	800f0e4 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	4618      	mov	r0, r3
 800e674:	3708      	adds	r7, #8
 800e676:	46bd      	mov	sp, r7
 800e678:	bd80      	pop	{r7, pc}
	...

0800e67c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b084      	sub	sp, #16
 800e680:	af00      	add	r7, sp, #0
 800e682:	60f8      	str	r0, [r7, #12]
 800e684:	60b9      	str	r1, [r7, #8]
 800e686:	607a      	str	r2, [r7, #4]
 800e688:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800e68a:	68f8      	ldr	r0, [r7, #12]
 800e68c:	f7ff ffe9 	bl	800e662 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	68ba      	ldr	r2, [r7, #8]
 800e694:	601a      	str	r2, [r3, #0]
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	3304      	adds	r3, #4
 800e69a:	6879      	ldr	r1, [r7, #4]
 800e69c:	4618      	mov	r0, r3
 800e69e:	f7f8 f851 	bl	8006744 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	3305      	adds	r3, #5
 800e6a6:	6839      	ldr	r1, [r7, #0]
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	f7f8 f865 	bl	8006778 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800e6ae:	68bb      	ldr	r3, [r7, #8]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d011      	beq.n	800e6d8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	db08      	blt.n	800e6cc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	2b03      	cmp	r3, #3
 800e6be:	d105      	bne.n	800e6cc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800e6c0:	683b      	ldr	r3, [r7, #0]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	db02      	blt.n	800e6cc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800e6c6:	683b      	ldr	r3, [r7, #0]
 800e6c8:	2b01      	cmp	r3, #1
 800e6ca:	d005      	beq.n	800e6d8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800e6cc:	4b07      	ldr	r3, [pc, #28]	; (800e6ec <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x70>)
 800e6ce:	4a08      	ldr	r2, [pc, #32]	; (800e6f0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x74>)
 800e6d0:	21b0      	movs	r1, #176	; 0xb0
 800e6d2:	4808      	ldr	r0, [pc, #32]	; (800e6f4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x78>)
 800e6d4:	f00f f9c2 	bl	801da5c <__assert_func>
      checkSanity<Derived>();
 800e6d8:	2100      	movs	r1, #0
 800e6da:	68f8      	ldr	r0, [r7, #12]
 800e6dc:	f000 fd0d 	bl	800f0fa <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	3710      	adds	r7, #16
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	bd80      	pop	{r7, pc}
 800e6ea:	bf00      	nop
 800e6ec:	08025fe8 	.word	0x08025fe8
 800e6f0:	08026b40 	.word	0x08026b40
 800e6f4:	08026198 	.word	0x08026198

0800e6f8 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE4initEv>:
    void init()
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b082      	sub	sp, #8
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	689b      	ldr	r3, [r3, #8]
 800e704:	4618      	mov	r0, r3
 800e706:	f7f9 fe05 	bl	8008314 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 800e70a:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	615a      	str	r2, [r3, #20]
    }
 800e710:	bf00      	nop
 800e712:	3708      	adds	r7, #8
 800e714:	46bd      	mov	sp, r7
 800e716:	bd80      	pop	{r7, pc}

0800e718 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffEC1ERKSG_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800e718:	b580      	push	{r7, lr}
 800e71a:	b082      	sub	sp, #8
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
 800e720:	6039      	str	r1, [r7, #0]
 800e722:	6878      	ldr	r0, [r7, #4]
 800e724:	f000 fcf4 	bl	800f110 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	6839      	ldr	r1, [r7, #0]
 800e72c:	4618      	mov	r0, r3
 800e72e:	f000 fcfa 	bl	800f126 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>
  }
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	4618      	mov	r0, r3
 800e736:	3708      	adds	r7, #8
 800e738:	46bd      	mov	sp, r7
 800e73a:	bd80      	pop	{r7, pc}

0800e73c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b082      	sub	sp, #8
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
 800e744:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800e746:	2200      	movs	r2, #0
 800e748:	2100      	movs	r1, #0
 800e74a:	6878      	ldr	r0, [r7, #4]
 800e74c:	f000 fd13 	bl	800f176 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800e750:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e754:	eeb0 0a67 	vmov.f32	s0, s15
 800e758:	3708      	adds	r7, #8
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}

0800e75e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi1ELi2EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800e75e:	b580      	push	{r7, lr}
 800e760:	b084      	sub	sp, #16
 800e762:	af00      	add	r7, sp, #0
 800e764:	6078      	str	r0, [r7, #4]
 800e766:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800e768:	6839      	ldr	r1, [r7, #0]
 800e76a:	6878      	ldr	r0, [r7, #4]
 800e76c:	f000 fd16 	bl	800f19c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi1ELi1EE3runERKSK_RKS3_>
 800e770:	eef0 7a40 	vmov.f32	s15, s0
 800e774:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800e778:	6839      	ldr	r1, [r7, #0]
 800e77a:	6878      	ldr	r0, [r7, #4]
 800e77c:	f000 fd1f 	bl	800f1be <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi2ELi1EE3runERKSK_RKS3_>
 800e780:	eef0 7a40 	vmov.f32	s15, s0
 800e784:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800e788:	f107 020c 	add.w	r2, r7, #12
 800e78c:	f107 0308 	add.w	r3, r7, #8
 800e790:	4619      	mov	r1, r3
 800e792:	6838      	ldr	r0, [r7, #0]
 800e794:	f7fa fbdb 	bl	8008f4e <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800e798:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e79c:	eeb0 0a67 	vmov.f32	s0, s15
 800e7a0:	3710      	adds	r7, #16
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	bd80      	pop	{r7, pc}

0800e7a6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800e7a6:	b580      	push	{r7, lr}
 800e7a8:	b082      	sub	sp, #8
 800e7aa:	af00      	add	r7, sp, #0
 800e7ac:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800e7ae:	2202      	movs	r2, #2
 800e7b0:	2102      	movs	r1, #2
 800e7b2:	6878      	ldr	r0, [r7, #4]
 800e7b4:	f7fb fe2e 	bl	800a414 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800e7b8:	6878      	ldr	r0, [r7, #4]
 800e7ba:	f000 fd11 	bl	800f1e0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSL_>
  }
 800e7be:	bf00      	nop
 800e7c0:	3708      	adds	r7, #8
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	bd80      	pop	{r7, pc}

0800e7c6 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800e7c6:	b480      	push	{r7}
 800e7c8:	b083      	sub	sp, #12
 800e7ca:	af00      	add	r7, sp, #0
 800e7cc:	6078      	str	r0, [r7, #4]
    }
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	370c      	adds	r7, #12
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7da:	4770      	bx	lr

0800e7dc <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800e7dc:	b480      	push	{r7}
 800e7de:	b083      	sub	sp, #12
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
 800e7e4:	6039      	str	r1, [r7, #0]
    {}
 800e7e6:	bf00      	nop
 800e7e8:	370c      	adds	r7, #12
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f0:	4770      	bx	lr

0800e7f2 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800e7f2:	b480      	push	{r7}
 800e7f4:	b083      	sub	sp, #12
 800e7f6:	af00      	add	r7, sp, #0
 800e7f8:	6078      	str	r0, [r7, #4]
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	370c      	adds	r7, #12
 800e800:	46bd      	mov	sp, r7
 800e802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e806:	4770      	bx	lr

0800e808 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4DataC1ERKSP_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800e808:	b590      	push	{r4, r7, lr}
 800e80a:	b083      	sub	sp, #12
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
 800e810:	6039      	str	r1, [r7, #0]
 800e812:	687c      	ldr	r4, [r7, #4]
 800e814:	6838      	ldr	r0, [r7, #0]
 800e816:	f000 fced 	bl	800f1f4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE7functorEv>
 800e81a:	4603      	mov	r3, r0
 800e81c:	4619      	mov	r1, r3
 800e81e:	4620      	mov	r0, r4
 800e820:	f7f6 fd30 	bl	8005284 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	1d1c      	adds	r4, r3, #4
 800e828:	6838      	ldr	r0, [r7, #0]
 800e82a:	f000 fcef 	bl	800f20c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE3lhsEv>
 800e82e:	4603      	mov	r3, r0
 800e830:	4619      	mov	r1, r3
 800e832:	4620      	mov	r0, r4
 800e834:	f000 fd02 	bl	800f23c <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1ERSK_>
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	f103 0420 	add.w	r4, r3, #32
 800e83e:	6838      	ldr	r0, [r7, #0]
 800e840:	f000 fcf0 	bl	800f224 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE3rhsEv>
 800e844:	4603      	mov	r3, r0
 800e846:	4619      	mov	r1, r3
 800e848:	4620      	mov	r0, r4
 800e84a:	f000 fd06 	bl	800f25a <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1ERS9_>
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	4618      	mov	r0, r3
 800e852:	370c      	adds	r7, #12
 800e854:	46bd      	mov	sp, r7
 800e856:	bd90      	pop	{r4, r7, pc}

0800e858 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800e858:	b590      	push	{r4, r7, lr}
 800e85a:	b087      	sub	sp, #28
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	60f8      	str	r0, [r7, #12]
 800e860:	60b9      	str	r1, [r7, #8]
 800e862:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	4618      	mov	r0, r3
 800e868:	f000 fd06 	bl	800f278 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4Data4funcEv>
 800e86c:	4604      	mov	r4, r0
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	3304      	adds	r3, #4
 800e872:	687a      	ldr	r2, [r7, #4]
 800e874:	68b9      	ldr	r1, [r7, #8]
 800e876:	4618      	mov	r0, r3
 800e878:	f000 fd09 	bl	800f28e <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 800e87c:	eef0 7a40 	vmov.f32	s15, s0
 800e880:	edc7 7a04 	vstr	s15, [r7, #16]
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	3320      	adds	r3, #32
 800e888:	687a      	ldr	r2, [r7, #4]
 800e88a:	68b9      	ldr	r1, [r7, #8]
 800e88c:	4618      	mov	r0, r3
 800e88e:	f000 fd11 	bl	800f2b4 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE5coeffEii>
 800e892:	eef0 7a40 	vmov.f32	s15, s0
 800e896:	edc7 7a05 	vstr	s15, [r7, #20]
 800e89a:	f107 0214 	add.w	r2, r7, #20
 800e89e:	f107 0310 	add.w	r3, r7, #16
 800e8a2:	4619      	mov	r1, r3
 800e8a4:	4620      	mov	r0, r4
 800e8a6:	f000 fb93 	bl	800efd0 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 800e8aa:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e8ae:	eeb0 0a67 	vmov.f32	s0, s15
 800e8b2:	371c      	adds	r7, #28
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	bd90      	pop	{r4, r7, pc}

0800e8b8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800e8b8:	b480      	push	{r7}
 800e8ba:	b083      	sub	sp, #12
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
 800e8c0:	bf00      	nop
 800e8c2:	370c      	adds	r7, #12
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ca:	4770      	bx	lr

0800e8cc <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800e8cc:	b480      	push	{r7}
 800e8ce:	b083      	sub	sp, #12
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	3330      	adds	r3, #48	; 0x30
 800e8d8:	4618      	mov	r0, r3
 800e8da:	370c      	adds	r7, #12
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e2:	4770      	bx	lr

0800e8e4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800e8e4:	b480      	push	{r7}
 800e8e6:	b083      	sub	sp, #12
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	370c      	adds	r7, #12
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f8:	4770      	bx	lr

0800e8fa <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800e8fa:	b480      	push	{r7}
 800e8fc:	b083      	sub	sp, #12
 800e8fe:	af00      	add	r7, sp, #0
 800e900:	6078      	str	r0, [r7, #4]
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	3318      	adds	r3, #24
 800e906:	4618      	mov	r0, r3
 800e908:	370c      	adds	r7, #12
 800e90a:	46bd      	mov	sp, r7
 800e90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e910:	4770      	bx	lr

0800e912 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800e912:	b580      	push	{r7, lr}
 800e914:	b082      	sub	sp, #8
 800e916:	af00      	add	r7, sp, #0
 800e918:	6078      	str	r0, [r7, #4]
 800e91a:	6039      	str	r1, [r7, #0]
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	6839      	ldr	r1, [r7, #0]
 800e920:	4618      	mov	r0, r3
 800e922:	f000 fce8 	bl	800f2f6 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERKS9_>
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	4618      	mov	r0, r3
 800e92a:	3708      	adds	r7, #8
 800e92c:	46bd      	mov	sp, r7
 800e92e:	bd80      	pop	{r7, pc}

0800e930 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERS7_>:
 800e930:	b580      	push	{r7, lr}
 800e932:	b082      	sub	sp, #8
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
 800e938:	6039      	str	r1, [r7, #0]
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	6839      	ldr	r1, [r7, #0]
 800e93e:	4618      	mov	r0, r3
 800e940:	f000 fce8 	bl	800f314 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERKS6_>
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	4618      	mov	r0, r3
 800e948:	3708      	adds	r7, #8
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bd80      	pop	{r7, pc}

0800e94e <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800e94e:	b590      	push	{r4, r7, lr}
 800e950:	b087      	sub	sp, #28
 800e952:	af00      	add	r7, sp, #0
 800e954:	60f8      	str	r0, [r7, #12]
 800e956:	60b9      	str	r1, [r7, #8]
 800e958:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	4618      	mov	r0, r3
 800e95e:	f000 fce8 	bl	800f332 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 800e962:	4604      	mov	r4, r0
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	3304      	adds	r3, #4
 800e968:	687a      	ldr	r2, [r7, #4]
 800e96a:	68b9      	ldr	r1, [r7, #8]
 800e96c:	4618      	mov	r0, r3
 800e96e:	f000 fceb 	bl	800f348 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 800e972:	eef0 7a40 	vmov.f32	s15, s0
 800e976:	edc7 7a04 	vstr	s15, [r7, #16]
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	330c      	adds	r3, #12
 800e97e:	687a      	ldr	r2, [r7, #4]
 800e980:	68b9      	ldr	r1, [r7, #8]
 800e982:	4618      	mov	r0, r3
 800e984:	f000 fcf3 	bl	800f36e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E5coeffEii>
 800e988:	eef0 7a40 	vmov.f32	s15, s0
 800e98c:	edc7 7a05 	vstr	s15, [r7, #20]
 800e990:	f107 0214 	add.w	r2, r7, #20
 800e994:	f107 0310 	add.w	r3, r7, #16
 800e998:	4619      	mov	r1, r3
 800e99a:	4620      	mov	r0, r4
 800e99c:	f000 fb18 	bl	800efd0 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 800e9a0:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e9a4:	eeb0 0a67 	vmov.f32	s0, s15
 800e9a8:	371c      	adds	r7, #28
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	bd90      	pop	{r4, r7, pc}

0800e9ae <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 800e9ae:	b590      	push	{r4, r7, lr}
 800e9b0:	b087      	sub	sp, #28
 800e9b2:	af00      	add	r7, sp, #0
 800e9b4:	60f8      	str	r0, [r7, #12]
 800e9b6:	60b9      	str	r1, [r7, #8]
 800e9b8:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 800e9ba:	68b8      	ldr	r0, [r7, #8]
 800e9bc:	f7f7 ff9e 	bl	80068fc <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4rowsEv>
 800e9c0:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 800e9c2:	68b8      	ldr	r0, [r7, #8]
 800e9c4:	f7f6 fe73 	bl	80056ae <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>
 800e9c8:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	f7f6 f92e 	bl	8004c2e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800e9d2:	4602      	mov	r2, r0
 800e9d4:	697b      	ldr	r3, [r7, #20]
 800e9d6:	4293      	cmp	r3, r2
 800e9d8:	d107      	bne.n	800e9ea <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0x3c>
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	4618      	mov	r0, r3
 800e9de:	f7f6 f91b 	bl	8004c18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800e9e2:	4602      	mov	r2, r0
 800e9e4:	693b      	ldr	r3, [r7, #16]
 800e9e6:	4293      	cmp	r3, r2
 800e9e8:	d001      	beq.n	800e9ee <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0x40>
 800e9ea:	2301      	movs	r3, #1
 800e9ec:	e000      	b.n	800e9f0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0x42>
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d005      	beq.n	800ea00 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0x52>
      dst.resize(dstRows, dstCols);
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	693a      	ldr	r2, [r7, #16]
 800e9f8:	6979      	ldr	r1, [r7, #20]
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	f7f9 f830 	bl	8007a60 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 800ea00:	68b8      	ldr	r0, [r7, #8]
 800ea02:	f000 fcd5 	bl	800f3b0 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE3lhsEv>
 800ea06:	4604      	mov	r4, r0
 800ea08:	68b8      	ldr	r0, [r7, #8]
 800ea0a:	f000 fcdd 	bl	800f3c8 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE3rhsEv>
 800ea0e:	4603      	mov	r3, r0
 800ea10:	461a      	mov	r2, r3
 800ea12:	4621      	mov	r1, r4
 800ea14:	68f8      	ldr	r0, [r7, #12]
 800ea16:	f000 fce3 	bl	800f3e0 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS_10DenseShapeES4_Li3EE6evalToIS3_EEvRT_RKS3_SA_>
  }
 800ea1a:	bf00      	nop
 800ea1c:	371c      	adds	r7, #28
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	bd90      	pop	{r4, r7, pc}
	...

0800ea24 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800ea24:	b580      	push	{r7, lr}
 800ea26:	b084      	sub	sp, #16
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	60f8      	str	r0, [r7, #12]
 800ea2c:	60b9      	str	r1, [r7, #8]
 800ea2e:	607a      	str	r2, [r7, #4]
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	687a      	ldr	r2, [r7, #4]
 800ea34:	68b9      	ldr	r1, [r7, #8]
 800ea36:	4618      	mov	r0, r3
 800ea38:	f000 fcf0 	bl	800f41c <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ENS_5DenseEEC1ERS5_i>
      eigen_assert( (i>=0) && (
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	db06      	blt.n	800ea50 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x2c>
 800ea42:	68b8      	ldr	r0, [r7, #8]
 800ea44:	f7f7 ff68 	bl	8006918 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800ea48:	4602      	mov	r2, r0
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	4293      	cmp	r3, r2
 800ea4e:	db05      	blt.n	800ea5c <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x38>
 800ea50:	4b05      	ldr	r3, [pc, #20]	; (800ea68 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x44>)
 800ea52:	4a06      	ldr	r2, [pc, #24]	; (800ea6c <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x48>)
 800ea54:	2178      	movs	r1, #120	; 0x78
 800ea56:	4806      	ldr	r0, [pc, #24]	; (800ea70 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x4c>)
 800ea58:	f00f f800 	bl	801da5c <__assert_func>
    }
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	4618      	mov	r0, r3
 800ea60:	3710      	adds	r7, #16
 800ea62:	46bd      	mov	sp, r7
 800ea64:	bd80      	pop	{r7, pc}
 800ea66:	bf00      	nop
 800ea68:	08024448 	.word	0x08024448
 800ea6c:	08026c44 	.word	0x08026c44
 800ea70:	080245cc 	.word	0x080245cc

0800ea74 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800ea74:	b480      	push	{r7}
 800ea76:	b083      	sub	sp, #12
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	4618      	mov	r0, r3
 800ea80:	370c      	adds	r7, #12
 800ea82:	46bd      	mov	sp, r7
 800ea84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea88:	4770      	bx	lr

0800ea8a <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>:
 800ea8a:	b580      	push	{r7, lr}
 800ea8c:	b082      	sub	sp, #8
 800ea8e:	af00      	add	r7, sp, #0
 800ea90:	6078      	str	r0, [r7, #4]
 800ea92:	6878      	ldr	r0, [r7, #4]
 800ea94:	f000 fcd3 	bl	800f43e <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	3708      	adds	r7, #8
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	bd80      	pop	{r7, pc}

0800eaa2 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800eaa2:	b580      	push	{r7, lr}
 800eaa4:	b082      	sub	sp, #8
 800eaa6:	af00      	add	r7, sp, #0
 800eaa8:	6078      	str	r0, [r7, #4]
 800eaaa:	6878      	ldr	r0, [r7, #4]
 800eaac:	f7ff ffed 	bl	800ea8a <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	4618      	mov	r0, r3
 800eab4:	3708      	adds	r7, #8
 800eab6:	46bd      	mov	sp, r7
 800eab8:	bd80      	pop	{r7, pc}

0800eaba <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800eaba:	b580      	push	{r7, lr}
 800eabc:	b082      	sub	sp, #8
 800eabe:	af00      	add	r7, sp, #0
 800eac0:	6078      	str	r0, [r7, #4]
 800eac2:	f7f7 fe7e 	bl	80067c2 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800eac6:	4603      	mov	r3, r0
 800eac8:	4618      	mov	r0, r3
 800eaca:	3708      	adds	r7, #8
 800eacc:	46bd      	mov	sp, r7
 800eace:	bd80      	pop	{r7, pc}

0800ead0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b082      	sub	sp, #8
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
 800ead8:	f7f7 fe7b 	bl	80067d2 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800eadc:	4603      	mov	r3, r0
 800eade:	4618      	mov	r0, r3
 800eae0:	3708      	adds	r7, #8
 800eae2:	46bd      	mov	sp, r7
 800eae4:	bd80      	pop	{r7, pc}
	...

0800eae8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800eae8:	b5b0      	push	{r4, r5, r7, lr}
 800eaea:	b084      	sub	sp, #16
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	60f8      	str	r0, [r7, #12]
 800eaf0:	60b9      	str	r1, [r7, #8]
 800eaf2:	607a      	str	r2, [r7, #4]
 800eaf4:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800eaf6:	68f8      	ldr	r0, [r7, #12]
 800eaf8:	f7ff ffd3 	bl	800eaa2 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEENS_5DenseEEC1Ev>
 800eafc:	68fa      	ldr	r2, [r7, #12]
 800eafe:	68bb      	ldr	r3, [r7, #8]
 800eb00:	4614      	mov	r4, r2
 800eb02:	461d      	mov	r5, r3
 800eb04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb08:	e895 0003 	ldmia.w	r5, {r0, r1}
 800eb0c:	e884 0003 	stmia.w	r4, {r0, r1}
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	f103 0218 	add.w	r2, r3, #24
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	4614      	mov	r4, r2
 800eb1a:	461d      	mov	r5, r3
 800eb1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb20:	e895 0003 	ldmia.w	r5, {r0, r1}
 800eb24:	e884 0003 	stmia.w	r4, {r0, r1}
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	3330      	adds	r3, #48	; 0x30
 800eb2c:	6839      	ldr	r1, [r7, #0]
 800eb2e:	4618      	mov	r0, r3
 800eb30:	f7f6 fba8 	bl	8005284 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800eb34:	68b8      	ldr	r0, [r7, #8]
 800eb36:	f7fc fd11 	bl	800b55c <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800eb3a:	4604      	mov	r4, r0
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	4618      	mov	r0, r3
 800eb40:	f7ff ffbb 	bl	800eaba <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4rowsEv>
 800eb44:	4603      	mov	r3, r0
 800eb46:	429c      	cmp	r4, r3
 800eb48:	d10a      	bne.n	800eb60 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x78>
 800eb4a:	68b8      	ldr	r0, [r7, #8]
 800eb4c:	f7fc fd13 	bl	800b576 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800eb50:	4604      	mov	r4, r0
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	4618      	mov	r0, r3
 800eb56:	f7ff ffbb 	bl	800ead0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4colsEv>
 800eb5a:	4603      	mov	r3, r0
 800eb5c:	429c      	cmp	r4, r3
 800eb5e:	d005      	beq.n	800eb6c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x84>
 800eb60:	4b05      	ldr	r3, [pc, #20]	; (800eb78 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x90>)
 800eb62:	4a06      	ldr	r2, [pc, #24]	; (800eb7c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x94>)
 800eb64:	2174      	movs	r1, #116	; 0x74
 800eb66:	4806      	ldr	r0, [pc, #24]	; (800eb80 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x98>)
 800eb68:	f00e ff78 	bl	801da5c <__assert_func>
    }
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	4618      	mov	r0, r3
 800eb70:	3710      	adds	r7, #16
 800eb72:	46bd      	mov	sp, r7
 800eb74:	bdb0      	pop	{r4, r5, r7, pc}
 800eb76:	bf00      	nop
 800eb78:	0801f8c4 	.word	0x0801f8c4
 800eb7c:	08026d34 	.word	0x08026d34
 800eb80:	0801fb28 	.word	0x0801fb28

0800eb84 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b082      	sub	sp, #8
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
 800eb8c:	6878      	ldr	r0, [r7, #4]
 800eb8e:	f000 f809 	bl	800eba4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800eb92:	4603      	mov	r3, r0
 800eb94:	4618      	mov	r0, r3
 800eb96:	f000 fc5d 	bl	800f454 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE4colsEv>
 800eb9a:	4603      	mov	r3, r0
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	3708      	adds	r7, #8
 800eba0:	46bd      	mov	sp, r7
 800eba2:	bd80      	pop	{r7, pc}

0800eba4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800eba4:	b480      	push	{r7}
 800eba6:	b083      	sub	sp, #12
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	4618      	mov	r0, r3
 800ebb0:	370c      	adds	r7, #12
 800ebb2:	46bd      	mov	sp, r7
 800ebb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb8:	4770      	bx	lr

0800ebba <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800ebba:	b580      	push	{r7, lr}
 800ebbc:	b082      	sub	sp, #8
 800ebbe:	af00      	add	r7, sp, #0
 800ebc0:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	f7fc fcc9 	bl	800b55c <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800ebca:	4603      	mov	r3, r0
    }
 800ebcc:	4618      	mov	r0, r3
 800ebce:	3708      	adds	r7, #8
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd80      	pop	{r7, pc}

0800ebd4 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b082      	sub	sp, #8
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
 800ebdc:	6878      	ldr	r0, [r7, #4]
 800ebde:	f000 fc60 	bl	800f4a2 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	3708      	adds	r7, #8
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	bd80      	pop	{r7, pc}

0800ebec <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800ebec:	b580      	push	{r7, lr}
 800ebee:	b082      	sub	sp, #8
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	6078      	str	r0, [r7, #4]
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	f7ff ffec 	bl	800ebd4 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	4618      	mov	r0, r3
 800ec00:	3708      	adds	r7, #8
 800ec02:	46bd      	mov	sp, r7
 800ec04:	bd80      	pop	{r7, pc}

0800ec06 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800ec06:	b580      	push	{r7, lr}
 800ec08:	b082      	sub	sp, #8
 800ec0a:	af00      	add	r7, sp, #0
 800ec0c:	6078      	str	r0, [r7, #4]
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	4618      	mov	r0, r3
 800ec12:	f7ff ffeb 	bl	800ebec <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EED1Ev>
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	4618      	mov	r0, r3
 800ec1a:	3708      	adds	r7, #8
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	bd80      	pop	{r7, pc}

0800ec20 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b082      	sub	sp, #8
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	f7ff ffeb 	bl	800ec06 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	4618      	mov	r0, r3
 800ec34:	3708      	adds	r7, #8
 800ec36:	46bd      	mov	sp, r7
 800ec38:	bd80      	pop	{r7, pc}

0800ec3a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 800ec3a:	b580      	push	{r7, lr}
 800ec3c:	b082      	sub	sp, #8
 800ec3e:	af00      	add	r7, sp, #0
 800ec40:	6078      	str	r0, [r7, #4]
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	330c      	adds	r3, #12
 800ec46:	4618      	mov	r0, r3
 800ec48:	f7ff ffea 	bl	800ec20 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	3304      	adds	r3, #4
 800ec50:	4618      	mov	r0, r3
 800ec52:	f7fc fd79 	bl	800b748 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	4618      	mov	r0, r3
 800ec5a:	3708      	adds	r7, #8
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	bd80      	pop	{r7, pc}

0800ec60 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b082      	sub	sp, #8
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	f7ff ffe5 	bl	800ec3a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 800ec70:	6878      	ldr	r0, [r7, #4]
 800ec72:	f000 fc0b 	bl	800f48c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	4618      	mov	r0, r3
 800ec7a:	3708      	adds	r7, #8
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	bd80      	pop	{r7, pc}

0800ec80 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b082      	sub	sp, #8
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	f7ff ffe8 	bl	800ec60 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffED1Ev>
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	4618      	mov	r0, r3
 800ec94:	3708      	adds	r7, #8
 800ec96:	46bd      	mov	sp, r7
 800ec98:	bd80      	pop	{r7, pc}

0800ec9a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800ec9a:	b580      	push	{r7, lr}
 800ec9c:	b082      	sub	sp, #8
 800ec9e:	af00      	add	r7, sp, #0
 800eca0:	6078      	str	r0, [r7, #4]
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	4618      	mov	r0, r3
 800eca6:	f7ff ffeb 	bl	800ec80 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	4618      	mov	r0, r3
 800ecae:	3708      	adds	r7, #8
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd80      	pop	{r7, pc}

0800ecb4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	ed2d 8b02 	vpush	{d8}
 800ecba:	b088      	sub	sp, #32
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
 800ecc0:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800ecc2:	6878      	ldr	r0, [r7, #4]
 800ecc4:	f7ff fb0d 	bl	800e2e2 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE4rowsEv>
 800ecc8:	4603      	mov	r3, r0
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	dd05      	ble.n	800ecda <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800ecce:	6878      	ldr	r0, [r7, #4]
 800ecd0:	f7ff ff58 	bl	800eb84 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE4colsEv>
 800ecd4:	4603      	mov	r3, r0
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	dc06      	bgt.n	800ece8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800ecda:	4b16      	ldr	r3, [pc, #88]	; (800ed34 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800ecdc:	4a16      	ldr	r2, [pc, #88]	; (800ed38 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800ecde:	f240 119b 	movw	r1, #411	; 0x19b
 800ece2:	4816      	ldr	r0, [pc, #88]	; (800ed3c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800ece4:	f00e feba 	bl	801da5c <__assert_func>
 800ece8:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800ecea:	6878      	ldr	r0, [r7, #4]
 800ecec:	f7ff ff5a 	bl	800eba4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800ecf0:	4602      	mov	r2, r0
 800ecf2:	f107 030c 	add.w	r3, r7, #12
 800ecf6:	4611      	mov	r1, r2
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	f000 fbb8 	bl	800f46e <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800ecfe:	6878      	ldr	r0, [r7, #4]
 800ed00:	f7ff ff50 	bl	800eba4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800ed04:	4602      	mov	r2, r0
 800ed06:	f107 030c 	add.w	r3, r7, #12
 800ed0a:	6839      	ldr	r1, [r7, #0]
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	f000 fbd3 	bl	800f4b8 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 800ed12:	eeb0 8a40 	vmov.f32	s16, s0
 800ed16:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800ed18:	f107 030c 	add.w	r3, r7, #12
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	f7ff ffbc 	bl	800ec9a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800ed22:	eef0 7a48 	vmov.f32	s15, s16
}
 800ed26:	eeb0 0a67 	vmov.f32	s0, s15
 800ed2a:	3720      	adds	r7, #32
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	ecbd 8b02 	vpop	{d8}
 800ed32:	bd80      	pop	{r7, pc}
 800ed34:	08024944 	.word	0x08024944
 800ed38:	08026fa4 	.word	0x08026fa4
 800ed3c:	08024b50 	.word	0x08024b50

0800ed40 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b082      	sub	sp, #8
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800ed48:	2202      	movs	r2, #2
 800ed4a:	2101      	movs	r1, #1
 800ed4c:	6878      	ldr	r0, [r7, #4]
 800ed4e:	f7fd fd50 	bl	800c7f2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800ed52:	6878      	ldr	r0, [r7, #4]
 800ed54:	f000 fbc1 	bl	800f4da <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSG_>
  }
 800ed58:	bf00      	nop
 800ed5a:	3708      	adds	r7, #8
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	bd80      	pop	{r7, pc}

0800ed60 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800ed60:	b480      	push	{r7}
 800ed62:	b083      	sub	sp, #12
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
    }
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	370c      	adds	r7, #12
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed74:	4770      	bx	lr

0800ed76 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800ed76:	b480      	push	{r7}
 800ed78:	b083      	sub	sp, #12
 800ed7a:	af00      	add	r7, sp, #0
 800ed7c:	6078      	str	r0, [r7, #4]
 800ed7e:	6039      	str	r1, [r7, #0]
}
 800ed80:	bf00      	nop
 800ed82:	370c      	adds	r7, #12
 800ed84:	46bd      	mov	sp, r7
 800ed86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8a:	4770      	bx	lr

0800ed8c <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
struct evaluator<PlainObjectBase<Derived> >
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b082      	sub	sp, #8
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]
 800ed94:	6878      	ldr	r0, [r7, #4]
 800ed96:	f000 fbd5 	bl	800f544 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	3708      	adds	r7, #8
 800eda0:	46bd      	mov	sp, r7
 800eda2:	bd80      	pop	{r7, pc}

0800eda4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b082      	sub	sp, #8
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	4618      	mov	r0, r3
 800edb0:	f7ff ffec 	bl	800ed8c <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	4618      	mov	r0, r3
 800edb8:	3708      	adds	r7, #8
 800edba:	46bd      	mov	sp, r7
 800edbc:	bd80      	pop	{r7, pc}

0800edbe <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800edbe:	b580      	push	{r7, lr}
 800edc0:	b082      	sub	sp, #8
 800edc2:	af00      	add	r7, sp, #0
 800edc4:	6078      	str	r0, [r7, #4]
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	4618      	mov	r0, r3
 800edca:	f7ff ffeb 	bl	800eda4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 800edce:	6878      	ldr	r0, [r7, #4]
 800edd0:	f000 fbad 	bl	800f52e <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	4618      	mov	r0, r3
 800edd8:	3708      	adds	r7, #8
 800edda:	46bd      	mov	sp, r7
 800eddc:	bd80      	pop	{r7, pc}

0800edde <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800edde:	b580      	push	{r7, lr}
 800ede0:	b082      	sub	sp, #8
 800ede2:	af00      	add	r7, sp, #0
 800ede4:	6078      	str	r0, [r7, #4]
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	4618      	mov	r0, r3
 800edea:	f7ff ffe8 	bl	800edbe <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfED1Ev>
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	4618      	mov	r0, r3
 800edf2:	3708      	adds	r7, #8
 800edf4:	46bd      	mov	sp, r7
 800edf6:	bd80      	pop	{r7, pc}

0800edf8 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b082      	sub	sp, #8
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	330c      	adds	r3, #12
 800ee04:	4618      	mov	r0, r3
 800ee06:	f7ff ffea 	bl	800edde <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	3308      	adds	r3, #8
 800ee0e:	4618      	mov	r0, r3
 800ee10:	f7f8 f995 	bl	800713e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 800ee14:	6878      	ldr	r0, [r7, #4]
 800ee16:	f000 fb7f 	bl	800f518 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEED1Ev>
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	3708      	adds	r7, #8
 800ee20:	46bd      	mov	sp, r7
 800ee22:	bd80      	pop	{r7, pc}

0800ee24 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b082      	sub	sp, #8
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	4618      	mov	r0, r3
 800ee30:	f7ff ffe2 	bl	800edf8 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffED1Ev>
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	4618      	mov	r0, r3
 800ee38:	3708      	adds	r7, #8
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	bd80      	pop	{r7, pc}

0800ee3e <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800ee3e:	b580      	push	{r7, lr}
 800ee40:	b090      	sub	sp, #64	; 0x40
 800ee42:	af02      	add	r7, sp, #8
 800ee44:	60f8      	str	r0, [r7, #12]
 800ee46:	60b9      	str	r1, [r7, #8]
 800ee48:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800ee4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ee4e:	68b9      	ldr	r1, [r7, #8]
 800ee50:	4618      	mov	r0, r3
 800ee52:	f000 fb52 	bl	800f4fa <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1ERKS8_>
  resize_if_allowed(dst, src, func);
 800ee56:	687a      	ldr	r2, [r7, #4]
 800ee58:	68b9      	ldr	r1, [r7, #8]
 800ee5a:	68f8      	ldr	r0, [r7, #12]
 800ee5c:	f000 fb9a 	bl	800f594 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800ee60:	f107 0320 	add.w	r3, r7, #32
 800ee64:	68f9      	ldr	r1, [r7, #12]
 800ee66:	4618      	mov	r0, r3
 800ee68:	f7f7 fc2d 	bl	80066c6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800ee6c:	68f8      	ldr	r0, [r7, #12]
 800ee6e:	f7f8 fc6b 	bl	8007748 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 800ee72:	4603      	mov	r3, r0
 800ee74:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ee78:	f107 0120 	add.w	r1, r7, #32
 800ee7c:	f107 0010 	add.w	r0, r7, #16
 800ee80:	9300      	str	r3, [sp, #0]
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	f000 fbd0 	bl	800f628 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSC_RKSE_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800ee88:	f107 0310 	add.w	r3, r7, #16
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f000 fbe5 	bl	800f65c <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSG_>
  DstEvaluatorType dstEvaluator(dst);
 800ee92:	f107 0320 	add.w	r3, r7, #32
 800ee96:	4618      	mov	r0, r3
 800ee98:	f7f6 f8db 	bl	8005052 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800ee9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eea0:	4618      	mov	r0, r3
 800eea2:	f7ff ffbf 	bl	800ee24 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEED1Ev>
}
 800eea6:	bf00      	nop
 800eea8:	3738      	adds	r7, #56	; 0x38
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}

0800eeae <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800eeae:	b580      	push	{r7, lr}
 800eeb0:	b086      	sub	sp, #24
 800eeb2:	af00      	add	r7, sp, #0
 800eeb4:	60f8      	str	r0, [r7, #12]
 800eeb6:	60b9      	str	r1, [r7, #8]
 800eeb8:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800eebe:	687a      	ldr	r2, [r7, #4]
 800eec0:	68b9      	ldr	r1, [r7, #8]
 800eec2:	6978      	ldr	r0, [r7, #20]
 800eec4:	f000 fbd5 	bl	800f672 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSG_RKSI_>
}
 800eec8:	bf00      	nop
 800eeca:	3718      	adds	r7, #24
 800eecc:	46bd      	mov	sp, r7
 800eece:	bd80      	pop	{r7, pc}

0800eed0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800eed0:	b480      	push	{r7}
 800eed2:	b083      	sub	sp, #12
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	332c      	adds	r3, #44	; 0x2c
 800eedc:	4618      	mov	r0, r3
 800eede:	370c      	adds	r7, #12
 800eee0:	46bd      	mov	sp, r7
 800eee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee6:	4770      	bx	lr

0800eee8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800eee8:	b480      	push	{r7}
 800eeea:	b083      	sub	sp, #12
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	4618      	mov	r0, r3
 800eef4:	370c      	adds	r7, #12
 800eef6:	46bd      	mov	sp, r7
 800eef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefc:	4770      	bx	lr

0800eefe <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800eefe:	b480      	push	{r7}
 800ef00:	b083      	sub	sp, #12
 800ef02:	af00      	add	r7, sp, #0
 800ef04:	6078      	str	r0, [r7, #4]
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	3318      	adds	r3, #24
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	370c      	adds	r7, #12
 800ef0e:	46bd      	mov	sp, r7
 800ef10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef14:	4770      	bx	lr

0800ef16 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800ef16:	b580      	push	{r7, lr}
 800ef18:	b082      	sub	sp, #8
 800ef1a:	af00      	add	r7, sp, #0
 800ef1c:	6078      	str	r0, [r7, #4]
 800ef1e:	6039      	str	r1, [r7, #0]
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	6839      	ldr	r1, [r7, #0]
 800ef24:	4618      	mov	r0, r3
 800ef26:	f000 fbb7 	bl	800f698 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERKS9_>
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	3708      	adds	r7, #8
 800ef30:	46bd      	mov	sp, r7
 800ef32:	bd80      	pop	{r7, pc}

0800ef34 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERS7_>:
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b082      	sub	sp, #8
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
 800ef3c:	6039      	str	r1, [r7, #0]
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	6839      	ldr	r1, [r7, #0]
 800ef42:	4618      	mov	r0, r3
 800ef44:	f000 fbb7 	bl	800f6b6 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERKS6_>
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3708      	adds	r7, #8
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}

0800ef52 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 800ef52:	b480      	push	{r7}
 800ef54:	b083      	sub	sp, #12
 800ef56:	af00      	add	r7, sp, #0
 800ef58:	6078      	str	r0, [r7, #4]
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	370c      	adds	r7, #12
 800ef60:	46bd      	mov	sp, r7
 800ef62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef66:	4770      	bx	lr

0800ef68 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b084      	sub	sp, #16
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	60f8      	str	r0, [r7, #12]
 800ef70:	60b9      	str	r1, [r7, #8]
 800ef72:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	68ba      	ldr	r2, [r7, #8]
 800ef78:	6879      	ldr	r1, [r7, #4]
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	f000 fbaa 	bl	800f6d4 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE5coeffEii>
 800ef80:	eef0 7a40 	vmov.f32	s15, s0
  }
 800ef84:	eeb0 0a67 	vmov.f32	s0, s15
 800ef88:	3710      	adds	r7, #16
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd80      	pop	{r7, pc}

0800ef8e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800ef8e:	b5b0      	push	{r4, r5, r7, lr}
 800ef90:	b084      	sub	sp, #16
 800ef92:	af00      	add	r7, sp, #0
 800ef94:	60f8      	str	r0, [r7, #12]
 800ef96:	60b9      	str	r1, [r7, #8]
 800ef98:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	681c      	ldr	r4, [r3, #0]
 800ef9e:	68f8      	ldr	r0, [r7, #12]
 800efa0:	f000 fbb9 	bl	800f716 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E9colStrideEv>
 800efa4:	4602      	mov	r2, r0
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	fb03 f502 	mul.w	r5, r3, r2
 800efac:	68f8      	ldr	r0, [r7, #12]
 800efae:	f000 fbbd 	bl	800f72c <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E9rowStrideEv>
 800efb2:	4602      	mov	r2, r0
 800efb4:	68bb      	ldr	r3, [r7, #8]
 800efb6:	fb02 f303 	mul.w	r3, r2, r3
 800efba:	442b      	add	r3, r5
 800efbc:	009b      	lsls	r3, r3, #2
 800efbe:	4423      	add	r3, r4
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	ee07 3a90 	vmov	s15, r3
  }
 800efc6:	eeb0 0a67 	vmov.f32	s0, s15
 800efca:	3710      	adds	r7, #16
 800efcc:	46bd      	mov	sp, r7
 800efce:	bdb0      	pop	{r4, r5, r7, pc}

0800efd0 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 800efd0:	b480      	push	{r7}
 800efd2:	b085      	sub	sp, #20
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	60f8      	str	r0, [r7, #12]
 800efd8:	60b9      	str	r1, [r7, #8]
 800efda:	607a      	str	r2, [r7, #4]
 800efdc:	68bb      	ldr	r3, [r7, #8]
 800efde:	ed93 7a00 	vldr	s14, [r3]
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	edd3 7a00 	vldr	s15, [r3]
 800efe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800efec:	eeb0 0a67 	vmov.f32	s0, s15
 800eff0:	3714      	adds	r7, #20
 800eff2:	46bd      	mov	sp, r7
 800eff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff8:	4770      	bx	lr

0800effa <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800effa:	b580      	push	{r7, lr}
 800effc:	b084      	sub	sp, #16
 800effe:	af00      	add	r7, sp, #0
 800f000:	60f8      	str	r0, [r7, #12]
 800f002:	60b9      	str	r1, [r7, #8]
 800f004:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800f006:	68b9      	ldr	r1, [r7, #8]
 800f008:	68f8      	ldr	r0, [r7, #12]
 800f00a:	f000 fb9a 	bl	800f742 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_EEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800f00e:	687a      	ldr	r2, [r7, #4]
 800f010:	68b9      	ldr	r1, [r7, #8]
 800f012:	68f8      	ldr	r0, [r7, #12]
 800f014:	f000 fba0 	bl	800f758 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800f018:	bf00      	nop
 800f01a:	3710      	adds	r7, #16
 800f01c:	46bd      	mov	sp, r7
 800f01e:	bd80      	pop	{r7, pc}

0800f020 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::sub_assign_op<Scalar,Scalar> &)
 800f020:	b590      	push	{r4, r7, lr}
 800f022:	b085      	sub	sp, #20
 800f024:	af00      	add	r7, sp, #0
 800f026:	60f8      	str	r0, [r7, #12]
 800f028:	60b9      	str	r1, [r7, #8]
 800f02a:	607a      	str	r2, [r7, #4]
    eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	4618      	mov	r0, r3
 800f030:	f7f6 fded 	bl	8005c0e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800f034:	4604      	mov	r4, r0
 800f036:	68b8      	ldr	r0, [r7, #8]
 800f038:	f7f6 ffb0 	bl	8005f9c <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>
 800f03c:	4603      	mov	r3, r0
 800f03e:	429c      	cmp	r4, r3
 800f040:	d10a      	bne.n	800f058 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x38>
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	4618      	mov	r0, r3
 800f046:	f7f6 fded 	bl	8005c24 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800f04a:	4604      	mov	r4, r0
 800f04c:	68b8      	ldr	r0, [r7, #8]
 800f04e:	f7f6 ffb3 	bl	8005fb8 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>
 800f052:	4603      	mov	r3, r0
 800f054:	429c      	cmp	r4, r3
 800f056:	d005      	beq.n	800f064 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x44>
 800f058:	4b0b      	ldr	r3, [pc, #44]	; (800f088 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x68>)
 800f05a:	4a0c      	ldr	r2, [pc, #48]	; (800f08c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x6c>)
 800f05c:	21b0      	movs	r1, #176	; 0xb0
 800f05e:	480c      	ldr	r0, [pc, #48]	; (800f090 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x70>)
 800f060:	f00e fcfc 	bl	801da5c <__assert_func>
    generic_product_impl<Lhs, Rhs>::subTo(dst, src.lhs(), src.rhs());
 800f064:	68b8      	ldr	r0, [r7, #8]
 800f066:	f000 fbaf 	bl	800f7c8 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3lhsEv>
 800f06a:	4604      	mov	r4, r0
 800f06c:	68b8      	ldr	r0, [r7, #8]
 800f06e:	f000 fbb7 	bl	800f7e0 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3rhsEv>
 800f072:	4603      	mov	r3, r0
 800f074:	461a      	mov	r2, r3
 800f076:	4621      	mov	r1, r4
 800f078:	68f8      	ldr	r0, [r7, #12]
 800f07a:	f000 fbbd 	bl	800f7f8 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEENS_10DenseShapeES5_Li6EE5subToINS2_IfLi1ELi1ELi0ELi1ELi1EEEEEvRT_RKS3_RKS4_>
  }
 800f07e:	bf00      	nop
 800f080:	3714      	adds	r7, #20
 800f082:	46bd      	mov	sp, r7
 800f084:	bd90      	pop	{r4, r7, pc}
 800f086:	bf00      	nop
 800f088:	08022658 	.word	0x08022658
 800f08c:	08027180 	.word	0x08027180
 800f090:	08022b50 	.word	0x08022b50

0800f094 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE11lazyProductINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 800f094:	b590      	push	{r4, r7, lr}
 800f096:	b085      	sub	sp, #20
 800f098:	af00      	add	r7, sp, #0
 800f09a:	60f8      	str	r0, [r7, #12]
 800f09c:	60b9      	str	r1, [r7, #8]
 800f09e:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 800f0a0:	68b8      	ldr	r0, [r7, #8]
 800f0a2:	f7f6 f806 	bl	80050b2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800f0a6:	4604      	mov	r4, r0
 800f0a8:	6878      	ldr	r0, [r7, #4]
 800f0aa:	f7f6 fc9b 	bl	80059e4 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	461a      	mov	r2, r3
 800f0b2:	4621      	mov	r1, r4
 800f0b4:	68f8      	ldr	r0, [r7, #12]
 800f0b6:	f000 fbf3 	bl	800f8a0 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_>
}
 800f0ba:	68f8      	ldr	r0, [r7, #12]
 800f0bc:	3714      	adds	r7, #20
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	bd90      	pop	{r4, r7, pc}

0800f0c2 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800f0c2:	b580      	push	{r7, lr}
 800f0c4:	b086      	sub	sp, #24
 800f0c6:	af00      	add	r7, sp, #0
 800f0c8:	60f8      	str	r0, [r7, #12]
 800f0ca:	60b9      	str	r1, [r7, #8]
 800f0cc:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800f0d2:	687a      	ldr	r2, [r7, #4]
 800f0d4:	68b9      	ldr	r1, [r7, #8]
 800f0d6:	6978      	ldr	r0, [r7, #20]
 800f0d8:	f000 fc10 	bl	800f8fc <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>
}
 800f0dc:	bf00      	nop
 800f0de:	3718      	adds	r7, #24
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	bd80      	pop	{r7, pc}

0800f0e4 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800f0e4:	b480      	push	{r7}
 800f0e6:	b083      	sub	sp, #12
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
    }
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	370c      	adds	r7, #12
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f8:	4770      	bx	lr

0800f0fa <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800f0fa:	b480      	push	{r7}
 800f0fc:	b083      	sub	sp, #12
 800f0fe:	af00      	add	r7, sp, #0
 800f100:	6078      	str	r0, [r7, #4]
 800f102:	6039      	str	r1, [r7, #0]
    {}
 800f104:	bf00      	nop
 800f106:	370c      	adds	r7, #12
 800f108:	46bd      	mov	sp, r7
 800f10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10e:	4770      	bx	lr

0800f110 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800f110:	b480      	push	{r7}
 800f112:	b083      	sub	sp, #12
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	4618      	mov	r0, r3
 800f11c:	370c      	adds	r7, #12
 800f11e:	46bd      	mov	sp, r7
 800f120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f124:	4770      	bx	lr

0800f126 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800f126:	b590      	push	{r4, r7, lr}
 800f128:	b083      	sub	sp, #12
 800f12a:	af00      	add	r7, sp, #0
 800f12c:	6078      	str	r0, [r7, #4]
 800f12e:	6039      	str	r1, [r7, #0]
 800f130:	687c      	ldr	r4, [r7, #4]
 800f132:	6838      	ldr	r0, [r7, #0]
 800f134:	f000 fbf5 	bl	800f922 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE7functorEv>
 800f138:	4603      	mov	r3, r0
 800f13a:	4619      	mov	r1, r3
 800f13c:	4620      	mov	r0, r4
 800f13e:	f7f6 f8a1 	bl	8005284 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	1d1c      	adds	r4, r3, #4
 800f146:	6838      	ldr	r0, [r7, #0]
 800f148:	f000 fbf7 	bl	800f93a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE3lhsEv>
 800f14c:	4603      	mov	r3, r0
 800f14e:	4619      	mov	r1, r3
 800f150:	4620      	mov	r0, r4
 800f152:	f7ff fbde 	bl	800e912 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	f103 040c 	add.w	r4, r3, #12
 800f15c:	6838      	ldr	r0, [r7, #0]
 800f15e:	f000 fbf7 	bl	800f950 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE3rhsEv>
 800f162:	4603      	mov	r3, r0
 800f164:	4619      	mov	r1, r3
 800f166:	4620      	mov	r0, r4
 800f168:	f000 fbfe 	bl	800f968 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERS7_>
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	4618      	mov	r0, r3
 800f170:	370c      	adds	r7, #12
 800f172:	46bd      	mov	sp, r7
 800f174:	bd90      	pop	{r4, r7, pc}

0800f176 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 800f176:	b580      	push	{r7, lr}
 800f178:	b084      	sub	sp, #16
 800f17a:	af00      	add	r7, sp, #0
 800f17c:	60f8      	str	r0, [r7, #12]
 800f17e:	60b9      	str	r1, [r7, #8]
 800f180:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	68ba      	ldr	r2, [r7, #8]
 800f186:	6879      	ldr	r1, [r7, #4]
 800f188:	4618      	mov	r0, r3
 800f18a:	f000 fbfc 	bl	800f986 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE5coeffEii>
 800f18e:	eef0 7a40 	vmov.f32	s15, s0
 800f192:	eeb0 0a67 	vmov.f32	s0, s15
 800f196:	3710      	adds	r7, #16
 800f198:	46bd      	mov	sp, r7
 800f19a:	bd80      	pop	{r7, pc}

0800f19c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi1ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b082      	sub	sp, #8
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
 800f1a4:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800f1a6:	2201      	movs	r2, #1
 800f1a8:	2100      	movs	r1, #0
 800f1aa:	6878      	ldr	r0, [r7, #4]
 800f1ac:	f7ff ffe3 	bl	800f176 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800f1b0:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f1b4:	eeb0 0a67 	vmov.f32	s0, s15
 800f1b8:	3708      	adds	r7, #8
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	bd80      	pop	{r7, pc}

0800f1be <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi2ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800f1be:	b580      	push	{r7, lr}
 800f1c0:	b082      	sub	sp, #8
 800f1c2:	af00      	add	r7, sp, #0
 800f1c4:	6078      	str	r0, [r7, #4]
 800f1c6:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800f1c8:	2202      	movs	r2, #2
 800f1ca:	2100      	movs	r1, #0
 800f1cc:	6878      	ldr	r0, [r7, #4]
 800f1ce:	f7ff ffd2 	bl	800f176 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800f1d2:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f1d6:	eeb0 0a67 	vmov.f32	s0, s15
 800f1da:	3708      	adds	r7, #8
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	bd80      	pop	{r7, pc}

0800f1e0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800f1e0:	b480      	push	{r7}
 800f1e2:	b083      	sub	sp, #12
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	6078      	str	r0, [r7, #4]
 800f1e8:	bf00      	nop
 800f1ea:	370c      	adds	r7, #12
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f2:	4770      	bx	lr

0800f1f4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800f1f4:	b480      	push	{r7}
 800f1f6:	b083      	sub	sp, #12
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	3334      	adds	r3, #52	; 0x34
 800f200:	4618      	mov	r0, r3
 800f202:	370c      	adds	r7, #12
 800f204:	46bd      	mov	sp, r7
 800f206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20a:	4770      	bx	lr

0800f20c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800f20c:	b480      	push	{r7}
 800f20e:	b083      	sub	sp, #12
 800f210:	af00      	add	r7, sp, #0
 800f212:	6078      	str	r0, [r7, #4]
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	3304      	adds	r3, #4
 800f218:	4618      	mov	r0, r3
 800f21a:	370c      	adds	r7, #12
 800f21c:	46bd      	mov	sp, r7
 800f21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f222:	4770      	bx	lr

0800f224 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800f224:	b480      	push	{r7}
 800f226:	b083      	sub	sp, #12
 800f228:	af00      	add	r7, sp, #0
 800f22a:	6078      	str	r0, [r7, #4]
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	331c      	adds	r3, #28
 800f230:	4618      	mov	r0, r3
 800f232:	370c      	adds	r7, #12
 800f234:	46bd      	mov	sp, r7
 800f236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23a:	4770      	bx	lr

0800f23c <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1ERSK_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b082      	sub	sp, #8
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
 800f244:	6039      	str	r1, [r7, #0]
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	6839      	ldr	r1, [r7, #0]
 800f24a:	4618      	mov	r0, r3
 800f24c:	f000 fbcb 	bl	800f9e6 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1ERKSJ_>
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	4618      	mov	r0, r3
 800f254:	3708      	adds	r7, #8
 800f256:	46bd      	mov	sp, r7
 800f258:	bd80      	pop	{r7, pc}

0800f25a <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1ERS9_>:
 800f25a:	b580      	push	{r7, lr}
 800f25c:	b082      	sub	sp, #8
 800f25e:	af00      	add	r7, sp, #0
 800f260:	6078      	str	r0, [r7, #4]
 800f262:	6039      	str	r1, [r7, #0]
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	6839      	ldr	r1, [r7, #0]
 800f268:	4618      	mov	r0, r3
 800f26a:	f000 fbcb 	bl	800fa04 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1ERKS8_>
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	4618      	mov	r0, r3
 800f272:	3708      	adds	r7, #8
 800f274:	46bd      	mov	sp, r7
 800f276:	bd80      	pop	{r7, pc}

0800f278 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 800f278:	b480      	push	{r7}
 800f27a:	b083      	sub	sp, #12
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	6078      	str	r0, [r7, #4]
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	4618      	mov	r0, r3
 800f284:	370c      	adds	r7, #12
 800f286:	46bd      	mov	sp, r7
 800f288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f28c:	4770      	bx	lr

0800f28e <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f28e:	b580      	push	{r7, lr}
 800f290:	b084      	sub	sp, #16
 800f292:	af00      	add	r7, sp, #0
 800f294:	60f8      	str	r0, [r7, #12]
 800f296:	60b9      	str	r1, [r7, #8]
 800f298:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	68ba      	ldr	r2, [r7, #8]
 800f29e:	6879      	ldr	r1, [r7, #4]
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	f000 fbc6 	bl	800fa32 <_ZNK5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfE5coeffEii>
 800f2a6:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f2aa:	eeb0 0a67 	vmov.f32	s0, s15
 800f2ae:	3710      	adds	r7, #16
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	bd80      	pop	{r7, pc}

0800f2b4 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f2b4:	b5b0      	push	{r4, r5, r7, lr}
 800f2b6:	b084      	sub	sp, #16
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	60f8      	str	r0, [r7, #12]
 800f2bc:	60b9      	str	r1, [r7, #8]
 800f2be:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	681c      	ldr	r4, [r3, #0]
 800f2c4:	68f8      	ldr	r0, [r7, #12]
 800f2c6:	f000 fbd4 	bl	800fa72 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE9colStrideEv>
 800f2ca:	4602      	mov	r2, r0
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	fb03 f502 	mul.w	r5, r3, r2
 800f2d2:	68f8      	ldr	r0, [r7, #12]
 800f2d4:	f000 fbd8 	bl	800fa88 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE9rowStrideEv>
 800f2d8:	4602      	mov	r2, r0
 800f2da:	68bb      	ldr	r3, [r7, #8]
 800f2dc:	fb02 f303 	mul.w	r3, r2, r3
 800f2e0:	442b      	add	r3, r5
 800f2e2:	009b      	lsls	r3, r3, #2
 800f2e4:	4423      	add	r3, r4
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	ee07 3a90 	vmov	s15, r3
  }
 800f2ec:	eeb0 0a67 	vmov.f32	s0, s15
 800f2f0:	3710      	adds	r7, #16
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	bdb0      	pop	{r4, r5, r7, pc}

0800f2f6 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERKS9_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800f2f6:	b580      	push	{r7, lr}
 800f2f8:	b082      	sub	sp, #8
 800f2fa:	af00      	add	r7, sp, #0
 800f2fc:	6078      	str	r0, [r7, #4]
 800f2fe:	6039      	str	r1, [r7, #0]
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	6839      	ldr	r1, [r7, #0]
 800f304:	4618      	mov	r0, r3
 800f306:	f000 fbca 	bl	800fa9e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfEC1ERKS9_>
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	4618      	mov	r0, r3
 800f30e:	3708      	adds	r7, #8
 800f310:	46bd      	mov	sp, r7
 800f312:	bd80      	pop	{r7, pc}

0800f314 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 800f314:	b580      	push	{r7, lr}
 800f316:	b082      	sub	sp, #8
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]
 800f31c:	6039      	str	r1, [r7, #0]
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	6839      	ldr	r1, [r7, #0]
 800f322:	4618      	mov	r0, r3
 800f324:	f000 fbd1 	bl	800faca <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li3ELi1ELb1EEE>
  }
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	4618      	mov	r0, r3
 800f32c:	3708      	adds	r7, #8
 800f32e:	46bd      	mov	sp, r7
 800f330:	bd80      	pop	{r7, pc}

0800f332 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 800f332:	b480      	push	{r7}
 800f334:	b083      	sub	sp, #12
 800f336:	af00      	add	r7, sp, #0
 800f338:	6078      	str	r0, [r7, #4]
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	4618      	mov	r0, r3
 800f33e:	370c      	adds	r7, #12
 800f340:	46bd      	mov	sp, r7
 800f342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f346:	4770      	bx	lr

0800f348 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f348:	b580      	push	{r7, lr}
 800f34a:	b084      	sub	sp, #16
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	60f8      	str	r0, [r7, #12]
 800f350:	60b9      	str	r1, [r7, #8]
 800f352:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	68ba      	ldr	r2, [r7, #8]
 800f358:	6879      	ldr	r1, [r7, #4]
 800f35a:	4618      	mov	r0, r3
 800f35c:	f000 fbc9 	bl	800faf2 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE5coeffEii>
 800f360:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f364:	eeb0 0a67 	vmov.f32	s0, s15
 800f368:	3710      	adds	r7, #16
 800f36a:	46bd      	mov	sp, r7
 800f36c:	bd80      	pop	{r7, pc}

0800f36e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f36e:	b5b0      	push	{r4, r5, r7, lr}
 800f370:	b084      	sub	sp, #16
 800f372:	af00      	add	r7, sp, #0
 800f374:	60f8      	str	r0, [r7, #12]
 800f376:	60b9      	str	r1, [r7, #8]
 800f378:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	681c      	ldr	r4, [r3, #0]
 800f37e:	68f8      	ldr	r0, [r7, #12]
 800f380:	f000 fbd8 	bl	800fb34 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E9colStrideEv>
 800f384:	4602      	mov	r2, r0
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	fb03 f502 	mul.w	r5, r3, r2
 800f38c:	68f8      	ldr	r0, [r7, #12]
 800f38e:	f000 fbdc 	bl	800fb4a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E9rowStrideEv>
 800f392:	4602      	mov	r2, r0
 800f394:	68bb      	ldr	r3, [r7, #8]
 800f396:	fb02 f303 	mul.w	r3, r2, r3
 800f39a:	442b      	add	r3, r5
 800f39c:	009b      	lsls	r3, r3, #2
 800f39e:	4423      	add	r3, r4
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	ee07 3a90 	vmov	s15, r3
  }
 800f3a6:	eeb0 0a67 	vmov.f32	s0, s15
 800f3aa:	3710      	adds	r7, #16
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	bdb0      	pop	{r4, r5, r7, pc}

0800f3b0 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800f3b0:	b480      	push	{r7}
 800f3b2:	b083      	sub	sp, #12
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	4618      	mov	r0, r3
 800f3be:	370c      	adds	r7, #12
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c6:	4770      	bx	lr

0800f3c8 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800f3c8:	b480      	push	{r7}
 800f3ca:	b083      	sub	sp, #12
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	685b      	ldr	r3, [r3, #4]
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	370c      	adds	r7, #12
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3de:	4770      	bx	lr

0800f3e0 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS_10DenseShapeES4_Li3EE6evalToIS3_EEvRT_RKS3_SA_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b088      	sub	sp, #32
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	60f8      	str	r0, [r7, #12]
 800f3e8:	60b9      	str	r1, [r7, #8]
 800f3ea:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 800f3ec:	f107 0314 	add.w	r3, r7, #20
 800f3f0:	687a      	ldr	r2, [r7, #4]
 800f3f2:	68b9      	ldr	r1, [r7, #8]
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	f000 fbb3 	bl	800fb60 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductIS2_EEKNS_7ProductIS2_T_Li1EEERKNS0_IS6_EE>
 800f3fa:	f107 031c 	add.w	r3, r7, #28
 800f3fe:	4618      	mov	r0, r3
 800f400:	f7f7 fc45 	bl	8006c8e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800f404:	f107 021c 	add.w	r2, r7, #28
 800f408:	f107 0314 	add.w	r3, r7, #20
 800f40c:	4619      	mov	r1, r3
 800f40e:	68f8      	ldr	r0, [r7, #12]
 800f410:	f000 fbbd 	bl	800fb8e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800f414:	bf00      	nop
 800f416:	3720      	adds	r7, #32
 800f418:	46bd      	mov	sp, r7
 800f41a:	bd80      	pop	{r7, pc}

0800f41c <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ENS_5DenseEEC1ERS5_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b084      	sub	sp, #16
 800f420:	af00      	add	r7, sp, #0
 800f422:	60f8      	str	r0, [r7, #12]
 800f424:	60b9      	str	r1, [r7, #8]
 800f426:	607a      	str	r2, [r7, #4]
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	687a      	ldr	r2, [r7, #4]
 800f42c:	68b9      	ldr	r1, [r7, #8]
 800f42e:	4618      	mov	r0, r3
 800f430:	f000 fbbe 	bl	800fbb0 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EEC1ERS6_i>
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	4618      	mov	r0, r3
 800f438:	3710      	adds	r7, #16
 800f43a:	46bd      	mov	sp, r7
 800f43c:	bd80      	pop	{r7, pc}

0800f43e <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800f43e:	b480      	push	{r7}
 800f440:	b083      	sub	sp, #12
 800f442:	af00      	add	r7, sp, #0
 800f444:	6078      	str	r0, [r7, #4]
    }
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	4618      	mov	r0, r3
 800f44a:	370c      	adds	r7, #12
 800f44c:	46bd      	mov	sp, r7
 800f44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f452:	4770      	bx	lr

0800f454 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800f454:	b580      	push	{r7, lr}
 800f456:	b082      	sub	sp, #8
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	4618      	mov	r0, r3
 800f460:	f7fc f889 	bl	800b576 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800f464:	4603      	mov	r3, r0
    }
 800f466:	4618      	mov	r0, r3
 800f468:	3708      	adds	r7, #8
 800f46a:	46bd      	mov	sp, r7
 800f46c:	bd80      	pop	{r7, pc}

0800f46e <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800f46e:	b580      	push	{r7, lr}
 800f470:	b082      	sub	sp, #8
 800f472:	af00      	add	r7, sp, #0
 800f474:	6078      	str	r0, [r7, #4]
 800f476:	6039      	str	r1, [r7, #0]
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	6839      	ldr	r1, [r7, #0]
 800f47c:	4618      	mov	r0, r3
 800f47e:	f000 fbcd 	bl	800fc1c <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1ERKSI_>
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	4618      	mov	r0, r3
 800f486:	3708      	adds	r7, #8
 800f488:	46bd      	mov	sp, r7
 800f48a:	bd80      	pop	{r7, pc}

0800f48c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800f48c:	b480      	push	{r7}
 800f48e:	b083      	sub	sp, #12
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	4618      	mov	r0, r3
 800f498:	370c      	adds	r7, #12
 800f49a:	46bd      	mov	sp, r7
 800f49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a0:	4770      	bx	lr

0800f4a2 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>:
 800f4a2:	b480      	push	{r7}
 800f4a4:	b083      	sub	sp, #12
 800f4a6:	af00      	add	r7, sp, #0
 800f4a8:	6078      	str	r0, [r7, #4]
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	370c      	adds	r7, #12
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b6:	4770      	bx	lr

0800f4b8 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800f4b8:	b580      	push	{r7, lr}
 800f4ba:	b084      	sub	sp, #16
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	60f8      	str	r0, [r7, #12]
 800f4c0:	60b9      	str	r1, [r7, #8]
 800f4c2:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800f4c4:	68b9      	ldr	r1, [r7, #8]
 800f4c6:	68f8      	ldr	r0, [r7, #12]
 800f4c8:	f000 fbb7 	bl	800fc3a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi3EE3runERKSM_RKS3_>
 800f4cc:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f4d0:	eeb0 0a67 	vmov.f32	s0, s15
 800f4d4:	3710      	adds	r7, #16
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	bd80      	pop	{r7, pc}

0800f4da <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800f4da:	b580      	push	{r7, lr}
 800f4dc:	b082      	sub	sp, #8
 800f4de:	af00      	add	r7, sp, #0
 800f4e0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	2102      	movs	r1, #2
 800f4e6:	6878      	ldr	r0, [r7, #4]
 800f4e8:	f7fd f983 	bl	800c7f2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800f4ec:	6878      	ldr	r0, [r7, #4]
 800f4ee:	f000 fbc8 	bl	800fc82 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSG_>
  }
 800f4f2:	bf00      	nop
 800f4f4:	3708      	adds	r7, #8
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	bd80      	pop	{r7, pc}

0800f4fa <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1ERKS8_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800f4fa:	b580      	push	{r7, lr}
 800f4fc:	b082      	sub	sp, #8
 800f4fe:	af00      	add	r7, sp, #0
 800f500:	6078      	str	r0, [r7, #4]
 800f502:	6039      	str	r1, [r7, #0]
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	6839      	ldr	r1, [r7, #0]
 800f508:	4618      	mov	r0, r3
 800f50a:	f000 fbca 	bl	800fca2 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	4618      	mov	r0, r3
 800f512:	3708      	adds	r7, #8
 800f514:	46bd      	mov	sp, r7
 800f516:	bd80      	pop	{r7, pc}

0800f518 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEED1Ev>:
 800f518:	b480      	push	{r7}
 800f51a:	b083      	sub	sp, #12
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	6078      	str	r0, [r7, #4]
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	4618      	mov	r0, r3
 800f524:	370c      	adds	r7, #12
 800f526:	46bd      	mov	sp, r7
 800f528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52c:	4770      	bx	lr

0800f52e <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
 800f52e:	b480      	push	{r7}
 800f530:	b083      	sub	sp, #12
 800f532:	af00      	add	r7, sp, #0
 800f534:	6078      	str	r0, [r7, #4]
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	4618      	mov	r0, r3
 800f53a:	370c      	adds	r7, #12
 800f53c:	46bd      	mov	sp, r7
 800f53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f542:	4770      	bx	lr

0800f544 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
 800f544:	b480      	push	{r7}
 800f546:	b083      	sub	sp, #12
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	4618      	mov	r0, r3
 800f550:	370c      	adds	r7, #12
 800f552:	46bd      	mov	sp, r7
 800f554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f558:	4770      	bx	lr

0800f55a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800f55a:	b580      	push	{r7, lr}
 800f55c:	b082      	sub	sp, #8
 800f55e:	af00      	add	r7, sp, #0
 800f560:	6078      	str	r0, [r7, #4]
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	4618      	mov	r0, r3
 800f568:	f7f5 fb61 	bl	8004c2e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800f56c:	4603      	mov	r3, r0
 800f56e:	4618      	mov	r0, r3
 800f570:	3708      	adds	r7, #8
 800f572:	46bd      	mov	sp, r7
 800f574:	bd80      	pop	{r7, pc}

0800f576 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800f576:	b580      	push	{r7, lr}
 800f578:	b082      	sub	sp, #8
 800f57a:	af00      	add	r7, sp, #0
 800f57c:	6078      	str	r0, [r7, #4]
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	3304      	adds	r3, #4
 800f582:	4618      	mov	r0, r3
 800f584:	f7f7 fa3b 	bl	80069fe <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 800f588:	4603      	mov	r3, r0
 800f58a:	4618      	mov	r0, r3
 800f58c:	3708      	adds	r7, #8
 800f58e:	46bd      	mov	sp, r7
 800f590:	bd80      	pop	{r7, pc}
	...

0800f594 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 800f594:	b580      	push	{r7, lr}
 800f596:	b086      	sub	sp, #24
 800f598:	af00      	add	r7, sp, #0
 800f59a:	60f8      	str	r0, [r7, #12]
 800f59c:	60b9      	str	r1, [r7, #8]
 800f59e:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 800f5a0:	68b8      	ldr	r0, [r7, #8]
 800f5a2:	f7ff ffda 	bl	800f55a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE4rowsEv>
 800f5a6:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 800f5a8:	68b8      	ldr	r0, [r7, #8]
 800f5aa:	f7ff ffe4 	bl	800f576 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE4colsEv>
 800f5ae:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	f7f5 fbe1 	bl	8004d7a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800f5b8:	4602      	mov	r2, r0
 800f5ba:	697b      	ldr	r3, [r7, #20]
 800f5bc:	4293      	cmp	r3, r2
 800f5be:	d107      	bne.n	800f5d0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	f7f5 fbce 	bl	8004d64 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800f5c8:	4602      	mov	r2, r0
 800f5ca:	693b      	ldr	r3, [r7, #16]
 800f5cc:	4293      	cmp	r3, r2
 800f5ce:	d001      	beq.n	800f5d4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 800f5d0:	2301      	movs	r3, #1
 800f5d2:	e000      	b.n	800f5d6 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d005      	beq.n	800f5e6 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	693a      	ldr	r2, [r7, #16]
 800f5de:	6979      	ldr	r1, [r7, #20]
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	f7f8 fad5 	bl	8007b90 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	f7f5 fbc6 	bl	8004d7a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800f5ee:	4602      	mov	r2, r0
 800f5f0:	697b      	ldr	r3, [r7, #20]
 800f5f2:	4293      	cmp	r3, r2
 800f5f4:	d107      	bne.n	800f606 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	f7f5 fbb3 	bl	8004d64 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800f5fe:	4602      	mov	r2, r0
 800f600:	693b      	ldr	r3, [r7, #16]
 800f602:	4293      	cmp	r3, r2
 800f604:	d006      	beq.n	800f614 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 800f606:	4b05      	ldr	r3, [pc, #20]	; (800f61c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 800f608:	4a05      	ldr	r2, [pc, #20]	; (800f620 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 800f60a:	f240 21fd 	movw	r1, #765	; 0x2fd
 800f60e:	4805      	ldr	r0, [pc, #20]	; (800f624 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 800f610:	f00e fa24 	bl	801da5c <__assert_func>
}
 800f614:	bf00      	nop
 800f616:	3718      	adds	r7, #24
 800f618:	46bd      	mov	sp, r7
 800f61a:	bd80      	pop	{r7, pc}
 800f61c:	08021f3c 	.word	0x08021f3c
 800f620:	080274fc 	.word	0x080274fc
 800f624:	08022050 	.word	0x08022050

0800f628 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSC_RKSE_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 800f628:	b480      	push	{r7}
 800f62a:	b085      	sub	sp, #20
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	60f8      	str	r0, [r7, #12]
 800f630:	60b9      	str	r1, [r7, #8]
 800f632:	607a      	str	r2, [r7, #4]
 800f634:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	68ba      	ldr	r2, [r7, #8]
 800f63a:	601a      	str	r2, [r3, #0]
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	687a      	ldr	r2, [r7, #4]
 800f640:	605a      	str	r2, [r3, #4]
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	683a      	ldr	r2, [r7, #0]
 800f646:	609a      	str	r2, [r3, #8]
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	69ba      	ldr	r2, [r7, #24]
 800f64c:	60da      	str	r2, [r3, #12]
  }
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	4618      	mov	r0, r3
 800f652:	3714      	adds	r7, #20
 800f654:	46bd      	mov	sp, r7
 800f656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65a:	4770      	bx	lr

0800f65c <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800f65c:	b580      	push	{r7, lr}
 800f65e:	b082      	sub	sp, #8
 800f660:	af00      	add	r7, sp, #0
 800f662:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 800f664:	6878      	ldr	r0, [r7, #4]
 800f666:	f000 fb53 	bl	800fd10 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSG_>
  }
 800f66a:	bf00      	nop
 800f66c:	3708      	adds	r7, #8
 800f66e:	46bd      	mov	sp, r7
 800f670:	bd80      	pop	{r7, pc}

0800f672 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSG_RKSI_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800f672:	b580      	push	{r7, lr}
 800f674:	b084      	sub	sp, #16
 800f676:	af00      	add	r7, sp, #0
 800f678:	60f8      	str	r0, [r7, #12]
 800f67a:	60b9      	str	r1, [r7, #8]
 800f67c:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800f67e:	68b9      	ldr	r1, [r7, #8]
 800f680:	68f8      	ldr	r0, [r7, #12]
 800f682:	f000 fb54 	bl	800fd2e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800f686:	687a      	ldr	r2, [r7, #4]
 800f688:	68b9      	ldr	r1, [r7, #8]
 800f68a:	68f8      	ldr	r0, [r7, #12]
 800f68c:	f000 fbbe 	bl	800fe0c <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800f690:	bf00      	nop
 800f692:	3710      	adds	r7, #16
 800f694:	46bd      	mov	sp, r7
 800f696:	bd80      	pop	{r7, pc}

0800f698 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERKS9_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800f698:	b580      	push	{r7, lr}
 800f69a:	b082      	sub	sp, #8
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
 800f6a0:	6039      	str	r1, [r7, #0]
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	6839      	ldr	r1, [r7, #0]
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	f000 fbe8 	bl	800fe7c <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfEC1ERKS9_>
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	3708      	adds	r7, #8
 800f6b2:	46bd      	mov	sp, r7
 800f6b4:	bd80      	pop	{r7, pc}

0800f6b6 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 800f6b6:	b580      	push	{r7, lr}
 800f6b8:	b082      	sub	sp, #8
 800f6ba:	af00      	add	r7, sp, #0
 800f6bc:	6078      	str	r0, [r7, #4]
 800f6be:	6039      	str	r1, [r7, #0]
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	6839      	ldr	r1, [r7, #0]
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	f000 fbef 	bl	800fea8 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb1EEE>
  }
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	3708      	adds	r7, #8
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	bd80      	pop	{r7, pc}

0800f6d4 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f6d4:	b5b0      	push	{r4, r5, r7, lr}
 800f6d6:	b084      	sub	sp, #16
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	60f8      	str	r0, [r7, #12]
 800f6dc:	60b9      	str	r1, [r7, #8]
 800f6de:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	681c      	ldr	r4, [r3, #0]
 800f6e4:	68f8      	ldr	r0, [r7, #12]
 800f6e6:	f000 fbf3 	bl	800fed0 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE9colStrideEv>
 800f6ea:	4602      	mov	r2, r0
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	fb03 f502 	mul.w	r5, r3, r2
 800f6f2:	68f8      	ldr	r0, [r7, #12]
 800f6f4:	f000 fbf7 	bl	800fee6 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE9rowStrideEv>
 800f6f8:	4602      	mov	r2, r0
 800f6fa:	68bb      	ldr	r3, [r7, #8]
 800f6fc:	fb02 f303 	mul.w	r3, r2, r3
 800f700:	442b      	add	r3, r5
 800f702:	009b      	lsls	r3, r3, #2
 800f704:	4423      	add	r3, r4
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	ee07 3a90 	vmov	s15, r3
  }
 800f70c:	eeb0 0a67 	vmov.f32	s0, s15
 800f710:	3710      	adds	r7, #16
 800f712:	46bd      	mov	sp, r7
 800f714:	bdb0      	pop	{r4, r5, r7, pc}

0800f716 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 800f716:	b580      	push	{r7, lr}
 800f718:	b082      	sub	sp, #8
 800f71a:	af00      	add	r7, sp, #0
 800f71c:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 800f71e:	f7f7 f858 	bl	80067d2 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800f722:	4603      	mov	r3, r0
  }
 800f724:	4618      	mov	r0, r3
 800f726:	3708      	adds	r7, #8
 800f728:	46bd      	mov	sp, r7
 800f72a:	bd80      	pop	{r7, pc}

0800f72c <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b082      	sub	sp, #8
 800f730:	af00      	add	r7, sp, #0
 800f732:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 800f734:	f7f7 f84d 	bl	80067d2 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800f738:	4603      	mov	r3, r0
  }
 800f73a:	4618      	mov	r0, r3
 800f73c:	3708      	adds	r7, #8
 800f73e:	46bd      	mov	sp, r7
 800f740:	bd80      	pop	{r7, pc}

0800f742 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_EEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800f742:	b480      	push	{r7}
 800f744:	b083      	sub	sp, #12
 800f746:	af00      	add	r7, sp, #0
 800f748:	6078      	str	r0, [r7, #4]
 800f74a:	6039      	str	r1, [r7, #0]
}
 800f74c:	bf00      	nop
 800f74e:	370c      	adds	r7, #12
 800f750:	46bd      	mov	sp, r7
 800f752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f756:	4770      	bx	lr

0800f758 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800f758:	b580      	push	{r7, lr}
 800f75a:	b08c      	sub	sp, #48	; 0x30
 800f75c:	af02      	add	r7, sp, #8
 800f75e:	60f8      	str	r0, [r7, #12]
 800f760:	60b9      	str	r1, [r7, #8]
 800f762:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800f764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f768:	68b9      	ldr	r1, [r7, #8]
 800f76a:	4618      	mov	r0, r3
 800f76c:	f7fa fd4f 	bl	800a20e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
  resize_if_allowed(dst, src, func);
 800f770:	687a      	ldr	r2, [r7, #4]
 800f772:	68b9      	ldr	r1, [r7, #8]
 800f774:	68f8      	ldr	r0, [r7, #12]
 800f776:	f000 fbc1 	bl	800fefc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800f77a:	f107 0320 	add.w	r3, r7, #32
 800f77e:	68f9      	ldr	r1, [r7, #12]
 800f780:	4618      	mov	r0, r3
 800f782:	f7fa fd44 	bl	800a20e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800f786:	68f8      	ldr	r0, [r7, #12]
 800f788:	f000 fc04 	bl	800ff94 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE18const_cast_derivedEv>
 800f78c:	4603      	mov	r3, r0
 800f78e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f792:	f107 0120 	add.w	r1, r7, #32
 800f796:	f107 0010 	add.w	r0, r7, #16
 800f79a:	9300      	str	r3, [sp, #0]
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	f000 fc04 	bl	800ffaa <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800f7a2:	f107 0310 	add.w	r3, r7, #16
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	f000 fc19 	bl	800ffde <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>
  DstEvaluatorType dstEvaluator(dst);
 800f7ac:	f107 0320 	add.w	r3, r7, #32
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	f7f9 fc13 	bl	8008fdc <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800f7b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	f7f9 fc0e 	bl	8008fdc <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
}
 800f7c0:	bf00      	nop
 800f7c2:	3728      	adds	r7, #40	; 0x28
 800f7c4:	46bd      	mov	sp, r7
 800f7c6:	bd80      	pop	{r7, pc}

0800f7c8 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800f7c8:	b480      	push	{r7}
 800f7ca:	b083      	sub	sp, #12
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	370c      	adds	r7, #12
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7de:	4770      	bx	lr

0800f7e0 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800f7e0:	b480      	push	{r7}
 800f7e2:	b083      	sub	sp, #12
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	6078      	str	r0, [r7, #4]
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	685b      	ldr	r3, [r3, #4]
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	370c      	adds	r7, #12
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f6:	4770      	bx	lr

0800f7f8 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEENS_10DenseShapeES5_Li6EE5subToINS2_IfLi1ELi1ELi0ELi1ELi1EEEEEvRT_RKS3_RKS4_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void subTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	ed2d 8b02 	vpush	{d8}
 800f7fe:	b088      	sub	sp, #32
 800f800:	af00      	add	r7, sp, #0
 800f802:	60f8      	str	r0, [r7, #12]
 800f804:	60b9      	str	r1, [r7, #8]
 800f806:	607a      	str	r2, [r7, #4]
  { dst.coeffRef(0,0) -= (lhs.transpose().cwiseProduct(rhs)).sum(); }
 800f808:	68b8      	ldr	r0, [r7, #8]
 800f80a:	f000 fbf3 	bl	800fff4 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>
 800f80e:	4603      	mov	r3, r0
 800f810:	61fb      	str	r3, [r7, #28]
 800f812:	f107 0310 	add.w	r3, r7, #16
 800f816:	f107 011c 	add.w	r1, r7, #28
 800f81a:	687a      	ldr	r2, [r7, #4]
 800f81c:	4618      	mov	r0, r3
 800f81e:	f000 fbfc 	bl	801001a <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE12cwiseProductINS2_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSA_6traitsIT_E6ScalarEEEKS5_KSD_EERKNS0_ISD_EE>
 800f822:	f107 0310 	add.w	r3, r7, #16
 800f826:	4618      	mov	r0, r3
 800f828:	f000 fc25 	bl	8010076 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE3sumEv>
 800f82c:	eeb0 8a40 	vmov.f32	s16, s0
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	2200      	movs	r2, #0
 800f834:	2100      	movs	r1, #0
 800f836:	4618      	mov	r0, r3
 800f838:	f7f6 ff11 	bl	800665e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>
 800f83c:	4603      	mov	r3, r0
 800f83e:	edd3 7a00 	vldr	s15, [r3]
 800f842:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800f846:	edc3 7a00 	vstr	s15, [r3]
 800f84a:	bf00      	nop
 800f84c:	3720      	adds	r7, #32
 800f84e:	46bd      	mov	sp, r7
 800f850:	ecbd 8b02 	vpop	{d8}
 800f854:	bd80      	pop	{r7, pc}

0800f856 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>:
 800f856:	b580      	push	{r7, lr}
 800f858:	b082      	sub	sp, #8
 800f85a:	af00      	add	r7, sp, #0
 800f85c:	6078      	str	r0, [r7, #4]
 800f85e:	6878      	ldr	r0, [r7, #4]
 800f860:	f000 fc24 	bl	80100ac <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	4618      	mov	r0, r3
 800f868:	3708      	adds	r7, #8
 800f86a:	46bd      	mov	sp, r7
 800f86c:	bd80      	pop	{r7, pc}

0800f86e <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi4EEC1Ev>:
class dense_product_base
 800f86e:	b580      	push	{r7, lr}
 800f870:	b082      	sub	sp, #8
 800f872:	af00      	add	r7, sp, #0
 800f874:	6078      	str	r0, [r7, #4]
 800f876:	6878      	ldr	r0, [r7, #4]
 800f878:	f7ff ffed 	bl	800f856 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	4618      	mov	r0, r3
 800f880:	3708      	adds	r7, #8
 800f882:	46bd      	mov	sp, r7
 800f884:	bd80      	pop	{r7, pc}

0800f886 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800f886:	b580      	push	{r7, lr}
 800f888:	b082      	sub	sp, #8
 800f88a:	af00      	add	r7, sp, #0
 800f88c:	6078      	str	r0, [r7, #4]
 800f88e:	6878      	ldr	r0, [r7, #4]
 800f890:	f7ff ffed 	bl	800f86e <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi4EEC1Ev>
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	4618      	mov	r0, r3
 800f898:	3708      	adds	r7, #8
 800f89a:	46bd      	mov	sp, r7
 800f89c:	bd80      	pop	{r7, pc}
	...

0800f8a0 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 800f8a0:	b590      	push	{r4, r7, lr}
 800f8a2:	b085      	sub	sp, #20
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	60f8      	str	r0, [r7, #12]
 800f8a8:	60b9      	str	r1, [r7, #8]
 800f8aa:	607a      	str	r2, [r7, #4]
 800f8ac:	68f8      	ldr	r0, [r7, #12]
 800f8ae:	f7ff ffea 	bl	800f886 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1ENS_5DenseEEC1Ev>
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	68ba      	ldr	r2, [r7, #8]
 800f8b6:	601a      	str	r2, [r3, #0]
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	687a      	ldr	r2, [r7, #4]
 800f8bc:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 800f8be:	68bb      	ldr	r3, [r7, #8]
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	f7f5 fa4f 	bl	8004d64 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800f8c6:	4604      	mov	r4, r0
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	f7f5 fb71 	bl	8004fb2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 800f8d0:	4603      	mov	r3, r0
 800f8d2:	429c      	cmp	r4, r3
 800f8d4:	d005      	beq.n	800f8e2 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_+0x42>
 800f8d6:	4b06      	ldr	r3, [pc, #24]	; (800f8f0 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_+0x50>)
 800f8d8:	4a06      	ldr	r2, [pc, #24]	; (800f8f4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_+0x54>)
 800f8da:	2160      	movs	r1, #96	; 0x60
 800f8dc:	4806      	ldr	r0, [pc, #24]	; (800f8f8 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_+0x58>)
 800f8de:	f00e f8bd 	bl	801da5c <__assert_func>
 800f8e2:	bf00      	nop
    }
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	3714      	adds	r7, #20
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	bd90      	pop	{r4, r7, pc}
 800f8ee:	bf00      	nop
 800f8f0:	0801fb84 	.word	0x0801fb84
 800f8f4:	08027624 	.word	0x08027624
 800f8f8:	0801fed4 	.word	0x0801fed4

0800f8fc <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b084      	sub	sp, #16
 800f900:	af00      	add	r7, sp, #0
 800f902:	60f8      	str	r0, [r7, #12]
 800f904:	60b9      	str	r1, [r7, #8]
 800f906:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800f908:	68b9      	ldr	r1, [r7, #8]
 800f90a:	68f8      	ldr	r0, [r7, #12]
 800f90c:	f000 fbd9 	bl	80100c2 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800f910:	687a      	ldr	r2, [r7, #4]
 800f912:	68b9      	ldr	r1, [r7, #8]
 800f914:	68f8      	ldr	r0, [r7, #12]
 800f916:	f000 fc17 	bl	8010148 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800f91a:	bf00      	nop
 800f91c:	3710      	adds	r7, #16
 800f91e:	46bd      	mov	sp, r7
 800f920:	bd80      	pop	{r7, pc}

0800f922 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800f922:	b480      	push	{r7}
 800f924:	b083      	sub	sp, #12
 800f926:	af00      	add	r7, sp, #0
 800f928:	6078      	str	r0, [r7, #4]
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	3330      	adds	r3, #48	; 0x30
 800f92e:	4618      	mov	r0, r3
 800f930:	370c      	adds	r7, #12
 800f932:	46bd      	mov	sp, r7
 800f934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f938:	4770      	bx	lr

0800f93a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800f93a:	b480      	push	{r7}
 800f93c:	b083      	sub	sp, #12
 800f93e:	af00      	add	r7, sp, #0
 800f940:	6078      	str	r0, [r7, #4]
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	4618      	mov	r0, r3
 800f946:	370c      	adds	r7, #12
 800f948:	46bd      	mov	sp, r7
 800f94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94e:	4770      	bx	lr

0800f950 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800f950:	b480      	push	{r7}
 800f952:	b083      	sub	sp, #12
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	3318      	adds	r3, #24
 800f95c:	4618      	mov	r0, r3
 800f95e:	370c      	adds	r7, #12
 800f960:	46bd      	mov	sp, r7
 800f962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f966:	4770      	bx	lr

0800f968 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800f968:	b580      	push	{r7, lr}
 800f96a:	b082      	sub	sp, #8
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
 800f970:	6039      	str	r1, [r7, #0]
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	6839      	ldr	r1, [r7, #0]
 800f976:	4618      	mov	r0, r3
 800f978:	f000 fc1e 	bl	80101b8 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERKS6_>
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	4618      	mov	r0, r3
 800f980:	3708      	adds	r7, #8
 800f982:	46bd      	mov	sp, r7
 800f984:	bd80      	pop	{r7, pc}

0800f986 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f986:	b590      	push	{r4, r7, lr}
 800f988:	b087      	sub	sp, #28
 800f98a:	af00      	add	r7, sp, #0
 800f98c:	60f8      	str	r0, [r7, #12]
 800f98e:	60b9      	str	r1, [r7, #8]
 800f990:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	4618      	mov	r0, r3
 800f996:	f000 fc1e 	bl	80101d6 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4Data4funcEv>
 800f99a:	4604      	mov	r4, r0
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	3304      	adds	r3, #4
 800f9a0:	687a      	ldr	r2, [r7, #4]
 800f9a2:	68b9      	ldr	r1, [r7, #8]
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	f7ff fccf 	bl	800f348 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 800f9aa:	eef0 7a40 	vmov.f32	s15, s0
 800f9ae:	edc7 7a04 	vstr	s15, [r7, #16]
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	330c      	adds	r3, #12
 800f9b6:	687a      	ldr	r2, [r7, #4]
 800f9b8:	68b9      	ldr	r1, [r7, #8]
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	f000 fc16 	bl	80101ec <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>
 800f9c0:	eef0 7a40 	vmov.f32	s15, s0
 800f9c4:	edc7 7a05 	vstr	s15, [r7, #20]
 800f9c8:	f107 0214 	add.w	r2, r7, #20
 800f9cc:	f107 0310 	add.w	r3, r7, #16
 800f9d0:	4619      	mov	r1, r3
 800f9d2:	4620      	mov	r0, r4
 800f9d4:	f7ff fafc 	bl	800efd0 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 800f9d8:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f9dc:	eeb0 0a67 	vmov.f32	s0, s15
 800f9e0:	371c      	adds	r7, #28
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	bd90      	pop	{r4, r7, pc}

0800f9e6 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1ERKSJ_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800f9e6:	b580      	push	{r7, lr}
 800f9e8:	b082      	sub	sp, #8
 800f9ea:	af00      	add	r7, sp, #0
 800f9ec:	6078      	str	r0, [r7, #4]
 800f9ee:	6039      	str	r1, [r7, #0]
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	6839      	ldr	r1, [r7, #0]
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	f000 fc1a 	bl	801022e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfEC1ERKSJ_>
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	3708      	adds	r7, #8
 800fa00:	46bd      	mov	sp, r7
 800fa02:	bd80      	pop	{r7, pc}

0800fa04 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1ERKS8_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b082      	sub	sp, #8
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
 800fa0c:	6039      	str	r1, [r7, #0]
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	6839      	ldr	r1, [r7, #0]
 800fa12:	4618      	mov	r0, r3
 800fa14:	f000 fc21 	bl	801025a <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS6_Li1ELi1ELb0EEE>
  }
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	3708      	adds	r7, #8
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	bd80      	pop	{r7, pc}

0800fa22 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EE5valueEv>:
    T value() { return T(Value); }
 800fa22:	b480      	push	{r7}
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	2300      	movs	r3, #0
 800fa28:	4618      	mov	r0, r3
 800fa2a:	46bd      	mov	sp, r7
 800fa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa30:	4770      	bx	lr

0800fa32 <_ZNK5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800fa32:	b5b0      	push	{r4, r5, r7, lr}
 800fa34:	b084      	sub	sp, #16
 800fa36:	af00      	add	r7, sp, #0
 800fa38:	60f8      	str	r0, [r7, #12]
 800fa3a:	60b9      	str	r1, [r7, #8]
 800fa3c:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(m_startRow.value() + row, m_startCol.value() + col);
 800fa3e:	68fc      	ldr	r4, [r7, #12]
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	3310      	adds	r3, #16
 800fa44:	4618      	mov	r0, r3
 800fa46:	f000 fc1c 	bl	8010282 <_ZNK5Eigen8internal19variable_if_dynamicIiLin1EE5valueEv>
 800fa4a:	4602      	mov	r2, r0
 800fa4c:	68bb      	ldr	r3, [r7, #8]
 800fa4e:	18d5      	adds	r5, r2, r3
 800fa50:	f7ff ffe7 	bl	800fa22 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EE5valueEv>
 800fa54:	4602      	mov	r2, r0
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	4413      	add	r3, r2
 800fa5a:	461a      	mov	r2, r3
 800fa5c:	4629      	mov	r1, r5
 800fa5e:	4620      	mov	r0, r4
 800fa60:	f000 fc1b 	bl	801029a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE5coeffEii>
 800fa64:	eef0 7a40 	vmov.f32	s15, s0
  }
 800fa68:	eeb0 0a67 	vmov.f32	s0, s15
 800fa6c:	3710      	adds	r7, #16
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	bdb0      	pop	{r4, r5, r7, pc}

0800fa72 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 800fa72:	b580      	push	{r7, lr}
 800fa74:	b082      	sub	sp, #8
 800fa76:	af00      	add	r7, sp, #0
 800fa78:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 800fa7a:	f7f6 feaa 	bl	80067d2 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800fa7e:	4603      	mov	r3, r0
  }
 800fa80:	4618      	mov	r0, r3
 800fa82:	3708      	adds	r7, #8
 800fa84:	46bd      	mov	sp, r7
 800fa86:	bd80      	pop	{r7, pc}

0800fa88 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b082      	sub	sp, #8
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 800fa90:	f7f6 fe97 	bl	80067c2 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800fa94:	4603      	mov	r3, r0
  }
 800fa96:	4618      	mov	r0, r3
 800fa98:	3708      	adds	r7, #8
 800fa9a:	46bd      	mov	sp, r7
 800fa9c:	bd80      	pop	{r7, pc}

0800fa9e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfEC1ERKS9_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 800fa9e:	b590      	push	{r4, r7, lr}
 800faa0:	b083      	sub	sp, #12
 800faa2:	af00      	add	r7, sp, #0
 800faa4:	6078      	str	r0, [r7, #4]
 800faa6:	6039      	str	r1, [r7, #0]
 800faa8:	6878      	ldr	r0, [r7, #4]
 800faaa:	f000 fc2d 	bl	8010308 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>
 800faae:	687c      	ldr	r4, [r7, #4]
 800fab0:	6838      	ldr	r0, [r7, #0]
 800fab2:	f000 fc1e 	bl	80102f2 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE16nestedExpressionEv>
 800fab6:	4603      	mov	r3, r0
 800fab8:	4619      	mov	r1, r3
 800faba:	4620      	mov	r0, r4
 800fabc:	f000 fc2f 	bl	801031e <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS7_>
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	4618      	mov	r0, r3
 800fac4:	370c      	adds	r7, #12
 800fac6:	46bd      	mov	sp, r7
 800fac8:	bd90      	pop	{r4, r7, pc}

0800faca <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li3ELi1ELb1EEE>:
{
  typedef Block<ArgType, BlockRows, BlockCols, InnerPanel> XprType;
  typedef typename XprType::Scalar Scalar;

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  explicit block_evaluator(const XprType& block)
 800faca:	b580      	push	{r7, lr}
 800facc:	b082      	sub	sp, #8
 800face:	af00      	add	r7, sp, #0
 800fad0:	6078      	str	r0, [r7, #4]
 800fad2:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	6839      	ldr	r1, [r7, #0]
 800fad8:	4618      	mov	r0, r3
 800fada:	f000 fc2f 	bl	801033c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_EC1ERKS6_>
  {
    // TODO: for the 3.3 release, this should be turned to an internal assertion, but let's keep it as is for the beta lifetime
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 800fade:	683b      	ldr	r3, [r7, #0]
 800fae0:	4618      	mov	r0, r3
 800fae2:	f000 fc55 	bl	8010390 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4dataEv>
 800fae6:	bf00      	nop
  }
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	4618      	mov	r0, r3
 800faec:	3708      	adds	r7, #8
 800faee:	46bd      	mov	sp, r7
 800faf0:	bd80      	pop	{r7, pc}

0800faf2 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800faf2:	b5b0      	push	{r4, r5, r7, lr}
 800faf4:	b084      	sub	sp, #16
 800faf6:	af00      	add	r7, sp, #0
 800faf8:	60f8      	str	r0, [r7, #12]
 800fafa:	60b9      	str	r1, [r7, #8]
 800fafc:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	681c      	ldr	r4, [r3, #0]
 800fb02:	68f8      	ldr	r0, [r7, #12]
 800fb04:	f000 fc50 	bl	80103a8 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE9colStrideEv>
 800fb08:	4602      	mov	r2, r0
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	fb03 f502 	mul.w	r5, r3, r2
 800fb10:	68f8      	ldr	r0, [r7, #12]
 800fb12:	f000 fc54 	bl	80103be <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE9rowStrideEv>
 800fb16:	4602      	mov	r2, r0
 800fb18:	68bb      	ldr	r3, [r7, #8]
 800fb1a:	fb02 f303 	mul.w	r3, r2, r3
 800fb1e:	442b      	add	r3, r5
 800fb20:	009b      	lsls	r3, r3, #2
 800fb22:	4423      	add	r3, r4
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	ee07 3a90 	vmov	s15, r3
  }
 800fb2a:	eeb0 0a67 	vmov.f32	s0, s15
 800fb2e:	3710      	adds	r7, #16
 800fb30:	46bd      	mov	sp, r7
 800fb32:	bdb0      	pop	{r4, r5, r7, pc}

0800fb34 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 800fb34:	b580      	push	{r7, lr}
 800fb36:	b082      	sub	sp, #8
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 800fb3c:	f7f6 fe41 	bl	80067c2 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800fb40:	4603      	mov	r3, r0
  }
 800fb42:	4618      	mov	r0, r3
 800fb44:	3708      	adds	r7, #8
 800fb46:	46bd      	mov	sp, r7
 800fb48:	bd80      	pop	{r7, pc}

0800fb4a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 800fb4a:	b580      	push	{r7, lr}
 800fb4c:	b082      	sub	sp, #8
 800fb4e:	af00      	add	r7, sp, #0
 800fb50:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 800fb52:	f7f6 fe3e 	bl	80067d2 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800fb56:	4603      	mov	r3, r0
  }
 800fb58:	4618      	mov	r0, r3
 800fb5a:	3708      	adds	r7, #8
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	bd80      	pop	{r7, pc}

0800fb60 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductIS2_EEKNS_7ProductIS2_T_Li1EEERKNS0_IS6_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 800fb60:	b590      	push	{r4, r7, lr}
 800fb62:	b085      	sub	sp, #20
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	60f8      	str	r0, [r7, #12]
 800fb68:	60b9      	str	r1, [r7, #8]
 800fb6a:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 800fb6c:	68b8      	ldr	r0, [r7, #8]
 800fb6e:	f7f5 fc68 	bl	8005442 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800fb72:	4604      	mov	r4, r0
 800fb74:	6878      	ldr	r0, [r7, #4]
 800fb76:	f7f5 fc64 	bl	8005442 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800fb7a:	4603      	mov	r3, r0
 800fb7c:	461a      	mov	r2, r3
 800fb7e:	4621      	mov	r1, r4
 800fb80:	68f8      	ldr	r0, [r7, #12]
 800fb82:	f000 fc4b 	bl	801041c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_>
}
 800fb86:	68f8      	ldr	r0, [r7, #12]
 800fb88:	3714      	adds	r7, #20
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	bd90      	pop	{r4, r7, pc}

0800fb8e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800fb8e:	b580      	push	{r7, lr}
 800fb90:	b086      	sub	sp, #24
 800fb92:	af00      	add	r7, sp, #0
 800fb94:	60f8      	str	r0, [r7, #12]
 800fb96:	60b9      	str	r1, [r7, #8]
 800fb98:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800fb9e:	687a      	ldr	r2, [r7, #4]
 800fba0:	68b9      	ldr	r1, [r7, #8]
 800fba2:	6978      	ldr	r0, [r7, #20]
 800fba4:	f000 fc68 	bl	8010478 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_>
}
 800fba8:	bf00      	nop
 800fbaa:	3718      	adds	r7, #24
 800fbac:	46bd      	mov	sp, r7
 800fbae:	bd80      	pop	{r7, pc}

0800fbb0 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EEC1ERS6_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800fbb0:	b5b0      	push	{r4, r5, r7, lr}
 800fbb2:	b084      	sub	sp, #16
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	60f8      	str	r0, [r7, #12]
 800fbb8:	60b9      	str	r1, [r7, #8]
 800fbba:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800fbbc:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800fbbe:	68b8      	ldr	r0, [r7, #8]
 800fbc0:	f000 fc6d 	bl	801049e <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE4dataEv>
 800fbc4:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800fbc6:	68b8      	ldr	r0, [r7, #8]
 800fbc8:	f000 fc7d 	bl	80104c6 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11innerStrideEv>
 800fbcc:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	fb02 f303 	mul.w	r3, r2, r3
 800fbd4:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800fbd6:	441d      	add	r5, r3
 800fbd8:	68b8      	ldr	r0, [r7, #8]
 800fbda:	f7f5 fd76 	bl	80056ca <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800fbde:	4602      	mov	r2, r0
 800fbe0:	2301      	movs	r3, #1
 800fbe2:	4629      	mov	r1, r5
 800fbe4:	4620      	mov	r0, r4
 800fbe6:	f000 fca3 	bl	8010530 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii>
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	3308      	adds	r3, #8
 800fbee:	68ba      	ldr	r2, [r7, #8]
 800fbf0:	6812      	ldr	r2, [r2, #0]
 800fbf2:	601a      	str	r2, [r3, #0]
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	330c      	adds	r3, #12
 800fbf8:	2100      	movs	r1, #0
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	f7fd fe30 	bl	800d860 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	3310      	adds	r3, #16
 800fc04:	6879      	ldr	r1, [r7, #4]
 800fc06:	4618      	mov	r0, r3
 800fc08:	f7fd fe2a 	bl	800d860 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 800fc0c:	68f8      	ldr	r0, [r7, #12]
 800fc0e:	f000 fccd 	bl	80105ac <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE4initEv>
    }
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	4618      	mov	r0, r3
 800fc16:	3710      	adds	r7, #16
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	bdb0      	pop	{r4, r5, r7, pc}

0800fc1c <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b082      	sub	sp, #8
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
 800fc24:	6039      	str	r1, [r7, #0]
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	6839      	ldr	r1, [r7, #0]
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	f000 fcce 	bl	80105cc <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	4618      	mov	r0, r3
 800fc34:	3708      	adds	r7, #8
 800fc36:	46bd      	mov	sp, r7
 800fc38:	bd80      	pop	{r7, pc}

0800fc3a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi3EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800fc3a:	b580      	push	{r7, lr}
 800fc3c:	b084      	sub	sp, #16
 800fc3e:	af00      	add	r7, sp, #0
 800fc40:	6078      	str	r0, [r7, #4]
 800fc42:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800fc44:	6839      	ldr	r1, [r7, #0]
 800fc46:	6878      	ldr	r0, [r7, #4]
 800fc48:	f000 fcd2 	bl	80105f0 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 800fc4c:	eef0 7a40 	vmov.f32	s15, s0
 800fc50:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800fc54:	6839      	ldr	r1, [r7, #0]
 800fc56:	6878      	ldr	r0, [r7, #4]
 800fc58:	f000 fcdb 	bl	8010612 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi1ELi2EE3runERKSM_RKS3_>
 800fc5c:	eef0 7a40 	vmov.f32	s15, s0
 800fc60:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800fc64:	f107 020c 	add.w	r2, r7, #12
 800fc68:	f107 0308 	add.w	r3, r7, #8
 800fc6c:	4619      	mov	r1, r3
 800fc6e:	6838      	ldr	r0, [r7, #0]
 800fc70:	f7f9 f96d 	bl	8008f4e <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800fc74:	eef0 7a40 	vmov.f32	s15, s0
  }
 800fc78:	eeb0 0a67 	vmov.f32	s0, s15
 800fc7c:	3710      	adds	r7, #16
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	bd80      	pop	{r7, pc}

0800fc82 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800fc82:	b580      	push	{r7, lr}
 800fc84:	b082      	sub	sp, #8
 800fc86:	af00      	add	r7, sp, #0
 800fc88:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800fc8a:	2201      	movs	r2, #1
 800fc8c:	2102      	movs	r1, #2
 800fc8e:	6878      	ldr	r0, [r7, #4]
 800fc90:	f7fc fdaf 	bl	800c7f2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800fc94:	6878      	ldr	r0, [r7, #4]
 800fc96:	f000 fce0 	bl	801065a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSG_>
  }
 800fc9a:	bf00      	nop
 800fc9c:	3708      	adds	r7, #8
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	bd80      	pop	{r7, pc}

0800fca2 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>:
  explicit product_evaluator(const XprType& xpr)
 800fca2:	b580      	push	{r7, lr}
 800fca4:	b082      	sub	sp, #8
 800fca6:	af00      	add	r7, sp, #0
 800fca8:	6078      	str	r0, [r7, #4]
 800fcaa:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 800fcac:	6878      	ldr	r0, [r7, #4]
 800fcae:	f000 fcfc 	bl	80106aa <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 800fcb2:	6838      	ldr	r0, [r7, #0]
 800fcb4:	f000 fce1 	bl	801067a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3lhsEv>
 800fcb8:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 800fcbe:	6838      	ldr	r0, [r7, #0]
 800fcc0:	f000 fce7 	bl	8010692 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3rhsEv>
 800fcc4:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	3304      	adds	r3, #4
 800fcca:	6812      	ldr	r2, [r2, #0]
 800fccc:	601a      	str	r2, [r3, #0]
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 800fcd8:	4619      	mov	r1, r3
 800fcda:	4610      	mov	r0, r2
 800fcdc:	f7f7 fc3e 	bl	800755c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	3304      	adds	r3, #4
      m_innerDim(xpr.lhs().cols())
 800fcea:	4619      	mov	r1, r3
 800fcec:	4610      	mov	r0, r2
 800fcee:	f000 fce7 	bl	80106c0 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>
 800fcf2:	6838      	ldr	r0, [r7, #0]
 800fcf4:	f000 fcc1 	bl	801067a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3lhsEv>
 800fcf8:	4603      	mov	r3, r0
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	f7f4 ff8c 	bl	8004c18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800fd00:	4602      	mov	r2, r0
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	611a      	str	r2, [r3, #16]
  }
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	4618      	mov	r0, r3
 800fd0a:	3708      	adds	r7, #8
 800fd0c:	46bd      	mov	sp, r7
 800fd0e:	bd80      	pop	{r7, pc}

0800fd10 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800fd10:	b580      	push	{r7, lr}
 800fd12:	b082      	sub	sp, #8
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800fd18:	2100      	movs	r1, #0
 800fd1a:	6878      	ldr	r0, [r7, #4]
 800fd1c:	f000 fcdf 	bl	80106de <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800fd20:	6878      	ldr	r0, [r7, #4]
 800fd22:	f000 fcff 	bl	8010724 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSG_>
  }
 800fd26:	bf00      	nop
 800fd28:	3708      	adds	r7, #8
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	bd80      	pop	{r7, pc}

0800fd2e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800fd2e:	b480      	push	{r7}
 800fd30:	b083      	sub	sp, #12
 800fd32:	af00      	add	r7, sp, #0
 800fd34:	6078      	str	r0, [r7, #4]
 800fd36:	6039      	str	r1, [r7, #0]
}
 800fd38:	bf00      	nop
 800fd3a:	370c      	adds	r7, #12
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd42:	4770      	bx	lr

0800fd44 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEELi6ENS_10DenseShapeESA_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, Options>, ProductTag, LhsShape, RhsShape>
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b082      	sub	sp, #8
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	4618      	mov	r0, r3
 800fd50:	f7f9 f944 	bl	8008fdc <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	4618      	mov	r0, r3
 800fd58:	3708      	adds	r7, #8
 800fd5a:	46bd      	mov	sp, r7
 800fd5c:	bd80      	pop	{r7, pc}

0800fd5e <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 800fd5e:	b580      	push	{r7, lr}
 800fd60:	b082      	sub	sp, #8
 800fd62:	af00      	add	r7, sp, #0
 800fd64:	6078      	str	r0, [r7, #4]
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	4618      	mov	r0, r3
 800fd6a:	f7ff ffeb 	bl	800fd44 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEELi6ENS_10DenseShapeESA_ffED1Ev>
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	4618      	mov	r0, r3
 800fd72:	3708      	adds	r7, #8
 800fd74:	46bd      	mov	sp, r7
 800fd76:	bd80      	pop	{r7, pc}

0800fd78 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEED1Ev>:
struct evaluator<const T>
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b082      	sub	sp, #8
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	4618      	mov	r0, r3
 800fd84:	f7ff ffeb 	bl	800fd5e <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEED1Ev>
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	3708      	adds	r7, #8
 800fd8e:	46bd      	mov	sp, r7
 800fd90:	bd80      	pop	{r7, pc}

0800fd92 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
 800fd92:	b580      	push	{r7, lr}
 800fd94:	b082      	sub	sp, #8
 800fd96:	af00      	add	r7, sp, #0
 800fd98:	6078      	str	r0, [r7, #4]
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	f7f9 f91d 	bl	8008fdc <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	4618      	mov	r0, r3
 800fda6:	3708      	adds	r7, #8
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	bd80      	pop	{r7, pc}

0800fdac <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4DataD1Ev>:
  struct Data
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b082      	sub	sp, #8
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	6078      	str	r0, [r7, #4]
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	330c      	adds	r3, #12
 800fdb8:	4618      	mov	r0, r3
 800fdba:	f7ff ffea 	bl	800fd92 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	3304      	adds	r3, #4
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	f7ff ffd8 	bl	800fd78 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEED1Ev>
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	4618      	mov	r0, r3
 800fdcc:	3708      	adds	r7, #8
 800fdce:	46bd      	mov	sp, r7
 800fdd0:	bd80      	pop	{r7, pc}

0800fdd2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800fdd2:	b580      	push	{r7, lr}
 800fdd4:	b082      	sub	sp, #8
 800fdd6:	af00      	add	r7, sp, #0
 800fdd8:	6078      	str	r0, [r7, #4]
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	4618      	mov	r0, r3
 800fdde:	f7ff ffe5 	bl	800fdac <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4DataD1Ev>
 800fde2:	6878      	ldr	r0, [r7, #4]
 800fde4:	f000 fcbc 	bl	8010760 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	4618      	mov	r0, r3
 800fdec:	3708      	adds	r7, #8
 800fdee:	46bd      	mov	sp, r7
 800fdf0:	bd80      	pop	{r7, pc}

0800fdf2 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800fdf2:	b580      	push	{r7, lr}
 800fdf4:	b082      	sub	sp, #8
 800fdf6:	af00      	add	r7, sp, #0
 800fdf8:	6078      	str	r0, [r7, #4]
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	f7ff ffe8 	bl	800fdd2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffED1Ev>
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	4618      	mov	r0, r3
 800fe06:	3708      	adds	r7, #8
 800fe08:	46bd      	mov	sp, r7
 800fe0a:	bd80      	pop	{r7, pc}

0800fe0c <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b090      	sub	sp, #64	; 0x40
 800fe10:	af02      	add	r7, sp, #8
 800fe12:	60f8      	str	r0, [r7, #12]
 800fe14:	60b9      	str	r1, [r7, #8]
 800fe16:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800fe18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fe1c:	68b9      	ldr	r1, [r7, #8]
 800fe1e:	4618      	mov	r0, r3
 800fe20:	f000 fc8f 	bl	8010742 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSG_>
  resize_if_allowed(dst, src, func);
 800fe24:	687a      	ldr	r2, [r7, #4]
 800fe26:	68b9      	ldr	r1, [r7, #8]
 800fe28:	68f8      	ldr	r0, [r7, #12]
 800fe2a:	f000 fca5 	bl	8010778 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800fe2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fe32:	68f9      	ldr	r1, [r7, #12]
 800fe34:	4618      	mov	r0, r3
 800fe36:	f7fa f9ea 	bl	800a20e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800fe3a:	68f8      	ldr	r0, [r7, #12]
 800fe3c:	f000 f8aa 	bl	800ff94 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE18const_cast_derivedEv>
 800fe40:	4603      	mov	r3, r0
 800fe42:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fe46:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800fe4a:	f107 0014 	add.w	r0, r7, #20
 800fe4e:	9300      	str	r3, [sp, #0]
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	f000 fcdb 	bl	801080c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_INS3_IfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EEC1ERS5_RKSJ_RKSL_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800fe56:	f107 0314 	add.w	r3, r7, #20
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	f000 fcf0 	bl	8010840 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSN_>
  DstEvaluatorType dstEvaluator(dst);
 800fe60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fe64:	4618      	mov	r0, r3
 800fe66:	f7f9 f8b9 	bl	8008fdc <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800fe6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fe6e:	4618      	mov	r0, r3
 800fe70:	f7ff ffbf 	bl	800fdf2 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>
}
 800fe74:	bf00      	nop
 800fe76:	3738      	adds	r7, #56	; 0x38
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	bd80      	pop	{r7, pc}

0800fe7c <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfEC1ERKS9_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 800fe7c:	b590      	push	{r4, r7, lr}
 800fe7e:	b083      	sub	sp, #12
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	6078      	str	r0, [r7, #4]
 800fe84:	6039      	str	r1, [r7, #0]
 800fe86:	6878      	ldr	r0, [r7, #4]
 800fe88:	f000 fcf0 	bl	801086c <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>
 800fe8c:	687c      	ldr	r4, [r7, #4]
 800fe8e:	6838      	ldr	r0, [r7, #0]
 800fe90:	f000 fce1 	bl	8010856 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE16nestedExpressionEv>
 800fe94:	4603      	mov	r3, r0
 800fe96:	4619      	mov	r1, r3
 800fe98:	4620      	mov	r0, r4
 800fe9a:	f000 fcf2 	bl	8010882 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERS7_>
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	4618      	mov	r0, r3
 800fea2:	370c      	adds	r7, #12
 800fea4:	46bd      	mov	sp, r7
 800fea6:	bd90      	pop	{r4, r7, pc}

0800fea8 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb1EEE>:
  explicit block_evaluator(const XprType& block)
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b082      	sub	sp, #8
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
 800feb0:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	6839      	ldr	r1, [r7, #0]
 800feb6:	4618      	mov	r0, r3
 800feb8:	f000 fcf2 	bl	80108a0 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_EC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 800febc:	683b      	ldr	r3, [r7, #0]
 800febe:	4618      	mov	r0, r3
 800fec0:	f000 fd18 	bl	80108f4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4dataEv>
 800fec4:	bf00      	nop
  }
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	4618      	mov	r0, r3
 800feca:	3708      	adds	r7, #8
 800fecc:	46bd      	mov	sp, r7
 800fece:	bd80      	pop	{r7, pc}

0800fed0 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b082      	sub	sp, #8
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 800fed8:	f7f6 fc73 	bl	80067c2 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800fedc:	4603      	mov	r3, r0
  }
 800fede:	4618      	mov	r0, r3
 800fee0:	3708      	adds	r7, #8
 800fee2:	46bd      	mov	sp, r7
 800fee4:	bd80      	pop	{r7, pc}

0800fee6 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 800fee6:	b580      	push	{r7, lr}
 800fee8:	b082      	sub	sp, #8
 800feea:	af00      	add	r7, sp, #0
 800feec:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 800feee:	f7f6 fc70 	bl	80067d2 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800fef2:	4603      	mov	r3, r0
  }
 800fef4:	4618      	mov	r0, r3
 800fef6:	3708      	adds	r7, #8
 800fef8:	46bd      	mov	sp, r7
 800fefa:	bd80      	pop	{r7, pc}

0800fefc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 800fefc:	b580      	push	{r7, lr}
 800fefe:	b086      	sub	sp, #24
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	60f8      	str	r0, [r7, #12]
 800ff04:	60b9      	str	r1, [r7, #8]
 800ff06:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 800ff08:	68bb      	ldr	r3, [r7, #8]
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	f7f5 fe7f 	bl	8005c0e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800ff10:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 800ff12:	68bb      	ldr	r3, [r7, #8]
 800ff14:	4618      	mov	r0, r3
 800ff16:	f7f5 fe85 	bl	8005c24 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800ff1a:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	4618      	mov	r0, r3
 800ff20:	f7f5 fe75 	bl	8005c0e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800ff24:	4602      	mov	r2, r0
 800ff26:	697b      	ldr	r3, [r7, #20]
 800ff28:	4293      	cmp	r3, r2
 800ff2a:	d107      	bne.n	800ff3c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	4618      	mov	r0, r3
 800ff30:	f7f5 fe78 	bl	8005c24 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800ff34:	4602      	mov	r2, r0
 800ff36:	693b      	ldr	r3, [r7, #16]
 800ff38:	4293      	cmp	r3, r2
 800ff3a:	d001      	beq.n	800ff40 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x44>
 800ff3c:	2301      	movs	r3, #1
 800ff3e:	e000      	b.n	800ff42 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x46>
 800ff40:	2300      	movs	r3, #0
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d005      	beq.n	800ff52 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x56>
    dst.resize(dstRows, dstCols);
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	693a      	ldr	r2, [r7, #16]
 800ff4a:	6979      	ldr	r1, [r7, #20]
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	f7fd f9af 	bl	800d2b0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	4618      	mov	r0, r3
 800ff56:	f7f5 fe5a 	bl	8005c0e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800ff5a:	4602      	mov	r2, r0
 800ff5c:	697b      	ldr	r3, [r7, #20]
 800ff5e:	4293      	cmp	r3, r2
 800ff60:	d107      	bne.n	800ff72 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x76>
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	4618      	mov	r0, r3
 800ff66:	f7f5 fe5d 	bl	8005c24 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800ff6a:	4602      	mov	r2, r0
 800ff6c:	693b      	ldr	r3, [r7, #16]
 800ff6e:	4293      	cmp	r3, r2
 800ff70:	d006      	beq.n	800ff80 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x84>
 800ff72:	4b05      	ldr	r3, [pc, #20]	; (800ff88 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 800ff74:	4a05      	ldr	r2, [pc, #20]	; (800ff8c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 800ff76:	f240 21fd 	movw	r1, #765	; 0x2fd
 800ff7a:	4805      	ldr	r0, [pc, #20]	; (800ff90 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x94>)
 800ff7c:	f00d fd6e 	bl	801da5c <__assert_func>
}
 800ff80:	bf00      	nop
 800ff82:	3718      	adds	r7, #24
 800ff84:	46bd      	mov	sp, r7
 800ff86:	bd80      	pop	{r7, pc}
 800ff88:	08021f3c 	.word	0x08021f3c
 800ff8c:	0802774c 	.word	0x0802774c
 800ff90:	08022050 	.word	0x08022050

0800ff94 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 800ff94:	b480      	push	{r7}
 800ff96:	b083      	sub	sp, #12
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	370c      	adds	r7, #12
 800ffa2:	46bd      	mov	sp, r7
 800ffa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa8:	4770      	bx	lr

0800ffaa <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 800ffaa:	b480      	push	{r7}
 800ffac:	b085      	sub	sp, #20
 800ffae:	af00      	add	r7, sp, #0
 800ffb0:	60f8      	str	r0, [r7, #12]
 800ffb2:	60b9      	str	r1, [r7, #8]
 800ffb4:	607a      	str	r2, [r7, #4]
 800ffb6:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	68ba      	ldr	r2, [r7, #8]
 800ffbc:	601a      	str	r2, [r3, #0]
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	687a      	ldr	r2, [r7, #4]
 800ffc2:	605a      	str	r2, [r3, #4]
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	683a      	ldr	r2, [r7, #0]
 800ffc8:	609a      	str	r2, [r3, #8]
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	69ba      	ldr	r2, [r7, #24]
 800ffce:	60da      	str	r2, [r3, #12]
  }
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	3714      	adds	r7, #20
 800ffd6:	46bd      	mov	sp, r7
 800ffd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffdc:	4770      	bx	lr

0800ffde <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800ffde:	b580      	push	{r7, lr}
 800ffe0:	b082      	sub	sp, #8
 800ffe2:	af00      	add	r7, sp, #0
 800ffe4:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 800ffe6:	6878      	ldr	r0, [r7, #4]
 800ffe8:	f000 fc90 	bl	801090c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi1EE3runERS9_>
  }
 800ffec:	bf00      	nop
 800ffee:	3708      	adds	r7, #8
 800fff0:	46bd      	mov	sp, r7
 800fff2:	bd80      	pop	{r7, pc}

0800fff4 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 800fff4:	b580      	push	{r7, lr}
 800fff6:	b084      	sub	sp, #16
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	6078      	str	r0, [r7, #4]
  return ConstTransposeReturnType(derived());
 800fffc:	6878      	ldr	r0, [r7, #4]
 800fffe:	f7f5 fcf1 	bl	80059e4 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8010002:	4602      	mov	r2, r0
 8010004:	f107 030c 	add.w	r3, r7, #12
 8010008:	4611      	mov	r1, r2
 801000a:	4618      	mov	r0, r3
 801000c:	f000 fca5 	bl	801095a <_ZN5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS3_>
 8010010:	68fb      	ldr	r3, [r7, #12]
}
 8010012:	4618      	mov	r0, r3
 8010014:	3710      	adds	r7, #16
 8010016:	46bd      	mov	sp, r7
 8010018:	bd80      	pop	{r7, pc}

0801001a <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE12cwiseProductINS2_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSA_6traitsIT_E6ScalarEEEKS5_KSD_EERKNS0_ISD_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 801001a:	b5b0      	push	{r4, r5, r7, lr}
 801001c:	b086      	sub	sp, #24
 801001e:	af00      	add	r7, sp, #0
 8010020:	60f8      	str	r0, [r7, #12]
 8010022:	60b9      	str	r1, [r7, #8]
 8010024:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 8010026:	68b8      	ldr	r0, [r7, #8]
 8010028:	f000 fca7 	bl	801097a <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 801002c:	4604      	mov	r4, r0
 801002e:	6878      	ldr	r0, [r7, #4]
 8010030:	f7f5 f83f 	bl	80050b2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8010034:	4605      	mov	r5, r0
 8010036:	f107 0314 	add.w	r3, r7, #20
 801003a:	4618      	mov	r0, r3
 801003c:	f7f5 f898 	bl	8005170 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 8010040:	f107 0314 	add.w	r3, r7, #20
 8010044:	462a      	mov	r2, r5
 8010046:	4621      	mov	r1, r4
 8010048:	68f8      	ldr	r0, [r7, #12]
 801004a:	f000 fcd5 	bl	80109f8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_>
}
 801004e:	68f8      	ldr	r0, [r7, #12]
 8010050:	3718      	adds	r7, #24
 8010052:	46bd      	mov	sp, r7
 8010054:	bdb0      	pop	{r4, r5, r7, pc}

08010056 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8010056:	b580      	push	{r7, lr}
 8010058:	b082      	sub	sp, #8
 801005a:	af00      	add	r7, sp, #0
 801005c:	6078      	str	r0, [r7, #4]
 801005e:	6878      	ldr	r0, [r7, #4]
 8010060:	f000 fd18 	bl	8010a94 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 8010064:	4603      	mov	r3, r0
 8010066:	4618      	mov	r0, r3
 8010068:	f000 fd1f 	bl	8010aaa <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 801006c:	4603      	mov	r3, r0
 801006e:	4618      	mov	r0, r3
 8010070:	3708      	adds	r7, #8
 8010072:	46bd      	mov	sp, r7
 8010074:	bd80      	pop	{r7, pc}

08010076 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 8010076:	b590      	push	{r4, r7, lr}
 8010078:	b085      	sub	sp, #20
 801007a:	af00      	add	r7, sp, #0
 801007c:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 801007e:	6878      	ldr	r0, [r7, #4]
 8010080:	f000 fd08 	bl	8010a94 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 8010084:	4604      	mov	r4, r0
 8010086:	f107 030c 	add.w	r3, r7, #12
 801008a:	4618      	mov	r0, r3
 801008c:	f7f5 fb67 	bl	800575e <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8010090:	f107 030c 	add.w	r3, r7, #12
 8010094:	4619      	mov	r1, r3
 8010096:	4620      	mov	r0, r4
 8010098:	f000 fd88 	bl	8010bac <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 801009c:	eef0 7a40 	vmov.f32	s15, s0
 80100a0:	bf00      	nop
}
 80100a2:	eeb0 0a67 	vmov.f32	s0, s15
 80100a6:	3714      	adds	r7, #20
 80100a8:	46bd      	mov	sp, r7
 80100aa:	bd90      	pop	{r4, r7, pc}

080100ac <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80100ac:	b480      	push	{r7}
 80100ae:	b083      	sub	sp, #12
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	6078      	str	r0, [r7, #4]
    }
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	4618      	mov	r0, r3
 80100b8:	370c      	adds	r7, #12
 80100ba:	46bd      	mov	sp, r7
 80100bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c0:	4770      	bx	lr

080100c2 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 80100c2:	b580      	push	{r7, lr}
 80100c4:	b082      	sub	sp, #8
 80100c6:	af00      	add	r7, sp, #0
 80100c8:	6078      	str	r0, [r7, #4]
 80100ca:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	4618      	mov	r0, r3
 80100d0:	f7f4 fdad 	bl	8004c2e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80100d4:	4603      	mov	r3, r0
 80100d6:	2b01      	cmp	r3, #1
 80100d8:	dd08      	ble.n	80100ec <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_+0x2a>
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	4618      	mov	r0, r3
 80100de:	f7f4 fd9b 	bl	8004c18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80100e2:	4603      	mov	r3, r0
 80100e4:	2b01      	cmp	r3, #1
 80100e6:	dd01      	ble.n	80100ec <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_+0x2a>
 80100e8:	2301      	movs	r3, #1
 80100ea:	e000      	b.n	80100ee <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_+0x2c>
 80100ec:	2300      	movs	r3, #0
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d003      	beq.n	80100fa <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 80100f2:	6839      	ldr	r1, [r7, #0]
 80100f4:	6878      	ldr	r0, [r7, #4]
 80100f6:	f000 fd9f 	bl	8010c38 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELb0EE3runERKS3_RKS7_>
}
 80100fa:	bf00      	nop
 80100fc:	3708      	adds	r7, #8
 80100fe:	46bd      	mov	sp, r7
 8010100:	bd80      	pop	{r7, pc}

08010102 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 8010102:	b580      	push	{r7, lr}
 8010104:	b082      	sub	sp, #8
 8010106:	af00      	add	r7, sp, #0
 8010108:	6078      	str	r0, [r7, #4]
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	330c      	adds	r3, #12
 801010e:	4618      	mov	r0, r3
 8010110:	f7fe fe48 	bl	800eda4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	3308      	adds	r3, #8
 8010118:	4618      	mov	r0, r3
 801011a:	f7f4 ff9a 	bl	8005052 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 801011e:	6878      	ldr	r0, [r7, #4]
 8010120:	f000 fda4 	bl	8010c6c <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEED1Ev>
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	4618      	mov	r0, r3
 8010128:	3708      	adds	r7, #8
 801012a:	46bd      	mov	sp, r7
 801012c:	bd80      	pop	{r7, pc}

0801012e <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 801012e:	b580      	push	{r7, lr}
 8010130:	b082      	sub	sp, #8
 8010132:	af00      	add	r7, sp, #0
 8010134:	6078      	str	r0, [r7, #4]
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	4618      	mov	r0, r3
 801013a:	f7ff ffe2 	bl	8010102 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffED1Ev>
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	4618      	mov	r0, r3
 8010142:	3708      	adds	r7, #8
 8010144:	46bd      	mov	sp, r7
 8010146:	bd80      	pop	{r7, pc}

08010148 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8010148:	b580      	push	{r7, lr}
 801014a:	b090      	sub	sp, #64	; 0x40
 801014c:	af02      	add	r7, sp, #8
 801014e:	60f8      	str	r0, [r7, #12]
 8010150:	60b9      	str	r1, [r7, #8]
 8010152:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8010154:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010158:	68b9      	ldr	r1, [r7, #8]
 801015a:	4618      	mov	r0, r3
 801015c:	f000 fd77 	bl	8010c4e <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1ERKS6_>
  resize_if_allowed(dst, src, func);
 8010160:	687a      	ldr	r2, [r7, #4]
 8010162:	68b9      	ldr	r1, [r7, #8]
 8010164:	68f8      	ldr	r0, [r7, #12]
 8010166:	f000 fda9 	bl	8010cbc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  DstEvaluatorType dstEvaluator(dst);
 801016a:	f107 0320 	add.w	r3, r7, #32
 801016e:	68f9      	ldr	r1, [r7, #12]
 8010170:	4618      	mov	r0, r3
 8010172:	f7f7 f9f3 	bl	800755c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8010176:	68f8      	ldr	r0, [r7, #12]
 8010178:	f7f7 fa58 	bl	800762c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 801017c:	4603      	mov	r3, r0
 801017e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8010182:	f107 0120 	add.w	r1, r7, #32
 8010186:	f107 0010 	add.w	r0, r7, #16
 801018a:	9300      	str	r3, [sp, #0]
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	f000 fdc3 	bl	8010d18 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEC1ERS5_RKSA_RKSC_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8010192:	f107 0310 	add.w	r3, r7, #16
 8010196:	4618      	mov	r0, r3
 8010198:	f000 fdd8 	bl	8010d4c <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi0ELi2EE3runERSE_>
  DstEvaluatorType dstEvaluator(dst);
 801019c:	f107 0320 	add.w	r3, r7, #32
 80101a0:	4618      	mov	r0, r3
 80101a2:	f7f6 ffcc 	bl	800713e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 80101a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80101aa:	4618      	mov	r0, r3
 80101ac:	f7ff ffbf 	bl	801012e <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEED1Ev>
}
 80101b0:	bf00      	nop
 80101b2:	3738      	adds	r7, #56	; 0x38
 80101b4:	46bd      	mov	sp, r7
 80101b6:	bd80      	pop	{r7, pc}

080101b8 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 80101b8:	b580      	push	{r7, lr}
 80101ba:	b082      	sub	sp, #8
 80101bc:	af00      	add	r7, sp, #0
 80101be:	6078      	str	r0, [r7, #4]
 80101c0:	6039      	str	r1, [r7, #0]
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	6839      	ldr	r1, [r7, #0]
 80101c6:	4618      	mov	r0, r3
 80101c8:	f000 fdcb 	bl	8010d62 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li3ELi1ELb1EEE>
  }
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	4618      	mov	r0, r3
 80101d0:	3708      	adds	r7, #8
 80101d2:	46bd      	mov	sp, r7
 80101d4:	bd80      	pop	{r7, pc}

080101d6 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 80101d6:	b480      	push	{r7}
 80101d8:	b083      	sub	sp, #12
 80101da:	af00      	add	r7, sp, #0
 80101dc:	6078      	str	r0, [r7, #4]
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	4618      	mov	r0, r3
 80101e2:	370c      	adds	r7, #12
 80101e4:	46bd      	mov	sp, r7
 80101e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ea:	4770      	bx	lr

080101ec <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 80101ec:	b5b0      	push	{r4, r5, r7, lr}
 80101ee:	b084      	sub	sp, #16
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	60f8      	str	r0, [r7, #12]
 80101f4:	60b9      	str	r1, [r7, #8]
 80101f6:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	681c      	ldr	r4, [r3, #0]
 80101fc:	68f8      	ldr	r0, [r7, #12]
 80101fe:	f000 fdc4 	bl	8010d8a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>
 8010202:	4602      	mov	r2, r0
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	fb03 f502 	mul.w	r5, r3, r2
 801020a:	68f8      	ldr	r0, [r7, #12]
 801020c:	f000 fdc8 	bl	8010da0 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>
 8010210:	4602      	mov	r2, r0
 8010212:	68bb      	ldr	r3, [r7, #8]
 8010214:	fb02 f303 	mul.w	r3, r2, r3
 8010218:	442b      	add	r3, r5
 801021a:	009b      	lsls	r3, r3, #2
 801021c:	4423      	add	r3, r4
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	ee07 3a90 	vmov	s15, r3
  }
 8010224:	eeb0 0a67 	vmov.f32	s0, s15
 8010228:	3710      	adds	r7, #16
 801022a:	46bd      	mov	sp, r7
 801022c:	bdb0      	pop	{r4, r5, r7, pc}

0801022e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfEC1ERKSJ_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 801022e:	b590      	push	{r4, r7, lr}
 8010230:	b083      	sub	sp, #12
 8010232:	af00      	add	r7, sp, #0
 8010234:	6078      	str	r0, [r7, #4]
 8010236:	6039      	str	r1, [r7, #0]
 8010238:	6878      	ldr	r0, [r7, #4]
 801023a:	f000 fdc7 	bl	8010dcc <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>
 801023e:	687c      	ldr	r4, [r7, #4]
 8010240:	6838      	ldr	r0, [r7, #0]
 8010242:	f000 fdb8 	bl	8010db6 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE16nestedExpressionEv>
 8010246:	4603      	mov	r3, r0
 8010248:	4619      	mov	r1, r3
 801024a:	4620      	mov	r0, r4
 801024c:	f000 fdc9 	bl	8010de2 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERSH_>
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	4618      	mov	r0, r3
 8010254:	370c      	adds	r7, #12
 8010256:	46bd      	mov	sp, r7
 8010258:	bd90      	pop	{r4, r7, pc}

0801025a <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS6_Li1ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 801025a:	b580      	push	{r7, lr}
 801025c:	b082      	sub	sp, #8
 801025e:	af00      	add	r7, sp, #0
 8010260:	6078      	str	r0, [r7, #4]
 8010262:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	6839      	ldr	r1, [r7, #0]
 8010268:	4618      	mov	r0, r3
 801026a:	f000 fdc9 	bl	8010e00 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEEC1ERKS8_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 801026e:	683b      	ldr	r3, [r7, #0]
 8010270:	4618      	mov	r0, r3
 8010272:	f000 fdef 	bl	8010e54 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4dataEv>
 8010276:	bf00      	nop
  }
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	4618      	mov	r0, r3
 801027c:	3708      	adds	r7, #8
 801027e:	46bd      	mov	sp, r7
 8010280:	bd80      	pop	{r7, pc}

08010282 <_ZNK5Eigen8internal19variable_if_dynamicIiLin1EE5valueEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T value() const { return m_value; }
 8010282:	b480      	push	{r7}
 8010284:	b083      	sub	sp, #12
 8010286:	af00      	add	r7, sp, #0
 8010288:	6078      	str	r0, [r7, #4]
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	4618      	mov	r0, r3
 8010290:	370c      	adds	r7, #12
 8010292:	46bd      	mov	sp, r7
 8010294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010298:	4770      	bx	lr

0801029a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 801029a:	b5b0      	push	{r4, r5, r7, lr}
 801029c:	b086      	sub	sp, #24
 801029e:	af00      	add	r7, sp, #0
 80102a0:	60f8      	str	r0, [r7, #12]
 80102a2:	60b9      	str	r1, [r7, #8]
 80102a4:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	4618      	mov	r0, r3
 80102aa:	f000 fddf 	bl	8010e6c <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4Data4funcEv>
 80102ae:	4604      	mov	r4, r0
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	3304      	adds	r3, #4
 80102b4:	687a      	ldr	r2, [r7, #4]
 80102b6:	68b9      	ldr	r1, [r7, #8]
 80102b8:	4618      	mov	r0, r3
 80102ba:	f000 fde2 	bl	8010e82 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEii>
 80102be:	4605      	mov	r5, r0
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	3308      	adds	r3, #8
 80102c4:	687a      	ldr	r2, [r7, #4]
 80102c6:	68b9      	ldr	r1, [r7, #8]
 80102c8:	4618      	mov	r0, r3
 80102ca:	f000 fdf2 	bl	8010eb2 <_ZNK5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffIiEEfT_SB_>
 80102ce:	eef0 7a40 	vmov.f32	s15, s0
 80102d2:	edc7 7a05 	vstr	s15, [r7, #20]
 80102d6:	f107 0314 	add.w	r3, r7, #20
 80102da:	461a      	mov	r2, r3
 80102dc:	4629      	mov	r1, r5
 80102de:	4620      	mov	r0, r4
 80102e0:	f7fe fe76 	bl	800efd0 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 80102e4:	eef0 7a40 	vmov.f32	s15, s0
  }
 80102e8:	eeb0 0a67 	vmov.f32	s0, s15
 80102ec:	3718      	adds	r7, #24
 80102ee:	46bd      	mov	sp, r7
 80102f0:	bdb0      	pop	{r4, r5, r7, pc}

080102f2 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 80102f2:	b480      	push	{r7}
 80102f4:	b083      	sub	sp, #12
 80102f6:	af00      	add	r7, sp, #0
 80102f8:	6078      	str	r0, [r7, #4]
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	4618      	mov	r0, r3
 80102fe:	370c      	adds	r7, #12
 8010300:	46bd      	mov	sp, r7
 8010302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010306:	4770      	bx	lr

08010308 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8010308:	b480      	push	{r7}
 801030a:	b083      	sub	sp, #12
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	4618      	mov	r0, r3
 8010314:	370c      	adds	r7, #12
 8010316:	46bd      	mov	sp, r7
 8010318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801031c:	4770      	bx	lr

0801031e <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 801031e:	b580      	push	{r7, lr}
 8010320:	b082      	sub	sp, #8
 8010322:	af00      	add	r7, sp, #0
 8010324:	6078      	str	r0, [r7, #4]
 8010326:	6039      	str	r1, [r7, #0]
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	6839      	ldr	r1, [r7, #0]
 801032c:	4618      	mov	r0, r3
 801032e:	f000 fdd4 	bl	8010eda <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERKS6_>
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	4618      	mov	r0, r3
 8010336:	3708      	adds	r7, #8
 8010338:	46bd      	mov	sp, r7
 801033a:	bd80      	pop	{r7, pc}

0801033c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_EC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 801033c:	b590      	push	{r4, r7, lr}
 801033e:	b083      	sub	sp, #12
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
 8010344:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8010346:	6878      	ldr	r0, [r7, #4]
 8010348:	f000 fdf2 	bl	8010f30 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 801034c:	683b      	ldr	r3, [r7, #0]
 801034e:	4618      	mov	r0, r3
 8010350:	f000 f81e 	bl	8010390 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4dataEv>
 8010354:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	601a      	str	r2, [r3, #0]
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	1d1c      	adds	r4, r3, #4
 801035e:	683b      	ldr	r3, [r7, #0]
 8010360:	4618      	mov	r0, r3
 8010362:	f000 fdc9 	bl	8010ef8 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE11innerStrideEv>
 8010366:	4603      	mov	r3, r0
 8010368:	4619      	mov	r1, r3
 801036a:	4620      	mov	r0, r4
 801036c:	f7f6 fa04 	bl	8006778 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	1d5c      	adds	r4, r3, #5
 8010374:	683b      	ldr	r3, [r7, #0]
 8010376:	4618      	mov	r0, r3
 8010378:	f000 fdcc 	bl	8010f14 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE11outerStrideEv>
 801037c:	4603      	mov	r3, r0
 801037e:	4619      	mov	r1, r3
 8010380:	4620      	mov	r0, r4
 8010382:	f7f6 f9df 	bl	8006744 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	4618      	mov	r0, r3
 801038a:	370c      	adds	r7, #12
 801038c:	46bd      	mov	sp, r7
 801038e:	bd90      	pop	{r4, r7, pc}

08010390 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 8010390:	b480      	push	{r7}
 8010392:	b083      	sub	sp, #12
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	4618      	mov	r0, r3
 801039e:	370c      	adds	r7, #12
 80103a0:	46bd      	mov	sp, r7
 80103a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a6:	4770      	bx	lr

080103a8 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b082      	sub	sp, #8
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 80103b0:	f7f6 fa07 	bl	80067c2 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 80103b4:	4603      	mov	r3, r0
  }
 80103b6:	4618      	mov	r0, r3
 80103b8:	3708      	adds	r7, #8
 80103ba:	46bd      	mov	sp, r7
 80103bc:	bd80      	pop	{r7, pc}

080103be <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 80103be:	b580      	push	{r7, lr}
 80103c0:	b082      	sub	sp, #8
 80103c2:	af00      	add	r7, sp, #0
 80103c4:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 80103c6:	f7f6 fa04 	bl	80067d2 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 80103ca:	4603      	mov	r3, r0
  }
 80103cc:	4618      	mov	r0, r3
 80103ce:	3708      	adds	r7, #8
 80103d0:	46bd      	mov	sp, r7
 80103d2:	bd80      	pop	{r7, pc}

080103d4 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEC1Ev>:
 80103d4:	b580      	push	{r7, lr}
 80103d6:	b082      	sub	sp, #8
 80103d8:	af00      	add	r7, sp, #0
 80103da:	6078      	str	r0, [r7, #4]
 80103dc:	6878      	ldr	r0, [r7, #4]
 80103de:	f000 fdb2 	bl	8010f46 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEC1Ev>
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	4618      	mov	r0, r3
 80103e6:	3708      	adds	r7, #8
 80103e8:	46bd      	mov	sp, r7
 80103ea:	bd80      	pop	{r7, pc}

080103ec <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1ELi3EEC1Ev>:
class dense_product_base
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b082      	sub	sp, #8
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	6078      	str	r0, [r7, #4]
 80103f4:	6878      	ldr	r0, [r7, #4]
 80103f6:	f7ff ffed 	bl	80103d4 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEC1Ev>
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	4618      	mov	r0, r3
 80103fe:	3708      	adds	r7, #8
 8010400:	46bd      	mov	sp, r7
 8010402:	bd80      	pop	{r7, pc}

08010404 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8010404:	b580      	push	{r7, lr}
 8010406:	b082      	sub	sp, #8
 8010408:	af00      	add	r7, sp, #0
 801040a:	6078      	str	r0, [r7, #4]
 801040c:	6878      	ldr	r0, [r7, #4]
 801040e:	f7ff ffed 	bl	80103ec <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1ELi3EEC1Ev>
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	4618      	mov	r0, r3
 8010416:	3708      	adds	r7, #8
 8010418:	46bd      	mov	sp, r7
 801041a:	bd80      	pop	{r7, pc}

0801041c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 801041c:	b590      	push	{r4, r7, lr}
 801041e:	b085      	sub	sp, #20
 8010420:	af00      	add	r7, sp, #0
 8010422:	60f8      	str	r0, [r7, #12]
 8010424:	60b9      	str	r1, [r7, #8]
 8010426:	607a      	str	r2, [r7, #4]
 8010428:	68f8      	ldr	r0, [r7, #12]
 801042a:	f7ff ffeb 	bl	8010404 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1ENS_5DenseEEC1Ev>
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	68ba      	ldr	r2, [r7, #8]
 8010432:	601a      	str	r2, [r3, #0]
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	687a      	ldr	r2, [r7, #4]
 8010438:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 801043a:	68bb      	ldr	r3, [r7, #8]
 801043c:	4618      	mov	r0, r3
 801043e:	f7f4 fbeb 	bl	8004c18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8010442:	4604      	mov	r4, r0
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	4618      	mov	r0, r3
 8010448:	f7f4 fbf1 	bl	8004c2e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 801044c:	4603      	mov	r3, r0
 801044e:	429c      	cmp	r4, r3
 8010450:	d005      	beq.n	801045e <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_+0x42>
 8010452:	4b06      	ldr	r3, [pc, #24]	; (801046c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_+0x50>)
 8010454:	4a06      	ldr	r2, [pc, #24]	; (8010470 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_+0x54>)
 8010456:	2160      	movs	r1, #96	; 0x60
 8010458:	4806      	ldr	r0, [pc, #24]	; (8010474 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_+0x58>)
 801045a:	f00d faff 	bl	801da5c <__assert_func>
 801045e:	bf00      	nop
    }
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	4618      	mov	r0, r3
 8010464:	3714      	adds	r7, #20
 8010466:	46bd      	mov	sp, r7
 8010468:	bd90      	pop	{r4, r7, pc}
 801046a:	bf00      	nop
 801046c:	0801fb84 	.word	0x0801fb84
 8010470:	08027830 	.word	0x08027830
 8010474:	0801fed4 	.word	0x0801fed4

08010478 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8010478:	b580      	push	{r7, lr}
 801047a:	b084      	sub	sp, #16
 801047c:	af00      	add	r7, sp, #0
 801047e:	60f8      	str	r0, [r7, #12]
 8010480:	60b9      	str	r1, [r7, #8]
 8010482:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8010484:	68b9      	ldr	r1, [r7, #8]
 8010486:	68f8      	ldr	r0, [r7, #12]
 8010488:	f000 fd68 	bl	8010f5c <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 801048c:	687a      	ldr	r2, [r7, #4]
 801048e:	68b9      	ldr	r1, [r7, #8]
 8010490:	68f8      	ldr	r0, [r7, #12]
 8010492:	f000 fda6 	bl	8010fe2 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8010496:	bf00      	nop
 8010498:	3710      	adds	r7, #16
 801049a:	46bd      	mov	sp, r7
 801049c:	bd80      	pop	{r7, pc}

0801049e <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE4dataEv>:
    const Scalar* data() const { return derived().nestedExpression().data(); }
 801049e:	b580      	push	{r7, lr}
 80104a0:	b082      	sub	sp, #8
 80104a2:	af00      	add	r7, sp, #0
 80104a4:	6078      	str	r0, [r7, #4]
 80104a6:	6878      	ldr	r0, [r7, #4]
 80104a8:	f7f5 f8d2 	bl	8005650 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 80104ac:	4603      	mov	r3, r0
 80104ae:	4618      	mov	r0, r3
 80104b0:	f7fd fadc 	bl	800da6c <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>
 80104b4:	4603      	mov	r3, r0
 80104b6:	4618      	mov	r0, r3
 80104b8:	f7f7 fcf2 	bl	8007ea0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 80104bc:	4603      	mov	r3, r0
 80104be:	4618      	mov	r0, r3
 80104c0:	3708      	adds	r7, #8
 80104c2:	46bd      	mov	sp, r7
 80104c4:	bd80      	pop	{r7, pc}

080104c6 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11innerStrideEv>:
    Index innerStride() const { return derived().nestedExpression().innerStride(); }
 80104c6:	b580      	push	{r7, lr}
 80104c8:	b082      	sub	sp, #8
 80104ca:	af00      	add	r7, sp, #0
 80104cc:	6078      	str	r0, [r7, #4]
 80104ce:	6878      	ldr	r0, [r7, #4]
 80104d0:	f7f5 f8be 	bl	8005650 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 80104d4:	4603      	mov	r3, r0
 80104d6:	4618      	mov	r0, r3
 80104d8:	f7fd fac8 	bl	800da6c <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>
 80104dc:	4603      	mov	r3, r0
 80104de:	4618      	mov	r0, r3
 80104e0:	f7fd f968 	bl	800d7b4 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 80104e4:	4603      	mov	r3, r0
 80104e6:	4618      	mov	r0, r3
 80104e8:	3708      	adds	r7, #8
 80104ea:	46bd      	mov	sp, r7
 80104ec:	bd80      	pop	{r7, pc}

080104ee <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11outerStrideEv>:
    Index outerStride() const { return derived().nestedExpression().outerStride(); }
 80104ee:	b580      	push	{r7, lr}
 80104f0:	b082      	sub	sp, #8
 80104f2:	af00      	add	r7, sp, #0
 80104f4:	6078      	str	r0, [r7, #4]
 80104f6:	6878      	ldr	r0, [r7, #4]
 80104f8:	f7f5 f8aa 	bl	8005650 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 80104fc:	4603      	mov	r3, r0
 80104fe:	4618      	mov	r0, r3
 8010500:	f7fd fab4 	bl	800da6c <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>
 8010504:	4603      	mov	r3, r0
 8010506:	4618      	mov	r0, r3
 8010508:	f7f7 ff04 	bl	8008314 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 801050c:	4603      	mov	r3, r0
 801050e:	4618      	mov	r0, r3
 8010510:	3708      	adds	r7, #8
 8010512:	46bd      	mov	sp, r7
 8010514:	bd80      	pop	{r7, pc}

08010516 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>:
 8010516:	b580      	push	{r7, lr}
 8010518:	b082      	sub	sp, #8
 801051a:	af00      	add	r7, sp, #0
 801051c:	6078      	str	r0, [r7, #4]
 801051e:	6878      	ldr	r0, [r7, #4]
 8010520:	f000 fd97 	bl	8011052 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	4618      	mov	r0, r3
 8010528:	3708      	adds	r7, #8
 801052a:	46bd      	mov	sp, r7
 801052c:	bd80      	pop	{r7, pc}
	...

08010530 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 8010530:	b580      	push	{r7, lr}
 8010532:	b084      	sub	sp, #16
 8010534:	af00      	add	r7, sp, #0
 8010536:	60f8      	str	r0, [r7, #12]
 8010538:	60b9      	str	r1, [r7, #8]
 801053a:	607a      	str	r2, [r7, #4]
 801053c:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 801053e:	68f8      	ldr	r0, [r7, #12]
 8010540:	f7ff ffe9 	bl	8010516 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	68ba      	ldr	r2, [r7, #8]
 8010548:	601a      	str	r2, [r3, #0]
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	3304      	adds	r3, #4
 801054e:	6879      	ldr	r1, [r7, #4]
 8010550:	4618      	mov	r0, r3
 8010552:	f7f6 f8f7 	bl	8006744 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	3305      	adds	r3, #5
 801055a:	6839      	ldr	r1, [r7, #0]
 801055c:	4618      	mov	r0, r3
 801055e:	f7f6 f90b 	bl	8006778 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 8010562:	68bb      	ldr	r3, [r7, #8]
 8010564:	2b00      	cmp	r3, #0
 8010566:	d011      	beq.n	801058c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	2b00      	cmp	r3, #0
 801056c:	db08      	blt.n	8010580 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x50>
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	2b03      	cmp	r3, #3
 8010572:	d105      	bne.n	8010580 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x50>
 8010574:	683b      	ldr	r3, [r7, #0]
 8010576:	2b00      	cmp	r3, #0
 8010578:	db02      	blt.n	8010580 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x50>
 801057a:	683b      	ldr	r3, [r7, #0]
 801057c:	2b01      	cmp	r3, #1
 801057e:	d005      	beq.n	801058c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 8010580:	4b07      	ldr	r3, [pc, #28]	; (80105a0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x70>)
 8010582:	4a08      	ldr	r2, [pc, #32]	; (80105a4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x74>)
 8010584:	21b0      	movs	r1, #176	; 0xb0
 8010586:	4808      	ldr	r0, [pc, #32]	; (80105a8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x78>)
 8010588:	f00d fa68 	bl	801da5c <__assert_func>
      checkSanity<Derived>();
 801058c:	2100      	movs	r1, #0
 801058e:	68f8      	ldr	r0, [r7, #12]
 8010590:	f000 fd6a 	bl	8011068 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	4618      	mov	r0, r3
 8010598:	3710      	adds	r7, #16
 801059a:	46bd      	mov	sp, r7
 801059c:	bd80      	pop	{r7, pc}
 801059e:	bf00      	nop
 80105a0:	08025fe8 	.word	0x08025fe8
 80105a4:	08027958 	.word	0x08027958
 80105a8:	08026198 	.word	0x08026198

080105ac <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE4initEv>:
    void init()
 80105ac:	b580      	push	{r7, lr}
 80105ae:	b082      	sub	sp, #8
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	6078      	str	r0, [r7, #4]
                    : m_xpr.innerStride();
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	3308      	adds	r3, #8
                    ? m_xpr.outerStride()
 80105b8:	4618      	mov	r0, r3
 80105ba:	f7ff ff84 	bl	80104c6 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11innerStrideEv>
 80105be:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	615a      	str	r2, [r3, #20]
    }
 80105c4:	bf00      	nop
 80105c6:	3708      	adds	r7, #8
 80105c8:	46bd      	mov	sp, r7
 80105ca:	bd80      	pop	{r7, pc}

080105cc <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b082      	sub	sp, #8
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
 80105d4:	6039      	str	r1, [r7, #0]
 80105d6:	6878      	ldr	r0, [r7, #4]
 80105d8:	f000 fd51 	bl	801107e <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	6839      	ldr	r1, [r7, #0]
 80105e0:	4618      	mov	r0, r3
 80105e2:	f000 fd57 	bl	8011094 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	4618      	mov	r0, r3
 80105ea:	3708      	adds	r7, #8
 80105ec:	46bd      	mov	sp, r7
 80105ee:	bd80      	pop	{r7, pc}

080105f0 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 80105f0:	b580      	push	{r7, lr}
 80105f2:	b082      	sub	sp, #8
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	6078      	str	r0, [r7, #4]
 80105f8:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 80105fa:	2200      	movs	r2, #0
 80105fc:	2100      	movs	r1, #0
 80105fe:	6878      	ldr	r0, [r7, #4]
 8010600:	f000 fd70 	bl	80110e4 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 8010604:	eef0 7a40 	vmov.f32	s15, s0
  }
 8010608:	eeb0 0a67 	vmov.f32	s0, s15
 801060c:	3708      	adds	r7, #8
 801060e:	46bd      	mov	sp, r7
 8010610:	bd80      	pop	{r7, pc}

08010612 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi1ELi2EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8010612:	b580      	push	{r7, lr}
 8010614:	b084      	sub	sp, #16
 8010616:	af00      	add	r7, sp, #0
 8010618:	6078      	str	r0, [r7, #4]
 801061a:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 801061c:	6839      	ldr	r1, [r7, #0]
 801061e:	6878      	ldr	r0, [r7, #4]
 8010620:	f000 fd73 	bl	801110a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi1ELi1EE3runERKSM_RKS3_>
 8010624:	eef0 7a40 	vmov.f32	s15, s0
 8010628:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 801062c:	6839      	ldr	r1, [r7, #0]
 801062e:	6878      	ldr	r0, [r7, #4]
 8010630:	f000 fd7c 	bl	801112c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi2ELi1EE3runERKSM_RKS3_>
 8010634:	eef0 7a40 	vmov.f32	s15, s0
 8010638:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 801063c:	f107 020c 	add.w	r2, r7, #12
 8010640:	f107 0308 	add.w	r3, r7, #8
 8010644:	4619      	mov	r1, r3
 8010646:	6838      	ldr	r0, [r7, #0]
 8010648:	f7f8 fc81 	bl	8008f4e <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 801064c:	eef0 7a40 	vmov.f32	s15, s0
  }
 8010650:	eeb0 0a67 	vmov.f32	s0, s15
 8010654:	3710      	adds	r7, #16
 8010656:	46bd      	mov	sp, r7
 8010658:	bd80      	pop	{r7, pc}

0801065a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 801065a:	b580      	push	{r7, lr}
 801065c:	b082      	sub	sp, #8
 801065e:	af00      	add	r7, sp, #0
 8010660:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8010662:	2202      	movs	r2, #2
 8010664:	2102      	movs	r1, #2
 8010666:	6878      	ldr	r0, [r7, #4]
 8010668:	f7fc f8c3 	bl	800c7f2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 801066c:	6878      	ldr	r0, [r7, #4]
 801066e:	f000 fd6e 	bl	801114e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSG_>
  }
 8010672:	bf00      	nop
 8010674:	3708      	adds	r7, #8
 8010676:	46bd      	mov	sp, r7
 8010678:	bd80      	pop	{r7, pc}

0801067a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 801067a:	b480      	push	{r7}
 801067c:	b083      	sub	sp, #12
 801067e:	af00      	add	r7, sp, #0
 8010680:	6078      	str	r0, [r7, #4]
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	4618      	mov	r0, r3
 8010688:	370c      	adds	r7, #12
 801068a:	46bd      	mov	sp, r7
 801068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010690:	4770      	bx	lr

08010692 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8010692:	b480      	push	{r7}
 8010694:	b083      	sub	sp, #12
 8010696:	af00      	add	r7, sp, #0
 8010698:	6078      	str	r0, [r7, #4]
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	3304      	adds	r3, #4
 801069e:	4618      	mov	r0, r3
 80106a0:	370c      	adds	r7, #12
 80106a2:	46bd      	mov	sp, r7
 80106a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a8:	4770      	bx	lr

080106aa <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80106aa:	b480      	push	{r7}
 80106ac:	b083      	sub	sp, #12
 80106ae:	af00      	add	r7, sp, #0
 80106b0:	6078      	str	r0, [r7, #4]
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	4618      	mov	r0, r3
 80106b6:	370c      	adds	r7, #12
 80106b8:	46bd      	mov	sp, r7
 80106ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106be:	4770      	bx	lr

080106c0 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 80106c0:	b580      	push	{r7, lr}
 80106c2:	b082      	sub	sp, #8
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]
 80106c8:	6039      	str	r1, [r7, #0]
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	6839      	ldr	r1, [r7, #0]
 80106ce:	4618      	mov	r0, r3
 80106d0:	f000 fd47 	bl	8011162 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfEC1ERKS5_>
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	4618      	mov	r0, r3
 80106d8:	3708      	adds	r7, #8
 80106da:	46bd      	mov	sp, r7
 80106dc:	bd80      	pop	{r7, pc}

080106de <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 80106de:	b5b0      	push	{r4, r5, r7, lr}
 80106e0:	b084      	sub	sp, #16
 80106e2:	af00      	add	r7, sp, #0
 80106e4:	6078      	str	r0, [r7, #4]
 80106e6:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	689c      	ldr	r4, [r3, #8]
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	6839      	ldr	r1, [r7, #0]
 80106f2:	4618      	mov	r0, r3
 80106f4:	f7f7 fe81 	bl	80083fa <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 80106f8:	4605      	mov	r5, r0
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	685b      	ldr	r3, [r3, #4]
 80106fe:	6839      	ldr	r1, [r7, #0]
 8010700:	4618      	mov	r0, r3
 8010702:	f000 fd44 	bl	801118e <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffE5coeffEi>
 8010706:	eef0 7a40 	vmov.f32	s15, s0
 801070a:	edc7 7a03 	vstr	s15, [r7, #12]
 801070e:	f107 030c 	add.w	r3, r7, #12
 8010712:	461a      	mov	r2, r3
 8010714:	4629      	mov	r1, r5
 8010716:	4620      	mov	r0, r4
 8010718:	f7f7 fe28 	bl	800836c <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 801071c:	bf00      	nop
 801071e:	3710      	adds	r7, #16
 8010720:	46bd      	mov	sp, r7
 8010722:	bdb0      	pop	{r4, r5, r7, pc}

08010724 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8010724:	b580      	push	{r7, lr}
 8010726:	b082      	sub	sp, #8
 8010728:	af00      	add	r7, sp, #0
 801072a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 801072c:	2101      	movs	r1, #1
 801072e:	6878      	ldr	r0, [r7, #4]
 8010730:	f7ff ffd5 	bl	80106de <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8010734:	6878      	ldr	r0, [r7, #4]
 8010736:	f000 fd63 	bl	8011200 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSG_>
  }
 801073a:	bf00      	nop
 801073c:	3708      	adds	r7, #8
 801073e:	46bd      	mov	sp, r7
 8010740:	bd80      	pop	{r7, pc}

08010742 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSG_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8010742:	b580      	push	{r7, lr}
 8010744:	b082      	sub	sp, #8
 8010746:	af00      	add	r7, sp, #0
 8010748:	6078      	str	r0, [r7, #4]
 801074a:	6039      	str	r1, [r7, #0]
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	6839      	ldr	r1, [r7, #0]
 8010750:	4618      	mov	r0, r3
 8010752:	f000 fd64 	bl	801121e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffEC1ERKSG_>
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	4618      	mov	r0, r3
 801075a:	3708      	adds	r7, #8
 801075c:	46bd      	mov	sp, r7
 801075e:	bd80      	pop	{r7, pc}

08010760 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8010760:	b480      	push	{r7}
 8010762:	b083      	sub	sp, #12
 8010764:	af00      	add	r7, sp, #0
 8010766:	6078      	str	r0, [r7, #4]
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	4618      	mov	r0, r3
 801076c:	370c      	adds	r7, #12
 801076e:	46bd      	mov	sp, r7
 8010770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010774:	4770      	bx	lr
	...

08010778 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8010778:	b580      	push	{r7, lr}
 801077a:	b086      	sub	sp, #24
 801077c:	af00      	add	r7, sp, #0
 801077e:	60f8      	str	r0, [r7, #12]
 8010780:	60b9      	str	r1, [r7, #8]
 8010782:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8010784:	68b8      	ldr	r0, [r7, #8]
 8010786:	f7f5 faa4 	bl	8005cd2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 801078a:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 801078c:	68b8      	ldr	r0, [r7, #8]
 801078e:	f7f5 faad 	bl	8005cec <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8010792:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	4618      	mov	r0, r3
 8010798:	f7f5 fa39 	bl	8005c0e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 801079c:	4602      	mov	r2, r0
 801079e:	697b      	ldr	r3, [r7, #20]
 80107a0:	4293      	cmp	r3, r2
 80107a2:	d107      	bne.n	80107b4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	4618      	mov	r0, r3
 80107a8:	f7f5 fa3c 	bl	8005c24 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 80107ac:	4602      	mov	r2, r0
 80107ae:	693b      	ldr	r3, [r7, #16]
 80107b0:	4293      	cmp	r3, r2
 80107b2:	d001      	beq.n	80107b8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 80107b4:	2301      	movs	r3, #1
 80107b6:	e000      	b.n	80107ba <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 80107b8:	2300      	movs	r3, #0
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d005      	beq.n	80107ca <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	693a      	ldr	r2, [r7, #16]
 80107c2:	6979      	ldr	r1, [r7, #20]
 80107c4:	4618      	mov	r0, r3
 80107c6:	f7fc fd73 	bl	800d2b0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	4618      	mov	r0, r3
 80107ce:	f7f5 fa1e 	bl	8005c0e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 80107d2:	4602      	mov	r2, r0
 80107d4:	697b      	ldr	r3, [r7, #20]
 80107d6:	4293      	cmp	r3, r2
 80107d8:	d107      	bne.n	80107ea <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	4618      	mov	r0, r3
 80107de:	f7f5 fa21 	bl	8005c24 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 80107e2:	4602      	mov	r2, r0
 80107e4:	693b      	ldr	r3, [r7, #16]
 80107e6:	4293      	cmp	r3, r2
 80107e8:	d006      	beq.n	80107f8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 80107ea:	4b05      	ldr	r3, [pc, #20]	; (8010800 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 80107ec:	4a05      	ldr	r2, [pc, #20]	; (8010804 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 80107ee:	f240 21fd 	movw	r1, #765	; 0x2fd
 80107f2:	4805      	ldr	r0, [pc, #20]	; (8010808 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 80107f4:	f00d f932 	bl	801da5c <__assert_func>
}
 80107f8:	bf00      	nop
 80107fa:	3718      	adds	r7, #24
 80107fc:	46bd      	mov	sp, r7
 80107fe:	bd80      	pop	{r7, pc}
 8010800:	08021f3c 	.word	0x08021f3c
 8010804:	08027a70 	.word	0x08027a70
 8010808:	08022050 	.word	0x08022050

0801080c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_INS3_IfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EEC1ERS5_RKSJ_RKSL_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 801080c:	b480      	push	{r7}
 801080e:	b085      	sub	sp, #20
 8010810:	af00      	add	r7, sp, #0
 8010812:	60f8      	str	r0, [r7, #12]
 8010814:	60b9      	str	r1, [r7, #8]
 8010816:	607a      	str	r2, [r7, #4]
 8010818:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	68ba      	ldr	r2, [r7, #8]
 801081e:	601a      	str	r2, [r3, #0]
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	687a      	ldr	r2, [r7, #4]
 8010824:	605a      	str	r2, [r3, #4]
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	683a      	ldr	r2, [r7, #0]
 801082a:	609a      	str	r2, [r3, #8]
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	69ba      	ldr	r2, [r7, #24]
 8010830:	60da      	str	r2, [r3, #12]
  }
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	4618      	mov	r0, r3
 8010836:	3714      	adds	r7, #20
 8010838:	46bd      	mov	sp, r7
 801083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801083e:	4770      	bx	lr

08010840 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSN_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8010840:	b580      	push	{r7, lr}
 8010842:	b082      	sub	sp, #8
 8010844:	af00      	add	r7, sp, #0
 8010846:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8010848:	6878      	ldr	r0, [r7, #4]
 801084a:	f000 fcfa 	bl	8011242 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi1EE3runERSN_>
  }
 801084e:	bf00      	nop
 8010850:	3708      	adds	r7, #8
 8010852:	46bd      	mov	sp, r7
 8010854:	bd80      	pop	{r7, pc}

08010856 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 8010856:	b480      	push	{r7}
 8010858:	b083      	sub	sp, #12
 801085a:	af00      	add	r7, sp, #0
 801085c:	6078      	str	r0, [r7, #4]
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	4618      	mov	r0, r3
 8010862:	370c      	adds	r7, #12
 8010864:	46bd      	mov	sp, r7
 8010866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801086a:	4770      	bx	lr

0801086c <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 801086c:	b480      	push	{r7}
 801086e:	b083      	sub	sp, #12
 8010870:	af00      	add	r7, sp, #0
 8010872:	6078      	str	r0, [r7, #4]
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	4618      	mov	r0, r3
 8010878:	370c      	adds	r7, #12
 801087a:	46bd      	mov	sp, r7
 801087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010880:	4770      	bx	lr

08010882 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8010882:	b580      	push	{r7, lr}
 8010884:	b082      	sub	sp, #8
 8010886:	af00      	add	r7, sp, #0
 8010888:	6078      	str	r0, [r7, #4]
 801088a:	6039      	str	r1, [r7, #0]
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	6839      	ldr	r1, [r7, #0]
 8010890:	4618      	mov	r0, r3
 8010892:	f000 fce5 	bl	8011260 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERKS6_>
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	4618      	mov	r0, r3
 801089a:	3708      	adds	r7, #8
 801089c:	46bd      	mov	sp, r7
 801089e:	bd80      	pop	{r7, pc}

080108a0 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_EC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 80108a0:	b590      	push	{r4, r7, lr}
 80108a2:	b083      	sub	sp, #12
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	6078      	str	r0, [r7, #4]
 80108a8:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 80108aa:	6878      	ldr	r0, [r7, #4]
 80108ac:	f000 fd03 	bl	80112b6 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 80108b0:	683b      	ldr	r3, [r7, #0]
 80108b2:	4618      	mov	r0, r3
 80108b4:	f000 f81e 	bl	80108f4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4dataEv>
 80108b8:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	601a      	str	r2, [r3, #0]
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	1d1c      	adds	r4, r3, #4
 80108c2:	683b      	ldr	r3, [r7, #0]
 80108c4:	4618      	mov	r0, r3
 80108c6:	f000 fcda 	bl	801127e <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE11innerStrideEv>
 80108ca:	4603      	mov	r3, r0
 80108cc:	4619      	mov	r1, r3
 80108ce:	4620      	mov	r0, r4
 80108d0:	f7f5 ff52 	bl	8006778 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	1d5c      	adds	r4, r3, #5
 80108d8:	683b      	ldr	r3, [r7, #0]
 80108da:	4618      	mov	r0, r3
 80108dc:	f000 fcdd 	bl	801129a <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE11outerStrideEv>
 80108e0:	4603      	mov	r3, r0
 80108e2:	4619      	mov	r1, r3
 80108e4:	4620      	mov	r0, r4
 80108e6:	f7f5 ff47 	bl	8006778 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
  }
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	4618      	mov	r0, r3
 80108ee:	370c      	adds	r7, #12
 80108f0:	46bd      	mov	sp, r7
 80108f2:	bd90      	pop	{r4, r7, pc}

080108f4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 80108f4:	b480      	push	{r7}
 80108f6:	b083      	sub	sp, #12
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	6078      	str	r0, [r7, #4]
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	4618      	mov	r0, r3
 8010902:	370c      	adds	r7, #12
 8010904:	46bd      	mov	sp, r7
 8010906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801090a:	4770      	bx	lr

0801090c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi1EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 801090c:	b580      	push	{r7, lr}
 801090e:	b082      	sub	sp, #8
 8010910:	af00      	add	r7, sp, #0
 8010912:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8010914:	2100      	movs	r1, #0
 8010916:	6878      	ldr	r0, [r7, #4]
 8010918:	f000 fcd8 	bl	80112cc <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 801091c:	6878      	ldr	r0, [r7, #4]
 801091e:	f000 fcf3 	bl	8011308 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi1EE3runERS9_>
  }
 8010922:	bf00      	nop
 8010924:	3708      	adds	r7, #8
 8010926:	46bd      	mov	sp, r7
 8010928:	bd80      	pop	{r7, pc}

0801092a <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
 801092a:	b580      	push	{r7, lr}
 801092c:	b082      	sub	sp, #8
 801092e:	af00      	add	r7, sp, #0
 8010930:	6078      	str	r0, [r7, #4]
 8010932:	6878      	ldr	r0, [r7, #4]
 8010934:	f000 fcf2 	bl	801131c <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	4618      	mov	r0, r3
 801093c:	3708      	adds	r7, #8
 801093e:	46bd      	mov	sp, r7
 8010940:	bd80      	pop	{r7, pc}

08010942 <_ZN5Eigen13TransposeImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 8010942:	b580      	push	{r7, lr}
 8010944:	b082      	sub	sp, #8
 8010946:	af00      	add	r7, sp, #0
 8010948:	6078      	str	r0, [r7, #4]
 801094a:	6878      	ldr	r0, [r7, #4]
 801094c:	f7ff ffed 	bl	801092a <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	4618      	mov	r0, r3
 8010954:	3708      	adds	r7, #8
 8010956:	46bd      	mov	sp, r7
 8010958:	bd80      	pop	{r7, pc}

0801095a <_ZN5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS3_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 801095a:	b580      	push	{r7, lr}
 801095c:	b082      	sub	sp, #8
 801095e:	af00      	add	r7, sp, #0
 8010960:	6078      	str	r0, [r7, #4]
 8010962:	6039      	str	r1, [r7, #0]
 8010964:	6878      	ldr	r0, [r7, #4]
 8010966:	f7ff ffec 	bl	8010942 <_ZN5Eigen13TransposeImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEEC1Ev>
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	683a      	ldr	r2, [r7, #0]
 801096e:	601a      	str	r2, [r3, #0]
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	4618      	mov	r0, r3
 8010974:	3708      	adds	r7, #8
 8010976:	46bd      	mov	sp, r7
 8010978:	bd80      	pop	{r7, pc}

0801097a <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 801097a:	b480      	push	{r7}
 801097c:	b083      	sub	sp, #12
 801097e:	af00      	add	r7, sp, #0
 8010980:	6078      	str	r0, [r7, #4]
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	4618      	mov	r0, r3
 8010986:	370c      	adds	r7, #12
 8010988:	46bd      	mov	sp, r7
 801098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801098e:	4770      	bx	lr

08010990 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
 8010990:	b580      	push	{r7, lr}
 8010992:	b082      	sub	sp, #8
 8010994:	af00      	add	r7, sp, #0
 8010996:	6078      	str	r0, [r7, #4]
 8010998:	6878      	ldr	r0, [r7, #4]
 801099a:	f000 fcca 	bl	8011332 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	4618      	mov	r0, r3
 80109a2:	3708      	adds	r7, #8
 80109a4:	46bd      	mov	sp, r7
 80109a6:	bd80      	pop	{r7, pc}

080109a8 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b082      	sub	sp, #8
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
 80109b0:	6878      	ldr	r0, [r7, #4]
 80109b2:	f7ff ffed 	bl	8010990 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	4618      	mov	r0, r3
 80109ba:	3708      	adds	r7, #8
 80109bc:	46bd      	mov	sp, r7
 80109be:	bd80      	pop	{r7, pc}

080109c0 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 80109c0:	b580      	push	{r7, lr}
 80109c2:	b082      	sub	sp, #8
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	6078      	str	r0, [r7, #4]
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	4618      	mov	r0, r3
 80109ce:	f7f4 fae5 	bl	8004f9c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80109d2:	4603      	mov	r3, r0
 80109d4:	4618      	mov	r0, r3
 80109d6:	3708      	adds	r7, #8
 80109d8:	46bd      	mov	sp, r7
 80109da:	bd80      	pop	{r7, pc}

080109dc <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 80109dc:	b580      	push	{r7, lr}
 80109de:	b082      	sub	sp, #8
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	6078      	str	r0, [r7, #4]
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	4618      	mov	r0, r3
 80109ea:	f7f4 fae2 	bl	8004fb2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 80109ee:	4603      	mov	r3, r0
 80109f0:	4618      	mov	r0, r3
 80109f2:	3708      	adds	r7, #8
 80109f4:	46bd      	mov	sp, r7
 80109f6:	bd80      	pop	{r7, pc}

080109f8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 80109f8:	b590      	push	{r4, r7, lr}
 80109fa:	b085      	sub	sp, #20
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	60f8      	str	r0, [r7, #12]
 8010a00:	60b9      	str	r1, [r7, #8]
 8010a02:	607a      	str	r2, [r7, #4]
 8010a04:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8010a06:	68f8      	ldr	r0, [r7, #12]
 8010a08:	f7ff ffce 	bl	80109a8 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEEC1Ev>
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	68ba      	ldr	r2, [r7, #8]
 8010a10:	6812      	ldr	r2, [r2, #0]
 8010a12:	601a      	str	r2, [r3, #0]
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	687a      	ldr	r2, [r7, #4]
 8010a18:	605a      	str	r2, [r3, #4]
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	3308      	adds	r3, #8
 8010a1e:	6839      	ldr	r1, [r7, #0]
 8010a20:	4618      	mov	r0, r3
 8010a22:	f7f4 fc2f 	bl	8005284 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8010a26:	68b8      	ldr	r0, [r7, #8]
 8010a28:	f7ff ffca 	bl	80109c0 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8010a2c:	4604      	mov	r4, r0
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	4618      	mov	r0, r3
 8010a32:	f7f4 f9a2 	bl	8004d7a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8010a36:	4603      	mov	r3, r0
 8010a38:	429c      	cmp	r4, r3
 8010a3a:	d10a      	bne.n	8010a52 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x5a>
 8010a3c:	68b8      	ldr	r0, [r7, #8]
 8010a3e:	f7ff ffcd 	bl	80109dc <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8010a42:	4604      	mov	r4, r0
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	4618      	mov	r0, r3
 8010a48:	f7f4 f98c 	bl	8004d64 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8010a4c:	4603      	mov	r3, r0
 8010a4e:	429c      	cmp	r4, r3
 8010a50:	d005      	beq.n	8010a5e <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x66>
 8010a52:	4b05      	ldr	r3, [pc, #20]	; (8010a68 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x70>)
 8010a54:	4a05      	ldr	r2, [pc, #20]	; (8010a6c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x74>)
 8010a56:	2174      	movs	r1, #116	; 0x74
 8010a58:	4805      	ldr	r0, [pc, #20]	; (8010a70 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x78>)
 8010a5a:	f00c ffff 	bl	801da5c <__assert_func>
    }
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	4618      	mov	r0, r3
 8010a62:	3714      	adds	r7, #20
 8010a64:	46bd      	mov	sp, r7
 8010a66:	bd90      	pop	{r4, r7, pc}
 8010a68:	0801f8c4 	.word	0x0801f8c4
 8010a6c:	08027c34 	.word	0x08027c34
 8010a70:	0801fb28 	.word	0x0801fb28

08010a74 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8010a74:	b580      	push	{r7, lr}
 8010a76:	b082      	sub	sp, #8
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	6078      	str	r0, [r7, #4]
 8010a7c:	6878      	ldr	r0, [r7, #4]
 8010a7e:	f000 f809 	bl	8010a94 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 8010a82:	4603      	mov	r3, r0
 8010a84:	4618      	mov	r0, r3
 8010a86:	f000 fc5f 	bl	8011348 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8010a8a:	4603      	mov	r3, r0
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	3708      	adds	r7, #8
 8010a90:	46bd      	mov	sp, r7
 8010a92:	bd80      	pop	{r7, pc}

08010a94 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8010a94:	b480      	push	{r7}
 8010a96:	b083      	sub	sp, #12
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	6078      	str	r0, [r7, #4]
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	370c      	adds	r7, #12
 8010aa2:	46bd      	mov	sp, r7
 8010aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa8:	4770      	bx	lr

08010aaa <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8010aaa:	b580      	push	{r7, lr}
 8010aac:	b082      	sub	sp, #8
 8010aae:	af00      	add	r7, sp, #0
 8010ab0:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	f7ff ff83 	bl	80109c0 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8010aba:	4603      	mov	r3, r0
    }
 8010abc:	4618      	mov	r0, r3
 8010abe:	3708      	adds	r7, #8
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	bd80      	pop	{r7, pc}

08010ac4 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
struct evaluator<const T>
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b082      	sub	sp, #8
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	4618      	mov	r0, r3
 8010ad0:	f7fe f968 	bl	800eda4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	3708      	adds	r7, #8
 8010ada:	46bd      	mov	sp, r7
 8010adc:	bd80      	pop	{r7, pc}

08010ade <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 8010ade:	b580      	push	{r7, lr}
 8010ae0:	b082      	sub	sp, #8
 8010ae2:	af00      	add	r7, sp, #0
 8010ae4:	6078      	str	r0, [r7, #4]
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	4618      	mov	r0, r3
 8010aea:	f7ff ffeb 	bl	8010ac4 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 8010aee:	6878      	ldr	r0, [r7, #4]
 8010af0:	f000 fc51 	bl	8011396 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	4618      	mov	r0, r3
 8010af8:	3708      	adds	r7, #8
 8010afa:	46bd      	mov	sp, r7
 8010afc:	bd80      	pop	{r7, pc}

08010afe <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 8010afe:	b580      	push	{r7, lr}
 8010b00:	b082      	sub	sp, #8
 8010b02:	af00      	add	r7, sp, #0
 8010b04:	6078      	str	r0, [r7, #4]
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	4618      	mov	r0, r3
 8010b0a:	f7ff ffe8 	bl	8010ade <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfED1Ev>
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	4618      	mov	r0, r3
 8010b12:	3708      	adds	r7, #8
 8010b14:	46bd      	mov	sp, r7
 8010b16:	bd80      	pop	{r7, pc}

08010b18 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
struct evaluator<const T>
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b082      	sub	sp, #8
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	6078      	str	r0, [r7, #4]
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	4618      	mov	r0, r3
 8010b24:	f7ff ffeb 	bl	8010afe <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	3708      	adds	r7, #8
 8010b2e:	46bd      	mov	sp, r7
 8010b30:	bd80      	pop	{r7, pc}

08010b32 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4DataD1Ev>:
  struct Data
 8010b32:	b580      	push	{r7, lr}
 8010b34:	b082      	sub	sp, #8
 8010b36:	af00      	add	r7, sp, #0
 8010b38:	6078      	str	r0, [r7, #4]
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	3308      	adds	r3, #8
 8010b3e:	4618      	mov	r0, r3
 8010b40:	f7f8 f824 	bl	8008b8c <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	3304      	adds	r3, #4
 8010b48:	4618      	mov	r0, r3
 8010b4a:	f7ff ffe5 	bl	8010b18 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	4618      	mov	r0, r3
 8010b52:	3708      	adds	r7, #8
 8010b54:	46bd      	mov	sp, r7
 8010b56:	bd80      	pop	{r7, pc}

08010b58 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8010b58:	b580      	push	{r7, lr}
 8010b5a:	b082      	sub	sp, #8
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	6078      	str	r0, [r7, #4]
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	4618      	mov	r0, r3
 8010b64:	f7ff ffe5 	bl	8010b32 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4DataD1Ev>
 8010b68:	6878      	ldr	r0, [r7, #4]
 8010b6a:	f000 fc09 	bl	8011380 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	4618      	mov	r0, r3
 8010b72:	3708      	adds	r7, #8
 8010b74:	46bd      	mov	sp, r7
 8010b76:	bd80      	pop	{r7, pc}

08010b78 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b082      	sub	sp, #8
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	4618      	mov	r0, r3
 8010b84:	f7ff ffe8 	bl	8010b58 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffED1Ev>
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	3708      	adds	r7, #8
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	bd80      	pop	{r7, pc}

08010b92 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 8010b92:	b580      	push	{r7, lr}
 8010b94:	b082      	sub	sp, #8
 8010b96:	af00      	add	r7, sp, #0
 8010b98:	6078      	str	r0, [r7, #4]
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	f7ff ffeb 	bl	8010b78 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	3708      	adds	r7, #8
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	bd80      	pop	{r7, pc}

08010bac <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 8010bac:	b580      	push	{r7, lr}
 8010bae:	ed2d 8b02 	vpush	{d8}
 8010bb2:	b086      	sub	sp, #24
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	6078      	str	r0, [r7, #4]
 8010bb8:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 8010bba:	6878      	ldr	r0, [r7, #4]
 8010bbc:	f7ff fa4b 	bl	8010056 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE4rowsEv>
 8010bc0:	4603      	mov	r3, r0
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	dd05      	ble.n	8010bd2 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 8010bc6:	6878      	ldr	r0, [r7, #4]
 8010bc8:	f7ff ff54 	bl	8010a74 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE4colsEv>
 8010bcc:	4603      	mov	r3, r0
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	dc06      	bgt.n	8010be0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 8010bd2:	4b16      	ldr	r3, [pc, #88]	; (8010c2c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 8010bd4:	4a16      	ldr	r2, [pc, #88]	; (8010c30 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 8010bd6:	f240 119b 	movw	r1, #411	; 0x19b
 8010bda:	4816      	ldr	r0, [pc, #88]	; (8010c34 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 8010bdc:	f00c ff3e 	bl	801da5c <__assert_func>
 8010be0:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8010be2:	6878      	ldr	r0, [r7, #4]
 8010be4:	f7ff ff56 	bl	8010a94 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 8010be8:	4602      	mov	r2, r0
 8010bea:	f107 030c 	add.w	r3, r7, #12
 8010bee:	4611      	mov	r1, r2
 8010bf0:	4618      	mov	r0, r3
 8010bf2:	f000 fbb6 	bl	8011362 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKSD_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8010bf6:	6878      	ldr	r0, [r7, #4]
 8010bf8:	f7ff ff4c 	bl	8010a94 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 8010bfc:	4602      	mov	r2, r0
 8010bfe:	f107 030c 	add.w	r3, r7, #12
 8010c02:	6839      	ldr	r1, [r7, #0]
 8010c04:	4618      	mov	r0, r3
 8010c06:	f000 fbd1 	bl	80113ac <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi2EE3runISG_EEfRKSH_RKS3_RKT_>
 8010c0a:	eeb0 8a40 	vmov.f32	s16, s0
 8010c0e:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8010c10:	f107 030c 	add.w	r3, r7, #12
 8010c14:	4618      	mov	r0, r3
 8010c16:	f7ff ffbc 	bl	8010b92 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8010c1a:	eef0 7a48 	vmov.f32	s15, s16
}
 8010c1e:	eeb0 0a67 	vmov.f32	s0, s15
 8010c22:	3718      	adds	r7, #24
 8010c24:	46bd      	mov	sp, r7
 8010c26:	ecbd 8b02 	vpop	{d8}
 8010c2a:	bd80      	pop	{r7, pc}
 8010c2c:	08024944 	.word	0x08024944
 8010c30:	08027dfc 	.word	0x08027dfc
 8010c34:	08024b50 	.word	0x08024b50

08010c38 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELb0EE3runERKS3_RKS7_>:
    static void run(const Derived&, const OtherDerived&)
 8010c38:	b480      	push	{r7}
 8010c3a:	b083      	sub	sp, #12
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
 8010c40:	6039      	str	r1, [r7, #0]
    }
 8010c42:	bf00      	nop
 8010c44:	370c      	adds	r7, #12
 8010c46:	46bd      	mov	sp, r7
 8010c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c4c:	4770      	bx	lr

08010c4e <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1ERKS6_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8010c4e:	b580      	push	{r7, lr}
 8010c50:	b082      	sub	sp, #8
 8010c52:	af00      	add	r7, sp, #0
 8010c54:	6078      	str	r0, [r7, #4]
 8010c56:	6039      	str	r1, [r7, #0]
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	6839      	ldr	r1, [r7, #0]
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	f000 fbb6 	bl	80113ce <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffEC1ERKS6_>
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	4618      	mov	r0, r3
 8010c66:	3708      	adds	r7, #8
 8010c68:	46bd      	mov	sp, r7
 8010c6a:	bd80      	pop	{r7, pc}

08010c6c <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8010c6c:	b480      	push	{r7}
 8010c6e:	b083      	sub	sp, #12
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	6078      	str	r0, [r7, #4]
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	4618      	mov	r0, r3
 8010c78:	370c      	adds	r7, #12
 8010c7a:	46bd      	mov	sp, r7
 8010c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c80:	4770      	bx	lr

08010c82 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8010c82:	b580      	push	{r7, lr}
 8010c84:	b082      	sub	sp, #8
 8010c86:	af00      	add	r7, sp, #0
 8010c88:	6078      	str	r0, [r7, #4]
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	4618      	mov	r0, r3
 8010c90:	f7f4 f873 	bl	8004d7a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8010c94:	4603      	mov	r3, r0
 8010c96:	4618      	mov	r0, r3
 8010c98:	3708      	adds	r7, #8
 8010c9a:	46bd      	mov	sp, r7
 8010c9c:	bd80      	pop	{r7, pc}

08010c9e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8010c9e:	b580      	push	{r7, lr}
 8010ca0:	b082      	sub	sp, #8
 8010ca2:	af00      	add	r7, sp, #0
 8010ca4:	6078      	str	r0, [r7, #4]
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	685b      	ldr	r3, [r3, #4]
 8010caa:	4618      	mov	r0, r3
 8010cac:	f7f4 f976 	bl	8004f9c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8010cb0:	4603      	mov	r3, r0
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	3708      	adds	r7, #8
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	bd80      	pop	{r7, pc}
	...

08010cbc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const Functor &/*func*/)
 8010cbc:	b590      	push	{r4, r7, lr}
 8010cbe:	b085      	sub	sp, #20
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	60f8      	str	r0, [r7, #12]
 8010cc4:	60b9      	str	r1, [r7, #8]
 8010cc6:	607a      	str	r2, [r7, #4]
  eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	4618      	mov	r0, r3
 8010ccc:	f7f3 ffaf 	bl	8004c2e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8010cd0:	4604      	mov	r4, r0
 8010cd2:	68b8      	ldr	r0, [r7, #8]
 8010cd4:	f7ff ffd5 	bl	8010c82 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE4rowsEv>
 8010cd8:	4603      	mov	r3, r0
 8010cda:	429c      	cmp	r4, r3
 8010cdc:	d10a      	bne.n	8010cf4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x38>
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	f7f3 ff99 	bl	8004c18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8010ce6:	4604      	mov	r4, r0
 8010ce8:	68b8      	ldr	r0, [r7, #8]
 8010cea:	f7ff ffd8 	bl	8010c9e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE4colsEv>
 8010cee:	4603      	mov	r3, r0
 8010cf0:	429c      	cmp	r4, r3
 8010cf2:	d006      	beq.n	8010d02 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x46>
 8010cf4:	4b05      	ldr	r3, [pc, #20]	; (8010d0c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x50>)
 8010cf6:	4a06      	ldr	r2, [pc, #24]	; (8010d10 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x54>)
 8010cf8:	f240 21f2 	movw	r1, #754	; 0x2f2
 8010cfc:	4805      	ldr	r0, [pc, #20]	; (8010d14 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x58>)
 8010cfe:	f00c fead 	bl	801da5c <__assert_func>
}
 8010d02:	bf00      	nop
 8010d04:	3714      	adds	r7, #20
 8010d06:	46bd      	mov	sp, r7
 8010d08:	bd90      	pop	{r4, r7, pc}
 8010d0a:	bf00      	nop
 8010d0c:	08022658 	.word	0x08022658
 8010d10:	08027f80 	.word	0x08027f80
 8010d14:	08022050 	.word	0x08022050

08010d18 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEC1ERS5_RKSA_RKSC_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8010d18:	b480      	push	{r7}
 8010d1a:	b085      	sub	sp, #20
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	60f8      	str	r0, [r7, #12]
 8010d20:	60b9      	str	r1, [r7, #8]
 8010d22:	607a      	str	r2, [r7, #4]
 8010d24:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	68ba      	ldr	r2, [r7, #8]
 8010d2a:	601a      	str	r2, [r3, #0]
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	687a      	ldr	r2, [r7, #4]
 8010d30:	605a      	str	r2, [r3, #4]
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	683a      	ldr	r2, [r7, #0]
 8010d36:	609a      	str	r2, [r3, #8]
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	69ba      	ldr	r2, [r7, #24]
 8010d3c:	60da      	str	r2, [r3, #12]
  }
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	4618      	mov	r0, r3
 8010d42:	3714      	adds	r7, #20
 8010d44:	46bd      	mov	sp, r7
 8010d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d4a:	4770      	bx	lr

08010d4c <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi0ELi2EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8010d4c:	b580      	push	{r7, lr}
 8010d4e:	b082      	sub	sp, #8
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8010d54:	6878      	ldr	r0, [r7, #4]
 8010d56:	f000 fb6f 	bl	8011438 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi0ELi9EE3runERSE_>
  }
 8010d5a:	bf00      	nop
 8010d5c:	3708      	adds	r7, #8
 8010d5e:	46bd      	mov	sp, r7
 8010d60:	bd80      	pop	{r7, pc}

08010d62 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li3ELi1ELb1EEE>:
  explicit block_evaluator(const XprType& block)
 8010d62:	b580      	push	{r7, lr}
 8010d64:	b082      	sub	sp, #8
 8010d66:	af00      	add	r7, sp, #0
 8010d68:	6078      	str	r0, [r7, #4]
 8010d6a:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	6839      	ldr	r1, [r7, #0]
 8010d70:	4618      	mov	r0, r3
 8010d72:	f000 fb71 	bl	8011458 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8010d76:	683b      	ldr	r3, [r7, #0]
 8010d78:	4618      	mov	r0, r3
 8010d7a:	f000 fb97 	bl	80114ac <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4dataEv>
 8010d7e:	bf00      	nop
  }
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	4618      	mov	r0, r3
 8010d84:	3708      	adds	r7, #8
 8010d86:	46bd      	mov	sp, r7
 8010d88:	bd80      	pop	{r7, pc}

08010d8a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 8010d8a:	b580      	push	{r7, lr}
 8010d8c:	b082      	sub	sp, #8
 8010d8e:	af00      	add	r7, sp, #0
 8010d90:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 8010d92:	f7f5 fd16 	bl	80067c2 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8010d96:	4603      	mov	r3, r0
  }
 8010d98:	4618      	mov	r0, r3
 8010d9a:	3708      	adds	r7, #8
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	bd80      	pop	{r7, pc}

08010da0 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 8010da0:	b580      	push	{r7, lr}
 8010da2:	b082      	sub	sp, #8
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 8010da8:	f7f5 fd13 	bl	80067d2 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8010dac:	4603      	mov	r3, r0
  }
 8010dae:	4618      	mov	r0, r3
 8010db0:	3708      	adds	r7, #8
 8010db2:	46bd      	mov	sp, r7
 8010db4:	bd80      	pop	{r7, pc}

08010db6 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 8010db6:	b480      	push	{r7}
 8010db8:	b083      	sub	sp, #12
 8010dba:	af00      	add	r7, sp, #0
 8010dbc:	6078      	str	r0, [r7, #4]
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	370c      	adds	r7, #12
 8010dc4:	46bd      	mov	sp, r7
 8010dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dca:	4770      	bx	lr

08010dcc <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8010dcc:	b480      	push	{r7}
 8010dce:	b083      	sub	sp, #12
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	6078      	str	r0, [r7, #4]
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	370c      	adds	r7, #12
 8010dda:	46bd      	mov	sp, r7
 8010ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de0:	4770      	bx	lr

08010de2 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERSH_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8010de2:	b580      	push	{r7, lr}
 8010de4:	b082      	sub	sp, #8
 8010de6:	af00      	add	r7, sp, #0
 8010de8:	6078      	str	r0, [r7, #4]
 8010dea:	6039      	str	r1, [r7, #0]
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	6839      	ldr	r1, [r7, #0]
 8010df0:	4618      	mov	r0, r3
 8010df2:	f000 fb67 	bl	80114c4 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERKSG_>
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	4618      	mov	r0, r3
 8010dfa:	3708      	adds	r7, #8
 8010dfc:	46bd      	mov	sp, r7
 8010dfe:	bd80      	pop	{r7, pc}

08010e00 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEEC1ERKS8_>:
  explicit mapbase_evaluator(const XprType& map)
 8010e00:	b590      	push	{r4, r7, lr}
 8010e02:	b083      	sub	sp, #12
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	6078      	str	r0, [r7, #4]
 8010e08:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8010e0a:	6878      	ldr	r0, [r7, #4]
 8010e0c:	f000 fb85 	bl	801151a <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8010e10:	683b      	ldr	r3, [r7, #0]
 8010e12:	4618      	mov	r0, r3
 8010e14:	f000 f81e 	bl	8010e54 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4dataEv>
 8010e18:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	601a      	str	r2, [r3, #0]
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	1d1c      	adds	r4, r3, #4
 8010e22:	683b      	ldr	r3, [r7, #0]
 8010e24:	4618      	mov	r0, r3
 8010e26:	f000 fb5c 	bl	80114e2 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE11innerStrideEv>
 8010e2a:	4603      	mov	r3, r0
 8010e2c:	4619      	mov	r1, r3
 8010e2e:	4620      	mov	r0, r4
 8010e30:	f7f5 fca2 	bl	8006778 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	1d5c      	adds	r4, r3, #5
 8010e38:	683b      	ldr	r3, [r7, #0]
 8010e3a:	4618      	mov	r0, r3
 8010e3c:	f000 fb5f 	bl	80114fe <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE11outerStrideEv>
 8010e40:	4603      	mov	r3, r0
 8010e42:	4619      	mov	r1, r3
 8010e44:	4620      	mov	r0, r4
 8010e46:	f7f5 fc7d 	bl	8006744 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	370c      	adds	r7, #12
 8010e50:	46bd      	mov	sp, r7
 8010e52:	bd90      	pop	{r4, r7, pc}

08010e54 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4dataEv>:
 8010e54:	b480      	push	{r7}
 8010e56:	b083      	sub	sp, #12
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	6078      	str	r0, [r7, #4]
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	4618      	mov	r0, r3
 8010e62:	370c      	adds	r7, #12
 8010e64:	46bd      	mov	sp, r7
 8010e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e6a:	4770      	bx	lr

08010e6c <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8010e6c:	b480      	push	{r7}
 8010e6e:	b083      	sub	sp, #12
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	6078      	str	r0, [r7, #4]
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	4618      	mov	r0, r3
 8010e78:	370c      	adds	r7, #12
 8010e7a:	46bd      	mov	sp, r7
 8010e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e80:	4770      	bx	lr

08010e82 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8010e82:	b590      	push	{r4, r7, lr}
 8010e84:	b085      	sub	sp, #20
 8010e86:	af00      	add	r7, sp, #0
 8010e88:	60f8      	str	r0, [r7, #12]
 8010e8a:	60b9      	str	r1, [r7, #8]
 8010e8c:	607a      	str	r2, [r7, #4]
      return m_d.data[row + col * m_d.outerStride()];
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	681c      	ldr	r4, [r3, #0]
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	4618      	mov	r0, r3
 8010e96:	f7f5 feef 	bl	8006c78 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>
 8010e9a:	4602      	mov	r2, r0
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	fb03 f202 	mul.w	r2, r3, r2
 8010ea2:	68bb      	ldr	r3, [r7, #8]
 8010ea4:	4413      	add	r3, r2
 8010ea6:	009b      	lsls	r3, r3, #2
 8010ea8:	4423      	add	r3, r4
  }
 8010eaa:	4618      	mov	r0, r3
 8010eac:	3714      	adds	r7, #20
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	bd90      	pop	{r4, r7, pc}

08010eb2 <_ZNK5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffIiEEfT_SB_>:
  CoeffReturnType coeff(IndexType row, IndexType col) const
 8010eb2:	b580      	push	{r7, lr}
 8010eb4:	b084      	sub	sp, #16
 8010eb6:	af00      	add	r7, sp, #0
 8010eb8:	60f8      	str	r0, [r7, #12]
 8010eba:	60b9      	str	r1, [r7, #8]
 8010ebc:	607a      	str	r2, [r7, #4]
    return m_wrapper(m_functor, row, col);
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	1d18      	adds	r0, r3, #4
 8010ec2:	68f9      	ldr	r1, [r7, #12]
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	68ba      	ldr	r2, [r7, #8]
 8010ec8:	f000 fb32 	bl	8011530 <_ZNK5Eigen8internal15nullary_wrapperIfNS0_18scalar_constant_opIfEELb1ELb0ELb0EEclIiEEfRKS3_T_S8_>
 8010ecc:	eef0 7a40 	vmov.f32	s15, s0
  }
 8010ed0:	eeb0 0a67 	vmov.f32	s0, s15
 8010ed4:	3710      	adds	r7, #16
 8010ed6:	46bd      	mov	sp, r7
 8010ed8:	bd80      	pop	{r7, pc}

08010eda <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8010eda:	b580      	push	{r7, lr}
 8010edc:	b082      	sub	sp, #8
 8010ede:	af00      	add	r7, sp, #0
 8010ee0:	6078      	str	r0, [r7, #4]
 8010ee2:	6039      	str	r1, [r7, #0]
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	6839      	ldr	r1, [r7, #0]
 8010ee8:	4618      	mov	r0, r3
 8010eea:	f000 fb32 	bl	8011552 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi3ELb0EEE>
  }
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	3708      	adds	r7, #8
 8010ef4:	46bd      	mov	sp, r7
 8010ef6:	bd80      	pop	{r7, pc}

08010ef8 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b082      	sub	sp, #8
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	689b      	ldr	r3, [r3, #8]
 8010f04:	4618      	mov	r0, r3
 8010f06:	f7fc fcca 	bl	800d89e <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>
 8010f0a:	4603      	mov	r3, r0
    }
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	3708      	adds	r7, #8
 8010f10:	46bd      	mov	sp, r7
 8010f12:	bd80      	pop	{r7, pc}

08010f14 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8010f14:	b580      	push	{r7, lr}
 8010f16:	b082      	sub	sp, #8
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	689b      	ldr	r3, [r3, #8]
 8010f20:	4618      	mov	r0, r3
 8010f22:	f7f6 f82d 	bl	8006f80 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 8010f26:	4603      	mov	r3, r0
    }
 8010f28:	4618      	mov	r0, r3
 8010f2a:	3708      	adds	r7, #8
 8010f2c:	46bd      	mov	sp, r7
 8010f2e:	bd80      	pop	{r7, pc}

08010f30 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8010f30:	b480      	push	{r7}
 8010f32:	b083      	sub	sp, #12
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	370c      	adds	r7, #12
 8010f3e:	46bd      	mov	sp, r7
 8010f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f44:	4770      	bx	lr

08010f46 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8010f46:	b480      	push	{r7}
 8010f48:	b083      	sub	sp, #12
 8010f4a:	af00      	add	r7, sp, #0
 8010f4c:	6078      	str	r0, [r7, #4]
    }
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	4618      	mov	r0, r3
 8010f52:	370c      	adds	r7, #12
 8010f54:	46bd      	mov	sp, r7
 8010f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f5a:	4770      	bx	lr

08010f5c <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8010f5c:	b580      	push	{r7, lr}
 8010f5e:	b082      	sub	sp, #8
 8010f60:	af00      	add	r7, sp, #0
 8010f62:	6078      	str	r0, [r7, #4]
 8010f64:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	4618      	mov	r0, r3
 8010f6a:	f7f3 fe60 	bl	8004c2e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8010f6e:	4603      	mov	r3, r0
 8010f70:	2b01      	cmp	r3, #1
 8010f72:	dd08      	ble.n	8010f86 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_+0x2a>
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	4618      	mov	r0, r3
 8010f78:	f7f3 fe4e 	bl	8004c18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8010f7c:	4603      	mov	r3, r0
 8010f7e:	2b01      	cmp	r3, #1
 8010f80:	dd01      	ble.n	8010f86 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_+0x2a>
 8010f82:	2301      	movs	r3, #1
 8010f84:	e000      	b.n	8010f88 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_+0x2c>
 8010f86:	2300      	movs	r3, #0
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d003      	beq.n	8010f94 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 8010f8c:	6839      	ldr	r1, [r7, #0]
 8010f8e:	6878      	ldr	r0, [r7, #4]
 8010f90:	f000 faf3 	bl	801157a <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEELb0EE3runERKS3_RKS5_>
}
 8010f94:	bf00      	nop
 8010f96:	3708      	adds	r7, #8
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	bd80      	pop	{r7, pc}

08010f9c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	b082      	sub	sp, #8
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	6078      	str	r0, [r7, #4]
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	330c      	adds	r3, #12
 8010fa8:	4618      	mov	r0, r3
 8010faa:	f7f6 f8c8 	bl	800713e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	3308      	adds	r3, #8
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	f7f6 f8c3 	bl	800713e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8010fb8:	6878      	ldr	r0, [r7, #4]
 8010fba:	f000 faf8 	bl	80115ae <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEED1Ev>
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	3708      	adds	r7, #8
 8010fc4:	46bd      	mov	sp, r7
 8010fc6:	bd80      	pop	{r7, pc}

08010fc8 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	b082      	sub	sp, #8
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	6078      	str	r0, [r7, #4]
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	f7ff ffe2 	bl	8010f9c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffED1Ev>
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	4618      	mov	r0, r3
 8010fdc:	3708      	adds	r7, #8
 8010fde:	46bd      	mov	sp, r7
 8010fe0:	bd80      	pop	{r7, pc}

08010fe2 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8010fe2:	b580      	push	{r7, lr}
 8010fe4:	b090      	sub	sp, #64	; 0x40
 8010fe6:	af02      	add	r7, sp, #8
 8010fe8:	60f8      	str	r0, [r7, #12]
 8010fea:	60b9      	str	r1, [r7, #8]
 8010fec:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8010fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010ff2:	68b9      	ldr	r1, [r7, #8]
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	f000 facb 	bl	8011590 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEC1ERKS5_>
  resize_if_allowed(dst, src, func);
 8010ffa:	687a      	ldr	r2, [r7, #4]
 8010ffc:	68b9      	ldr	r1, [r7, #8]
 8010ffe:	68f8      	ldr	r0, [r7, #12]
 8011000:	f000 fafc 	bl	80115fc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8011004:	f107 0320 	add.w	r3, r7, #32
 8011008:	68f9      	ldr	r1, [r7, #12]
 801100a:	4618      	mov	r0, r3
 801100c:	f7f6 faa6 	bl	800755c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8011010:	68f8      	ldr	r0, [r7, #12]
 8011012:	f7f6 fb0b 	bl	800762c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 8011016:	4603      	mov	r3, r0
 8011018:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801101c:	f107 0120 	add.w	r1, r7, #32
 8011020:	f107 0010 	add.w	r0, r7, #16
 8011024:	9300      	str	r3, [sp, #0]
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	f000 fb32 	bl	8011690 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS8_RKSA_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 801102c:	f107 0310 	add.w	r3, r7, #16
 8011030:	4618      	mov	r0, r3
 8011032:	f000 fb47 	bl	80116c4 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSC_>
  DstEvaluatorType dstEvaluator(dst);
 8011036:	f107 0320 	add.w	r3, r7, #32
 801103a:	4618      	mov	r0, r3
 801103c:	f7f6 f87f 	bl	800713e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8011040:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011044:	4618      	mov	r0, r3
 8011046:	f7ff ffbf 	bl	8010fc8 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEED1Ev>
}
 801104a:	bf00      	nop
 801104c:	3738      	adds	r7, #56	; 0x38
 801104e:	46bd      	mov	sp, r7
 8011050:	bd80      	pop	{r7, pc}

08011052 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8011052:	b480      	push	{r7}
 8011054:	b083      	sub	sp, #12
 8011056:	af00      	add	r7, sp, #0
 8011058:	6078      	str	r0, [r7, #4]
    }
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	4618      	mov	r0, r3
 801105e:	370c      	adds	r7, #12
 8011060:	46bd      	mov	sp, r7
 8011062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011066:	4770      	bx	lr

08011068 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 8011068:	b480      	push	{r7}
 801106a:	b083      	sub	sp, #12
 801106c:	af00      	add	r7, sp, #0
 801106e:	6078      	str	r0, [r7, #4]
 8011070:	6039      	str	r1, [r7, #0]
    {}
 8011072:	bf00      	nop
 8011074:	370c      	adds	r7, #12
 8011076:	46bd      	mov	sp, r7
 8011078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801107c:	4770      	bx	lr

0801107e <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>:
 801107e:	b480      	push	{r7}
 8011080:	b083      	sub	sp, #12
 8011082:	af00      	add	r7, sp, #0
 8011084:	6078      	str	r0, [r7, #4]
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	4618      	mov	r0, r3
 801108a:	370c      	adds	r7, #12
 801108c:	46bd      	mov	sp, r7
 801108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011092:	4770      	bx	lr

08011094 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8011094:	b590      	push	{r4, r7, lr}
 8011096:	b083      	sub	sp, #12
 8011098:	af00      	add	r7, sp, #0
 801109a:	6078      	str	r0, [r7, #4]
 801109c:	6039      	str	r1, [r7, #0]
 801109e:	687c      	ldr	r4, [r7, #4]
 80110a0:	6838      	ldr	r0, [r7, #0]
 80110a2:	f000 fb1a 	bl	80116da <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE7functorEv>
 80110a6:	4603      	mov	r3, r0
 80110a8:	4619      	mov	r1, r3
 80110aa:	4620      	mov	r0, r4
 80110ac:	f7f4 f8ea 	bl	8005284 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	1d1c      	adds	r4, r3, #4
 80110b4:	6838      	ldr	r0, [r7, #0]
 80110b6:	f000 fb1c 	bl	80116f2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE3lhsEv>
 80110ba:	4603      	mov	r3, r0
 80110bc:	4619      	mov	r1, r3
 80110be:	4620      	mov	r0, r4
 80110c0:	f7fd fc27 	bl	800e912 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	f103 040c 	add.w	r4, r3, #12
 80110ca:	6838      	ldr	r0, [r7, #0]
 80110cc:	f000 fb1c 	bl	8011708 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE3rhsEv>
 80110d0:	4603      	mov	r3, r0
 80110d2:	4619      	mov	r1, r3
 80110d4:	4620      	mov	r0, r4
 80110d6:	f000 fb23 	bl	8011720 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1ERS9_>
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	4618      	mov	r0, r3
 80110de:	370c      	adds	r7, #12
 80110e0:	46bd      	mov	sp, r7
 80110e2:	bd90      	pop	{r4, r7, pc}

080110e4 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 80110e4:	b580      	push	{r7, lr}
 80110e6:	b084      	sub	sp, #16
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	60f8      	str	r0, [r7, #12]
 80110ec:	60b9      	str	r1, [r7, #8]
 80110ee:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	68ba      	ldr	r2, [r7, #8]
 80110f4:	6879      	ldr	r1, [r7, #4]
 80110f6:	4618      	mov	r0, r3
 80110f8:	f000 fb21 	bl	801173e <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 80110fc:	eef0 7a40 	vmov.f32	s15, s0
 8011100:	eeb0 0a67 	vmov.f32	s0, s15
 8011104:	3710      	adds	r7, #16
 8011106:	46bd      	mov	sp, r7
 8011108:	bd80      	pop	{r7, pc}

0801110a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi1ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 801110a:	b580      	push	{r7, lr}
 801110c:	b082      	sub	sp, #8
 801110e:	af00      	add	r7, sp, #0
 8011110:	6078      	str	r0, [r7, #4]
 8011112:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8011114:	2201      	movs	r2, #1
 8011116:	2100      	movs	r1, #0
 8011118:	6878      	ldr	r0, [r7, #4]
 801111a:	f7ff ffe3 	bl	80110e4 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 801111e:	eef0 7a40 	vmov.f32	s15, s0
  }
 8011122:	eeb0 0a67 	vmov.f32	s0, s15
 8011126:	3708      	adds	r7, #8
 8011128:	46bd      	mov	sp, r7
 801112a:	bd80      	pop	{r7, pc}

0801112c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi2ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 801112c:	b580      	push	{r7, lr}
 801112e:	b082      	sub	sp, #8
 8011130:	af00      	add	r7, sp, #0
 8011132:	6078      	str	r0, [r7, #4]
 8011134:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8011136:	2202      	movs	r2, #2
 8011138:	2100      	movs	r1, #0
 801113a:	6878      	ldr	r0, [r7, #4]
 801113c:	f7ff ffd2 	bl	80110e4 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 8011140:	eef0 7a40 	vmov.f32	s15, s0
  }
 8011144:	eeb0 0a67 	vmov.f32	s0, s15
 8011148:	3708      	adds	r7, #8
 801114a:	46bd      	mov	sp, r7
 801114c:	bd80      	pop	{r7, pc}

0801114e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 801114e:	b480      	push	{r7}
 8011150:	b083      	sub	sp, #12
 8011152:	af00      	add	r7, sp, #0
 8011154:	6078      	str	r0, [r7, #4]
 8011156:	bf00      	nop
 8011158:	370c      	adds	r7, #12
 801115a:	46bd      	mov	sp, r7
 801115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011160:	4770      	bx	lr

08011162 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfEC1ERKS5_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 8011162:	b590      	push	{r4, r7, lr}
 8011164:	b083      	sub	sp, #12
 8011166:	af00      	add	r7, sp, #0
 8011168:	6078      	str	r0, [r7, #4]
 801116a:	6039      	str	r1, [r7, #0]
 801116c:	6878      	ldr	r0, [r7, #4]
 801116e:	f000 fb22 	bl	80117b6 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 8011172:	687c      	ldr	r4, [r7, #4]
 8011174:	6838      	ldr	r0, [r7, #0]
 8011176:	f000 fb12 	bl	801179e <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 801117a:	4603      	mov	r3, r0
 801117c:	4619      	mov	r1, r3
 801117e:	4620      	mov	r0, r4
 8011180:	f000 fb24 	bl	80117cc <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	4618      	mov	r0, r3
 8011188:	370c      	adds	r7, #12
 801118a:	46bd      	mov	sp, r7
 801118c:	bd90      	pop	{r4, r7, pc}

0801118e <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffE5coeffEi>:
  const CoeffReturnType coeff(Index index) const
 801118e:	b580      	push	{r7, lr}
 8011190:	b0a4      	sub	sp, #144	; 0x90
 8011192:	af00      	add	r7, sp, #0
 8011194:	6078      	str	r0, [r7, #4]
 8011196:	6039      	str	r1, [r7, #0]
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 8011198:	683b      	ldr	r3, [r7, #0]
 801119a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 801119e:	2300      	movs	r3, #0
 80111a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	6819      	ldr	r1, [r3, #0]
 80111a8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80111ac:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80111b0:	4618      	mov	r0, r3
 80111b2:	f7f9 fcdb 	bl	800ab6c <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 80111b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80111ba:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80111be:	4611      	mov	r1, r2
 80111c0:	4618      	mov	r0, r3
 80111c2:	f7f9 fce6 	bl	800ab92 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	1d19      	adds	r1, r3, #4
 80111ca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80111ce:	2200      	movs	r2, #0
 80111d0:	4618      	mov	r0, r3
 80111d2:	f000 fb0b 	bl	80117ec <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE3colEi>
 80111d6:	f107 030c 	add.w	r3, r7, #12
 80111da:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80111de:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80111e2:	4618      	mov	r0, r3
 80111e4:	f000 fb15 	bl	8011812 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS1_INS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSG_6traitsIT_E6ScalarEEEKS8_KSJ_EERKNS0_ISJ_EE>
 80111e8:	f107 030c 	add.w	r3, r7, #12
 80111ec:	4618      	mov	r0, r3
 80111ee:	f000 fb3e 	bl	801186e <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE3sumEv>
 80111f2:	eef0 7a40 	vmov.f32	s15, s0
  }
 80111f6:	eeb0 0a67 	vmov.f32	s0, s15
 80111fa:	3790      	adds	r7, #144	; 0x90
 80111fc:	46bd      	mov	sp, r7
 80111fe:	bd80      	pop	{r7, pc}

08011200 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8011200:	b580      	push	{r7, lr}
 8011202:	b082      	sub	sp, #8
 8011204:	af00      	add	r7, sp, #0
 8011206:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8011208:	2102      	movs	r1, #2
 801120a:	6878      	ldr	r0, [r7, #4]
 801120c:	f7ff fa67 	bl	80106de <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8011210:	6878      	ldr	r0, [r7, #4]
 8011212:	f000 fb47 	bl	80118a4 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSG_>
  }
 8011216:	bf00      	nop
 8011218:	3708      	adds	r7, #8
 801121a:	46bd      	mov	sp, r7
 801121c:	bd80      	pop	{r7, pc}

0801121e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffEC1ERKSG_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 801121e:	b580      	push	{r7, lr}
 8011220:	b082      	sub	sp, #8
 8011222:	af00      	add	r7, sp, #0
 8011224:	6078      	str	r0, [r7, #4]
 8011226:	6039      	str	r1, [r7, #0]
 8011228:	6878      	ldr	r0, [r7, #4]
 801122a:	f000 fb45 	bl	80118b8 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	6839      	ldr	r1, [r7, #0]
 8011232:	4618      	mov	r0, r3
 8011234:	f000 fb4b 	bl	80118ce <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>
  }
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	4618      	mov	r0, r3
 801123c:	3708      	adds	r7, #8
 801123e:	46bd      	mov	sp, r7
 8011240:	bd80      	pop	{r7, pc}

08011242 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi1EE3runERSN_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8011242:	b580      	push	{r7, lr}
 8011244:	b082      	sub	sp, #8
 8011246:	af00      	add	r7, sp, #0
 8011248:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 801124a:	2100      	movs	r1, #0
 801124c:	6878      	ldr	r0, [r7, #4]
 801124e:	f000 fb66 	bl	801191e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_INS3_IfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8011252:	6878      	ldr	r0, [r7, #4]
 8011254:	f000 fb86 	bl	8011964 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi1EE3runERSN_>
  }
 8011258:	bf00      	nop
 801125a:	3708      	adds	r7, #8
 801125c:	46bd      	mov	sp, r7
 801125e:	bd80      	pop	{r7, pc}

08011260 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8011260:	b580      	push	{r7, lr}
 8011262:	b082      	sub	sp, #8
 8011264:	af00      	add	r7, sp, #0
 8011266:	6078      	str	r0, [r7, #4]
 8011268:	6039      	str	r1, [r7, #0]
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	6839      	ldr	r1, [r7, #0]
 801126e:	4618      	mov	r0, r3
 8011270:	f000 fb82 	bl	8011978 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb0EEE>
  }
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	4618      	mov	r0, r3
 8011278:	3708      	adds	r7, #8
 801127a:	46bd      	mov	sp, r7
 801127c:	bd80      	pop	{r7, pc}

0801127e <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 801127e:	b580      	push	{r7, lr}
 8011280:	b082      	sub	sp, #8
 8011282:	af00      	add	r7, sp, #0
 8011284:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	689b      	ldr	r3, [r3, #8]
 801128a:	4618      	mov	r0, r3
 801128c:	f7fc fd14 	bl	800dcb8 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11innerStrideEv>
 8011290:	4603      	mov	r3, r0
    }
 8011292:	4618      	mov	r0, r3
 8011294:	3708      	adds	r7, #8
 8011296:	46bd      	mov	sp, r7
 8011298:	bd80      	pop	{r7, pc}

0801129a <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 801129a:	b580      	push	{r7, lr}
 801129c:	b082      	sub	sp, #8
 801129e:	af00      	add	r7, sp, #0
 80112a0:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	689b      	ldr	r3, [r3, #8]
 80112a6:	4618      	mov	r0, r3
 80112a8:	f7fa fba2 	bl	800b9f0 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11outerStrideEv>
 80112ac:	4603      	mov	r3, r0
    }
 80112ae:	4618      	mov	r0, r3
 80112b0:	3708      	adds	r7, #8
 80112b2:	46bd      	mov	sp, r7
 80112b4:	bd80      	pop	{r7, pc}

080112b6 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80112b6:	b480      	push	{r7}
 80112b8:	b083      	sub	sp, #12
 80112ba:	af00      	add	r7, sp, #0
 80112bc:	6078      	str	r0, [r7, #4]
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	4618      	mov	r0, r3
 80112c2:	370c      	adds	r7, #12
 80112c4:	46bd      	mov	sp, r7
 80112c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ca:	4770      	bx	lr

080112cc <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 80112cc:	b5b0      	push	{r4, r5, r7, lr}
 80112ce:	b082      	sub	sp, #8
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]
 80112d4:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	689c      	ldr	r4, [r3, #8]
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	6839      	ldr	r1, [r7, #0]
 80112e0:	4618      	mov	r0, r3
 80112e2:	f000 fb5d 	bl	80119a0 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE8coeffRefEi>
 80112e6:	4605      	mov	r5, r0
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	685b      	ldr	r3, [r3, #4]
 80112ec:	6839      	ldr	r1, [r7, #0]
 80112ee:	4618      	mov	r0, r3
 80112f0:	f000 fb66 	bl	80119c0 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEi>
 80112f4:	4603      	mov	r3, r0
 80112f6:	461a      	mov	r2, r3
 80112f8:	4629      	mov	r1, r5
 80112fa:	4620      	mov	r0, r4
 80112fc:	f7f7 f836 	bl	800836c <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8011300:	bf00      	nop
 8011302:	3708      	adds	r7, #8
 8011304:	46bd      	mov	sp, r7
 8011306:	bdb0      	pop	{r4, r5, r7, pc}

08011308 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi1EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8011308:	b480      	push	{r7}
 801130a:	b083      	sub	sp, #12
 801130c:	af00      	add	r7, sp, #0
 801130e:	6078      	str	r0, [r7, #4]
 8011310:	bf00      	nop
 8011312:	370c      	adds	r7, #12
 8011314:	46bd      	mov	sp, r7
 8011316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801131a:	4770      	bx	lr

0801131c <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 801131c:	b480      	push	{r7}
 801131e:	b083      	sub	sp, #12
 8011320:	af00      	add	r7, sp, #0
 8011322:	6078      	str	r0, [r7, #4]
    }
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	4618      	mov	r0, r3
 8011328:	370c      	adds	r7, #12
 801132a:	46bd      	mov	sp, r7
 801132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011330:	4770      	bx	lr

08011332 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8011332:	b480      	push	{r7}
 8011334:	b083      	sub	sp, #12
 8011336:	af00      	add	r7, sp, #0
 8011338:	6078      	str	r0, [r7, #4]
    }
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	4618      	mov	r0, r3
 801133e:	370c      	adds	r7, #12
 8011340:	46bd      	mov	sp, r7
 8011342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011346:	4770      	bx	lr

08011348 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8011348:	b580      	push	{r7, lr}
 801134a:	b082      	sub	sp, #8
 801134c:	af00      	add	r7, sp, #0
 801134e:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	4618      	mov	r0, r3
 8011354:	f7ff fb42 	bl	80109dc <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8011358:	4603      	mov	r3, r0
    }
 801135a:	4618      	mov	r0, r3
 801135c:	3708      	adds	r7, #8
 801135e:	46bd      	mov	sp, r7
 8011360:	bd80      	pop	{r7, pc}

08011362 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKSD_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 8011362:	b580      	push	{r7, lr}
 8011364:	b082      	sub	sp, #8
 8011366:	af00      	add	r7, sp, #0
 8011368:	6078      	str	r0, [r7, #4]
 801136a:	6039      	str	r1, [r7, #0]
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	6839      	ldr	r1, [r7, #0]
 8011370:	4618      	mov	r0, r3
 8011372:	f000 fb35 	bl	80119e0 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKSD_>
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	4618      	mov	r0, r3
 801137a:	3708      	adds	r7, #8
 801137c:	46bd      	mov	sp, r7
 801137e:	bd80      	pop	{r7, pc}

08011380 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8011380:	b480      	push	{r7}
 8011382:	b083      	sub	sp, #12
 8011384:	af00      	add	r7, sp, #0
 8011386:	6078      	str	r0, [r7, #4]
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	4618      	mov	r0, r3
 801138c:	370c      	adds	r7, #12
 801138e:	46bd      	mov	sp, r7
 8011390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011394:	4770      	bx	lr

08011396 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
 8011396:	b480      	push	{r7}
 8011398:	b083      	sub	sp, #12
 801139a:	af00      	add	r7, sp, #0
 801139c:	6078      	str	r0, [r7, #4]
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	4618      	mov	r0, r3
 80113a2:	370c      	adds	r7, #12
 80113a4:	46bd      	mov	sp, r7
 80113a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113aa:	4770      	bx	lr

080113ac <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi2EE3runISG_EEfRKSH_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 80113ac:	b580      	push	{r7, lr}
 80113ae:	b084      	sub	sp, #16
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	60f8      	str	r0, [r7, #12]
 80113b4:	60b9      	str	r1, [r7, #8]
 80113b6:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 80113b8:	68b9      	ldr	r1, [r7, #8]
 80113ba:	68f8      	ldr	r0, [r7, #12]
 80113bc:	f000 fb1f 	bl	80119fe <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi3EE3runERKSH_RKS3_>
 80113c0:	eef0 7a40 	vmov.f32	s15, s0
  }
 80113c4:	eeb0 0a67 	vmov.f32	s0, s15
 80113c8:	3710      	adds	r7, #16
 80113ca:	46bd      	mov	sp, r7
 80113cc:	bd80      	pop	{r7, pc}

080113ce <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffEC1ERKS6_>:
  explicit product_evaluator(const XprType& xpr)
 80113ce:	b580      	push	{r7, lr}
 80113d0:	b082      	sub	sp, #8
 80113d2:	af00      	add	r7, sp, #0
 80113d4:	6078      	str	r0, [r7, #4]
 80113d6:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 80113d8:	6878      	ldr	r0, [r7, #4]
 80113da:	f000 fb4c 	bl	8011a76 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 80113de:	6838      	ldr	r0, [r7, #0]
 80113e0:	f000 fb31 	bl	8011a46 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3lhsEv>
 80113e4:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 80113ea:	6838      	ldr	r0, [r7, #0]
 80113ec:	f000 fb37 	bl	8011a5e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3rhsEv>
 80113f0:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	605a      	str	r2, [r3, #4]
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 8011400:	4619      	mov	r1, r3
 8011402:	4610      	mov	r0, r2
 8011404:	f7f5 f95f 	bl	80066c6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	685b      	ldr	r3, [r3, #4]
      m_innerDim(xpr.lhs().cols())
 8011412:	4619      	mov	r1, r3
 8011414:	4610      	mov	r0, r2
 8011416:	f000 f9d9 	bl	80117cc <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
 801141a:	6838      	ldr	r0, [r7, #0]
 801141c:	f000 fb13 	bl	8011a46 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3lhsEv>
 8011420:	4603      	mov	r3, r0
 8011422:	4618      	mov	r0, r3
 8011424:	f7f3 fc9e 	bl	8004d64 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8011428:	4602      	mov	r2, r0
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	611a      	str	r2, [r3, #16]
  }
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	4618      	mov	r0, r3
 8011432:	3708      	adds	r7, #8
 8011434:	46bd      	mov	sp, r7
 8011436:	bd80      	pop	{r7, pc}

08011438 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi0ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8011438:	b580      	push	{r7, lr}
 801143a:	b082      	sub	sp, #8
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8011440:	2200      	movs	r2, #0
 8011442:	2100      	movs	r1, #0
 8011444:	6878      	ldr	r0, [r7, #4]
 8011446:	f000 fb21 	bl	8011a8c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 801144a:	6878      	ldr	r0, [r7, #4]
 801144c:	f000 fb37 	bl	8011abe <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi1ELi9EE3runERSE_>
  }
 8011450:	bf00      	nop
 8011452:	3708      	adds	r7, #8
 8011454:	46bd      	mov	sp, r7
 8011456:	bd80      	pop	{r7, pc}

08011458 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 8011458:	b590      	push	{r4, r7, lr}
 801145a:	b083      	sub	sp, #12
 801145c:	af00      	add	r7, sp, #0
 801145e:	6078      	str	r0, [r7, #4]
 8011460:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8011462:	6878      	ldr	r0, [r7, #4]
 8011464:	f000 fb57 	bl	8011b16 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8011468:	683b      	ldr	r3, [r7, #0]
 801146a:	4618      	mov	r0, r3
 801146c:	f000 f81e 	bl	80114ac <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4dataEv>
 8011470:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	601a      	str	r2, [r3, #0]
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	1d1c      	adds	r4, r3, #4
 801147a:	683b      	ldr	r3, [r7, #0]
 801147c:	4618      	mov	r0, r3
 801147e:	f000 fb2e 	bl	8011ade <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE11innerStrideEv>
 8011482:	4603      	mov	r3, r0
 8011484:	4619      	mov	r1, r3
 8011486:	4620      	mov	r0, r4
 8011488:	f7f5 f976 	bl	8006778 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	1d5c      	adds	r4, r3, #5
 8011490:	683b      	ldr	r3, [r7, #0]
 8011492:	4618      	mov	r0, r3
 8011494:	f000 fb31 	bl	8011afa <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE11outerStrideEv>
 8011498:	4603      	mov	r3, r0
 801149a:	4619      	mov	r1, r3
 801149c:	4620      	mov	r0, r4
 801149e:	f7f5 f951 	bl	8006744 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	4618      	mov	r0, r3
 80114a6:	370c      	adds	r7, #12
 80114a8:	46bd      	mov	sp, r7
 80114aa:	bd90      	pop	{r4, r7, pc}

080114ac <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 80114ac:	b480      	push	{r7}
 80114ae:	b083      	sub	sp, #12
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	6078      	str	r0, [r7, #4]
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	4618      	mov	r0, r3
 80114ba:	370c      	adds	r7, #12
 80114bc:	46bd      	mov	sp, r7
 80114be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c2:	4770      	bx	lr

080114c4 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERKSG_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 80114c4:	b580      	push	{r7, lr}
 80114c6:	b082      	sub	sp, #8
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	6078      	str	r0, [r7, #4]
 80114cc:	6039      	str	r1, [r7, #0]
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	6839      	ldr	r1, [r7, #0]
 80114d2:	4618      	mov	r0, r3
 80114d4:	f000 fb2a 	bl	8011b2c <_ZN5Eigen8internal15block_evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERKNS_5BlockISE_Li1ELi1ELb0EEE>
  }
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	4618      	mov	r0, r3
 80114dc:	3708      	adds	r7, #8
 80114de:	46bd      	mov	sp, r7
 80114e0:	bd80      	pop	{r7, pc}

080114e2 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 80114e2:	b580      	push	{r7, lr}
 80114e4:	b082      	sub	sp, #8
 80114e6:	af00      	add	r7, sp, #0
 80114e8:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	3308      	adds	r3, #8
 80114ee:	4618      	mov	r0, r3
 80114f0:	f7fc fd6a 	bl	800dfc8 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11innerStrideEv>
 80114f4:	4603      	mov	r3, r0
    }
 80114f6:	4618      	mov	r0, r3
 80114f8:	3708      	adds	r7, #8
 80114fa:	46bd      	mov	sp, r7
 80114fc:	bd80      	pop	{r7, pc}

080114fe <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 80114fe:	b580      	push	{r7, lr}
 8011500:	b082      	sub	sp, #8
 8011502:	af00      	add	r7, sp, #0
 8011504:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	3308      	adds	r3, #8
 801150a:	4618      	mov	r0, r3
 801150c:	f7fc fd70 	bl	800dff0 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11outerStrideEv>
 8011510:	4603      	mov	r3, r0
    }
 8011512:	4618      	mov	r0, r3
 8011514:	3708      	adds	r7, #8
 8011516:	46bd      	mov	sp, r7
 8011518:	bd80      	pop	{r7, pc}

0801151a <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 801151a:	b480      	push	{r7}
 801151c:	b083      	sub	sp, #12
 801151e:	af00      	add	r7, sp, #0
 8011520:	6078      	str	r0, [r7, #4]
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	4618      	mov	r0, r3
 8011526:	370c      	adds	r7, #12
 8011528:	46bd      	mov	sp, r7
 801152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801152e:	4770      	bx	lr

08011530 <_ZNK5Eigen8internal15nullary_wrapperIfNS0_18scalar_constant_opIfEELb1ELb0ELb0EEclIiEEfRKS3_T_S8_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar operator()(const NullaryOp& op, IndexType=0, IndexType=0) const { return op(); }
 8011530:	b580      	push	{r7, lr}
 8011532:	b084      	sub	sp, #16
 8011534:	af00      	add	r7, sp, #0
 8011536:	60f8      	str	r0, [r7, #12]
 8011538:	60b9      	str	r1, [r7, #8]
 801153a:	607a      	str	r2, [r7, #4]
 801153c:	603b      	str	r3, [r7, #0]
 801153e:	68b8      	ldr	r0, [r7, #8]
 8011540:	f000 fb03 	bl	8011b4a <_ZNK5Eigen8internal18scalar_constant_opIfEclEv>
 8011544:	eef0 7a40 	vmov.f32	s15, s0
 8011548:	eeb0 0a67 	vmov.f32	s0, s15
 801154c:	3710      	adds	r7, #16
 801154e:	46bd      	mov	sp, r7
 8011550:	bd80      	pop	{r7, pc}

08011552 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi3ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 8011552:	b580      	push	{r7, lr}
 8011554:	b082      	sub	sp, #8
 8011556:	af00      	add	r7, sp, #0
 8011558:	6078      	str	r0, [r7, #4]
 801155a:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	6839      	ldr	r1, [r7, #0]
 8011560:	4618      	mov	r0, r3
 8011562:	f000 fb01 	bl	8011b68 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8011566:	683b      	ldr	r3, [r7, #0]
 8011568:	4618      	mov	r0, r3
 801156a:	f000 fb27 	bl	8011bbc <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4dataEv>
 801156e:	bf00      	nop
  }
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	4618      	mov	r0, r3
 8011574:	3708      	adds	r7, #8
 8011576:	46bd      	mov	sp, r7
 8011578:	bd80      	pop	{r7, pc}

0801157a <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEELb0EE3runERKS3_RKS5_>:
    static void run(const Derived&, const OtherDerived&)
 801157a:	b480      	push	{r7}
 801157c:	b083      	sub	sp, #12
 801157e:	af00      	add	r7, sp, #0
 8011580:	6078      	str	r0, [r7, #4]
 8011582:	6039      	str	r1, [r7, #0]
    }
 8011584:	bf00      	nop
 8011586:	370c      	adds	r7, #12
 8011588:	46bd      	mov	sp, r7
 801158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801158e:	4770      	bx	lr

08011590 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEC1ERKS5_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8011590:	b580      	push	{r7, lr}
 8011592:	b082      	sub	sp, #8
 8011594:	af00      	add	r7, sp, #0
 8011596:	6078      	str	r0, [r7, #4]
 8011598:	6039      	str	r1, [r7, #0]
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	6839      	ldr	r1, [r7, #0]
 801159e:	4618      	mov	r0, r3
 80115a0:	f000 fb18 	bl	8011bd4 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffEC1ERKS5_>
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	4618      	mov	r0, r3
 80115a8:	3708      	adds	r7, #8
 80115aa:	46bd      	mov	sp, r7
 80115ac:	bd80      	pop	{r7, pc}

080115ae <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 80115ae:	b480      	push	{r7}
 80115b0:	b083      	sub	sp, #12
 80115b2:	af00      	add	r7, sp, #0
 80115b4:	6078      	str	r0, [r7, #4]
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	4618      	mov	r0, r3
 80115ba:	370c      	adds	r7, #12
 80115bc:	46bd      	mov	sp, r7
 80115be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c2:	4770      	bx	lr

080115c4 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 80115c4:	b580      	push	{r7, lr}
 80115c6:	b082      	sub	sp, #8
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	6078      	str	r0, [r7, #4]
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	4618      	mov	r0, r3
 80115d2:	f7f3 fb2c 	bl	8004c2e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80115d6:	4603      	mov	r3, r0
 80115d8:	4618      	mov	r0, r3
 80115da:	3708      	adds	r7, #8
 80115dc:	46bd      	mov	sp, r7
 80115de:	bd80      	pop	{r7, pc}

080115e0 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80115e0:	b580      	push	{r7, lr}
 80115e2:	b082      	sub	sp, #8
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	6078      	str	r0, [r7, #4]
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	685b      	ldr	r3, [r3, #4]
 80115ec:	4618      	mov	r0, r3
 80115ee:	f7f3 fb13 	bl	8004c18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80115f2:	4603      	mov	r3, r0
 80115f4:	4618      	mov	r0, r3
 80115f6:	3708      	adds	r7, #8
 80115f8:	46bd      	mov	sp, r7
 80115fa:	bd80      	pop	{r7, pc}

080115fc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 80115fc:	b580      	push	{r7, lr}
 80115fe:	b086      	sub	sp, #24
 8011600:	af00      	add	r7, sp, #0
 8011602:	60f8      	str	r0, [r7, #12]
 8011604:	60b9      	str	r1, [r7, #8]
 8011606:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8011608:	68b8      	ldr	r0, [r7, #8]
 801160a:	f7ff ffdb 	bl	80115c4 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE4rowsEv>
 801160e:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8011610:	68b8      	ldr	r0, [r7, #8]
 8011612:	f7ff ffe5 	bl	80115e0 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE4colsEv>
 8011616:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	4618      	mov	r0, r3
 801161c:	f7f3 fb07 	bl	8004c2e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8011620:	4602      	mov	r2, r0
 8011622:	697b      	ldr	r3, [r7, #20]
 8011624:	4293      	cmp	r3, r2
 8011626:	d107      	bne.n	8011638 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	4618      	mov	r0, r3
 801162c:	f7f3 faf4 	bl	8004c18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8011630:	4602      	mov	r2, r0
 8011632:	693b      	ldr	r3, [r7, #16]
 8011634:	4293      	cmp	r3, r2
 8011636:	d001      	beq.n	801163c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8011638:	2301      	movs	r3, #1
 801163a:	e000      	b.n	801163e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 801163c:	2300      	movs	r3, #0
 801163e:	2b00      	cmp	r3, #0
 8011640:	d005      	beq.n	801164e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	693a      	ldr	r2, [r7, #16]
 8011646:	6979      	ldr	r1, [r7, #20]
 8011648:	4618      	mov	r0, r3
 801164a:	f7f6 fa09 	bl	8007a60 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	4618      	mov	r0, r3
 8011652:	f7f3 faec 	bl	8004c2e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8011656:	4602      	mov	r2, r0
 8011658:	697b      	ldr	r3, [r7, #20]
 801165a:	4293      	cmp	r3, r2
 801165c:	d107      	bne.n	801166e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	4618      	mov	r0, r3
 8011662:	f7f3 fad9 	bl	8004c18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8011666:	4602      	mov	r2, r0
 8011668:	693b      	ldr	r3, [r7, #16]
 801166a:	4293      	cmp	r3, r2
 801166c:	d006      	beq.n	801167c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 801166e:	4b05      	ldr	r3, [pc, #20]	; (8011684 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8011670:	4a05      	ldr	r2, [pc, #20]	; (8011688 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8011672:	f240 21fd 	movw	r1, #765	; 0x2fd
 8011676:	4805      	ldr	r0, [pc, #20]	; (801168c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8011678:	f00c f9f0 	bl	801da5c <__assert_func>
}
 801167c:	bf00      	nop
 801167e:	3718      	adds	r7, #24
 8011680:	46bd      	mov	sp, r7
 8011682:	bd80      	pop	{r7, pc}
 8011684:	08021f3c 	.word	0x08021f3c
 8011688:	08028098 	.word	0x08028098
 801168c:	08022050 	.word	0x08022050

08011690 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS8_RKSA_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8011690:	b480      	push	{r7}
 8011692:	b085      	sub	sp, #20
 8011694:	af00      	add	r7, sp, #0
 8011696:	60f8      	str	r0, [r7, #12]
 8011698:	60b9      	str	r1, [r7, #8]
 801169a:	607a      	str	r2, [r7, #4]
 801169c:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	68ba      	ldr	r2, [r7, #8]
 80116a2:	601a      	str	r2, [r3, #0]
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	687a      	ldr	r2, [r7, #4]
 80116a8:	605a      	str	r2, [r3, #4]
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	683a      	ldr	r2, [r7, #0]
 80116ae:	609a      	str	r2, [r3, #8]
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	69ba      	ldr	r2, [r7, #24]
 80116b4:	60da      	str	r2, [r3, #12]
  }
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	4618      	mov	r0, r3
 80116ba:	3714      	adds	r7, #20
 80116bc:	46bd      	mov	sp, r7
 80116be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c2:	4770      	bx	lr

080116c4 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80116c4:	b580      	push	{r7, lr}
 80116c6:	b082      	sub	sp, #8
 80116c8:	af00      	add	r7, sp, #0
 80116ca:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 80116cc:	6878      	ldr	r0, [r7, #4]
 80116ce:	f000 fab6 	bl	8011c3e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSC_>
  }
 80116d2:	bf00      	nop
 80116d4:	3708      	adds	r7, #8
 80116d6:	46bd      	mov	sp, r7
 80116d8:	bd80      	pop	{r7, pc}

080116da <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 80116da:	b480      	push	{r7}
 80116dc:	b083      	sub	sp, #12
 80116de:	af00      	add	r7, sp, #0
 80116e0:	6078      	str	r0, [r7, #4]
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	3330      	adds	r3, #48	; 0x30
 80116e6:	4618      	mov	r0, r3
 80116e8:	370c      	adds	r7, #12
 80116ea:	46bd      	mov	sp, r7
 80116ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116f0:	4770      	bx	lr

080116f2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 80116f2:	b480      	push	{r7}
 80116f4:	b083      	sub	sp, #12
 80116f6:	af00      	add	r7, sp, #0
 80116f8:	6078      	str	r0, [r7, #4]
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	4618      	mov	r0, r3
 80116fe:	370c      	adds	r7, #12
 8011700:	46bd      	mov	sp, r7
 8011702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011706:	4770      	bx	lr

08011708 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8011708:	b480      	push	{r7}
 801170a:	b083      	sub	sp, #12
 801170c:	af00      	add	r7, sp, #0
 801170e:	6078      	str	r0, [r7, #4]
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	3318      	adds	r3, #24
 8011714:	4618      	mov	r0, r3
 8011716:	370c      	adds	r7, #12
 8011718:	46bd      	mov	sp, r7
 801171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801171e:	4770      	bx	lr

08011720 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1ERS9_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8011720:	b580      	push	{r7, lr}
 8011722:	b082      	sub	sp, #8
 8011724:	af00      	add	r7, sp, #0
 8011726:	6078      	str	r0, [r7, #4]
 8011728:	6039      	str	r1, [r7, #0]
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	6839      	ldr	r1, [r7, #0]
 801172e:	4618      	mov	r0, r3
 8011730:	f000 fa95 	bl	8011c5e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1ERKS8_>
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	4618      	mov	r0, r3
 8011738:	3708      	adds	r7, #8
 801173a:	46bd      	mov	sp, r7
 801173c:	bd80      	pop	{r7, pc}

0801173e <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 801173e:	b590      	push	{r4, r7, lr}
 8011740:	b087      	sub	sp, #28
 8011742:	af00      	add	r7, sp, #0
 8011744:	60f8      	str	r0, [r7, #12]
 8011746:	60b9      	str	r1, [r7, #8]
 8011748:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	4618      	mov	r0, r3
 801174e:	f000 fa95 	bl	8011c7c <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 8011752:	4604      	mov	r4, r0
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	3304      	adds	r3, #4
 8011758:	687a      	ldr	r2, [r7, #4]
 801175a:	68b9      	ldr	r1, [r7, #8]
 801175c:	4618      	mov	r0, r3
 801175e:	f7fd fdf3 	bl	800f348 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 8011762:	eef0 7a40 	vmov.f32	s15, s0
 8011766:	edc7 7a04 	vstr	s15, [r7, #16]
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	330c      	adds	r3, #12
 801176e:	687a      	ldr	r2, [r7, #4]
 8011770:	68b9      	ldr	r1, [r7, #8]
 8011772:	4618      	mov	r0, r3
 8011774:	f000 fa8d 	bl	8011c92 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>
 8011778:	eef0 7a40 	vmov.f32	s15, s0
 801177c:	edc7 7a05 	vstr	s15, [r7, #20]
 8011780:	f107 0214 	add.w	r2, r7, #20
 8011784:	f107 0310 	add.w	r3, r7, #16
 8011788:	4619      	mov	r1, r3
 801178a:	4620      	mov	r0, r4
 801178c:	f7fd fc20 	bl	800efd0 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 8011790:	eef0 7a40 	vmov.f32	s15, s0
  }
 8011794:	eeb0 0a67 	vmov.f32	s0, s15
 8011798:	371c      	adds	r7, #28
 801179a:	46bd      	mov	sp, r7
 801179c:	bd90      	pop	{r4, r7, pc}

0801179e <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 801179e:	b480      	push	{r7}
 80117a0:	b083      	sub	sp, #12
 80117a2:	af00      	add	r7, sp, #0
 80117a4:	6078      	str	r0, [r7, #4]
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	4618      	mov	r0, r3
 80117ac:	370c      	adds	r7, #12
 80117ae:	46bd      	mov	sp, r7
 80117b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b4:	4770      	bx	lr

080117b6 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80117b6:	b480      	push	{r7}
 80117b8:	b083      	sub	sp, #12
 80117ba:	af00      	add	r7, sp, #0
 80117bc:	6078      	str	r0, [r7, #4]
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	4618      	mov	r0, r3
 80117c2:	370c      	adds	r7, #12
 80117c4:	46bd      	mov	sp, r7
 80117c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ca:	4770      	bx	lr

080117cc <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>:
  explicit evaluator(const XprType& m)
 80117cc:	b580      	push	{r7, lr}
 80117ce:	b082      	sub	sp, #8
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	6078      	str	r0, [r7, #4]
 80117d4:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	683a      	ldr	r2, [r7, #0]
 80117da:	4611      	mov	r1, r2
 80117dc:	4618      	mov	r0, r3
 80117de:	f000 fa79 	bl	8011cd4 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>
  { }
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	4618      	mov	r0, r3
 80117e6:	3708      	adds	r7, #8
 80117e8:	46bd      	mov	sp, r7
 80117ea:	bd80      	pop	{r7, pc}

080117ec <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE3colEi>:
ConstColXpr col(Index i) const
 80117ec:	b580      	push	{r7, lr}
 80117ee:	b084      	sub	sp, #16
 80117f0:	af00      	add	r7, sp, #0
 80117f2:	60f8      	str	r0, [r7, #12]
 80117f4:	60b9      	str	r1, [r7, #8]
 80117f6:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 80117f8:	68b8      	ldr	r0, [r7, #8]
 80117fa:	f7f4 f887 	bl	800590c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 80117fe:	4603      	mov	r3, r0
 8011800:	687a      	ldr	r2, [r7, #4]
 8011802:	4619      	mov	r1, r3
 8011804:	68f8      	ldr	r0, [r7, #12]
 8011806:	f000 fa7d 	bl	8011d04 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i>
}
 801180a:	68f8      	ldr	r0, [r7, #12]
 801180c:	3710      	adds	r7, #16
 801180e:	46bd      	mov	sp, r7
 8011810:	bd80      	pop	{r7, pc}

08011812 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS1_INS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSG_6traitsIT_E6ScalarEEEKS8_KSJ_EERKNS0_ISJ_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 8011812:	b5b0      	push	{r4, r5, r7, lr}
 8011814:	b086      	sub	sp, #24
 8011816:	af00      	add	r7, sp, #0
 8011818:	60f8      	str	r0, [r7, #12]
 801181a:	60b9      	str	r1, [r7, #8]
 801181c:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 801181e:	68b8      	ldr	r0, [r7, #8]
 8011820:	f7f9 fe6e 	bl	800b500 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>
 8011824:	4604      	mov	r4, r0
 8011826:	6878      	ldr	r0, [r7, #4]
 8011828:	f000 fa94 	bl	8011d54 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE7derivedEv>
 801182c:	4605      	mov	r5, r0
 801182e:	f107 0314 	add.w	r3, r7, #20
 8011832:	4618      	mov	r0, r3
 8011834:	f7f3 fc9c 	bl	8005170 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 8011838:	f107 0314 	add.w	r3, r7, #20
 801183c:	462a      	mov	r2, r5
 801183e:	4621      	mov	r1, r4
 8011840:	68f8      	ldr	r0, [r7, #12]
 8011842:	f000 fac1 	bl	8011dc8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_>
}
 8011846:	68f8      	ldr	r0, [r7, #12]
 8011848:	3718      	adds	r7, #24
 801184a:	46bd      	mov	sp, r7
 801184c:	bdb0      	pop	{r4, r5, r7, pc}

0801184e <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 801184e:	b580      	push	{r7, lr}
 8011850:	b082      	sub	sp, #8
 8011852:	af00      	add	r7, sp, #0
 8011854:	6078      	str	r0, [r7, #4]
 8011856:	6878      	ldr	r0, [r7, #4]
 8011858:	f000 fb14 	bl	8011e84 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 801185c:	4603      	mov	r3, r0
 801185e:	4618      	mov	r0, r3
 8011860:	f000 fb1b 	bl	8011e9a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE4rowsEv>
 8011864:	4603      	mov	r3, r0
 8011866:	4618      	mov	r0, r3
 8011868:	3708      	adds	r7, #8
 801186a:	46bd      	mov	sp, r7
 801186c:	bd80      	pop	{r7, pc}

0801186e <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 801186e:	b590      	push	{r4, r7, lr}
 8011870:	b085      	sub	sp, #20
 8011872:	af00      	add	r7, sp, #0
 8011874:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 8011876:	6878      	ldr	r0, [r7, #4]
 8011878:	f000 fb04 	bl	8011e84 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 801187c:	4604      	mov	r4, r0
 801187e:	f107 030c 	add.w	r3, r7, #12
 8011882:	4618      	mov	r0, r3
 8011884:	f7f3 ff6b 	bl	800575e <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8011888:	f107 030c 	add.w	r3, r7, #12
 801188c:	4619      	mov	r1, r3
 801188e:	4620      	mov	r0, r4
 8011890:	f000 fb80 	bl	8011f94 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 8011894:	eef0 7a40 	vmov.f32	s15, s0
 8011898:	bf00      	nop
}
 801189a:	eeb0 0a67 	vmov.f32	s0, s15
 801189e:	3714      	adds	r7, #20
 80118a0:	46bd      	mov	sp, r7
 80118a2:	bd90      	pop	{r4, r7, pc}

080118a4 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 80118a4:	b480      	push	{r7}
 80118a6:	b083      	sub	sp, #12
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	6078      	str	r0, [r7, #4]
 80118ac:	bf00      	nop
 80118ae:	370c      	adds	r7, #12
 80118b0:	46bd      	mov	sp, r7
 80118b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b6:	4770      	bx	lr

080118b8 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80118b8:	b480      	push	{r7}
 80118ba:	b083      	sub	sp, #12
 80118bc:	af00      	add	r7, sp, #0
 80118be:	6078      	str	r0, [r7, #4]
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	4618      	mov	r0, r3
 80118c4:	370c      	adds	r7, #12
 80118c6:	46bd      	mov	sp, r7
 80118c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118cc:	4770      	bx	lr

080118ce <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 80118ce:	b590      	push	{r4, r7, lr}
 80118d0:	b083      	sub	sp, #12
 80118d2:	af00      	add	r7, sp, #0
 80118d4:	6078      	str	r0, [r7, #4]
 80118d6:	6039      	str	r1, [r7, #0]
 80118d8:	687c      	ldr	r4, [r7, #4]
 80118da:	6838      	ldr	r0, [r7, #0]
 80118dc:	f000 fba0 	bl	8012020 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE7functorEv>
 80118e0:	4603      	mov	r3, r0
 80118e2:	4619      	mov	r1, r3
 80118e4:	4620      	mov	r0, r4
 80118e6:	f7f3 ffb9 	bl	800585c <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	1d1c      	adds	r4, r3, #4
 80118ee:	6838      	ldr	r0, [r7, #0]
 80118f0:	f000 fba2 	bl	8012038 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE3lhsEv>
 80118f4:	4603      	mov	r3, r0
 80118f6:	4619      	mov	r1, r3
 80118f8:	4620      	mov	r0, r4
 80118fa:	f000 fbb4 	bl	8012066 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEEC1ERSA_>
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	f103 040c 	add.w	r4, r3, #12
 8011904:	6838      	ldr	r0, [r7, #0]
 8011906:	f000 fba2 	bl	801204e <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE3rhsEv>
 801190a:	4603      	mov	r3, r0
 801190c:	4619      	mov	r1, r3
 801190e:	4620      	mov	r0, r4
 8011910:	f000 fbb8 	bl	8012084 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS4_>
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	4618      	mov	r0, r3
 8011918:	370c      	adds	r7, #12
 801191a:	46bd      	mov	sp, r7
 801191c:	bd90      	pop	{r4, r7, pc}

0801191e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_INS3_IfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 801191e:	b5b0      	push	{r4, r5, r7, lr}
 8011920:	b084      	sub	sp, #16
 8011922:	af00      	add	r7, sp, #0
 8011924:	6078      	str	r0, [r7, #4]
 8011926:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	689c      	ldr	r4, [r3, #8]
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	6839      	ldr	r1, [r7, #0]
 8011932:	4618      	mov	r0, r3
 8011934:	f000 f834 	bl	80119a0 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE8coeffRefEi>
 8011938:	4605      	mov	r5, r0
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	685b      	ldr	r3, [r3, #4]
 801193e:	6839      	ldr	r1, [r7, #0]
 8011940:	4618      	mov	r0, r3
 8011942:	f000 fbae 	bl	80120a2 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE5coeffEi>
 8011946:	eef0 7a40 	vmov.f32	s15, s0
 801194a:	edc7 7a03 	vstr	s15, [r7, #12]
 801194e:	f107 030c 	add.w	r3, r7, #12
 8011952:	461a      	mov	r2, r3
 8011954:	4629      	mov	r1, r5
 8011956:	4620      	mov	r0, r4
 8011958:	f7f6 fd08 	bl	800836c <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 801195c:	bf00      	nop
 801195e:	3710      	adds	r7, #16
 8011960:	46bd      	mov	sp, r7
 8011962:	bdb0      	pop	{r4, r5, r7, pc}

08011964 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi1EE3runERSN_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8011964:	b480      	push	{r7}
 8011966:	b083      	sub	sp, #12
 8011968:	af00      	add	r7, sp, #0
 801196a:	6078      	str	r0, [r7, #4]
 801196c:	bf00      	nop
 801196e:	370c      	adds	r7, #12
 8011970:	46bd      	mov	sp, r7
 8011972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011976:	4770      	bx	lr

08011978 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 8011978:	b580      	push	{r7, lr}
 801197a:	b082      	sub	sp, #8
 801197c:	af00      	add	r7, sp, #0
 801197e:	6078      	str	r0, [r7, #4]
 8011980:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	6839      	ldr	r1, [r7, #0]
 8011986:	4618      	mov	r0, r3
 8011988:	f000 fbaf 	bl	80120ea <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 801198c:	683b      	ldr	r3, [r7, #0]
 801198e:	4618      	mov	r0, r3
 8011990:	f000 fbd5 	bl	801213e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4dataEv>
 8011994:	bf00      	nop
  }
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	4618      	mov	r0, r3
 801199a:	3708      	adds	r7, #8
 801199c:	46bd      	mov	sp, r7
 801199e:	bd80      	pop	{r7, pc}

080119a0 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE8coeffRefEi>:
  Scalar& coeffRef(Index index)
 80119a0:	b480      	push	{r7}
 80119a2:	b083      	sub	sp, #12
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	6078      	str	r0, [r7, #4]
 80119a8:	6039      	str	r1, [r7, #0]
    return const_cast<Scalar*>(m_d.data)[index];
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	681a      	ldr	r2, [r3, #0]
 80119ae:	683b      	ldr	r3, [r7, #0]
 80119b0:	009b      	lsls	r3, r3, #2
 80119b2:	4413      	add	r3, r2
  }
 80119b4:	4618      	mov	r0, r3
 80119b6:	370c      	adds	r7, #12
 80119b8:	46bd      	mov	sp, r7
 80119ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119be:	4770      	bx	lr

080119c0 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEi>:
  CoeffReturnType coeff(Index index) const
 80119c0:	b480      	push	{r7}
 80119c2:	b083      	sub	sp, #12
 80119c4:	af00      	add	r7, sp, #0
 80119c6:	6078      	str	r0, [r7, #4]
 80119c8:	6039      	str	r1, [r7, #0]
    return m_d.data[index];
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	681a      	ldr	r2, [r3, #0]
 80119ce:	683b      	ldr	r3, [r7, #0]
 80119d0:	009b      	lsls	r3, r3, #2
 80119d2:	4413      	add	r3, r2
  }
 80119d4:	4618      	mov	r0, r3
 80119d6:	370c      	adds	r7, #12
 80119d8:	46bd      	mov	sp, r7
 80119da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119de:	4770      	bx	lr

080119e0 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKSD_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 80119e0:	b580      	push	{r7, lr}
 80119e2:	b082      	sub	sp, #8
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	6078      	str	r0, [r7, #4]
 80119e8:	6039      	str	r1, [r7, #0]
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	6839      	ldr	r1, [r7, #0]
 80119ee:	4618      	mov	r0, r3
 80119f0:	f000 fbb1 	bl	8012156 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffEC1ERKSD_>
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	4618      	mov	r0, r3
 80119f8:	3708      	adds	r7, #8
 80119fa:	46bd      	mov	sp, r7
 80119fc:	bd80      	pop	{r7, pc}

080119fe <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi3EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 80119fe:	b580      	push	{r7, lr}
 8011a00:	b084      	sub	sp, #16
 8011a02:	af00      	add	r7, sp, #0
 8011a04:	6078      	str	r0, [r7, #4]
 8011a06:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8011a08:	6839      	ldr	r1, [r7, #0]
 8011a0a:	6878      	ldr	r0, [r7, #4]
 8011a0c:	f000 fbb5 	bl	801217a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi1EE3runERKSH_RKS3_>
 8011a10:	eef0 7a40 	vmov.f32	s15, s0
 8011a14:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8011a18:	6839      	ldr	r1, [r7, #0]
 8011a1a:	6878      	ldr	r0, [r7, #4]
 8011a1c:	f000 fbbe 	bl	801219c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi1ELi2EE3runERKSH_RKS3_>
 8011a20:	eef0 7a40 	vmov.f32	s15, s0
 8011a24:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8011a28:	f107 020c 	add.w	r2, r7, #12
 8011a2c:	f107 0308 	add.w	r3, r7, #8
 8011a30:	4619      	mov	r1, r3
 8011a32:	6838      	ldr	r0, [r7, #0]
 8011a34:	f7f7 fa8b 	bl	8008f4e <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8011a38:	eef0 7a40 	vmov.f32	s15, s0
  }
 8011a3c:	eeb0 0a67 	vmov.f32	s0, s15
 8011a40:	3710      	adds	r7, #16
 8011a42:	46bd      	mov	sp, r7
 8011a44:	bd80      	pop	{r7, pc}

08011a46 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8011a46:	b480      	push	{r7}
 8011a48:	b083      	sub	sp, #12
 8011a4a:	af00      	add	r7, sp, #0
 8011a4c:	6078      	str	r0, [r7, #4]
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	4618      	mov	r0, r3
 8011a54:	370c      	adds	r7, #12
 8011a56:	46bd      	mov	sp, r7
 8011a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a5c:	4770      	bx	lr

08011a5e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8011a5e:	b480      	push	{r7}
 8011a60:	b083      	sub	sp, #12
 8011a62:	af00      	add	r7, sp, #0
 8011a64:	6078      	str	r0, [r7, #4]
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	685b      	ldr	r3, [r3, #4]
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	370c      	adds	r7, #12
 8011a6e:	46bd      	mov	sp, r7
 8011a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a74:	4770      	bx	lr

08011a76 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8011a76:	b480      	push	{r7}
 8011a78:	b083      	sub	sp, #12
 8011a7a:	af00      	add	r7, sp, #0
 8011a7c:	6078      	str	r0, [r7, #4]
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	4618      	mov	r0, r3
 8011a82:	370c      	adds	r7, #12
 8011a84:	46bd      	mov	sp, r7
 8011a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a8a:	4770      	bx	lr

08011a8c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	b086      	sub	sp, #24
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	60f8      	str	r0, [r7, #12]
 8011a94:	60b9      	str	r1, [r7, #8]
 8011a96:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 8011a98:	6879      	ldr	r1, [r7, #4]
 8011a9a:	68b8      	ldr	r0, [r7, #8]
 8011a9c:	f000 fba2 	bl	80121e4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 8011aa0:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 8011aa2:	6879      	ldr	r1, [r7, #4]
 8011aa4:	68b8      	ldr	r0, [r7, #8]
 8011aa6:	f000 fba9 	bl	80121fc <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE20colIndexByOuterInnerEii>
 8011aaa:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 8011aac:	693a      	ldr	r2, [r7, #16]
 8011aae:	6979      	ldr	r1, [r7, #20]
 8011ab0:	68f8      	ldr	r0, [r7, #12]
 8011ab2:	f000 fbaf 	bl	8012214 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE11assignCoeffEii>
  }
 8011ab6:	bf00      	nop
 8011ab8:	3718      	adds	r7, #24
 8011aba:	46bd      	mov	sp, r7
 8011abc:	bd80      	pop	{r7, pc}

08011abe <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi1ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8011abe:	b580      	push	{r7, lr}
 8011ac0:	b082      	sub	sp, #8
 8011ac2:	af00      	add	r7, sp, #0
 8011ac4:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8011ac6:	2201      	movs	r2, #1
 8011ac8:	2100      	movs	r1, #0
 8011aca:	6878      	ldr	r0, [r7, #4]
 8011acc:	f7ff ffde 	bl	8011a8c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8011ad0:	6878      	ldr	r0, [r7, #4]
 8011ad2:	f000 fbc5 	bl	8012260 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi2ELi9EE3runERSE_>
  }
 8011ad6:	bf00      	nop
 8011ad8:	3708      	adds	r7, #8
 8011ada:	46bd      	mov	sp, r7
 8011adc:	bd80      	pop	{r7, pc}

08011ade <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8011ade:	b580      	push	{r7, lr}
 8011ae0:	b082      	sub	sp, #8
 8011ae2:	af00      	add	r7, sp, #0
 8011ae4:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	689b      	ldr	r3, [r3, #8]
 8011aea:	4618      	mov	r0, r3
 8011aec:	f7fb fe62 	bl	800d7b4 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 8011af0:	4603      	mov	r3, r0
    }
 8011af2:	4618      	mov	r0, r3
 8011af4:	3708      	adds	r7, #8
 8011af6:	46bd      	mov	sp, r7
 8011af8:	bd80      	pop	{r7, pc}

08011afa <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8011afa:	b580      	push	{r7, lr}
 8011afc:	b082      	sub	sp, #8
 8011afe:	af00      	add	r7, sp, #0
 8011b00:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	689b      	ldr	r3, [r3, #8]
 8011b06:	4618      	mov	r0, r3
 8011b08:	f7f6 fc04 	bl	8008314 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 8011b0c:	4603      	mov	r3, r0
    }
 8011b0e:	4618      	mov	r0, r3
 8011b10:	3708      	adds	r7, #8
 8011b12:	46bd      	mov	sp, r7
 8011b14:	bd80      	pop	{r7, pc}

08011b16 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>:
 8011b16:	b480      	push	{r7}
 8011b18:	b083      	sub	sp, #12
 8011b1a:	af00      	add	r7, sp, #0
 8011b1c:	6078      	str	r0, [r7, #4]
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	4618      	mov	r0, r3
 8011b22:	370c      	adds	r7, #12
 8011b24:	46bd      	mov	sp, r7
 8011b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b2a:	4770      	bx	lr

08011b2c <_ZN5Eigen8internal15block_evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERKNS_5BlockISE_Li1ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 8011b2c:	b580      	push	{r7, lr}
 8011b2e:	b082      	sub	sp, #8
 8011b30:	af00      	add	r7, sp, #0
 8011b32:	6078      	str	r0, [r7, #4]
 8011b34:	6039      	str	r1, [r7, #0]
    : unary_evaluator<XprType>(block)
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	6839      	ldr	r1, [r7, #0]
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	f000 fbb9 	bl	80122b2 <_ZN5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfEC1ERKSG_>
  {}
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	4618      	mov	r0, r3
 8011b44:	3708      	adds	r7, #8
 8011b46:	46bd      	mov	sp, r7
 8011b48:	bd80      	pop	{r7, pc}

08011b4a <_ZNK5Eigen8internal18scalar_constant_opIfEclEv>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar operator() () const { return m_other; }
 8011b4a:	b480      	push	{r7}
 8011b4c:	b083      	sub	sp, #12
 8011b4e:	af00      	add	r7, sp, #0
 8011b50:	6078      	str	r0, [r7, #4]
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	ee07 3a90 	vmov	s15, r3
 8011b5a:	eeb0 0a67 	vmov.f32	s0, s15
 8011b5e:	370c      	adds	r7, #12
 8011b60:	46bd      	mov	sp, r7
 8011b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b66:	4770      	bx	lr

08011b68 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 8011b68:	b590      	push	{r4, r7, lr}
 8011b6a:	b083      	sub	sp, #12
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	6078      	str	r0, [r7, #4]
 8011b70:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8011b72:	6878      	ldr	r0, [r7, #4]
 8011b74:	f000 fc05 	bl	8012382 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8011b78:	683b      	ldr	r3, [r7, #0]
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	f000 f81e 	bl	8011bbc <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4dataEv>
 8011b80:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	601a      	str	r2, [r3, #0]
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	1d1c      	adds	r4, r3, #4
 8011b8a:	683b      	ldr	r3, [r7, #0]
 8011b8c:	4618      	mov	r0, r3
 8011b8e:	f000 fbdc 	bl	801234a <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11innerStrideEv>
 8011b92:	4603      	mov	r3, r0
 8011b94:	4619      	mov	r1, r3
 8011b96:	4620      	mov	r0, r4
 8011b98:	f7f4 fdd4 	bl	8006744 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	1d5c      	adds	r4, r3, #5
 8011ba0:	683b      	ldr	r3, [r7, #0]
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	f000 fbdf 	bl	8012366 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11outerStrideEv>
 8011ba8:	4603      	mov	r3, r0
 8011baa:	4619      	mov	r1, r3
 8011bac:	4620      	mov	r0, r4
 8011bae:	f7f4 fde3 	bl	8006778 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
  }
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	4618      	mov	r0, r3
 8011bb6:	370c      	adds	r7, #12
 8011bb8:	46bd      	mov	sp, r7
 8011bba:	bd90      	pop	{r4, r7, pc}

08011bbc <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4dataEv>:
 8011bbc:	b480      	push	{r7}
 8011bbe:	b083      	sub	sp, #12
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	6078      	str	r0, [r7, #4]
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	4618      	mov	r0, r3
 8011bca:	370c      	adds	r7, #12
 8011bcc:	46bd      	mov	sp, r7
 8011bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd2:	4770      	bx	lr

08011bd4 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffEC1ERKS5_>:
  explicit product_evaluator(const XprType& xpr)
 8011bd4:	b580      	push	{r7, lr}
 8011bd6:	b082      	sub	sp, #8
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	6078      	str	r0, [r7, #4]
 8011bdc:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 8011bde:	6878      	ldr	r0, [r7, #4]
 8011be0:	f000 fbf2 	bl	80123c8 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 8011be4:	6838      	ldr	r0, [r7, #0]
 8011be6:	f000 fbd7 	bl	8012398 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3lhsEv>
 8011bea:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 8011bf0:	6838      	ldr	r0, [r7, #0]
 8011bf2:	f000 fbdd 	bl	80123b0 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3rhsEv>
 8011bf6:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	605a      	str	r2, [r3, #4]
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 8011c06:	4619      	mov	r1, r3
 8011c08:	4610      	mov	r0, r2
 8011c0a:	f7f5 fca7 	bl	800755c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	685b      	ldr	r3, [r3, #4]
      m_innerDim(xpr.lhs().cols())
 8011c18:	4619      	mov	r1, r3
 8011c1a:	4610      	mov	r0, r2
 8011c1c:	f7f5 fc9e 	bl	800755c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 8011c20:	6838      	ldr	r0, [r7, #0]
 8011c22:	f000 fbb9 	bl	8012398 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3lhsEv>
 8011c26:	4603      	mov	r3, r0
 8011c28:	4618      	mov	r0, r3
 8011c2a:	f7f2 fff5 	bl	8004c18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8011c2e:	4602      	mov	r2, r0
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	611a      	str	r2, [r3, #16]
  }
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	4618      	mov	r0, r3
 8011c38:	3708      	adds	r7, #8
 8011c3a:	46bd      	mov	sp, r7
 8011c3c:	bd80      	pop	{r7, pc}

08011c3e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8011c3e:	b580      	push	{r7, lr}
 8011c40:	b082      	sub	sp, #8
 8011c42:	af00      	add	r7, sp, #0
 8011c44:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8011c46:	2200      	movs	r2, #0
 8011c48:	2100      	movs	r1, #0
 8011c4a:	6878      	ldr	r0, [r7, #4]
 8011c4c:	f000 fbc7 	bl	80123de <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8011c50:	6878      	ldr	r0, [r7, #4]
 8011c52:	f000 fbdd 	bl	8012410 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSC_>
  }
 8011c56:	bf00      	nop
 8011c58:	3708      	adds	r7, #8
 8011c5a:	46bd      	mov	sp, r7
 8011c5c:	bd80      	pop	{r7, pc}

08011c5e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1ERKS8_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8011c5e:	b580      	push	{r7, lr}
 8011c60:	b082      	sub	sp, #8
 8011c62:	af00      	add	r7, sp, #0
 8011c64:	6078      	str	r0, [r7, #4]
 8011c66:	6039      	str	r1, [r7, #0]
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	6839      	ldr	r1, [r7, #0]
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	f000 fbdf 	bl	8012430 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EEC1ERKNS_5BlockIS6_Li3ELi1ELb0EEE>
  }
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	4618      	mov	r0, r3
 8011c76:	3708      	adds	r7, #8
 8011c78:	46bd      	mov	sp, r7
 8011c7a:	bd80      	pop	{r7, pc}

08011c7c <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8011c7c:	b480      	push	{r7}
 8011c7e:	b083      	sub	sp, #12
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	6078      	str	r0, [r7, #4]
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	4618      	mov	r0, r3
 8011c88:	370c      	adds	r7, #12
 8011c8a:	46bd      	mov	sp, r7
 8011c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c90:	4770      	bx	lr

08011c92 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8011c92:	b5b0      	push	{r4, r5, r7, lr}
 8011c94:	b084      	sub	sp, #16
 8011c96:	af00      	add	r7, sp, #0
 8011c98:	60f8      	str	r0, [r7, #12]
 8011c9a:	60b9      	str	r1, [r7, #8]
 8011c9c:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	681c      	ldr	r4, [r3, #0]
 8011ca2:	68f8      	ldr	r0, [r7, #12]
 8011ca4:	f000 fbd8 	bl	8012458 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>
 8011ca8:	4602      	mov	r2, r0
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	fb03 f502 	mul.w	r5, r3, r2
 8011cb0:	68f8      	ldr	r0, [r7, #12]
 8011cb2:	f000 fbdc 	bl	801246e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>
 8011cb6:	4602      	mov	r2, r0
 8011cb8:	68bb      	ldr	r3, [r7, #8]
 8011cba:	fb02 f303 	mul.w	r3, r2, r3
 8011cbe:	442b      	add	r3, r5
 8011cc0:	009b      	lsls	r3, r3, #2
 8011cc2:	4423      	add	r3, r4
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	ee07 3a90 	vmov	s15, r3
  }
 8011cca:	eeb0 0a67 	vmov.f32	s0, s15
 8011cce:	3710      	adds	r7, #16
 8011cd0:	46bd      	mov	sp, r7
 8011cd2:	bdb0      	pop	{r4, r5, r7, pc}

08011cd4 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 8011cd4:	b590      	push	{r4, r7, lr}
 8011cd6:	b083      	sub	sp, #12
 8011cd8:	af00      	add	r7, sp, #0
 8011cda:	6078      	str	r0, [r7, #4]
 8011cdc:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 8011cde:	6878      	ldr	r0, [r7, #4]
 8011ce0:	f000 fbdd 	bl	801249e <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 8011ce4:	687c      	ldr	r4, [r7, #4]
 8011ce6:	6838      	ldr	r0, [r7, #0]
 8011ce8:	f000 fbcc 	bl	8012484 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>
 8011cec:	4603      	mov	r3, r0
 8011cee:	2200      	movs	r2, #0
 8011cf0:	4619      	mov	r1, r3
 8011cf2:	4620      	mov	r0, r4
 8011cf4:	f7f5 f88b 	bl	8006e0e <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	370c      	adds	r7, #12
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	bd90      	pop	{r4, r7, pc}
	...

08011d04 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 8011d04:	b580      	push	{r7, lr}
 8011d06:	b084      	sub	sp, #16
 8011d08:	af00      	add	r7, sp, #0
 8011d0a:	60f8      	str	r0, [r7, #12]
 8011d0c:	60b9      	str	r1, [r7, #8]
 8011d0e:	607a      	str	r2, [r7, #4]
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	687a      	ldr	r2, [r7, #4]
 8011d14:	68b9      	ldr	r1, [r7, #8]
 8011d16:	4618      	mov	r0, r3
 8011d18:	f000 fbcc 	bl	80124b4 <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ENS_5DenseEEC1ERS5_i>
      eigen_assert( (i>=0) && (
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	db06      	blt.n	8011d30 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x2c>
 8011d22:	68b8      	ldr	r0, [r7, #8]
 8011d24:	f7f4 fe6b 	bl	80069fe <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8011d28:	4602      	mov	r2, r0
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	4293      	cmp	r3, r2
 8011d2e:	db05      	blt.n	8011d3c <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x38>
 8011d30:	4b05      	ldr	r3, [pc, #20]	; (8011d48 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x44>)
 8011d32:	4a06      	ldr	r2, [pc, #24]	; (8011d4c <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x48>)
 8011d34:	2178      	movs	r1, #120	; 0x78
 8011d36:	4806      	ldr	r0, [pc, #24]	; (8011d50 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x4c>)
 8011d38:	f00b fe90 	bl	801da5c <__assert_func>
    }
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	4618      	mov	r0, r3
 8011d40:	3710      	adds	r7, #16
 8011d42:	46bd      	mov	sp, r7
 8011d44:	bd80      	pop	{r7, pc}
 8011d46:	bf00      	nop
 8011d48:	08024448 	.word	0x08024448
 8011d4c:	080281ac 	.word	0x080281ac
 8011d50:	080245cc 	.word	0x080245cc

08011d54 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8011d54:	b480      	push	{r7}
 8011d56:	b083      	sub	sp, #12
 8011d58:	af00      	add	r7, sp, #0
 8011d5a:	6078      	str	r0, [r7, #4]
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	4618      	mov	r0, r3
 8011d60:	370c      	adds	r7, #12
 8011d62:	46bd      	mov	sp, r7
 8011d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d68:	4770      	bx	lr

08011d6a <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>:
 8011d6a:	b580      	push	{r7, lr}
 8011d6c:	b082      	sub	sp, #8
 8011d6e:	af00      	add	r7, sp, #0
 8011d70:	6078      	str	r0, [r7, #4]
 8011d72:	6878      	ldr	r0, [r7, #4]
 8011d74:	f000 fbaf 	bl	80124d6 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	4618      	mov	r0, r3
 8011d7c:	3708      	adds	r7, #8
 8011d7e:	46bd      	mov	sp, r7
 8011d80:	bd80      	pop	{r7, pc}

08011d82 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8011d82:	b580      	push	{r7, lr}
 8011d84:	b082      	sub	sp, #8
 8011d86:	af00      	add	r7, sp, #0
 8011d88:	6078      	str	r0, [r7, #4]
 8011d8a:	6878      	ldr	r0, [r7, #4]
 8011d8c:	f7ff ffed 	bl	8011d6a <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	4618      	mov	r0, r3
 8011d94:	3708      	adds	r7, #8
 8011d96:	46bd      	mov	sp, r7
 8011d98:	bd80      	pop	{r7, pc}

08011d9a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 8011d9a:	b580      	push	{r7, lr}
 8011d9c:	b082      	sub	sp, #8
 8011d9e:	af00      	add	r7, sp, #0
 8011da0:	6078      	str	r0, [r7, #4]
 8011da2:	f7f4 fd0e 	bl	80067c2 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8011da6:	4603      	mov	r3, r0
 8011da8:	4618      	mov	r0, r3
 8011daa:	3708      	adds	r7, #8
 8011dac:	46bd      	mov	sp, r7
 8011dae:	bd80      	pop	{r7, pc}

08011db0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 8011db0:	b580      	push	{r7, lr}
 8011db2:	b082      	sub	sp, #8
 8011db4:	af00      	add	r7, sp, #0
 8011db6:	6078      	str	r0, [r7, #4]
 8011db8:	f7f4 fd0b 	bl	80067d2 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8011dbc:	4603      	mov	r3, r0
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	3708      	adds	r7, #8
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	bd80      	pop	{r7, pc}
	...

08011dc8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8011dc8:	b5b0      	push	{r4, r5, r7, lr}
 8011dca:	b084      	sub	sp, #16
 8011dcc:	af00      	add	r7, sp, #0
 8011dce:	60f8      	str	r0, [r7, #12]
 8011dd0:	60b9      	str	r1, [r7, #8]
 8011dd2:	607a      	str	r2, [r7, #4]
 8011dd4:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8011dd6:	68f8      	ldr	r0, [r7, #12]
 8011dd8:	f7ff ffd3 	bl	8011d82 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS_5DenseEEC1Ev>
 8011ddc:	68fa      	ldr	r2, [r7, #12]
 8011dde:	68bb      	ldr	r3, [r7, #8]
 8011de0:	4614      	mov	r4, r2
 8011de2:	461d      	mov	r5, r3
 8011de4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011de6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011de8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011dec:	e884 0003 	stmia.w	r4, {r0, r1}
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	f103 0218 	add.w	r2, r3, #24
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	4614      	mov	r4, r2
 8011dfa:	461d      	mov	r5, r3
 8011dfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011dfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011e00:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011e04:	e884 0003 	stmia.w	r4, {r0, r1}
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	3330      	adds	r3, #48	; 0x30
 8011e0c:	6839      	ldr	r1, [r7, #0]
 8011e0e:	4618      	mov	r0, r3
 8011e10:	f7f3 fa38 	bl	8005284 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8011e14:	68b8      	ldr	r0, [r7, #8]
 8011e16:	f7f9 fba1 	bl	800b55c <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 8011e1a:	4604      	mov	r4, r0
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	4618      	mov	r0, r3
 8011e20:	f7ff ffbb 	bl	8011d9a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4rowsEv>
 8011e24:	4603      	mov	r3, r0
 8011e26:	429c      	cmp	r4, r3
 8011e28:	d10a      	bne.n	8011e40 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x78>
 8011e2a:	68b8      	ldr	r0, [r7, #8]
 8011e2c:	f7f9 fba3 	bl	800b576 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 8011e30:	4604      	mov	r4, r0
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	4618      	mov	r0, r3
 8011e36:	f7ff ffbb 	bl	8011db0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4colsEv>
 8011e3a:	4603      	mov	r3, r0
 8011e3c:	429c      	cmp	r4, r3
 8011e3e:	d005      	beq.n	8011e4c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x84>
 8011e40:	4b05      	ldr	r3, [pc, #20]	; (8011e58 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x90>)
 8011e42:	4a06      	ldr	r2, [pc, #24]	; (8011e5c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x94>)
 8011e44:	2174      	movs	r1, #116	; 0x74
 8011e46:	4806      	ldr	r0, [pc, #24]	; (8011e60 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x98>)
 8011e48:	f00b fe08 	bl	801da5c <__assert_func>
    }
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	4618      	mov	r0, r3
 8011e50:	3710      	adds	r7, #16
 8011e52:	46bd      	mov	sp, r7
 8011e54:	bdb0      	pop	{r4, r5, r7, pc}
 8011e56:	bf00      	nop
 8011e58:	0801f8c4 	.word	0x0801f8c4
 8011e5c:	0802829c 	.word	0x0802829c
 8011e60:	0801fb28 	.word	0x0801fb28

08011e64 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8011e64:	b580      	push	{r7, lr}
 8011e66:	b082      	sub	sp, #8
 8011e68:	af00      	add	r7, sp, #0
 8011e6a:	6078      	str	r0, [r7, #4]
 8011e6c:	6878      	ldr	r0, [r7, #4]
 8011e6e:	f000 f809 	bl	8011e84 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 8011e72:	4603      	mov	r3, r0
 8011e74:	4618      	mov	r0, r3
 8011e76:	f000 fb39 	bl	80124ec <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE4colsEv>
 8011e7a:	4603      	mov	r3, r0
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	3708      	adds	r7, #8
 8011e80:	46bd      	mov	sp, r7
 8011e82:	bd80      	pop	{r7, pc}

08011e84 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8011e84:	b480      	push	{r7}
 8011e86:	b083      	sub	sp, #12
 8011e88:	af00      	add	r7, sp, #0
 8011e8a:	6078      	str	r0, [r7, #4]
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	4618      	mov	r0, r3
 8011e90:	370c      	adds	r7, #12
 8011e92:	46bd      	mov	sp, r7
 8011e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e98:	4770      	bx	lr

08011e9a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8011e9a:	b580      	push	{r7, lr}
 8011e9c:	b082      	sub	sp, #8
 8011e9e:	af00      	add	r7, sp, #0
 8011ea0:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	4618      	mov	r0, r3
 8011ea6:	f7f9 fb59 	bl	800b55c <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 8011eaa:	4603      	mov	r3, r0
    }
 8011eac:	4618      	mov	r0, r3
 8011eae:	3708      	adds	r7, #8
 8011eb0:	46bd      	mov	sp, r7
 8011eb2:	bd80      	pop	{r7, pc}

08011eb4 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	b082      	sub	sp, #8
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	6078      	str	r0, [r7, #4]
 8011ebc:	6878      	ldr	r0, [r7, #4]
 8011ebe:	f000 fb3c 	bl	801253a <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	4618      	mov	r0, r3
 8011ec6:	3708      	adds	r7, #8
 8011ec8:	46bd      	mov	sp, r7
 8011eca:	bd80      	pop	{r7, pc}

08011ecc <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 8011ecc:	b580      	push	{r7, lr}
 8011ece:	b082      	sub	sp, #8
 8011ed0:	af00      	add	r7, sp, #0
 8011ed2:	6078      	str	r0, [r7, #4]
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	f7ff ffec 	bl	8011eb4 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	4618      	mov	r0, r3
 8011ee0:	3708      	adds	r7, #8
 8011ee2:	46bd      	mov	sp, r7
 8011ee4:	bd80      	pop	{r7, pc}

08011ee6 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 8011ee6:	b580      	push	{r7, lr}
 8011ee8:	b082      	sub	sp, #8
 8011eea:	af00      	add	r7, sp, #0
 8011eec:	6078      	str	r0, [r7, #4]
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	f7ff ffeb 	bl	8011ecc <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EED1Ev>
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	4618      	mov	r0, r3
 8011efa:	3708      	adds	r7, #8
 8011efc:	46bd      	mov	sp, r7
 8011efe:	bd80      	pop	{r7, pc}

08011f00 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<const T>
 8011f00:	b580      	push	{r7, lr}
 8011f02:	b082      	sub	sp, #8
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	6078      	str	r0, [r7, #4]
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	4618      	mov	r0, r3
 8011f0c:	f7ff ffeb 	bl	8011ee6 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	4618      	mov	r0, r3
 8011f14:	3708      	adds	r7, #8
 8011f16:	46bd      	mov	sp, r7
 8011f18:	bd80      	pop	{r7, pc}

08011f1a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4DataD1Ev>:
  struct Data
 8011f1a:	b580      	push	{r7, lr}
 8011f1c:	b082      	sub	sp, #8
 8011f1e:	af00      	add	r7, sp, #0
 8011f20:	6078      	str	r0, [r7, #4]
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	330c      	adds	r3, #12
 8011f26:	4618      	mov	r0, r3
 8011f28:	f7ff ffea 	bl	8011f00 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	3304      	adds	r3, #4
 8011f30:	4618      	mov	r0, r3
 8011f32:	f7f9 fc09 	bl	800b748 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	4618      	mov	r0, r3
 8011f3a:	3708      	adds	r7, #8
 8011f3c:	46bd      	mov	sp, r7
 8011f3e:	bd80      	pop	{r7, pc}

08011f40 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8011f40:	b580      	push	{r7, lr}
 8011f42:	b082      	sub	sp, #8
 8011f44:	af00      	add	r7, sp, #0
 8011f46:	6078      	str	r0, [r7, #4]
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	f7ff ffe5 	bl	8011f1a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4DataD1Ev>
 8011f50:	6878      	ldr	r0, [r7, #4]
 8011f52:	f000 fae7 	bl	8012524 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	4618      	mov	r0, r3
 8011f5a:	3708      	adds	r7, #8
 8011f5c:	46bd      	mov	sp, r7
 8011f5e:	bd80      	pop	{r7, pc}

08011f60 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8011f60:	b580      	push	{r7, lr}
 8011f62:	b082      	sub	sp, #8
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	6078      	str	r0, [r7, #4]
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	f7ff ffe8 	bl	8011f40 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffED1Ev>
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	4618      	mov	r0, r3
 8011f74:	3708      	adds	r7, #8
 8011f76:	46bd      	mov	sp, r7
 8011f78:	bd80      	pop	{r7, pc}

08011f7a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 8011f7a:	b580      	push	{r7, lr}
 8011f7c:	b082      	sub	sp, #8
 8011f7e:	af00      	add	r7, sp, #0
 8011f80:	6078      	str	r0, [r7, #4]
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	4618      	mov	r0, r3
 8011f86:	f7ff ffeb 	bl	8011f60 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	4618      	mov	r0, r3
 8011f8e:	3708      	adds	r7, #8
 8011f90:	46bd      	mov	sp, r7
 8011f92:	bd80      	pop	{r7, pc}

08011f94 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 8011f94:	b580      	push	{r7, lr}
 8011f96:	ed2d 8b02 	vpush	{d8}
 8011f9a:	b088      	sub	sp, #32
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	6078      	str	r0, [r7, #4]
 8011fa0:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 8011fa2:	6878      	ldr	r0, [r7, #4]
 8011fa4:	f7ff fc53 	bl	801184e <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE4rowsEv>
 8011fa8:	4603      	mov	r3, r0
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	dd05      	ble.n	8011fba <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 8011fae:	6878      	ldr	r0, [r7, #4]
 8011fb0:	f7ff ff58 	bl	8011e64 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE4colsEv>
 8011fb4:	4603      	mov	r3, r0
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	dc06      	bgt.n	8011fc8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 8011fba:	4b16      	ldr	r3, [pc, #88]	; (8012014 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 8011fbc:	4a16      	ldr	r2, [pc, #88]	; (8012018 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 8011fbe:	f240 119b 	movw	r1, #411	; 0x19b
 8011fc2:	4816      	ldr	r0, [pc, #88]	; (801201c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 8011fc4:	f00b fd4a 	bl	801da5c <__assert_func>
 8011fc8:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8011fca:	6878      	ldr	r0, [r7, #4]
 8011fcc:	f7ff ff5a 	bl	8011e84 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 8011fd0:	4602      	mov	r2, r0
 8011fd2:	f107 030c 	add.w	r3, r7, #12
 8011fd6:	4611      	mov	r1, r2
 8011fd8:	4618      	mov	r0, r3
 8011fda:	f000 fa94 	bl	8012506 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1ERKSJ_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8011fde:	6878      	ldr	r0, [r7, #4]
 8011fe0:	f7ff ff50 	bl	8011e84 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 8011fe4:	4602      	mov	r2, r0
 8011fe6:	f107 030c 	add.w	r3, r7, #12
 8011fea:	6839      	ldr	r1, [r7, #0]
 8011fec:	4618      	mov	r0, r3
 8011fee:	f000 faaf 	bl	8012550 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISM_EEfRKSN_RKS3_RKT_>
 8011ff2:	eeb0 8a40 	vmov.f32	s16, s0
 8011ff6:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8011ff8:	f107 030c 	add.w	r3, r7, #12
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	f7ff ffbc 	bl	8011f7a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8012002:	eef0 7a48 	vmov.f32	s15, s16
}
 8012006:	eeb0 0a67 	vmov.f32	s0, s15
 801200a:	3720      	adds	r7, #32
 801200c:	46bd      	mov	sp, r7
 801200e:	ecbd 8b02 	vpop	{d8}
 8012012:	bd80      	pop	{r7, pc}
 8012014:	08024944 	.word	0x08024944
 8012018:	0802850c 	.word	0x0802850c
 801201c:	08024b50 	.word	0x08024b50

08012020 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8012020:	b480      	push	{r7}
 8012022:	b083      	sub	sp, #12
 8012024:	af00      	add	r7, sp, #0
 8012026:	6078      	str	r0, [r7, #4]
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	3310      	adds	r3, #16
 801202c:	4618      	mov	r0, r3
 801202e:	370c      	adds	r7, #12
 8012030:	46bd      	mov	sp, r7
 8012032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012036:	4770      	bx	lr

08012038 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8012038:	b480      	push	{r7}
 801203a:	b083      	sub	sp, #12
 801203c:	af00      	add	r7, sp, #0
 801203e:	6078      	str	r0, [r7, #4]
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	4618      	mov	r0, r3
 8012044:	370c      	adds	r7, #12
 8012046:	46bd      	mov	sp, r7
 8012048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801204c:	4770      	bx	lr

0801204e <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 801204e:	b480      	push	{r7}
 8012050:	b083      	sub	sp, #12
 8012052:	af00      	add	r7, sp, #0
 8012054:	6078      	str	r0, [r7, #4]
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	68db      	ldr	r3, [r3, #12]
 801205a:	4618      	mov	r0, r3
 801205c:	370c      	adds	r7, #12
 801205e:	46bd      	mov	sp, r7
 8012060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012064:	4770      	bx	lr

08012066 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8012066:	b580      	push	{r7, lr}
 8012068:	b082      	sub	sp, #8
 801206a:	af00      	add	r7, sp, #0
 801206c:	6078      	str	r0, [r7, #4]
 801206e:	6039      	str	r1, [r7, #0]
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	6839      	ldr	r1, [r7, #0]
 8012074:	4618      	mov	r0, r3
 8012076:	f000 fa7c 	bl	8012572 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEEC1ERKS9_>
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	4618      	mov	r0, r3
 801207e:	3708      	adds	r7, #8
 8012080:	46bd      	mov	sp, r7
 8012082:	bd80      	pop	{r7, pc}

08012084 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS4_>:
 8012084:	b580      	push	{r7, lr}
 8012086:	b082      	sub	sp, #8
 8012088:	af00      	add	r7, sp, #0
 801208a:	6078      	str	r0, [r7, #4]
 801208c:	6039      	str	r1, [r7, #0]
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	6839      	ldr	r1, [r7, #0]
 8012092:	4618      	mov	r0, r3
 8012094:	f7f8 f8bb 	bl	800a20e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	4618      	mov	r0, r3
 801209c:	3708      	adds	r7, #8
 801209e:	46bd      	mov	sp, r7
 80120a0:	bd80      	pop	{r7, pc}

080120a2 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE5coeffEi>:
  CoeffReturnType coeff(Index index) const
 80120a2:	b5b0      	push	{r4, r5, r7, lr}
 80120a4:	b082      	sub	sp, #8
 80120a6:	af00      	add	r7, sp, #0
 80120a8:	6078      	str	r0, [r7, #4]
 80120aa:	6039      	str	r1, [r7, #0]
    return m_d.func()(m_d.lhsImpl.coeff(index), m_d.rhsImpl.coeff(index));
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	4618      	mov	r0, r3
 80120b0:	f000 fa6e 	bl	8012590 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4Data4funcEv>
 80120b4:	4604      	mov	r4, r0
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	3304      	adds	r3, #4
 80120ba:	6839      	ldr	r1, [r7, #0]
 80120bc:	4618      	mov	r0, r3
 80120be:	f7ff fc7f 	bl	80119c0 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEi>
 80120c2:	4605      	mov	r5, r0
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	330c      	adds	r3, #12
 80120c8:	6839      	ldr	r1, [r7, #0]
 80120ca:	4618      	mov	r0, r3
 80120cc:	f7ff fc78 	bl	80119c0 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEi>
 80120d0:	4603      	mov	r3, r0
 80120d2:	461a      	mov	r2, r3
 80120d4:	4629      	mov	r1, r5
 80120d6:	4620      	mov	r0, r4
 80120d8:	f7f6 ff39 	bl	8008f4e <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 80120dc:	eef0 7a40 	vmov.f32	s15, s0
  }
 80120e0:	eeb0 0a67 	vmov.f32	s0, s15
 80120e4:	3708      	adds	r7, #8
 80120e6:	46bd      	mov	sp, r7
 80120e8:	bdb0      	pop	{r4, r5, r7, pc}

080120ea <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 80120ea:	b590      	push	{r4, r7, lr}
 80120ec:	b083      	sub	sp, #12
 80120ee:	af00      	add	r7, sp, #0
 80120f0:	6078      	str	r0, [r7, #4]
 80120f2:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 80120f4:	6878      	ldr	r0, [r7, #4]
 80120f6:	f000 fa72 	bl	80125de <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 80120fa:	683b      	ldr	r3, [r7, #0]
 80120fc:	4618      	mov	r0, r3
 80120fe:	f000 f81e 	bl	801213e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4dataEv>
 8012102:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	601a      	str	r2, [r3, #0]
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	1d1c      	adds	r4, r3, #4
 801210c:	683b      	ldr	r3, [r7, #0]
 801210e:	4618      	mov	r0, r3
 8012110:	f000 fa49 	bl	80125a6 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE11innerStrideEv>
 8012114:	4603      	mov	r3, r0
 8012116:	4619      	mov	r1, r3
 8012118:	4620      	mov	r0, r4
 801211a:	f7f4 fb2d 	bl	8006778 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	1d5c      	adds	r4, r3, #5
 8012122:	683b      	ldr	r3, [r7, #0]
 8012124:	4618      	mov	r0, r3
 8012126:	f000 fa4c 	bl	80125c2 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE11outerStrideEv>
 801212a:	4603      	mov	r3, r0
 801212c:	4619      	mov	r1, r3
 801212e:	4620      	mov	r0, r4
 8012130:	f7f4 fb08 	bl	8006744 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	4618      	mov	r0, r3
 8012138:	370c      	adds	r7, #12
 801213a:	46bd      	mov	sp, r7
 801213c:	bd90      	pop	{r4, r7, pc}

0801213e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 801213e:	b480      	push	{r7}
 8012140:	b083      	sub	sp, #12
 8012142:	af00      	add	r7, sp, #0
 8012144:	6078      	str	r0, [r7, #4]
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	4618      	mov	r0, r3
 801214c:	370c      	adds	r7, #12
 801214e:	46bd      	mov	sp, r7
 8012150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012154:	4770      	bx	lr

08012156 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffEC1ERKSD_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8012156:	b580      	push	{r7, lr}
 8012158:	b082      	sub	sp, #8
 801215a:	af00      	add	r7, sp, #0
 801215c:	6078      	str	r0, [r7, #4]
 801215e:	6039      	str	r1, [r7, #0]
 8012160:	6878      	ldr	r0, [r7, #4]
 8012162:	f000 fa47 	bl	80125f4 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	6839      	ldr	r1, [r7, #0]
 801216a:	4618      	mov	r0, r3
 801216c:	f000 fa4d 	bl	801260a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4DataC1ERKSD_>
  }
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	4618      	mov	r0, r3
 8012174:	3708      	adds	r7, #8
 8012176:	46bd      	mov	sp, r7
 8012178:	bd80      	pop	{r7, pc}

0801217a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi1EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 801217a:	b580      	push	{r7, lr}
 801217c:	b082      	sub	sp, #8
 801217e:	af00      	add	r7, sp, #0
 8012180:	6078      	str	r0, [r7, #4]
 8012182:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8012184:	2200      	movs	r2, #0
 8012186:	2100      	movs	r1, #0
 8012188:	6878      	ldr	r0, [r7, #4]
 801218a:	f000 fa66 	bl	801265a <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE17coeffByOuterInnerEii>
 801218e:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012192:	eeb0 0a67 	vmov.f32	s0, s15
 8012196:	3708      	adds	r7, #8
 8012198:	46bd      	mov	sp, r7
 801219a:	bd80      	pop	{r7, pc}

0801219c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi1ELi2EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 801219c:	b580      	push	{r7, lr}
 801219e:	b084      	sub	sp, #16
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	6078      	str	r0, [r7, #4]
 80121a4:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80121a6:	6839      	ldr	r1, [r7, #0]
 80121a8:	6878      	ldr	r0, [r7, #4]
 80121aa:	f000 fa69 	bl	8012680 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi1ELi1EE3runERKSH_RKS3_>
 80121ae:	eef0 7a40 	vmov.f32	s15, s0
 80121b2:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 80121b6:	6839      	ldr	r1, [r7, #0]
 80121b8:	6878      	ldr	r0, [r7, #4]
 80121ba:	f000 fa72 	bl	80126a2 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi2ELi1EE3runERKSH_RKS3_>
 80121be:	eef0 7a40 	vmov.f32	s15, s0
 80121c2:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80121c6:	f107 020c 	add.w	r2, r7, #12
 80121ca:	f107 0308 	add.w	r3, r7, #8
 80121ce:	4619      	mov	r1, r3
 80121d0:	6838      	ldr	r0, [r7, #0]
 80121d2:	f7f6 febc 	bl	8008f4e <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 80121d6:	eef0 7a40 	vmov.f32	s15, s0
  }
 80121da:	eeb0 0a67 	vmov.f32	s0, s15
 80121de:	3710      	adds	r7, #16
 80121e0:	46bd      	mov	sp, r7
 80121e2:	bd80      	pop	{r7, pc}

080121e4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 80121e4:	b480      	push	{r7}
 80121e6:	b083      	sub	sp, #12
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	6078      	str	r0, [r7, #4]
 80121ec:	6039      	str	r1, [r7, #0]
      : inner;
 80121ee:	683b      	ldr	r3, [r7, #0]
  }
 80121f0:	4618      	mov	r0, r3
 80121f2:	370c      	adds	r7, #12
 80121f4:	46bd      	mov	sp, r7
 80121f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121fa:	4770      	bx	lr

080121fc <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 80121fc:	b480      	push	{r7}
 80121fe:	b083      	sub	sp, #12
 8012200:	af00      	add	r7, sp, #0
 8012202:	6078      	str	r0, [r7, #4]
 8012204:	6039      	str	r1, [r7, #0]
      : outer;
 8012206:	687b      	ldr	r3, [r7, #4]
  }
 8012208:	4618      	mov	r0, r3
 801220a:	370c      	adds	r7, #12
 801220c:	46bd      	mov	sp, r7
 801220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012212:	4770      	bx	lr

08012214 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 8012214:	b5b0      	push	{r4, r5, r7, lr}
 8012216:	b086      	sub	sp, #24
 8012218:	af00      	add	r7, sp, #0
 801221a:	60f8      	str	r0, [r7, #12]
 801221c:	60b9      	str	r1, [r7, #8]
 801221e:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	689c      	ldr	r4, [r3, #8]
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	687a      	ldr	r2, [r7, #4]
 801222a:	68b9      	ldr	r1, [r7, #8]
 801222c:	4618      	mov	r0, r3
 801222e:	f7f6 fb2d 	bl	800888c <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 8012232:	4605      	mov	r5, r0
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	685b      	ldr	r3, [r3, #4]
 8012238:	687a      	ldr	r2, [r7, #4]
 801223a:	68b9      	ldr	r1, [r7, #8]
 801223c:	4618      	mov	r0, r3
 801223e:	f000 fa41 	bl	80126c4 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffE5coeffEii>
 8012242:	eef0 7a40 	vmov.f32	s15, s0
 8012246:	edc7 7a05 	vstr	s15, [r7, #20]
 801224a:	f107 0314 	add.w	r3, r7, #20
 801224e:	461a      	mov	r2, r3
 8012250:	4629      	mov	r1, r5
 8012252:	4620      	mov	r0, r4
 8012254:	f000 fa69 	bl	801272a <_ZNK5Eigen8internal13sub_assign_opIffE11assignCoeffERfRKf>
  }
 8012258:	bf00      	nop
 801225a:	3718      	adds	r7, #24
 801225c:	46bd      	mov	sp, r7
 801225e:	bdb0      	pop	{r4, r5, r7, pc}

08012260 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi2ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8012260:	b580      	push	{r7, lr}
 8012262:	b082      	sub	sp, #8
 8012264:	af00      	add	r7, sp, #0
 8012266:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8012268:	2202      	movs	r2, #2
 801226a:	2100      	movs	r1, #0
 801226c:	6878      	ldr	r0, [r7, #4]
 801226e:	f7ff fc0d 	bl	8011a8c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8012272:	6878      	ldr	r0, [r7, #4]
 8012274:	f000 fa70 	bl	8012758 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi3ELi9EE3runERSE_>
  }
 8012278:	bf00      	nop
 801227a:	3708      	adds	r7, #8
 801227c:	46bd      	mov	sp, r7
 801227e:	bd80      	pop	{r7, pc}

08012280 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startRowEv>:
    StorageIndex startRow() const EIGEN_NOEXCEPT
 8012280:	b580      	push	{r7, lr}
 8012282:	b082      	sub	sp, #8
 8012284:	af00      	add	r7, sp, #0
 8012286:	6078      	str	r0, [r7, #4]
      return m_startRow.value();
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	3310      	adds	r3, #16
 801228c:	4618      	mov	r0, r3
 801228e:	f7fd fff8 	bl	8010282 <_ZNK5Eigen8internal19variable_if_dynamicIiLin1EE5valueEv>
 8012292:	4603      	mov	r3, r0
    }
 8012294:	4618      	mov	r0, r3
 8012296:	3708      	adds	r7, #8
 8012298:	46bd      	mov	sp, r7
 801229a:	bd80      	pop	{r7, pc}

0801229c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startColEv>:
    StorageIndex startCol() const EIGEN_NOEXCEPT
 801229c:	b580      	push	{r7, lr}
 801229e:	b082      	sub	sp, #8
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	6078      	str	r0, [r7, #4]
      return m_startCol.value();
 80122a4:	f7fd fbbd 	bl	800fa22 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EE5valueEv>
 80122a8:	4603      	mov	r3, r0
    }
 80122aa:	4618      	mov	r0, r3
 80122ac:	3708      	adds	r7, #8
 80122ae:	46bd      	mov	sp, r7
 80122b0:	bd80      	pop	{r7, pc}

080122b2 <_ZN5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfEC1ERKSG_>:
  explicit unary_evaluator(const XprType& block)
 80122b2:	b5b0      	push	{r4, r5, r7, lr}
 80122b4:	b082      	sub	sp, #8
 80122b6:	af00      	add	r7, sp, #0
 80122b8:	6078      	str	r0, [r7, #4]
 80122ba:	6039      	str	r1, [r7, #0]
      m_linear_offset(ForwardLinearAccess?(ArgType::IsRowMajor ? block.startRow()*block.nestedExpression().cols() + block.startCol() : block.startCol()*block.nestedExpression().rows() + block.startRow()):0)
 80122bc:	6878      	ldr	r0, [r7, #4]
 80122be:	f000 fa66 	bl	801278e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>
 80122c2:	687c      	ldr	r4, [r7, #4]
    : m_argImpl(block.nestedExpression()),
 80122c4:	683b      	ldr	r3, [r7, #0]
 80122c6:	4618      	mov	r0, r3
 80122c8:	f000 fa56 	bl	8012778 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE16nestedExpressionEv>
 80122cc:	4603      	mov	r3, r0
      m_linear_offset(ForwardLinearAccess?(ArgType::IsRowMajor ? block.startRow()*block.nestedExpression().cols() + block.startCol() : block.startCol()*block.nestedExpression().rows() + block.startRow()):0)
 80122ce:	4619      	mov	r1, r3
 80122d0:	4620      	mov	r0, r4
 80122d2:	f000 fa67 	bl	80127a4 <_ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERSE_>
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	f103 0410 	add.w	r4, r3, #16
 80122dc:	683b      	ldr	r3, [r7, #0]
 80122de:	4618      	mov	r0, r3
 80122e0:	f7ff ffce 	bl	8012280 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startRowEv>
 80122e4:	4603      	mov	r3, r0
 80122e6:	4619      	mov	r1, r3
 80122e8:	4620      	mov	r0, r4
 80122ea:	f7fb fab9 	bl	800d860 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	f103 0414 	add.w	r4, r3, #20
 80122f4:	683b      	ldr	r3, [r7, #0]
 80122f6:	4618      	mov	r0, r3
 80122f8:	f7ff ffd0 	bl	801229c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startColEv>
 80122fc:	4603      	mov	r3, r0
 80122fe:	4619      	mov	r1, r3
 8012300:	4620      	mov	r0, r4
 8012302:	f7fb fb21 	bl	800d948 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	f103 0518 	add.w	r5, r3, #24
 801230c:	683b      	ldr	r3, [r7, #0]
 801230e:	4618      	mov	r0, r3
 8012310:	f7ff ffc4 	bl	801229c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startColEv>
 8012314:	4604      	mov	r4, r0
 8012316:	683b      	ldr	r3, [r7, #0]
 8012318:	4618      	mov	r0, r3
 801231a:	f000 fa2d 	bl	8012778 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE16nestedExpressionEv>
 801231e:	4603      	mov	r3, r0
 8012320:	4618      	mov	r0, r3
 8012322:	f7f5 fd6c 	bl	8007dfe <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>
 8012326:	4603      	mov	r3, r0
 8012328:	fb03 f404 	mul.w	r4, r3, r4
 801232c:	683b      	ldr	r3, [r7, #0]
 801232e:	4618      	mov	r0, r3
 8012330:	f7ff ffa6 	bl	8012280 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startRowEv>
 8012334:	4603      	mov	r3, r0
 8012336:	4423      	add	r3, r4
 8012338:	4619      	mov	r1, r3
 801233a:	4628      	mov	r0, r5
 801233c:	f7fb fa90 	bl	800d860 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
  { }
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	4618      	mov	r0, r3
 8012344:	3708      	adds	r7, #8
 8012346:	46bd      	mov	sp, r7
 8012348:	bdb0      	pop	{r4, r5, r7, pc}

0801234a <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 801234a:	b580      	push	{r7, lr}
 801234c:	b082      	sub	sp, #8
 801234e:	af00      	add	r7, sp, #0
 8012350:	6078      	str	r0, [r7, #4]
             : m_xpr.outerStride();
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	689b      	ldr	r3, [r3, #8]
             ? m_xpr.innerStride()
 8012356:	4618      	mov	r0, r3
 8012358:	f7f5 ffdc 	bl	8008314 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 801235c:	4603      	mov	r3, r0
    }
 801235e:	4618      	mov	r0, r3
 8012360:	3708      	adds	r7, #8
 8012362:	46bd      	mov	sp, r7
 8012364:	bd80      	pop	{r7, pc}

08012366 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8012366:	b580      	push	{r7, lr}
 8012368:	b082      	sub	sp, #8
 801236a:	af00      	add	r7, sp, #0
 801236c:	6078      	str	r0, [r7, #4]
                    : m_xpr.innerStride();
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	689b      	ldr	r3, [r3, #8]
                    ? m_xpr.outerStride()
 8012372:	4618      	mov	r0, r3
 8012374:	f7fb fa1e 	bl	800d7b4 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 8012378:	4603      	mov	r3, r0
    }
 801237a:	4618      	mov	r0, r3
 801237c:	3708      	adds	r7, #8
 801237e:	46bd      	mov	sp, r7
 8012380:	bd80      	pop	{r7, pc}

08012382 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8012382:	b480      	push	{r7}
 8012384:	b083      	sub	sp, #12
 8012386:	af00      	add	r7, sp, #0
 8012388:	6078      	str	r0, [r7, #4]
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	4618      	mov	r0, r3
 801238e:	370c      	adds	r7, #12
 8012390:	46bd      	mov	sp, r7
 8012392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012396:	4770      	bx	lr

08012398 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8012398:	b480      	push	{r7}
 801239a:	b083      	sub	sp, #12
 801239c:	af00      	add	r7, sp, #0
 801239e:	6078      	str	r0, [r7, #4]
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	4618      	mov	r0, r3
 80123a6:	370c      	adds	r7, #12
 80123a8:	46bd      	mov	sp, r7
 80123aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ae:	4770      	bx	lr

080123b0 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 80123b0:	b480      	push	{r7}
 80123b2:	b083      	sub	sp, #12
 80123b4:	af00      	add	r7, sp, #0
 80123b6:	6078      	str	r0, [r7, #4]
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	685b      	ldr	r3, [r3, #4]
 80123bc:	4618      	mov	r0, r3
 80123be:	370c      	adds	r7, #12
 80123c0:	46bd      	mov	sp, r7
 80123c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123c6:	4770      	bx	lr

080123c8 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEC1Ev>:
 80123c8:	b480      	push	{r7}
 80123ca:	b083      	sub	sp, #12
 80123cc:	af00      	add	r7, sp, #0
 80123ce:	6078      	str	r0, [r7, #4]
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	4618      	mov	r0, r3
 80123d4:	370c      	adds	r7, #12
 80123d6:	46bd      	mov	sp, r7
 80123d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123dc:	4770      	bx	lr

080123de <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 80123de:	b580      	push	{r7, lr}
 80123e0:	b086      	sub	sp, #24
 80123e2:	af00      	add	r7, sp, #0
 80123e4:	60f8      	str	r0, [r7, #12]
 80123e6:	60b9      	str	r1, [r7, #8]
 80123e8:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 80123ea:	6879      	ldr	r1, [r7, #4]
 80123ec:	68b8      	ldr	r0, [r7, #8]
 80123ee:	f000 f9e8 	bl	80127c2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 80123f2:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 80123f4:	6879      	ldr	r1, [r7, #4]
 80123f6:	68b8      	ldr	r0, [r7, #8]
 80123f8:	f000 f9ef 	bl	80127da <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 80123fc:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 80123fe:	693a      	ldr	r2, [r7, #16]
 8012400:	6979      	ldr	r1, [r7, #20]
 8012402:	68f8      	ldr	r0, [r7, #12]
 8012404:	f000 f9f5 	bl	80127f2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 8012408:	bf00      	nop
 801240a:	3718      	adds	r7, #24
 801240c:	46bd      	mov	sp, r7
 801240e:	bd80      	pop	{r7, pc}

08012410 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8012410:	b580      	push	{r7, lr}
 8012412:	b082      	sub	sp, #8
 8012414:	af00      	add	r7, sp, #0
 8012416:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8012418:	2201      	movs	r2, #1
 801241a:	2100      	movs	r1, #0
 801241c:	6878      	ldr	r0, [r7, #4]
 801241e:	f7ff ffde 	bl	80123de <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8012422:	6878      	ldr	r0, [r7, #4]
 8012424:	f000 fa0b 	bl	801283e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSC_>
  }
 8012428:	bf00      	nop
 801242a:	3708      	adds	r7, #8
 801242c:	46bd      	mov	sp, r7
 801242e:	bd80      	pop	{r7, pc}

08012430 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EEC1ERKNS_5BlockIS6_Li3ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 8012430:	b580      	push	{r7, lr}
 8012432:	b082      	sub	sp, #8
 8012434:	af00      	add	r7, sp, #0
 8012436:	6078      	str	r0, [r7, #4]
 8012438:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	6839      	ldr	r1, [r7, #0]
 801243e:	4618      	mov	r0, r3
 8012440:	f000 fa0d 	bl	801285e <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS8_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8012444:	683b      	ldr	r3, [r7, #0]
 8012446:	4618      	mov	r0, r3
 8012448:	f000 fa33 	bl	80128b2 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4dataEv>
 801244c:	bf00      	nop
  }
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	4618      	mov	r0, r3
 8012452:	3708      	adds	r7, #8
 8012454:	46bd      	mov	sp, r7
 8012456:	bd80      	pop	{r7, pc}

08012458 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 8012458:	b580      	push	{r7, lr}
 801245a:	b082      	sub	sp, #8
 801245c:	af00      	add	r7, sp, #0
 801245e:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 8012460:	f7f4 f9b7 	bl	80067d2 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8012464:	4603      	mov	r3, r0
  }
 8012466:	4618      	mov	r0, r3
 8012468:	3708      	adds	r7, #8
 801246a:	46bd      	mov	sp, r7
 801246c:	bd80      	pop	{r7, pc}

0801246e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 801246e:	b580      	push	{r7, lr}
 8012470:	b082      	sub	sp, #8
 8012472:	af00      	add	r7, sp, #0
 8012474:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 8012476:	f7f4 f9a4 	bl	80067c2 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 801247a:	4603      	mov	r3, r0
  }
 801247c:	4618      	mov	r0, r3
 801247e:	3708      	adds	r7, #8
 8012480:	46bd      	mov	sp, r7
 8012482:	bd80      	pop	{r7, pc}

08012484 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 8012484:	b580      	push	{r7, lr}
 8012486:	b082      	sub	sp, #8
 8012488:	af00      	add	r7, sp, #0
 801248a:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	4618      	mov	r0, r3
 8012490:	f000 fa1b 	bl	80128ca <_ZNK5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4dataEv>
 8012494:	4603      	mov	r3, r0
 8012496:	4618      	mov	r0, r3
 8012498:	3708      	adds	r7, #8
 801249a:	46bd      	mov	sp, r7
 801249c:	bd80      	pop	{r7, pc}

0801249e <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 801249e:	b480      	push	{r7}
 80124a0:	b083      	sub	sp, #12
 80124a2:	af00      	add	r7, sp, #0
 80124a4:	6078      	str	r0, [r7, #4]
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	4618      	mov	r0, r3
 80124aa:	370c      	adds	r7, #12
 80124ac:	46bd      	mov	sp, r7
 80124ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124b2:	4770      	bx	lr

080124b4 <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ENS_5DenseEEC1ERS5_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 80124b4:	b580      	push	{r7, lr}
 80124b6:	b084      	sub	sp, #16
 80124b8:	af00      	add	r7, sp, #0
 80124ba:	60f8      	str	r0, [r7, #12]
 80124bc:	60b9      	str	r1, [r7, #8]
 80124be:	607a      	str	r2, [r7, #4]
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	687a      	ldr	r2, [r7, #4]
 80124c4:	68b9      	ldr	r1, [r7, #8]
 80124c6:	4618      	mov	r0, r3
 80124c8:	f000 fa16 	bl	80128f8 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EEC1ERS6_i>
 80124cc:	68fb      	ldr	r3, [r7, #12]
 80124ce:	4618      	mov	r0, r3
 80124d0:	3710      	adds	r7, #16
 80124d2:	46bd      	mov	sp, r7
 80124d4:	bd80      	pop	{r7, pc}

080124d6 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80124d6:	b480      	push	{r7}
 80124d8:	b083      	sub	sp, #12
 80124da:	af00      	add	r7, sp, #0
 80124dc:	6078      	str	r0, [r7, #4]
    }
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	4618      	mov	r0, r3
 80124e2:	370c      	adds	r7, #12
 80124e4:	46bd      	mov	sp, r7
 80124e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ea:	4770      	bx	lr

080124ec <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 80124ec:	b580      	push	{r7, lr}
 80124ee:	b082      	sub	sp, #8
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	4618      	mov	r0, r3
 80124f8:	f7f9 f83d 	bl	800b576 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 80124fc:	4603      	mov	r3, r0
    }
 80124fe:	4618      	mov	r0, r3
 8012500:	3708      	adds	r7, #8
 8012502:	46bd      	mov	sp, r7
 8012504:	bd80      	pop	{r7, pc}

08012506 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1ERKSJ_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 8012506:	b580      	push	{r7, lr}
 8012508:	b082      	sub	sp, #8
 801250a:	af00      	add	r7, sp, #0
 801250c:	6078      	str	r0, [r7, #4]
 801250e:	6039      	str	r1, [r7, #0]
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	6839      	ldr	r1, [r7, #0]
 8012514:	4618      	mov	r0, r3
 8012516:	f000 fa25 	bl	8012964 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1ERKSJ_>
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	4618      	mov	r0, r3
 801251e:	3708      	adds	r7, #8
 8012520:	46bd      	mov	sp, r7
 8012522:	bd80      	pop	{r7, pc}

08012524 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8012524:	b480      	push	{r7}
 8012526:	b083      	sub	sp, #12
 8012528:	af00      	add	r7, sp, #0
 801252a:	6078      	str	r0, [r7, #4]
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	4618      	mov	r0, r3
 8012530:	370c      	adds	r7, #12
 8012532:	46bd      	mov	sp, r7
 8012534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012538:	4770      	bx	lr

0801253a <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>:
 801253a:	b480      	push	{r7}
 801253c:	b083      	sub	sp, #12
 801253e:	af00      	add	r7, sp, #0
 8012540:	6078      	str	r0, [r7, #4]
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	4618      	mov	r0, r3
 8012546:	370c      	adds	r7, #12
 8012548:	46bd      	mov	sp, r7
 801254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801254e:	4770      	bx	lr

08012550 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISM_EEfRKSN_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 8012550:	b580      	push	{r7, lr}
 8012552:	b084      	sub	sp, #16
 8012554:	af00      	add	r7, sp, #0
 8012556:	60f8      	str	r0, [r7, #12]
 8012558:	60b9      	str	r1, [r7, #8]
 801255a:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 801255c:	68b9      	ldr	r1, [r7, #8]
 801255e:	68f8      	ldr	r0, [r7, #12]
 8012560:	f000 fa0f 	bl	8012982 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSN_RKS3_>
 8012564:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012568:	eeb0 0a67 	vmov.f32	s0, s15
 801256c:	3710      	adds	r7, #16
 801256e:	46bd      	mov	sp, r7
 8012570:	bd80      	pop	{r7, pc}

08012572 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEEC1ERKS9_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8012572:	b580      	push	{r7, lr}
 8012574:	b082      	sub	sp, #8
 8012576:	af00      	add	r7, sp, #0
 8012578:	6078      	str	r0, [r7, #4]
 801257a:	6039      	str	r1, [r7, #0]
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	6839      	ldr	r1, [r7, #0]
 8012580:	4618      	mov	r0, r3
 8012582:	f000 fa22 	bl	80129ca <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEELi6ENS_10DenseShapeESA_ffEC1ERKS9_>
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	4618      	mov	r0, r3
 801258a:	3708      	adds	r7, #8
 801258c:	46bd      	mov	sp, r7
 801258e:	bd80      	pop	{r7, pc}

08012590 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8012590:	b480      	push	{r7}
 8012592:	b083      	sub	sp, #12
 8012594:	af00      	add	r7, sp, #0
 8012596:	6078      	str	r0, [r7, #4]
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	4618      	mov	r0, r3
 801259c:	370c      	adds	r7, #12
 801259e:	46bd      	mov	sp, r7
 80125a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a4:	4770      	bx	lr

080125a6 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 80125a6:	b580      	push	{r7, lr}
 80125a8:	b082      	sub	sp, #8
 80125aa:	af00      	add	r7, sp, #0
 80125ac:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	689b      	ldr	r3, [r3, #8]
 80125b2:	4618      	mov	r0, r3
 80125b4:	f7fb f973 	bl	800d89e <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>
 80125b8:	4603      	mov	r3, r0
    }
 80125ba:	4618      	mov	r0, r3
 80125bc:	3708      	adds	r7, #8
 80125be:	46bd      	mov	sp, r7
 80125c0:	bd80      	pop	{r7, pc}

080125c2 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 80125c2:	b580      	push	{r7, lr}
 80125c4:	b082      	sub	sp, #8
 80125c6:	af00      	add	r7, sp, #0
 80125c8:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	689b      	ldr	r3, [r3, #8]
 80125ce:	4618      	mov	r0, r3
 80125d0:	f7f4 fcd6 	bl	8006f80 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 80125d4:	4603      	mov	r3, r0
    }
 80125d6:	4618      	mov	r0, r3
 80125d8:	3708      	adds	r7, #8
 80125da:	46bd      	mov	sp, r7
 80125dc:	bd80      	pop	{r7, pc}

080125de <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80125de:	b480      	push	{r7}
 80125e0:	b083      	sub	sp, #12
 80125e2:	af00      	add	r7, sp, #0
 80125e4:	6078      	str	r0, [r7, #4]
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	4618      	mov	r0, r3
 80125ea:	370c      	adds	r7, #12
 80125ec:	46bd      	mov	sp, r7
 80125ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125f2:	4770      	bx	lr

080125f4 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
 80125f4:	b480      	push	{r7}
 80125f6:	b083      	sub	sp, #12
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	6078      	str	r0, [r7, #4]
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	4618      	mov	r0, r3
 8012600:	370c      	adds	r7, #12
 8012602:	46bd      	mov	sp, r7
 8012604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012608:	4770      	bx	lr

0801260a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4DataC1ERKSD_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 801260a:	b590      	push	{r4, r7, lr}
 801260c:	b083      	sub	sp, #12
 801260e:	af00      	add	r7, sp, #0
 8012610:	6078      	str	r0, [r7, #4]
 8012612:	6039      	str	r1, [r7, #0]
 8012614:	687c      	ldr	r4, [r7, #4]
 8012616:	6838      	ldr	r0, [r7, #0]
 8012618:	f000 fa14 	bl	8012a44 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE7functorEv>
 801261c:	4603      	mov	r3, r0
 801261e:	4619      	mov	r1, r3
 8012620:	4620      	mov	r0, r4
 8012622:	f7f2 fe2f 	bl	8005284 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	1d1c      	adds	r4, r3, #4
 801262a:	6838      	ldr	r0, [r7, #0]
 801262c:	f000 fa16 	bl	8012a5c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE3lhsEv>
 8012630:	4603      	mov	r3, r0
 8012632:	4619      	mov	r1, r3
 8012634:	4620      	mov	r0, r4
 8012636:	f000 fa28 	bl	8012a8a <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERS7_>
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	f103 0408 	add.w	r4, r3, #8
 8012640:	6838      	ldr	r0, [r7, #0]
 8012642:	f000 fa16 	bl	8012a72 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE3rhsEv>
 8012646:	4603      	mov	r3, r0
 8012648:	4619      	mov	r1, r3
 801264a:	4620      	mov	r0, r4
 801264c:	f7f8 fdd9 	bl	800b202 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS4_>
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	4618      	mov	r0, r3
 8012654:	370c      	adds	r7, #12
 8012656:	46bd      	mov	sp, r7
 8012658:	bd90      	pop	{r4, r7, pc}

0801265a <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 801265a:	b580      	push	{r7, lr}
 801265c:	b084      	sub	sp, #16
 801265e:	af00      	add	r7, sp, #0
 8012660:	60f8      	str	r0, [r7, #12]
 8012662:	60b9      	str	r1, [r7, #8]
 8012664:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	68ba      	ldr	r2, [r7, #8]
 801266a:	6879      	ldr	r1, [r7, #4]
 801266c:	4618      	mov	r0, r3
 801266e:	f000 fa1b 	bl	8012aa8 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE5coeffEii>
 8012672:	eef0 7a40 	vmov.f32	s15, s0
 8012676:	eeb0 0a67 	vmov.f32	s0, s15
 801267a:	3710      	adds	r7, #16
 801267c:	46bd      	mov	sp, r7
 801267e:	bd80      	pop	{r7, pc}

08012680 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi1ELi1EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8012680:	b580      	push	{r7, lr}
 8012682:	b082      	sub	sp, #8
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
 8012688:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 801268a:	2201      	movs	r2, #1
 801268c:	2100      	movs	r1, #0
 801268e:	6878      	ldr	r0, [r7, #4]
 8012690:	f7ff ffe3 	bl	801265a <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE17coeffByOuterInnerEii>
 8012694:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012698:	eeb0 0a67 	vmov.f32	s0, s15
 801269c:	3708      	adds	r7, #8
 801269e:	46bd      	mov	sp, r7
 80126a0:	bd80      	pop	{r7, pc}

080126a2 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi2ELi1EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 80126a2:	b580      	push	{r7, lr}
 80126a4:	b082      	sub	sp, #8
 80126a6:	af00      	add	r7, sp, #0
 80126a8:	6078      	str	r0, [r7, #4]
 80126aa:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 80126ac:	2202      	movs	r2, #2
 80126ae:	2100      	movs	r1, #0
 80126b0:	6878      	ldr	r0, [r7, #4]
 80126b2:	f7ff ffd2 	bl	801265a <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE17coeffByOuterInnerEii>
 80126b6:	eef0 7a40 	vmov.f32	s15, s0
  }
 80126ba:	eeb0 0a67 	vmov.f32	s0, s15
 80126be:	3708      	adds	r7, #8
 80126c0:	46bd      	mov	sp, r7
 80126c2:	bd80      	pop	{r7, pc}

080126c4 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 80126c4:	b580      	push	{r7, lr}
 80126c6:	b0a4      	sub	sp, #144	; 0x90
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	60f8      	str	r0, [r7, #12]
 80126cc:	60b9      	str	r1, [r7, #8]
 80126ce:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	6819      	ldr	r1, [r3, #0]
 80126d4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80126d8:	68ba      	ldr	r2, [r7, #8]
 80126da:	4618      	mov	r0, r3
 80126dc:	f7f8 fc16 	bl	800af0c <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3rowEi>
 80126e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80126e4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80126e8:	4611      	mov	r1, r2
 80126ea:	4618      	mov	r0, r3
 80126ec:	f7f8 fc21 	bl	800af32 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE9transposeEv>
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	6859      	ldr	r1, [r3, #4]
 80126f4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80126f8:	687a      	ldr	r2, [r7, #4]
 80126fa:	4618      	mov	r0, r3
 80126fc:	f000 f9ff 	bl	8012afe <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE3colEi>
 8012700:	f107 0314 	add.w	r3, r7, #20
 8012704:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8012708:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801270c:	4618      	mov	r0, r3
 801270e:	f000 fa09 	bl	8012b24 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 8012712:	f107 0314 	add.w	r3, r7, #20
 8012716:	4618      	mov	r0, r3
 8012718:	f000 fa32 	bl	8012b80 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE3sumEv>
 801271c:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012720:	eeb0 0a67 	vmov.f32	s0, s15
 8012724:	3790      	adds	r7, #144	; 0x90
 8012726:	46bd      	mov	sp, r7
 8012728:	bd80      	pop	{r7, pc}

0801272a <_ZNK5Eigen8internal13sub_assign_opIffE11assignCoeffERfRKf>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a -= b; }
 801272a:	b480      	push	{r7}
 801272c:	b085      	sub	sp, #20
 801272e:	af00      	add	r7, sp, #0
 8012730:	60f8      	str	r0, [r7, #12]
 8012732:	60b9      	str	r1, [r7, #8]
 8012734:	607a      	str	r2, [r7, #4]
 8012736:	68bb      	ldr	r3, [r7, #8]
 8012738:	ed93 7a00 	vldr	s14, [r3]
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	edd3 7a00 	vldr	s15, [r3]
 8012742:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012746:	68bb      	ldr	r3, [r7, #8]
 8012748:	edc3 7a00 	vstr	s15, [r3]
 801274c:	bf00      	nop
 801274e:	3714      	adds	r7, #20
 8012750:	46bd      	mov	sp, r7
 8012752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012756:	4770      	bx	lr

08012758 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi3ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8012758:	b580      	push	{r7, lr}
 801275a:	b082      	sub	sp, #8
 801275c:	af00      	add	r7, sp, #0
 801275e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8012760:	2200      	movs	r2, #0
 8012762:	2101      	movs	r1, #1
 8012764:	6878      	ldr	r0, [r7, #4]
 8012766:	f7ff f991 	bl	8011a8c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 801276a:	6878      	ldr	r0, [r7, #4]
 801276c:	f000 fa23 	bl	8012bb6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi4ELi9EE3runERSE_>
  }
 8012770:	bf00      	nop
 8012772:	3708      	adds	r7, #8
 8012774:	46bd      	mov	sp, r7
 8012776:	bd80      	pop	{r7, pc}

08012778 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE16nestedExpressionEv>:
    const typename internal::remove_all<XprTypeNested>::type& nestedExpression() const
 8012778:	b480      	push	{r7}
 801277a:	b083      	sub	sp, #12
 801277c:	af00      	add	r7, sp, #0
 801277e:	6078      	str	r0, [r7, #4]
      return m_xpr;
 8012780:	687b      	ldr	r3, [r7, #4]
    }
 8012782:	4618      	mov	r0, r3
 8012784:	370c      	adds	r7, #12
 8012786:	46bd      	mov	sp, r7
 8012788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801278c:	4770      	bx	lr

0801278e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 801278e:	b480      	push	{r7}
 8012790:	b083      	sub	sp, #12
 8012792:	af00      	add	r7, sp, #0
 8012794:	6078      	str	r0, [r7, #4]
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	4618      	mov	r0, r3
 801279a:	370c      	adds	r7, #12
 801279c:	46bd      	mov	sp, r7
 801279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127a2:	4770      	bx	lr

080127a4 <_ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERSE_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 80127a4:	b580      	push	{r7, lr}
 80127a6:	b082      	sub	sp, #8
 80127a8:	af00      	add	r7, sp, #0
 80127aa:	6078      	str	r0, [r7, #4]
 80127ac:	6039      	str	r1, [r7, #0]
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	6839      	ldr	r1, [r7, #0]
 80127b2:	4618      	mov	r0, r3
 80127b4:	f7f7 fb49 	bl	8009e4a <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERKSD_>
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	4618      	mov	r0, r3
 80127bc:	3708      	adds	r7, #8
 80127be:	46bd      	mov	sp, r7
 80127c0:	bd80      	pop	{r7, pc}

080127c2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 80127c2:	b480      	push	{r7}
 80127c4:	b083      	sub	sp, #12
 80127c6:	af00      	add	r7, sp, #0
 80127c8:	6078      	str	r0, [r7, #4]
 80127ca:	6039      	str	r1, [r7, #0]
      : inner;
 80127cc:	683b      	ldr	r3, [r7, #0]
  }
 80127ce:	4618      	mov	r0, r3
 80127d0:	370c      	adds	r7, #12
 80127d2:	46bd      	mov	sp, r7
 80127d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d8:	4770      	bx	lr

080127da <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 80127da:	b480      	push	{r7}
 80127dc:	b083      	sub	sp, #12
 80127de:	af00      	add	r7, sp, #0
 80127e0:	6078      	str	r0, [r7, #4]
 80127e2:	6039      	str	r1, [r7, #0]
      : outer;
 80127e4:	687b      	ldr	r3, [r7, #4]
  }
 80127e6:	4618      	mov	r0, r3
 80127e8:	370c      	adds	r7, #12
 80127ea:	46bd      	mov	sp, r7
 80127ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f0:	4770      	bx	lr

080127f2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 80127f2:	b5b0      	push	{r4, r5, r7, lr}
 80127f4:	b086      	sub	sp, #24
 80127f6:	af00      	add	r7, sp, #0
 80127f8:	60f8      	str	r0, [r7, #12]
 80127fa:	60b9      	str	r1, [r7, #8]
 80127fc:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	689c      	ldr	r4, [r3, #8]
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	687a      	ldr	r2, [r7, #4]
 8012808:	68b9      	ldr	r1, [r7, #8]
 801280a:	4618      	mov	r0, r3
 801280c:	f7f6 f83e 	bl	800888c <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 8012810:	4605      	mov	r5, r0
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	685b      	ldr	r3, [r3, #4]
 8012816:	687a      	ldr	r2, [r7, #4]
 8012818:	68b9      	ldr	r1, [r7, #8]
 801281a:	4618      	mov	r0, r3
 801281c:	f000 f9db 	bl	8012bd6 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffE5coeffEii>
 8012820:	eef0 7a40 	vmov.f32	s15, s0
 8012824:	edc7 7a05 	vstr	s15, [r7, #20]
 8012828:	f107 0314 	add.w	r3, r7, #20
 801282c:	461a      	mov	r2, r3
 801282e:	4629      	mov	r1, r5
 8012830:	4620      	mov	r0, r4
 8012832:	f7f5 fd9b 	bl	800836c <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8012836:	bf00      	nop
 8012838:	3718      	adds	r7, #24
 801283a:	46bd      	mov	sp, r7
 801283c:	bdb0      	pop	{r4, r5, r7, pc}

0801283e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 801283e:	b580      	push	{r7, lr}
 8012840:	b082      	sub	sp, #8
 8012842:	af00      	add	r7, sp, #0
 8012844:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8012846:	2202      	movs	r2, #2
 8012848:	2100      	movs	r1, #0
 801284a:	6878      	ldr	r0, [r7, #4]
 801284c:	f7ff fdc7 	bl	80123de <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8012850:	6878      	ldr	r0, [r7, #4]
 8012852:	f000 f9f3 	bl	8012c3c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSC_>
  }
 8012856:	bf00      	nop
 8012858:	3708      	adds	r7, #8
 801285a:	46bd      	mov	sp, r7
 801285c:	bd80      	pop	{r7, pc}

0801285e <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS8_>:
  explicit mapbase_evaluator(const XprType& map)
 801285e:	b590      	push	{r4, r7, lr}
 8012860:	b083      	sub	sp, #12
 8012862:	af00      	add	r7, sp, #0
 8012864:	6078      	str	r0, [r7, #4]
 8012866:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8012868:	6878      	ldr	r0, [r7, #4]
 801286a:	f000 fa13 	bl	8012c94 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 801286e:	683b      	ldr	r3, [r7, #0]
 8012870:	4618      	mov	r0, r3
 8012872:	f000 f81e 	bl	80128b2 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4dataEv>
 8012876:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	601a      	str	r2, [r3, #0]
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	1d1c      	adds	r4, r3, #4
 8012880:	683b      	ldr	r3, [r7, #0]
 8012882:	4618      	mov	r0, r3
 8012884:	f000 f9ea 	bl	8012c5c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE11innerStrideEv>
 8012888:	4603      	mov	r3, r0
 801288a:	4619      	mov	r1, r3
 801288c:	4620      	mov	r0, r4
 801288e:	f7f3 ff59 	bl	8006744 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	1d5c      	adds	r4, r3, #5
 8012896:	683b      	ldr	r3, [r7, #0]
 8012898:	4618      	mov	r0, r3
 801289a:	f000 f9ed 	bl	8012c78 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE11outerStrideEv>
 801289e:	4603      	mov	r3, r0
 80128a0:	4619      	mov	r1, r3
 80128a2:	4620      	mov	r0, r4
 80128a4:	f7f3 ff68 	bl	8006778 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
  }
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	4618      	mov	r0, r3
 80128ac:	370c      	adds	r7, #12
 80128ae:	46bd      	mov	sp, r7
 80128b0:	bd90      	pop	{r4, r7, pc}

080128b2 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4dataEv>:
 80128b2:	b480      	push	{r7}
 80128b4:	b083      	sub	sp, #12
 80128b6:	af00      	add	r7, sp, #0
 80128b8:	6078      	str	r0, [r7, #4]
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	4618      	mov	r0, r3
 80128c0:	370c      	adds	r7, #12
 80128c2:	46bd      	mov	sp, r7
 80128c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c8:	4770      	bx	lr

080128ca <_ZNK5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 80128ca:	b480      	push	{r7}
 80128cc:	b083      	sub	sp, #12
 80128ce:	af00      	add	r7, sp, #0
 80128d0:	6078      	str	r0, [r7, #4]
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	4618      	mov	r0, r3
 80128d6:	370c      	adds	r7, #12
 80128d8:	46bd      	mov	sp, r7
 80128da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128de:	4770      	bx	lr

080128e0 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>:
    inline Index outerStride() const EIGEN_NOEXCEPT { return this->innerSize(); }
 80128e0:	b580      	push	{r7, lr}
 80128e2:	b082      	sub	sp, #8
 80128e4:	af00      	add	r7, sp, #0
 80128e6:	6078      	str	r0, [r7, #4]
 80128e8:	6878      	ldr	r0, [r7, #4]
 80128ea:	f000 f9de 	bl	8012caa <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9innerSizeEv>
 80128ee:	4603      	mov	r3, r0
 80128f0:	4618      	mov	r0, r3
 80128f2:	3708      	adds	r7, #8
 80128f4:	46bd      	mov	sp, r7
 80128f6:	bd80      	pop	{r7, pc}

080128f8 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EEC1ERS6_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 80128f8:	b5b0      	push	{r4, r5, r7, lr}
 80128fa:	b084      	sub	sp, #16
 80128fc:	af00      	add	r7, sp, #0
 80128fe:	60f8      	str	r0, [r7, #12]
 8012900:	60b9      	str	r1, [r7, #8]
 8012902:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8012904:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8012906:	68b8      	ldr	r0, [r7, #8]
 8012908:	f000 f9db 	bl	8012cc2 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE4dataEv>
 801290c:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 801290e:	68b8      	ldr	r0, [r7, #8]
 8012910:	f000 f9ff 	bl	8012d12 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11outerStrideEv>
 8012914:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	fb02 f303 	mul.w	r3, r2, r3
 801291c:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 801291e:	441d      	add	r5, r3
 8012920:	68b8      	ldr	r0, [r7, #8]
 8012922:	f7f3 f822 	bl	800596a <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8012926:	4602      	mov	r2, r0
 8012928:	2301      	movs	r3, #1
 801292a:	4629      	mov	r1, r5
 801292c:	4620      	mov	r0, r4
 801292e:	f000 fa11 	bl	8012d54 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii>
 8012932:	68fb      	ldr	r3, [r7, #12]
 8012934:	3308      	adds	r3, #8
 8012936:	68ba      	ldr	r2, [r7, #8]
 8012938:	6812      	ldr	r2, [r2, #0]
 801293a:	601a      	str	r2, [r3, #0]
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	330c      	adds	r3, #12
 8012940:	2100      	movs	r1, #0
 8012942:	4618      	mov	r0, r3
 8012944:	f7fa ff8c 	bl	800d860 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	3310      	adds	r3, #16
 801294c:	6879      	ldr	r1, [r7, #4]
 801294e:	4618      	mov	r0, r3
 8012950:	f7fa fffa 	bl	800d948 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
      init();
 8012954:	68f8      	ldr	r0, [r7, #12]
 8012956:	f000 fa3b 	bl	8012dd0 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE4initEv>
    }
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	4618      	mov	r0, r3
 801295e:	3710      	adds	r7, #16
 8012960:	46bd      	mov	sp, r7
 8012962:	bdb0      	pop	{r4, r5, r7, pc}

08012964 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1ERKSJ_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8012964:	b580      	push	{r7, lr}
 8012966:	b082      	sub	sp, #8
 8012968:	af00      	add	r7, sp, #0
 801296a:	6078      	str	r0, [r7, #4]
 801296c:	6039      	str	r1, [r7, #0]
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	6839      	ldr	r1, [r7, #0]
 8012972:	4618      	mov	r0, r3
 8012974:	f000 fa3c 	bl	8012df0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffEC1ERKSJ_>
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	4618      	mov	r0, r3
 801297c:	3708      	adds	r7, #8
 801297e:	46bd      	mov	sp, r7
 8012980:	bd80      	pop	{r7, pc}

08012982 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8012982:	b580      	push	{r7, lr}
 8012984:	b084      	sub	sp, #16
 8012986:	af00      	add	r7, sp, #0
 8012988:	6078      	str	r0, [r7, #4]
 801298a:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 801298c:	6839      	ldr	r1, [r7, #0]
 801298e:	6878      	ldr	r0, [r7, #4]
 8012990:	f000 fa40 	bl	8012e14 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSN_RKS3_>
 8012994:	eef0 7a40 	vmov.f32	s15, s0
 8012998:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 801299c:	6839      	ldr	r1, [r7, #0]
 801299e:	6878      	ldr	r0, [r7, #4]
 80129a0:	f000 fa49 	bl	8012e36 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSN_RKS3_>
 80129a4:	eef0 7a40 	vmov.f32	s15, s0
 80129a8:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80129ac:	f107 020c 	add.w	r2, r7, #12
 80129b0:	f107 0308 	add.w	r3, r7, #8
 80129b4:	4619      	mov	r1, r3
 80129b6:	6838      	ldr	r0, [r7, #0]
 80129b8:	f7f6 fac9 	bl	8008f4e <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 80129bc:	eef0 7a40 	vmov.f32	s15, s0
  }
 80129c0:	eeb0 0a67 	vmov.f32	s0, s15
 80129c4:	3710      	adds	r7, #16
 80129c6:	46bd      	mov	sp, r7
 80129c8:	bd80      	pop	{r7, pc}

080129ca <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEELi6ENS_10DenseShapeESA_ffEC1ERKS9_>:
  explicit product_evaluator(const XprType& xpr)
 80129ca:	b5b0      	push	{r4, r5, r7, lr}
 80129cc:	b084      	sub	sp, #16
 80129ce:	af00      	add	r7, sp, #0
 80129d0:	6078      	str	r0, [r7, #4]
 80129d2:	6039      	str	r1, [r7, #0]
    : m_result(xpr.rows(), xpr.cols())
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	4618      	mov	r0, r3
 80129d8:	f000 fa51 	bl	8012e7e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	1d1c      	adds	r4, r3, #4
 80129e0:	6838      	ldr	r0, [r7, #0]
 80129e2:	f7f3 f8f9 	bl	8005bd8 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 80129e6:	4603      	mov	r3, r0
 80129e8:	60bb      	str	r3, [r7, #8]
 80129ea:	6838      	ldr	r0, [r7, #0]
 80129ec:	f7f3 f901 	bl	8005bf2 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4colsEv>
 80129f0:	4603      	mov	r3, r0
 80129f2:	60fb      	str	r3, [r7, #12]
 80129f4:	f107 020c 	add.w	r2, r7, #12
 80129f8:	f107 0308 	add.w	r3, r7, #8
 80129fc:	4619      	mov	r1, r3
 80129fe:	4620      	mov	r0, r4
 8012a00:	f000 fa4a 	bl	8012e98 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1IiiEERKT_RKT0_>
    ::new (static_cast<Base*>(this)) Base(m_result);
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	4619      	mov	r1, r3
 8012a08:	2004      	movs	r0, #4
 8012a0a:	f7ee fa97 	bl	8000f3c <_ZnwjPv>
 8012a0e:	4602      	mov	r2, r0
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	3304      	adds	r3, #4
 8012a14:	4619      	mov	r1, r3
 8012a16:	4610      	mov	r0, r2
 8012a18:	f7f7 fbf9 	bl	800a20e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
    generic_product_impl<Lhs, Rhs, LhsShape, RhsShape, ProductTag>::evalTo(m_result, xpr.lhs(), xpr.rhs());
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	1d1c      	adds	r4, r3, #4
 8012a20:	6838      	ldr	r0, [r7, #0]
 8012a22:	f000 fa52 	bl	8012eca <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE3lhsEv>
 8012a26:	4605      	mov	r5, r0
 8012a28:	6838      	ldr	r0, [r7, #0]
 8012a2a:	f000 fa59 	bl	8012ee0 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE3rhsEv>
 8012a2e:	4603      	mov	r3, r0
 8012a30:	461a      	mov	r2, r3
 8012a32:	4629      	mov	r1, r5
 8012a34:	4620      	mov	r0, r4
 8012a36:	f000 fa5f 	bl	8012ef8 <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EENS_10DenseShapeES9_Li6EE6evalToINS3_IfLi1ELi1ELi0ELi1ELi1EEEEEvRT_RKS6_RKS8_>
  }
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	4618      	mov	r0, r3
 8012a3e:	3710      	adds	r7, #16
 8012a40:	46bd      	mov	sp, r7
 8012a42:	bdb0      	pop	{r4, r5, r7, pc}

08012a44 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8012a44:	b480      	push	{r7}
 8012a46:	b083      	sub	sp, #12
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	6078      	str	r0, [r7, #4]
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	3308      	adds	r3, #8
 8012a50:	4618      	mov	r0, r3
 8012a52:	370c      	adds	r7, #12
 8012a54:	46bd      	mov	sp, r7
 8012a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a5a:	4770      	bx	lr

08012a5c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8012a5c:	b480      	push	{r7}
 8012a5e:	b083      	sub	sp, #12
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	6078      	str	r0, [r7, #4]
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	4618      	mov	r0, r3
 8012a68:	370c      	adds	r7, #12
 8012a6a:	46bd      	mov	sp, r7
 8012a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a70:	4770      	bx	lr

08012a72 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8012a72:	b480      	push	{r7}
 8012a74:	b083      	sub	sp, #12
 8012a76:	af00      	add	r7, sp, #0
 8012a78:	6078      	str	r0, [r7, #4]
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	685b      	ldr	r3, [r3, #4]
 8012a7e:	4618      	mov	r0, r3
 8012a80:	370c      	adds	r7, #12
 8012a82:	46bd      	mov	sp, r7
 8012a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a88:	4770      	bx	lr

08012a8a <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8012a8a:	b580      	push	{r7, lr}
 8012a8c:	b082      	sub	sp, #8
 8012a8e:	af00      	add	r7, sp, #0
 8012a90:	6078      	str	r0, [r7, #4]
 8012a92:	6039      	str	r1, [r7, #0]
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	6839      	ldr	r1, [r7, #0]
 8012a98:	4618      	mov	r0, r3
 8012a9a:	f000 fa55 	bl	8012f48 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS6_>
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	3708      	adds	r7, #8
 8012aa4:	46bd      	mov	sp, r7
 8012aa6:	bd80      	pop	{r7, pc}

08012aa8 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8012aa8:	b590      	push	{r4, r7, lr}
 8012aaa:	b087      	sub	sp, #28
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	60f8      	str	r0, [r7, #12]
 8012ab0:	60b9      	str	r1, [r7, #8]
 8012ab2:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	4618      	mov	r0, r3
 8012ab8:	f000 fa55 	bl	8012f66 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4Data4funcEv>
 8012abc:	4604      	mov	r4, r0
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	3304      	adds	r3, #4
 8012ac2:	687a      	ldr	r2, [r7, #4]
 8012ac4:	68b9      	ldr	r1, [r7, #8]
 8012ac6:	4618      	mov	r0, r3
 8012ac8:	f000 fa58 	bl	8012f7c <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfE5coeffEii>
 8012acc:	eef0 7a40 	vmov.f32	s15, s0
 8012ad0:	edc7 7a05 	vstr	s15, [r7, #20]
 8012ad4:	68fb      	ldr	r3, [r7, #12]
 8012ad6:	3308      	adds	r3, #8
 8012ad8:	687a      	ldr	r2, [r7, #4]
 8012ada:	68b9      	ldr	r1, [r7, #8]
 8012adc:	4618      	mov	r0, r3
 8012ade:	f7fe f9d0 	bl	8010e82 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEii>
 8012ae2:	4602      	mov	r2, r0
 8012ae4:	f107 0314 	add.w	r3, r7, #20
 8012ae8:	4619      	mov	r1, r3
 8012aea:	4620      	mov	r0, r4
 8012aec:	f7fc fa70 	bl	800efd0 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 8012af0:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012af4:	eeb0 0a67 	vmov.f32	s0, s15
 8012af8:	371c      	adds	r7, #28
 8012afa:	46bd      	mov	sp, r7
 8012afc:	bd90      	pop	{r4, r7, pc}

08012afe <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE3colEi>:
ConstColXpr col(Index i) const
 8012afe:	b580      	push	{r7, lr}
 8012b00:	b084      	sub	sp, #16
 8012b02:	af00      	add	r7, sp, #0
 8012b04:	60f8      	str	r0, [r7, #12]
 8012b06:	60b9      	str	r1, [r7, #8]
 8012b08:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 8012b0a:	68b8      	ldr	r0, [r7, #8]
 8012b0c:	f7f2 ff6a 	bl	80059e4 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8012b10:	4603      	mov	r3, r0
 8012b12:	687a      	ldr	r2, [r7, #4]
 8012b14:	4619      	mov	r1, r3
 8012b16:	68f8      	ldr	r0, [r7, #12]
 8012b18:	f000 fa46 	bl	8012fa8 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i>
}
 8012b1c:	68f8      	ldr	r0, [r7, #12]
 8012b1e:	3710      	adds	r7, #16
 8012b20:	46bd      	mov	sp, r7
 8012b22:	bd80      	pop	{r7, pc}

08012b24 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 8012b24:	b5b0      	push	{r4, r5, r7, lr}
 8012b26:	b086      	sub	sp, #24
 8012b28:	af00      	add	r7, sp, #0
 8012b2a:	60f8      	str	r0, [r7, #12]
 8012b2c:	60b9      	str	r1, [r7, #8]
 8012b2e:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 8012b30:	68b8      	ldr	r0, [r7, #8]
 8012b32:	f7f8 ffff 	bl	800bb34 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE7derivedEv>
 8012b36:	4604      	mov	r4, r0
 8012b38:	6878      	ldr	r0, [r7, #4]
 8012b3a:	f000 fa5d 	bl	8012ff8 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE7derivedEv>
 8012b3e:	4605      	mov	r5, r0
 8012b40:	f107 0314 	add.w	r3, r7, #20
 8012b44:	4618      	mov	r0, r3
 8012b46:	f7f2 fb13 	bl	8005170 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 8012b4a:	f107 0314 	add.w	r3, r7, #20
 8012b4e:	462a      	mov	r2, r5
 8012b50:	4621      	mov	r1, r4
 8012b52:	68f8      	ldr	r0, [r7, #12]
 8012b54:	f000 fa8a 	bl	801306c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_>
}
 8012b58:	68f8      	ldr	r0, [r7, #12]
 8012b5a:	3718      	adds	r7, #24
 8012b5c:	46bd      	mov	sp, r7
 8012b5e:	bdb0      	pop	{r4, r5, r7, pc}

08012b60 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8012b60:	b580      	push	{r7, lr}
 8012b62:	b082      	sub	sp, #8
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	6078      	str	r0, [r7, #4]
 8012b68:	6878      	ldr	r0, [r7, #4]
 8012b6a:	f000 fadd 	bl	8013128 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 8012b6e:	4603      	mov	r3, r0
 8012b70:	4618      	mov	r0, r3
 8012b72:	f000 fae4 	bl	801313e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE4rowsEv>
 8012b76:	4603      	mov	r3, r0
 8012b78:	4618      	mov	r0, r3
 8012b7a:	3708      	adds	r7, #8
 8012b7c:	46bd      	mov	sp, r7
 8012b7e:	bd80      	pop	{r7, pc}

08012b80 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 8012b80:	b590      	push	{r4, r7, lr}
 8012b82:	b085      	sub	sp, #20
 8012b84:	af00      	add	r7, sp, #0
 8012b86:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 8012b88:	6878      	ldr	r0, [r7, #4]
 8012b8a:	f000 facd 	bl	8013128 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 8012b8e:	4604      	mov	r4, r0
 8012b90:	f107 030c 	add.w	r3, r7, #12
 8012b94:	4618      	mov	r0, r3
 8012b96:	f7f2 fde2 	bl	800575e <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8012b9a:	f107 030c 	add.w	r3, r7, #12
 8012b9e:	4619      	mov	r1, r3
 8012ba0:	4620      	mov	r0, r4
 8012ba2:	f000 fb49 	bl	8013238 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 8012ba6:	eef0 7a40 	vmov.f32	s15, s0
 8012baa:	bf00      	nop
}
 8012bac:	eeb0 0a67 	vmov.f32	s0, s15
 8012bb0:	3714      	adds	r7, #20
 8012bb2:	46bd      	mov	sp, r7
 8012bb4:	bd90      	pop	{r4, r7, pc}

08012bb6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi4ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8012bb6:	b580      	push	{r7, lr}
 8012bb8:	b082      	sub	sp, #8
 8012bba:	af00      	add	r7, sp, #0
 8012bbc:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8012bbe:	2201      	movs	r2, #1
 8012bc0:	2101      	movs	r1, #1
 8012bc2:	6878      	ldr	r0, [r7, #4]
 8012bc4:	f7fe ff62 	bl	8011a8c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8012bc8:	6878      	ldr	r0, [r7, #4]
 8012bca:	f000 fb7b 	bl	80132c4 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi5ELi9EE3runERSE_>
  }
 8012bce:	bf00      	nop
 8012bd0:	3708      	adds	r7, #8
 8012bd2:	46bd      	mov	sp, r7
 8012bd4:	bd80      	pop	{r7, pc}

08012bd6 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 8012bd6:	b580      	push	{r7, lr}
 8012bd8:	b0a4      	sub	sp, #144	; 0x90
 8012bda:	af00      	add	r7, sp, #0
 8012bdc:	60f8      	str	r0, [r7, #12]
 8012bde:	60b9      	str	r1, [r7, #8]
 8012be0:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 8012be2:	68fb      	ldr	r3, [r7, #12]
 8012be4:	6819      	ldr	r1, [r3, #0]
 8012be6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8012bea:	68ba      	ldr	r2, [r7, #8]
 8012bec:	4618      	mov	r0, r3
 8012bee:	f7f7 ffbd 	bl	800ab6c <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 8012bf2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012bf6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8012bfa:	4611      	mov	r1, r2
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	f7f7 ffc8 	bl	800ab92 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	6859      	ldr	r1, [r3, #4]
 8012c06:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8012c0a:	687a      	ldr	r2, [r7, #4]
 8012c0c:	4618      	mov	r0, r3
 8012c0e:	f7f9 f9f4 	bl	800bffa <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3colEi>
 8012c12:	f107 0314 	add.w	r3, r7, #20
 8012c16:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8012c1a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8012c1e:	4618      	mov	r0, r3
 8012c20:	f7f9 f9fe 	bl	800c020 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IS5_Li3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>
 8012c24:	f107 0314 	add.w	r3, r7, #20
 8012c28:	4618      	mov	r0, r3
 8012c2a:	f7f9 fa27 	bl	800c07c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE3sumEv>
 8012c2e:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012c32:	eeb0 0a67 	vmov.f32	s0, s15
 8012c36:	3790      	adds	r7, #144	; 0x90
 8012c38:	46bd      	mov	sp, r7
 8012c3a:	bd80      	pop	{r7, pc}

08012c3c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8012c3c:	b580      	push	{r7, lr}
 8012c3e:	b082      	sub	sp, #8
 8012c40:	af00      	add	r7, sp, #0
 8012c42:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8012c44:	2200      	movs	r2, #0
 8012c46:	2101      	movs	r1, #1
 8012c48:	6878      	ldr	r0, [r7, #4]
 8012c4a:	f7ff fbc8 	bl	80123de <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8012c4e:	6878      	ldr	r0, [r7, #4]
 8012c50:	f000 fb48 	bl	80132e4 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSC_>
  }
 8012c54:	bf00      	nop
 8012c56:	3708      	adds	r7, #8
 8012c58:	46bd      	mov	sp, r7
 8012c5a:	bd80      	pop	{r7, pc}

08012c5c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b082      	sub	sp, #8
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	6078      	str	r0, [r7, #4]
             : m_xpr.outerStride();
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	3308      	adds	r3, #8
             ? m_xpr.innerStride()
 8012c68:	4618      	mov	r0, r3
 8012c6a:	f7fd fc40 	bl	80104ee <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11outerStrideEv>
 8012c6e:	4603      	mov	r3, r0
    }
 8012c70:	4618      	mov	r0, r3
 8012c72:	3708      	adds	r7, #8
 8012c74:	46bd      	mov	sp, r7
 8012c76:	bd80      	pop	{r7, pc}

08012c78 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8012c78:	b580      	push	{r7, lr}
 8012c7a:	b082      	sub	sp, #8
 8012c7c:	af00      	add	r7, sp, #0
 8012c7e:	6078      	str	r0, [r7, #4]
                    : m_xpr.innerStride();
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	3308      	adds	r3, #8
                    ? m_xpr.outerStride()
 8012c84:	4618      	mov	r0, r3
 8012c86:	f7fd fc1e 	bl	80104c6 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11innerStrideEv>
 8012c8a:	4603      	mov	r3, r0
    }
 8012c8c:	4618      	mov	r0, r3
 8012c8e:	3708      	adds	r7, #8
 8012c90:	46bd      	mov	sp, r7
 8012c92:	bd80      	pop	{r7, pc}

08012c94 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8012c94:	b480      	push	{r7}
 8012c96:	b083      	sub	sp, #12
 8012c98:	af00      	add	r7, sp, #0
 8012c9a:	6078      	str	r0, [r7, #4]
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	4618      	mov	r0, r3
 8012ca0:	370c      	adds	r7, #12
 8012ca2:	46bd      	mov	sp, r7
 8012ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ca8:	4770      	bx	lr

08012caa <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9innerSizeEv>:
    Index innerSize() const
 8012caa:	b580      	push	{r7, lr}
 8012cac:	b082      	sub	sp, #8
 8012cae:	af00      	add	r7, sp, #0
 8012cb0:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 8012cb2:	6878      	ldr	r0, [r7, #4]
 8012cb4:	f000 fb36 	bl	8013324 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4sizeEv>
 8012cb8:	4603      	mov	r3, r0
    }
 8012cba:	4618      	mov	r0, r3
 8012cbc:	3708      	adds	r7, #8
 8012cbe:	46bd      	mov	sp, r7
 8012cc0:	bd80      	pop	{r7, pc}

08012cc2 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE4dataEv>:
    const Scalar* data() const { return derived().nestedExpression().data(); }
 8012cc2:	b580      	push	{r7, lr}
 8012cc4:	b082      	sub	sp, #8
 8012cc6:	af00      	add	r7, sp, #0
 8012cc8:	6078      	str	r0, [r7, #4]
 8012cca:	6878      	ldr	r0, [r7, #4]
 8012ccc:	f7f2 fe1e 	bl	800590c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8012cd0:	4603      	mov	r3, r0
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	f7fe fd63 	bl	801179e <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 8012cd8:	4603      	mov	r3, r0
 8012cda:	4618      	mov	r0, r3
 8012cdc:	f7ff fbd2 	bl	8012484 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>
 8012ce0:	4603      	mov	r3, r0
 8012ce2:	4618      	mov	r0, r3
 8012ce4:	3708      	adds	r7, #8
 8012ce6:	46bd      	mov	sp, r7
 8012ce8:	bd80      	pop	{r7, pc}

08012cea <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11innerStrideEv>:
    Index innerStride() const { return derived().nestedExpression().innerStride(); }
 8012cea:	b580      	push	{r7, lr}
 8012cec:	b082      	sub	sp, #8
 8012cee:	af00      	add	r7, sp, #0
 8012cf0:	6078      	str	r0, [r7, #4]
 8012cf2:	6878      	ldr	r0, [r7, #4]
 8012cf4:	f7f2 fe0a 	bl	800590c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8012cf8:	4603      	mov	r3, r0
 8012cfa:	4618      	mov	r0, r3
 8012cfc:	f7fe fd4f 	bl	801179e <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 8012d00:	4603      	mov	r3, r0
 8012d02:	4618      	mov	r0, r3
 8012d04:	f000 fb30 	bl	8013368 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>
 8012d08:	4603      	mov	r3, r0
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	3708      	adds	r7, #8
 8012d0e:	46bd      	mov	sp, r7
 8012d10:	bd80      	pop	{r7, pc}

08012d12 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11outerStrideEv>:
    Index outerStride() const { return derived().nestedExpression().outerStride(); }
 8012d12:	b580      	push	{r7, lr}
 8012d14:	b082      	sub	sp, #8
 8012d16:	af00      	add	r7, sp, #0
 8012d18:	6078      	str	r0, [r7, #4]
 8012d1a:	6878      	ldr	r0, [r7, #4]
 8012d1c:	f7f2 fdf6 	bl	800590c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8012d20:	4603      	mov	r3, r0
 8012d22:	4618      	mov	r0, r3
 8012d24:	f7fe fd3b 	bl	801179e <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 8012d28:	4603      	mov	r3, r0
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	f7ff fdd8 	bl	80128e0 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 8012d30:	4603      	mov	r3, r0
 8012d32:	4618      	mov	r0, r3
 8012d34:	3708      	adds	r7, #8
 8012d36:	46bd      	mov	sp, r7
 8012d38:	bd80      	pop	{r7, pc}

08012d3a <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>:
 8012d3a:	b580      	push	{r7, lr}
 8012d3c:	b082      	sub	sp, #8
 8012d3e:	af00      	add	r7, sp, #0
 8012d40:	6078      	str	r0, [r7, #4]
 8012d42:	6878      	ldr	r0, [r7, #4]
 8012d44:	f000 fb1b 	bl	801337e <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	3708      	adds	r7, #8
 8012d4e:	46bd      	mov	sp, r7
 8012d50:	bd80      	pop	{r7, pc}
	...

08012d54 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 8012d54:	b580      	push	{r7, lr}
 8012d56:	b084      	sub	sp, #16
 8012d58:	af00      	add	r7, sp, #0
 8012d5a:	60f8      	str	r0, [r7, #12]
 8012d5c:	60b9      	str	r1, [r7, #8]
 8012d5e:	607a      	str	r2, [r7, #4]
 8012d60:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 8012d62:	68f8      	ldr	r0, [r7, #12]
 8012d64:	f7ff ffe9 	bl	8012d3a <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	68ba      	ldr	r2, [r7, #8]
 8012d6c:	601a      	str	r2, [r3, #0]
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	3304      	adds	r3, #4
 8012d72:	6879      	ldr	r1, [r7, #4]
 8012d74:	4618      	mov	r0, r3
 8012d76:	f7f3 fce5 	bl	8006744 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	3305      	adds	r3, #5
 8012d7e:	6839      	ldr	r1, [r7, #0]
 8012d80:	4618      	mov	r0, r3
 8012d82:	f7f3 fcf9 	bl	8006778 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 8012d86:	68bb      	ldr	r3, [r7, #8]
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d011      	beq.n	8012db0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	db08      	blt.n	8012da4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	2b03      	cmp	r3, #3
 8012d96:	d105      	bne.n	8012da4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 8012d98:	683b      	ldr	r3, [r7, #0]
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	db02      	blt.n	8012da4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 8012d9e:	683b      	ldr	r3, [r7, #0]
 8012da0:	2b01      	cmp	r3, #1
 8012da2:	d005      	beq.n	8012db0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 8012da4:	4b07      	ldr	r3, [pc, #28]	; (8012dc4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x70>)
 8012da6:	4a08      	ldr	r2, [pc, #32]	; (8012dc8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x74>)
 8012da8:	21b0      	movs	r1, #176	; 0xb0
 8012daa:	4808      	ldr	r0, [pc, #32]	; (8012dcc <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x78>)
 8012dac:	f00a fe56 	bl	801da5c <__assert_func>
      checkSanity<Derived>();
 8012db0:	2100      	movs	r1, #0
 8012db2:	68f8      	ldr	r0, [r7, #12]
 8012db4:	f000 faee 	bl	8013394 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	4618      	mov	r0, r3
 8012dbc:	3710      	adds	r7, #16
 8012dbe:	46bd      	mov	sp, r7
 8012dc0:	bd80      	pop	{r7, pc}
 8012dc2:	bf00      	nop
 8012dc4:	08025fe8 	.word	0x08025fe8
 8012dc8:	080286e4 	.word	0x080286e4
 8012dcc:	08026198 	.word	0x08026198

08012dd0 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE4initEv>:
    void init()
 8012dd0:	b580      	push	{r7, lr}
 8012dd2:	b082      	sub	sp, #8
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	3308      	adds	r3, #8
 8012ddc:	4618      	mov	r0, r3
 8012dde:	f7ff ff98 	bl	8012d12 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11outerStrideEv>
 8012de2:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	615a      	str	r2, [r3, #20]
    }
 8012de8:	bf00      	nop
 8012dea:	3708      	adds	r7, #8
 8012dec:	46bd      	mov	sp, r7
 8012dee:	bd80      	pop	{r7, pc}

08012df0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffEC1ERKSJ_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8012df0:	b580      	push	{r7, lr}
 8012df2:	b082      	sub	sp, #8
 8012df4:	af00      	add	r7, sp, #0
 8012df6:	6078      	str	r0, [r7, #4]
 8012df8:	6039      	str	r1, [r7, #0]
 8012dfa:	6878      	ldr	r0, [r7, #4]
 8012dfc:	f000 fad5 	bl	80133aa <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	6839      	ldr	r1, [r7, #0]
 8012e04:	4618      	mov	r0, r3
 8012e06:	f000 fadb 	bl	80133c0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4DataC1ERKSJ_>
  }
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	4618      	mov	r0, r3
 8012e0e:	3708      	adds	r7, #8
 8012e10:	46bd      	mov	sp, r7
 8012e12:	bd80      	pop	{r7, pc}

08012e14 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8012e14:	b580      	push	{r7, lr}
 8012e16:	b082      	sub	sp, #8
 8012e18:	af00      	add	r7, sp, #0
 8012e1a:	6078      	str	r0, [r7, #4]
 8012e1c:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8012e1e:	2200      	movs	r2, #0
 8012e20:	2100      	movs	r1, #0
 8012e22:	6878      	ldr	r0, [r7, #4]
 8012e24:	f000 faf4 	bl	8013410 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 8012e28:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012e2c:	eeb0 0a67 	vmov.f32	s0, s15
 8012e30:	3708      	adds	r7, #8
 8012e32:	46bd      	mov	sp, r7
 8012e34:	bd80      	pop	{r7, pc}

08012e36 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8012e36:	b580      	push	{r7, lr}
 8012e38:	b084      	sub	sp, #16
 8012e3a:	af00      	add	r7, sp, #0
 8012e3c:	6078      	str	r0, [r7, #4]
 8012e3e:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8012e40:	6839      	ldr	r1, [r7, #0]
 8012e42:	6878      	ldr	r0, [r7, #4]
 8012e44:	f000 faf7 	bl	8013436 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSN_RKS3_>
 8012e48:	eef0 7a40 	vmov.f32	s15, s0
 8012e4c:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8012e50:	6839      	ldr	r1, [r7, #0]
 8012e52:	6878      	ldr	r0, [r7, #4]
 8012e54:	f000 fb00 	bl	8013458 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSN_RKS3_>
 8012e58:	eef0 7a40 	vmov.f32	s15, s0
 8012e5c:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8012e60:	f107 020c 	add.w	r2, r7, #12
 8012e64:	f107 0308 	add.w	r3, r7, #8
 8012e68:	4619      	mov	r1, r3
 8012e6a:	6838      	ldr	r0, [r7, #0]
 8012e6c:	f7f6 f86f 	bl	8008f4e <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8012e70:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012e74:	eeb0 0a67 	vmov.f32	s0, s15
 8012e78:	3710      	adds	r7, #16
 8012e7a:	46bd      	mov	sp, r7
 8012e7c:	bd80      	pop	{r7, pc}

08012e7e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
  evaluator() {}
 8012e7e:	b580      	push	{r7, lr}
 8012e80:	b082      	sub	sp, #8
 8012e82:	af00      	add	r7, sp, #0
 8012e84:	6078      	str	r0, [r7, #4]
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	4618      	mov	r0, r3
 8012e8a:	f000 faf6 	bl	801347a <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	4618      	mov	r0, r3
 8012e92:	3708      	adds	r7, #8
 8012e94:	46bd      	mov	sp, r7
 8012e96:	bd80      	pop	{r7, pc}

08012e98 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1IiiEERKT_RKT0_>:
    Matrix(const T0& x, const T1& y)
 8012e98:	b580      	push	{r7, lr}
 8012e9a:	b084      	sub	sp, #16
 8012e9c:	af00      	add	r7, sp, #0
 8012e9e:	60f8      	str	r0, [r7, #12]
 8012ea0:	60b9      	str	r1, [r7, #8]
 8012ea2:	607a      	str	r2, [r7, #4]
    {
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	f7f1 fde2 	bl	8004a70 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 8012eac:	f7f1 fdf0 	bl	8004a90 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
      Base::template _init2<T0,T1>(x, y);
 8012eb0:	68f8      	ldr	r0, [r7, #12]
 8012eb2:	68bb      	ldr	r3, [r7, #8]
 8012eb4:	6819      	ldr	r1, [r3, #0]
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	681a      	ldr	r2, [r3, #0]
 8012eba:	2300      	movs	r3, #0
 8012ebc:	f000 faef 	bl	801349e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>
    }
 8012ec0:	68fb      	ldr	r3, [r7, #12]
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	3710      	adds	r7, #16
 8012ec6:	46bd      	mov	sp, r7
 8012ec8:	bd80      	pop	{r7, pc}

08012eca <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8012eca:	b480      	push	{r7}
 8012ecc:	b083      	sub	sp, #12
 8012ece:	af00      	add	r7, sp, #0
 8012ed0:	6078      	str	r0, [r7, #4]
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	370c      	adds	r7, #12
 8012ed8:	46bd      	mov	sp, r7
 8012eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ede:	4770      	bx	lr

08012ee0 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8012ee0:	b480      	push	{r7}
 8012ee2:	b083      	sub	sp, #12
 8012ee4:	af00      	add	r7, sp, #0
 8012ee6:	6078      	str	r0, [r7, #4]
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	3308      	adds	r3, #8
 8012eec:	4618      	mov	r0, r3
 8012eee:	370c      	adds	r7, #12
 8012ef0:	46bd      	mov	sp, r7
 8012ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ef6:	4770      	bx	lr

08012ef8 <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EENS_10DenseShapeES9_Li6EE6evalToINS3_IfLi1ELi1ELi0ELi1ELi1EEEEEvRT_RKS6_RKS8_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8012ef8:	b590      	push	{r4, r7, lr}
 8012efa:	b08b      	sub	sp, #44	; 0x2c
 8012efc:	af00      	add	r7, sp, #0
 8012efe:	60f8      	str	r0, [r7, #12]
 8012f00:	60b9      	str	r1, [r7, #8]
 8012f02:	607a      	str	r2, [r7, #4]
    dst.coeffRef(0,0) = (lhs.transpose().cwiseProduct(rhs)).sum();
 8012f04:	f107 0320 	add.w	r3, r7, #32
 8012f08:	68b9      	ldr	r1, [r7, #8]
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	f000 fadb 	bl	80134c6 <_ZNK5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE9transposeEv>
 8012f10:	f107 0310 	add.w	r3, r7, #16
 8012f14:	f107 0120 	add.w	r1, r7, #32
 8012f18:	687a      	ldr	r2, [r7, #4]
 8012f1a:	4618      	mov	r0, r3
 8012f1c:	f000 fae4 	bl	80134e8 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEE12cwiseProductINS1_IS4_EEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	2200      	movs	r2, #0
 8012f24:	2100      	movs	r1, #0
 8012f26:	4618      	mov	r0, r3
 8012f28:	f7f3 fb99 	bl	800665e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>
 8012f2c:	4604      	mov	r4, r0
 8012f2e:	f107 0310 	add.w	r3, r7, #16
 8012f32:	4618      	mov	r0, r3
 8012f34:	f000 fb06 	bl	8013544 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE3sumEv>
 8012f38:	eef0 7a40 	vmov.f32	s15, s0
 8012f3c:	edc4 7a00 	vstr	s15, [r4]
  }
 8012f40:	bf00      	nop
 8012f42:	372c      	adds	r7, #44	; 0x2c
 8012f44:	46bd      	mov	sp, r7
 8012f46:	bd90      	pop	{r4, r7, pc}

08012f48 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS6_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b082      	sub	sp, #8
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	6078      	str	r0, [r7, #4]
 8012f50:	6039      	str	r1, [r7, #0]
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	6839      	ldr	r1, [r7, #0]
 8012f56:	4618      	mov	r0, r3
 8012f58:	f000 fb0f 	bl	801357a <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfEC1ERKS6_>
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	4618      	mov	r0, r3
 8012f60:	3708      	adds	r7, #8
 8012f62:	46bd      	mov	sp, r7
 8012f64:	bd80      	pop	{r7, pc}

08012f66 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8012f66:	b480      	push	{r7}
 8012f68:	b083      	sub	sp, #12
 8012f6a:	af00      	add	r7, sp, #0
 8012f6c:	6078      	str	r0, [r7, #4]
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	4618      	mov	r0, r3
 8012f72:	370c      	adds	r7, #12
 8012f74:	46bd      	mov	sp, r7
 8012f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f7a:	4770      	bx	lr

08012f7c <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8012f7c:	b580      	push	{r7, lr}
 8012f7e:	b084      	sub	sp, #16
 8012f80:	af00      	add	r7, sp, #0
 8012f82:	60f8      	str	r0, [r7, #12]
 8012f84:	60b9      	str	r1, [r7, #8]
 8012f86:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	68ba      	ldr	r2, [r7, #8]
 8012f8c:	6879      	ldr	r1, [r7, #4]
 8012f8e:	4618      	mov	r0, r3
 8012f90:	f000 fb09 	bl	80135a6 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE5coeffEii>
 8012f94:	4603      	mov	r3, r0
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	ee07 3a90 	vmov	s15, r3
  }
 8012f9c:	eeb0 0a67 	vmov.f32	s0, s15
 8012fa0:	3710      	adds	r7, #16
 8012fa2:	46bd      	mov	sp, r7
 8012fa4:	bd80      	pop	{r7, pc}
	...

08012fa8 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 8012fa8:	b580      	push	{r7, lr}
 8012faa:	b084      	sub	sp, #16
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	60f8      	str	r0, [r7, #12]
 8012fb0:	60b9      	str	r1, [r7, #8]
 8012fb2:	607a      	str	r2, [r7, #4]
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	687a      	ldr	r2, [r7, #4]
 8012fb8:	68b9      	ldr	r1, [r7, #8]
 8012fba:	4618      	mov	r0, r3
 8012fbc:	f000 fb0b 	bl	80135d6 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	db07      	blt.n	8012fd6 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x2e>
 8012fc6:	68bb      	ldr	r3, [r7, #8]
 8012fc8:	4618      	mov	r0, r3
 8012fca:	f7f1 ffe7 	bl	8004f9c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8012fce:	4602      	mov	r2, r0
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	4293      	cmp	r3, r2
 8012fd4:	db05      	blt.n	8012fe2 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x3a>
 8012fd6:	4b05      	ldr	r3, [pc, #20]	; (8012fec <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x44>)
 8012fd8:	4a05      	ldr	r2, [pc, #20]	; (8012ff0 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x48>)
 8012fda:	2178      	movs	r1, #120	; 0x78
 8012fdc:	4805      	ldr	r0, [pc, #20]	; (8012ff4 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x4c>)
 8012fde:	f00a fd3d 	bl	801da5c <__assert_func>
    }
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	3710      	adds	r7, #16
 8012fe8:	46bd      	mov	sp, r7
 8012fea:	bd80      	pop	{r7, pc}
 8012fec:	08024448 	.word	0x08024448
 8012ff0:	080287f8 	.word	0x080287f8
 8012ff4:	080245cc 	.word	0x080245cc

08012ff8 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8012ff8:	b480      	push	{r7}
 8012ffa:	b083      	sub	sp, #12
 8012ffc:	af00      	add	r7, sp, #0
 8012ffe:	6078      	str	r0, [r7, #4]
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	4618      	mov	r0, r3
 8013004:	370c      	adds	r7, #12
 8013006:	46bd      	mov	sp, r7
 8013008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801300c:	4770      	bx	lr

0801300e <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>:
 801300e:	b580      	push	{r7, lr}
 8013010:	b082      	sub	sp, #8
 8013012:	af00      	add	r7, sp, #0
 8013014:	6078      	str	r0, [r7, #4]
 8013016:	6878      	ldr	r0, [r7, #4]
 8013018:	f000 faee 	bl	80135f8 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	4618      	mov	r0, r3
 8013020:	3708      	adds	r7, #8
 8013022:	46bd      	mov	sp, r7
 8013024:	bd80      	pop	{r7, pc}

08013026 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8013026:	b580      	push	{r7, lr}
 8013028:	b082      	sub	sp, #8
 801302a:	af00      	add	r7, sp, #0
 801302c:	6078      	str	r0, [r7, #4]
 801302e:	6878      	ldr	r0, [r7, #4]
 8013030:	f7ff ffed 	bl	801300e <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	4618      	mov	r0, r3
 8013038:	3708      	adds	r7, #8
 801303a:	46bd      	mov	sp, r7
 801303c:	bd80      	pop	{r7, pc}

0801303e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 801303e:	b580      	push	{r7, lr}
 8013040:	b082      	sub	sp, #8
 8013042:	af00      	add	r7, sp, #0
 8013044:	6078      	str	r0, [r7, #4]
 8013046:	f7f3 fbc4 	bl	80067d2 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 801304a:	4603      	mov	r3, r0
 801304c:	4618      	mov	r0, r3
 801304e:	3708      	adds	r7, #8
 8013050:	46bd      	mov	sp, r7
 8013052:	bd80      	pop	{r7, pc}

08013054 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 8013054:	b580      	push	{r7, lr}
 8013056:	b082      	sub	sp, #8
 8013058:	af00      	add	r7, sp, #0
 801305a:	6078      	str	r0, [r7, #4]
 801305c:	f7f3 fbb9 	bl	80067d2 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8013060:	4603      	mov	r3, r0
 8013062:	4618      	mov	r0, r3
 8013064:	3708      	adds	r7, #8
 8013066:	46bd      	mov	sp, r7
 8013068:	bd80      	pop	{r7, pc}
	...

0801306c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 801306c:	b5b0      	push	{r4, r5, r7, lr}
 801306e:	b084      	sub	sp, #16
 8013070:	af00      	add	r7, sp, #0
 8013072:	60f8      	str	r0, [r7, #12]
 8013074:	60b9      	str	r1, [r7, #8]
 8013076:	607a      	str	r2, [r7, #4]
 8013078:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 801307a:	68f8      	ldr	r0, [r7, #12]
 801307c:	f7ff ffd3 	bl	8013026 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS_5DenseEEC1Ev>
 8013080:	68fa      	ldr	r2, [r7, #12]
 8013082:	68bb      	ldr	r3, [r7, #8]
 8013084:	4614      	mov	r4, r2
 8013086:	461d      	mov	r5, r3
 8013088:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801308a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801308c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013090:	e884 0003 	stmia.w	r4, {r0, r1}
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	f103 0218 	add.w	r2, r3, #24
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	4614      	mov	r4, r2
 801309e:	461d      	mov	r5, r3
 80130a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80130a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80130a4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80130a8:	e884 0003 	stmia.w	r4, {r0, r1}
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	3330      	adds	r3, #48	; 0x30
 80130b0:	6839      	ldr	r1, [r7, #0]
 80130b2:	4618      	mov	r0, r3
 80130b4:	f7f2 f8e6 	bl	8005284 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 80130b8:	68b8      	ldr	r0, [r7, #8]
 80130ba:	f7f8 fd69 	bl	800bb90 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>
 80130be:	4604      	mov	r4, r0
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	4618      	mov	r0, r3
 80130c4:	f7ff ffbb 	bl	801303e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4rowsEv>
 80130c8:	4603      	mov	r3, r0
 80130ca:	429c      	cmp	r4, r3
 80130cc:	d10a      	bne.n	80130e4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x78>
 80130ce:	68b8      	ldr	r0, [r7, #8]
 80130d0:	f7f8 fd6b 	bl	800bbaa <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>
 80130d4:	4604      	mov	r4, r0
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	4618      	mov	r0, r3
 80130da:	f7ff ffbb 	bl	8013054 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4colsEv>
 80130de:	4603      	mov	r3, r0
 80130e0:	429c      	cmp	r4, r3
 80130e2:	d005      	beq.n	80130f0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x84>
 80130e4:	4b05      	ldr	r3, [pc, #20]	; (80130fc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x90>)
 80130e6:	4a06      	ldr	r2, [pc, #24]	; (8013100 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x94>)
 80130e8:	2174      	movs	r1, #116	; 0x74
 80130ea:	4806      	ldr	r0, [pc, #24]	; (8013104 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x98>)
 80130ec:	f00a fcb6 	bl	801da5c <__assert_func>
    }
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	4618      	mov	r0, r3
 80130f4:	3710      	adds	r7, #16
 80130f6:	46bd      	mov	sp, r7
 80130f8:	bdb0      	pop	{r4, r5, r7, pc}
 80130fa:	bf00      	nop
 80130fc:	0801f8c4 	.word	0x0801f8c4
 8013100:	080288d4 	.word	0x080288d4
 8013104:	0801fb28 	.word	0x0801fb28

08013108 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8013108:	b580      	push	{r7, lr}
 801310a:	b082      	sub	sp, #8
 801310c:	af00      	add	r7, sp, #0
 801310e:	6078      	str	r0, [r7, #4]
 8013110:	6878      	ldr	r0, [r7, #4]
 8013112:	f000 f809 	bl	8013128 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 8013116:	4603      	mov	r3, r0
 8013118:	4618      	mov	r0, r3
 801311a:	f000 fa78 	bl	801360e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE4colsEv>
 801311e:	4603      	mov	r3, r0
 8013120:	4618      	mov	r0, r3
 8013122:	3708      	adds	r7, #8
 8013124:	46bd      	mov	sp, r7
 8013126:	bd80      	pop	{r7, pc}

08013128 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8013128:	b480      	push	{r7}
 801312a:	b083      	sub	sp, #12
 801312c:	af00      	add	r7, sp, #0
 801312e:	6078      	str	r0, [r7, #4]
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	4618      	mov	r0, r3
 8013134:	370c      	adds	r7, #12
 8013136:	46bd      	mov	sp, r7
 8013138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801313c:	4770      	bx	lr

0801313e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 801313e:	b580      	push	{r7, lr}
 8013140:	b082      	sub	sp, #8
 8013142:	af00      	add	r7, sp, #0
 8013144:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	4618      	mov	r0, r3
 801314a:	f7f8 fd21 	bl	800bb90 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>
 801314e:	4603      	mov	r3, r0
    }
 8013150:	4618      	mov	r0, r3
 8013152:	3708      	adds	r7, #8
 8013154:	46bd      	mov	sp, r7
 8013156:	bd80      	pop	{r7, pc}

08013158 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 8013158:	b580      	push	{r7, lr}
 801315a:	b082      	sub	sp, #8
 801315c:	af00      	add	r7, sp, #0
 801315e:	6078      	str	r0, [r7, #4]
 8013160:	6878      	ldr	r0, [r7, #4]
 8013162:	f000 fa7b 	bl	801365c <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	4618      	mov	r0, r3
 801316a:	3708      	adds	r7, #8
 801316c:	46bd      	mov	sp, r7
 801316e:	bd80      	pop	{r7, pc}

08013170 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 8013170:	b580      	push	{r7, lr}
 8013172:	b082      	sub	sp, #8
 8013174:	af00      	add	r7, sp, #0
 8013176:	6078      	str	r0, [r7, #4]
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	4618      	mov	r0, r3
 801317c:	f7ff ffec 	bl	8013158 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEED1Ev>
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	4618      	mov	r0, r3
 8013184:	3708      	adds	r7, #8
 8013186:	46bd      	mov	sp, r7
 8013188:	bd80      	pop	{r7, pc}

0801318a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 801318a:	b580      	push	{r7, lr}
 801318c:	b082      	sub	sp, #8
 801318e:	af00      	add	r7, sp, #0
 8013190:	6078      	str	r0, [r7, #4]
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	4618      	mov	r0, r3
 8013196:	f7ff ffeb 	bl	8013170 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EED1Ev>
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	4618      	mov	r0, r3
 801319e:	3708      	adds	r7, #8
 80131a0:	46bd      	mov	sp, r7
 80131a2:	bd80      	pop	{r7, pc}

080131a4 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 80131a4:	b580      	push	{r7, lr}
 80131a6:	b082      	sub	sp, #8
 80131a8:	af00      	add	r7, sp, #0
 80131aa:	6078      	str	r0, [r7, #4]
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	4618      	mov	r0, r3
 80131b0:	f7ff ffeb 	bl	801318a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	4618      	mov	r0, r3
 80131b8:	3708      	adds	r7, #8
 80131ba:	46bd      	mov	sp, r7
 80131bc:	bd80      	pop	{r7, pc}

080131be <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 80131be:	b580      	push	{r7, lr}
 80131c0:	b082      	sub	sp, #8
 80131c2:	af00      	add	r7, sp, #0
 80131c4:	6078      	str	r0, [r7, #4]
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	330c      	adds	r3, #12
 80131ca:	4618      	mov	r0, r3
 80131cc:	f7ff ffea 	bl	80131a4 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	3304      	adds	r3, #4
 80131d4:	4618      	mov	r0, r3
 80131d6:	f7f8 fdcf 	bl	800bd78 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	4618      	mov	r0, r3
 80131de:	3708      	adds	r7, #8
 80131e0:	46bd      	mov	sp, r7
 80131e2:	bd80      	pop	{r7, pc}

080131e4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 80131e4:	b580      	push	{r7, lr}
 80131e6:	b082      	sub	sp, #8
 80131e8:	af00      	add	r7, sp, #0
 80131ea:	6078      	str	r0, [r7, #4]
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	4618      	mov	r0, r3
 80131f0:	f7ff ffe5 	bl	80131be <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 80131f4:	6878      	ldr	r0, [r7, #4]
 80131f6:	f000 fa26 	bl	8013646 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	4618      	mov	r0, r3
 80131fe:	3708      	adds	r7, #8
 8013200:	46bd      	mov	sp, r7
 8013202:	bd80      	pop	{r7, pc}

08013204 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8013204:	b580      	push	{r7, lr}
 8013206:	b082      	sub	sp, #8
 8013208:	af00      	add	r7, sp, #0
 801320a:	6078      	str	r0, [r7, #4]
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	4618      	mov	r0, r3
 8013210:	f7ff ffe8 	bl	80131e4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffED1Ev>
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	4618      	mov	r0, r3
 8013218:	3708      	adds	r7, #8
 801321a:	46bd      	mov	sp, r7
 801321c:	bd80      	pop	{r7, pc}

0801321e <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 801321e:	b580      	push	{r7, lr}
 8013220:	b082      	sub	sp, #8
 8013222:	af00      	add	r7, sp, #0
 8013224:	6078      	str	r0, [r7, #4]
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	4618      	mov	r0, r3
 801322a:	f7ff ffeb 	bl	8013204 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	4618      	mov	r0, r3
 8013232:	3708      	adds	r7, #8
 8013234:	46bd      	mov	sp, r7
 8013236:	bd80      	pop	{r7, pc}

08013238 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 8013238:	b580      	push	{r7, lr}
 801323a:	ed2d 8b02 	vpush	{d8}
 801323e:	b088      	sub	sp, #32
 8013240:	af00      	add	r7, sp, #0
 8013242:	6078      	str	r0, [r7, #4]
 8013244:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 8013246:	6878      	ldr	r0, [r7, #4]
 8013248:	f7ff fc8a 	bl	8012b60 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE4rowsEv>
 801324c:	4603      	mov	r3, r0
 801324e:	2b00      	cmp	r3, #0
 8013250:	dd05      	ble.n	801325e <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 8013252:	6878      	ldr	r0, [r7, #4]
 8013254:	f7ff ff58 	bl	8013108 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE4colsEv>
 8013258:	4603      	mov	r3, r0
 801325a:	2b00      	cmp	r3, #0
 801325c:	dc06      	bgt.n	801326c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 801325e:	4b16      	ldr	r3, [pc, #88]	; (80132b8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 8013260:	4a16      	ldr	r2, [pc, #88]	; (80132bc <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 8013262:	f240 119b 	movw	r1, #411	; 0x19b
 8013266:	4816      	ldr	r0, [pc, #88]	; (80132c0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 8013268:	f00a fbf8 	bl	801da5c <__assert_func>
 801326c:	bf00      	nop
  ThisEvaluator thisEval(derived());
 801326e:	6878      	ldr	r0, [r7, #4]
 8013270:	f7ff ff5a 	bl	8013128 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 8013274:	4602      	mov	r2, r0
 8013276:	f107 030c 	add.w	r3, r7, #12
 801327a:	4611      	mov	r1, r2
 801327c:	4618      	mov	r0, r3
 801327e:	f000 f9d3 	bl	8013628 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8013282:	6878      	ldr	r0, [r7, #4]
 8013284:	f7ff ff50 	bl	8013128 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 8013288:	4602      	mov	r2, r0
 801328a:	f107 030c 	add.w	r3, r7, #12
 801328e:	6839      	ldr	r1, [r7, #0]
 8013290:	4618      	mov	r0, r3
 8013292:	f000 f9ee 	bl	8013672 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 8013296:	eeb0 8a40 	vmov.f32	s16, s0
 801329a:	bf00      	nop
  ThisEvaluator thisEval(derived());
 801329c:	f107 030c 	add.w	r3, r7, #12
 80132a0:	4618      	mov	r0, r3
 80132a2:	f7ff ffbc 	bl	801321e <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 80132a6:	eef0 7a48 	vmov.f32	s15, s16
}
 80132aa:	eeb0 0a67 	vmov.f32	s0, s15
 80132ae:	3720      	adds	r7, #32
 80132b0:	46bd      	mov	sp, r7
 80132b2:	ecbd 8b02 	vpop	{d8}
 80132b6:	bd80      	pop	{r7, pc}
 80132b8:	08024944 	.word	0x08024944
 80132bc:	08028b20 	.word	0x08028b20
 80132c0:	08024b50 	.word	0x08024b50

080132c4 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi5ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80132c4:	b580      	push	{r7, lr}
 80132c6:	b082      	sub	sp, #8
 80132c8:	af00      	add	r7, sp, #0
 80132ca:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80132cc:	2202      	movs	r2, #2
 80132ce:	2101      	movs	r1, #1
 80132d0:	6878      	ldr	r0, [r7, #4]
 80132d2:	f7fe fbdb 	bl	8011a8c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80132d6:	6878      	ldr	r0, [r7, #4]
 80132d8:	f000 f9dc 	bl	8013694 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi6ELi9EE3runERSE_>
  }
 80132dc:	bf00      	nop
 80132de:	3708      	adds	r7, #8
 80132e0:	46bd      	mov	sp, r7
 80132e2:	bd80      	pop	{r7, pc}

080132e4 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80132e4:	b580      	push	{r7, lr}
 80132e6:	b082      	sub	sp, #8
 80132e8:	af00      	add	r7, sp, #0
 80132ea:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80132ec:	2201      	movs	r2, #1
 80132ee:	2101      	movs	r1, #1
 80132f0:	6878      	ldr	r0, [r7, #4]
 80132f2:	f7ff f874 	bl	80123de <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80132f6:	6878      	ldr	r0, [r7, #4]
 80132f8:	f000 f9dc 	bl	80136b4 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSC_>
  }
 80132fc:	bf00      	nop
 80132fe:	3708      	adds	r7, #8
 8013300:	46bd      	mov	sp, r7
 8013302:	bd80      	pop	{r7, pc}

08013304 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8013304:	b580      	push	{r7, lr}
 8013306:	b082      	sub	sp, #8
 8013308:	af00      	add	r7, sp, #0
 801330a:	6078      	str	r0, [r7, #4]
 801330c:	6878      	ldr	r0, [r7, #4]
 801330e:	f7f2 fb69 	bl	80059e4 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8013312:	4603      	mov	r3, r0
 8013314:	4618      	mov	r0, r3
 8013316:	f7f1 fe4c 	bl	8004fb2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 801331a:	4603      	mov	r3, r0
 801331c:	4618      	mov	r0, r3
 801331e:	3708      	adds	r7, #8
 8013320:	46bd      	mov	sp, r7
 8013322:	bd80      	pop	{r7, pc}

08013324 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4sizeEv>:
  inline Index size() const EIGEN_NOEXCEPT { return rows() * cols(); }
 8013324:	b590      	push	{r4, r7, lr}
 8013326:	b083      	sub	sp, #12
 8013328:	af00      	add	r7, sp, #0
 801332a:	6078      	str	r0, [r7, #4]
 801332c:	6878      	ldr	r0, [r7, #4]
 801332e:	f7ff ffe9 	bl	8013304 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8013332:	4604      	mov	r4, r0
 8013334:	6878      	ldr	r0, [r7, #4]
 8013336:	f000 f807 	bl	8013348 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 801333a:	4603      	mov	r3, r0
 801333c:	fb04 f303 	mul.w	r3, r4, r3
 8013340:	4618      	mov	r0, r3
 8013342:	370c      	adds	r7, #12
 8013344:	46bd      	mov	sp, r7
 8013346:	bd90      	pop	{r4, r7, pc}

08013348 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8013348:	b580      	push	{r7, lr}
 801334a:	b082      	sub	sp, #8
 801334c:	af00      	add	r7, sp, #0
 801334e:	6078      	str	r0, [r7, #4]
 8013350:	6878      	ldr	r0, [r7, #4]
 8013352:	f7f2 fb47 	bl	80059e4 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8013356:	4603      	mov	r3, r0
 8013358:	4618      	mov	r0, r3
 801335a:	f7f1 fe1f 	bl	8004f9c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 801335e:	4603      	mov	r3, r0
 8013360:	4618      	mov	r0, r3
 8013362:	3708      	adds	r7, #8
 8013364:	46bd      	mov	sp, r7
 8013366:	bd80      	pop	{r7, pc}

08013368 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>:
    inline Index innerStride() const EIGEN_NOEXCEPT { return 1; }
 8013368:	b480      	push	{r7}
 801336a:	b083      	sub	sp, #12
 801336c:	af00      	add	r7, sp, #0
 801336e:	6078      	str	r0, [r7, #4]
 8013370:	2301      	movs	r3, #1
 8013372:	4618      	mov	r0, r3
 8013374:	370c      	adds	r7, #12
 8013376:	46bd      	mov	sp, r7
 8013378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801337c:	4770      	bx	lr

0801337e <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 801337e:	b480      	push	{r7}
 8013380:	b083      	sub	sp, #12
 8013382:	af00      	add	r7, sp, #0
 8013384:	6078      	str	r0, [r7, #4]
    }
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	4618      	mov	r0, r3
 801338a:	370c      	adds	r7, #12
 801338c:	46bd      	mov	sp, r7
 801338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013392:	4770      	bx	lr

08013394 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 8013394:	b480      	push	{r7}
 8013396:	b083      	sub	sp, #12
 8013398:	af00      	add	r7, sp, #0
 801339a:	6078      	str	r0, [r7, #4]
 801339c:	6039      	str	r1, [r7, #0]
    {}
 801339e:	bf00      	nop
 80133a0:	370c      	adds	r7, #12
 80133a2:	46bd      	mov	sp, r7
 80133a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133a8:	4770      	bx	lr

080133aa <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80133aa:	b480      	push	{r7}
 80133ac:	b083      	sub	sp, #12
 80133ae:	af00      	add	r7, sp, #0
 80133b0:	6078      	str	r0, [r7, #4]
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	4618      	mov	r0, r3
 80133b6:	370c      	adds	r7, #12
 80133b8:	46bd      	mov	sp, r7
 80133ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133be:	4770      	bx	lr

080133c0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4DataC1ERKSJ_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 80133c0:	b590      	push	{r4, r7, lr}
 80133c2:	b083      	sub	sp, #12
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	6078      	str	r0, [r7, #4]
 80133c8:	6039      	str	r1, [r7, #0]
 80133ca:	687c      	ldr	r4, [r7, #4]
 80133cc:	6838      	ldr	r0, [r7, #0]
 80133ce:	f000 f981 	bl	80136d4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE7functorEv>
 80133d2:	4603      	mov	r3, r0
 80133d4:	4619      	mov	r1, r3
 80133d6:	4620      	mov	r0, r4
 80133d8:	f7f1 ff54 	bl	8005284 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	1d1c      	adds	r4, r3, #4
 80133e0:	6838      	ldr	r0, [r7, #0]
 80133e2:	f000 f983 	bl	80136ec <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE3lhsEv>
 80133e6:	4603      	mov	r3, r0
 80133e8:	4619      	mov	r1, r3
 80133ea:	4620      	mov	r0, r4
 80133ec:	f7fb fa91 	bl	800e912 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	f103 040c 	add.w	r4, r3, #12
 80133f6:	6838      	ldr	r0, [r7, #0]
 80133f8:	f000 f983 	bl	8013702 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE3rhsEv>
 80133fc:	4603      	mov	r3, r0
 80133fe:	4619      	mov	r1, r3
 8013400:	4620      	mov	r0, r4
 8013402:	f000 f98a 	bl	801371a <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERS9_>
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	4618      	mov	r0, r3
 801340a:	370c      	adds	r7, #12
 801340c:	46bd      	mov	sp, r7
 801340e:	bd90      	pop	{r4, r7, pc}

08013410 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8013410:	b580      	push	{r7, lr}
 8013412:	b084      	sub	sp, #16
 8013414:	af00      	add	r7, sp, #0
 8013416:	60f8      	str	r0, [r7, #12]
 8013418:	60b9      	str	r1, [r7, #8]
 801341a:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 801341c:	68fb      	ldr	r3, [r7, #12]
 801341e:	68ba      	ldr	r2, [r7, #8]
 8013420:	6879      	ldr	r1, [r7, #4]
 8013422:	4618      	mov	r0, r3
 8013424:	f000 f988 	bl	8013738 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE5coeffEii>
 8013428:	eef0 7a40 	vmov.f32	s15, s0
 801342c:	eeb0 0a67 	vmov.f32	s0, s15
 8013430:	3710      	adds	r7, #16
 8013432:	46bd      	mov	sp, r7
 8013434:	bd80      	pop	{r7, pc}

08013436 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8013436:	b580      	push	{r7, lr}
 8013438:	b082      	sub	sp, #8
 801343a:	af00      	add	r7, sp, #0
 801343c:	6078      	str	r0, [r7, #4]
 801343e:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8013440:	2201      	movs	r2, #1
 8013442:	2100      	movs	r1, #0
 8013444:	6878      	ldr	r0, [r7, #4]
 8013446:	f7ff ffe3 	bl	8013410 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 801344a:	eef0 7a40 	vmov.f32	s15, s0
  }
 801344e:	eeb0 0a67 	vmov.f32	s0, s15
 8013452:	3708      	adds	r7, #8
 8013454:	46bd      	mov	sp, r7
 8013456:	bd80      	pop	{r7, pc}

08013458 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8013458:	b580      	push	{r7, lr}
 801345a:	b082      	sub	sp, #8
 801345c:	af00      	add	r7, sp, #0
 801345e:	6078      	str	r0, [r7, #4]
 8013460:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8013462:	2202      	movs	r2, #2
 8013464:	2100      	movs	r1, #0
 8013466:	6878      	ldr	r0, [r7, #4]
 8013468:	f7ff ffd2 	bl	8013410 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 801346c:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013470:	eeb0 0a67 	vmov.f32	s0, s15
 8013474:	3708      	adds	r7, #8
 8013476:	46bd      	mov	sp, r7
 8013478:	bd80      	pop	{r7, pc}

0801347a <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>:
  evaluator()
 801347a:	b580      	push	{r7, lr}
 801347c:	b082      	sub	sp, #8
 801347e:	af00      	add	r7, sp, #0
 8013480:	6078      	str	r0, [r7, #4]
    : m_d(0,OuterStrideAtCompileTime)
 8013482:	6878      	ldr	r0, [r7, #4]
 8013484:	f7f7 fd37 	bl	800aef6 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	2200      	movs	r2, #0
 801348c:	2100      	movs	r1, #0
 801348e:	4618      	mov	r0, r3
 8013490:	f7f3 fcbd 	bl	8006e0e <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	4618      	mov	r0, r3
 8013498:	3708      	adds	r7, #8
 801349a:	46bd      	mov	sp, r7
 801349c:	bd80      	pop	{r7, pc}

0801349e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>:
    EIGEN_STRONG_INLINE void _init2(Index rows, Index cols, typename internal::enable_if<Base::SizeAtCompileTime!=2,T0>::type* = 0)
 801349e:	b580      	push	{r7, lr}
 80134a0:	b086      	sub	sp, #24
 80134a2:	af00      	add	r7, sp, #0
 80134a4:	60f8      	str	r0, [r7, #12]
 80134a6:	60b9      	str	r1, [r7, #8]
 80134a8:	607a      	str	r2, [r7, #4]
 80134aa:	603b      	str	r3, [r7, #0]
      const bool t0_is_integer_alike = internal::is_valid_index_type<T0>::value;
 80134ac:	2301      	movs	r3, #1
 80134ae:	75fb      	strb	r3, [r7, #23]
      const bool t1_is_integer_alike = internal::is_valid_index_type<T1>::value;
 80134b0:	2301      	movs	r3, #1
 80134b2:	75bb      	strb	r3, [r7, #22]
      resize(rows,cols);
 80134b4:	687a      	ldr	r2, [r7, #4]
 80134b6:	68b9      	ldr	r1, [r7, #8]
 80134b8:	68f8      	ldr	r0, [r7, #12]
 80134ba:	f7f9 fef9 	bl	800d2b0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>
    }
 80134be:	bf00      	nop
 80134c0:	3718      	adds	r7, #24
 80134c2:	46bd      	mov	sp, r7
 80134c4:	bd80      	pop	{r7, pc}

080134c6 <_ZNK5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 80134c6:	b580      	push	{r7, lr}
 80134c8:	b082      	sub	sp, #8
 80134ca:	af00      	add	r7, sp, #0
 80134cc:	6078      	str	r0, [r7, #4]
 80134ce:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 80134d0:	6838      	ldr	r0, [r7, #0]
 80134d2:	f7f2 fae5 	bl	8005aa0 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE7derivedEv>
 80134d6:	4603      	mov	r3, r0
 80134d8:	4619      	mov	r1, r3
 80134da:	6878      	ldr	r0, [r7, #4]
 80134dc:	f000 f974 	bl	80137c8 <_ZN5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERS6_>
}
 80134e0:	6878      	ldr	r0, [r7, #4]
 80134e2:	3708      	adds	r7, #8
 80134e4:	46bd      	mov	sp, r7
 80134e6:	bd80      	pop	{r7, pc}

080134e8 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEE12cwiseProductINS1_IS4_EEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 80134e8:	b5b0      	push	{r4, r5, r7, lr}
 80134ea:	b086      	sub	sp, #24
 80134ec:	af00      	add	r7, sp, #0
 80134ee:	60f8      	str	r0, [r7, #12]
 80134f0:	60b9      	str	r1, [r7, #8]
 80134f2:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 80134f4:	68b8      	ldr	r0, [r7, #8]
 80134f6:	f000 f97a 	bl	80137ee <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEE7derivedEv>
 80134fa:	4604      	mov	r4, r0
 80134fc:	6878      	ldr	r0, [r7, #4]
 80134fe:	f7f2 fa05 	bl	800590c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8013502:	4605      	mov	r5, r0
 8013504:	f107 0314 	add.w	r3, r7, #20
 8013508:	4618      	mov	r0, r3
 801350a:	f7f1 fe31 	bl	8005170 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 801350e:	f107 0314 	add.w	r3, r7, #20
 8013512:	462a      	mov	r2, r5
 8013514:	4621      	mov	r1, r4
 8013516:	68f8      	ldr	r0, [r7, #12]
 8013518:	f000 f9a6 	bl	8013868 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_>
}
 801351c:	68f8      	ldr	r0, [r7, #12]
 801351e:	3718      	adds	r7, #24
 8013520:	46bd      	mov	sp, r7
 8013522:	bdb0      	pop	{r4, r5, r7, pc}

08013524 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8013524:	b580      	push	{r7, lr}
 8013526:	b082      	sub	sp, #8
 8013528:	af00      	add	r7, sp, #0
 801352a:	6078      	str	r0, [r7, #4]
 801352c:	6878      	ldr	r0, [r7, #4]
 801352e:	f000 f9eb 	bl	8013908 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 8013532:	4603      	mov	r3, r0
 8013534:	4618      	mov	r0, r3
 8013536:	f000 f9f2 	bl	801391e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE4rowsEv>
 801353a:	4603      	mov	r3, r0
 801353c:	4618      	mov	r0, r3
 801353e:	3708      	adds	r7, #8
 8013540:	46bd      	mov	sp, r7
 8013542:	bd80      	pop	{r7, pc}

08013544 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE3sumEv>:
DenseBase<Derived>::sum() const
 8013544:	b590      	push	{r4, r7, lr}
 8013546:	b085      	sub	sp, #20
 8013548:	af00      	add	r7, sp, #0
 801354a:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 801354c:	6878      	ldr	r0, [r7, #4]
 801354e:	f000 f9db 	bl	8013908 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 8013552:	4604      	mov	r4, r0
 8013554:	f107 030c 	add.w	r3, r7, #12
 8013558:	4618      	mov	r0, r3
 801355a:	f7f2 f900 	bl	800575e <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 801355e:	f107 030c 	add.w	r3, r7, #12
 8013562:	4619      	mov	r1, r3
 8013564:	4620      	mov	r0, r4
 8013566:	f000 fa83 	bl	8013a70 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 801356a:	eef0 7a40 	vmov.f32	s15, s0
 801356e:	bf00      	nop
}
 8013570:	eeb0 0a67 	vmov.f32	s0, s15
 8013574:	3714      	adds	r7, #20
 8013576:	46bd      	mov	sp, r7
 8013578:	bd90      	pop	{r4, r7, pc}

0801357a <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfEC1ERKS6_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 801357a:	b590      	push	{r4, r7, lr}
 801357c:	b083      	sub	sp, #12
 801357e:	af00      	add	r7, sp, #0
 8013580:	6078      	str	r0, [r7, #4]
 8013582:	6039      	str	r1, [r7, #0]
 8013584:	6878      	ldr	r0, [r7, #4]
 8013586:	f000 fac5 	bl	8013b14 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 801358a:	687c      	ldr	r4, [r7, #4]
 801358c:	6838      	ldr	r0, [r7, #0]
 801358e:	f000 fab5 	bl	8013afc <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 8013592:	4603      	mov	r3, r0
 8013594:	4619      	mov	r1, r3
 8013596:	4620      	mov	r0, r4
 8013598:	f000 fac7 	bl	8013b2a <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS4_>
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	4618      	mov	r0, r3
 80135a0:	370c      	adds	r7, #12
 80135a2:	46bd      	mov	sp, r7
 80135a4:	bd90      	pop	{r4, r7, pc}

080135a6 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 80135a6:	b590      	push	{r4, r7, lr}
 80135a8:	b085      	sub	sp, #20
 80135aa:	af00      	add	r7, sp, #0
 80135ac:	60f8      	str	r0, [r7, #12]
 80135ae:	60b9      	str	r1, [r7, #8]
 80135b0:	607a      	str	r2, [r7, #4]
      return m_d.data[row * m_d.outerStride() + col];
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	681c      	ldr	r4, [r3, #0]
 80135b6:	68fb      	ldr	r3, [r7, #12]
 80135b8:	4618      	mov	r0, r3
 80135ba:	f7f3 fb5d 	bl	8006c78 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>
 80135be:	4602      	mov	r2, r0
 80135c0:	68bb      	ldr	r3, [r7, #8]
 80135c2:	fb03 f202 	mul.w	r2, r3, r2
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	4413      	add	r3, r2
 80135ca:	009b      	lsls	r3, r3, #2
 80135cc:	4423      	add	r3, r4
  }
 80135ce:	4618      	mov	r0, r3
 80135d0:	3714      	adds	r7, #20
 80135d2:	46bd      	mov	sp, r7
 80135d4:	bd90      	pop	{r4, r7, pc}

080135d6 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ENS_5DenseEEC1ERS3_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 80135d6:	b580      	push	{r7, lr}
 80135d8:	b084      	sub	sp, #16
 80135da:	af00      	add	r7, sp, #0
 80135dc:	60f8      	str	r0, [r7, #12]
 80135de:	60b9      	str	r1, [r7, #8]
 80135e0:	607a      	str	r2, [r7, #4]
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	687a      	ldr	r2, [r7, #4]
 80135e6:	68b9      	ldr	r1, [r7, #8]
 80135e8:	4618      	mov	r0, r3
 80135ea:	f000 faad 	bl	8013b48 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EEC1ERS4_i>
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	4618      	mov	r0, r3
 80135f2:	3710      	adds	r7, #16
 80135f4:	46bd      	mov	sp, r7
 80135f6:	bd80      	pop	{r7, pc}

080135f8 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80135f8:	b480      	push	{r7}
 80135fa:	b083      	sub	sp, #12
 80135fc:	af00      	add	r7, sp, #0
 80135fe:	6078      	str	r0, [r7, #4]
    }
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	4618      	mov	r0, r3
 8013604:	370c      	adds	r7, #12
 8013606:	46bd      	mov	sp, r7
 8013608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801360c:	4770      	bx	lr

0801360e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 801360e:	b580      	push	{r7, lr}
 8013610:	b082      	sub	sp, #8
 8013612:	af00      	add	r7, sp, #0
 8013614:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	4618      	mov	r0, r3
 801361a:	f7f8 fac6 	bl	800bbaa <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>
 801361e:	4603      	mov	r3, r0
    }
 8013620:	4618      	mov	r0, r3
 8013622:	3708      	adds	r7, #8
 8013624:	46bd      	mov	sp, r7
 8013626:	bd80      	pop	{r7, pc}

08013628 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 8013628:	b580      	push	{r7, lr}
 801362a:	b082      	sub	sp, #8
 801362c:	af00      	add	r7, sp, #0
 801362e:	6078      	str	r0, [r7, #4]
 8013630:	6039      	str	r1, [r7, #0]
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	6839      	ldr	r1, [r7, #0]
 8013636:	4618      	mov	r0, r3
 8013638:	f000 fab7 	bl	8013baa <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1ERKSI_>
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	4618      	mov	r0, r3
 8013640:	3708      	adds	r7, #8
 8013642:	46bd      	mov	sp, r7
 8013644:	bd80      	pop	{r7, pc}

08013646 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8013646:	b480      	push	{r7}
 8013648:	b083      	sub	sp, #12
 801364a:	af00      	add	r7, sp, #0
 801364c:	6078      	str	r0, [r7, #4]
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	4618      	mov	r0, r3
 8013652:	370c      	adds	r7, #12
 8013654:	46bd      	mov	sp, r7
 8013656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801365a:	4770      	bx	lr

0801365c <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>:
 801365c:	b480      	push	{r7}
 801365e:	b083      	sub	sp, #12
 8013660:	af00      	add	r7, sp, #0
 8013662:	6078      	str	r0, [r7, #4]
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	4618      	mov	r0, r3
 8013668:	370c      	adds	r7, #12
 801366a:	46bd      	mov	sp, r7
 801366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013670:	4770      	bx	lr

08013672 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 8013672:	b580      	push	{r7, lr}
 8013674:	b084      	sub	sp, #16
 8013676:	af00      	add	r7, sp, #0
 8013678:	60f8      	str	r0, [r7, #12]
 801367a:	60b9      	str	r1, [r7, #8]
 801367c:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 801367e:	68b9      	ldr	r1, [r7, #8]
 8013680:	68f8      	ldr	r0, [r7, #12]
 8013682:	f000 faa1 	bl	8013bc8 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 8013686:	eef0 7a40 	vmov.f32	s15, s0
  }
 801368a:	eeb0 0a67 	vmov.f32	s0, s15
 801368e:	3710      	adds	r7, #16
 8013690:	46bd      	mov	sp, r7
 8013692:	bd80      	pop	{r7, pc}

08013694 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi6ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8013694:	b580      	push	{r7, lr}
 8013696:	b082      	sub	sp, #8
 8013698:	af00      	add	r7, sp, #0
 801369a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 801369c:	2200      	movs	r2, #0
 801369e:	2102      	movs	r1, #2
 80136a0:	6878      	ldr	r0, [r7, #4]
 80136a2:	f7fe f9f3 	bl	8011a8c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80136a6:	6878      	ldr	r0, [r7, #4]
 80136a8:	f000 fa9f 	bl	8013bea <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi7ELi9EE3runERSE_>
  }
 80136ac:	bf00      	nop
 80136ae:	3708      	adds	r7, #8
 80136b0:	46bd      	mov	sp, r7
 80136b2:	bd80      	pop	{r7, pc}

080136b4 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80136b4:	b580      	push	{r7, lr}
 80136b6:	b082      	sub	sp, #8
 80136b8:	af00      	add	r7, sp, #0
 80136ba:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80136bc:	2202      	movs	r2, #2
 80136be:	2101      	movs	r1, #1
 80136c0:	6878      	ldr	r0, [r7, #4]
 80136c2:	f7fe fe8c 	bl	80123de <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80136c6:	6878      	ldr	r0, [r7, #4]
 80136c8:	f000 fa9f 	bl	8013c0a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSC_>
  }
 80136cc:	bf00      	nop
 80136ce:	3708      	adds	r7, #8
 80136d0:	46bd      	mov	sp, r7
 80136d2:	bd80      	pop	{r7, pc}

080136d4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 80136d4:	b480      	push	{r7}
 80136d6:	b083      	sub	sp, #12
 80136d8:	af00      	add	r7, sp, #0
 80136da:	6078      	str	r0, [r7, #4]
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	3330      	adds	r3, #48	; 0x30
 80136e0:	4618      	mov	r0, r3
 80136e2:	370c      	adds	r7, #12
 80136e4:	46bd      	mov	sp, r7
 80136e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ea:	4770      	bx	lr

080136ec <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 80136ec:	b480      	push	{r7}
 80136ee:	b083      	sub	sp, #12
 80136f0:	af00      	add	r7, sp, #0
 80136f2:	6078      	str	r0, [r7, #4]
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	4618      	mov	r0, r3
 80136f8:	370c      	adds	r7, #12
 80136fa:	46bd      	mov	sp, r7
 80136fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013700:	4770      	bx	lr

08013702 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8013702:	b480      	push	{r7}
 8013704:	b083      	sub	sp, #12
 8013706:	af00      	add	r7, sp, #0
 8013708:	6078      	str	r0, [r7, #4]
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	3318      	adds	r3, #24
 801370e:	4618      	mov	r0, r3
 8013710:	370c      	adds	r7, #12
 8013712:	46bd      	mov	sp, r7
 8013714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013718:	4770      	bx	lr

0801371a <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERS9_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 801371a:	b580      	push	{r7, lr}
 801371c:	b082      	sub	sp, #8
 801371e:	af00      	add	r7, sp, #0
 8013720:	6078      	str	r0, [r7, #4]
 8013722:	6039      	str	r1, [r7, #0]
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	6839      	ldr	r1, [r7, #0]
 8013728:	4618      	mov	r0, r3
 801372a:	f000 fa7e 	bl	8013c2a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERKS8_>
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	4618      	mov	r0, r3
 8013732:	3708      	adds	r7, #8
 8013734:	46bd      	mov	sp, r7
 8013736:	bd80      	pop	{r7, pc}

08013738 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8013738:	b590      	push	{r4, r7, lr}
 801373a:	b087      	sub	sp, #28
 801373c:	af00      	add	r7, sp, #0
 801373e:	60f8      	str	r0, [r7, #12]
 8013740:	60b9      	str	r1, [r7, #8]
 8013742:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8013744:	68fb      	ldr	r3, [r7, #12]
 8013746:	4618      	mov	r0, r3
 8013748:	f000 fa7e 	bl	8013c48 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4Data4funcEv>
 801374c:	4604      	mov	r4, r0
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	3304      	adds	r3, #4
 8013752:	687a      	ldr	r2, [r7, #4]
 8013754:	68b9      	ldr	r1, [r7, #8]
 8013756:	4618      	mov	r0, r3
 8013758:	f7fb fdf6 	bl	800f348 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 801375c:	eef0 7a40 	vmov.f32	s15, s0
 8013760:	edc7 7a04 	vstr	s15, [r7, #16]
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	330c      	adds	r3, #12
 8013768:	687a      	ldr	r2, [r7, #4]
 801376a:	68b9      	ldr	r1, [r7, #8]
 801376c:	4618      	mov	r0, r3
 801376e:	f000 fa76 	bl	8013c5e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>
 8013772:	eef0 7a40 	vmov.f32	s15, s0
 8013776:	edc7 7a05 	vstr	s15, [r7, #20]
 801377a:	f107 0214 	add.w	r2, r7, #20
 801377e:	f107 0310 	add.w	r3, r7, #16
 8013782:	4619      	mov	r1, r3
 8013784:	4620      	mov	r0, r4
 8013786:	f7fb fc23 	bl	800efd0 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 801378a:	eef0 7a40 	vmov.f32	s15, s0
  }
 801378e:	eeb0 0a67 	vmov.f32	s0, s15
 8013792:	371c      	adds	r7, #28
 8013794:	46bd      	mov	sp, r7
 8013796:	bd90      	pop	{r4, r7, pc}

08013798 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>:
 8013798:	b580      	push	{r7, lr}
 801379a:	b082      	sub	sp, #8
 801379c:	af00      	add	r7, sp, #0
 801379e:	6078      	str	r0, [r7, #4]
 80137a0:	6878      	ldr	r0, [r7, #4]
 80137a2:	f000 fa7d 	bl	8013ca0 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	4618      	mov	r0, r3
 80137aa:	3708      	adds	r7, #8
 80137ac:	46bd      	mov	sp, r7
 80137ae:	bd80      	pop	{r7, pc}

080137b0 <_ZN5Eigen13TransposeImplIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 80137b0:	b580      	push	{r7, lr}
 80137b2:	b082      	sub	sp, #8
 80137b4:	af00      	add	r7, sp, #0
 80137b6:	6078      	str	r0, [r7, #4]
 80137b8:	6878      	ldr	r0, [r7, #4]
 80137ba:	f7ff ffed 	bl	8013798 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	4618      	mov	r0, r3
 80137c2:	3708      	adds	r7, #8
 80137c4:	46bd      	mov	sp, r7
 80137c6:	bd80      	pop	{r7, pc}

080137c8 <_ZN5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERS6_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 80137c8:	b580      	push	{r7, lr}
 80137ca:	b082      	sub	sp, #8
 80137cc:	af00      	add	r7, sp, #0
 80137ce:	6078      	str	r0, [r7, #4]
 80137d0:	6039      	str	r1, [r7, #0]
 80137d2:	6878      	ldr	r0, [r7, #4]
 80137d4:	f7ff ffec 	bl	80137b0 <_ZN5Eigen13TransposeImplIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_5DenseEEC1Ev>
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	683a      	ldr	r2, [r7, #0]
 80137dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80137e0:	e883 0003 	stmia.w	r3, {r0, r1}
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	4618      	mov	r0, r3
 80137e8:	3708      	adds	r7, #8
 80137ea:	46bd      	mov	sp, r7
 80137ec:	bd80      	pop	{r7, pc}

080137ee <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 80137ee:	b480      	push	{r7}
 80137f0:	b083      	sub	sp, #12
 80137f2:	af00      	add	r7, sp, #0
 80137f4:	6078      	str	r0, [r7, #4]
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	4618      	mov	r0, r3
 80137fa:	370c      	adds	r7, #12
 80137fc:	46bd      	mov	sp, r7
 80137fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013802:	4770      	bx	lr

08013804 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>:
 8013804:	b580      	push	{r7, lr}
 8013806:	b082      	sub	sp, #8
 8013808:	af00      	add	r7, sp, #0
 801380a:	6078      	str	r0, [r7, #4]
 801380c:	6878      	ldr	r0, [r7, #4]
 801380e:	f000 fa52 	bl	8013cb6 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	4618      	mov	r0, r3
 8013816:	3708      	adds	r7, #8
 8013818:	46bd      	mov	sp, r7
 801381a:	bd80      	pop	{r7, pc}

0801381c <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 801381c:	b580      	push	{r7, lr}
 801381e:	b082      	sub	sp, #8
 8013820:	af00      	add	r7, sp, #0
 8013822:	6078      	str	r0, [r7, #4]
 8013824:	6878      	ldr	r0, [r7, #4]
 8013826:	f7ff ffed 	bl	8013804 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	4618      	mov	r0, r3
 801382e:	3708      	adds	r7, #8
 8013830:	46bd      	mov	sp, r7
 8013832:	bd80      	pop	{r7, pc}

08013834 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 8013834:	b580      	push	{r7, lr}
 8013836:	b082      	sub	sp, #8
 8013838:	af00      	add	r7, sp, #0
 801383a:	6078      	str	r0, [r7, #4]
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	4618      	mov	r0, r3
 8013840:	f7f2 f95d 	bl	8005afe <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4colsEv>
 8013844:	4603      	mov	r3, r0
 8013846:	4618      	mov	r0, r3
 8013848:	3708      	adds	r7, #8
 801384a:	46bd      	mov	sp, r7
 801384c:	bd80      	pop	{r7, pc}

0801384e <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 801384e:	b580      	push	{r7, lr}
 8013850:	b082      	sub	sp, #8
 8013852:	af00      	add	r7, sp, #0
 8013854:	6078      	str	r0, [r7, #4]
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	4618      	mov	r0, r3
 801385a:	f7f3 f8c2 	bl	80069e2 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4rowsEv>
 801385e:	4603      	mov	r3, r0
 8013860:	4618      	mov	r0, r3
 8013862:	3708      	adds	r7, #8
 8013864:	46bd      	mov	sp, r7
 8013866:	bd80      	pop	{r7, pc}

08013868 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8013868:	b590      	push	{r4, r7, lr}
 801386a:	b085      	sub	sp, #20
 801386c:	af00      	add	r7, sp, #0
 801386e:	60f8      	str	r0, [r7, #12]
 8013870:	60b9      	str	r1, [r7, #8]
 8013872:	607a      	str	r2, [r7, #4]
 8013874:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8013876:	68f8      	ldr	r0, [r7, #12]
 8013878:	f7ff ffd0 	bl	801381c <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EENS_5DenseEEC1Ev>
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	68ba      	ldr	r2, [r7, #8]
 8013880:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013884:	e883 0003 	stmia.w	r3, {r0, r1}
 8013888:	68fb      	ldr	r3, [r7, #12]
 801388a:	3308      	adds	r3, #8
 801388c:	687a      	ldr	r2, [r7, #4]
 801388e:	6812      	ldr	r2, [r2, #0]
 8013890:	601a      	str	r2, [r3, #0]
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	330c      	adds	r3, #12
 8013896:	6839      	ldr	r1, [r7, #0]
 8013898:	4618      	mov	r0, r3
 801389a:	f7f1 fcf3 	bl	8005284 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 801389e:	68b8      	ldr	r0, [r7, #8]
 80138a0:	f7ff ffc8 	bl	8013834 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4rowsEv>
 80138a4:	4604      	mov	r4, r0
 80138a6:	6878      	ldr	r0, [r7, #4]
 80138a8:	f7f2 f85f 	bl	800596a <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 80138ac:	4603      	mov	r3, r0
 80138ae:	429c      	cmp	r4, r3
 80138b0:	d109      	bne.n	80138c6 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x5e>
 80138b2:	68b8      	ldr	r0, [r7, #8]
 80138b4:	f7ff ffcb 	bl	801384e <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4colsEv>
 80138b8:	4604      	mov	r4, r0
 80138ba:	6878      	ldr	r0, [r7, #4]
 80138bc:	f7f3 f89f 	bl	80069fe <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80138c0:	4603      	mov	r3, r0
 80138c2:	429c      	cmp	r4, r3
 80138c4:	d005      	beq.n	80138d2 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x6a>
 80138c6:	4b05      	ldr	r3, [pc, #20]	; (80138dc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x74>)
 80138c8:	4a05      	ldr	r2, [pc, #20]	; (80138e0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x78>)
 80138ca:	2174      	movs	r1, #116	; 0x74
 80138cc:	4805      	ldr	r0, [pc, #20]	; (80138e4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x7c>)
 80138ce:	f00a f8c5 	bl	801da5c <__assert_func>
    }
 80138d2:	68fb      	ldr	r3, [r7, #12]
 80138d4:	4618      	mov	r0, r3
 80138d6:	3714      	adds	r7, #20
 80138d8:	46bd      	mov	sp, r7
 80138da:	bd90      	pop	{r4, r7, pc}
 80138dc:	0801f8c4 	.word	0x0801f8c4
 80138e0:	08028ce8 	.word	0x08028ce8
 80138e4:	0801fb28 	.word	0x0801fb28

080138e8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 80138e8:	b580      	push	{r7, lr}
 80138ea:	b082      	sub	sp, #8
 80138ec:	af00      	add	r7, sp, #0
 80138ee:	6078      	str	r0, [r7, #4]
 80138f0:	6878      	ldr	r0, [r7, #4]
 80138f2:	f000 f809 	bl	8013908 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 80138f6:	4603      	mov	r3, r0
 80138f8:	4618      	mov	r0, r3
 80138fa:	f000 f9e7 	bl	8013ccc <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE4colsEv>
 80138fe:	4603      	mov	r3, r0
 8013900:	4618      	mov	r0, r3
 8013902:	3708      	adds	r7, #8
 8013904:	46bd      	mov	sp, r7
 8013906:	bd80      	pop	{r7, pc}

08013908 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8013908:	b480      	push	{r7}
 801390a:	b083      	sub	sp, #12
 801390c:	af00      	add	r7, sp, #0
 801390e:	6078      	str	r0, [r7, #4]
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	4618      	mov	r0, r3
 8013914:	370c      	adds	r7, #12
 8013916:	46bd      	mov	sp, r7
 8013918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801391c:	4770      	bx	lr

0801391e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 801391e:	b580      	push	{r7, lr}
 8013920:	b082      	sub	sp, #8
 8013922:	af00      	add	r7, sp, #0
 8013924:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	4618      	mov	r0, r3
 801392a:	f7ff ff83 	bl	8013834 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4rowsEv>
 801392e:	4603      	mov	r3, r0
    }
 8013930:	4618      	mov	r0, r3
 8013932:	3708      	adds	r7, #8
 8013934:	46bd      	mov	sp, r7
 8013936:	bd80      	pop	{r7, pc}

08013938 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEELi3ENS_10DenseShapeES7_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, Options>, ProductTag, LhsShape, RhsShape>
 8013938:	b580      	push	{r7, lr}
 801393a:	b082      	sub	sp, #8
 801393c:	af00      	add	r7, sp, #0
 801393e:	6078      	str	r0, [r7, #4]
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	4618      	mov	r0, r3
 8013944:	f7fb fa2e 	bl	800eda4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	4618      	mov	r0, r3
 801394c:	3708      	adds	r7, #8
 801394e:	46bd      	mov	sp, r7
 8013950:	bd80      	pop	{r7, pc}

08013952 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8013952:	b580      	push	{r7, lr}
 8013954:	b082      	sub	sp, #8
 8013956:	af00      	add	r7, sp, #0
 8013958:	6078      	str	r0, [r7, #4]
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	4618      	mov	r0, r3
 801395e:	f7ff ffeb 	bl	8013938 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEELi3ENS_10DenseShapeES7_ffED1Ev>
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	4618      	mov	r0, r3
 8013966:	3708      	adds	r7, #8
 8013968:	46bd      	mov	sp, r7
 801396a:	bd80      	pop	{r7, pc}

0801396c <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEED1Ev>:
struct evaluator<const T>
 801396c:	b580      	push	{r7, lr}
 801396e:	b082      	sub	sp, #8
 8013970:	af00      	add	r7, sp, #0
 8013972:	6078      	str	r0, [r7, #4]
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	4618      	mov	r0, r3
 8013978:	f7ff ffeb 	bl	8013952 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEED1Ev>
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	4618      	mov	r0, r3
 8013980:	3708      	adds	r7, #8
 8013982:	46bd      	mov	sp, r7
 8013984:	bd80      	pop	{r7, pc}

08013986 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 8013986:	b580      	push	{r7, lr}
 8013988:	b082      	sub	sp, #8
 801398a:	af00      	add	r7, sp, #0
 801398c:	6078      	str	r0, [r7, #4]
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	4618      	mov	r0, r3
 8013992:	f7ff ffeb 	bl	801396c <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEED1Ev>
 8013996:	6878      	ldr	r0, [r7, #4]
 8013998:	f000 f9bf 	bl	8013d1a <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	4618      	mov	r0, r3
 80139a0:	3708      	adds	r7, #8
 80139a2:	46bd      	mov	sp, r7
 80139a4:	bd80      	pop	{r7, pc}

080139a6 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 80139a6:	b580      	push	{r7, lr}
 80139a8:	b082      	sub	sp, #8
 80139aa:	af00      	add	r7, sp, #0
 80139ac:	6078      	str	r0, [r7, #4]
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	4618      	mov	r0, r3
 80139b2:	f7ff ffe8 	bl	8013986 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfED1Ev>
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	4618      	mov	r0, r3
 80139ba:	3708      	adds	r7, #8
 80139bc:	46bd      	mov	sp, r7
 80139be:	bd80      	pop	{r7, pc}

080139c0 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>:
struct evaluator<const T>
 80139c0:	b580      	push	{r7, lr}
 80139c2:	b082      	sub	sp, #8
 80139c4:	af00      	add	r7, sp, #0
 80139c6:	6078      	str	r0, [r7, #4]
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	4618      	mov	r0, r3
 80139cc:	f7ff ffeb 	bl	80139a6 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	4618      	mov	r0, r3
 80139d4:	3708      	adds	r7, #8
 80139d6:	46bd      	mov	sp, r7
 80139d8:	bd80      	pop	{r7, pc}

080139da <_ZN5Eigen8internal9evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
 80139da:	b580      	push	{r7, lr}
 80139dc:	b082      	sub	sp, #8
 80139de:	af00      	add	r7, sp, #0
 80139e0:	6078      	str	r0, [r7, #4]
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	4618      	mov	r0, r3
 80139e6:	f7fb f9fa 	bl	800edde <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	4618      	mov	r0, r3
 80139ee:	3708      	adds	r7, #8
 80139f0:	46bd      	mov	sp, r7
 80139f2:	bd80      	pop	{r7, pc}

080139f4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4DataD1Ev>:
  struct Data
 80139f4:	b580      	push	{r7, lr}
 80139f6:	b082      	sub	sp, #8
 80139f8:	af00      	add	r7, sp, #0
 80139fa:	6078      	str	r0, [r7, #4]
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	3314      	adds	r3, #20
 8013a00:	4618      	mov	r0, r3
 8013a02:	f7ff ffea 	bl	80139da <_ZN5Eigen8internal9evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	3304      	adds	r3, #4
 8013a0a:	4618      	mov	r0, r3
 8013a0c:	f7ff ffd8 	bl	80139c0 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	4618      	mov	r0, r3
 8013a14:	3708      	adds	r7, #8
 8013a16:	46bd      	mov	sp, r7
 8013a18:	bd80      	pop	{r7, pc}

08013a1a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8013a1a:	b580      	push	{r7, lr}
 8013a1c:	b082      	sub	sp, #8
 8013a1e:	af00      	add	r7, sp, #0
 8013a20:	6078      	str	r0, [r7, #4]
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	4618      	mov	r0, r3
 8013a26:	f7ff ffe5 	bl	80139f4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4DataD1Ev>
 8013a2a:	6878      	ldr	r0, [r7, #4]
 8013a2c:	f000 f96a 	bl	8013d04 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	4618      	mov	r0, r3
 8013a34:	3708      	adds	r7, #8
 8013a36:	46bd      	mov	sp, r7
 8013a38:	bd80      	pop	{r7, pc}

08013a3a <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8013a3a:	b580      	push	{r7, lr}
 8013a3c:	b082      	sub	sp, #8
 8013a3e:	af00      	add	r7, sp, #0
 8013a40:	6078      	str	r0, [r7, #4]
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	4618      	mov	r0, r3
 8013a46:	f7ff ffe8 	bl	8013a1a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffED1Ev>
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	4618      	mov	r0, r3
 8013a4e:	3708      	adds	r7, #8
 8013a50:	46bd      	mov	sp, r7
 8013a52:	bd80      	pop	{r7, pc}

08013a54 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 8013a54:	b580      	push	{r7, lr}
 8013a56:	b082      	sub	sp, #8
 8013a58:	af00      	add	r7, sp, #0
 8013a5a:	6078      	str	r0, [r7, #4]
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	4618      	mov	r0, r3
 8013a60:	f7ff ffeb 	bl	8013a3a <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	4618      	mov	r0, r3
 8013a68:	3708      	adds	r7, #8
 8013a6a:	46bd      	mov	sp, r7
 8013a6c:	bd80      	pop	{r7, pc}
	...

08013a70 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 8013a70:	b580      	push	{r7, lr}
 8013a72:	ed2d 8b02 	vpush	{d8}
 8013a76:	b088      	sub	sp, #32
 8013a78:	af00      	add	r7, sp, #0
 8013a7a:	6078      	str	r0, [r7, #4]
 8013a7c:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 8013a7e:	6878      	ldr	r0, [r7, #4]
 8013a80:	f7ff fd50 	bl	8013524 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE4rowsEv>
 8013a84:	4603      	mov	r3, r0
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	dd05      	ble.n	8013a96 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 8013a8a:	6878      	ldr	r0, [r7, #4]
 8013a8c:	f7ff ff2c 	bl	80138e8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE4colsEv>
 8013a90:	4603      	mov	r3, r0
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	dc06      	bgt.n	8013aa4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 8013a96:	4b16      	ldr	r3, [pc, #88]	; (8013af0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 8013a98:	4a16      	ldr	r2, [pc, #88]	; (8013af4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 8013a9a:	f240 119b 	movw	r1, #411	; 0x19b
 8013a9e:	4816      	ldr	r0, [pc, #88]	; (8013af8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 8013aa0:	f009 ffdc 	bl	801da5c <__assert_func>
 8013aa4:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8013aa6:	6878      	ldr	r0, [r7, #4]
 8013aa8:	f7ff ff2e 	bl	8013908 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 8013aac:	4602      	mov	r2, r0
 8013aae:	f107 0308 	add.w	r3, r7, #8
 8013ab2:	4611      	mov	r1, r2
 8013ab4:	4618      	mov	r0, r3
 8013ab6:	f000 f916 	bl	8013ce6 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1ERKSG_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8013aba:	6878      	ldr	r0, [r7, #4]
 8013abc:	f7ff ff24 	bl	8013908 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 8013ac0:	4602      	mov	r2, r0
 8013ac2:	f107 0308 	add.w	r3, r7, #8
 8013ac6:	6839      	ldr	r1, [r7, #0]
 8013ac8:	4618      	mov	r0, r3
 8013aca:	f000 f931 	bl	8013d30 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi2EE3runISJ_EEfRKSK_RKS3_RKT_>
 8013ace:	eeb0 8a40 	vmov.f32	s16, s0
 8013ad2:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8013ad4:	f107 0308 	add.w	r3, r7, #8
 8013ad8:	4618      	mov	r0, r3
 8013ada:	f7ff ffbb 	bl	8013a54 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8013ade:	eef0 7a48 	vmov.f32	s15, s16
}
 8013ae2:	eeb0 0a67 	vmov.f32	s0, s15
 8013ae6:	3720      	adds	r7, #32
 8013ae8:	46bd      	mov	sp, r7
 8013aea:	ecbd 8b02 	vpop	{d8}
 8013aee:	bd80      	pop	{r7, pc}
 8013af0:	08024944 	.word	0x08024944
 8013af4:	08028f34 	.word	0x08028f34
 8013af8:	08024b50 	.word	0x08024b50

08013afc <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 8013afc:	b480      	push	{r7}
 8013afe:	b083      	sub	sp, #12
 8013b00:	af00      	add	r7, sp, #0
 8013b02:	6078      	str	r0, [r7, #4]
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	4618      	mov	r0, r3
 8013b0a:	370c      	adds	r7, #12
 8013b0c:	46bd      	mov	sp, r7
 8013b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b12:	4770      	bx	lr

08013b14 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8013b14:	b480      	push	{r7}
 8013b16:	b083      	sub	sp, #12
 8013b18:	af00      	add	r7, sp, #0
 8013b1a:	6078      	str	r0, [r7, #4]
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	4618      	mov	r0, r3
 8013b20:	370c      	adds	r7, #12
 8013b22:	46bd      	mov	sp, r7
 8013b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b28:	4770      	bx	lr

08013b2a <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS4_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8013b2a:	b580      	push	{r7, lr}
 8013b2c:	b082      	sub	sp, #8
 8013b2e:	af00      	add	r7, sp, #0
 8013b30:	6078      	str	r0, [r7, #4]
 8013b32:	6039      	str	r1, [r7, #0]
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	6839      	ldr	r1, [r7, #0]
 8013b38:	4618      	mov	r0, r3
 8013b3a:	f7fd fe47 	bl	80117cc <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	4618      	mov	r0, r3
 8013b42:	3708      	adds	r7, #8
 8013b44:	46bd      	mov	sp, r7
 8013b46:	bd80      	pop	{r7, pc}

08013b48 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 8013b48:	b5b0      	push	{r4, r5, r7, lr}
 8013b4a:	b084      	sub	sp, #16
 8013b4c:	af00      	add	r7, sp, #0
 8013b4e:	60f8      	str	r0, [r7, #12]
 8013b50:	60b9      	str	r1, [r7, #8]
 8013b52:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8013b54:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8013b56:	68bb      	ldr	r3, [r7, #8]
 8013b58:	4618      	mov	r0, r3
 8013b5a:	f7fe fc93 	bl	8012484 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>
 8013b5e:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 8013b60:	68b8      	ldr	r0, [r7, #8]
 8013b62:	f7ff fc01 	bl	8013368 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>
 8013b66:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	fb02 f303 	mul.w	r3, r2, r3
 8013b6e:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8013b70:	18e9      	adds	r1, r5, r3
 8013b72:	2301      	movs	r3, #1
 8013b74:	2201      	movs	r2, #1
 8013b76:	4620      	mov	r0, r4
 8013b78:	f000 f8f8 	bl	8013d6c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii>
 8013b7c:	68fb      	ldr	r3, [r7, #12]
 8013b7e:	68ba      	ldr	r2, [r7, #8]
 8013b80:	609a      	str	r2, [r3, #8]
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	330c      	adds	r3, #12
 8013b86:	2100      	movs	r1, #0
 8013b88:	4618      	mov	r0, r3
 8013b8a:	f7f9 fedd 	bl	800d948 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	3310      	adds	r3, #16
 8013b92:	6879      	ldr	r1, [r7, #4]
 8013b94:	4618      	mov	r0, r3
 8013b96:	f7f9 fe63 	bl	800d860 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 8013b9a:	68f8      	ldr	r0, [r7, #12]
 8013b9c:	f000 f924 	bl	8013de8 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE4initEv>
    }
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	4618      	mov	r0, r3
 8013ba4:	3710      	adds	r7, #16
 8013ba6:	46bd      	mov	sp, r7
 8013ba8:	bdb0      	pop	{r4, r5, r7, pc}

08013baa <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8013baa:	b580      	push	{r7, lr}
 8013bac:	b082      	sub	sp, #8
 8013bae:	af00      	add	r7, sp, #0
 8013bb0:	6078      	str	r0, [r7, #4]
 8013bb2:	6039      	str	r1, [r7, #0]
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	6839      	ldr	r1, [r7, #0]
 8013bb8:	4618      	mov	r0, r3
 8013bba:	f000 f925 	bl	8013e08 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	4618      	mov	r0, r3
 8013bc2:	3708      	adds	r7, #8
 8013bc4:	46bd      	mov	sp, r7
 8013bc6:	bd80      	pop	{r7, pc}

08013bc8 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8013bc8:	b580      	push	{r7, lr}
 8013bca:	b082      	sub	sp, #8
 8013bcc:	af00      	add	r7, sp, #0
 8013bce:	6078      	str	r0, [r7, #4]
 8013bd0:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8013bd2:	2200      	movs	r2, #0
 8013bd4:	2100      	movs	r1, #0
 8013bd6:	6878      	ldr	r0, [r7, #4]
 8013bd8:	f000 f928 	bl	8013e2c <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 8013bdc:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013be0:	eeb0 0a67 	vmov.f32	s0, s15
 8013be4:	3708      	adds	r7, #8
 8013be6:	46bd      	mov	sp, r7
 8013be8:	bd80      	pop	{r7, pc}

08013bea <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi7ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8013bea:	b580      	push	{r7, lr}
 8013bec:	b082      	sub	sp, #8
 8013bee:	af00      	add	r7, sp, #0
 8013bf0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013bf2:	2201      	movs	r2, #1
 8013bf4:	2102      	movs	r1, #2
 8013bf6:	6878      	ldr	r0, [r7, #4]
 8013bf8:	f7fd ff48 	bl	8011a8c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8013bfc:	6878      	ldr	r0, [r7, #4]
 8013bfe:	f000 f928 	bl	8013e52 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi8ELi9EE3runERSE_>
  }
 8013c02:	bf00      	nop
 8013c04:	3708      	adds	r7, #8
 8013c06:	46bd      	mov	sp, r7
 8013c08:	bd80      	pop	{r7, pc}

08013c0a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8013c0a:	b580      	push	{r7, lr}
 8013c0c:	b082      	sub	sp, #8
 8013c0e:	af00      	add	r7, sp, #0
 8013c10:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013c12:	2200      	movs	r2, #0
 8013c14:	2102      	movs	r1, #2
 8013c16:	6878      	ldr	r0, [r7, #4]
 8013c18:	f7fe fbe1 	bl	80123de <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8013c1c:	6878      	ldr	r0, [r7, #4]
 8013c1e:	f000 f928 	bl	8013e72 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSC_>
  }
 8013c22:	bf00      	nop
 8013c24:	3708      	adds	r7, #8
 8013c26:	46bd      	mov	sp, r7
 8013c28:	bd80      	pop	{r7, pc}

08013c2a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERKS8_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8013c2a:	b580      	push	{r7, lr}
 8013c2c:	b082      	sub	sp, #8
 8013c2e:	af00      	add	r7, sp, #0
 8013c30:	6078      	str	r0, [r7, #4]
 8013c32:	6039      	str	r1, [r7, #0]
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	6839      	ldr	r1, [r7, #0]
 8013c38:	4618      	mov	r0, r3
 8013c3a:	f000 f92a 	bl	8013e92 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS6_Li3ELi1ELb1EEE>
  }
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	4618      	mov	r0, r3
 8013c42:	3708      	adds	r7, #8
 8013c44:	46bd      	mov	sp, r7
 8013c46:	bd80      	pop	{r7, pc}

08013c48 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8013c48:	b480      	push	{r7}
 8013c4a:	b083      	sub	sp, #12
 8013c4c:	af00      	add	r7, sp, #0
 8013c4e:	6078      	str	r0, [r7, #4]
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	4618      	mov	r0, r3
 8013c54:	370c      	adds	r7, #12
 8013c56:	46bd      	mov	sp, r7
 8013c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c5c:	4770      	bx	lr

08013c5e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8013c5e:	b5b0      	push	{r4, r5, r7, lr}
 8013c60:	b084      	sub	sp, #16
 8013c62:	af00      	add	r7, sp, #0
 8013c64:	60f8      	str	r0, [r7, #12]
 8013c66:	60b9      	str	r1, [r7, #8]
 8013c68:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 8013c6a:	68fb      	ldr	r3, [r7, #12]
 8013c6c:	681c      	ldr	r4, [r3, #0]
 8013c6e:	68f8      	ldr	r0, [r7, #12]
 8013c70:	f000 f923 	bl	8013eba <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>
 8013c74:	4602      	mov	r2, r0
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	fb03 f502 	mul.w	r5, r3, r2
 8013c7c:	68f8      	ldr	r0, [r7, #12]
 8013c7e:	f000 f927 	bl	8013ed0 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>
 8013c82:	4602      	mov	r2, r0
 8013c84:	68bb      	ldr	r3, [r7, #8]
 8013c86:	fb02 f303 	mul.w	r3, r2, r3
 8013c8a:	442b      	add	r3, r5
 8013c8c:	009b      	lsls	r3, r3, #2
 8013c8e:	4423      	add	r3, r4
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	ee07 3a90 	vmov	s15, r3
  }
 8013c96:	eeb0 0a67 	vmov.f32	s0, s15
 8013c9a:	3710      	adds	r7, #16
 8013c9c:	46bd      	mov	sp, r7
 8013c9e:	bdb0      	pop	{r4, r5, r7, pc}

08013ca0 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8013ca0:	b480      	push	{r7}
 8013ca2:	b083      	sub	sp, #12
 8013ca4:	af00      	add	r7, sp, #0
 8013ca6:	6078      	str	r0, [r7, #4]
    }
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	4618      	mov	r0, r3
 8013cac:	370c      	adds	r7, #12
 8013cae:	46bd      	mov	sp, r7
 8013cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cb4:	4770      	bx	lr

08013cb6 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8013cb6:	b480      	push	{r7}
 8013cb8:	b083      	sub	sp, #12
 8013cba:	af00      	add	r7, sp, #0
 8013cbc:	6078      	str	r0, [r7, #4]
    }
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	370c      	adds	r7, #12
 8013cc4:	46bd      	mov	sp, r7
 8013cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cca:	4770      	bx	lr

08013ccc <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8013ccc:	b580      	push	{r7, lr}
 8013cce:	b082      	sub	sp, #8
 8013cd0:	af00      	add	r7, sp, #0
 8013cd2:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	f7ff fdb9 	bl	801384e <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4colsEv>
 8013cdc:	4603      	mov	r3, r0
    }
 8013cde:	4618      	mov	r0, r3
 8013ce0:	3708      	adds	r7, #8
 8013ce2:	46bd      	mov	sp, r7
 8013ce4:	bd80      	pop	{r7, pc}

08013ce6 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1ERKSG_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 8013ce6:	b580      	push	{r7, lr}
 8013ce8:	b082      	sub	sp, #8
 8013cea:	af00      	add	r7, sp, #0
 8013cec:	6078      	str	r0, [r7, #4]
 8013cee:	6039      	str	r1, [r7, #0]
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	6839      	ldr	r1, [r7, #0]
 8013cf4:	4618      	mov	r0, r3
 8013cf6:	f000 f8f6 	bl	8013ee6 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1ERKSG_>
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	4618      	mov	r0, r3
 8013cfe:	3708      	adds	r7, #8
 8013d00:	46bd      	mov	sp, r7
 8013d02:	bd80      	pop	{r7, pc}

08013d04 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8013d04:	b480      	push	{r7}
 8013d06:	b083      	sub	sp, #12
 8013d08:	af00      	add	r7, sp, #0
 8013d0a:	6078      	str	r0, [r7, #4]
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	4618      	mov	r0, r3
 8013d10:	370c      	adds	r7, #12
 8013d12:	46bd      	mov	sp, r7
 8013d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d18:	4770      	bx	lr

08013d1a <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>:
 8013d1a:	b480      	push	{r7}
 8013d1c:	b083      	sub	sp, #12
 8013d1e:	af00      	add	r7, sp, #0
 8013d20:	6078      	str	r0, [r7, #4]
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	4618      	mov	r0, r3
 8013d26:	370c      	adds	r7, #12
 8013d28:	46bd      	mov	sp, r7
 8013d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d2e:	4770      	bx	lr

08013d30 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi2EE3runISJ_EEfRKSK_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 8013d30:	b580      	push	{r7, lr}
 8013d32:	b084      	sub	sp, #16
 8013d34:	af00      	add	r7, sp, #0
 8013d36:	60f8      	str	r0, [r7, #12]
 8013d38:	60b9      	str	r1, [r7, #8]
 8013d3a:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 8013d3c:	68b9      	ldr	r1, [r7, #8]
 8013d3e:	68f8      	ldr	r0, [r7, #12]
 8013d40:	f000 f8e0 	bl	8013f04 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi3EE3runERKSK_RKS3_>
 8013d44:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013d48:	eeb0 0a67 	vmov.f32	s0, s15
 8013d4c:	3710      	adds	r7, #16
 8013d4e:	46bd      	mov	sp, r7
 8013d50:	bd80      	pop	{r7, pc}

08013d52 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>:
 8013d52:	b580      	push	{r7, lr}
 8013d54:	b082      	sub	sp, #8
 8013d56:	af00      	add	r7, sp, #0
 8013d58:	6078      	str	r0, [r7, #4]
 8013d5a:	6878      	ldr	r0, [r7, #4]
 8013d5c:	f000 f8f6 	bl	8013f4c <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	4618      	mov	r0, r3
 8013d64:	3708      	adds	r7, #8
 8013d66:	46bd      	mov	sp, r7
 8013d68:	bd80      	pop	{r7, pc}
	...

08013d6c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 8013d6c:	b580      	push	{r7, lr}
 8013d6e:	b084      	sub	sp, #16
 8013d70:	af00      	add	r7, sp, #0
 8013d72:	60f8      	str	r0, [r7, #12]
 8013d74:	60b9      	str	r1, [r7, #8]
 8013d76:	607a      	str	r2, [r7, #4]
 8013d78:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 8013d7a:	68f8      	ldr	r0, [r7, #12]
 8013d7c:	f7ff ffe9 	bl	8013d52 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	68ba      	ldr	r2, [r7, #8]
 8013d84:	601a      	str	r2, [r3, #0]
 8013d86:	68fb      	ldr	r3, [r7, #12]
 8013d88:	3304      	adds	r3, #4
 8013d8a:	6879      	ldr	r1, [r7, #4]
 8013d8c:	4618      	mov	r0, r3
 8013d8e:	f7f2 fcf3 	bl	8006778 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	3305      	adds	r3, #5
 8013d96:	6839      	ldr	r1, [r7, #0]
 8013d98:	4618      	mov	r0, r3
 8013d9a:	f7f2 fced 	bl	8006778 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 8013d9e:	68bb      	ldr	r3, [r7, #8]
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d011      	beq.n	8013dc8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	db08      	blt.n	8013dbc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	2b01      	cmp	r3, #1
 8013dae:	d105      	bne.n	8013dbc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 8013db0:	683b      	ldr	r3, [r7, #0]
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	db02      	blt.n	8013dbc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 8013db6:	683b      	ldr	r3, [r7, #0]
 8013db8:	2b01      	cmp	r3, #1
 8013dba:	d005      	beq.n	8013dc8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 8013dbc:	4b07      	ldr	r3, [pc, #28]	; (8013ddc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x70>)
 8013dbe:	4a08      	ldr	r2, [pc, #32]	; (8013de0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x74>)
 8013dc0:	21b0      	movs	r1, #176	; 0xb0
 8013dc2:	4808      	ldr	r0, [pc, #32]	; (8013de4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x78>)
 8013dc4:	f009 fe4a 	bl	801da5c <__assert_func>
      checkSanity<Derived>();
 8013dc8:	2100      	movs	r1, #0
 8013dca:	68f8      	ldr	r0, [r7, #12]
 8013dcc:	f000 f8c9 	bl	8013f62 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	3710      	adds	r7, #16
 8013dd6:	46bd      	mov	sp, r7
 8013dd8:	bd80      	pop	{r7, pc}
 8013dda:	bf00      	nop
 8013ddc:	08025fe8 	.word	0x08025fe8
 8013de0:	080290fc 	.word	0x080290fc
 8013de4:	08026198 	.word	0x08026198

08013de8 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE4initEv>:
    void init()
 8013de8:	b580      	push	{r7, lr}
 8013dea:	b082      	sub	sp, #8
 8013dec:	af00      	add	r7, sp, #0
 8013dee:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	689b      	ldr	r3, [r3, #8]
 8013df4:	4618      	mov	r0, r3
 8013df6:	f7fe fd73 	bl	80128e0 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 8013dfa:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	615a      	str	r2, [r3, #20]
    }
 8013e00:	bf00      	nop
 8013e02:	3708      	adds	r7, #8
 8013e04:	46bd      	mov	sp, r7
 8013e06:	bd80      	pop	{r7, pc}

08013e08 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8013e08:	b580      	push	{r7, lr}
 8013e0a:	b082      	sub	sp, #8
 8013e0c:	af00      	add	r7, sp, #0
 8013e0e:	6078      	str	r0, [r7, #4]
 8013e10:	6039      	str	r1, [r7, #0]
 8013e12:	6878      	ldr	r0, [r7, #4]
 8013e14:	f000 f8b0 	bl	8013f78 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	6839      	ldr	r1, [r7, #0]
 8013e1c:	4618      	mov	r0, r3
 8013e1e:	f000 f8b6 	bl	8013f8e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	4618      	mov	r0, r3
 8013e26:	3708      	adds	r7, #8
 8013e28:	46bd      	mov	sp, r7
 8013e2a:	bd80      	pop	{r7, pc}

08013e2c <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8013e2c:	b580      	push	{r7, lr}
 8013e2e:	b084      	sub	sp, #16
 8013e30:	af00      	add	r7, sp, #0
 8013e32:	60f8      	str	r0, [r7, #12]
 8013e34:	60b9      	str	r1, [r7, #8]
 8013e36:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	687a      	ldr	r2, [r7, #4]
 8013e3c:	68b9      	ldr	r1, [r7, #8]
 8013e3e:	4618      	mov	r0, r3
 8013e40:	f000 f8cd 	bl	8013fde <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 8013e44:	eef0 7a40 	vmov.f32	s15, s0
 8013e48:	eeb0 0a67 	vmov.f32	s0, s15
 8013e4c:	3710      	adds	r7, #16
 8013e4e:	46bd      	mov	sp, r7
 8013e50:	bd80      	pop	{r7, pc}

08013e52 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi8ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8013e52:	b580      	push	{r7, lr}
 8013e54:	b082      	sub	sp, #8
 8013e56:	af00      	add	r7, sp, #0
 8013e58:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013e5a:	2202      	movs	r2, #2
 8013e5c:	2102      	movs	r1, #2
 8013e5e:	6878      	ldr	r0, [r7, #4]
 8013e60:	f7fd fe14 	bl	8011a8c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8013e64:	6878      	ldr	r0, [r7, #4]
 8013e66:	f000 f8ea 	bl	801403e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi9ELi9EE3runERSE_>
  }
 8013e6a:	bf00      	nop
 8013e6c:	3708      	adds	r7, #8
 8013e6e:	46bd      	mov	sp, r7
 8013e70:	bd80      	pop	{r7, pc}

08013e72 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8013e72:	b580      	push	{r7, lr}
 8013e74:	b082      	sub	sp, #8
 8013e76:	af00      	add	r7, sp, #0
 8013e78:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013e7a:	2201      	movs	r2, #1
 8013e7c:	2102      	movs	r1, #2
 8013e7e:	6878      	ldr	r0, [r7, #4]
 8013e80:	f7fe faad 	bl	80123de <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8013e84:	6878      	ldr	r0, [r7, #4]
 8013e86:	f000 f8e4 	bl	8014052 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSC_>
  }
 8013e8a:	bf00      	nop
 8013e8c:	3708      	adds	r7, #8
 8013e8e:	46bd      	mov	sp, r7
 8013e90:	bd80      	pop	{r7, pc}

08013e92 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS6_Li3ELi1ELb1EEE>:
  explicit block_evaluator(const XprType& block)
 8013e92:	b580      	push	{r7, lr}
 8013e94:	b082      	sub	sp, #8
 8013e96:	af00      	add	r7, sp, #0
 8013e98:	6078      	str	r0, [r7, #4]
 8013e9a:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	6839      	ldr	r1, [r7, #0]
 8013ea0:	4618      	mov	r0, r3
 8013ea2:	f000 f8e6 	bl	8014072 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS8_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8013ea6:	683b      	ldr	r3, [r7, #0]
 8013ea8:	4618      	mov	r0, r3
 8013eaa:	f000 f90c 	bl	80140c6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4dataEv>
 8013eae:	bf00      	nop
  }
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	4618      	mov	r0, r3
 8013eb4:	3708      	adds	r7, #8
 8013eb6:	46bd      	mov	sp, r7
 8013eb8:	bd80      	pop	{r7, pc}

08013eba <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 8013eba:	b580      	push	{r7, lr}
 8013ebc:	b082      	sub	sp, #8
 8013ebe:	af00      	add	r7, sp, #0
 8013ec0:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 8013ec2:	f7f2 fc7e 	bl	80067c2 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8013ec6:	4603      	mov	r3, r0
  }
 8013ec8:	4618      	mov	r0, r3
 8013eca:	3708      	adds	r7, #8
 8013ecc:	46bd      	mov	sp, r7
 8013ece:	bd80      	pop	{r7, pc}

08013ed0 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 8013ed0:	b580      	push	{r7, lr}
 8013ed2:	b082      	sub	sp, #8
 8013ed4:	af00      	add	r7, sp, #0
 8013ed6:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 8013ed8:	f7f2 fc7b 	bl	80067d2 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8013edc:	4603      	mov	r3, r0
  }
 8013ede:	4618      	mov	r0, r3
 8013ee0:	3708      	adds	r7, #8
 8013ee2:	46bd      	mov	sp, r7
 8013ee4:	bd80      	pop	{r7, pc}

08013ee6 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1ERKSG_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8013ee6:	b580      	push	{r7, lr}
 8013ee8:	b082      	sub	sp, #8
 8013eea:	af00      	add	r7, sp, #0
 8013eec:	6078      	str	r0, [r7, #4]
 8013eee:	6039      	str	r1, [r7, #0]
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	6839      	ldr	r1, [r7, #0]
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	f000 f8f2 	bl	80140de <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffEC1ERKSG_>
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	4618      	mov	r0, r3
 8013efe:	3708      	adds	r7, #8
 8013f00:	46bd      	mov	sp, r7
 8013f02:	bd80      	pop	{r7, pc}

08013f04 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi3EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8013f04:	b580      	push	{r7, lr}
 8013f06:	b084      	sub	sp, #16
 8013f08:	af00      	add	r7, sp, #0
 8013f0a:	6078      	str	r0, [r7, #4]
 8013f0c:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8013f0e:	6839      	ldr	r1, [r7, #0]
 8013f10:	6878      	ldr	r0, [r7, #4]
 8013f12:	f000 f8f6 	bl	8014102 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi1EE3runERKSK_RKS3_>
 8013f16:	eef0 7a40 	vmov.f32	s15, s0
 8013f1a:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8013f1e:	6839      	ldr	r1, [r7, #0]
 8013f20:	6878      	ldr	r0, [r7, #4]
 8013f22:	f000 f8ff 	bl	8014124 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi1ELi2EE3runERKSK_RKS3_>
 8013f26:	eef0 7a40 	vmov.f32	s15, s0
 8013f2a:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8013f2e:	f107 020c 	add.w	r2, r7, #12
 8013f32:	f107 0308 	add.w	r3, r7, #8
 8013f36:	4619      	mov	r1, r3
 8013f38:	6838      	ldr	r0, [r7, #0]
 8013f3a:	f7f5 f808 	bl	8008f4e <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8013f3e:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013f42:	eeb0 0a67 	vmov.f32	s0, s15
 8013f46:	3710      	adds	r7, #16
 8013f48:	46bd      	mov	sp, r7
 8013f4a:	bd80      	pop	{r7, pc}

08013f4c <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8013f4c:	b480      	push	{r7}
 8013f4e:	b083      	sub	sp, #12
 8013f50:	af00      	add	r7, sp, #0
 8013f52:	6078      	str	r0, [r7, #4]
    }
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	4618      	mov	r0, r3
 8013f58:	370c      	adds	r7, #12
 8013f5a:	46bd      	mov	sp, r7
 8013f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f60:	4770      	bx	lr

08013f62 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 8013f62:	b480      	push	{r7}
 8013f64:	b083      	sub	sp, #12
 8013f66:	af00      	add	r7, sp, #0
 8013f68:	6078      	str	r0, [r7, #4]
 8013f6a:	6039      	str	r1, [r7, #0]
    {}
 8013f6c:	bf00      	nop
 8013f6e:	370c      	adds	r7, #12
 8013f70:	46bd      	mov	sp, r7
 8013f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f76:	4770      	bx	lr

08013f78 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8013f78:	b480      	push	{r7}
 8013f7a:	b083      	sub	sp, #12
 8013f7c:	af00      	add	r7, sp, #0
 8013f7e:	6078      	str	r0, [r7, #4]
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	4618      	mov	r0, r3
 8013f84:	370c      	adds	r7, #12
 8013f86:	46bd      	mov	sp, r7
 8013f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f8c:	4770      	bx	lr

08013f8e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8013f8e:	b590      	push	{r4, r7, lr}
 8013f90:	b083      	sub	sp, #12
 8013f92:	af00      	add	r7, sp, #0
 8013f94:	6078      	str	r0, [r7, #4]
 8013f96:	6039      	str	r1, [r7, #0]
 8013f98:	687c      	ldr	r4, [r7, #4]
 8013f9a:	6838      	ldr	r0, [r7, #0]
 8013f9c:	f000 f8e6 	bl	801416c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE7functorEv>
 8013fa0:	4603      	mov	r3, r0
 8013fa2:	4619      	mov	r1, r3
 8013fa4:	4620      	mov	r0, r4
 8013fa6:	f7f1 f96d 	bl	8005284 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	1d1c      	adds	r4, r3, #4
 8013fae:	6838      	ldr	r0, [r7, #0]
 8013fb0:	f000 f8e8 	bl	8014184 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE3lhsEv>
 8013fb4:	4603      	mov	r3, r0
 8013fb6:	4619      	mov	r1, r3
 8013fb8:	4620      	mov	r0, r4
 8013fba:	f7fa ffac 	bl	800ef16 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERSA_>
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	f103 040c 	add.w	r4, r3, #12
 8013fc4:	6838      	ldr	r0, [r7, #0]
 8013fc6:	f000 f8e8 	bl	801419a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE3rhsEv>
 8013fca:	4603      	mov	r3, r0
 8013fcc:	4619      	mov	r1, r3
 8013fce:	4620      	mov	r0, r4
 8013fd0:	f000 f8ef 	bl	80141b2 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERS7_>
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	4618      	mov	r0, r3
 8013fd8:	370c      	adds	r7, #12
 8013fda:	46bd      	mov	sp, r7
 8013fdc:	bd90      	pop	{r4, r7, pc}

08013fde <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8013fde:	b590      	push	{r4, r7, lr}
 8013fe0:	b087      	sub	sp, #28
 8013fe2:	af00      	add	r7, sp, #0
 8013fe4:	60f8      	str	r0, [r7, #12]
 8013fe6:	60b9      	str	r1, [r7, #8]
 8013fe8:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	4618      	mov	r0, r3
 8013fee:	f000 f8ef 	bl	80141d0 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 8013ff2:	4604      	mov	r4, r0
 8013ff4:	68fb      	ldr	r3, [r7, #12]
 8013ff6:	3304      	adds	r3, #4
 8013ff8:	687a      	ldr	r2, [r7, #4]
 8013ffa:	68b9      	ldr	r1, [r7, #8]
 8013ffc:	4618      	mov	r0, r3
 8013ffe:	f7fa ffb3 	bl	800ef68 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 8014002:	eef0 7a40 	vmov.f32	s15, s0
 8014006:	edc7 7a04 	vstr	s15, [r7, #16]
 801400a:	68fb      	ldr	r3, [r7, #12]
 801400c:	330c      	adds	r3, #12
 801400e:	687a      	ldr	r2, [r7, #4]
 8014010:	68b9      	ldr	r1, [r7, #8]
 8014012:	4618      	mov	r0, r3
 8014014:	f000 f8e7 	bl	80141e6 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE5coeffEii>
 8014018:	eef0 7a40 	vmov.f32	s15, s0
 801401c:	edc7 7a05 	vstr	s15, [r7, #20]
 8014020:	f107 0214 	add.w	r2, r7, #20
 8014024:	f107 0310 	add.w	r3, r7, #16
 8014028:	4619      	mov	r1, r3
 801402a:	4620      	mov	r0, r4
 801402c:	f7fa ffd0 	bl	800efd0 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 8014030:	eef0 7a40 	vmov.f32	s15, s0
  }
 8014034:	eeb0 0a67 	vmov.f32	s0, s15
 8014038:	371c      	adds	r7, #28
 801403a:	46bd      	mov	sp, r7
 801403c:	bd90      	pop	{r4, r7, pc}

0801403e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi9ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 801403e:	b480      	push	{r7}
 8014040:	b083      	sub	sp, #12
 8014042:	af00      	add	r7, sp, #0
 8014044:	6078      	str	r0, [r7, #4]
 8014046:	bf00      	nop
 8014048:	370c      	adds	r7, #12
 801404a:	46bd      	mov	sp, r7
 801404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014050:	4770      	bx	lr

08014052 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8014052:	b580      	push	{r7, lr}
 8014054:	b082      	sub	sp, #8
 8014056:	af00      	add	r7, sp, #0
 8014058:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 801405a:	2202      	movs	r2, #2
 801405c:	2102      	movs	r1, #2
 801405e:	6878      	ldr	r0, [r7, #4]
 8014060:	f7fe f9bd 	bl	80123de <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8014064:	6878      	ldr	r0, [r7, #4]
 8014066:	f000 f8df 	bl	8014228 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSC_>
  }
 801406a:	bf00      	nop
 801406c:	3708      	adds	r7, #8
 801406e:	46bd      	mov	sp, r7
 8014070:	bd80      	pop	{r7, pc}

08014072 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS8_>:
  explicit mapbase_evaluator(const XprType& map)
 8014072:	b590      	push	{r4, r7, lr}
 8014074:	b083      	sub	sp, #12
 8014076:	af00      	add	r7, sp, #0
 8014078:	6078      	str	r0, [r7, #4]
 801407a:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 801407c:	6878      	ldr	r0, [r7, #4]
 801407e:	f000 f8f9 	bl	8014274 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8014082:	683b      	ldr	r3, [r7, #0]
 8014084:	4618      	mov	r0, r3
 8014086:	f000 f81e 	bl	80140c6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4dataEv>
 801408a:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	601a      	str	r2, [r3, #0]
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	1d1c      	adds	r4, r3, #4
 8014094:	683b      	ldr	r3, [r7, #0]
 8014096:	4618      	mov	r0, r3
 8014098:	f000 f8d0 	bl	801423c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE11innerStrideEv>
 801409c:	4603      	mov	r3, r0
 801409e:	4619      	mov	r1, r3
 80140a0:	4620      	mov	r0, r4
 80140a2:	f7f2 fb69 	bl	8006778 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	1d5c      	adds	r4, r3, #5
 80140aa:	683b      	ldr	r3, [r7, #0]
 80140ac:	4618      	mov	r0, r3
 80140ae:	f000 f8d3 	bl	8014258 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE11outerStrideEv>
 80140b2:	4603      	mov	r3, r0
 80140b4:	4619      	mov	r1, r3
 80140b6:	4620      	mov	r0, r4
 80140b8:	f7f2 fb44 	bl	8006744 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	4618      	mov	r0, r3
 80140c0:	370c      	adds	r7, #12
 80140c2:	46bd      	mov	sp, r7
 80140c4:	bd90      	pop	{r4, r7, pc}

080140c6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 80140c6:	b480      	push	{r7}
 80140c8:	b083      	sub	sp, #12
 80140ca:	af00      	add	r7, sp, #0
 80140cc:	6078      	str	r0, [r7, #4]
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	681b      	ldr	r3, [r3, #0]
 80140d2:	4618      	mov	r0, r3
 80140d4:	370c      	adds	r7, #12
 80140d6:	46bd      	mov	sp, r7
 80140d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140dc:	4770      	bx	lr

080140de <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffEC1ERKSG_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 80140de:	b580      	push	{r7, lr}
 80140e0:	b082      	sub	sp, #8
 80140e2:	af00      	add	r7, sp, #0
 80140e4:	6078      	str	r0, [r7, #4]
 80140e6:	6039      	str	r1, [r7, #0]
 80140e8:	6878      	ldr	r0, [r7, #4]
 80140ea:	f000 f8ce 	bl	801428a <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	6839      	ldr	r1, [r7, #0]
 80140f2:	4618      	mov	r0, r3
 80140f4:	f000 f8d4 	bl	80142a0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>
  }
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	4618      	mov	r0, r3
 80140fc:	3708      	adds	r7, #8
 80140fe:	46bd      	mov	sp, r7
 8014100:	bd80      	pop	{r7, pc}

08014102 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8014102:	b580      	push	{r7, lr}
 8014104:	b082      	sub	sp, #8
 8014106:	af00      	add	r7, sp, #0
 8014108:	6078      	str	r0, [r7, #4]
 801410a:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 801410c:	2200      	movs	r2, #0
 801410e:	2100      	movs	r1, #0
 8014110:	6878      	ldr	r0, [r7, #4]
 8014112:	f000 f8ed 	bl	80142f0 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE17coeffByOuterInnerEii>
 8014116:	eef0 7a40 	vmov.f32	s15, s0
  }
 801411a:	eeb0 0a67 	vmov.f32	s0, s15
 801411e:	3708      	adds	r7, #8
 8014120:	46bd      	mov	sp, r7
 8014122:	bd80      	pop	{r7, pc}

08014124 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi1ELi2EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8014124:	b580      	push	{r7, lr}
 8014126:	b084      	sub	sp, #16
 8014128:	af00      	add	r7, sp, #0
 801412a:	6078      	str	r0, [r7, #4]
 801412c:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 801412e:	6839      	ldr	r1, [r7, #0]
 8014130:	6878      	ldr	r0, [r7, #4]
 8014132:	f000 f8f0 	bl	8014316 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi1ELi1EE3runERKSK_RKS3_>
 8014136:	eef0 7a40 	vmov.f32	s15, s0
 801413a:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 801413e:	6839      	ldr	r1, [r7, #0]
 8014140:	6878      	ldr	r0, [r7, #4]
 8014142:	f000 f8f9 	bl	8014338 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi2ELi1EE3runERKSK_RKS3_>
 8014146:	eef0 7a40 	vmov.f32	s15, s0
 801414a:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 801414e:	f107 020c 	add.w	r2, r7, #12
 8014152:	f107 0308 	add.w	r3, r7, #8
 8014156:	4619      	mov	r1, r3
 8014158:	6838      	ldr	r0, [r7, #0]
 801415a:	f7f4 fef8 	bl	8008f4e <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 801415e:	eef0 7a40 	vmov.f32	s15, s0
  }
 8014162:	eeb0 0a67 	vmov.f32	s0, s15
 8014166:	3710      	adds	r7, #16
 8014168:	46bd      	mov	sp, r7
 801416a:	bd80      	pop	{r7, pc}

0801416c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 801416c:	b480      	push	{r7}
 801416e:	b083      	sub	sp, #12
 8014170:	af00      	add	r7, sp, #0
 8014172:	6078      	str	r0, [r7, #4]
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	3330      	adds	r3, #48	; 0x30
 8014178:	4618      	mov	r0, r3
 801417a:	370c      	adds	r7, #12
 801417c:	46bd      	mov	sp, r7
 801417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014182:	4770      	bx	lr

08014184 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8014184:	b480      	push	{r7}
 8014186:	b083      	sub	sp, #12
 8014188:	af00      	add	r7, sp, #0
 801418a:	6078      	str	r0, [r7, #4]
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	4618      	mov	r0, r3
 8014190:	370c      	adds	r7, #12
 8014192:	46bd      	mov	sp, r7
 8014194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014198:	4770      	bx	lr

0801419a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 801419a:	b480      	push	{r7}
 801419c:	b083      	sub	sp, #12
 801419e:	af00      	add	r7, sp, #0
 80141a0:	6078      	str	r0, [r7, #4]
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	3318      	adds	r3, #24
 80141a6:	4618      	mov	r0, r3
 80141a8:	370c      	adds	r7, #12
 80141aa:	46bd      	mov	sp, r7
 80141ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141b0:	4770      	bx	lr

080141b2 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 80141b2:	b580      	push	{r7, lr}
 80141b4:	b082      	sub	sp, #8
 80141b6:	af00      	add	r7, sp, #0
 80141b8:	6078      	str	r0, [r7, #4]
 80141ba:	6039      	str	r1, [r7, #0]
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	6839      	ldr	r1, [r7, #0]
 80141c0:	4618      	mov	r0, r3
 80141c2:	f000 f8ca 	bl	801435a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERKS6_>
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	4618      	mov	r0, r3
 80141ca:	3708      	adds	r7, #8
 80141cc:	46bd      	mov	sp, r7
 80141ce:	bd80      	pop	{r7, pc}

080141d0 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 80141d0:	b480      	push	{r7}
 80141d2:	b083      	sub	sp, #12
 80141d4:	af00      	add	r7, sp, #0
 80141d6:	6078      	str	r0, [r7, #4]
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	4618      	mov	r0, r3
 80141dc:	370c      	adds	r7, #12
 80141de:	46bd      	mov	sp, r7
 80141e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141e4:	4770      	bx	lr

080141e6 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 80141e6:	b5b0      	push	{r4, r5, r7, lr}
 80141e8:	b084      	sub	sp, #16
 80141ea:	af00      	add	r7, sp, #0
 80141ec:	60f8      	str	r0, [r7, #12]
 80141ee:	60b9      	str	r1, [r7, #8]
 80141f0:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 80141f2:	68fb      	ldr	r3, [r7, #12]
 80141f4:	681c      	ldr	r4, [r3, #0]
 80141f6:	68f8      	ldr	r0, [r7, #12]
 80141f8:	f000 f8be 	bl	8014378 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE9colStrideEv>
 80141fc:	4602      	mov	r2, r0
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	fb03 f502 	mul.w	r5, r3, r2
 8014204:	68f8      	ldr	r0, [r7, #12]
 8014206:	f000 f8c2 	bl	801438e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE9rowStrideEv>
 801420a:	4602      	mov	r2, r0
 801420c:	68bb      	ldr	r3, [r7, #8]
 801420e:	fb02 f303 	mul.w	r3, r2, r3
 8014212:	442b      	add	r3, r5
 8014214:	009b      	lsls	r3, r3, #2
 8014216:	4423      	add	r3, r4
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	ee07 3a90 	vmov	s15, r3
  }
 801421e:	eeb0 0a67 	vmov.f32	s0, s15
 8014222:	3710      	adds	r7, #16
 8014224:	46bd      	mov	sp, r7
 8014226:	bdb0      	pop	{r4, r5, r7, pc}

08014228 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8014228:	b480      	push	{r7}
 801422a:	b083      	sub	sp, #12
 801422c:	af00      	add	r7, sp, #0
 801422e:	6078      	str	r0, [r7, #4]
 8014230:	bf00      	nop
 8014232:	370c      	adds	r7, #12
 8014234:	46bd      	mov	sp, r7
 8014236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801423a:	4770      	bx	lr

0801423c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 801423c:	b580      	push	{r7, lr}
 801423e:	b082      	sub	sp, #8
 8014240:	af00      	add	r7, sp, #0
 8014242:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	3308      	adds	r3, #8
 8014248:	4618      	mov	r0, r3
 801424a:	f7fe fd4e 	bl	8012cea <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11innerStrideEv>
 801424e:	4603      	mov	r3, r0
    }
 8014250:	4618      	mov	r0, r3
 8014252:	3708      	adds	r7, #8
 8014254:	46bd      	mov	sp, r7
 8014256:	bd80      	pop	{r7, pc}

08014258 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8014258:	b580      	push	{r7, lr}
 801425a:	b082      	sub	sp, #8
 801425c:	af00      	add	r7, sp, #0
 801425e:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	3308      	adds	r3, #8
 8014264:	4618      	mov	r0, r3
 8014266:	f7fe fd54 	bl	8012d12 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11outerStrideEv>
 801426a:	4603      	mov	r3, r0
    }
 801426c:	4618      	mov	r0, r3
 801426e:	3708      	adds	r7, #8
 8014270:	46bd      	mov	sp, r7
 8014272:	bd80      	pop	{r7, pc}

08014274 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8014274:	b480      	push	{r7}
 8014276:	b083      	sub	sp, #12
 8014278:	af00      	add	r7, sp, #0
 801427a:	6078      	str	r0, [r7, #4]
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	4618      	mov	r0, r3
 8014280:	370c      	adds	r7, #12
 8014282:	46bd      	mov	sp, r7
 8014284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014288:	4770      	bx	lr

0801428a <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>:
 801428a:	b480      	push	{r7}
 801428c:	b083      	sub	sp, #12
 801428e:	af00      	add	r7, sp, #0
 8014290:	6078      	str	r0, [r7, #4]
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	4618      	mov	r0, r3
 8014296:	370c      	adds	r7, #12
 8014298:	46bd      	mov	sp, r7
 801429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801429e:	4770      	bx	lr

080142a0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 80142a0:	b590      	push	{r4, r7, lr}
 80142a2:	b083      	sub	sp, #12
 80142a4:	af00      	add	r7, sp, #0
 80142a6:	6078      	str	r0, [r7, #4]
 80142a8:	6039      	str	r1, [r7, #0]
 80142aa:	687c      	ldr	r4, [r7, #4]
 80142ac:	6838      	ldr	r0, [r7, #0]
 80142ae:	f000 f879 	bl	80143a4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE7functorEv>
 80142b2:	4603      	mov	r3, r0
 80142b4:	4619      	mov	r1, r3
 80142b6:	4620      	mov	r0, r4
 80142b8:	f7f0 ffe4 	bl	8005284 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	1d1c      	adds	r4, r3, #4
 80142c0:	6838      	ldr	r0, [r7, #0]
 80142c2:	f000 f87b 	bl	80143bc <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE3lhsEv>
 80142c6:	4603      	mov	r3, r0
 80142c8:	4619      	mov	r1, r3
 80142ca:	4620      	mov	r0, r4
 80142cc:	f000 f88d 	bl	80143ea <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1ERSA_>
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	f103 0414 	add.w	r4, r3, #20
 80142d6:	6838      	ldr	r0, [r7, #0]
 80142d8:	f000 f87b 	bl	80143d2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE3rhsEv>
 80142dc:	4603      	mov	r3, r0
 80142de:	4619      	mov	r1, r3
 80142e0:	4620      	mov	r0, r4
 80142e2:	f000 f891 	bl	8014408 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERS6_>
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	4618      	mov	r0, r3
 80142ea:	370c      	adds	r7, #12
 80142ec:	46bd      	mov	sp, r7
 80142ee:	bd90      	pop	{r4, r7, pc}

080142f0 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 80142f0:	b580      	push	{r7, lr}
 80142f2:	b084      	sub	sp, #16
 80142f4:	af00      	add	r7, sp, #0
 80142f6:	60f8      	str	r0, [r7, #12]
 80142f8:	60b9      	str	r1, [r7, #8]
 80142fa:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 80142fc:	68fb      	ldr	r3, [r7, #12]
 80142fe:	68ba      	ldr	r2, [r7, #8]
 8014300:	6879      	ldr	r1, [r7, #4]
 8014302:	4618      	mov	r0, r3
 8014304:	f000 f88f 	bl	8014426 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE5coeffEii>
 8014308:	eef0 7a40 	vmov.f32	s15, s0
 801430c:	eeb0 0a67 	vmov.f32	s0, s15
 8014310:	3710      	adds	r7, #16
 8014312:	46bd      	mov	sp, r7
 8014314:	bd80      	pop	{r7, pc}

08014316 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi1ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8014316:	b580      	push	{r7, lr}
 8014318:	b082      	sub	sp, #8
 801431a:	af00      	add	r7, sp, #0
 801431c:	6078      	str	r0, [r7, #4]
 801431e:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8014320:	2201      	movs	r2, #1
 8014322:	2100      	movs	r1, #0
 8014324:	6878      	ldr	r0, [r7, #4]
 8014326:	f7ff ffe3 	bl	80142f0 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE17coeffByOuterInnerEii>
 801432a:	eef0 7a40 	vmov.f32	s15, s0
  }
 801432e:	eeb0 0a67 	vmov.f32	s0, s15
 8014332:	3708      	adds	r7, #8
 8014334:	46bd      	mov	sp, r7
 8014336:	bd80      	pop	{r7, pc}

08014338 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi2ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8014338:	b580      	push	{r7, lr}
 801433a:	b082      	sub	sp, #8
 801433c:	af00      	add	r7, sp, #0
 801433e:	6078      	str	r0, [r7, #4]
 8014340:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8014342:	2202      	movs	r2, #2
 8014344:	2100      	movs	r1, #0
 8014346:	6878      	ldr	r0, [r7, #4]
 8014348:	f7ff ffd2 	bl	80142f0 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE17coeffByOuterInnerEii>
 801434c:	eef0 7a40 	vmov.f32	s15, s0
  }
 8014350:	eeb0 0a67 	vmov.f32	s0, s15
 8014354:	3708      	adds	r7, #8
 8014356:	46bd      	mov	sp, r7
 8014358:	bd80      	pop	{r7, pc}

0801435a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 801435a:	b580      	push	{r7, lr}
 801435c:	b082      	sub	sp, #8
 801435e:	af00      	add	r7, sp, #0
 8014360:	6078      	str	r0, [r7, #4]
 8014362:	6039      	str	r1, [r7, #0]
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	6839      	ldr	r1, [r7, #0]
 8014368:	4618      	mov	r0, r3
 801436a:	f000 f887 	bl	801447c <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb0EEE>
  }
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	4618      	mov	r0, r3
 8014372:	3708      	adds	r7, #8
 8014374:	46bd      	mov	sp, r7
 8014376:	bd80      	pop	{r7, pc}

08014378 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 8014378:	b580      	push	{r7, lr}
 801437a:	b082      	sub	sp, #8
 801437c:	af00      	add	r7, sp, #0
 801437e:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 8014380:	f7f2 fa27 	bl	80067d2 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8014384:	4603      	mov	r3, r0
  }
 8014386:	4618      	mov	r0, r3
 8014388:	3708      	adds	r7, #8
 801438a:	46bd      	mov	sp, r7
 801438c:	bd80      	pop	{r7, pc}

0801438e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 801438e:	b580      	push	{r7, lr}
 8014390:	b082      	sub	sp, #8
 8014392:	af00      	add	r7, sp, #0
 8014394:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 8014396:	f7f2 fa14 	bl	80067c2 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 801439a:	4603      	mov	r3, r0
  }
 801439c:	4618      	mov	r0, r3
 801439e:	3708      	adds	r7, #8
 80143a0:	46bd      	mov	sp, r7
 80143a2:	bd80      	pop	{r7, pc}

080143a4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 80143a4:	b480      	push	{r7}
 80143a6:	b083      	sub	sp, #12
 80143a8:	af00      	add	r7, sp, #0
 80143aa:	6078      	str	r0, [r7, #4]
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	330c      	adds	r3, #12
 80143b0:	4618      	mov	r0, r3
 80143b2:	370c      	adds	r7, #12
 80143b4:	46bd      	mov	sp, r7
 80143b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ba:	4770      	bx	lr

080143bc <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 80143bc:	b480      	push	{r7}
 80143be:	b083      	sub	sp, #12
 80143c0:	af00      	add	r7, sp, #0
 80143c2:	6078      	str	r0, [r7, #4]
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	4618      	mov	r0, r3
 80143c8:	370c      	adds	r7, #12
 80143ca:	46bd      	mov	sp, r7
 80143cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143d0:	4770      	bx	lr

080143d2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 80143d2:	b480      	push	{r7}
 80143d4:	b083      	sub	sp, #12
 80143d6:	af00      	add	r7, sp, #0
 80143d8:	6078      	str	r0, [r7, #4]
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	3308      	adds	r3, #8
 80143de:	4618      	mov	r0, r3
 80143e0:	370c      	adds	r7, #12
 80143e2:	46bd      	mov	sp, r7
 80143e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143e8:	4770      	bx	lr

080143ea <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 80143ea:	b580      	push	{r7, lr}
 80143ec:	b082      	sub	sp, #8
 80143ee:	af00      	add	r7, sp, #0
 80143f0:	6078      	str	r0, [r7, #4]
 80143f2:	6039      	str	r1, [r7, #0]
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	6839      	ldr	r1, [r7, #0]
 80143f8:	4618      	mov	r0, r3
 80143fa:	f000 f853 	bl	80144a4 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1ERKS9_>
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	4618      	mov	r0, r3
 8014402:	3708      	adds	r7, #8
 8014404:	46bd      	mov	sp, r7
 8014406:	bd80      	pop	{r7, pc}

08014408 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERS6_>:
 8014408:	b580      	push	{r7, lr}
 801440a:	b082      	sub	sp, #8
 801440c:	af00      	add	r7, sp, #0
 801440e:	6078      	str	r0, [r7, #4]
 8014410:	6039      	str	r1, [r7, #0]
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	6839      	ldr	r1, [r7, #0]
 8014416:	4618      	mov	r0, r3
 8014418:	f7fc f952 	bl	80106c0 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	4618      	mov	r0, r3
 8014420:	3708      	adds	r7, #8
 8014422:	46bd      	mov	sp, r7
 8014424:	bd80      	pop	{r7, pc}

08014426 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8014426:	b590      	push	{r4, r7, lr}
 8014428:	b087      	sub	sp, #28
 801442a:	af00      	add	r7, sp, #0
 801442c:	60f8      	str	r0, [r7, #12]
 801442e:	60b9      	str	r1, [r7, #8]
 8014430:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8014432:	68fb      	ldr	r3, [r7, #12]
 8014434:	4618      	mov	r0, r3
 8014436:	f000 f844 	bl	80144c2 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4Data4funcEv>
 801443a:	4604      	mov	r4, r0
 801443c:	68fb      	ldr	r3, [r7, #12]
 801443e:	3304      	adds	r3, #4
 8014440:	687a      	ldr	r2, [r7, #4]
 8014442:	68b9      	ldr	r1, [r7, #8]
 8014444:	4618      	mov	r0, r3
 8014446:	f000 f847 	bl	80144d8 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfE5coeffEii>
 801444a:	eef0 7a40 	vmov.f32	s15, s0
 801444e:	edc7 7a05 	vstr	s15, [r7, #20]
 8014452:	68fb      	ldr	r3, [r7, #12]
 8014454:	3314      	adds	r3, #20
 8014456:	687a      	ldr	r2, [r7, #4]
 8014458:	68b9      	ldr	r1, [r7, #8]
 801445a:	4618      	mov	r0, r3
 801445c:	f000 f851 	bl	8014502 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfE5coeffEii>
 8014460:	4602      	mov	r2, r0
 8014462:	f107 0314 	add.w	r3, r7, #20
 8014466:	4619      	mov	r1, r3
 8014468:	4620      	mov	r0, r4
 801446a:	f7fa fdb1 	bl	800efd0 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 801446e:	eef0 7a40 	vmov.f32	s15, s0
  }
 8014472:	eeb0 0a67 	vmov.f32	s0, s15
 8014476:	371c      	adds	r7, #28
 8014478:	46bd      	mov	sp, r7
 801447a:	bd90      	pop	{r4, r7, pc}

0801447c <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 801447c:	b580      	push	{r7, lr}
 801447e:	b082      	sub	sp, #8
 8014480:	af00      	add	r7, sp, #0
 8014482:	6078      	str	r0, [r7, #4]
 8014484:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	6839      	ldr	r1, [r7, #0]
 801448a:	4618      	mov	r0, r3
 801448c:	f000 f84a 	bl	8014524 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEEC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8014490:	683b      	ldr	r3, [r7, #0]
 8014492:	4618      	mov	r0, r3
 8014494:	f000 f870 	bl	8014578 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4dataEv>
 8014498:	bf00      	nop
  }
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	4618      	mov	r0, r3
 801449e:	3708      	adds	r7, #8
 80144a0:	46bd      	mov	sp, r7
 80144a2:	bd80      	pop	{r7, pc}

080144a4 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1ERKS9_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 80144a4:	b580      	push	{r7, lr}
 80144a6:	b082      	sub	sp, #8
 80144a8:	af00      	add	r7, sp, #0
 80144aa:	6078      	str	r0, [r7, #4]
 80144ac:	6039      	str	r1, [r7, #0]
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	6839      	ldr	r1, [r7, #0]
 80144b2:	4618      	mov	r0, r3
 80144b4:	f000 f86c 	bl	8014590 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfEC1ERKS9_>
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	4618      	mov	r0, r3
 80144bc:	3708      	adds	r7, #8
 80144be:	46bd      	mov	sp, r7
 80144c0:	bd80      	pop	{r7, pc}

080144c2 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 80144c2:	b480      	push	{r7}
 80144c4:	b083      	sub	sp, #12
 80144c6:	af00      	add	r7, sp, #0
 80144c8:	6078      	str	r0, [r7, #4]
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	4618      	mov	r0, r3
 80144ce:	370c      	adds	r7, #12
 80144d0:	46bd      	mov	sp, r7
 80144d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144d6:	4770      	bx	lr

080144d8 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 80144d8:	b580      	push	{r7, lr}
 80144da:	b084      	sub	sp, #16
 80144dc:	af00      	add	r7, sp, #0
 80144de:	60f8      	str	r0, [r7, #12]
 80144e0:	60b9      	str	r1, [r7, #8]
 80144e2:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 80144e4:	68fb      	ldr	r3, [r7, #12]
 80144e6:	68ba      	ldr	r2, [r7, #8]
 80144e8:	6879      	ldr	r1, [r7, #4]
 80144ea:	4618      	mov	r0, r3
 80144ec:	f7ff f85b 	bl	80135a6 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE5coeffEii>
 80144f0:	4603      	mov	r3, r0
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	ee07 3a90 	vmov	s15, r3
  }
 80144f8:	eeb0 0a67 	vmov.f32	s0, s15
 80144fc:	3710      	adds	r7, #16
 80144fe:	46bd      	mov	sp, r7
 8014500:	bd80      	pop	{r7, pc}

08014502 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8014502:	b580      	push	{r7, lr}
 8014504:	b084      	sub	sp, #16
 8014506:	af00      	add	r7, sp, #0
 8014508:	60f8      	str	r0, [r7, #12]
 801450a:	60b9      	str	r1, [r7, #8]
 801450c:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 801450e:	68fb      	ldr	r3, [r7, #12]
 8014510:	68ba      	ldr	r2, [r7, #8]
 8014512:	6879      	ldr	r1, [r7, #4]
 8014514:	4618      	mov	r0, r3
 8014516:	f7ff f846 	bl	80135a6 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE5coeffEii>
 801451a:	4603      	mov	r3, r0
  }
 801451c:	4618      	mov	r0, r3
 801451e:	3710      	adds	r7, #16
 8014520:	46bd      	mov	sp, r7
 8014522:	bd80      	pop	{r7, pc}

08014524 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEEC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 8014524:	b590      	push	{r4, r7, lr}
 8014526:	b083      	sub	sp, #12
 8014528:	af00      	add	r7, sp, #0
 801452a:	6078      	str	r0, [r7, #4]
 801452c:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 801452e:	6878      	ldr	r0, [r7, #4]
 8014530:	f000 f860 	bl	80145f4 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8014534:	683b      	ldr	r3, [r7, #0]
 8014536:	4618      	mov	r0, r3
 8014538:	f000 f81e 	bl	8014578 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4dataEv>
 801453c:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	601a      	str	r2, [r3, #0]
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	1d1c      	adds	r4, r3, #4
 8014546:	683b      	ldr	r3, [r7, #0]
 8014548:	4618      	mov	r0, r3
 801454a:	f000 f837 	bl	80145bc <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE11innerStrideEv>
 801454e:	4603      	mov	r3, r0
 8014550:	4619      	mov	r1, r3
 8014552:	4620      	mov	r0, r4
 8014554:	f7f2 f910 	bl	8006778 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	1d5c      	adds	r4, r3, #5
 801455c:	683b      	ldr	r3, [r7, #0]
 801455e:	4618      	mov	r0, r3
 8014560:	f000 f83a 	bl	80145d8 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE11outerStrideEv>
 8014564:	4603      	mov	r3, r0
 8014566:	4619      	mov	r1, r3
 8014568:	4620      	mov	r0, r4
 801456a:	f7f2 f8eb 	bl	8006744 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	4618      	mov	r0, r3
 8014572:	370c      	adds	r7, #12
 8014574:	46bd      	mov	sp, r7
 8014576:	bd90      	pop	{r4, r7, pc}

08014578 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4dataEv>:
 8014578:	b480      	push	{r7}
 801457a:	b083      	sub	sp, #12
 801457c:	af00      	add	r7, sp, #0
 801457e:	6078      	str	r0, [r7, #4]
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	681b      	ldr	r3, [r3, #0]
 8014584:	4618      	mov	r0, r3
 8014586:	370c      	adds	r7, #12
 8014588:	46bd      	mov	sp, r7
 801458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801458e:	4770      	bx	lr

08014590 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfEC1ERKS9_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 8014590:	b590      	push	{r4, r7, lr}
 8014592:	b083      	sub	sp, #12
 8014594:	af00      	add	r7, sp, #0
 8014596:	6078      	str	r0, [r7, #4]
 8014598:	6039      	str	r1, [r7, #0]
 801459a:	6878      	ldr	r0, [r7, #4]
 801459c:	f000 f840 	bl	8014620 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>
 80145a0:	687c      	ldr	r4, [r7, #4]
 80145a2:	6838      	ldr	r0, [r7, #0]
 80145a4:	f000 f831 	bl	801460a <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE16nestedExpressionEv>
 80145a8:	4603      	mov	r3, r0
 80145aa:	4619      	mov	r1, r3
 80145ac:	4620      	mov	r0, r4
 80145ae:	f000 f842 	bl	8014636 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERS7_>
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	4618      	mov	r0, r3
 80145b6:	370c      	adds	r7, #12
 80145b8:	46bd      	mov	sp, r7
 80145ba:	bd90      	pop	{r4, r7, pc}

080145bc <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 80145bc:	b580      	push	{r7, lr}
 80145be:	b082      	sub	sp, #8
 80145c0:	af00      	add	r7, sp, #0
 80145c2:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	689b      	ldr	r3, [r3, #8]
 80145c8:	4618      	mov	r0, r3
 80145ca:	f7fe fecd 	bl	8013368 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>
 80145ce:	4603      	mov	r3, r0
    }
 80145d0:	4618      	mov	r0, r3
 80145d2:	3708      	adds	r7, #8
 80145d4:	46bd      	mov	sp, r7
 80145d6:	bd80      	pop	{r7, pc}

080145d8 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 80145d8:	b580      	push	{r7, lr}
 80145da:	b082      	sub	sp, #8
 80145dc:	af00      	add	r7, sp, #0
 80145de:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	689b      	ldr	r3, [r3, #8]
 80145e4:	4618      	mov	r0, r3
 80145e6:	f7fe f97b 	bl	80128e0 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 80145ea:	4603      	mov	r3, r0
    }
 80145ec:	4618      	mov	r0, r3
 80145ee:	3708      	adds	r7, #8
 80145f0:	46bd      	mov	sp, r7
 80145f2:	bd80      	pop	{r7, pc}

080145f4 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80145f4:	b480      	push	{r7}
 80145f6:	b083      	sub	sp, #12
 80145f8:	af00      	add	r7, sp, #0
 80145fa:	6078      	str	r0, [r7, #4]
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	4618      	mov	r0, r3
 8014600:	370c      	adds	r7, #12
 8014602:	46bd      	mov	sp, r7
 8014604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014608:	4770      	bx	lr

0801460a <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE16nestedExpressionEv>:
 801460a:	b480      	push	{r7}
 801460c:	b083      	sub	sp, #12
 801460e:	af00      	add	r7, sp, #0
 8014610:	6078      	str	r0, [r7, #4]
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	4618      	mov	r0, r3
 8014616:	370c      	adds	r7, #12
 8014618:	46bd      	mov	sp, r7
 801461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801461e:	4770      	bx	lr

08014620 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>:
 8014620:	b480      	push	{r7}
 8014622:	b083      	sub	sp, #12
 8014624:	af00      	add	r7, sp, #0
 8014626:	6078      	str	r0, [r7, #4]
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	4618      	mov	r0, r3
 801462c:	370c      	adds	r7, #12
 801462e:	46bd      	mov	sp, r7
 8014630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014634:	4770      	bx	lr

08014636 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8014636:	b580      	push	{r7, lr}
 8014638:	b082      	sub	sp, #8
 801463a:	af00      	add	r7, sp, #0
 801463c:	6078      	str	r0, [r7, #4]
 801463e:	6039      	str	r1, [r7, #0]
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	6839      	ldr	r1, [r7, #0]
 8014644:	4618      	mov	r0, r3
 8014646:	f000 f805 	bl	8014654 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERKS6_>
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	4618      	mov	r0, r3
 801464e:	3708      	adds	r7, #8
 8014650:	46bd      	mov	sp, r7
 8014652:	bd80      	pop	{r7, pc}

08014654 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERKS6_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8014654:	b580      	push	{r7, lr}
 8014656:	b082      	sub	sp, #8
 8014658:	af00      	add	r7, sp, #0
 801465a:	6078      	str	r0, [r7, #4]
 801465c:	6039      	str	r1, [r7, #0]
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	6839      	ldr	r1, [r7, #0]
 8014662:	4618      	mov	r0, r3
 8014664:	f000 f805 	bl	8014672 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	4618      	mov	r0, r3
 801466c:	3708      	adds	r7, #8
 801466e:	46bd      	mov	sp, r7
 8014670:	bd80      	pop	{r7, pc}

08014672 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>:
  explicit product_evaluator(const XprType& xpr)
 8014672:	b5b0      	push	{r4, r5, r7, lr}
 8014674:	b084      	sub	sp, #16
 8014676:	af00      	add	r7, sp, #0
 8014678:	6078      	str	r0, [r7, #4]
 801467a:	6039      	str	r1, [r7, #0]
    : m_result(xpr.rows(), xpr.cols())
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	4618      	mov	r0, r3
 8014680:	f000 f834 	bl	80146ec <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	1d1c      	adds	r4, r3, #4
 8014688:	6838      	ldr	r0, [r7, #0]
 801468a:	f7f2 f9aa 	bl	80069e2 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4rowsEv>
 801468e:	4603      	mov	r3, r0
 8014690:	60bb      	str	r3, [r7, #8]
 8014692:	6838      	ldr	r0, [r7, #0]
 8014694:	f7f1 fa33 	bl	8005afe <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4colsEv>
 8014698:	4603      	mov	r3, r0
 801469a:	60fb      	str	r3, [r7, #12]
 801469c:	f107 020c 	add.w	r2, r7, #12
 80146a0:	f107 0308 	add.w	r3, r7, #8
 80146a4:	4619      	mov	r1, r3
 80146a6:	4620      	mov	r0, r4
 80146a8:	f000 f82d 	bl	8014706 <_ZN5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EEC1IiiEERKT_RKT0_>
    ::new (static_cast<Base*>(this)) Base(m_result);
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	4619      	mov	r1, r3
 80146b0:	2004      	movs	r0, #4
 80146b2:	f7ec fc43 	bl	8000f3c <_ZnwjPv>
 80146b6:	4602      	mov	r2, r0
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	3304      	adds	r3, #4
 80146bc:	4619      	mov	r1, r3
 80146be:	4610      	mov	r0, r2
 80146c0:	f7fd f884 	bl	80117cc <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
    generic_product_impl<Lhs, Rhs, LhsShape, RhsShape, ProductTag>::evalTo(m_result, xpr.lhs(), xpr.rhs());
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	1d1c      	adds	r4, r3, #4
 80146c8:	6838      	ldr	r0, [r7, #0]
 80146ca:	f000 f835 	bl	8014738 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE3lhsEv>
 80146ce:	4605      	mov	r5, r0
 80146d0:	6838      	ldr	r0, [r7, #0]
 80146d2:	f000 f83d 	bl	8014750 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE3rhsEv>
 80146d6:	4603      	mov	r3, r0
 80146d8:	461a      	mov	r2, r3
 80146da:	4629      	mov	r1, r5
 80146dc:	4620      	mov	r0, r4
 80146de:	f000 f843 	bl	8014768 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEENS_10DenseShapeES5_Li3EE6evalToIS3_EEvRT_RKS3_RKS4_>
  }
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	4618      	mov	r0, r3
 80146e6:	3710      	adds	r7, #16
 80146e8:	46bd      	mov	sp, r7
 80146ea:	bdb0      	pop	{r4, r5, r7, pc}

080146ec <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
  evaluator() {}
 80146ec:	b580      	push	{r7, lr}
 80146ee:	b082      	sub	sp, #8
 80146f0:	af00      	add	r7, sp, #0
 80146f2:	6078      	str	r0, [r7, #4]
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	4618      	mov	r0, r3
 80146f8:	f000 f854 	bl	80147a4 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	4618      	mov	r0, r3
 8014700:	3708      	adds	r7, #8
 8014702:	46bd      	mov	sp, r7
 8014704:	bd80      	pop	{r7, pc}

08014706 <_ZN5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EEC1IiiEERKT_RKT0_>:
    Matrix(const T0& x, const T1& y)
 8014706:	b580      	push	{r7, lr}
 8014708:	b084      	sub	sp, #16
 801470a:	af00      	add	r7, sp, #0
 801470c:	60f8      	str	r0, [r7, #12]
 801470e:	60b9      	str	r1, [r7, #8]
 8014710:	607a      	str	r2, [r7, #4]
    {
 8014712:	68fb      	ldr	r3, [r7, #12]
 8014714:	4618      	mov	r0, r3
 8014716:	f7f0 f9f1 	bl	8004afc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
      Base::_check_template_params();
 801471a:	f7f0 f9ff 	bl	8004b1c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE22_check_template_paramsEv>
      Base::template _init2<T0,T1>(x, y);
 801471e:	68f8      	ldr	r0, [r7, #12]
 8014720:	68bb      	ldr	r3, [r7, #8]
 8014722:	6819      	ldr	r1, [r3, #0]
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	681a      	ldr	r2, [r3, #0]
 8014728:	2300      	movs	r3, #0
 801472a:	f000 f84d 	bl	80147c8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>
    }
 801472e:	68fb      	ldr	r3, [r7, #12]
 8014730:	4618      	mov	r0, r3
 8014732:	3710      	adds	r7, #16
 8014734:	46bd      	mov	sp, r7
 8014736:	bd80      	pop	{r7, pc}

08014738 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8014738:	b480      	push	{r7}
 801473a:	b083      	sub	sp, #12
 801473c:	af00      	add	r7, sp, #0
 801473e:	6078      	str	r0, [r7, #4]
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	4618      	mov	r0, r3
 8014746:	370c      	adds	r7, #12
 8014748:	46bd      	mov	sp, r7
 801474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801474e:	4770      	bx	lr

08014750 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8014750:	b480      	push	{r7}
 8014752:	b083      	sub	sp, #12
 8014754:	af00      	add	r7, sp, #0
 8014756:	6078      	str	r0, [r7, #4]
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	685b      	ldr	r3, [r3, #4]
 801475c:	4618      	mov	r0, r3
 801475e:	370c      	adds	r7, #12
 8014760:	46bd      	mov	sp, r7
 8014762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014766:	4770      	bx	lr

08014768 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEENS_10DenseShapeES5_Li3EE6evalToIS3_EEvRT_RKS3_RKS4_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8014768:	b580      	push	{r7, lr}
 801476a:	b088      	sub	sp, #32
 801476c:	af00      	add	r7, sp, #0
 801476e:	60f8      	str	r0, [r7, #12]
 8014770:	60b9      	str	r1, [r7, #8]
 8014772:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 8014774:	f107 0314 	add.w	r3, r7, #20
 8014778:	687a      	ldr	r2, [r7, #4]
 801477a:	68b9      	ldr	r1, [r7, #8]
 801477c:	4618      	mov	r0, r3
 801477e:	f000 f837 	bl	80147f0 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE11lazyProductINS1_IfLi3ELi3ELi0ELi3ELi3EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>
 8014782:	f107 031c 	add.w	r3, r7, #28
 8014786:	4618      	mov	r0, r3
 8014788:	f7f2 fa81 	bl	8006c8e <_ZN5Eigen8internal9assign_opIffEC1Ev>
 801478c:	f107 021c 	add.w	r2, r7, #28
 8014790:	f107 0314 	add.w	r3, r7, #20
 8014794:	4619      	mov	r1, r3
 8014796:	68f8      	ldr	r0, [r7, #12]
 8014798:	f000 f841 	bl	801481e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 801479c:	bf00      	nop
 801479e:	3720      	adds	r7, #32
 80147a0:	46bd      	mov	sp, r7
 80147a2:	bd80      	pop	{r7, pc}

080147a4 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
  evaluator()
 80147a4:	b580      	push	{r7, lr}
 80147a6:	b082      	sub	sp, #8
 80147a8:	af00      	add	r7, sp, #0
 80147aa:	6078      	str	r0, [r7, #4]
    : m_d(0,OuterStrideAtCompileTime)
 80147ac:	6878      	ldr	r0, [r7, #4]
 80147ae:	f7fd fe76 	bl	801249e <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	2200      	movs	r2, #0
 80147b6:	2100      	movs	r1, #0
 80147b8:	4618      	mov	r0, r3
 80147ba:	f7f2 fb28 	bl	8006e0e <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	4618      	mov	r0, r3
 80147c2:	3708      	adds	r7, #8
 80147c4:	46bd      	mov	sp, r7
 80147c6:	bd80      	pop	{r7, pc}

080147c8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>:
    EIGEN_STRONG_INLINE void _init2(Index rows, Index cols, typename internal::enable_if<Base::SizeAtCompileTime!=2,T0>::type* = 0)
 80147c8:	b580      	push	{r7, lr}
 80147ca:	b086      	sub	sp, #24
 80147cc:	af00      	add	r7, sp, #0
 80147ce:	60f8      	str	r0, [r7, #12]
 80147d0:	60b9      	str	r1, [r7, #8]
 80147d2:	607a      	str	r2, [r7, #4]
 80147d4:	603b      	str	r3, [r7, #0]
      const bool t0_is_integer_alike = internal::is_valid_index_type<T0>::value;
 80147d6:	2301      	movs	r3, #1
 80147d8:	75fb      	strb	r3, [r7, #23]
      const bool t1_is_integer_alike = internal::is_valid_index_type<T1>::value;
 80147da:	2301      	movs	r3, #1
 80147dc:	75bb      	strb	r3, [r7, #22]
      resize(rows,cols);
 80147de:	687a      	ldr	r2, [r7, #4]
 80147e0:	68b9      	ldr	r1, [r7, #8]
 80147e2:	68f8      	ldr	r0, [r7, #12]
 80147e4:	f000 f82c 	bl	8014840 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii>
    }
 80147e8:	bf00      	nop
 80147ea:	3718      	adds	r7, #24
 80147ec:	46bd      	mov	sp, r7
 80147ee:	bd80      	pop	{r7, pc}

080147f0 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE11lazyProductINS1_IfLi3ELi3ELi0ELi3ELi3EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 80147f0:	b590      	push	{r4, r7, lr}
 80147f2:	b085      	sub	sp, #20
 80147f4:	af00      	add	r7, sp, #0
 80147f6:	60f8      	str	r0, [r7, #12]
 80147f8:	60b9      	str	r1, [r7, #8]
 80147fa:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 80147fc:	68b8      	ldr	r0, [r7, #8]
 80147fe:	f7f1 f8f1 	bl	80059e4 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8014802:	4604      	mov	r4, r0
 8014804:	6878      	ldr	r0, [r7, #4]
 8014806:	f7f0 fe1c 	bl	8005442 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 801480a:	4603      	mov	r3, r0
 801480c:	461a      	mov	r2, r3
 801480e:	4621      	mov	r1, r4
 8014810:	68f8      	ldr	r0, [r7, #12]
 8014812:	f000 f86b 	bl	80148ec <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_>
}
 8014816:	68f8      	ldr	r0, [r7, #12]
 8014818:	3714      	adds	r7, #20
 801481a:	46bd      	mov	sp, r7
 801481c:	bd90      	pop	{r4, r7, pc}

0801481e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 801481e:	b580      	push	{r7, lr}
 8014820:	b086      	sub	sp, #24
 8014822:	af00      	add	r7, sp, #0
 8014824:	60f8      	str	r0, [r7, #12]
 8014826:	60b9      	str	r1, [r7, #8]
 8014828:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 801482a:	68fb      	ldr	r3, [r7, #12]
 801482c:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 801482e:	687a      	ldr	r2, [r7, #4]
 8014830:	68b9      	ldr	r1, [r7, #8]
 8014832:	6978      	ldr	r0, [r7, #20]
 8014834:	f000 f888 	bl	8014948 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>
}
 8014838:	bf00      	nop
 801483a:	3718      	adds	r7, #24
 801483c:	46bd      	mov	sp, r7
 801483e:	bd80      	pop	{r7, pc}

08014840 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 8014840:	b580      	push	{r7, lr}
 8014842:	b086      	sub	sp, #24
 8014844:	af00      	add	r7, sp, #0
 8014846:	60f8      	str	r0, [r7, #12]
 8014848:	60b9      	str	r1, [r7, #8]
 801484a:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 801484c:	68bb      	ldr	r3, [r7, #8]
 801484e:	2b01      	cmp	r3, #1
 8014850:	d108      	bne.n	8014864 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x24>
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	2b03      	cmp	r3, #3
 8014856:	d105      	bne.n	8014864 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x24>
 8014858:	68bb      	ldr	r3, [r7, #8]
 801485a:	2b00      	cmp	r3, #0
 801485c:	db02      	blt.n	8014864 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x24>
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	2b00      	cmp	r3, #0
 8014862:	da06      	bge.n	8014872 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x32>
 8014864:	4b0c      	ldr	r3, [pc, #48]	; (8014898 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x58>)
 8014866:	4a0d      	ldr	r2, [pc, #52]	; (801489c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x5c>)
 8014868:	f240 1111 	movw	r1, #273	; 0x111
 801486c:	480c      	ldr	r0, [pc, #48]	; (80148a0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x60>)
 801486e:	f009 f8f5 	bl	801da5c <__assert_func>
 8014872:	68bb      	ldr	r3, [r7, #8]
 8014874:	617b      	str	r3, [r7, #20]
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	613b      	str	r3, [r7, #16]
  }
 801487a:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 801487c:	68f8      	ldr	r0, [r7, #12]
 801487e:	68bb      	ldr	r3, [r7, #8]
 8014880:	687a      	ldr	r2, [r7, #4]
 8014882:	fb02 f103 	mul.w	r1, r2, r3
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	68ba      	ldr	r2, [r7, #8]
 801488a:	f000 f870 	bl	801496e <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE6resizeEiii>
    }
 801488e:	bf00      	nop
 8014890:	3718      	adds	r7, #24
 8014892:	46bd      	mov	sp, r7
 8014894:	bd80      	pop	{r7, pc}
 8014896:	bf00      	nop
 8014898:	08022354 	.word	0x08022354
 801489c:	08029200 	.word	0x08029200
 80148a0:	08022570 	.word	0x08022570

080148a4 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>:
 80148a4:	b580      	push	{r7, lr}
 80148a6:	b082      	sub	sp, #8
 80148a8:	af00      	add	r7, sp, #0
 80148aa:	6078      	str	r0, [r7, #4]
 80148ac:	6878      	ldr	r0, [r7, #4]
 80148ae:	f000 f86b 	bl	8014988 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	4618      	mov	r0, r3
 80148b6:	3708      	adds	r7, #8
 80148b8:	46bd      	mov	sp, r7
 80148ba:	bd80      	pop	{r7, pc}

080148bc <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1ELi3EEC1Ev>:
class dense_product_base
 80148bc:	b580      	push	{r7, lr}
 80148be:	b082      	sub	sp, #8
 80148c0:	af00      	add	r7, sp, #0
 80148c2:	6078      	str	r0, [r7, #4]
 80148c4:	6878      	ldr	r0, [r7, #4]
 80148c6:	f7ff ffed 	bl	80148a4 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	4618      	mov	r0, r3
 80148ce:	3708      	adds	r7, #8
 80148d0:	46bd      	mov	sp, r7
 80148d2:	bd80      	pop	{r7, pc}

080148d4 <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80148d4:	b580      	push	{r7, lr}
 80148d6:	b082      	sub	sp, #8
 80148d8:	af00      	add	r7, sp, #0
 80148da:	6078      	str	r0, [r7, #4]
 80148dc:	6878      	ldr	r0, [r7, #4]
 80148de:	f7ff ffed 	bl	80148bc <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1ELi3EEC1Ev>
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	4618      	mov	r0, r3
 80148e6:	3708      	adds	r7, #8
 80148e8:	46bd      	mov	sp, r7
 80148ea:	bd80      	pop	{r7, pc}

080148ec <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 80148ec:	b590      	push	{r4, r7, lr}
 80148ee:	b085      	sub	sp, #20
 80148f0:	af00      	add	r7, sp, #0
 80148f2:	60f8      	str	r0, [r7, #12]
 80148f4:	60b9      	str	r1, [r7, #8]
 80148f6:	607a      	str	r2, [r7, #4]
 80148f8:	68f8      	ldr	r0, [r7, #12]
 80148fa:	f7ff ffeb 	bl	80148d4 <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1ENS_5DenseEEC1Ev>
 80148fe:	68fb      	ldr	r3, [r7, #12]
 8014900:	68ba      	ldr	r2, [r7, #8]
 8014902:	601a      	str	r2, [r3, #0]
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	687a      	ldr	r2, [r7, #4]
 8014908:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 801490a:	68bb      	ldr	r3, [r7, #8]
 801490c:	4618      	mov	r0, r3
 801490e:	f7f0 fb45 	bl	8004f9c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8014912:	4604      	mov	r4, r0
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	4618      	mov	r0, r3
 8014918:	f7f0 f989 	bl	8004c2e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 801491c:	4603      	mov	r3, r0
 801491e:	429c      	cmp	r4, r3
 8014920:	d005      	beq.n	801492e <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_+0x42>
 8014922:	4b06      	ldr	r3, [pc, #24]	; (801493c <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_+0x50>)
 8014924:	4a06      	ldr	r2, [pc, #24]	; (8014940 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_+0x54>)
 8014926:	2160      	movs	r1, #96	; 0x60
 8014928:	4806      	ldr	r0, [pc, #24]	; (8014944 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_+0x58>)
 801492a:	f009 f897 	bl	801da5c <__assert_func>
 801492e:	bf00      	nop
    }
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	4618      	mov	r0, r3
 8014934:	3714      	adds	r7, #20
 8014936:	46bd      	mov	sp, r7
 8014938:	bd90      	pop	{r4, r7, pc}
 801493a:	bf00      	nop
 801493c:	0801fb84 	.word	0x0801fb84
 8014940:	0802928c 	.word	0x0802928c
 8014944:	0801fed4 	.word	0x0801fed4

08014948 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8014948:	b580      	push	{r7, lr}
 801494a:	b084      	sub	sp, #16
 801494c:	af00      	add	r7, sp, #0
 801494e:	60f8      	str	r0, [r7, #12]
 8014950:	60b9      	str	r1, [r7, #8]
 8014952:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8014954:	68b9      	ldr	r1, [r7, #8]
 8014956:	68f8      	ldr	r0, [r7, #12]
 8014958:	f000 f821 	bl	801499e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 801495c:	687a      	ldr	r2, [r7, #4]
 801495e:	68b9      	ldr	r1, [r7, #8]
 8014960:	68f8      	ldr	r0, [r7, #12]
 8014962:	f000 f84a 	bl	80149fa <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8014966:	bf00      	nop
 8014968:	3710      	adds	r7, #16
 801496a:	46bd      	mov	sp, r7
 801496c:	bd80      	pop	{r7, pc}

0801496e <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE6resizeEiii>:
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
 801496e:	b480      	push	{r7}
 8014970:	b085      	sub	sp, #20
 8014972:	af00      	add	r7, sp, #0
 8014974:	60f8      	str	r0, [r7, #12]
 8014976:	60b9      	str	r1, [r7, #8]
 8014978:	607a      	str	r2, [r7, #4]
 801497a:	603b      	str	r3, [r7, #0]
 801497c:	bf00      	nop
 801497e:	3714      	adds	r7, #20
 8014980:	46bd      	mov	sp, r7
 8014982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014986:	4770      	bx	lr

08014988 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8014988:	b480      	push	{r7}
 801498a:	b083      	sub	sp, #12
 801498c:	af00      	add	r7, sp, #0
 801498e:	6078      	str	r0, [r7, #4]
    }
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	4618      	mov	r0, r3
 8014994:	370c      	adds	r7, #12
 8014996:	46bd      	mov	sp, r7
 8014998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801499c:	4770      	bx	lr

0801499e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 801499e:	b480      	push	{r7}
 80149a0:	b083      	sub	sp, #12
 80149a2:	af00      	add	r7, sp, #0
 80149a4:	6078      	str	r0, [r7, #4]
 80149a6:	6039      	str	r1, [r7, #0]
}
 80149a8:	bf00      	nop
 80149aa:	370c      	adds	r7, #12
 80149ac:	46bd      	mov	sp, r7
 80149ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149b2:	4770      	bx	lr

080149b4 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 80149b4:	b580      	push	{r7, lr}
 80149b6:	b082      	sub	sp, #8
 80149b8:	af00      	add	r7, sp, #0
 80149ba:	6078      	str	r0, [r7, #4]
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	330c      	adds	r3, #12
 80149c0:	4618      	mov	r0, r3
 80149c2:	f7f2 fbbc 	bl	800713e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	3308      	adds	r3, #8
 80149ca:	4618      	mov	r0, r3
 80149cc:	f7fa f9ea 	bl	800eda4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 80149d0:	6878      	ldr	r0, [r7, #4]
 80149d2:	f000 f859 	bl	8014a88 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEED1Ev>
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	4618      	mov	r0, r3
 80149da:	3708      	adds	r7, #8
 80149dc:	46bd      	mov	sp, r7
 80149de:	bd80      	pop	{r7, pc}

080149e0 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 80149e0:	b580      	push	{r7, lr}
 80149e2:	b082      	sub	sp, #8
 80149e4:	af00      	add	r7, sp, #0
 80149e6:	6078      	str	r0, [r7, #4]
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	4618      	mov	r0, r3
 80149ec:	f7ff ffe2 	bl	80149b4 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffED1Ev>
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	4618      	mov	r0, r3
 80149f4:	3708      	adds	r7, #8
 80149f6:	46bd      	mov	sp, r7
 80149f8:	bd80      	pop	{r7, pc}

080149fa <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 80149fa:	b580      	push	{r7, lr}
 80149fc:	b090      	sub	sp, #64	; 0x40
 80149fe:	af02      	add	r7, sp, #8
 8014a00:	60f8      	str	r0, [r7, #12]
 8014a02:	60b9      	str	r1, [r7, #8]
 8014a04:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8014a06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014a0a:	68b9      	ldr	r1, [r7, #8]
 8014a0c:	4618      	mov	r0, r3
 8014a0e:	f000 f82c 	bl	8014a6a <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1ERKS6_>
  resize_if_allowed(dst, src, func);
 8014a12:	687a      	ldr	r2, [r7, #4]
 8014a14:	68b9      	ldr	r1, [r7, #8]
 8014a16:	68f8      	ldr	r0, [r7, #12]
 8014a18:	f000 f85e 	bl	8014ad8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8014a1c:	f107 0320 	add.w	r3, r7, #32
 8014a20:	68f9      	ldr	r1, [r7, #12]
 8014a22:	4618      	mov	r0, r3
 8014a24:	f7fc fed2 	bl	80117cc <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8014a28:	68f8      	ldr	r0, [r7, #12]
 8014a2a:	f000 f89f 	bl	8014b6c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE18const_cast_derivedEv>
 8014a2e:	4603      	mov	r3, r0
 8014a30:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8014a34:	f107 0120 	add.w	r1, r7, #32
 8014a38:	f107 0010 	add.w	r0, r7, #16
 8014a3c:	9300      	str	r3, [sp, #0]
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	f000 f89f 	bl	8014b82 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS9_RKSB_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8014a44:	f107 0310 	add.w	r3, r7, #16
 8014a48:	4618      	mov	r0, r3
 8014a4a:	f000 f8b4 	bl	8014bb6 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSD_>
  DstEvaluatorType dstEvaluator(dst);
 8014a4e:	f107 0320 	add.w	r3, r7, #32
 8014a52:	4618      	mov	r0, r3
 8014a54:	f7fa f9a6 	bl	800eda4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8014a58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014a5c:	4618      	mov	r0, r3
 8014a5e:	f7ff ffbf 	bl	80149e0 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEED1Ev>
}
 8014a62:	bf00      	nop
 8014a64:	3738      	adds	r7, #56	; 0x38
 8014a66:	46bd      	mov	sp, r7
 8014a68:	bd80      	pop	{r7, pc}

08014a6a <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1ERKS6_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8014a6a:	b580      	push	{r7, lr}
 8014a6c:	b082      	sub	sp, #8
 8014a6e:	af00      	add	r7, sp, #0
 8014a70:	6078      	str	r0, [r7, #4]
 8014a72:	6039      	str	r1, [r7, #0]
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	6839      	ldr	r1, [r7, #0]
 8014a78:	4618      	mov	r0, r3
 8014a7a:	f000 f8a7 	bl	8014bcc <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	4618      	mov	r0, r3
 8014a82:	3708      	adds	r7, #8
 8014a84:	46bd      	mov	sp, r7
 8014a86:	bd80      	pop	{r7, pc}

08014a88 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8014a88:	b480      	push	{r7}
 8014a8a:	b083      	sub	sp, #12
 8014a8c:	af00      	add	r7, sp, #0
 8014a8e:	6078      	str	r0, [r7, #4]
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	4618      	mov	r0, r3
 8014a94:	370c      	adds	r7, #12
 8014a96:	46bd      	mov	sp, r7
 8014a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a9c:	4770      	bx	lr

08014a9e <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8014a9e:	b580      	push	{r7, lr}
 8014aa0:	b082      	sub	sp, #8
 8014aa2:	af00      	add	r7, sp, #0
 8014aa4:	6078      	str	r0, [r7, #4]
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	4618      	mov	r0, r3
 8014aac:	f7f0 fa81 	bl	8004fb2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8014ab0:	4603      	mov	r3, r0
 8014ab2:	4618      	mov	r0, r3
 8014ab4:	3708      	adds	r7, #8
 8014ab6:	46bd      	mov	sp, r7
 8014ab8:	bd80      	pop	{r7, pc}

08014aba <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8014aba:	b580      	push	{r7, lr}
 8014abc:	b082      	sub	sp, #8
 8014abe:	af00      	add	r7, sp, #0
 8014ac0:	6078      	str	r0, [r7, #4]
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	685b      	ldr	r3, [r3, #4]
 8014ac6:	4618      	mov	r0, r3
 8014ac8:	f7f0 f8a6 	bl	8004c18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8014acc:	4603      	mov	r3, r0
 8014ace:	4618      	mov	r0, r3
 8014ad0:	3708      	adds	r7, #8
 8014ad2:	46bd      	mov	sp, r7
 8014ad4:	bd80      	pop	{r7, pc}
	...

08014ad8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8014ad8:	b580      	push	{r7, lr}
 8014ada:	b086      	sub	sp, #24
 8014adc:	af00      	add	r7, sp, #0
 8014ade:	60f8      	str	r0, [r7, #12]
 8014ae0:	60b9      	str	r1, [r7, #8]
 8014ae2:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8014ae4:	68b8      	ldr	r0, [r7, #8]
 8014ae6:	f7ff ffda 	bl	8014a9e <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE4rowsEv>
 8014aea:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8014aec:	68b8      	ldr	r0, [r7, #8]
 8014aee:	f7ff ffe4 	bl	8014aba <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE4colsEv>
 8014af2:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8014af4:	68fb      	ldr	r3, [r7, #12]
 8014af6:	4618      	mov	r0, r3
 8014af8:	f7f0 fa5b 	bl	8004fb2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8014afc:	4602      	mov	r2, r0
 8014afe:	697b      	ldr	r3, [r7, #20]
 8014b00:	4293      	cmp	r3, r2
 8014b02:	d107      	bne.n	8014b14 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8014b04:	68fb      	ldr	r3, [r7, #12]
 8014b06:	4618      	mov	r0, r3
 8014b08:	f7f0 fa48 	bl	8004f9c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8014b0c:	4602      	mov	r2, r0
 8014b0e:	693b      	ldr	r3, [r7, #16]
 8014b10:	4293      	cmp	r3, r2
 8014b12:	d001      	beq.n	8014b18 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8014b14:	2301      	movs	r3, #1
 8014b16:	e000      	b.n	8014b1a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8014b18:	2300      	movs	r3, #0
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d005      	beq.n	8014b2a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8014b1e:	68fb      	ldr	r3, [r7, #12]
 8014b20:	693a      	ldr	r2, [r7, #16]
 8014b22:	6979      	ldr	r1, [r7, #20]
 8014b24:	4618      	mov	r0, r3
 8014b26:	f7ff fe8b 	bl	8014840 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8014b2a:	68fb      	ldr	r3, [r7, #12]
 8014b2c:	4618      	mov	r0, r3
 8014b2e:	f7f0 fa40 	bl	8004fb2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8014b32:	4602      	mov	r2, r0
 8014b34:	697b      	ldr	r3, [r7, #20]
 8014b36:	4293      	cmp	r3, r2
 8014b38:	d107      	bne.n	8014b4a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8014b3a:	68fb      	ldr	r3, [r7, #12]
 8014b3c:	4618      	mov	r0, r3
 8014b3e:	f7f0 fa2d 	bl	8004f9c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8014b42:	4602      	mov	r2, r0
 8014b44:	693b      	ldr	r3, [r7, #16]
 8014b46:	4293      	cmp	r3, r2
 8014b48:	d006      	beq.n	8014b58 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8014b4a:	4b05      	ldr	r3, [pc, #20]	; (8014b60 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8014b4c:	4a05      	ldr	r2, [pc, #20]	; (8014b64 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8014b4e:	f240 21fd 	movw	r1, #765	; 0x2fd
 8014b52:	4805      	ldr	r0, [pc, #20]	; (8014b68 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8014b54:	f008 ff82 	bl	801da5c <__assert_func>
}
 8014b58:	bf00      	nop
 8014b5a:	3718      	adds	r7, #24
 8014b5c:	46bd      	mov	sp, r7
 8014b5e:	bd80      	pop	{r7, pc}
 8014b60:	08021f3c 	.word	0x08021f3c
 8014b64:	080293b4 	.word	0x080293b4
 8014b68:	08022050 	.word	0x08022050

08014b6c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 8014b6c:	b480      	push	{r7}
 8014b6e:	b083      	sub	sp, #12
 8014b70:	af00      	add	r7, sp, #0
 8014b72:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	4618      	mov	r0, r3
 8014b78:	370c      	adds	r7, #12
 8014b7a:	46bd      	mov	sp, r7
 8014b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b80:	4770      	bx	lr

08014b82 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS9_RKSB_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8014b82:	b480      	push	{r7}
 8014b84:	b085      	sub	sp, #20
 8014b86:	af00      	add	r7, sp, #0
 8014b88:	60f8      	str	r0, [r7, #12]
 8014b8a:	60b9      	str	r1, [r7, #8]
 8014b8c:	607a      	str	r2, [r7, #4]
 8014b8e:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8014b90:	68fb      	ldr	r3, [r7, #12]
 8014b92:	68ba      	ldr	r2, [r7, #8]
 8014b94:	601a      	str	r2, [r3, #0]
 8014b96:	68fb      	ldr	r3, [r7, #12]
 8014b98:	687a      	ldr	r2, [r7, #4]
 8014b9a:	605a      	str	r2, [r3, #4]
 8014b9c:	68fb      	ldr	r3, [r7, #12]
 8014b9e:	683a      	ldr	r2, [r7, #0]
 8014ba0:	609a      	str	r2, [r3, #8]
 8014ba2:	68fb      	ldr	r3, [r7, #12]
 8014ba4:	69ba      	ldr	r2, [r7, #24]
 8014ba6:	60da      	str	r2, [r3, #12]
  }
 8014ba8:	68fb      	ldr	r3, [r7, #12]
 8014baa:	4618      	mov	r0, r3
 8014bac:	3714      	adds	r7, #20
 8014bae:	46bd      	mov	sp, r7
 8014bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bb4:	4770      	bx	lr

08014bb6 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8014bb6:	b580      	push	{r7, lr}
 8014bb8:	b082      	sub	sp, #8
 8014bba:	af00      	add	r7, sp, #0
 8014bbc:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8014bbe:	6878      	ldr	r0, [r7, #4]
 8014bc0:	f000 f839 	bl	8014c36 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSD_>
  }
 8014bc4:	bf00      	nop
 8014bc6:	3708      	adds	r7, #8
 8014bc8:	46bd      	mov	sp, r7
 8014bca:	bd80      	pop	{r7, pc}

08014bcc <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>:
  explicit product_evaluator(const XprType& xpr)
 8014bcc:	b580      	push	{r7, lr}
 8014bce:	b082      	sub	sp, #8
 8014bd0:	af00      	add	r7, sp, #0
 8014bd2:	6078      	str	r0, [r7, #4]
 8014bd4:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 8014bd6:	6878      	ldr	r0, [r7, #4]
 8014bd8:	f000 f854 	bl	8014c84 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 8014bdc:	6838      	ldr	r0, [r7, #0]
 8014bde:	f000 f839 	bl	8014c54 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3lhsEv>
 8014be2:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 8014be8:	6838      	ldr	r0, [r7, #0]
 8014bea:	f000 f83f 	bl	8014c6c <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3rhsEv>
 8014bee:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	605a      	str	r2, [r3, #4]
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 8014bfe:	4619      	mov	r1, r3
 8014c00:	4610      	mov	r0, r2
 8014c02:	f7fc fde3 	bl	80117cc <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	685b      	ldr	r3, [r3, #4]
      m_innerDim(xpr.lhs().cols())
 8014c10:	4619      	mov	r1, r3
 8014c12:	4610      	mov	r0, r2
 8014c14:	f7f2 fca2 	bl	800755c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 8014c18:	6838      	ldr	r0, [r7, #0]
 8014c1a:	f000 f81b 	bl	8014c54 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3lhsEv>
 8014c1e:	4603      	mov	r3, r0
 8014c20:	4618      	mov	r0, r3
 8014c22:	f7f0 f9bb 	bl	8004f9c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8014c26:	4602      	mov	r2, r0
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	611a      	str	r2, [r3, #16]
  }
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	4618      	mov	r0, r3
 8014c30:	3708      	adds	r7, #8
 8014c32:	46bd      	mov	sp, r7
 8014c34:	bd80      	pop	{r7, pc}

08014c36 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8014c36:	b580      	push	{r7, lr}
 8014c38:	b082      	sub	sp, #8
 8014c3a:	af00      	add	r7, sp, #0
 8014c3c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8014c3e:	2100      	movs	r1, #0
 8014c40:	6878      	ldr	r0, [r7, #4]
 8014c42:	f000 f82a 	bl	8014c9a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8014c46:	6878      	ldr	r0, [r7, #4]
 8014c48:	f000 f84a 	bl	8014ce0 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSD_>
  }
 8014c4c:	bf00      	nop
 8014c4e:	3708      	adds	r7, #8
 8014c50:	46bd      	mov	sp, r7
 8014c52:	bd80      	pop	{r7, pc}

08014c54 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8014c54:	b480      	push	{r7}
 8014c56:	b083      	sub	sp, #12
 8014c58:	af00      	add	r7, sp, #0
 8014c5a:	6078      	str	r0, [r7, #4]
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	681b      	ldr	r3, [r3, #0]
 8014c60:	4618      	mov	r0, r3
 8014c62:	370c      	adds	r7, #12
 8014c64:	46bd      	mov	sp, r7
 8014c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c6a:	4770      	bx	lr

08014c6c <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8014c6c:	b480      	push	{r7}
 8014c6e:	b083      	sub	sp, #12
 8014c70:	af00      	add	r7, sp, #0
 8014c72:	6078      	str	r0, [r7, #4]
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	685b      	ldr	r3, [r3, #4]
 8014c78:	4618      	mov	r0, r3
 8014c7a:	370c      	adds	r7, #12
 8014c7c:	46bd      	mov	sp, r7
 8014c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c82:	4770      	bx	lr

08014c84 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8014c84:	b480      	push	{r7}
 8014c86:	b083      	sub	sp, #12
 8014c88:	af00      	add	r7, sp, #0
 8014c8a:	6078      	str	r0, [r7, #4]
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	4618      	mov	r0, r3
 8014c90:	370c      	adds	r7, #12
 8014c92:	46bd      	mov	sp, r7
 8014c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c98:	4770      	bx	lr

08014c9a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8014c9a:	b5b0      	push	{r4, r5, r7, lr}
 8014c9c:	b084      	sub	sp, #16
 8014c9e:	af00      	add	r7, sp, #0
 8014ca0:	6078      	str	r0, [r7, #4]
 8014ca2:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	689c      	ldr	r4, [r3, #8]
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	681b      	ldr	r3, [r3, #0]
 8014cac:	6839      	ldr	r1, [r7, #0]
 8014cae:	4618      	mov	r0, r3
 8014cb0:	f000 f825 	bl	8014cfe <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE8coeffRefEi>
 8014cb4:	4605      	mov	r5, r0
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	685b      	ldr	r3, [r3, #4]
 8014cba:	6839      	ldr	r1, [r7, #0]
 8014cbc:	4618      	mov	r0, r3
 8014cbe:	f000 f82e 	bl	8014d1e <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffE5coeffEi>
 8014cc2:	eef0 7a40 	vmov.f32	s15, s0
 8014cc6:	edc7 7a03 	vstr	s15, [r7, #12]
 8014cca:	f107 030c 	add.w	r3, r7, #12
 8014cce:	461a      	mov	r2, r3
 8014cd0:	4629      	mov	r1, r5
 8014cd2:	4620      	mov	r0, r4
 8014cd4:	f7f3 fb4a 	bl	800836c <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8014cd8:	bf00      	nop
 8014cda:	3710      	adds	r7, #16
 8014cdc:	46bd      	mov	sp, r7
 8014cde:	bdb0      	pop	{r4, r5, r7, pc}

08014ce0 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8014ce0:	b580      	push	{r7, lr}
 8014ce2:	b082      	sub	sp, #8
 8014ce4:	af00      	add	r7, sp, #0
 8014ce6:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8014ce8:	2101      	movs	r1, #1
 8014cea:	6878      	ldr	r0, [r7, #4]
 8014cec:	f7ff ffd5 	bl	8014c9a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8014cf0:	6878      	ldr	r0, [r7, #4]
 8014cf2:	f000 f84d 	bl	8014d90 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSD_>
  }
 8014cf6:	bf00      	nop
 8014cf8:	3708      	adds	r7, #8
 8014cfa:	46bd      	mov	sp, r7
 8014cfc:	bd80      	pop	{r7, pc}

08014cfe <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE8coeffRefEi>:
  Scalar& coeffRef(Index index)
 8014cfe:	b480      	push	{r7}
 8014d00:	b083      	sub	sp, #12
 8014d02:	af00      	add	r7, sp, #0
 8014d04:	6078      	str	r0, [r7, #4]
 8014d06:	6039      	str	r1, [r7, #0]
    return const_cast<Scalar*>(m_d.data)[index];
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	681a      	ldr	r2, [r3, #0]
 8014d0c:	683b      	ldr	r3, [r7, #0]
 8014d0e:	009b      	lsls	r3, r3, #2
 8014d10:	4413      	add	r3, r2
  }
 8014d12:	4618      	mov	r0, r3
 8014d14:	370c      	adds	r7, #12
 8014d16:	46bd      	mov	sp, r7
 8014d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d1c:	4770      	bx	lr

08014d1e <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffE5coeffEi>:
  const CoeffReturnType coeff(Index index) const
 8014d1e:	b580      	push	{r7, lr}
 8014d20:	b0a4      	sub	sp, #144	; 0x90
 8014d22:	af00      	add	r7, sp, #0
 8014d24:	6078      	str	r0, [r7, #4]
 8014d26:	6039      	str	r1, [r7, #0]
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 8014d28:	2300      	movs	r3, #0
 8014d2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 8014d2e:	683b      	ldr	r3, [r7, #0]
 8014d30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	6819      	ldr	r1, [r3, #0]
 8014d38:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014d3c:	2200      	movs	r2, #0
 8014d3e:	4618      	mov	r0, r3
 8014d40:	f000 f835 	bl	8014dae <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE3rowEi>
 8014d44:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014d48:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8014d4c:	4611      	mov	r1, r2
 8014d4e:	4618      	mov	r0, r3
 8014d50:	f000 f840 	bl	8014dd4 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE9transposeEv>
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	6859      	ldr	r1, [r3, #4]
 8014d58:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8014d5c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8014d60:	4618      	mov	r0, r3
 8014d62:	f7f7 f94a 	bl	800bffa <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3colEi>
 8014d66:	f107 030c 	add.w	r3, r7, #12
 8014d6a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8014d6e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8014d72:	4618      	mov	r0, r3
 8014d74:	f000 f83f 	bl	8014df6 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEE12cwiseProductINS2_IKNS3_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 8014d78:	f107 030c 	add.w	r3, r7, #12
 8014d7c:	4618      	mov	r0, r3
 8014d7e:	f000 f868 	bl	8014e52 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE3sumEv>
 8014d82:	eef0 7a40 	vmov.f32	s15, s0
  }
 8014d86:	eeb0 0a67 	vmov.f32	s0, s15
 8014d8a:	3790      	adds	r7, #144	; 0x90
 8014d8c:	46bd      	mov	sp, r7
 8014d8e:	bd80      	pop	{r7, pc}

08014d90 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8014d90:	b580      	push	{r7, lr}
 8014d92:	b082      	sub	sp, #8
 8014d94:	af00      	add	r7, sp, #0
 8014d96:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8014d98:	2102      	movs	r1, #2
 8014d9a:	6878      	ldr	r0, [r7, #4]
 8014d9c:	f7ff ff7d 	bl	8014c9a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8014da0:	6878      	ldr	r0, [r7, #4]
 8014da2:	f000 f871 	bl	8014e88 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSD_>
  }
 8014da6:	bf00      	nop
 8014da8:	3708      	adds	r7, #8
 8014daa:	46bd      	mov	sp, r7
 8014dac:	bd80      	pop	{r7, pc}

08014dae <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE3rowEi>:
ConstRowXpr row(Index i) const
 8014dae:	b580      	push	{r7, lr}
 8014db0:	b084      	sub	sp, #16
 8014db2:	af00      	add	r7, sp, #0
 8014db4:	60f8      	str	r0, [r7, #12]
 8014db6:	60b9      	str	r1, [r7, #8]
 8014db8:	607a      	str	r2, [r7, #4]
  return ConstRowXpr(derived(), i);
 8014dba:	68b8      	ldr	r0, [r7, #8]
 8014dbc:	f7f0 fe12 	bl	80059e4 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8014dc0:	4603      	mov	r3, r0
 8014dc2:	687a      	ldr	r2, [r7, #4]
 8014dc4:	4619      	mov	r1, r3
 8014dc6:	68f8      	ldr	r0, [r7, #12]
 8014dc8:	f000 f868 	bl	8014e9c <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i>
}
 8014dcc:	68f8      	ldr	r0, [r7, #12]
 8014dce:	3710      	adds	r7, #16
 8014dd0:	46bd      	mov	sp, r7
 8014dd2:	bd80      	pop	{r7, pc}

08014dd4 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 8014dd4:	b580      	push	{r7, lr}
 8014dd6:	b082      	sub	sp, #8
 8014dd8:	af00      	add	r7, sp, #0
 8014dda:	6078      	str	r0, [r7, #4]
 8014ddc:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 8014dde:	6838      	ldr	r0, [r7, #0]
 8014de0:	f000 f886 	bl	8014ef0 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE7derivedEv>
 8014de4:	4603      	mov	r3, r0
 8014de6:	4619      	mov	r1, r3
 8014de8:	6878      	ldr	r0, [r7, #4]
 8014dea:	f000 f8a4 	bl	8014f36 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERS6_>
}
 8014dee:	6878      	ldr	r0, [r7, #4]
 8014df0:	3708      	adds	r7, #8
 8014df2:	46bd      	mov	sp, r7
 8014df4:	bd80      	pop	{r7, pc}

08014df6 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEE12cwiseProductINS2_IKNS3_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 8014df6:	b5b0      	push	{r4, r5, r7, lr}
 8014df8:	b086      	sub	sp, #24
 8014dfa:	af00      	add	r7, sp, #0
 8014dfc:	60f8      	str	r0, [r7, #12]
 8014dfe:	60b9      	str	r1, [r7, #8]
 8014e00:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 8014e02:	68b8      	ldr	r0, [r7, #8]
 8014e04:	f000 f8ae 	bl	8014f64 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEE7derivedEv>
 8014e08:	4604      	mov	r4, r0
 8014e0a:	6878      	ldr	r0, [r7, #4]
 8014e0c:	f7f7 fec4 	bl	800cb98 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7derivedEv>
 8014e10:	4605      	mov	r5, r0
 8014e12:	f107 0314 	add.w	r3, r7, #20
 8014e16:	4618      	mov	r0, r3
 8014e18:	f7f0 f9aa 	bl	8005170 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 8014e1c:	f107 0314 	add.w	r3, r7, #20
 8014e20:	462a      	mov	r2, r5
 8014e22:	4621      	mov	r1, r4
 8014e24:	68f8      	ldr	r0, [r7, #12]
 8014e26:	f000 f8db 	bl	8014fe0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_>
}
 8014e2a:	68f8      	ldr	r0, [r7, #12]
 8014e2c:	3718      	adds	r7, #24
 8014e2e:	46bd      	mov	sp, r7
 8014e30:	bdb0      	pop	{r4, r5, r7, pc}

08014e32 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8014e32:	b580      	push	{r7, lr}
 8014e34:	b082      	sub	sp, #8
 8014e36:	af00      	add	r7, sp, #0
 8014e38:	6078      	str	r0, [r7, #4]
 8014e3a:	6878      	ldr	r0, [r7, #4]
 8014e3c:	f000 f92e 	bl	801509c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 8014e40:	4603      	mov	r3, r0
 8014e42:	4618      	mov	r0, r3
 8014e44:	f000 f935 	bl	80150b2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE4rowsEv>
 8014e48:	4603      	mov	r3, r0
 8014e4a:	4618      	mov	r0, r3
 8014e4c:	3708      	adds	r7, #8
 8014e4e:	46bd      	mov	sp, r7
 8014e50:	bd80      	pop	{r7, pc}

08014e52 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 8014e52:	b590      	push	{r4, r7, lr}
 8014e54:	b085      	sub	sp, #20
 8014e56:	af00      	add	r7, sp, #0
 8014e58:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 8014e5a:	6878      	ldr	r0, [r7, #4]
 8014e5c:	f000 f91e 	bl	801509c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 8014e60:	4604      	mov	r4, r0
 8014e62:	f107 030c 	add.w	r3, r7, #12
 8014e66:	4618      	mov	r0, r3
 8014e68:	f7f0 fc79 	bl	800575e <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8014e6c:	f107 030c 	add.w	r3, r7, #12
 8014e70:	4619      	mov	r1, r3
 8014e72:	4620      	mov	r0, r4
 8014e74:	f000 f9c4 	bl	8015200 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 8014e78:	eef0 7a40 	vmov.f32	s15, s0
 8014e7c:	bf00      	nop
}
 8014e7e:	eeb0 0a67 	vmov.f32	s0, s15
 8014e82:	3714      	adds	r7, #20
 8014e84:	46bd      	mov	sp, r7
 8014e86:	bd90      	pop	{r4, r7, pc}

08014e88 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8014e88:	b480      	push	{r7}
 8014e8a:	b083      	sub	sp, #12
 8014e8c:	af00      	add	r7, sp, #0
 8014e8e:	6078      	str	r0, [r7, #4]
 8014e90:	bf00      	nop
 8014e92:	370c      	adds	r7, #12
 8014e94:	46bd      	mov	sp, r7
 8014e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e9a:	4770      	bx	lr

08014e9c <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 8014e9c:	b580      	push	{r7, lr}
 8014e9e:	b084      	sub	sp, #16
 8014ea0:	af00      	add	r7, sp, #0
 8014ea2:	60f8      	str	r0, [r7, #12]
 8014ea4:	60b9      	str	r1, [r7, #8]
 8014ea6:	607a      	str	r2, [r7, #4]
 8014ea8:	68fb      	ldr	r3, [r7, #12]
 8014eaa:	687a      	ldr	r2, [r7, #4]
 8014eac:	68b9      	ldr	r1, [r7, #8]
 8014eae:	4618      	mov	r0, r3
 8014eb0:	f000 f9ec 	bl	801528c <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	db07      	blt.n	8014eca <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x2e>
 8014eba:	68bb      	ldr	r3, [r7, #8]
 8014ebc:	4618      	mov	r0, r3
 8014ebe:	f7f0 f878 	bl	8004fb2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8014ec2:	4602      	mov	r2, r0
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	4293      	cmp	r3, r2
 8014ec8:	db05      	blt.n	8014ed6 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x3a>
 8014eca:	4b06      	ldr	r3, [pc, #24]	; (8014ee4 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x48>)
 8014ecc:	4a06      	ldr	r2, [pc, #24]	; (8014ee8 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x4c>)
 8014ece:	2178      	movs	r1, #120	; 0x78
 8014ed0:	4806      	ldr	r0, [pc, #24]	; (8014eec <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x50>)
 8014ed2:	f008 fdc3 	bl	801da5c <__assert_func>
 8014ed6:	bf00      	nop
    }
 8014ed8:	68fb      	ldr	r3, [r7, #12]
 8014eda:	4618      	mov	r0, r3
 8014edc:	3710      	adds	r7, #16
 8014ede:	46bd      	mov	sp, r7
 8014ee0:	bd80      	pop	{r7, pc}
 8014ee2:	bf00      	nop
 8014ee4:	08024448 	.word	0x08024448
 8014ee8:	080294c8 	.word	0x080294c8
 8014eec:	080245cc 	.word	0x080245cc

08014ef0 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8014ef0:	b480      	push	{r7}
 8014ef2:	b083      	sub	sp, #12
 8014ef4:	af00      	add	r7, sp, #0
 8014ef6:	6078      	str	r0, [r7, #4]
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	4618      	mov	r0, r3
 8014efc:	370c      	adds	r7, #12
 8014efe:	46bd      	mov	sp, r7
 8014f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f04:	4770      	bx	lr

08014f06 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>:
 8014f06:	b580      	push	{r7, lr}
 8014f08:	b082      	sub	sp, #8
 8014f0a:	af00      	add	r7, sp, #0
 8014f0c:	6078      	str	r0, [r7, #4]
 8014f0e:	6878      	ldr	r0, [r7, #4]
 8014f10:	f000 f9cd 	bl	80152ae <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	4618      	mov	r0, r3
 8014f18:	3708      	adds	r7, #8
 8014f1a:	46bd      	mov	sp, r7
 8014f1c:	bd80      	pop	{r7, pc}

08014f1e <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 8014f1e:	b580      	push	{r7, lr}
 8014f20:	b082      	sub	sp, #8
 8014f22:	af00      	add	r7, sp, #0
 8014f24:	6078      	str	r0, [r7, #4]
 8014f26:	6878      	ldr	r0, [r7, #4]
 8014f28:	f7ff ffed 	bl	8014f06 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	4618      	mov	r0, r3
 8014f30:	3708      	adds	r7, #8
 8014f32:	46bd      	mov	sp, r7
 8014f34:	bd80      	pop	{r7, pc}

08014f36 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERS6_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 8014f36:	b5b0      	push	{r4, r5, r7, lr}
 8014f38:	b082      	sub	sp, #8
 8014f3a:	af00      	add	r7, sp, #0
 8014f3c:	6078      	str	r0, [r7, #4]
 8014f3e:	6039      	str	r1, [r7, #0]
 8014f40:	6878      	ldr	r0, [r7, #4]
 8014f42:	f7ff ffec 	bl	8014f1e <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEENS_5DenseEEC1Ev>
 8014f46:	687a      	ldr	r2, [r7, #4]
 8014f48:	683b      	ldr	r3, [r7, #0]
 8014f4a:	4614      	mov	r4, r2
 8014f4c:	461d      	mov	r5, r3
 8014f4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014f50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014f52:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014f56:	e884 0003 	stmia.w	r4, {r0, r1}
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	4618      	mov	r0, r3
 8014f5e:	3708      	adds	r7, #8
 8014f60:	46bd      	mov	sp, r7
 8014f62:	bdb0      	pop	{r4, r5, r7, pc}

08014f64 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEE7derivedEv>:
 8014f64:	b480      	push	{r7}
 8014f66:	b083      	sub	sp, #12
 8014f68:	af00      	add	r7, sp, #0
 8014f6a:	6078      	str	r0, [r7, #4]
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	4618      	mov	r0, r3
 8014f70:	370c      	adds	r7, #12
 8014f72:	46bd      	mov	sp, r7
 8014f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f78:	4770      	bx	lr

08014f7a <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>:
 8014f7a:	b580      	push	{r7, lr}
 8014f7c:	b082      	sub	sp, #8
 8014f7e:	af00      	add	r7, sp, #0
 8014f80:	6078      	str	r0, [r7, #4]
 8014f82:	6878      	ldr	r0, [r7, #4]
 8014f84:	f000 f99e 	bl	80152c4 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	4618      	mov	r0, r3
 8014f8c:	3708      	adds	r7, #8
 8014f8e:	46bd      	mov	sp, r7
 8014f90:	bd80      	pop	{r7, pc}

08014f92 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8014f92:	b580      	push	{r7, lr}
 8014f94:	b082      	sub	sp, #8
 8014f96:	af00      	add	r7, sp, #0
 8014f98:	6078      	str	r0, [r7, #4]
 8014f9a:	6878      	ldr	r0, [r7, #4]
 8014f9c:	f7ff ffed 	bl	8014f7a <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	4618      	mov	r0, r3
 8014fa4:	3708      	adds	r7, #8
 8014fa6:	46bd      	mov	sp, r7
 8014fa8:	bd80      	pop	{r7, pc}

08014faa <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 8014faa:	b580      	push	{r7, lr}
 8014fac:	b082      	sub	sp, #8
 8014fae:	af00      	add	r7, sp, #0
 8014fb0:	6078      	str	r0, [r7, #4]
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	4618      	mov	r0, r3
 8014fb6:	f000 f990 	bl	80152da <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4colsEv>
 8014fba:	4603      	mov	r3, r0
 8014fbc:	4618      	mov	r0, r3
 8014fbe:	3708      	adds	r7, #8
 8014fc0:	46bd      	mov	sp, r7
 8014fc2:	bd80      	pop	{r7, pc}

08014fc4 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 8014fc4:	b580      	push	{r7, lr}
 8014fc6:	b082      	sub	sp, #8
 8014fc8:	af00      	add	r7, sp, #0
 8014fca:	6078      	str	r0, [r7, #4]
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	4618      	mov	r0, r3
 8014fd0:	f000 f98e 	bl	80152f0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4rowsEv>
 8014fd4:	4603      	mov	r3, r0
 8014fd6:	4618      	mov	r0, r3
 8014fd8:	3708      	adds	r7, #8
 8014fda:	46bd      	mov	sp, r7
 8014fdc:	bd80      	pop	{r7, pc}
	...

08014fe0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8014fe0:	b5b0      	push	{r4, r5, r7, lr}
 8014fe2:	b084      	sub	sp, #16
 8014fe4:	af00      	add	r7, sp, #0
 8014fe6:	60f8      	str	r0, [r7, #12]
 8014fe8:	60b9      	str	r1, [r7, #8]
 8014fea:	607a      	str	r2, [r7, #4]
 8014fec:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8014fee:	68f8      	ldr	r0, [r7, #12]
 8014ff0:	f7ff ffcf 	bl	8014f92 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS_5DenseEEC1Ev>
 8014ff4:	68fa      	ldr	r2, [r7, #12]
 8014ff6:	68bb      	ldr	r3, [r7, #8]
 8014ff8:	4614      	mov	r4, r2
 8014ffa:	461d      	mov	r5, r3
 8014ffc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014ffe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015000:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015004:	e884 0003 	stmia.w	r4, {r0, r1}
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	f103 0218 	add.w	r2, r3, #24
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	4614      	mov	r4, r2
 8015012:	461d      	mov	r5, r3
 8015014:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015016:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015018:	e895 0003 	ldmia.w	r5, {r0, r1}
 801501c:	e884 0003 	stmia.w	r4, {r0, r1}
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	3330      	adds	r3, #48	; 0x30
 8015024:	6839      	ldr	r1, [r7, #0]
 8015026:	4618      	mov	r0, r3
 8015028:	f7f0 f92c 	bl	8005284 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 801502c:	68b8      	ldr	r0, [r7, #8]
 801502e:	f7ff ffbc 	bl	8014faa <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4rowsEv>
 8015032:	4604      	mov	r4, r0
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	4618      	mov	r0, r3
 8015038:	f7f7 fdd1 	bl	800cbde <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4rowsEv>
 801503c:	4603      	mov	r3, r0
 801503e:	429c      	cmp	r4, r3
 8015040:	d10a      	bne.n	8015058 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x78>
 8015042:	68b8      	ldr	r0, [r7, #8]
 8015044:	f7ff ffbe 	bl	8014fc4 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4colsEv>
 8015048:	4604      	mov	r4, r0
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	4618      	mov	r0, r3
 801504e:	f7f7 fdd1 	bl	800cbf4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4colsEv>
 8015052:	4603      	mov	r3, r0
 8015054:	429c      	cmp	r4, r3
 8015056:	d005      	beq.n	8015064 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x84>
 8015058:	4b05      	ldr	r3, [pc, #20]	; (8015070 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x90>)
 801505a:	4a06      	ldr	r2, [pc, #24]	; (8015074 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x94>)
 801505c:	2174      	movs	r1, #116	; 0x74
 801505e:	4806      	ldr	r0, [pc, #24]	; (8015078 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x98>)
 8015060:	f008 fcfc 	bl	801da5c <__assert_func>
    }
 8015064:	68fb      	ldr	r3, [r7, #12]
 8015066:	4618      	mov	r0, r3
 8015068:	3710      	adds	r7, #16
 801506a:	46bd      	mov	sp, r7
 801506c:	bdb0      	pop	{r4, r5, r7, pc}
 801506e:	bf00      	nop
 8015070:	0801f8c4 	.word	0x0801f8c4
 8015074:	080295a4 	.word	0x080295a4
 8015078:	0801fb28 	.word	0x0801fb28

0801507c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 801507c:	b580      	push	{r7, lr}
 801507e:	b082      	sub	sp, #8
 8015080:	af00      	add	r7, sp, #0
 8015082:	6078      	str	r0, [r7, #4]
 8015084:	6878      	ldr	r0, [r7, #4]
 8015086:	f000 f809 	bl	801509c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 801508a:	4603      	mov	r3, r0
 801508c:	4618      	mov	r0, r3
 801508e:	f000 f93a 	bl	8015306 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE4colsEv>
 8015092:	4603      	mov	r3, r0
 8015094:	4618      	mov	r0, r3
 8015096:	3708      	adds	r7, #8
 8015098:	46bd      	mov	sp, r7
 801509a:	bd80      	pop	{r7, pc}

0801509c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 801509c:	b480      	push	{r7}
 801509e:	b083      	sub	sp, #12
 80150a0:	af00      	add	r7, sp, #0
 80150a2:	6078      	str	r0, [r7, #4]
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	4618      	mov	r0, r3
 80150a8:	370c      	adds	r7, #12
 80150aa:	46bd      	mov	sp, r7
 80150ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150b0:	4770      	bx	lr

080150b2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 80150b2:	b580      	push	{r7, lr}
 80150b4:	b082      	sub	sp, #8
 80150b6:	af00      	add	r7, sp, #0
 80150b8:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	4618      	mov	r0, r3
 80150be:	f7ff ff74 	bl	8014faa <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4rowsEv>
 80150c2:	4603      	mov	r3, r0
    }
 80150c4:	4618      	mov	r0, r3
 80150c6:	3708      	adds	r7, #8
 80150c8:	46bd      	mov	sp, r7
 80150ca:	bd80      	pop	{r7, pc}

080150cc <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_ED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 80150cc:	b580      	push	{r7, lr}
 80150ce:	b082      	sub	sp, #8
 80150d0:	af00      	add	r7, sp, #0
 80150d2:	6078      	str	r0, [r7, #4]
 80150d4:	6878      	ldr	r0, [r7, #4]
 80150d6:	f000 f948 	bl	801536a <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	4618      	mov	r0, r3
 80150de:	3708      	adds	r7, #8
 80150e0:	46bd      	mov	sp, r7
 80150e2:	bd80      	pop	{r7, pc}

080150e4 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 80150e4:	b580      	push	{r7, lr}
 80150e6:	b082      	sub	sp, #8
 80150e8:	af00      	add	r7, sp, #0
 80150ea:	6078      	str	r0, [r7, #4]
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	4618      	mov	r0, r3
 80150f0:	f7ff ffec 	bl	80150cc <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_ED1Ev>
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	4618      	mov	r0, r3
 80150f8:	3708      	adds	r7, #8
 80150fa:	46bd      	mov	sp, r7
 80150fc:	bd80      	pop	{r7, pc}

080150fe <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 80150fe:	b580      	push	{r7, lr}
 8015100:	b082      	sub	sp, #8
 8015102:	af00      	add	r7, sp, #0
 8015104:	6078      	str	r0, [r7, #4]
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	4618      	mov	r0, r3
 801510a:	f7ff ffeb 	bl	80150e4 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EED1Ev>
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	4618      	mov	r0, r3
 8015112:	3708      	adds	r7, #8
 8015114:	46bd      	mov	sp, r7
 8015116:	bd80      	pop	{r7, pc}

08015118 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>:
struct evaluator<const T>
 8015118:	b580      	push	{r7, lr}
 801511a:	b082      	sub	sp, #8
 801511c:	af00      	add	r7, sp, #0
 801511e:	6078      	str	r0, [r7, #4]
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	4618      	mov	r0, r3
 8015124:	f7ff ffeb 	bl	80150fe <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	4618      	mov	r0, r3
 801512c:	3708      	adds	r7, #8
 801512e:	46bd      	mov	sp, r7
 8015130:	bd80      	pop	{r7, pc}

08015132 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 8015132:	b580      	push	{r7, lr}
 8015134:	b082      	sub	sp, #8
 8015136:	af00      	add	r7, sp, #0
 8015138:	6078      	str	r0, [r7, #4]
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	4618      	mov	r0, r3
 801513e:	f7ff ffeb 	bl	8015118 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>
 8015142:	6878      	ldr	r0, [r7, #4]
 8015144:	f000 f906 	bl	8015354 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	4618      	mov	r0, r3
 801514c:	3708      	adds	r7, #8
 801514e:	46bd      	mov	sp, r7
 8015150:	bd80      	pop	{r7, pc}

08015152 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 8015152:	b580      	push	{r7, lr}
 8015154:	b082      	sub	sp, #8
 8015156:	af00      	add	r7, sp, #0
 8015158:	6078      	str	r0, [r7, #4]
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	4618      	mov	r0, r3
 801515e:	f7ff ffe8 	bl	8015132 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfED1Ev>
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	4618      	mov	r0, r3
 8015166:	3708      	adds	r7, #8
 8015168:	46bd      	mov	sp, r7
 801516a:	bd80      	pop	{r7, pc}

0801516c <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>:
struct evaluator<const T>
 801516c:	b580      	push	{r7, lr}
 801516e:	b082      	sub	sp, #8
 8015170:	af00      	add	r7, sp, #0
 8015172:	6078      	str	r0, [r7, #4]
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	4618      	mov	r0, r3
 8015178:	f7ff ffeb 	bl	8015152 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	4618      	mov	r0, r3
 8015180:	3708      	adds	r7, #8
 8015182:	46bd      	mov	sp, r7
 8015184:	bd80      	pop	{r7, pc}

08015186 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 8015186:	b580      	push	{r7, lr}
 8015188:	b082      	sub	sp, #8
 801518a:	af00      	add	r7, sp, #0
 801518c:	6078      	str	r0, [r7, #4]
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	330c      	adds	r3, #12
 8015192:	4618      	mov	r0, r3
 8015194:	f7f7 fdd6 	bl	800cd44 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	3304      	adds	r3, #4
 801519c:	4618      	mov	r0, r3
 801519e:	f7ff ffe5 	bl	801516c <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	4618      	mov	r0, r3
 80151a6:	3708      	adds	r7, #8
 80151a8:	46bd      	mov	sp, r7
 80151aa:	bd80      	pop	{r7, pc}

080151ac <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 80151ac:	b580      	push	{r7, lr}
 80151ae:	b082      	sub	sp, #8
 80151b0:	af00      	add	r7, sp, #0
 80151b2:	6078      	str	r0, [r7, #4]
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	4618      	mov	r0, r3
 80151b8:	f7ff ffe5 	bl	8015186 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 80151bc:	6878      	ldr	r0, [r7, #4]
 80151be:	f000 f8be 	bl	801533e <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	4618      	mov	r0, r3
 80151c6:	3708      	adds	r7, #8
 80151c8:	46bd      	mov	sp, r7
 80151ca:	bd80      	pop	{r7, pc}

080151cc <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 80151cc:	b580      	push	{r7, lr}
 80151ce:	b082      	sub	sp, #8
 80151d0:	af00      	add	r7, sp, #0
 80151d2:	6078      	str	r0, [r7, #4]
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	4618      	mov	r0, r3
 80151d8:	f7ff ffe8 	bl	80151ac <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	4618      	mov	r0, r3
 80151e0:	3708      	adds	r7, #8
 80151e2:	46bd      	mov	sp, r7
 80151e4:	bd80      	pop	{r7, pc}

080151e6 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 80151e6:	b580      	push	{r7, lr}
 80151e8:	b082      	sub	sp, #8
 80151ea:	af00      	add	r7, sp, #0
 80151ec:	6078      	str	r0, [r7, #4]
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	4618      	mov	r0, r3
 80151f2:	f7ff ffeb 	bl	80151cc <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	4618      	mov	r0, r3
 80151fa:	3708      	adds	r7, #8
 80151fc:	46bd      	mov	sp, r7
 80151fe:	bd80      	pop	{r7, pc}

08015200 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 8015200:	b580      	push	{r7, lr}
 8015202:	ed2d 8b02 	vpush	{d8}
 8015206:	b088      	sub	sp, #32
 8015208:	af00      	add	r7, sp, #0
 801520a:	6078      	str	r0, [r7, #4]
 801520c:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 801520e:	6878      	ldr	r0, [r7, #4]
 8015210:	f7ff fe0f 	bl	8014e32 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE4rowsEv>
 8015214:	4603      	mov	r3, r0
 8015216:	2b00      	cmp	r3, #0
 8015218:	dd05      	ble.n	8015226 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 801521a:	6878      	ldr	r0, [r7, #4]
 801521c:	f7ff ff2e 	bl	801507c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE4colsEv>
 8015220:	4603      	mov	r3, r0
 8015222:	2b00      	cmp	r3, #0
 8015224:	dc06      	bgt.n	8015234 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 8015226:	4b16      	ldr	r3, [pc, #88]	; (8015280 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 8015228:	4a16      	ldr	r2, [pc, #88]	; (8015284 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 801522a:	f240 119b 	movw	r1, #411	; 0x19b
 801522e:	4816      	ldr	r0, [pc, #88]	; (8015288 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 8015230:	f008 fc14 	bl	801da5c <__assert_func>
 8015234:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8015236:	6878      	ldr	r0, [r7, #4]
 8015238:	f7ff ff30 	bl	801509c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 801523c:	4602      	mov	r2, r0
 801523e:	f107 030c 	add.w	r3, r7, #12
 8015242:	4611      	mov	r1, r2
 8015244:	4618      	mov	r0, r3
 8015246:	f000 f86b 	bl	8015320 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 801524a:	6878      	ldr	r0, [r7, #4]
 801524c:	f7ff ff26 	bl	801509c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 8015250:	4602      	mov	r2, r0
 8015252:	f107 030c 	add.w	r3, r7, #12
 8015256:	6839      	ldr	r1, [r7, #0]
 8015258:	4618      	mov	r0, r3
 801525a:	f000 f891 	bl	8015380 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 801525e:	eeb0 8a40 	vmov.f32	s16, s0
 8015262:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8015264:	f107 030c 	add.w	r3, r7, #12
 8015268:	4618      	mov	r0, r3
 801526a:	f7ff ffbc 	bl	80151e6 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 801526e:	eef0 7a48 	vmov.f32	s15, s16
}
 8015272:	eeb0 0a67 	vmov.f32	s0, s15
 8015276:	3720      	adds	r7, #32
 8015278:	46bd      	mov	sp, r7
 801527a:	ecbd 8b02 	vpop	{d8}
 801527e:	bd80      	pop	{r7, pc}
 8015280:	08024944 	.word	0x08024944
 8015284:	080297ec 	.word	0x080297ec
 8015288:	08024b50 	.word	0x08024b50

0801528c <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ENS_5DenseEEC1ERS3_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 801528c:	b580      	push	{r7, lr}
 801528e:	b084      	sub	sp, #16
 8015290:	af00      	add	r7, sp, #0
 8015292:	60f8      	str	r0, [r7, #12]
 8015294:	60b9      	str	r1, [r7, #8]
 8015296:	607a      	str	r2, [r7, #4]
 8015298:	68fb      	ldr	r3, [r7, #12]
 801529a:	687a      	ldr	r2, [r7, #4]
 801529c:	68b9      	ldr	r1, [r7, #8]
 801529e:	4618      	mov	r0, r3
 80152a0:	f000 f87f 	bl	80153a2 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EEC1ERS4_i>
 80152a4:	68fb      	ldr	r3, [r7, #12]
 80152a6:	4618      	mov	r0, r3
 80152a8:	3710      	adds	r7, #16
 80152aa:	46bd      	mov	sp, r7
 80152ac:	bd80      	pop	{r7, pc}

080152ae <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80152ae:	b480      	push	{r7}
 80152b0:	b083      	sub	sp, #12
 80152b2:	af00      	add	r7, sp, #0
 80152b4:	6078      	str	r0, [r7, #4]
    }
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	4618      	mov	r0, r3
 80152ba:	370c      	adds	r7, #12
 80152bc:	46bd      	mov	sp, r7
 80152be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152c2:	4770      	bx	lr

080152c4 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80152c4:	b480      	push	{r7}
 80152c6:	b083      	sub	sp, #12
 80152c8:	af00      	add	r7, sp, #0
 80152ca:	6078      	str	r0, [r7, #4]
    }
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	4618      	mov	r0, r3
 80152d0:	370c      	adds	r7, #12
 80152d2:	46bd      	mov	sp, r7
 80152d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152d8:	4770      	bx	lr

080152da <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 80152da:	b580      	push	{r7, lr}
 80152dc:	b082      	sub	sp, #8
 80152de:	af00      	add	r7, sp, #0
 80152e0:	6078      	str	r0, [r7, #4]
 80152e2:	f7f1 fa6e 	bl	80067c2 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 80152e6:	4603      	mov	r3, r0
 80152e8:	4618      	mov	r0, r3
 80152ea:	3708      	adds	r7, #8
 80152ec:	46bd      	mov	sp, r7
 80152ee:	bd80      	pop	{r7, pc}

080152f0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 80152f0:	b580      	push	{r7, lr}
 80152f2:	b082      	sub	sp, #8
 80152f4:	af00      	add	r7, sp, #0
 80152f6:	6078      	str	r0, [r7, #4]
 80152f8:	f7f1 fa6b 	bl	80067d2 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 80152fc:	4603      	mov	r3, r0
 80152fe:	4618      	mov	r0, r3
 8015300:	3708      	adds	r7, #8
 8015302:	46bd      	mov	sp, r7
 8015304:	bd80      	pop	{r7, pc}

08015306 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8015306:	b580      	push	{r7, lr}
 8015308:	b082      	sub	sp, #8
 801530a:	af00      	add	r7, sp, #0
 801530c:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	4618      	mov	r0, r3
 8015312:	f7ff fe57 	bl	8014fc4 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4colsEv>
 8015316:	4603      	mov	r3, r0
    }
 8015318:	4618      	mov	r0, r3
 801531a:	3708      	adds	r7, #8
 801531c:	46bd      	mov	sp, r7
 801531e:	bd80      	pop	{r7, pc}

08015320 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 8015320:	b580      	push	{r7, lr}
 8015322:	b082      	sub	sp, #8
 8015324:	af00      	add	r7, sp, #0
 8015326:	6078      	str	r0, [r7, #4]
 8015328:	6039      	str	r1, [r7, #0]
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	6839      	ldr	r1, [r7, #0]
 801532e:	4618      	mov	r0, r3
 8015330:	f000 f86d 	bl	801540e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1ERKSI_>
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	4618      	mov	r0, r3
 8015338:	3708      	adds	r7, #8
 801533a:	46bd      	mov	sp, r7
 801533c:	bd80      	pop	{r7, pc}

0801533e <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 801533e:	b480      	push	{r7}
 8015340:	b083      	sub	sp, #12
 8015342:	af00      	add	r7, sp, #0
 8015344:	6078      	str	r0, [r7, #4]
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	4618      	mov	r0, r3
 801534a:	370c      	adds	r7, #12
 801534c:	46bd      	mov	sp, r7
 801534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015352:	4770      	bx	lr

08015354 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>:
 8015354:	b480      	push	{r7}
 8015356:	b083      	sub	sp, #12
 8015358:	af00      	add	r7, sp, #0
 801535a:	6078      	str	r0, [r7, #4]
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	4618      	mov	r0, r3
 8015360:	370c      	adds	r7, #12
 8015362:	46bd      	mov	sp, r7
 8015364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015368:	4770      	bx	lr

0801536a <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>:
 801536a:	b480      	push	{r7}
 801536c:	b083      	sub	sp, #12
 801536e:	af00      	add	r7, sp, #0
 8015370:	6078      	str	r0, [r7, #4]
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	4618      	mov	r0, r3
 8015376:	370c      	adds	r7, #12
 8015378:	46bd      	mov	sp, r7
 801537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801537e:	4770      	bx	lr

08015380 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 8015380:	b580      	push	{r7, lr}
 8015382:	b084      	sub	sp, #16
 8015384:	af00      	add	r7, sp, #0
 8015386:	60f8      	str	r0, [r7, #12]
 8015388:	60b9      	str	r1, [r7, #8]
 801538a:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 801538c:	68b9      	ldr	r1, [r7, #8]
 801538e:	68f8      	ldr	r0, [r7, #12]
 8015390:	f000 f84c 	bl	801542c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSM_RKS3_>
 8015394:	eef0 7a40 	vmov.f32	s15, s0
  }
 8015398:	eeb0 0a67 	vmov.f32	s0, s15
 801539c:	3710      	adds	r7, #16
 801539e:	46bd      	mov	sp, r7
 80153a0:	bd80      	pop	{r7, pc}

080153a2 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 80153a2:	b5b0      	push	{r4, r5, r7, lr}
 80153a4:	b084      	sub	sp, #16
 80153a6:	af00      	add	r7, sp, #0
 80153a8:	60f8      	str	r0, [r7, #12]
 80153aa:	60b9      	str	r1, [r7, #8]
 80153ac:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 80153ae:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 80153b0:	68bb      	ldr	r3, [r7, #8]
 80153b2:	4618      	mov	r0, r3
 80153b4:	f7fd f866 	bl	8012484 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>
 80153b8:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 80153ba:	68b8      	ldr	r0, [r7, #8]
 80153bc:	f7fd fa90 	bl	80128e0 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 80153c0:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	fb02 f303 	mul.w	r3, r2, r3
 80153c8:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 80153ca:	441d      	add	r5, r3
 80153cc:	68bb      	ldr	r3, [r7, #8]
 80153ce:	4618      	mov	r0, r3
 80153d0:	f7ef fde4 	bl	8004f9c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80153d4:	4603      	mov	r3, r0
 80153d6:	2201      	movs	r2, #1
 80153d8:	4629      	mov	r1, r5
 80153da:	4620      	mov	r0, r4
 80153dc:	f000 f856 	bl	801548c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii>
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	68ba      	ldr	r2, [r7, #8]
 80153e4:	609a      	str	r2, [r3, #8]
 80153e6:	68fb      	ldr	r3, [r7, #12]
 80153e8:	330c      	adds	r3, #12
 80153ea:	6879      	ldr	r1, [r7, #4]
 80153ec:	4618      	mov	r0, r3
 80153ee:	f7f8 faab 	bl	800d948 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 80153f2:	68fb      	ldr	r3, [r7, #12]
 80153f4:	3310      	adds	r3, #16
 80153f6:	2100      	movs	r1, #0
 80153f8:	4618      	mov	r0, r3
 80153fa:	f7f8 fa31 	bl	800d860 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 80153fe:	68f8      	ldr	r0, [r7, #12]
 8015400:	f000 f882 	bl	8015508 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE4initEv>
    }
 8015404:	68fb      	ldr	r3, [r7, #12]
 8015406:	4618      	mov	r0, r3
 8015408:	3710      	adds	r7, #16
 801540a:	46bd      	mov	sp, r7
 801540c:	bdb0      	pop	{r4, r5, r7, pc}

0801540e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 801540e:	b580      	push	{r7, lr}
 8015410:	b082      	sub	sp, #8
 8015412:	af00      	add	r7, sp, #0
 8015414:	6078      	str	r0, [r7, #4]
 8015416:	6039      	str	r1, [r7, #0]
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	6839      	ldr	r1, [r7, #0]
 801541c:	4618      	mov	r0, r3
 801541e:	f000 f883 	bl	8015528 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	4618      	mov	r0, r3
 8015426:	3708      	adds	r7, #8
 8015428:	46bd      	mov	sp, r7
 801542a:	bd80      	pop	{r7, pc}

0801542c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 801542c:	b580      	push	{r7, lr}
 801542e:	b084      	sub	sp, #16
 8015430:	af00      	add	r7, sp, #0
 8015432:	6078      	str	r0, [r7, #4]
 8015434:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8015436:	6839      	ldr	r1, [r7, #0]
 8015438:	6878      	ldr	r0, [r7, #4]
 801543a:	f000 f887 	bl	801554c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 801543e:	eef0 7a40 	vmov.f32	s15, s0
 8015442:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8015446:	6839      	ldr	r1, [r7, #0]
 8015448:	6878      	ldr	r0, [r7, #4]
 801544a:	f000 f890 	bl	801556e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSM_RKS3_>
 801544e:	eef0 7a40 	vmov.f32	s15, s0
 8015452:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8015456:	f107 020c 	add.w	r2, r7, #12
 801545a:	f107 0308 	add.w	r3, r7, #8
 801545e:	4619      	mov	r1, r3
 8015460:	6838      	ldr	r0, [r7, #0]
 8015462:	f7f3 fd74 	bl	8008f4e <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8015466:	eef0 7a40 	vmov.f32	s15, s0
  }
 801546a:	eeb0 0a67 	vmov.f32	s0, s15
 801546e:	3710      	adds	r7, #16
 8015470:	46bd      	mov	sp, r7
 8015472:	bd80      	pop	{r7, pc}

08015474 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>:
 8015474:	b580      	push	{r7, lr}
 8015476:	b082      	sub	sp, #8
 8015478:	af00      	add	r7, sp, #0
 801547a:	6078      	str	r0, [r7, #4]
 801547c:	6878      	ldr	r0, [r7, #4]
 801547e:	f000 f89a 	bl	80155b6 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	4618      	mov	r0, r3
 8015486:	3708      	adds	r7, #8
 8015488:	46bd      	mov	sp, r7
 801548a:	bd80      	pop	{r7, pc}

0801548c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 801548c:	b580      	push	{r7, lr}
 801548e:	b084      	sub	sp, #16
 8015490:	af00      	add	r7, sp, #0
 8015492:	60f8      	str	r0, [r7, #12]
 8015494:	60b9      	str	r1, [r7, #8]
 8015496:	607a      	str	r2, [r7, #4]
 8015498:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 801549a:	68f8      	ldr	r0, [r7, #12]
 801549c:	f7ff ffea 	bl	8015474 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>
 80154a0:	68fb      	ldr	r3, [r7, #12]
 80154a2:	68ba      	ldr	r2, [r7, #8]
 80154a4:	601a      	str	r2, [r3, #0]
 80154a6:	68fb      	ldr	r3, [r7, #12]
 80154a8:	3304      	adds	r3, #4
 80154aa:	6879      	ldr	r1, [r7, #4]
 80154ac:	4618      	mov	r0, r3
 80154ae:	f7f1 f963 	bl	8006778 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 80154b2:	68fb      	ldr	r3, [r7, #12]
 80154b4:	3305      	adds	r3, #5
 80154b6:	6839      	ldr	r1, [r7, #0]
 80154b8:	4618      	mov	r0, r3
 80154ba:	f7f1 f943 	bl	8006744 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
      eigen_assert( (dataPtr == 0)
 80154be:	68bb      	ldr	r3, [r7, #8]
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d011      	beq.n	80154e8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x5c>
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	db08      	blt.n	80154dc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x50>
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	2b01      	cmp	r3, #1
 80154ce:	d105      	bne.n	80154dc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x50>
 80154d0:	683b      	ldr	r3, [r7, #0]
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	db02      	blt.n	80154dc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x50>
 80154d6:	683b      	ldr	r3, [r7, #0]
 80154d8:	2b03      	cmp	r3, #3
 80154da:	d005      	beq.n	80154e8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x5c>
 80154dc:	4b07      	ldr	r3, [pc, #28]	; (80154fc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x70>)
 80154de:	4a08      	ldr	r2, [pc, #32]	; (8015500 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x74>)
 80154e0:	21b0      	movs	r1, #176	; 0xb0
 80154e2:	4808      	ldr	r0, [pc, #32]	; (8015504 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x78>)
 80154e4:	f008 faba 	bl	801da5c <__assert_func>
      checkSanity<Derived>();
 80154e8:	2100      	movs	r1, #0
 80154ea:	68f8      	ldr	r0, [r7, #12]
 80154ec:	f000 f86e 	bl	80155cc <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 80154f0:	68fb      	ldr	r3, [r7, #12]
 80154f2:	4618      	mov	r0, r3
 80154f4:	3710      	adds	r7, #16
 80154f6:	46bd      	mov	sp, r7
 80154f8:	bd80      	pop	{r7, pc}
 80154fa:	bf00      	nop
 80154fc:	08025fe8 	.word	0x08025fe8
 8015500:	080299b0 	.word	0x080299b0
 8015504:	08026198 	.word	0x08026198

08015508 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE4initEv>:
    void init()
 8015508:	b580      	push	{r7, lr}
 801550a:	b082      	sub	sp, #8
 801550c:	af00      	add	r7, sp, #0
 801550e:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	689b      	ldr	r3, [r3, #8]
 8015514:	4618      	mov	r0, r3
 8015516:	f7fd f9e3 	bl	80128e0 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 801551a:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	615a      	str	r2, [r3, #20]
    }
 8015520:	bf00      	nop
 8015522:	3708      	adds	r7, #8
 8015524:	46bd      	mov	sp, r7
 8015526:	bd80      	pop	{r7, pc}

08015528 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8015528:	b580      	push	{r7, lr}
 801552a:	b082      	sub	sp, #8
 801552c:	af00      	add	r7, sp, #0
 801552e:	6078      	str	r0, [r7, #4]
 8015530:	6039      	str	r1, [r7, #0]
 8015532:	6878      	ldr	r0, [r7, #4]
 8015534:	f000 f855 	bl	80155e2 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	6839      	ldr	r1, [r7, #0]
 801553c:	4618      	mov	r0, r3
 801553e:	f000 f85b 	bl	80155f8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	4618      	mov	r0, r3
 8015546:	3708      	adds	r7, #8
 8015548:	46bd      	mov	sp, r7
 801554a:	bd80      	pop	{r7, pc}

0801554c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 801554c:	b580      	push	{r7, lr}
 801554e:	b082      	sub	sp, #8
 8015550:	af00      	add	r7, sp, #0
 8015552:	6078      	str	r0, [r7, #4]
 8015554:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8015556:	2200      	movs	r2, #0
 8015558:	2100      	movs	r1, #0
 801555a:	6878      	ldr	r0, [r7, #4]
 801555c:	f000 f874 	bl	8015648 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 8015560:	eef0 7a40 	vmov.f32	s15, s0
  }
 8015564:	eeb0 0a67 	vmov.f32	s0, s15
 8015568:	3708      	adds	r7, #8
 801556a:	46bd      	mov	sp, r7
 801556c:	bd80      	pop	{r7, pc}

0801556e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 801556e:	b580      	push	{r7, lr}
 8015570:	b084      	sub	sp, #16
 8015572:	af00      	add	r7, sp, #0
 8015574:	6078      	str	r0, [r7, #4]
 8015576:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8015578:	6839      	ldr	r1, [r7, #0]
 801557a:	6878      	ldr	r0, [r7, #4]
 801557c:	f000 f877 	bl	801566e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSM_RKS3_>
 8015580:	eef0 7a40 	vmov.f32	s15, s0
 8015584:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8015588:	6839      	ldr	r1, [r7, #0]
 801558a:	6878      	ldr	r0, [r7, #4]
 801558c:	f000 f880 	bl	8015690 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSM_RKS3_>
 8015590:	eef0 7a40 	vmov.f32	s15, s0
 8015594:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8015598:	f107 020c 	add.w	r2, r7, #12
 801559c:	f107 0308 	add.w	r3, r7, #8
 80155a0:	4619      	mov	r1, r3
 80155a2:	6838      	ldr	r0, [r7, #0]
 80155a4:	f7f3 fcd3 	bl	8008f4e <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 80155a8:	eef0 7a40 	vmov.f32	s15, s0
  }
 80155ac:	eeb0 0a67 	vmov.f32	s0, s15
 80155b0:	3710      	adds	r7, #16
 80155b2:	46bd      	mov	sp, r7
 80155b4:	bd80      	pop	{r7, pc}

080155b6 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80155b6:	b480      	push	{r7}
 80155b8:	b083      	sub	sp, #12
 80155ba:	af00      	add	r7, sp, #0
 80155bc:	6078      	str	r0, [r7, #4]
    }
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	4618      	mov	r0, r3
 80155c2:	370c      	adds	r7, #12
 80155c4:	46bd      	mov	sp, r7
 80155c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ca:	4770      	bx	lr

080155cc <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 80155cc:	b480      	push	{r7}
 80155ce:	b083      	sub	sp, #12
 80155d0:	af00      	add	r7, sp, #0
 80155d2:	6078      	str	r0, [r7, #4]
 80155d4:	6039      	str	r1, [r7, #0]
    {}
 80155d6:	bf00      	nop
 80155d8:	370c      	adds	r7, #12
 80155da:	46bd      	mov	sp, r7
 80155dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155e0:	4770      	bx	lr

080155e2 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80155e2:	b480      	push	{r7}
 80155e4:	b083      	sub	sp, #12
 80155e6:	af00      	add	r7, sp, #0
 80155e8:	6078      	str	r0, [r7, #4]
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	4618      	mov	r0, r3
 80155ee:	370c      	adds	r7, #12
 80155f0:	46bd      	mov	sp, r7
 80155f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155f6:	4770      	bx	lr

080155f8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 80155f8:	b590      	push	{r4, r7, lr}
 80155fa:	b083      	sub	sp, #12
 80155fc:	af00      	add	r7, sp, #0
 80155fe:	6078      	str	r0, [r7, #4]
 8015600:	6039      	str	r1, [r7, #0]
 8015602:	687c      	ldr	r4, [r7, #4]
 8015604:	6838      	ldr	r0, [r7, #0]
 8015606:	f000 f854 	bl	80156b2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7functorEv>
 801560a:	4603      	mov	r3, r0
 801560c:	4619      	mov	r1, r3
 801560e:	4620      	mov	r0, r4
 8015610:	f7ef fe38 	bl	8005284 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	1d1c      	adds	r4, r3, #4
 8015618:	6838      	ldr	r0, [r7, #0]
 801561a:	f000 f856 	bl	80156ca <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE3lhsEv>
 801561e:	4603      	mov	r3, r0
 8015620:	4619      	mov	r1, r3
 8015622:	4620      	mov	r0, r4
 8015624:	f000 f868 	bl	80156f8 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1ERSA_>
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	f103 040c 	add.w	r4, r3, #12
 801562e:	6838      	ldr	r0, [r7, #0]
 8015630:	f000 f856 	bl	80156e0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE3rhsEv>
 8015634:	4603      	mov	r3, r0
 8015636:	4619      	mov	r1, r3
 8015638:	4620      	mov	r0, r4
 801563a:	f7fa f995 	bl	800f968 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERS7_>
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	4618      	mov	r0, r3
 8015642:	370c      	adds	r7, #12
 8015644:	46bd      	mov	sp, r7
 8015646:	bd90      	pop	{r4, r7, pc}

08015648 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8015648:	b580      	push	{r7, lr}
 801564a:	b084      	sub	sp, #16
 801564c:	af00      	add	r7, sp, #0
 801564e:	60f8      	str	r0, [r7, #12]
 8015650:	60b9      	str	r1, [r7, #8]
 8015652:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 8015654:	68fb      	ldr	r3, [r7, #12]
 8015656:	68ba      	ldr	r2, [r7, #8]
 8015658:	6879      	ldr	r1, [r7, #4]
 801565a:	4618      	mov	r0, r3
 801565c:	f000 f85b 	bl	8015716 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 8015660:	eef0 7a40 	vmov.f32	s15, s0
 8015664:	eeb0 0a67 	vmov.f32	s0, s15
 8015668:	3710      	adds	r7, #16
 801566a:	46bd      	mov	sp, r7
 801566c:	bd80      	pop	{r7, pc}

0801566e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 801566e:	b580      	push	{r7, lr}
 8015670:	b082      	sub	sp, #8
 8015672:	af00      	add	r7, sp, #0
 8015674:	6078      	str	r0, [r7, #4]
 8015676:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8015678:	2201      	movs	r2, #1
 801567a:	2100      	movs	r1, #0
 801567c:	6878      	ldr	r0, [r7, #4]
 801567e:	f7ff ffe3 	bl	8015648 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 8015682:	eef0 7a40 	vmov.f32	s15, s0
  }
 8015686:	eeb0 0a67 	vmov.f32	s0, s15
 801568a:	3708      	adds	r7, #8
 801568c:	46bd      	mov	sp, r7
 801568e:	bd80      	pop	{r7, pc}

08015690 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8015690:	b580      	push	{r7, lr}
 8015692:	b082      	sub	sp, #8
 8015694:	af00      	add	r7, sp, #0
 8015696:	6078      	str	r0, [r7, #4]
 8015698:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 801569a:	2202      	movs	r2, #2
 801569c:	2100      	movs	r1, #0
 801569e:	6878      	ldr	r0, [r7, #4]
 80156a0:	f7ff ffd2 	bl	8015648 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 80156a4:	eef0 7a40 	vmov.f32	s15, s0
  }
 80156a8:	eeb0 0a67 	vmov.f32	s0, s15
 80156ac:	3708      	adds	r7, #8
 80156ae:	46bd      	mov	sp, r7
 80156b0:	bd80      	pop	{r7, pc}

080156b2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 80156b2:	b480      	push	{r7}
 80156b4:	b083      	sub	sp, #12
 80156b6:	af00      	add	r7, sp, #0
 80156b8:	6078      	str	r0, [r7, #4]
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	3330      	adds	r3, #48	; 0x30
 80156be:	4618      	mov	r0, r3
 80156c0:	370c      	adds	r7, #12
 80156c2:	46bd      	mov	sp, r7
 80156c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156c8:	4770      	bx	lr

080156ca <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 80156ca:	b480      	push	{r7}
 80156cc:	b083      	sub	sp, #12
 80156ce:	af00      	add	r7, sp, #0
 80156d0:	6078      	str	r0, [r7, #4]
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	4618      	mov	r0, r3
 80156d6:	370c      	adds	r7, #12
 80156d8:	46bd      	mov	sp, r7
 80156da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156de:	4770      	bx	lr

080156e0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 80156e0:	b480      	push	{r7}
 80156e2:	b083      	sub	sp, #12
 80156e4:	af00      	add	r7, sp, #0
 80156e6:	6078      	str	r0, [r7, #4]
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	3318      	adds	r3, #24
 80156ec:	4618      	mov	r0, r3
 80156ee:	370c      	adds	r7, #12
 80156f0:	46bd      	mov	sp, r7
 80156f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156f6:	4770      	bx	lr

080156f8 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 80156f8:	b580      	push	{r7, lr}
 80156fa:	b082      	sub	sp, #8
 80156fc:	af00      	add	r7, sp, #0
 80156fe:	6078      	str	r0, [r7, #4]
 8015700:	6039      	str	r1, [r7, #0]
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	6839      	ldr	r1, [r7, #0]
 8015706:	4618      	mov	r0, r3
 8015708:	f000 f835 	bl	8015776 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1ERKS9_>
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	4618      	mov	r0, r3
 8015710:	3708      	adds	r7, #8
 8015712:	46bd      	mov	sp, r7
 8015714:	bd80      	pop	{r7, pc}

08015716 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8015716:	b590      	push	{r4, r7, lr}
 8015718:	b087      	sub	sp, #28
 801571a:	af00      	add	r7, sp, #0
 801571c:	60f8      	str	r0, [r7, #12]
 801571e:	60b9      	str	r1, [r7, #8]
 8015720:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8015722:	68fb      	ldr	r3, [r7, #12]
 8015724:	4618      	mov	r0, r3
 8015726:	f000 f835 	bl	8015794 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 801572a:	4604      	mov	r4, r0
 801572c:	68fb      	ldr	r3, [r7, #12]
 801572e:	3304      	adds	r3, #4
 8015730:	687a      	ldr	r2, [r7, #4]
 8015732:	68b9      	ldr	r1, [r7, #8]
 8015734:	4618      	mov	r0, r3
 8015736:	f000 f838 	bl	80157aa <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfE5coeffEii>
 801573a:	eef0 7a40 	vmov.f32	s15, s0
 801573e:	edc7 7a04 	vstr	s15, [r7, #16]
 8015742:	68fb      	ldr	r3, [r7, #12]
 8015744:	330c      	adds	r3, #12
 8015746:	687a      	ldr	r2, [r7, #4]
 8015748:	68b9      	ldr	r1, [r7, #8]
 801574a:	4618      	mov	r0, r3
 801574c:	f7fa fd4e 	bl	80101ec <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>
 8015750:	eef0 7a40 	vmov.f32	s15, s0
 8015754:	edc7 7a05 	vstr	s15, [r7, #20]
 8015758:	f107 0214 	add.w	r2, r7, #20
 801575c:	f107 0310 	add.w	r3, r7, #16
 8015760:	4619      	mov	r1, r3
 8015762:	4620      	mov	r0, r4
 8015764:	f7f9 fc34 	bl	800efd0 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 8015768:	eef0 7a40 	vmov.f32	s15, s0
  }
 801576c:	eeb0 0a67 	vmov.f32	s0, s15
 8015770:	371c      	adds	r7, #28
 8015772:	46bd      	mov	sp, r7
 8015774:	bd90      	pop	{r4, r7, pc}

08015776 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1ERKS9_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 8015776:	b580      	push	{r7, lr}
 8015778:	b082      	sub	sp, #8
 801577a:	af00      	add	r7, sp, #0
 801577c:	6078      	str	r0, [r7, #4]
 801577e:	6039      	str	r1, [r7, #0]
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	6839      	ldr	r1, [r7, #0]
 8015784:	4618      	mov	r0, r3
 8015786:	f000 f823 	bl	80157d0 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfEC1ERKS9_>
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	4618      	mov	r0, r3
 801578e:	3708      	adds	r7, #8
 8015790:	46bd      	mov	sp, r7
 8015792:	bd80      	pop	{r7, pc}

08015794 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8015794:	b480      	push	{r7}
 8015796:	b083      	sub	sp, #12
 8015798:	af00      	add	r7, sp, #0
 801579a:	6078      	str	r0, [r7, #4]
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	4618      	mov	r0, r3
 80157a0:	370c      	adds	r7, #12
 80157a2:	46bd      	mov	sp, r7
 80157a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157a8:	4770      	bx	lr

080157aa <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 80157aa:	b580      	push	{r7, lr}
 80157ac:	b084      	sub	sp, #16
 80157ae:	af00      	add	r7, sp, #0
 80157b0:	60f8      	str	r0, [r7, #12]
 80157b2:	60b9      	str	r1, [r7, #8]
 80157b4:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 80157b6:	68fb      	ldr	r3, [r7, #12]
 80157b8:	68ba      	ldr	r2, [r7, #8]
 80157ba:	6879      	ldr	r1, [r7, #4]
 80157bc:	4618      	mov	r0, r3
 80157be:	f000 f81d 	bl	80157fc <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E5coeffEii>
 80157c2:	eef0 7a40 	vmov.f32	s15, s0
  }
 80157c6:	eeb0 0a67 	vmov.f32	s0, s15
 80157ca:	3710      	adds	r7, #16
 80157cc:	46bd      	mov	sp, r7
 80157ce:	bd80      	pop	{r7, pc}

080157d0 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfEC1ERKS9_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 80157d0:	b590      	push	{r4, r7, lr}
 80157d2:	b083      	sub	sp, #12
 80157d4:	af00      	add	r7, sp, #0
 80157d6:	6078      	str	r0, [r7, #4]
 80157d8:	6039      	str	r1, [r7, #0]
 80157da:	6878      	ldr	r0, [r7, #4]
 80157dc:	f000 f83a 	bl	8015854 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>
 80157e0:	687c      	ldr	r4, [r7, #4]
 80157e2:	6838      	ldr	r0, [r7, #0]
 80157e4:	f000 f82b 	bl	801583e <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE16nestedExpressionEv>
 80157e8:	4603      	mov	r3, r0
 80157ea:	4619      	mov	r1, r3
 80157ec:	4620      	mov	r0, r4
 80157ee:	f000 f83c 	bl	801586a <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERS7_>
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	4618      	mov	r0, r3
 80157f6:	370c      	adds	r7, #12
 80157f8:	46bd      	mov	sp, r7
 80157fa:	bd90      	pop	{r4, r7, pc}

080157fc <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 80157fc:	b5b0      	push	{r4, r5, r7, lr}
 80157fe:	b084      	sub	sp, #16
 8015800:	af00      	add	r7, sp, #0
 8015802:	60f8      	str	r0, [r7, #12]
 8015804:	60b9      	str	r1, [r7, #8]
 8015806:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 8015808:	68fb      	ldr	r3, [r7, #12]
 801580a:	681c      	ldr	r4, [r3, #0]
 801580c:	68f8      	ldr	r0, [r7, #12]
 801580e:	f000 f83b 	bl	8015888 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E9colStrideEv>
 8015812:	4602      	mov	r2, r0
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	fb03 f502 	mul.w	r5, r3, r2
 801581a:	68f8      	ldr	r0, [r7, #12]
 801581c:	f000 f83f 	bl	801589e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E9rowStrideEv>
 8015820:	4602      	mov	r2, r0
 8015822:	68bb      	ldr	r3, [r7, #8]
 8015824:	fb02 f303 	mul.w	r3, r2, r3
 8015828:	442b      	add	r3, r5
 801582a:	009b      	lsls	r3, r3, #2
 801582c:	4423      	add	r3, r4
 801582e:	681b      	ldr	r3, [r3, #0]
 8015830:	ee07 3a90 	vmov	s15, r3
  }
 8015834:	eeb0 0a67 	vmov.f32	s0, s15
 8015838:	3710      	adds	r7, #16
 801583a:	46bd      	mov	sp, r7
 801583c:	bdb0      	pop	{r4, r5, r7, pc}

0801583e <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 801583e:	b480      	push	{r7}
 8015840:	b083      	sub	sp, #12
 8015842:	af00      	add	r7, sp, #0
 8015844:	6078      	str	r0, [r7, #4]
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	4618      	mov	r0, r3
 801584a:	370c      	adds	r7, #12
 801584c:	46bd      	mov	sp, r7
 801584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015852:	4770      	bx	lr

08015854 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8015854:	b480      	push	{r7}
 8015856:	b083      	sub	sp, #12
 8015858:	af00      	add	r7, sp, #0
 801585a:	6078      	str	r0, [r7, #4]
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	4618      	mov	r0, r3
 8015860:	370c      	adds	r7, #12
 8015862:	46bd      	mov	sp, r7
 8015864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015868:	4770      	bx	lr

0801586a <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 801586a:	b580      	push	{r7, lr}
 801586c:	b082      	sub	sp, #8
 801586e:	af00      	add	r7, sp, #0
 8015870:	6078      	str	r0, [r7, #4]
 8015872:	6039      	str	r1, [r7, #0]
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	6839      	ldr	r1, [r7, #0]
 8015878:	4618      	mov	r0, r3
 801587a:	f000 f81b 	bl	80158b4 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERKS6_>
 801587e:	687b      	ldr	r3, [r7, #4]
 8015880:	4618      	mov	r0, r3
 8015882:	3708      	adds	r7, #8
 8015884:	46bd      	mov	sp, r7
 8015886:	bd80      	pop	{r7, pc}

08015888 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 8015888:	b580      	push	{r7, lr}
 801588a:	b082      	sub	sp, #8
 801588c:	af00      	add	r7, sp, #0
 801588e:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 8015890:	f7f0 ff9f 	bl	80067d2 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8015894:	4603      	mov	r3, r0
  }
 8015896:	4618      	mov	r0, r3
 8015898:	3708      	adds	r7, #8
 801589a:	46bd      	mov	sp, r7
 801589c:	bd80      	pop	{r7, pc}

0801589e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 801589e:	b580      	push	{r7, lr}
 80158a0:	b082      	sub	sp, #8
 80158a2:	af00      	add	r7, sp, #0
 80158a4:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 80158a6:	f7f0 ff8c 	bl	80067c2 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 80158aa:	4603      	mov	r3, r0
  }
 80158ac:	4618      	mov	r0, r3
 80158ae:	3708      	adds	r7, #8
 80158b0:	46bd      	mov	sp, r7
 80158b2:	bd80      	pop	{r7, pc}

080158b4 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 80158b4:	b580      	push	{r7, lr}
 80158b6:	b082      	sub	sp, #8
 80158b8:	af00      	add	r7, sp, #0
 80158ba:	6078      	str	r0, [r7, #4]
 80158bc:	6039      	str	r1, [r7, #0]
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	6839      	ldr	r1, [r7, #0]
 80158c2:	4618      	mov	r0, r3
 80158c4:	f000 f805 	bl	80158d2 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EEC1ERKNS_5BlockIS4_Li1ELi3ELb1EEE>
  }
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	4618      	mov	r0, r3
 80158cc:	3708      	adds	r7, #8
 80158ce:	46bd      	mov	sp, r7
 80158d0:	bd80      	pop	{r7, pc}

080158d2 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EEC1ERKNS_5BlockIS4_Li1ELi3ELb1EEE>:
  explicit block_evaluator(const XprType& block)
 80158d2:	b580      	push	{r7, lr}
 80158d4:	b082      	sub	sp, #8
 80158d6:	af00      	add	r7, sp, #0
 80158d8:	6078      	str	r0, [r7, #4]
 80158da:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	6839      	ldr	r1, [r7, #0]
 80158e0:	4618      	mov	r0, r3
 80158e2:	f000 f80a 	bl	80158fa <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_EC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 80158e6:	683b      	ldr	r3, [r7, #0]
 80158e8:	4618      	mov	r0, r3
 80158ea:	f000 f830 	bl	801594e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4dataEv>
 80158ee:	bf00      	nop
  }
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	4618      	mov	r0, r3
 80158f4:	3708      	adds	r7, #8
 80158f6:	46bd      	mov	sp, r7
 80158f8:	bd80      	pop	{r7, pc}

080158fa <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_EC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 80158fa:	b590      	push	{r4, r7, lr}
 80158fc:	b083      	sub	sp, #12
 80158fe:	af00      	add	r7, sp, #0
 8015900:	6078      	str	r0, [r7, #4]
 8015902:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8015904:	6878      	ldr	r0, [r7, #4]
 8015906:	f000 f84a 	bl	801599e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 801590a:	683b      	ldr	r3, [r7, #0]
 801590c:	4618      	mov	r0, r3
 801590e:	f000 f81e 	bl	801594e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4dataEv>
 8015912:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	601a      	str	r2, [r3, #0]
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	1d1c      	adds	r4, r3, #4
 801591c:	683b      	ldr	r3, [r7, #0]
 801591e:	4618      	mov	r0, r3
 8015920:	f000 f821 	bl	8015966 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE11innerStrideEv>
 8015924:	4603      	mov	r3, r0
 8015926:	4619      	mov	r1, r3
 8015928:	4620      	mov	r0, r4
 801592a:	f7f0 ff25 	bl	8006778 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	1d5c      	adds	r4, r3, #5
 8015932:	683b      	ldr	r3, [r7, #0]
 8015934:	4618      	mov	r0, r3
 8015936:	f000 f824 	bl	8015982 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE11outerStrideEv>
 801593a:	4603      	mov	r3, r0
 801593c:	4619      	mov	r1, r3
 801593e:	4620      	mov	r0, r4
 8015940:	f7f0 ff00 	bl	8006744 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	4618      	mov	r0, r3
 8015948:	370c      	adds	r7, #12
 801594a:	46bd      	mov	sp, r7
 801594c:	bd90      	pop	{r4, r7, pc}

0801594e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 801594e:	b480      	push	{r7}
 8015950:	b083      	sub	sp, #12
 8015952:	af00      	add	r7, sp, #0
 8015954:	6078      	str	r0, [r7, #4]
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	681b      	ldr	r3, [r3, #0]
 801595a:	4618      	mov	r0, r3
 801595c:	370c      	adds	r7, #12
 801595e:	46bd      	mov	sp, r7
 8015960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015964:	4770      	bx	lr

08015966 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8015966:	b580      	push	{r7, lr}
 8015968:	b082      	sub	sp, #8
 801596a:	af00      	add	r7, sp, #0
 801596c:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	689b      	ldr	r3, [r3, #8]
 8015972:	4618      	mov	r0, r3
 8015974:	f7fd fcf8 	bl	8013368 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>
 8015978:	4603      	mov	r3, r0
    }
 801597a:	4618      	mov	r0, r3
 801597c:	3708      	adds	r7, #8
 801597e:	46bd      	mov	sp, r7
 8015980:	bd80      	pop	{r7, pc}

08015982 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8015982:	b580      	push	{r7, lr}
 8015984:	b082      	sub	sp, #8
 8015986:	af00      	add	r7, sp, #0
 8015988:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	689b      	ldr	r3, [r3, #8]
 801598e:	4618      	mov	r0, r3
 8015990:	f7fc ffa6 	bl	80128e0 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 8015994:	4603      	mov	r3, r0
    }
 8015996:	4618      	mov	r0, r3
 8015998:	3708      	adds	r7, #8
 801599a:	46bd      	mov	sp, r7
 801599c:	bd80      	pop	{r7, pc}

0801599e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 801599e:	b480      	push	{r7}
 80159a0:	b083      	sub	sp, #12
 80159a2:	af00      	add	r7, sp, #0
 80159a4:	6078      	str	r0, [r7, #4]
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	4618      	mov	r0, r3
 80159aa:	370c      	adds	r7, #12
 80159ac:	46bd      	mov	sp, r7
 80159ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159b2:	4770      	bx	lr

080159b4 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80159b4:	b590      	push	{r4, r7, lr}
 80159b6:	b083      	sub	sp, #12
 80159b8:	af00      	add	r7, sp, #0
 80159ba:	6078      	str	r0, [r7, #4]
 80159bc:	6039      	str	r1, [r7, #0]
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	2b01      	cmp	r3, #1
 80159c2:	d141      	bne.n	8015a48 <_Z41__static_initialization_and_destruction_0ii+0x94>
 80159c4:	683b      	ldr	r3, [r7, #0]
 80159c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80159ca:	4293      	cmp	r3, r2
 80159cc:	d13c      	bne.n	8015a48 <_Z41__static_initialization_and_destruction_0ii+0x94>
static const symbolic::SymbolExpr<internal::symbolic_last_tag> last; // PLEASE use Eigen::last   instead of Eigen::placeholders::last
 80159ce:	4820      	ldr	r0, [pc, #128]	; (8015a50 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80159d0:	f7ee fa1b 	bl	8003e0a <_ZN5Eigen8symbolic10SymbolExprINS_8internal17symbolic_last_tagEEC1Ev>

#ifndef EIGEN_PARSED_BY_DOXYGEN

#if EIGEN_HAS_CXX14_VARIABLE_TEMPLATES
template<int N>
static const internal::FixedInt<N> fix{};
 80159d4:	481f      	ldr	r0, [pc, #124]	; (8015a54 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80159d6:	f7ee fa23 	bl	8003e20 <_ZN5Eigen8internal8FixedIntILi1EEC1Ev>
static const symbolic::AddExpr<symbolic::SymbolExpr<internal::symbolic_last_tag>,symbolic::ValueExpr<Eigen::internal::FixedInt<1> > > lastp1(last+fix<1>());
 80159da:	481e      	ldr	r0, [pc, #120]	; (8015a54 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80159dc:	f7ee fa2b 	bl	8003e36 <_ZNK5Eigen8internal8FixedIntILi1EEclEv>
 80159e0:	4621      	mov	r1, r4
 80159e2:	481b      	ldr	r0, [pc, #108]	; (8015a50 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80159e4:	f7ee fa32 	bl	8003e4c <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEEplILi1EEENS0_7AddExprIS5_NS0_9ValueExprINS3_8FixedIntIXT_EEEEEEESB_>

/** \var all
  * \ingroup Core_Module
  * Can be used as a parameter to DenseBase::operator()(const RowIndices&, const ColIndices&) to index all rows or columns
  */
static const Eigen::internal::all_t all; // PLEASE use Eigen::all instead of Eigen::placeholders::all
 80159e8:	481b      	ldr	r0, [pc, #108]	; (8015a58 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80159ea:	f7eb fab3 	bl	8000f54 <_ZN5Eigen8internal5all_tC1Ev>
Matrix <float,3,3> A ;
 80159ee:	481b      	ldr	r0, [pc, #108]	; (8015a5c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80159f0:	f7ee fa51 	bl	8003e96 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Matrix <float,3,3> P ;
 80159f4:	481a      	ldr	r0, [pc, #104]	; (8015a60 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80159f6:	f7ee fa4e 	bl	8003e96 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Matrix <float,3,3> O ;
 80159fa:	481a      	ldr	r0, [pc, #104]	; (8015a64 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80159fc:	f7ee fa4b 	bl	8003e96 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Matrix <float,3,3> I ;
 8015a00:	4819      	ldr	r0, [pc, #100]	; (8015a68 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8015a02:	f7ee fa48 	bl	8003e96 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Matrix <float,1,1> S ;
 8015a06:	4819      	ldr	r0, [pc, #100]	; (8015a6c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8015a08:	f7ee fa54 	bl	8003eb4 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>
Matrix <float,1,1> R ;
 8015a0c:	4818      	ldr	r0, [pc, #96]	; (8015a70 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8015a0e:	f7ee fa51 	bl	8003eb4 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>
Matrix <float,1,1> D ;
 8015a12:	4818      	ldr	r0, [pc, #96]	; (8015a74 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8015a14:	f7ee fa4e 	bl	8003eb4 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>
Matrix <float,1,1> Z ;
 8015a18:	4817      	ldr	r0, [pc, #92]	; (8015a78 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8015a1a:	f7ee fa4b 	bl	8003eb4 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>
Matrix <float,3,1> K ;
 8015a1e:	4817      	ldr	r0, [pc, #92]	; (8015a7c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8015a20:	f7ee fa57 	bl	8003ed2 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
Matrix <float,1,3> C ;
 8015a24:	4816      	ldr	r0, [pc, #88]	; (8015a80 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8015a26:	f7ee fa63 	bl	8003ef0 <_ZN5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EEC1Ev>
Matrix <float,3,1> G ;
 8015a2a:	4816      	ldr	r0, [pc, #88]	; (8015a84 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8015a2c:	f7ee fa51 	bl	8003ed2 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
Matrix <float,3,3> Q ;
 8015a30:	4815      	ldr	r0, [pc, #84]	; (8015a88 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8015a32:	f7ee fa30 	bl	8003e96 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Vector3f X;
 8015a36:	4815      	ldr	r0, [pc, #84]	; (8015a8c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8015a38:	f7ee fa4b 	bl	8003ed2 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
Vector3f X1;
 8015a3c:	4814      	ldr	r0, [pc, #80]	; (8015a90 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8015a3e:	f7ee fa48 	bl	8003ed2 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
Vector3f B;
 8015a42:	4814      	ldr	r0, [pc, #80]	; (8015a94 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8015a44:	f7ee fa45 	bl	8003ed2 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
}
 8015a48:	bf00      	nop
 8015a4a:	370c      	adds	r7, #12
 8015a4c:	46bd      	mov	sp, r7
 8015a4e:	bd90      	pop	{r4, r7, pc}
 8015a50:	20000214 	.word	0x20000214
 8015a54:	20000788 	.word	0x20000788
 8015a58:	20000218 	.word	0x20000218
 8015a5c:	20000560 	.word	0x20000560
 8015a60:	20000584 	.word	0x20000584
 8015a64:	200005a8 	.word	0x200005a8
 8015a68:	200005cc 	.word	0x200005cc
 8015a6c:	200005f0 	.word	0x200005f0
 8015a70:	200005f4 	.word	0x200005f4
 8015a74:	200005f8 	.word	0x200005f8
 8015a78:	200005fc 	.word	0x200005fc
 8015a7c:	20000600 	.word	0x20000600
 8015a80:	2000060c 	.word	0x2000060c
 8015a84:	20000618 	.word	0x20000618
 8015a88:	20000624 	.word	0x20000624
 8015a8c:	20000648 	.word	0x20000648
 8015a90:	20000654 	.word	0x20000654
 8015a94:	20000660 	.word	0x20000660

08015a98 <_GLOBAL__sub_I_hi2c1>:
 8015a98:	b580      	push	{r7, lr}
 8015a9a:	af00      	add	r7, sp, #0
 8015a9c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015aa0:	2001      	movs	r0, #1
 8015aa2:	f7ff ff87 	bl	80159b4 <_Z41__static_initialization_and_destruction_0ii>
 8015aa6:	bd80      	pop	{r7, pc}

08015aa8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8015aa8:	b580      	push	{r7, lr}
 8015aaa:	b082      	sub	sp, #8
 8015aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8015aae:	2300      	movs	r3, #0
 8015ab0:	607b      	str	r3, [r7, #4]
 8015ab2:	4b10      	ldr	r3, [pc, #64]	; (8015af4 <HAL_MspInit+0x4c>)
 8015ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015ab6:	4a0f      	ldr	r2, [pc, #60]	; (8015af4 <HAL_MspInit+0x4c>)
 8015ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015abc:	6453      	str	r3, [r2, #68]	; 0x44
 8015abe:	4b0d      	ldr	r3, [pc, #52]	; (8015af4 <HAL_MspInit+0x4c>)
 8015ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015ac6:	607b      	str	r3, [r7, #4]
 8015ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8015aca:	2300      	movs	r3, #0
 8015acc:	603b      	str	r3, [r7, #0]
 8015ace:	4b09      	ldr	r3, [pc, #36]	; (8015af4 <HAL_MspInit+0x4c>)
 8015ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ad2:	4a08      	ldr	r2, [pc, #32]	; (8015af4 <HAL_MspInit+0x4c>)
 8015ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8015ada:	4b06      	ldr	r3, [pc, #24]	; (8015af4 <HAL_MspInit+0x4c>)
 8015adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015ae2:	603b      	str	r3, [r7, #0]
 8015ae4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8015ae6:	2007      	movs	r0, #7
 8015ae8:	f000 fd14 	bl	8016514 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8015aec:	bf00      	nop
 8015aee:	3708      	adds	r7, #8
 8015af0:	46bd      	mov	sp, r7
 8015af2:	bd80      	pop	{r7, pc}
 8015af4:	40023800 	.word	0x40023800

08015af8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8015af8:	b580      	push	{r7, lr}
 8015afa:	b08c      	sub	sp, #48	; 0x30
 8015afc:	af00      	add	r7, sp, #0
 8015afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015b00:	f107 031c 	add.w	r3, r7, #28
 8015b04:	2200      	movs	r2, #0
 8015b06:	601a      	str	r2, [r3, #0]
 8015b08:	605a      	str	r2, [r3, #4]
 8015b0a:	609a      	str	r2, [r3, #8]
 8015b0c:	60da      	str	r2, [r3, #12]
 8015b0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	681b      	ldr	r3, [r3, #0]
 8015b14:	4a52      	ldr	r2, [pc, #328]	; (8015c60 <HAL_I2C_MspInit+0x168>)
 8015b16:	4293      	cmp	r3, r2
 8015b18:	d13d      	bne.n	8015b96 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8015b1a:	2300      	movs	r3, #0
 8015b1c:	61bb      	str	r3, [r7, #24]
 8015b1e:	4b51      	ldr	r3, [pc, #324]	; (8015c64 <HAL_I2C_MspInit+0x16c>)
 8015b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b22:	4a50      	ldr	r2, [pc, #320]	; (8015c64 <HAL_I2C_MspInit+0x16c>)
 8015b24:	f043 0302 	orr.w	r3, r3, #2
 8015b28:	6313      	str	r3, [r2, #48]	; 0x30
 8015b2a:	4b4e      	ldr	r3, [pc, #312]	; (8015c64 <HAL_I2C_MspInit+0x16c>)
 8015b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b2e:	f003 0302 	and.w	r3, r3, #2
 8015b32:	61bb      	str	r3, [r7, #24]
 8015b34:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8015b36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8015b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8015b3c:	2312      	movs	r3, #18
 8015b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015b40:	2300      	movs	r3, #0
 8015b42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015b44:	2303      	movs	r3, #3
 8015b46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8015b48:	2304      	movs	r3, #4
 8015b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8015b4c:	f107 031c 	add.w	r3, r7, #28
 8015b50:	4619      	mov	r1, r3
 8015b52:	4845      	ldr	r0, [pc, #276]	; (8015c68 <HAL_I2C_MspInit+0x170>)
 8015b54:	f001 f930 	bl	8016db8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8015b58:	2300      	movs	r3, #0
 8015b5a:	617b      	str	r3, [r7, #20]
 8015b5c:	4b41      	ldr	r3, [pc, #260]	; (8015c64 <HAL_I2C_MspInit+0x16c>)
 8015b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015b60:	4a40      	ldr	r2, [pc, #256]	; (8015c64 <HAL_I2C_MspInit+0x16c>)
 8015b62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8015b66:	6413      	str	r3, [r2, #64]	; 0x40
 8015b68:	4b3e      	ldr	r3, [pc, #248]	; (8015c64 <HAL_I2C_MspInit+0x16c>)
 8015b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015b6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8015b70:	617b      	str	r3, [r7, #20]
 8015b72:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8015b74:	2200      	movs	r2, #0
 8015b76:	2100      	movs	r1, #0
 8015b78:	201f      	movs	r0, #31
 8015b7a:	f000 fcd6 	bl	801652a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8015b7e:	201f      	movs	r0, #31
 8015b80:	f000 fcef 	bl	8016562 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8015b84:	2200      	movs	r2, #0
 8015b86:	2100      	movs	r1, #0
 8015b88:	2020      	movs	r0, #32
 8015b8a:	f000 fcce 	bl	801652a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8015b8e:	2020      	movs	r0, #32
 8015b90:	f000 fce7 	bl	8016562 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8015b94:	e060      	b.n	8015c58 <HAL_I2C_MspInit+0x160>
  else if(hi2c->Instance==I2C3)
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	681b      	ldr	r3, [r3, #0]
 8015b9a:	4a34      	ldr	r2, [pc, #208]	; (8015c6c <HAL_I2C_MspInit+0x174>)
 8015b9c:	4293      	cmp	r3, r2
 8015b9e:	d15b      	bne.n	8015c58 <HAL_I2C_MspInit+0x160>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8015ba0:	2300      	movs	r3, #0
 8015ba2:	613b      	str	r3, [r7, #16]
 8015ba4:	4b2f      	ldr	r3, [pc, #188]	; (8015c64 <HAL_I2C_MspInit+0x16c>)
 8015ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ba8:	4a2e      	ldr	r2, [pc, #184]	; (8015c64 <HAL_I2C_MspInit+0x16c>)
 8015baa:	f043 0304 	orr.w	r3, r3, #4
 8015bae:	6313      	str	r3, [r2, #48]	; 0x30
 8015bb0:	4b2c      	ldr	r3, [pc, #176]	; (8015c64 <HAL_I2C_MspInit+0x16c>)
 8015bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015bb4:	f003 0304 	and.w	r3, r3, #4
 8015bb8:	613b      	str	r3, [r7, #16]
 8015bba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015bbc:	2300      	movs	r3, #0
 8015bbe:	60fb      	str	r3, [r7, #12]
 8015bc0:	4b28      	ldr	r3, [pc, #160]	; (8015c64 <HAL_I2C_MspInit+0x16c>)
 8015bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015bc4:	4a27      	ldr	r2, [pc, #156]	; (8015c64 <HAL_I2C_MspInit+0x16c>)
 8015bc6:	f043 0301 	orr.w	r3, r3, #1
 8015bca:	6313      	str	r3, [r2, #48]	; 0x30
 8015bcc:	4b25      	ldr	r3, [pc, #148]	; (8015c64 <HAL_I2C_MspInit+0x16c>)
 8015bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015bd0:	f003 0301 	and.w	r3, r3, #1
 8015bd4:	60fb      	str	r3, [r7, #12]
 8015bd6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8015bd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8015bde:	2312      	movs	r3, #18
 8015be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015be2:	2300      	movs	r3, #0
 8015be4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015be6:	2303      	movs	r3, #3
 8015be8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8015bea:	2304      	movs	r3, #4
 8015bec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8015bee:	f107 031c 	add.w	r3, r7, #28
 8015bf2:	4619      	mov	r1, r3
 8015bf4:	481e      	ldr	r0, [pc, #120]	; (8015c70 <HAL_I2C_MspInit+0x178>)
 8015bf6:	f001 f8df 	bl	8016db8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8015bfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8015c00:	2312      	movs	r3, #18
 8015c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015c04:	2300      	movs	r3, #0
 8015c06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015c08:	2303      	movs	r3, #3
 8015c0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8015c0c:	2304      	movs	r3, #4
 8015c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015c10:	f107 031c 	add.w	r3, r7, #28
 8015c14:	4619      	mov	r1, r3
 8015c16:	4817      	ldr	r0, [pc, #92]	; (8015c74 <HAL_I2C_MspInit+0x17c>)
 8015c18:	f001 f8ce 	bl	8016db8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8015c1c:	2300      	movs	r3, #0
 8015c1e:	60bb      	str	r3, [r7, #8]
 8015c20:	4b10      	ldr	r3, [pc, #64]	; (8015c64 <HAL_I2C_MspInit+0x16c>)
 8015c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015c24:	4a0f      	ldr	r2, [pc, #60]	; (8015c64 <HAL_I2C_MspInit+0x16c>)
 8015c26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8015c2a:	6413      	str	r3, [r2, #64]	; 0x40
 8015c2c:	4b0d      	ldr	r3, [pc, #52]	; (8015c64 <HAL_I2C_MspInit+0x16c>)
 8015c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015c30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015c34:	60bb      	str	r3, [r7, #8]
 8015c36:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8015c38:	2200      	movs	r2, #0
 8015c3a:	2100      	movs	r1, #0
 8015c3c:	2048      	movs	r0, #72	; 0x48
 8015c3e:	f000 fc74 	bl	801652a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8015c42:	2048      	movs	r0, #72	; 0x48
 8015c44:	f000 fc8d 	bl	8016562 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8015c48:	2200      	movs	r2, #0
 8015c4a:	2100      	movs	r1, #0
 8015c4c:	2049      	movs	r0, #73	; 0x49
 8015c4e:	f000 fc6c 	bl	801652a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8015c52:	2049      	movs	r0, #73	; 0x49
 8015c54:	f000 fc85 	bl	8016562 <HAL_NVIC_EnableIRQ>
}
 8015c58:	bf00      	nop
 8015c5a:	3730      	adds	r7, #48	; 0x30
 8015c5c:	46bd      	mov	sp, r7
 8015c5e:	bd80      	pop	{r7, pc}
 8015c60:	40005400 	.word	0x40005400
 8015c64:	40023800 	.word	0x40023800
 8015c68:	40020400 	.word	0x40020400
 8015c6c:	40005c00 	.word	0x40005c00
 8015c70:	40020800 	.word	0x40020800
 8015c74:	40020000 	.word	0x40020000

08015c78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8015c78:	b580      	push	{r7, lr}
 8015c7a:	b086      	sub	sp, #24
 8015c7c:	af00      	add	r7, sp, #0
 8015c7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	681b      	ldr	r3, [r3, #0]
 8015c84:	4a26      	ldr	r2, [pc, #152]	; (8015d20 <HAL_TIM_Base_MspInit+0xa8>)
 8015c86:	4293      	cmp	r3, r2
 8015c88:	d10e      	bne.n	8015ca8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8015c8a:	2300      	movs	r3, #0
 8015c8c:	617b      	str	r3, [r7, #20]
 8015c8e:	4b25      	ldr	r3, [pc, #148]	; (8015d24 <HAL_TIM_Base_MspInit+0xac>)
 8015c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015c92:	4a24      	ldr	r2, [pc, #144]	; (8015d24 <HAL_TIM_Base_MspInit+0xac>)
 8015c94:	f043 0304 	orr.w	r3, r3, #4
 8015c98:	6413      	str	r3, [r2, #64]	; 0x40
 8015c9a:	4b22      	ldr	r3, [pc, #136]	; (8015d24 <HAL_TIM_Base_MspInit+0xac>)
 8015c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015c9e:	f003 0304 	and.w	r3, r3, #4
 8015ca2:	617b      	str	r3, [r7, #20]
 8015ca4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8015ca6:	e036      	b.n	8015d16 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM10)
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	681b      	ldr	r3, [r3, #0]
 8015cac:	4a1e      	ldr	r2, [pc, #120]	; (8015d28 <HAL_TIM_Base_MspInit+0xb0>)
 8015cae:	4293      	cmp	r3, r2
 8015cb0:	d116      	bne.n	8015ce0 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8015cb2:	2300      	movs	r3, #0
 8015cb4:	613b      	str	r3, [r7, #16]
 8015cb6:	4b1b      	ldr	r3, [pc, #108]	; (8015d24 <HAL_TIM_Base_MspInit+0xac>)
 8015cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015cba:	4a1a      	ldr	r2, [pc, #104]	; (8015d24 <HAL_TIM_Base_MspInit+0xac>)
 8015cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8015cc2:	4b18      	ldr	r3, [pc, #96]	; (8015d24 <HAL_TIM_Base_MspInit+0xac>)
 8015cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015cca:	613b      	str	r3, [r7, #16]
 8015ccc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8015cce:	2200      	movs	r2, #0
 8015cd0:	2100      	movs	r1, #0
 8015cd2:	2019      	movs	r0, #25
 8015cd4:	f000 fc29 	bl	801652a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8015cd8:	2019      	movs	r0, #25
 8015cda:	f000 fc42 	bl	8016562 <HAL_NVIC_EnableIRQ>
}
 8015cde:	e01a      	b.n	8015d16 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM11)
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	681b      	ldr	r3, [r3, #0]
 8015ce4:	4a11      	ldr	r2, [pc, #68]	; (8015d2c <HAL_TIM_Base_MspInit+0xb4>)
 8015ce6:	4293      	cmp	r3, r2
 8015ce8:	d115      	bne.n	8015d16 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8015cea:	2300      	movs	r3, #0
 8015cec:	60fb      	str	r3, [r7, #12]
 8015cee:	4b0d      	ldr	r3, [pc, #52]	; (8015d24 <HAL_TIM_Base_MspInit+0xac>)
 8015cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015cf2:	4a0c      	ldr	r2, [pc, #48]	; (8015d24 <HAL_TIM_Base_MspInit+0xac>)
 8015cf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8015cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8015cfa:	4b0a      	ldr	r3, [pc, #40]	; (8015d24 <HAL_TIM_Base_MspInit+0xac>)
 8015cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015cfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8015d02:	60fb      	str	r3, [r7, #12]
 8015d04:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8015d06:	2200      	movs	r2, #0
 8015d08:	2100      	movs	r1, #0
 8015d0a:	201a      	movs	r0, #26
 8015d0c:	f000 fc0d 	bl	801652a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8015d10:	201a      	movs	r0, #26
 8015d12:	f000 fc26 	bl	8016562 <HAL_NVIC_EnableIRQ>
}
 8015d16:	bf00      	nop
 8015d18:	3718      	adds	r7, #24
 8015d1a:	46bd      	mov	sp, r7
 8015d1c:	bd80      	pop	{r7, pc}
 8015d1e:	bf00      	nop
 8015d20:	40000800 	.word	0x40000800
 8015d24:	40023800 	.word	0x40023800
 8015d28:	40014400 	.word	0x40014400
 8015d2c:	40014800 	.word	0x40014800

08015d30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8015d30:	b580      	push	{r7, lr}
 8015d32:	b088      	sub	sp, #32
 8015d34:	af00      	add	r7, sp, #0
 8015d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015d38:	f107 030c 	add.w	r3, r7, #12
 8015d3c:	2200      	movs	r2, #0
 8015d3e:	601a      	str	r2, [r3, #0]
 8015d40:	605a      	str	r2, [r3, #4]
 8015d42:	609a      	str	r2, [r3, #8]
 8015d44:	60da      	str	r2, [r3, #12]
 8015d46:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	681b      	ldr	r3, [r3, #0]
 8015d4c:	4a12      	ldr	r2, [pc, #72]	; (8015d98 <HAL_TIM_MspPostInit+0x68>)
 8015d4e:	4293      	cmp	r3, r2
 8015d50:	d11d      	bne.n	8015d8e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8015d52:	2300      	movs	r3, #0
 8015d54:	60bb      	str	r3, [r7, #8]
 8015d56:	4b11      	ldr	r3, [pc, #68]	; (8015d9c <HAL_TIM_MspPostInit+0x6c>)
 8015d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d5a:	4a10      	ldr	r2, [pc, #64]	; (8015d9c <HAL_TIM_MspPostInit+0x6c>)
 8015d5c:	f043 0302 	orr.w	r3, r3, #2
 8015d60:	6313      	str	r3, [r2, #48]	; 0x30
 8015d62:	4b0e      	ldr	r3, [pc, #56]	; (8015d9c <HAL_TIM_MspPostInit+0x6c>)
 8015d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d66:	f003 0302 	and.w	r3, r3, #2
 8015d6a:	60bb      	str	r3, [r7, #8]
 8015d6c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = TIM4_CH1_PWMMOT_Pin;
 8015d6e:	2340      	movs	r3, #64	; 0x40
 8015d70:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015d72:	2302      	movs	r3, #2
 8015d74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015d76:	2300      	movs	r3, #0
 8015d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015d7a:	2300      	movs	r3, #0
 8015d7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8015d7e:	2302      	movs	r3, #2
 8015d80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM4_CH1_PWMMOT_GPIO_Port, &GPIO_InitStruct);
 8015d82:	f107 030c 	add.w	r3, r7, #12
 8015d86:	4619      	mov	r1, r3
 8015d88:	4805      	ldr	r0, [pc, #20]	; (8015da0 <HAL_TIM_MspPostInit+0x70>)
 8015d8a:	f001 f815 	bl	8016db8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8015d8e:	bf00      	nop
 8015d90:	3720      	adds	r7, #32
 8015d92:	46bd      	mov	sp, r7
 8015d94:	bd80      	pop	{r7, pc}
 8015d96:	bf00      	nop
 8015d98:	40000800 	.word	0x40000800
 8015d9c:	40023800 	.word	0x40023800
 8015da0:	40020400 	.word	0x40020400

08015da4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8015da4:	b580      	push	{r7, lr}
 8015da6:	b08a      	sub	sp, #40	; 0x28
 8015da8:	af00      	add	r7, sp, #0
 8015daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015dac:	f107 0314 	add.w	r3, r7, #20
 8015db0:	2200      	movs	r2, #0
 8015db2:	601a      	str	r2, [r3, #0]
 8015db4:	605a      	str	r2, [r3, #4]
 8015db6:	609a      	str	r2, [r3, #8]
 8015db8:	60da      	str	r2, [r3, #12]
 8015dba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	681b      	ldr	r3, [r3, #0]
 8015dc0:	4a4b      	ldr	r2, [pc, #300]	; (8015ef0 <HAL_UART_MspInit+0x14c>)
 8015dc2:	4293      	cmp	r3, r2
 8015dc4:	f040 8090 	bne.w	8015ee8 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8015dc8:	2300      	movs	r3, #0
 8015dca:	613b      	str	r3, [r7, #16]
 8015dcc:	4b49      	ldr	r3, [pc, #292]	; (8015ef4 <HAL_UART_MspInit+0x150>)
 8015dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015dd0:	4a48      	ldr	r2, [pc, #288]	; (8015ef4 <HAL_UART_MspInit+0x150>)
 8015dd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015dd6:	6413      	str	r3, [r2, #64]	; 0x40
 8015dd8:	4b46      	ldr	r3, [pc, #280]	; (8015ef4 <HAL_UART_MspInit+0x150>)
 8015dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015de0:	613b      	str	r3, [r7, #16]
 8015de2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015de4:	2300      	movs	r3, #0
 8015de6:	60fb      	str	r3, [r7, #12]
 8015de8:	4b42      	ldr	r3, [pc, #264]	; (8015ef4 <HAL_UART_MspInit+0x150>)
 8015dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015dec:	4a41      	ldr	r2, [pc, #260]	; (8015ef4 <HAL_UART_MspInit+0x150>)
 8015dee:	f043 0301 	orr.w	r3, r3, #1
 8015df2:	6313      	str	r3, [r2, #48]	; 0x30
 8015df4:	4b3f      	ldr	r3, [pc, #252]	; (8015ef4 <HAL_UART_MspInit+0x150>)
 8015df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015df8:	f003 0301 	and.w	r3, r3, #1
 8015dfc:	60fb      	str	r3, [r7, #12]
 8015dfe:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8015e00:	230c      	movs	r3, #12
 8015e02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015e04:	2302      	movs	r3, #2
 8015e06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015e08:	2300      	movs	r3, #0
 8015e0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015e0c:	2303      	movs	r3, #3
 8015e0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8015e10:	2307      	movs	r3, #7
 8015e12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015e14:	f107 0314 	add.w	r3, r7, #20
 8015e18:	4619      	mov	r1, r3
 8015e1a:	4837      	ldr	r0, [pc, #220]	; (8015ef8 <HAL_UART_MspInit+0x154>)
 8015e1c:	f000 ffcc 	bl	8016db8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream7;
 8015e20:	4b36      	ldr	r3, [pc, #216]	; (8015efc <HAL_UART_MspInit+0x158>)
 8015e22:	4a37      	ldr	r2, [pc, #220]	; (8015f00 <HAL_UART_MspInit+0x15c>)
 8015e24:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_6;
 8015e26:	4b35      	ldr	r3, [pc, #212]	; (8015efc <HAL_UART_MspInit+0x158>)
 8015e28:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8015e2c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8015e2e:	4b33      	ldr	r3, [pc, #204]	; (8015efc <HAL_UART_MspInit+0x158>)
 8015e30:	2200      	movs	r2, #0
 8015e32:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8015e34:	4b31      	ldr	r3, [pc, #196]	; (8015efc <HAL_UART_MspInit+0x158>)
 8015e36:	2200      	movs	r2, #0
 8015e38:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8015e3a:	4b30      	ldr	r3, [pc, #192]	; (8015efc <HAL_UART_MspInit+0x158>)
 8015e3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015e40:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8015e42:	4b2e      	ldr	r3, [pc, #184]	; (8015efc <HAL_UART_MspInit+0x158>)
 8015e44:	2200      	movs	r2, #0
 8015e46:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8015e48:	4b2c      	ldr	r3, [pc, #176]	; (8015efc <HAL_UART_MspInit+0x158>)
 8015e4a:	2200      	movs	r2, #0
 8015e4c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8015e4e:	4b2b      	ldr	r3, [pc, #172]	; (8015efc <HAL_UART_MspInit+0x158>)
 8015e50:	2200      	movs	r2, #0
 8015e52:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8015e54:	4b29      	ldr	r3, [pc, #164]	; (8015efc <HAL_UART_MspInit+0x158>)
 8015e56:	2200      	movs	r2, #0
 8015e58:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8015e5a:	4b28      	ldr	r3, [pc, #160]	; (8015efc <HAL_UART_MspInit+0x158>)
 8015e5c:	2200      	movs	r2, #0
 8015e5e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8015e60:	4826      	ldr	r0, [pc, #152]	; (8015efc <HAL_UART_MspInit+0x158>)
 8015e62:	f000 fb99 	bl	8016598 <HAL_DMA_Init>
 8015e66:	4603      	mov	r3, r0
 8015e68:	2b00      	cmp	r3, #0
 8015e6a:	d001      	beq.n	8015e70 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8015e6c:	f7ed ffc8 	bl	8003e00 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	4a22      	ldr	r2, [pc, #136]	; (8015efc <HAL_UART_MspInit+0x158>)
 8015e74:	639a      	str	r2, [r3, #56]	; 0x38
 8015e76:	4a21      	ldr	r2, [pc, #132]	; (8015efc <HAL_UART_MspInit+0x158>)
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8015e7c:	4b21      	ldr	r3, [pc, #132]	; (8015f04 <HAL_UART_MspInit+0x160>)
 8015e7e:	4a22      	ldr	r2, [pc, #136]	; (8015f08 <HAL_UART_MspInit+0x164>)
 8015e80:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8015e82:	4b20      	ldr	r3, [pc, #128]	; (8015f04 <HAL_UART_MspInit+0x160>)
 8015e84:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8015e88:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8015e8a:	4b1e      	ldr	r3, [pc, #120]	; (8015f04 <HAL_UART_MspInit+0x160>)
 8015e8c:	2240      	movs	r2, #64	; 0x40
 8015e8e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8015e90:	4b1c      	ldr	r3, [pc, #112]	; (8015f04 <HAL_UART_MspInit+0x160>)
 8015e92:	2200      	movs	r2, #0
 8015e94:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8015e96:	4b1b      	ldr	r3, [pc, #108]	; (8015f04 <HAL_UART_MspInit+0x160>)
 8015e98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015e9c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8015e9e:	4b19      	ldr	r3, [pc, #100]	; (8015f04 <HAL_UART_MspInit+0x160>)
 8015ea0:	2200      	movs	r2, #0
 8015ea2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8015ea4:	4b17      	ldr	r3, [pc, #92]	; (8015f04 <HAL_UART_MspInit+0x160>)
 8015ea6:	2200      	movs	r2, #0
 8015ea8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8015eaa:	4b16      	ldr	r3, [pc, #88]	; (8015f04 <HAL_UART_MspInit+0x160>)
 8015eac:	2200      	movs	r2, #0
 8015eae:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8015eb0:	4b14      	ldr	r3, [pc, #80]	; (8015f04 <HAL_UART_MspInit+0x160>)
 8015eb2:	2200      	movs	r2, #0
 8015eb4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8015eb6:	4b13      	ldr	r3, [pc, #76]	; (8015f04 <HAL_UART_MspInit+0x160>)
 8015eb8:	2200      	movs	r2, #0
 8015eba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8015ebc:	4811      	ldr	r0, [pc, #68]	; (8015f04 <HAL_UART_MspInit+0x160>)
 8015ebe:	f000 fb6b 	bl	8016598 <HAL_DMA_Init>
 8015ec2:	4603      	mov	r3, r0
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d001      	beq.n	8015ecc <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8015ec8:	f7ed ff9a 	bl	8003e00 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	4a0d      	ldr	r2, [pc, #52]	; (8015f04 <HAL_UART_MspInit+0x160>)
 8015ed0:	635a      	str	r2, [r3, #52]	; 0x34
 8015ed2:	4a0c      	ldr	r2, [pc, #48]	; (8015f04 <HAL_UART_MspInit+0x160>)
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8015ed8:	2200      	movs	r2, #0
 8015eda:	2100      	movs	r1, #0
 8015edc:	2026      	movs	r0, #38	; 0x26
 8015ede:	f000 fb24 	bl	801652a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8015ee2:	2026      	movs	r0, #38	; 0x26
 8015ee4:	f000 fb3d 	bl	8016562 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8015ee8:	bf00      	nop
 8015eea:	3728      	adds	r7, #40	; 0x28
 8015eec:	46bd      	mov	sp, r7
 8015eee:	bd80      	pop	{r7, pc}
 8015ef0:	40004400 	.word	0x40004400
 8015ef4:	40023800 	.word	0x40023800
 8015ef8:	40020000 	.word	0x40020000
 8015efc:	200003e0 	.word	0x200003e0
 8015f00:	400260b8 	.word	0x400260b8
 8015f04:	20000440 	.word	0x20000440
 8015f08:	400260a0 	.word	0x400260a0

08015f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8015f0c:	b480      	push	{r7}
 8015f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8015f10:	e7fe      	b.n	8015f10 <NMI_Handler+0x4>

08015f12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8015f12:	b480      	push	{r7}
 8015f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8015f16:	e7fe      	b.n	8015f16 <HardFault_Handler+0x4>

08015f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8015f18:	b480      	push	{r7}
 8015f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8015f1c:	e7fe      	b.n	8015f1c <MemManage_Handler+0x4>

08015f1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8015f1e:	b480      	push	{r7}
 8015f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8015f22:	e7fe      	b.n	8015f22 <BusFault_Handler+0x4>

08015f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8015f24:	b480      	push	{r7}
 8015f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8015f28:	e7fe      	b.n	8015f28 <UsageFault_Handler+0x4>

08015f2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8015f2a:	b480      	push	{r7}
 8015f2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8015f2e:	bf00      	nop
 8015f30:	46bd      	mov	sp, r7
 8015f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f36:	4770      	bx	lr

08015f38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8015f38:	b480      	push	{r7}
 8015f3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8015f3c:	bf00      	nop
 8015f3e:	46bd      	mov	sp, r7
 8015f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f44:	4770      	bx	lr

08015f46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8015f46:	b480      	push	{r7}
 8015f48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8015f4a:	bf00      	nop
 8015f4c:	46bd      	mov	sp, r7
 8015f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f52:	4770      	bx	lr

08015f54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8015f54:	b580      	push	{r7, lr}
 8015f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8015f58:	f000 f9c8 	bl	80162ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8015f5c:	bf00      	nop
 8015f5e:	bd80      	pop	{r7, pc}

08015f60 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8015f60:	b580      	push	{r7, lr}
 8015f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI2_SetZero_Pin);
 8015f64:	2004      	movs	r0, #4
 8015f66:	f001 f8dd 	bl	8017124 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8015f6a:	bf00      	nop
 8015f6c:	bd80      	pop	{r7, pc}
	...

08015f70 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8015f70:	b580      	push	{r7, lr}
 8015f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8015f74:	4802      	ldr	r0, [pc, #8]	; (8015f80 <DMA1_Stream6_IRQHandler+0x10>)
 8015f76:	f000 fca7 	bl	80168c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8015f7a:	bf00      	nop
 8015f7c:	bd80      	pop	{r7, pc}
 8015f7e:	bf00      	nop
 8015f80:	20000440 	.word	0x20000440

08015f84 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8015f84:	b580      	push	{r7, lr}
 8015f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8015f88:	4802      	ldr	r0, [pc, #8]	; (8015f94 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8015f8a:	f004 fdef 	bl	801ab6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8015f8e:	bf00      	nop
 8015f90:	bd80      	pop	{r7, pc}
 8015f92:	bf00      	nop
 8015f94:	2000030c 	.word	0x2000030c

08015f98 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8015f98:	b580      	push	{r7, lr}
 8015f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8015f9c:	4802      	ldr	r0, [pc, #8]	; (8015fa8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8015f9e:	f004 fde5 	bl	801ab6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8015fa2:	bf00      	nop
 8015fa4:	bd80      	pop	{r7, pc}
 8015fa6:	bf00      	nop
 8015fa8:	20000354 	.word	0x20000354

08015fac <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8015fac:	b580      	push	{r7, lr}
 8015fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8015fb0:	4802      	ldr	r0, [pc, #8]	; (8015fbc <I2C1_EV_IRQHandler+0x10>)
 8015fb2:	f001 fef7 	bl	8017da4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8015fb6:	bf00      	nop
 8015fb8:	bd80      	pop	{r7, pc}
 8015fba:	bf00      	nop
 8015fbc:	2000021c 	.word	0x2000021c

08015fc0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8015fc0:	b580      	push	{r7, lr}
 8015fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8015fc4:	4802      	ldr	r0, [pc, #8]	; (8015fd0 <I2C1_ER_IRQHandler+0x10>)
 8015fc6:	f002 f85e 	bl	8018086 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8015fca:	bf00      	nop
 8015fcc:	bd80      	pop	{r7, pc}
 8015fce:	bf00      	nop
 8015fd0:	2000021c 	.word	0x2000021c

08015fd4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8015fd4:	b580      	push	{r7, lr}
 8015fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8015fd8:	4802      	ldr	r0, [pc, #8]	; (8015fe4 <USART2_IRQHandler+0x10>)
 8015fda:	f005 fd13 	bl	801ba04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8015fde:	bf00      	nop
 8015fe0:	bd80      	pop	{r7, pc}
 8015fe2:	bf00      	nop
 8015fe4:	2000039c 	.word	0x2000039c

08015fe8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8015fe8:	b580      	push	{r7, lr}
 8015fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI10_Stop_Pin);
 8015fec:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8015ff0:	f001 f898 	bl	8017124 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI11_EMER_Pin);
 8015ff4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8015ff8:	f001 f894 	bl	8017124 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8015ffc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8016000:	f001 f890 	bl	8017124 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8016004:	bf00      	nop
 8016006:	bd80      	pop	{r7, pc}

08016008 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8016008:	b580      	push	{r7, lr}
 801600a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 801600c:	4802      	ldr	r0, [pc, #8]	; (8016018 <DMA1_Stream7_IRQHandler+0x10>)
 801600e:	f000 fc5b 	bl	80168c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8016012:	bf00      	nop
 8016014:	bd80      	pop	{r7, pc}
 8016016:	bf00      	nop
 8016018:	200003e0 	.word	0x200003e0

0801601c <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 801601c:	b580      	push	{r7, lr}
 801601e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8016020:	4802      	ldr	r0, [pc, #8]	; (801602c <I2C3_EV_IRQHandler+0x10>)
 8016022:	f001 febf 	bl	8017da4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8016026:	bf00      	nop
 8016028:	bd80      	pop	{r7, pc}
 801602a:	bf00      	nop
 801602c:	20000270 	.word	0x20000270

08016030 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8016030:	b580      	push	{r7, lr}
 8016032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8016034:	4802      	ldr	r0, [pc, #8]	; (8016040 <I2C3_ER_IRQHandler+0x10>)
 8016036:	f002 f826 	bl	8018086 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 801603a:	bf00      	nop
 801603c:	bd80      	pop	{r7, pc}
 801603e:	bf00      	nop
 8016040:	20000270 	.word	0x20000270

08016044 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8016044:	b480      	push	{r7}
 8016046:	af00      	add	r7, sp, #0
	return 1;
 8016048:	2301      	movs	r3, #1
}
 801604a:	4618      	mov	r0, r3
 801604c:	46bd      	mov	sp, r7
 801604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016052:	4770      	bx	lr

08016054 <_kill>:

int _kill(int pid, int sig)
{
 8016054:	b580      	push	{r7, lr}
 8016056:	b082      	sub	sp, #8
 8016058:	af00      	add	r7, sp, #0
 801605a:	6078      	str	r0, [r7, #4]
 801605c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 801605e:	f007 fd1b 	bl	801da98 <__errno>
 8016062:	4603      	mov	r3, r0
 8016064:	2216      	movs	r2, #22
 8016066:	601a      	str	r2, [r3, #0]
	return -1;
 8016068:	f04f 33ff 	mov.w	r3, #4294967295
}
 801606c:	4618      	mov	r0, r3
 801606e:	3708      	adds	r7, #8
 8016070:	46bd      	mov	sp, r7
 8016072:	bd80      	pop	{r7, pc}

08016074 <_exit>:

void _exit (int status)
{
 8016074:	b580      	push	{r7, lr}
 8016076:	b082      	sub	sp, #8
 8016078:	af00      	add	r7, sp, #0
 801607a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 801607c:	f04f 31ff 	mov.w	r1, #4294967295
 8016080:	6878      	ldr	r0, [r7, #4]
 8016082:	f7ff ffe7 	bl	8016054 <_kill>
	while (1) {}		/* Make sure we hang here */
 8016086:	e7fe      	b.n	8016086 <_exit+0x12>

08016088 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8016088:	b580      	push	{r7, lr}
 801608a:	b086      	sub	sp, #24
 801608c:	af00      	add	r7, sp, #0
 801608e:	60f8      	str	r0, [r7, #12]
 8016090:	60b9      	str	r1, [r7, #8]
 8016092:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8016094:	2300      	movs	r3, #0
 8016096:	617b      	str	r3, [r7, #20]
 8016098:	e00a      	b.n	80160b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 801609a:	f3af 8000 	nop.w
 801609e:	4601      	mov	r1, r0
 80160a0:	68bb      	ldr	r3, [r7, #8]
 80160a2:	1c5a      	adds	r2, r3, #1
 80160a4:	60ba      	str	r2, [r7, #8]
 80160a6:	b2ca      	uxtb	r2, r1
 80160a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80160aa:	697b      	ldr	r3, [r7, #20]
 80160ac:	3301      	adds	r3, #1
 80160ae:	617b      	str	r3, [r7, #20]
 80160b0:	697a      	ldr	r2, [r7, #20]
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	429a      	cmp	r2, r3
 80160b6:	dbf0      	blt.n	801609a <_read+0x12>
	}

return len;
 80160b8:	687b      	ldr	r3, [r7, #4]
}
 80160ba:	4618      	mov	r0, r3
 80160bc:	3718      	adds	r7, #24
 80160be:	46bd      	mov	sp, r7
 80160c0:	bd80      	pop	{r7, pc}

080160c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80160c2:	b580      	push	{r7, lr}
 80160c4:	b086      	sub	sp, #24
 80160c6:	af00      	add	r7, sp, #0
 80160c8:	60f8      	str	r0, [r7, #12]
 80160ca:	60b9      	str	r1, [r7, #8]
 80160cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80160ce:	2300      	movs	r3, #0
 80160d0:	617b      	str	r3, [r7, #20]
 80160d2:	e009      	b.n	80160e8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80160d4:	68bb      	ldr	r3, [r7, #8]
 80160d6:	1c5a      	adds	r2, r3, #1
 80160d8:	60ba      	str	r2, [r7, #8]
 80160da:	781b      	ldrb	r3, [r3, #0]
 80160dc:	4618      	mov	r0, r3
 80160de:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80160e2:	697b      	ldr	r3, [r7, #20]
 80160e4:	3301      	adds	r3, #1
 80160e6:	617b      	str	r3, [r7, #20]
 80160e8:	697a      	ldr	r2, [r7, #20]
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	429a      	cmp	r2, r3
 80160ee:	dbf1      	blt.n	80160d4 <_write+0x12>
	}
	return len;
 80160f0:	687b      	ldr	r3, [r7, #4]
}
 80160f2:	4618      	mov	r0, r3
 80160f4:	3718      	adds	r7, #24
 80160f6:	46bd      	mov	sp, r7
 80160f8:	bd80      	pop	{r7, pc}

080160fa <_close>:

int _close(int file)
{
 80160fa:	b480      	push	{r7}
 80160fc:	b083      	sub	sp, #12
 80160fe:	af00      	add	r7, sp, #0
 8016100:	6078      	str	r0, [r7, #4]
	return -1;
 8016102:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016106:	4618      	mov	r0, r3
 8016108:	370c      	adds	r7, #12
 801610a:	46bd      	mov	sp, r7
 801610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016110:	4770      	bx	lr

08016112 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8016112:	b480      	push	{r7}
 8016114:	b083      	sub	sp, #12
 8016116:	af00      	add	r7, sp, #0
 8016118:	6078      	str	r0, [r7, #4]
 801611a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 801611c:	683b      	ldr	r3, [r7, #0]
 801611e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8016122:	605a      	str	r2, [r3, #4]
	return 0;
 8016124:	2300      	movs	r3, #0
}
 8016126:	4618      	mov	r0, r3
 8016128:	370c      	adds	r7, #12
 801612a:	46bd      	mov	sp, r7
 801612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016130:	4770      	bx	lr

08016132 <_isatty>:

int _isatty(int file)
{
 8016132:	b480      	push	{r7}
 8016134:	b083      	sub	sp, #12
 8016136:	af00      	add	r7, sp, #0
 8016138:	6078      	str	r0, [r7, #4]
	return 1;
 801613a:	2301      	movs	r3, #1
}
 801613c:	4618      	mov	r0, r3
 801613e:	370c      	adds	r7, #12
 8016140:	46bd      	mov	sp, r7
 8016142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016146:	4770      	bx	lr

08016148 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8016148:	b480      	push	{r7}
 801614a:	b085      	sub	sp, #20
 801614c:	af00      	add	r7, sp, #0
 801614e:	60f8      	str	r0, [r7, #12]
 8016150:	60b9      	str	r1, [r7, #8]
 8016152:	607a      	str	r2, [r7, #4]
	return 0;
 8016154:	2300      	movs	r3, #0
}
 8016156:	4618      	mov	r0, r3
 8016158:	3714      	adds	r7, #20
 801615a:	46bd      	mov	sp, r7
 801615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016160:	4770      	bx	lr
	...

08016164 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8016164:	b580      	push	{r7, lr}
 8016166:	b086      	sub	sp, #24
 8016168:	af00      	add	r7, sp, #0
 801616a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 801616c:	4a14      	ldr	r2, [pc, #80]	; (80161c0 <_sbrk+0x5c>)
 801616e:	4b15      	ldr	r3, [pc, #84]	; (80161c4 <_sbrk+0x60>)
 8016170:	1ad3      	subs	r3, r2, r3
 8016172:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8016174:	697b      	ldr	r3, [r7, #20]
 8016176:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8016178:	4b13      	ldr	r3, [pc, #76]	; (80161c8 <_sbrk+0x64>)
 801617a:	681b      	ldr	r3, [r3, #0]
 801617c:	2b00      	cmp	r3, #0
 801617e:	d102      	bne.n	8016186 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8016180:	4b11      	ldr	r3, [pc, #68]	; (80161c8 <_sbrk+0x64>)
 8016182:	4a12      	ldr	r2, [pc, #72]	; (80161cc <_sbrk+0x68>)
 8016184:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8016186:	4b10      	ldr	r3, [pc, #64]	; (80161c8 <_sbrk+0x64>)
 8016188:	681a      	ldr	r2, [r3, #0]
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	4413      	add	r3, r2
 801618e:	693a      	ldr	r2, [r7, #16]
 8016190:	429a      	cmp	r2, r3
 8016192:	d207      	bcs.n	80161a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8016194:	f007 fc80 	bl	801da98 <__errno>
 8016198:	4603      	mov	r3, r0
 801619a:	220c      	movs	r2, #12
 801619c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 801619e:	f04f 33ff 	mov.w	r3, #4294967295
 80161a2:	e009      	b.n	80161b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80161a4:	4b08      	ldr	r3, [pc, #32]	; (80161c8 <_sbrk+0x64>)
 80161a6:	681b      	ldr	r3, [r3, #0]
 80161a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80161aa:	4b07      	ldr	r3, [pc, #28]	; (80161c8 <_sbrk+0x64>)
 80161ac:	681a      	ldr	r2, [r3, #0]
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	4413      	add	r3, r2
 80161b2:	4a05      	ldr	r2, [pc, #20]	; (80161c8 <_sbrk+0x64>)
 80161b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80161b6:	68fb      	ldr	r3, [r7, #12]
}
 80161b8:	4618      	mov	r0, r3
 80161ba:	3718      	adds	r7, #24
 80161bc:	46bd      	mov	sp, r7
 80161be:	bd80      	pop	{r7, pc}
 80161c0:	20020000 	.word	0x20020000
 80161c4:	00000400 	.word	0x00000400
 80161c8:	2000078c 	.word	0x2000078c
 80161cc:	200007a8 	.word	0x200007a8

080161d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80161d0:	b480      	push	{r7}
 80161d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80161d4:	4b06      	ldr	r3, [pc, #24]	; (80161f0 <SystemInit+0x20>)
 80161d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80161da:	4a05      	ldr	r2, [pc, #20]	; (80161f0 <SystemInit+0x20>)
 80161dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80161e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80161e4:	bf00      	nop
 80161e6:	46bd      	mov	sp, r7
 80161e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ec:	4770      	bx	lr
 80161ee:	bf00      	nop
 80161f0:	e000ed00 	.word	0xe000ed00

080161f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80161f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 801622c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80161f8:	480d      	ldr	r0, [pc, #52]	; (8016230 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80161fa:	490e      	ldr	r1, [pc, #56]	; (8016234 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80161fc:	4a0e      	ldr	r2, [pc, #56]	; (8016238 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80161fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8016200:	e002      	b.n	8016208 <LoopCopyDataInit>

08016202 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8016202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8016204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8016206:	3304      	adds	r3, #4

08016208 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8016208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801620a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801620c:	d3f9      	bcc.n	8016202 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801620e:	4a0b      	ldr	r2, [pc, #44]	; (801623c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8016210:	4c0b      	ldr	r4, [pc, #44]	; (8016240 <LoopFillZerobss+0x26>)
  movs r3, #0
 8016212:	2300      	movs	r3, #0
  b LoopFillZerobss
 8016214:	e001      	b.n	801621a <LoopFillZerobss>

08016216 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8016216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8016218:	3204      	adds	r2, #4

0801621a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801621a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801621c:	d3fb      	bcc.n	8016216 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801621e:	f7ff ffd7 	bl	80161d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8016222:	f007 fc51 	bl	801dac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8016226:	f7eb fba5 	bl	8001974 <main>
  bx  lr    
 801622a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 801622c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8016230:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8016234:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8016238:	08029bf0 	.word	0x08029bf0
  ldr r2, =_sbss
 801623c:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8016240:	200007a4 	.word	0x200007a4

08016244 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8016244:	e7fe      	b.n	8016244 <ADC_IRQHandler>
	...

08016248 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8016248:	b580      	push	{r7, lr}
 801624a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801624c:	4b0e      	ldr	r3, [pc, #56]	; (8016288 <HAL_Init+0x40>)
 801624e:	681b      	ldr	r3, [r3, #0]
 8016250:	4a0d      	ldr	r2, [pc, #52]	; (8016288 <HAL_Init+0x40>)
 8016252:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8016256:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8016258:	4b0b      	ldr	r3, [pc, #44]	; (8016288 <HAL_Init+0x40>)
 801625a:	681b      	ldr	r3, [r3, #0]
 801625c:	4a0a      	ldr	r2, [pc, #40]	; (8016288 <HAL_Init+0x40>)
 801625e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8016262:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8016264:	4b08      	ldr	r3, [pc, #32]	; (8016288 <HAL_Init+0x40>)
 8016266:	681b      	ldr	r3, [r3, #0]
 8016268:	4a07      	ldr	r2, [pc, #28]	; (8016288 <HAL_Init+0x40>)
 801626a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801626e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8016270:	2003      	movs	r0, #3
 8016272:	f000 f94f 	bl	8016514 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8016276:	2000      	movs	r0, #0
 8016278:	f000 f808 	bl	801628c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801627c:	f7ff fc14 	bl	8015aa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8016280:	2300      	movs	r3, #0
}
 8016282:	4618      	mov	r0, r3
 8016284:	bd80      	pop	{r7, pc}
 8016286:	bf00      	nop
 8016288:	40023c00 	.word	0x40023c00

0801628c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801628c:	b580      	push	{r7, lr}
 801628e:	b082      	sub	sp, #8
 8016290:	af00      	add	r7, sp, #0
 8016292:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8016294:	4b12      	ldr	r3, [pc, #72]	; (80162e0 <HAL_InitTick+0x54>)
 8016296:	681a      	ldr	r2, [r3, #0]
 8016298:	4b12      	ldr	r3, [pc, #72]	; (80162e4 <HAL_InitTick+0x58>)
 801629a:	781b      	ldrb	r3, [r3, #0]
 801629c:	4619      	mov	r1, r3
 801629e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80162a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80162a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80162aa:	4618      	mov	r0, r3
 80162ac:	f000 f967 	bl	801657e <HAL_SYSTICK_Config>
 80162b0:	4603      	mov	r3, r0
 80162b2:	2b00      	cmp	r3, #0
 80162b4:	d001      	beq.n	80162ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80162b6:	2301      	movs	r3, #1
 80162b8:	e00e      	b.n	80162d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	2b0f      	cmp	r3, #15
 80162be:	d80a      	bhi.n	80162d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80162c0:	2200      	movs	r2, #0
 80162c2:	6879      	ldr	r1, [r7, #4]
 80162c4:	f04f 30ff 	mov.w	r0, #4294967295
 80162c8:	f000 f92f 	bl	801652a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80162cc:	4a06      	ldr	r2, [pc, #24]	; (80162e8 <HAL_InitTick+0x5c>)
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80162d2:	2300      	movs	r3, #0
 80162d4:	e000      	b.n	80162d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80162d6:	2301      	movs	r3, #1
}
 80162d8:	4618      	mov	r0, r3
 80162da:	3708      	adds	r7, #8
 80162dc:	46bd      	mov	sp, r7
 80162de:	bd80      	pop	{r7, pc}
 80162e0:	20000184 	.word	0x20000184
 80162e4:	2000018c 	.word	0x2000018c
 80162e8:	20000188 	.word	0x20000188

080162ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80162ec:	b480      	push	{r7}
 80162ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80162f0:	4b06      	ldr	r3, [pc, #24]	; (801630c <HAL_IncTick+0x20>)
 80162f2:	781b      	ldrb	r3, [r3, #0]
 80162f4:	461a      	mov	r2, r3
 80162f6:	4b06      	ldr	r3, [pc, #24]	; (8016310 <HAL_IncTick+0x24>)
 80162f8:	681b      	ldr	r3, [r3, #0]
 80162fa:	4413      	add	r3, r2
 80162fc:	4a04      	ldr	r2, [pc, #16]	; (8016310 <HAL_IncTick+0x24>)
 80162fe:	6013      	str	r3, [r2, #0]
}
 8016300:	bf00      	nop
 8016302:	46bd      	mov	sp, r7
 8016304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016308:	4770      	bx	lr
 801630a:	bf00      	nop
 801630c:	2000018c 	.word	0x2000018c
 8016310:	20000790 	.word	0x20000790

08016314 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8016314:	b480      	push	{r7}
 8016316:	af00      	add	r7, sp, #0
  return uwTick;
 8016318:	4b03      	ldr	r3, [pc, #12]	; (8016328 <HAL_GetTick+0x14>)
 801631a:	681b      	ldr	r3, [r3, #0]
}
 801631c:	4618      	mov	r0, r3
 801631e:	46bd      	mov	sp, r7
 8016320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016324:	4770      	bx	lr
 8016326:	bf00      	nop
 8016328:	20000790 	.word	0x20000790

0801632c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801632c:	b580      	push	{r7, lr}
 801632e:	b084      	sub	sp, #16
 8016330:	af00      	add	r7, sp, #0
 8016332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8016334:	f7ff ffee 	bl	8016314 <HAL_GetTick>
 8016338:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801633e:	68fb      	ldr	r3, [r7, #12]
 8016340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016344:	d005      	beq.n	8016352 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8016346:	4b0a      	ldr	r3, [pc, #40]	; (8016370 <HAL_Delay+0x44>)
 8016348:	781b      	ldrb	r3, [r3, #0]
 801634a:	461a      	mov	r2, r3
 801634c:	68fb      	ldr	r3, [r7, #12]
 801634e:	4413      	add	r3, r2
 8016350:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8016352:	bf00      	nop
 8016354:	f7ff ffde 	bl	8016314 <HAL_GetTick>
 8016358:	4602      	mov	r2, r0
 801635a:	68bb      	ldr	r3, [r7, #8]
 801635c:	1ad3      	subs	r3, r2, r3
 801635e:	68fa      	ldr	r2, [r7, #12]
 8016360:	429a      	cmp	r2, r3
 8016362:	d8f7      	bhi.n	8016354 <HAL_Delay+0x28>
  {
  }
}
 8016364:	bf00      	nop
 8016366:	bf00      	nop
 8016368:	3710      	adds	r7, #16
 801636a:	46bd      	mov	sp, r7
 801636c:	bd80      	pop	{r7, pc}
 801636e:	bf00      	nop
 8016370:	2000018c 	.word	0x2000018c

08016374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8016374:	b480      	push	{r7}
 8016376:	b085      	sub	sp, #20
 8016378:	af00      	add	r7, sp, #0
 801637a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	f003 0307 	and.w	r3, r3, #7
 8016382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8016384:	4b0c      	ldr	r3, [pc, #48]	; (80163b8 <__NVIC_SetPriorityGrouping+0x44>)
 8016386:	68db      	ldr	r3, [r3, #12]
 8016388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801638a:	68ba      	ldr	r2, [r7, #8]
 801638c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8016390:	4013      	ands	r3, r2
 8016392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8016394:	68fb      	ldr	r3, [r7, #12]
 8016396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8016398:	68bb      	ldr	r3, [r7, #8]
 801639a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801639c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80163a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80163a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80163a6:	4a04      	ldr	r2, [pc, #16]	; (80163b8 <__NVIC_SetPriorityGrouping+0x44>)
 80163a8:	68bb      	ldr	r3, [r7, #8]
 80163aa:	60d3      	str	r3, [r2, #12]
}
 80163ac:	bf00      	nop
 80163ae:	3714      	adds	r7, #20
 80163b0:	46bd      	mov	sp, r7
 80163b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163b6:	4770      	bx	lr
 80163b8:	e000ed00 	.word	0xe000ed00

080163bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80163bc:	b480      	push	{r7}
 80163be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80163c0:	4b04      	ldr	r3, [pc, #16]	; (80163d4 <__NVIC_GetPriorityGrouping+0x18>)
 80163c2:	68db      	ldr	r3, [r3, #12]
 80163c4:	0a1b      	lsrs	r3, r3, #8
 80163c6:	f003 0307 	and.w	r3, r3, #7
}
 80163ca:	4618      	mov	r0, r3
 80163cc:	46bd      	mov	sp, r7
 80163ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163d2:	4770      	bx	lr
 80163d4:	e000ed00 	.word	0xe000ed00

080163d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80163d8:	b480      	push	{r7}
 80163da:	b083      	sub	sp, #12
 80163dc:	af00      	add	r7, sp, #0
 80163de:	4603      	mov	r3, r0
 80163e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80163e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	db0b      	blt.n	8016402 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80163ea:	79fb      	ldrb	r3, [r7, #7]
 80163ec:	f003 021f 	and.w	r2, r3, #31
 80163f0:	4907      	ldr	r1, [pc, #28]	; (8016410 <__NVIC_EnableIRQ+0x38>)
 80163f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80163f6:	095b      	lsrs	r3, r3, #5
 80163f8:	2001      	movs	r0, #1
 80163fa:	fa00 f202 	lsl.w	r2, r0, r2
 80163fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8016402:	bf00      	nop
 8016404:	370c      	adds	r7, #12
 8016406:	46bd      	mov	sp, r7
 8016408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801640c:	4770      	bx	lr
 801640e:	bf00      	nop
 8016410:	e000e100 	.word	0xe000e100

08016414 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8016414:	b480      	push	{r7}
 8016416:	b083      	sub	sp, #12
 8016418:	af00      	add	r7, sp, #0
 801641a:	4603      	mov	r3, r0
 801641c:	6039      	str	r1, [r7, #0]
 801641e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016424:	2b00      	cmp	r3, #0
 8016426:	db0a      	blt.n	801643e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016428:	683b      	ldr	r3, [r7, #0]
 801642a:	b2da      	uxtb	r2, r3
 801642c:	490c      	ldr	r1, [pc, #48]	; (8016460 <__NVIC_SetPriority+0x4c>)
 801642e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016432:	0112      	lsls	r2, r2, #4
 8016434:	b2d2      	uxtb	r2, r2
 8016436:	440b      	add	r3, r1
 8016438:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801643c:	e00a      	b.n	8016454 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801643e:	683b      	ldr	r3, [r7, #0]
 8016440:	b2da      	uxtb	r2, r3
 8016442:	4908      	ldr	r1, [pc, #32]	; (8016464 <__NVIC_SetPriority+0x50>)
 8016444:	79fb      	ldrb	r3, [r7, #7]
 8016446:	f003 030f 	and.w	r3, r3, #15
 801644a:	3b04      	subs	r3, #4
 801644c:	0112      	lsls	r2, r2, #4
 801644e:	b2d2      	uxtb	r2, r2
 8016450:	440b      	add	r3, r1
 8016452:	761a      	strb	r2, [r3, #24]
}
 8016454:	bf00      	nop
 8016456:	370c      	adds	r7, #12
 8016458:	46bd      	mov	sp, r7
 801645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801645e:	4770      	bx	lr
 8016460:	e000e100 	.word	0xe000e100
 8016464:	e000ed00 	.word	0xe000ed00

08016468 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8016468:	b480      	push	{r7}
 801646a:	b089      	sub	sp, #36	; 0x24
 801646c:	af00      	add	r7, sp, #0
 801646e:	60f8      	str	r0, [r7, #12]
 8016470:	60b9      	str	r1, [r7, #8]
 8016472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8016474:	68fb      	ldr	r3, [r7, #12]
 8016476:	f003 0307 	and.w	r3, r3, #7
 801647a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801647c:	69fb      	ldr	r3, [r7, #28]
 801647e:	f1c3 0307 	rsb	r3, r3, #7
 8016482:	2b04      	cmp	r3, #4
 8016484:	bf28      	it	cs
 8016486:	2304      	movcs	r3, #4
 8016488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801648a:	69fb      	ldr	r3, [r7, #28]
 801648c:	3304      	adds	r3, #4
 801648e:	2b06      	cmp	r3, #6
 8016490:	d902      	bls.n	8016498 <NVIC_EncodePriority+0x30>
 8016492:	69fb      	ldr	r3, [r7, #28]
 8016494:	3b03      	subs	r3, #3
 8016496:	e000      	b.n	801649a <NVIC_EncodePriority+0x32>
 8016498:	2300      	movs	r3, #0
 801649a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801649c:	f04f 32ff 	mov.w	r2, #4294967295
 80164a0:	69bb      	ldr	r3, [r7, #24]
 80164a2:	fa02 f303 	lsl.w	r3, r2, r3
 80164a6:	43da      	mvns	r2, r3
 80164a8:	68bb      	ldr	r3, [r7, #8]
 80164aa:	401a      	ands	r2, r3
 80164ac:	697b      	ldr	r3, [r7, #20]
 80164ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80164b0:	f04f 31ff 	mov.w	r1, #4294967295
 80164b4:	697b      	ldr	r3, [r7, #20]
 80164b6:	fa01 f303 	lsl.w	r3, r1, r3
 80164ba:	43d9      	mvns	r1, r3
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80164c0:	4313      	orrs	r3, r2
         );
}
 80164c2:	4618      	mov	r0, r3
 80164c4:	3724      	adds	r7, #36	; 0x24
 80164c6:	46bd      	mov	sp, r7
 80164c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164cc:	4770      	bx	lr
	...

080164d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80164d0:	b580      	push	{r7, lr}
 80164d2:	b082      	sub	sp, #8
 80164d4:	af00      	add	r7, sp, #0
 80164d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	3b01      	subs	r3, #1
 80164dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80164e0:	d301      	bcc.n	80164e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80164e2:	2301      	movs	r3, #1
 80164e4:	e00f      	b.n	8016506 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80164e6:	4a0a      	ldr	r2, [pc, #40]	; (8016510 <SysTick_Config+0x40>)
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	3b01      	subs	r3, #1
 80164ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80164ee:	210f      	movs	r1, #15
 80164f0:	f04f 30ff 	mov.w	r0, #4294967295
 80164f4:	f7ff ff8e 	bl	8016414 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80164f8:	4b05      	ldr	r3, [pc, #20]	; (8016510 <SysTick_Config+0x40>)
 80164fa:	2200      	movs	r2, #0
 80164fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80164fe:	4b04      	ldr	r3, [pc, #16]	; (8016510 <SysTick_Config+0x40>)
 8016500:	2207      	movs	r2, #7
 8016502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8016504:	2300      	movs	r3, #0
}
 8016506:	4618      	mov	r0, r3
 8016508:	3708      	adds	r7, #8
 801650a:	46bd      	mov	sp, r7
 801650c:	bd80      	pop	{r7, pc}
 801650e:	bf00      	nop
 8016510:	e000e010 	.word	0xe000e010

08016514 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8016514:	b580      	push	{r7, lr}
 8016516:	b082      	sub	sp, #8
 8016518:	af00      	add	r7, sp, #0
 801651a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801651c:	6878      	ldr	r0, [r7, #4]
 801651e:	f7ff ff29 	bl	8016374 <__NVIC_SetPriorityGrouping>
}
 8016522:	bf00      	nop
 8016524:	3708      	adds	r7, #8
 8016526:	46bd      	mov	sp, r7
 8016528:	bd80      	pop	{r7, pc}

0801652a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801652a:	b580      	push	{r7, lr}
 801652c:	b086      	sub	sp, #24
 801652e:	af00      	add	r7, sp, #0
 8016530:	4603      	mov	r3, r0
 8016532:	60b9      	str	r1, [r7, #8]
 8016534:	607a      	str	r2, [r7, #4]
 8016536:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8016538:	2300      	movs	r3, #0
 801653a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 801653c:	f7ff ff3e 	bl	80163bc <__NVIC_GetPriorityGrouping>
 8016540:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8016542:	687a      	ldr	r2, [r7, #4]
 8016544:	68b9      	ldr	r1, [r7, #8]
 8016546:	6978      	ldr	r0, [r7, #20]
 8016548:	f7ff ff8e 	bl	8016468 <NVIC_EncodePriority>
 801654c:	4602      	mov	r2, r0
 801654e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016552:	4611      	mov	r1, r2
 8016554:	4618      	mov	r0, r3
 8016556:	f7ff ff5d 	bl	8016414 <__NVIC_SetPriority>
}
 801655a:	bf00      	nop
 801655c:	3718      	adds	r7, #24
 801655e:	46bd      	mov	sp, r7
 8016560:	bd80      	pop	{r7, pc}

08016562 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8016562:	b580      	push	{r7, lr}
 8016564:	b082      	sub	sp, #8
 8016566:	af00      	add	r7, sp, #0
 8016568:	4603      	mov	r3, r0
 801656a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801656c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016570:	4618      	mov	r0, r3
 8016572:	f7ff ff31 	bl	80163d8 <__NVIC_EnableIRQ>
}
 8016576:	bf00      	nop
 8016578:	3708      	adds	r7, #8
 801657a:	46bd      	mov	sp, r7
 801657c:	bd80      	pop	{r7, pc}

0801657e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801657e:	b580      	push	{r7, lr}
 8016580:	b082      	sub	sp, #8
 8016582:	af00      	add	r7, sp, #0
 8016584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8016586:	6878      	ldr	r0, [r7, #4]
 8016588:	f7ff ffa2 	bl	80164d0 <SysTick_Config>
 801658c:	4603      	mov	r3, r0
}
 801658e:	4618      	mov	r0, r3
 8016590:	3708      	adds	r7, #8
 8016592:	46bd      	mov	sp, r7
 8016594:	bd80      	pop	{r7, pc}
	...

08016598 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8016598:	b580      	push	{r7, lr}
 801659a:	b086      	sub	sp, #24
 801659c:	af00      	add	r7, sp, #0
 801659e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80165a0:	2300      	movs	r3, #0
 80165a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80165a4:	f7ff feb6 	bl	8016314 <HAL_GetTick>
 80165a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d101      	bne.n	80165b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80165b0:	2301      	movs	r3, #1
 80165b2:	e099      	b.n	80166e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80165b4:	687b      	ldr	r3, [r7, #4]
 80165b6:	2202      	movs	r2, #2
 80165b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	2200      	movs	r2, #0
 80165c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	681b      	ldr	r3, [r3, #0]
 80165c8:	681a      	ldr	r2, [r3, #0]
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	681b      	ldr	r3, [r3, #0]
 80165ce:	f022 0201 	bic.w	r2, r2, #1
 80165d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80165d4:	e00f      	b.n	80165f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80165d6:	f7ff fe9d 	bl	8016314 <HAL_GetTick>
 80165da:	4602      	mov	r2, r0
 80165dc:	693b      	ldr	r3, [r7, #16]
 80165de:	1ad3      	subs	r3, r2, r3
 80165e0:	2b05      	cmp	r3, #5
 80165e2:	d908      	bls.n	80165f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	2220      	movs	r2, #32
 80165e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	2203      	movs	r2, #3
 80165ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80165f2:	2303      	movs	r3, #3
 80165f4:	e078      	b.n	80166e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	681b      	ldr	r3, [r3, #0]
 80165fa:	681b      	ldr	r3, [r3, #0]
 80165fc:	f003 0301 	and.w	r3, r3, #1
 8016600:	2b00      	cmp	r3, #0
 8016602:	d1e8      	bne.n	80165d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	681b      	ldr	r3, [r3, #0]
 8016608:	681b      	ldr	r3, [r3, #0]
 801660a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 801660c:	697a      	ldr	r2, [r7, #20]
 801660e:	4b38      	ldr	r3, [pc, #224]	; (80166f0 <HAL_DMA_Init+0x158>)
 8016610:	4013      	ands	r3, r2
 8016612:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	685a      	ldr	r2, [r3, #4]
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	689b      	ldr	r3, [r3, #8]
 801661c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8016622:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	691b      	ldr	r3, [r3, #16]
 8016628:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801662e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	699b      	ldr	r3, [r3, #24]
 8016634:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801663a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	6a1b      	ldr	r3, [r3, #32]
 8016640:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8016642:	697a      	ldr	r2, [r7, #20]
 8016644:	4313      	orrs	r3, r2
 8016646:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801664c:	2b04      	cmp	r3, #4
 801664e:	d107      	bne.n	8016660 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016658:	4313      	orrs	r3, r2
 801665a:	697a      	ldr	r2, [r7, #20]
 801665c:	4313      	orrs	r3, r2
 801665e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	681b      	ldr	r3, [r3, #0]
 8016664:	697a      	ldr	r2, [r7, #20]
 8016666:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	681b      	ldr	r3, [r3, #0]
 801666c:	695b      	ldr	r3, [r3, #20]
 801666e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8016670:	697b      	ldr	r3, [r7, #20]
 8016672:	f023 0307 	bic.w	r3, r3, #7
 8016676:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801667c:	697a      	ldr	r2, [r7, #20]
 801667e:	4313      	orrs	r3, r2
 8016680:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016686:	2b04      	cmp	r3, #4
 8016688:	d117      	bne.n	80166ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801668e:	697a      	ldr	r2, [r7, #20]
 8016690:	4313      	orrs	r3, r2
 8016692:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016698:	2b00      	cmp	r3, #0
 801669a:	d00e      	beq.n	80166ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 801669c:	6878      	ldr	r0, [r7, #4]
 801669e:	f000 fb0f 	bl	8016cc0 <DMA_CheckFifoParam>
 80166a2:	4603      	mov	r3, r0
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	d008      	beq.n	80166ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	2240      	movs	r2, #64	; 0x40
 80166ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	2201      	movs	r2, #1
 80166b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80166b6:	2301      	movs	r3, #1
 80166b8:	e016      	b.n	80166e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	697a      	ldr	r2, [r7, #20]
 80166c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80166c2:	6878      	ldr	r0, [r7, #4]
 80166c4:	f000 fac6 	bl	8016c54 <DMA_CalcBaseAndBitshift>
 80166c8:	4603      	mov	r3, r0
 80166ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80166d0:	223f      	movs	r2, #63	; 0x3f
 80166d2:	409a      	lsls	r2, r3
 80166d4:	68fb      	ldr	r3, [r7, #12]
 80166d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	2200      	movs	r2, #0
 80166dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	2201      	movs	r2, #1
 80166e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80166e6:	2300      	movs	r3, #0
}
 80166e8:	4618      	mov	r0, r3
 80166ea:	3718      	adds	r7, #24
 80166ec:	46bd      	mov	sp, r7
 80166ee:	bd80      	pop	{r7, pc}
 80166f0:	f010803f 	.word	0xf010803f

080166f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80166f4:	b580      	push	{r7, lr}
 80166f6:	b086      	sub	sp, #24
 80166f8:	af00      	add	r7, sp, #0
 80166fa:	60f8      	str	r0, [r7, #12]
 80166fc:	60b9      	str	r1, [r7, #8]
 80166fe:	607a      	str	r2, [r7, #4]
 8016700:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8016702:	2300      	movs	r3, #0
 8016704:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8016706:	68fb      	ldr	r3, [r7, #12]
 8016708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801670a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 801670c:	68fb      	ldr	r3, [r7, #12]
 801670e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016712:	2b01      	cmp	r3, #1
 8016714:	d101      	bne.n	801671a <HAL_DMA_Start_IT+0x26>
 8016716:	2302      	movs	r3, #2
 8016718:	e040      	b.n	801679c <HAL_DMA_Start_IT+0xa8>
 801671a:	68fb      	ldr	r3, [r7, #12]
 801671c:	2201      	movs	r2, #1
 801671e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8016722:	68fb      	ldr	r3, [r7, #12]
 8016724:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016728:	b2db      	uxtb	r3, r3
 801672a:	2b01      	cmp	r3, #1
 801672c:	d12f      	bne.n	801678e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801672e:	68fb      	ldr	r3, [r7, #12]
 8016730:	2202      	movs	r2, #2
 8016732:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8016736:	68fb      	ldr	r3, [r7, #12]
 8016738:	2200      	movs	r2, #0
 801673a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801673c:	683b      	ldr	r3, [r7, #0]
 801673e:	687a      	ldr	r2, [r7, #4]
 8016740:	68b9      	ldr	r1, [r7, #8]
 8016742:	68f8      	ldr	r0, [r7, #12]
 8016744:	f000 fa58 	bl	8016bf8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8016748:	68fb      	ldr	r3, [r7, #12]
 801674a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801674c:	223f      	movs	r2, #63	; 0x3f
 801674e:	409a      	lsls	r2, r3
 8016750:	693b      	ldr	r3, [r7, #16]
 8016752:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8016754:	68fb      	ldr	r3, [r7, #12]
 8016756:	681b      	ldr	r3, [r3, #0]
 8016758:	681a      	ldr	r2, [r3, #0]
 801675a:	68fb      	ldr	r3, [r7, #12]
 801675c:	681b      	ldr	r3, [r3, #0]
 801675e:	f042 0216 	orr.w	r2, r2, #22
 8016762:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8016764:	68fb      	ldr	r3, [r7, #12]
 8016766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016768:	2b00      	cmp	r3, #0
 801676a:	d007      	beq.n	801677c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 801676c:	68fb      	ldr	r3, [r7, #12]
 801676e:	681b      	ldr	r3, [r3, #0]
 8016770:	681a      	ldr	r2, [r3, #0]
 8016772:	68fb      	ldr	r3, [r7, #12]
 8016774:	681b      	ldr	r3, [r3, #0]
 8016776:	f042 0208 	orr.w	r2, r2, #8
 801677a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801677c:	68fb      	ldr	r3, [r7, #12]
 801677e:	681b      	ldr	r3, [r3, #0]
 8016780:	681a      	ldr	r2, [r3, #0]
 8016782:	68fb      	ldr	r3, [r7, #12]
 8016784:	681b      	ldr	r3, [r3, #0]
 8016786:	f042 0201 	orr.w	r2, r2, #1
 801678a:	601a      	str	r2, [r3, #0]
 801678c:	e005      	b.n	801679a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 801678e:	68fb      	ldr	r3, [r7, #12]
 8016790:	2200      	movs	r2, #0
 8016792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8016796:	2302      	movs	r3, #2
 8016798:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 801679a:	7dfb      	ldrb	r3, [r7, #23]
}
 801679c:	4618      	mov	r0, r3
 801679e:	3718      	adds	r7, #24
 80167a0:	46bd      	mov	sp, r7
 80167a2:	bd80      	pop	{r7, pc}

080167a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80167a4:	b580      	push	{r7, lr}
 80167a6:	b084      	sub	sp, #16
 80167a8:	af00      	add	r7, sp, #0
 80167aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80167b0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80167b2:	f7ff fdaf 	bl	8016314 <HAL_GetTick>
 80167b6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80167be:	b2db      	uxtb	r3, r3
 80167c0:	2b02      	cmp	r3, #2
 80167c2:	d008      	beq.n	80167d6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	2280      	movs	r2, #128	; 0x80
 80167c8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	2200      	movs	r2, #0
 80167ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80167d2:	2301      	movs	r3, #1
 80167d4:	e052      	b.n	801687c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	681b      	ldr	r3, [r3, #0]
 80167da:	681a      	ldr	r2, [r3, #0]
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	681b      	ldr	r3, [r3, #0]
 80167e0:	f022 0216 	bic.w	r2, r2, #22
 80167e4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	681b      	ldr	r3, [r3, #0]
 80167ea:	695a      	ldr	r2, [r3, #20]
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80167f4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	d103      	bne.n	8016806 <HAL_DMA_Abort+0x62>
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016802:	2b00      	cmp	r3, #0
 8016804:	d007      	beq.n	8016816 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	681b      	ldr	r3, [r3, #0]
 801680a:	681a      	ldr	r2, [r3, #0]
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	681b      	ldr	r3, [r3, #0]
 8016810:	f022 0208 	bic.w	r2, r2, #8
 8016814:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	681b      	ldr	r3, [r3, #0]
 801681a:	681a      	ldr	r2, [r3, #0]
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	681b      	ldr	r3, [r3, #0]
 8016820:	f022 0201 	bic.w	r2, r2, #1
 8016824:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8016826:	e013      	b.n	8016850 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8016828:	f7ff fd74 	bl	8016314 <HAL_GetTick>
 801682c:	4602      	mov	r2, r0
 801682e:	68bb      	ldr	r3, [r7, #8]
 8016830:	1ad3      	subs	r3, r2, r3
 8016832:	2b05      	cmp	r3, #5
 8016834:	d90c      	bls.n	8016850 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	2220      	movs	r2, #32
 801683a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	2203      	movs	r2, #3
 8016840:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	2200      	movs	r2, #0
 8016848:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 801684c:	2303      	movs	r3, #3
 801684e:	e015      	b.n	801687c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	681b      	ldr	r3, [r3, #0]
 8016854:	681b      	ldr	r3, [r3, #0]
 8016856:	f003 0301 	and.w	r3, r3, #1
 801685a:	2b00      	cmp	r3, #0
 801685c:	d1e4      	bne.n	8016828 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801685e:	687b      	ldr	r3, [r7, #4]
 8016860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016862:	223f      	movs	r2, #63	; 0x3f
 8016864:	409a      	lsls	r2, r3
 8016866:	68fb      	ldr	r3, [r7, #12]
 8016868:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	2201      	movs	r2, #1
 801686e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	2200      	movs	r2, #0
 8016876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 801687a:	2300      	movs	r3, #0
}
 801687c:	4618      	mov	r0, r3
 801687e:	3710      	adds	r7, #16
 8016880:	46bd      	mov	sp, r7
 8016882:	bd80      	pop	{r7, pc}

08016884 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8016884:	b480      	push	{r7}
 8016886:	b083      	sub	sp, #12
 8016888:	af00      	add	r7, sp, #0
 801688a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016892:	b2db      	uxtb	r3, r3
 8016894:	2b02      	cmp	r3, #2
 8016896:	d004      	beq.n	80168a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	2280      	movs	r2, #128	; 0x80
 801689c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 801689e:	2301      	movs	r3, #1
 80168a0:	e00c      	b.n	80168bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	2205      	movs	r2, #5
 80168a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	681b      	ldr	r3, [r3, #0]
 80168ae:	681a      	ldr	r2, [r3, #0]
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	681b      	ldr	r3, [r3, #0]
 80168b4:	f022 0201 	bic.w	r2, r2, #1
 80168b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80168ba:	2300      	movs	r3, #0
}
 80168bc:	4618      	mov	r0, r3
 80168be:	370c      	adds	r7, #12
 80168c0:	46bd      	mov	sp, r7
 80168c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168c6:	4770      	bx	lr

080168c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80168c8:	b580      	push	{r7, lr}
 80168ca:	b086      	sub	sp, #24
 80168cc:	af00      	add	r7, sp, #0
 80168ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80168d0:	2300      	movs	r3, #0
 80168d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80168d4:	4b8e      	ldr	r3, [pc, #568]	; (8016b10 <HAL_DMA_IRQHandler+0x248>)
 80168d6:	681b      	ldr	r3, [r3, #0]
 80168d8:	4a8e      	ldr	r2, [pc, #568]	; (8016b14 <HAL_DMA_IRQHandler+0x24c>)
 80168da:	fba2 2303 	umull	r2, r3, r2, r3
 80168de:	0a9b      	lsrs	r3, r3, #10
 80168e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80168e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80168e8:	693b      	ldr	r3, [r7, #16]
 80168ea:	681b      	ldr	r3, [r3, #0]
 80168ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80168f2:	2208      	movs	r2, #8
 80168f4:	409a      	lsls	r2, r3
 80168f6:	68fb      	ldr	r3, [r7, #12]
 80168f8:	4013      	ands	r3, r2
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	d01a      	beq.n	8016934 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	681b      	ldr	r3, [r3, #0]
 8016902:	681b      	ldr	r3, [r3, #0]
 8016904:	f003 0304 	and.w	r3, r3, #4
 8016908:	2b00      	cmp	r3, #0
 801690a:	d013      	beq.n	8016934 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	681b      	ldr	r3, [r3, #0]
 8016910:	681a      	ldr	r2, [r3, #0]
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	f022 0204 	bic.w	r2, r2, #4
 801691a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016920:	2208      	movs	r2, #8
 8016922:	409a      	lsls	r2, r3
 8016924:	693b      	ldr	r3, [r7, #16]
 8016926:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801692c:	f043 0201 	orr.w	r2, r3, #1
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016938:	2201      	movs	r2, #1
 801693a:	409a      	lsls	r2, r3
 801693c:	68fb      	ldr	r3, [r7, #12]
 801693e:	4013      	ands	r3, r2
 8016940:	2b00      	cmp	r3, #0
 8016942:	d012      	beq.n	801696a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	681b      	ldr	r3, [r3, #0]
 8016948:	695b      	ldr	r3, [r3, #20]
 801694a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801694e:	2b00      	cmp	r3, #0
 8016950:	d00b      	beq.n	801696a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016956:	2201      	movs	r2, #1
 8016958:	409a      	lsls	r2, r3
 801695a:	693b      	ldr	r3, [r7, #16]
 801695c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016962:	f043 0202 	orr.w	r2, r3, #2
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801696e:	2204      	movs	r2, #4
 8016970:	409a      	lsls	r2, r3
 8016972:	68fb      	ldr	r3, [r7, #12]
 8016974:	4013      	ands	r3, r2
 8016976:	2b00      	cmp	r3, #0
 8016978:	d012      	beq.n	80169a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	681b      	ldr	r3, [r3, #0]
 801697e:	681b      	ldr	r3, [r3, #0]
 8016980:	f003 0302 	and.w	r3, r3, #2
 8016984:	2b00      	cmp	r3, #0
 8016986:	d00b      	beq.n	80169a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801698c:	2204      	movs	r2, #4
 801698e:	409a      	lsls	r2, r3
 8016990:	693b      	ldr	r3, [r7, #16]
 8016992:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016998:	f043 0204 	orr.w	r2, r3, #4
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80169a4:	2210      	movs	r2, #16
 80169a6:	409a      	lsls	r2, r3
 80169a8:	68fb      	ldr	r3, [r7, #12]
 80169aa:	4013      	ands	r3, r2
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	d043      	beq.n	8016a38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	681b      	ldr	r3, [r3, #0]
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	f003 0308 	and.w	r3, r3, #8
 80169ba:	2b00      	cmp	r3, #0
 80169bc:	d03c      	beq.n	8016a38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80169c2:	2210      	movs	r2, #16
 80169c4:	409a      	lsls	r2, r3
 80169c6:	693b      	ldr	r3, [r7, #16]
 80169c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	681b      	ldr	r3, [r3, #0]
 80169ce:	681b      	ldr	r3, [r3, #0]
 80169d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	d018      	beq.n	8016a0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	681b      	ldr	r3, [r3, #0]
 80169dc:	681b      	ldr	r3, [r3, #0]
 80169de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	d108      	bne.n	80169f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	d024      	beq.n	8016a38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80169f2:	6878      	ldr	r0, [r7, #4]
 80169f4:	4798      	blx	r3
 80169f6:	e01f      	b.n	8016a38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80169fc:	2b00      	cmp	r3, #0
 80169fe:	d01b      	beq.n	8016a38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016a04:	6878      	ldr	r0, [r7, #4]
 8016a06:	4798      	blx	r3
 8016a08:	e016      	b.n	8016a38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	681b      	ldr	r3, [r3, #0]
 8016a0e:	681b      	ldr	r3, [r3, #0]
 8016a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016a14:	2b00      	cmp	r3, #0
 8016a16:	d107      	bne.n	8016a28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	681b      	ldr	r3, [r3, #0]
 8016a1c:	681a      	ldr	r2, [r3, #0]
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	681b      	ldr	r3, [r3, #0]
 8016a22:	f022 0208 	bic.w	r2, r2, #8
 8016a26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d003      	beq.n	8016a38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016a34:	6878      	ldr	r0, [r7, #4]
 8016a36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016a3c:	2220      	movs	r2, #32
 8016a3e:	409a      	lsls	r2, r3
 8016a40:	68fb      	ldr	r3, [r7, #12]
 8016a42:	4013      	ands	r3, r2
 8016a44:	2b00      	cmp	r3, #0
 8016a46:	f000 808f 	beq.w	8016b68 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	681b      	ldr	r3, [r3, #0]
 8016a4e:	681b      	ldr	r3, [r3, #0]
 8016a50:	f003 0310 	and.w	r3, r3, #16
 8016a54:	2b00      	cmp	r3, #0
 8016a56:	f000 8087 	beq.w	8016b68 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016a5e:	2220      	movs	r2, #32
 8016a60:	409a      	lsls	r2, r3
 8016a62:	693b      	ldr	r3, [r7, #16]
 8016a64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016a6c:	b2db      	uxtb	r3, r3
 8016a6e:	2b05      	cmp	r3, #5
 8016a70:	d136      	bne.n	8016ae0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	681b      	ldr	r3, [r3, #0]
 8016a76:	681a      	ldr	r2, [r3, #0]
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	681b      	ldr	r3, [r3, #0]
 8016a7c:	f022 0216 	bic.w	r2, r2, #22
 8016a80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	681b      	ldr	r3, [r3, #0]
 8016a86:	695a      	ldr	r2, [r3, #20]
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	681b      	ldr	r3, [r3, #0]
 8016a8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016a90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d103      	bne.n	8016aa2 <HAL_DMA_IRQHandler+0x1da>
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	d007      	beq.n	8016ab2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	681b      	ldr	r3, [r3, #0]
 8016aa6:	681a      	ldr	r2, [r3, #0]
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	681b      	ldr	r3, [r3, #0]
 8016aac:	f022 0208 	bic.w	r2, r2, #8
 8016ab0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016ab6:	223f      	movs	r2, #63	; 0x3f
 8016ab8:	409a      	lsls	r2, r3
 8016aba:	693b      	ldr	r3, [r7, #16]
 8016abc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	2201      	movs	r2, #1
 8016ac2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8016ac6:	687b      	ldr	r3, [r7, #4]
 8016ac8:	2200      	movs	r2, #0
 8016aca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	d07e      	beq.n	8016bd4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016ada:	6878      	ldr	r0, [r7, #4]
 8016adc:	4798      	blx	r3
        }
        return;
 8016ade:	e079      	b.n	8016bd4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	681b      	ldr	r3, [r3, #0]
 8016ae4:	681b      	ldr	r3, [r3, #0]
 8016ae6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	d01d      	beq.n	8016b2a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	681b      	ldr	r3, [r3, #0]
 8016af2:	681b      	ldr	r3, [r3, #0]
 8016af4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8016af8:	2b00      	cmp	r3, #0
 8016afa:	d10d      	bne.n	8016b18 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016b00:	2b00      	cmp	r3, #0
 8016b02:	d031      	beq.n	8016b68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016b08:	6878      	ldr	r0, [r7, #4]
 8016b0a:	4798      	blx	r3
 8016b0c:	e02c      	b.n	8016b68 <HAL_DMA_IRQHandler+0x2a0>
 8016b0e:	bf00      	nop
 8016b10:	20000184 	.word	0x20000184
 8016b14:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	d023      	beq.n	8016b68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016b24:	6878      	ldr	r0, [r7, #4]
 8016b26:	4798      	blx	r3
 8016b28:	e01e      	b.n	8016b68 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	681b      	ldr	r3, [r3, #0]
 8016b2e:	681b      	ldr	r3, [r3, #0]
 8016b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	d10f      	bne.n	8016b58 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8016b38:	687b      	ldr	r3, [r7, #4]
 8016b3a:	681b      	ldr	r3, [r3, #0]
 8016b3c:	681a      	ldr	r2, [r3, #0]
 8016b3e:	687b      	ldr	r3, [r7, #4]
 8016b40:	681b      	ldr	r3, [r3, #0]
 8016b42:	f022 0210 	bic.w	r2, r2, #16
 8016b46:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	2201      	movs	r2, #1
 8016b4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	2200      	movs	r2, #0
 8016b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016b5c:	2b00      	cmp	r3, #0
 8016b5e:	d003      	beq.n	8016b68 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016b64:	6878      	ldr	r0, [r7, #4]
 8016b66:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016b6c:	2b00      	cmp	r3, #0
 8016b6e:	d032      	beq.n	8016bd6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016b74:	f003 0301 	and.w	r3, r3, #1
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d022      	beq.n	8016bc2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	2205      	movs	r2, #5
 8016b80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	681b      	ldr	r3, [r3, #0]
 8016b88:	681a      	ldr	r2, [r3, #0]
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	681b      	ldr	r3, [r3, #0]
 8016b8e:	f022 0201 	bic.w	r2, r2, #1
 8016b92:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8016b94:	68bb      	ldr	r3, [r7, #8]
 8016b96:	3301      	adds	r3, #1
 8016b98:	60bb      	str	r3, [r7, #8]
 8016b9a:	697a      	ldr	r2, [r7, #20]
 8016b9c:	429a      	cmp	r2, r3
 8016b9e:	d307      	bcc.n	8016bb0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	681b      	ldr	r3, [r3, #0]
 8016ba4:	681b      	ldr	r3, [r3, #0]
 8016ba6:	f003 0301 	and.w	r3, r3, #1
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	d1f2      	bne.n	8016b94 <HAL_DMA_IRQHandler+0x2cc>
 8016bae:	e000      	b.n	8016bb2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8016bb0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	2201      	movs	r2, #1
 8016bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	2200      	movs	r2, #0
 8016bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d005      	beq.n	8016bd6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016bce:	6878      	ldr	r0, [r7, #4]
 8016bd0:	4798      	blx	r3
 8016bd2:	e000      	b.n	8016bd6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8016bd4:	bf00      	nop
    }
  }
}
 8016bd6:	3718      	adds	r7, #24
 8016bd8:	46bd      	mov	sp, r7
 8016bda:	bd80      	pop	{r7, pc}

08016bdc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8016bdc:	b480      	push	{r7}
 8016bde:	b083      	sub	sp, #12
 8016be0:	af00      	add	r7, sp, #0
 8016be2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016bea:	b2db      	uxtb	r3, r3
}
 8016bec:	4618      	mov	r0, r3
 8016bee:	370c      	adds	r7, #12
 8016bf0:	46bd      	mov	sp, r7
 8016bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bf6:	4770      	bx	lr

08016bf8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8016bf8:	b480      	push	{r7}
 8016bfa:	b085      	sub	sp, #20
 8016bfc:	af00      	add	r7, sp, #0
 8016bfe:	60f8      	str	r0, [r7, #12]
 8016c00:	60b9      	str	r1, [r7, #8]
 8016c02:	607a      	str	r2, [r7, #4]
 8016c04:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8016c06:	68fb      	ldr	r3, [r7, #12]
 8016c08:	681b      	ldr	r3, [r3, #0]
 8016c0a:	681a      	ldr	r2, [r3, #0]
 8016c0c:	68fb      	ldr	r3, [r7, #12]
 8016c0e:	681b      	ldr	r3, [r3, #0]
 8016c10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8016c14:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8016c16:	68fb      	ldr	r3, [r7, #12]
 8016c18:	681b      	ldr	r3, [r3, #0]
 8016c1a:	683a      	ldr	r2, [r7, #0]
 8016c1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8016c1e:	68fb      	ldr	r3, [r7, #12]
 8016c20:	689b      	ldr	r3, [r3, #8]
 8016c22:	2b40      	cmp	r3, #64	; 0x40
 8016c24:	d108      	bne.n	8016c38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8016c26:	68fb      	ldr	r3, [r7, #12]
 8016c28:	681b      	ldr	r3, [r3, #0]
 8016c2a:	687a      	ldr	r2, [r7, #4]
 8016c2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8016c2e:	68fb      	ldr	r3, [r7, #12]
 8016c30:	681b      	ldr	r3, [r3, #0]
 8016c32:	68ba      	ldr	r2, [r7, #8]
 8016c34:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8016c36:	e007      	b.n	8016c48 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8016c38:	68fb      	ldr	r3, [r7, #12]
 8016c3a:	681b      	ldr	r3, [r3, #0]
 8016c3c:	68ba      	ldr	r2, [r7, #8]
 8016c3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8016c40:	68fb      	ldr	r3, [r7, #12]
 8016c42:	681b      	ldr	r3, [r3, #0]
 8016c44:	687a      	ldr	r2, [r7, #4]
 8016c46:	60da      	str	r2, [r3, #12]
}
 8016c48:	bf00      	nop
 8016c4a:	3714      	adds	r7, #20
 8016c4c:	46bd      	mov	sp, r7
 8016c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c52:	4770      	bx	lr

08016c54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8016c54:	b480      	push	{r7}
 8016c56:	b085      	sub	sp, #20
 8016c58:	af00      	add	r7, sp, #0
 8016c5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	681b      	ldr	r3, [r3, #0]
 8016c60:	b2db      	uxtb	r3, r3
 8016c62:	3b10      	subs	r3, #16
 8016c64:	4a14      	ldr	r2, [pc, #80]	; (8016cb8 <DMA_CalcBaseAndBitshift+0x64>)
 8016c66:	fba2 2303 	umull	r2, r3, r2, r3
 8016c6a:	091b      	lsrs	r3, r3, #4
 8016c6c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8016c6e:	4a13      	ldr	r2, [pc, #76]	; (8016cbc <DMA_CalcBaseAndBitshift+0x68>)
 8016c70:	68fb      	ldr	r3, [r7, #12]
 8016c72:	4413      	add	r3, r2
 8016c74:	781b      	ldrb	r3, [r3, #0]
 8016c76:	461a      	mov	r2, r3
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8016c7c:	68fb      	ldr	r3, [r7, #12]
 8016c7e:	2b03      	cmp	r3, #3
 8016c80:	d909      	bls.n	8016c96 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	681b      	ldr	r3, [r3, #0]
 8016c86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8016c8a:	f023 0303 	bic.w	r3, r3, #3
 8016c8e:	1d1a      	adds	r2, r3, #4
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	659a      	str	r2, [r3, #88]	; 0x58
 8016c94:	e007      	b.n	8016ca6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	681b      	ldr	r3, [r3, #0]
 8016c9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8016c9e:	f023 0303 	bic.w	r3, r3, #3
 8016ca2:	687a      	ldr	r2, [r7, #4]
 8016ca4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8016caa:	4618      	mov	r0, r3
 8016cac:	3714      	adds	r7, #20
 8016cae:	46bd      	mov	sp, r7
 8016cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cb4:	4770      	bx	lr
 8016cb6:	bf00      	nop
 8016cb8:	aaaaaaab 	.word	0xaaaaaaab
 8016cbc:	08029acc 	.word	0x08029acc

08016cc0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8016cc0:	b480      	push	{r7}
 8016cc2:	b085      	sub	sp, #20
 8016cc4:	af00      	add	r7, sp, #0
 8016cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016cc8:	2300      	movs	r3, #0
 8016cca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016cd0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	699b      	ldr	r3, [r3, #24]
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d11f      	bne.n	8016d1a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8016cda:	68bb      	ldr	r3, [r7, #8]
 8016cdc:	2b03      	cmp	r3, #3
 8016cde:	d856      	bhi.n	8016d8e <DMA_CheckFifoParam+0xce>
 8016ce0:	a201      	add	r2, pc, #4	; (adr r2, 8016ce8 <DMA_CheckFifoParam+0x28>)
 8016ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ce6:	bf00      	nop
 8016ce8:	08016cf9 	.word	0x08016cf9
 8016cec:	08016d0b 	.word	0x08016d0b
 8016cf0:	08016cf9 	.word	0x08016cf9
 8016cf4:	08016d8f 	.word	0x08016d8f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016cfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	d046      	beq.n	8016d92 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8016d04:	2301      	movs	r3, #1
 8016d06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8016d08:	e043      	b.n	8016d92 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8016d12:	d140      	bne.n	8016d96 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8016d14:	2301      	movs	r3, #1
 8016d16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8016d18:	e03d      	b.n	8016d96 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	699b      	ldr	r3, [r3, #24]
 8016d1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8016d22:	d121      	bne.n	8016d68 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8016d24:	68bb      	ldr	r3, [r7, #8]
 8016d26:	2b03      	cmp	r3, #3
 8016d28:	d837      	bhi.n	8016d9a <DMA_CheckFifoParam+0xda>
 8016d2a:	a201      	add	r2, pc, #4	; (adr r2, 8016d30 <DMA_CheckFifoParam+0x70>)
 8016d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d30:	08016d41 	.word	0x08016d41
 8016d34:	08016d47 	.word	0x08016d47
 8016d38:	08016d41 	.word	0x08016d41
 8016d3c:	08016d59 	.word	0x08016d59
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8016d40:	2301      	movs	r3, #1
 8016d42:	73fb      	strb	r3, [r7, #15]
      break;
 8016d44:	e030      	b.n	8016da8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	d025      	beq.n	8016d9e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8016d52:	2301      	movs	r3, #1
 8016d54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8016d56:	e022      	b.n	8016d9e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8016d60:	d11f      	bne.n	8016da2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8016d62:	2301      	movs	r3, #1
 8016d64:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8016d66:	e01c      	b.n	8016da2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8016d68:	68bb      	ldr	r3, [r7, #8]
 8016d6a:	2b02      	cmp	r3, #2
 8016d6c:	d903      	bls.n	8016d76 <DMA_CheckFifoParam+0xb6>
 8016d6e:	68bb      	ldr	r3, [r7, #8]
 8016d70:	2b03      	cmp	r3, #3
 8016d72:	d003      	beq.n	8016d7c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8016d74:	e018      	b.n	8016da8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8016d76:	2301      	movs	r3, #1
 8016d78:	73fb      	strb	r3, [r7, #15]
      break;
 8016d7a:	e015      	b.n	8016da8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8016d84:	2b00      	cmp	r3, #0
 8016d86:	d00e      	beq.n	8016da6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8016d88:	2301      	movs	r3, #1
 8016d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8016d8c:	e00b      	b.n	8016da6 <DMA_CheckFifoParam+0xe6>
      break;
 8016d8e:	bf00      	nop
 8016d90:	e00a      	b.n	8016da8 <DMA_CheckFifoParam+0xe8>
      break;
 8016d92:	bf00      	nop
 8016d94:	e008      	b.n	8016da8 <DMA_CheckFifoParam+0xe8>
      break;
 8016d96:	bf00      	nop
 8016d98:	e006      	b.n	8016da8 <DMA_CheckFifoParam+0xe8>
      break;
 8016d9a:	bf00      	nop
 8016d9c:	e004      	b.n	8016da8 <DMA_CheckFifoParam+0xe8>
      break;
 8016d9e:	bf00      	nop
 8016da0:	e002      	b.n	8016da8 <DMA_CheckFifoParam+0xe8>
      break;   
 8016da2:	bf00      	nop
 8016da4:	e000      	b.n	8016da8 <DMA_CheckFifoParam+0xe8>
      break;
 8016da6:	bf00      	nop
    }
  } 
  
  return status; 
 8016da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8016daa:	4618      	mov	r0, r3
 8016dac:	3714      	adds	r7, #20
 8016dae:	46bd      	mov	sp, r7
 8016db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016db4:	4770      	bx	lr
 8016db6:	bf00      	nop

08016db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8016db8:	b480      	push	{r7}
 8016dba:	b089      	sub	sp, #36	; 0x24
 8016dbc:	af00      	add	r7, sp, #0
 8016dbe:	6078      	str	r0, [r7, #4]
 8016dc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8016dc2:	2300      	movs	r3, #0
 8016dc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8016dc6:	2300      	movs	r3, #0
 8016dc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8016dca:	2300      	movs	r3, #0
 8016dcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8016dce:	2300      	movs	r3, #0
 8016dd0:	61fb      	str	r3, [r7, #28]
 8016dd2:	e159      	b.n	8017088 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8016dd4:	2201      	movs	r2, #1
 8016dd6:	69fb      	ldr	r3, [r7, #28]
 8016dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8016ddc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8016dde:	683b      	ldr	r3, [r7, #0]
 8016de0:	681b      	ldr	r3, [r3, #0]
 8016de2:	697a      	ldr	r2, [r7, #20]
 8016de4:	4013      	ands	r3, r2
 8016de6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8016de8:	693a      	ldr	r2, [r7, #16]
 8016dea:	697b      	ldr	r3, [r7, #20]
 8016dec:	429a      	cmp	r2, r3
 8016dee:	f040 8148 	bne.w	8017082 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8016df2:	683b      	ldr	r3, [r7, #0]
 8016df4:	685b      	ldr	r3, [r3, #4]
 8016df6:	f003 0303 	and.w	r3, r3, #3
 8016dfa:	2b01      	cmp	r3, #1
 8016dfc:	d005      	beq.n	8016e0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8016dfe:	683b      	ldr	r3, [r7, #0]
 8016e00:	685b      	ldr	r3, [r3, #4]
 8016e02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8016e06:	2b02      	cmp	r3, #2
 8016e08:	d130      	bne.n	8016e6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	689b      	ldr	r3, [r3, #8]
 8016e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8016e10:	69fb      	ldr	r3, [r7, #28]
 8016e12:	005b      	lsls	r3, r3, #1
 8016e14:	2203      	movs	r2, #3
 8016e16:	fa02 f303 	lsl.w	r3, r2, r3
 8016e1a:	43db      	mvns	r3, r3
 8016e1c:	69ba      	ldr	r2, [r7, #24]
 8016e1e:	4013      	ands	r3, r2
 8016e20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8016e22:	683b      	ldr	r3, [r7, #0]
 8016e24:	68da      	ldr	r2, [r3, #12]
 8016e26:	69fb      	ldr	r3, [r7, #28]
 8016e28:	005b      	lsls	r3, r3, #1
 8016e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8016e2e:	69ba      	ldr	r2, [r7, #24]
 8016e30:	4313      	orrs	r3, r2
 8016e32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8016e34:	687b      	ldr	r3, [r7, #4]
 8016e36:	69ba      	ldr	r2, [r7, #24]
 8016e38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	685b      	ldr	r3, [r3, #4]
 8016e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8016e40:	2201      	movs	r2, #1
 8016e42:	69fb      	ldr	r3, [r7, #28]
 8016e44:	fa02 f303 	lsl.w	r3, r2, r3
 8016e48:	43db      	mvns	r3, r3
 8016e4a:	69ba      	ldr	r2, [r7, #24]
 8016e4c:	4013      	ands	r3, r2
 8016e4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8016e50:	683b      	ldr	r3, [r7, #0]
 8016e52:	685b      	ldr	r3, [r3, #4]
 8016e54:	091b      	lsrs	r3, r3, #4
 8016e56:	f003 0201 	and.w	r2, r3, #1
 8016e5a:	69fb      	ldr	r3, [r7, #28]
 8016e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8016e60:	69ba      	ldr	r2, [r7, #24]
 8016e62:	4313      	orrs	r3, r2
 8016e64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	69ba      	ldr	r2, [r7, #24]
 8016e6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8016e6c:	683b      	ldr	r3, [r7, #0]
 8016e6e:	685b      	ldr	r3, [r3, #4]
 8016e70:	f003 0303 	and.w	r3, r3, #3
 8016e74:	2b03      	cmp	r3, #3
 8016e76:	d017      	beq.n	8016ea8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	68db      	ldr	r3, [r3, #12]
 8016e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8016e7e:	69fb      	ldr	r3, [r7, #28]
 8016e80:	005b      	lsls	r3, r3, #1
 8016e82:	2203      	movs	r2, #3
 8016e84:	fa02 f303 	lsl.w	r3, r2, r3
 8016e88:	43db      	mvns	r3, r3
 8016e8a:	69ba      	ldr	r2, [r7, #24]
 8016e8c:	4013      	ands	r3, r2
 8016e8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8016e90:	683b      	ldr	r3, [r7, #0]
 8016e92:	689a      	ldr	r2, [r3, #8]
 8016e94:	69fb      	ldr	r3, [r7, #28]
 8016e96:	005b      	lsls	r3, r3, #1
 8016e98:	fa02 f303 	lsl.w	r3, r2, r3
 8016e9c:	69ba      	ldr	r2, [r7, #24]
 8016e9e:	4313      	orrs	r3, r2
 8016ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8016ea2:	687b      	ldr	r3, [r7, #4]
 8016ea4:	69ba      	ldr	r2, [r7, #24]
 8016ea6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8016ea8:	683b      	ldr	r3, [r7, #0]
 8016eaa:	685b      	ldr	r3, [r3, #4]
 8016eac:	f003 0303 	and.w	r3, r3, #3
 8016eb0:	2b02      	cmp	r3, #2
 8016eb2:	d123      	bne.n	8016efc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8016eb4:	69fb      	ldr	r3, [r7, #28]
 8016eb6:	08da      	lsrs	r2, r3, #3
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	3208      	adds	r2, #8
 8016ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8016ec2:	69fb      	ldr	r3, [r7, #28]
 8016ec4:	f003 0307 	and.w	r3, r3, #7
 8016ec8:	009b      	lsls	r3, r3, #2
 8016eca:	220f      	movs	r2, #15
 8016ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8016ed0:	43db      	mvns	r3, r3
 8016ed2:	69ba      	ldr	r2, [r7, #24]
 8016ed4:	4013      	ands	r3, r2
 8016ed6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8016ed8:	683b      	ldr	r3, [r7, #0]
 8016eda:	691a      	ldr	r2, [r3, #16]
 8016edc:	69fb      	ldr	r3, [r7, #28]
 8016ede:	f003 0307 	and.w	r3, r3, #7
 8016ee2:	009b      	lsls	r3, r3, #2
 8016ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8016ee8:	69ba      	ldr	r2, [r7, #24]
 8016eea:	4313      	orrs	r3, r2
 8016eec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8016eee:	69fb      	ldr	r3, [r7, #28]
 8016ef0:	08da      	lsrs	r2, r3, #3
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	3208      	adds	r2, #8
 8016ef6:	69b9      	ldr	r1, [r7, #24]
 8016ef8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	681b      	ldr	r3, [r3, #0]
 8016f00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8016f02:	69fb      	ldr	r3, [r7, #28]
 8016f04:	005b      	lsls	r3, r3, #1
 8016f06:	2203      	movs	r2, #3
 8016f08:	fa02 f303 	lsl.w	r3, r2, r3
 8016f0c:	43db      	mvns	r3, r3
 8016f0e:	69ba      	ldr	r2, [r7, #24]
 8016f10:	4013      	ands	r3, r2
 8016f12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8016f14:	683b      	ldr	r3, [r7, #0]
 8016f16:	685b      	ldr	r3, [r3, #4]
 8016f18:	f003 0203 	and.w	r2, r3, #3
 8016f1c:	69fb      	ldr	r3, [r7, #28]
 8016f1e:	005b      	lsls	r3, r3, #1
 8016f20:	fa02 f303 	lsl.w	r3, r2, r3
 8016f24:	69ba      	ldr	r2, [r7, #24]
 8016f26:	4313      	orrs	r3, r2
 8016f28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	69ba      	ldr	r2, [r7, #24]
 8016f2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8016f30:	683b      	ldr	r3, [r7, #0]
 8016f32:	685b      	ldr	r3, [r3, #4]
 8016f34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8016f38:	2b00      	cmp	r3, #0
 8016f3a:	f000 80a2 	beq.w	8017082 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8016f3e:	2300      	movs	r3, #0
 8016f40:	60fb      	str	r3, [r7, #12]
 8016f42:	4b57      	ldr	r3, [pc, #348]	; (80170a0 <HAL_GPIO_Init+0x2e8>)
 8016f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016f46:	4a56      	ldr	r2, [pc, #344]	; (80170a0 <HAL_GPIO_Init+0x2e8>)
 8016f48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8016f4e:	4b54      	ldr	r3, [pc, #336]	; (80170a0 <HAL_GPIO_Init+0x2e8>)
 8016f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016f52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016f56:	60fb      	str	r3, [r7, #12]
 8016f58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8016f5a:	4a52      	ldr	r2, [pc, #328]	; (80170a4 <HAL_GPIO_Init+0x2ec>)
 8016f5c:	69fb      	ldr	r3, [r7, #28]
 8016f5e:	089b      	lsrs	r3, r3, #2
 8016f60:	3302      	adds	r3, #2
 8016f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8016f68:	69fb      	ldr	r3, [r7, #28]
 8016f6a:	f003 0303 	and.w	r3, r3, #3
 8016f6e:	009b      	lsls	r3, r3, #2
 8016f70:	220f      	movs	r2, #15
 8016f72:	fa02 f303 	lsl.w	r3, r2, r3
 8016f76:	43db      	mvns	r3, r3
 8016f78:	69ba      	ldr	r2, [r7, #24]
 8016f7a:	4013      	ands	r3, r2
 8016f7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	4a49      	ldr	r2, [pc, #292]	; (80170a8 <HAL_GPIO_Init+0x2f0>)
 8016f82:	4293      	cmp	r3, r2
 8016f84:	d019      	beq.n	8016fba <HAL_GPIO_Init+0x202>
 8016f86:	687b      	ldr	r3, [r7, #4]
 8016f88:	4a48      	ldr	r2, [pc, #288]	; (80170ac <HAL_GPIO_Init+0x2f4>)
 8016f8a:	4293      	cmp	r3, r2
 8016f8c:	d013      	beq.n	8016fb6 <HAL_GPIO_Init+0x1fe>
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	4a47      	ldr	r2, [pc, #284]	; (80170b0 <HAL_GPIO_Init+0x2f8>)
 8016f92:	4293      	cmp	r3, r2
 8016f94:	d00d      	beq.n	8016fb2 <HAL_GPIO_Init+0x1fa>
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	4a46      	ldr	r2, [pc, #280]	; (80170b4 <HAL_GPIO_Init+0x2fc>)
 8016f9a:	4293      	cmp	r3, r2
 8016f9c:	d007      	beq.n	8016fae <HAL_GPIO_Init+0x1f6>
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	4a45      	ldr	r2, [pc, #276]	; (80170b8 <HAL_GPIO_Init+0x300>)
 8016fa2:	4293      	cmp	r3, r2
 8016fa4:	d101      	bne.n	8016faa <HAL_GPIO_Init+0x1f2>
 8016fa6:	2304      	movs	r3, #4
 8016fa8:	e008      	b.n	8016fbc <HAL_GPIO_Init+0x204>
 8016faa:	2307      	movs	r3, #7
 8016fac:	e006      	b.n	8016fbc <HAL_GPIO_Init+0x204>
 8016fae:	2303      	movs	r3, #3
 8016fb0:	e004      	b.n	8016fbc <HAL_GPIO_Init+0x204>
 8016fb2:	2302      	movs	r3, #2
 8016fb4:	e002      	b.n	8016fbc <HAL_GPIO_Init+0x204>
 8016fb6:	2301      	movs	r3, #1
 8016fb8:	e000      	b.n	8016fbc <HAL_GPIO_Init+0x204>
 8016fba:	2300      	movs	r3, #0
 8016fbc:	69fa      	ldr	r2, [r7, #28]
 8016fbe:	f002 0203 	and.w	r2, r2, #3
 8016fc2:	0092      	lsls	r2, r2, #2
 8016fc4:	4093      	lsls	r3, r2
 8016fc6:	69ba      	ldr	r2, [r7, #24]
 8016fc8:	4313      	orrs	r3, r2
 8016fca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8016fcc:	4935      	ldr	r1, [pc, #212]	; (80170a4 <HAL_GPIO_Init+0x2ec>)
 8016fce:	69fb      	ldr	r3, [r7, #28]
 8016fd0:	089b      	lsrs	r3, r3, #2
 8016fd2:	3302      	adds	r3, #2
 8016fd4:	69ba      	ldr	r2, [r7, #24]
 8016fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8016fda:	4b38      	ldr	r3, [pc, #224]	; (80170bc <HAL_GPIO_Init+0x304>)
 8016fdc:	689b      	ldr	r3, [r3, #8]
 8016fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8016fe0:	693b      	ldr	r3, [r7, #16]
 8016fe2:	43db      	mvns	r3, r3
 8016fe4:	69ba      	ldr	r2, [r7, #24]
 8016fe6:	4013      	ands	r3, r2
 8016fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8016fea:	683b      	ldr	r3, [r7, #0]
 8016fec:	685b      	ldr	r3, [r3, #4]
 8016fee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	d003      	beq.n	8016ffe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8016ff6:	69ba      	ldr	r2, [r7, #24]
 8016ff8:	693b      	ldr	r3, [r7, #16]
 8016ffa:	4313      	orrs	r3, r2
 8016ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8016ffe:	4a2f      	ldr	r2, [pc, #188]	; (80170bc <HAL_GPIO_Init+0x304>)
 8017000:	69bb      	ldr	r3, [r7, #24]
 8017002:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8017004:	4b2d      	ldr	r3, [pc, #180]	; (80170bc <HAL_GPIO_Init+0x304>)
 8017006:	68db      	ldr	r3, [r3, #12]
 8017008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801700a:	693b      	ldr	r3, [r7, #16]
 801700c:	43db      	mvns	r3, r3
 801700e:	69ba      	ldr	r2, [r7, #24]
 8017010:	4013      	ands	r3, r2
 8017012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8017014:	683b      	ldr	r3, [r7, #0]
 8017016:	685b      	ldr	r3, [r3, #4]
 8017018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801701c:	2b00      	cmp	r3, #0
 801701e:	d003      	beq.n	8017028 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8017020:	69ba      	ldr	r2, [r7, #24]
 8017022:	693b      	ldr	r3, [r7, #16]
 8017024:	4313      	orrs	r3, r2
 8017026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8017028:	4a24      	ldr	r2, [pc, #144]	; (80170bc <HAL_GPIO_Init+0x304>)
 801702a:	69bb      	ldr	r3, [r7, #24]
 801702c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 801702e:	4b23      	ldr	r3, [pc, #140]	; (80170bc <HAL_GPIO_Init+0x304>)
 8017030:	685b      	ldr	r3, [r3, #4]
 8017032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8017034:	693b      	ldr	r3, [r7, #16]
 8017036:	43db      	mvns	r3, r3
 8017038:	69ba      	ldr	r2, [r7, #24]
 801703a:	4013      	ands	r3, r2
 801703c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801703e:	683b      	ldr	r3, [r7, #0]
 8017040:	685b      	ldr	r3, [r3, #4]
 8017042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017046:	2b00      	cmp	r3, #0
 8017048:	d003      	beq.n	8017052 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 801704a:	69ba      	ldr	r2, [r7, #24]
 801704c:	693b      	ldr	r3, [r7, #16]
 801704e:	4313      	orrs	r3, r2
 8017050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8017052:	4a1a      	ldr	r2, [pc, #104]	; (80170bc <HAL_GPIO_Init+0x304>)
 8017054:	69bb      	ldr	r3, [r7, #24]
 8017056:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8017058:	4b18      	ldr	r3, [pc, #96]	; (80170bc <HAL_GPIO_Init+0x304>)
 801705a:	681b      	ldr	r3, [r3, #0]
 801705c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801705e:	693b      	ldr	r3, [r7, #16]
 8017060:	43db      	mvns	r3, r3
 8017062:	69ba      	ldr	r2, [r7, #24]
 8017064:	4013      	ands	r3, r2
 8017066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8017068:	683b      	ldr	r3, [r7, #0]
 801706a:	685b      	ldr	r3, [r3, #4]
 801706c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8017070:	2b00      	cmp	r3, #0
 8017072:	d003      	beq.n	801707c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8017074:	69ba      	ldr	r2, [r7, #24]
 8017076:	693b      	ldr	r3, [r7, #16]
 8017078:	4313      	orrs	r3, r2
 801707a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801707c:	4a0f      	ldr	r2, [pc, #60]	; (80170bc <HAL_GPIO_Init+0x304>)
 801707e:	69bb      	ldr	r3, [r7, #24]
 8017080:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8017082:	69fb      	ldr	r3, [r7, #28]
 8017084:	3301      	adds	r3, #1
 8017086:	61fb      	str	r3, [r7, #28]
 8017088:	69fb      	ldr	r3, [r7, #28]
 801708a:	2b0f      	cmp	r3, #15
 801708c:	f67f aea2 	bls.w	8016dd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8017090:	bf00      	nop
 8017092:	bf00      	nop
 8017094:	3724      	adds	r7, #36	; 0x24
 8017096:	46bd      	mov	sp, r7
 8017098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801709c:	4770      	bx	lr
 801709e:	bf00      	nop
 80170a0:	40023800 	.word	0x40023800
 80170a4:	40013800 	.word	0x40013800
 80170a8:	40020000 	.word	0x40020000
 80170ac:	40020400 	.word	0x40020400
 80170b0:	40020800 	.word	0x40020800
 80170b4:	40020c00 	.word	0x40020c00
 80170b8:	40021000 	.word	0x40021000
 80170bc:	40013c00 	.word	0x40013c00

080170c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80170c0:	b480      	push	{r7}
 80170c2:	b085      	sub	sp, #20
 80170c4:	af00      	add	r7, sp, #0
 80170c6:	6078      	str	r0, [r7, #4]
 80170c8:	460b      	mov	r3, r1
 80170ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	691a      	ldr	r2, [r3, #16]
 80170d0:	887b      	ldrh	r3, [r7, #2]
 80170d2:	4013      	ands	r3, r2
 80170d4:	2b00      	cmp	r3, #0
 80170d6:	d002      	beq.n	80170de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80170d8:	2301      	movs	r3, #1
 80170da:	73fb      	strb	r3, [r7, #15]
 80170dc:	e001      	b.n	80170e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80170de:	2300      	movs	r3, #0
 80170e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80170e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80170e4:	4618      	mov	r0, r3
 80170e6:	3714      	adds	r7, #20
 80170e8:	46bd      	mov	sp, r7
 80170ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170ee:	4770      	bx	lr

080170f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80170f0:	b480      	push	{r7}
 80170f2:	b083      	sub	sp, #12
 80170f4:	af00      	add	r7, sp, #0
 80170f6:	6078      	str	r0, [r7, #4]
 80170f8:	460b      	mov	r3, r1
 80170fa:	807b      	strh	r3, [r7, #2]
 80170fc:	4613      	mov	r3, r2
 80170fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8017100:	787b      	ldrb	r3, [r7, #1]
 8017102:	2b00      	cmp	r3, #0
 8017104:	d003      	beq.n	801710e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8017106:	887a      	ldrh	r2, [r7, #2]
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 801710c:	e003      	b.n	8017116 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801710e:	887b      	ldrh	r3, [r7, #2]
 8017110:	041a      	lsls	r2, r3, #16
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	619a      	str	r2, [r3, #24]
}
 8017116:	bf00      	nop
 8017118:	370c      	adds	r7, #12
 801711a:	46bd      	mov	sp, r7
 801711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017120:	4770      	bx	lr
	...

08017124 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8017124:	b580      	push	{r7, lr}
 8017126:	b082      	sub	sp, #8
 8017128:	af00      	add	r7, sp, #0
 801712a:	4603      	mov	r3, r0
 801712c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 801712e:	4b08      	ldr	r3, [pc, #32]	; (8017150 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8017130:	695a      	ldr	r2, [r3, #20]
 8017132:	88fb      	ldrh	r3, [r7, #6]
 8017134:	4013      	ands	r3, r2
 8017136:	2b00      	cmp	r3, #0
 8017138:	d006      	beq.n	8017148 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801713a:	4a05      	ldr	r2, [pc, #20]	; (8017150 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801713c:	88fb      	ldrh	r3, [r7, #6]
 801713e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8017140:	88fb      	ldrh	r3, [r7, #6]
 8017142:	4618      	mov	r0, r3
 8017144:	f7ec fdc0 	bl	8003cc8 <HAL_GPIO_EXTI_Callback>
  }
}
 8017148:	bf00      	nop
 801714a:	3708      	adds	r7, #8
 801714c:	46bd      	mov	sp, r7
 801714e:	bd80      	pop	{r7, pc}
 8017150:	40013c00 	.word	0x40013c00

08017154 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8017154:	b580      	push	{r7, lr}
 8017156:	b084      	sub	sp, #16
 8017158:	af00      	add	r7, sp, #0
 801715a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	2b00      	cmp	r3, #0
 8017160:	d101      	bne.n	8017166 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8017162:	2301      	movs	r3, #1
 8017164:	e12b      	b.n	80173be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801716c:	b2db      	uxtb	r3, r3
 801716e:	2b00      	cmp	r3, #0
 8017170:	d106      	bne.n	8017180 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	2200      	movs	r2, #0
 8017176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 801717a:	6878      	ldr	r0, [r7, #4]
 801717c:	f7fe fcbc 	bl	8015af8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	2224      	movs	r2, #36	; 0x24
 8017184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	681b      	ldr	r3, [r3, #0]
 801718c:	681a      	ldr	r2, [r3, #0]
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	681b      	ldr	r3, [r3, #0]
 8017192:	f022 0201 	bic.w	r2, r2, #1
 8017196:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	681b      	ldr	r3, [r3, #0]
 801719c:	681a      	ldr	r2, [r3, #0]
 801719e:	687b      	ldr	r3, [r7, #4]
 80171a0:	681b      	ldr	r3, [r3, #0]
 80171a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80171a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80171a8:	687b      	ldr	r3, [r7, #4]
 80171aa:	681b      	ldr	r3, [r3, #0]
 80171ac:	681a      	ldr	r2, [r3, #0]
 80171ae:	687b      	ldr	r3, [r7, #4]
 80171b0:	681b      	ldr	r3, [r3, #0]
 80171b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80171b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80171b8:	f003 fa9a 	bl	801a6f0 <HAL_RCC_GetPCLK1Freq>
 80171bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	685b      	ldr	r3, [r3, #4]
 80171c2:	4a81      	ldr	r2, [pc, #516]	; (80173c8 <HAL_I2C_Init+0x274>)
 80171c4:	4293      	cmp	r3, r2
 80171c6:	d807      	bhi.n	80171d8 <HAL_I2C_Init+0x84>
 80171c8:	68fb      	ldr	r3, [r7, #12]
 80171ca:	4a80      	ldr	r2, [pc, #512]	; (80173cc <HAL_I2C_Init+0x278>)
 80171cc:	4293      	cmp	r3, r2
 80171ce:	bf94      	ite	ls
 80171d0:	2301      	movls	r3, #1
 80171d2:	2300      	movhi	r3, #0
 80171d4:	b2db      	uxtb	r3, r3
 80171d6:	e006      	b.n	80171e6 <HAL_I2C_Init+0x92>
 80171d8:	68fb      	ldr	r3, [r7, #12]
 80171da:	4a7d      	ldr	r2, [pc, #500]	; (80173d0 <HAL_I2C_Init+0x27c>)
 80171dc:	4293      	cmp	r3, r2
 80171de:	bf94      	ite	ls
 80171e0:	2301      	movls	r3, #1
 80171e2:	2300      	movhi	r3, #0
 80171e4:	b2db      	uxtb	r3, r3
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	d001      	beq.n	80171ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80171ea:	2301      	movs	r3, #1
 80171ec:	e0e7      	b.n	80173be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80171ee:	68fb      	ldr	r3, [r7, #12]
 80171f0:	4a78      	ldr	r2, [pc, #480]	; (80173d4 <HAL_I2C_Init+0x280>)
 80171f2:	fba2 2303 	umull	r2, r3, r2, r3
 80171f6:	0c9b      	lsrs	r3, r3, #18
 80171f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	681b      	ldr	r3, [r3, #0]
 80171fe:	685b      	ldr	r3, [r3, #4]
 8017200:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	681b      	ldr	r3, [r3, #0]
 8017208:	68ba      	ldr	r2, [r7, #8]
 801720a:	430a      	orrs	r2, r1
 801720c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	681b      	ldr	r3, [r3, #0]
 8017212:	6a1b      	ldr	r3, [r3, #32]
 8017214:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	685b      	ldr	r3, [r3, #4]
 801721c:	4a6a      	ldr	r2, [pc, #424]	; (80173c8 <HAL_I2C_Init+0x274>)
 801721e:	4293      	cmp	r3, r2
 8017220:	d802      	bhi.n	8017228 <HAL_I2C_Init+0xd4>
 8017222:	68bb      	ldr	r3, [r7, #8]
 8017224:	3301      	adds	r3, #1
 8017226:	e009      	b.n	801723c <HAL_I2C_Init+0xe8>
 8017228:	68bb      	ldr	r3, [r7, #8]
 801722a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801722e:	fb02 f303 	mul.w	r3, r2, r3
 8017232:	4a69      	ldr	r2, [pc, #420]	; (80173d8 <HAL_I2C_Init+0x284>)
 8017234:	fba2 2303 	umull	r2, r3, r2, r3
 8017238:	099b      	lsrs	r3, r3, #6
 801723a:	3301      	adds	r3, #1
 801723c:	687a      	ldr	r2, [r7, #4]
 801723e:	6812      	ldr	r2, [r2, #0]
 8017240:	430b      	orrs	r3, r1
 8017242:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8017244:	687b      	ldr	r3, [r7, #4]
 8017246:	681b      	ldr	r3, [r3, #0]
 8017248:	69db      	ldr	r3, [r3, #28]
 801724a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 801724e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	685b      	ldr	r3, [r3, #4]
 8017256:	495c      	ldr	r1, [pc, #368]	; (80173c8 <HAL_I2C_Init+0x274>)
 8017258:	428b      	cmp	r3, r1
 801725a:	d819      	bhi.n	8017290 <HAL_I2C_Init+0x13c>
 801725c:	68fb      	ldr	r3, [r7, #12]
 801725e:	1e59      	subs	r1, r3, #1
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	685b      	ldr	r3, [r3, #4]
 8017264:	005b      	lsls	r3, r3, #1
 8017266:	fbb1 f3f3 	udiv	r3, r1, r3
 801726a:	1c59      	adds	r1, r3, #1
 801726c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8017270:	400b      	ands	r3, r1
 8017272:	2b00      	cmp	r3, #0
 8017274:	d00a      	beq.n	801728c <HAL_I2C_Init+0x138>
 8017276:	68fb      	ldr	r3, [r7, #12]
 8017278:	1e59      	subs	r1, r3, #1
 801727a:	687b      	ldr	r3, [r7, #4]
 801727c:	685b      	ldr	r3, [r3, #4]
 801727e:	005b      	lsls	r3, r3, #1
 8017280:	fbb1 f3f3 	udiv	r3, r1, r3
 8017284:	3301      	adds	r3, #1
 8017286:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801728a:	e051      	b.n	8017330 <HAL_I2C_Init+0x1dc>
 801728c:	2304      	movs	r3, #4
 801728e:	e04f      	b.n	8017330 <HAL_I2C_Init+0x1dc>
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	689b      	ldr	r3, [r3, #8]
 8017294:	2b00      	cmp	r3, #0
 8017296:	d111      	bne.n	80172bc <HAL_I2C_Init+0x168>
 8017298:	68fb      	ldr	r3, [r7, #12]
 801729a:	1e58      	subs	r0, r3, #1
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	6859      	ldr	r1, [r3, #4]
 80172a0:	460b      	mov	r3, r1
 80172a2:	005b      	lsls	r3, r3, #1
 80172a4:	440b      	add	r3, r1
 80172a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80172aa:	3301      	adds	r3, #1
 80172ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80172b0:	2b00      	cmp	r3, #0
 80172b2:	bf0c      	ite	eq
 80172b4:	2301      	moveq	r3, #1
 80172b6:	2300      	movne	r3, #0
 80172b8:	b2db      	uxtb	r3, r3
 80172ba:	e012      	b.n	80172e2 <HAL_I2C_Init+0x18e>
 80172bc:	68fb      	ldr	r3, [r7, #12]
 80172be:	1e58      	subs	r0, r3, #1
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	6859      	ldr	r1, [r3, #4]
 80172c4:	460b      	mov	r3, r1
 80172c6:	009b      	lsls	r3, r3, #2
 80172c8:	440b      	add	r3, r1
 80172ca:	0099      	lsls	r1, r3, #2
 80172cc:	440b      	add	r3, r1
 80172ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80172d2:	3301      	adds	r3, #1
 80172d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80172d8:	2b00      	cmp	r3, #0
 80172da:	bf0c      	ite	eq
 80172dc:	2301      	moveq	r3, #1
 80172de:	2300      	movne	r3, #0
 80172e0:	b2db      	uxtb	r3, r3
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	d001      	beq.n	80172ea <HAL_I2C_Init+0x196>
 80172e6:	2301      	movs	r3, #1
 80172e8:	e022      	b.n	8017330 <HAL_I2C_Init+0x1dc>
 80172ea:	687b      	ldr	r3, [r7, #4]
 80172ec:	689b      	ldr	r3, [r3, #8]
 80172ee:	2b00      	cmp	r3, #0
 80172f0:	d10e      	bne.n	8017310 <HAL_I2C_Init+0x1bc>
 80172f2:	68fb      	ldr	r3, [r7, #12]
 80172f4:	1e58      	subs	r0, r3, #1
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	6859      	ldr	r1, [r3, #4]
 80172fa:	460b      	mov	r3, r1
 80172fc:	005b      	lsls	r3, r3, #1
 80172fe:	440b      	add	r3, r1
 8017300:	fbb0 f3f3 	udiv	r3, r0, r3
 8017304:	3301      	adds	r3, #1
 8017306:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801730a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801730e:	e00f      	b.n	8017330 <HAL_I2C_Init+0x1dc>
 8017310:	68fb      	ldr	r3, [r7, #12]
 8017312:	1e58      	subs	r0, r3, #1
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	6859      	ldr	r1, [r3, #4]
 8017318:	460b      	mov	r3, r1
 801731a:	009b      	lsls	r3, r3, #2
 801731c:	440b      	add	r3, r1
 801731e:	0099      	lsls	r1, r3, #2
 8017320:	440b      	add	r3, r1
 8017322:	fbb0 f3f3 	udiv	r3, r0, r3
 8017326:	3301      	adds	r3, #1
 8017328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801732c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8017330:	6879      	ldr	r1, [r7, #4]
 8017332:	6809      	ldr	r1, [r1, #0]
 8017334:	4313      	orrs	r3, r2
 8017336:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8017338:	687b      	ldr	r3, [r7, #4]
 801733a:	681b      	ldr	r3, [r3, #0]
 801733c:	681b      	ldr	r3, [r3, #0]
 801733e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	69da      	ldr	r2, [r3, #28]
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	6a1b      	ldr	r3, [r3, #32]
 801734a:	431a      	orrs	r2, r3
 801734c:	687b      	ldr	r3, [r7, #4]
 801734e:	681b      	ldr	r3, [r3, #0]
 8017350:	430a      	orrs	r2, r1
 8017352:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	681b      	ldr	r3, [r3, #0]
 8017358:	689b      	ldr	r3, [r3, #8]
 801735a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 801735e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8017362:	687a      	ldr	r2, [r7, #4]
 8017364:	6911      	ldr	r1, [r2, #16]
 8017366:	687a      	ldr	r2, [r7, #4]
 8017368:	68d2      	ldr	r2, [r2, #12]
 801736a:	4311      	orrs	r1, r2
 801736c:	687a      	ldr	r2, [r7, #4]
 801736e:	6812      	ldr	r2, [r2, #0]
 8017370:	430b      	orrs	r3, r1
 8017372:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	681b      	ldr	r3, [r3, #0]
 8017378:	68db      	ldr	r3, [r3, #12]
 801737a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	695a      	ldr	r2, [r3, #20]
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	699b      	ldr	r3, [r3, #24]
 8017386:	431a      	orrs	r2, r3
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	681b      	ldr	r3, [r3, #0]
 801738c:	430a      	orrs	r2, r1
 801738e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	681b      	ldr	r3, [r3, #0]
 8017394:	681a      	ldr	r2, [r3, #0]
 8017396:	687b      	ldr	r3, [r7, #4]
 8017398:	681b      	ldr	r3, [r3, #0]
 801739a:	f042 0201 	orr.w	r2, r2, #1
 801739e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	2200      	movs	r2, #0
 80173a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	2220      	movs	r2, #32
 80173aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80173ae:	687b      	ldr	r3, [r7, #4]
 80173b0:	2200      	movs	r2, #0
 80173b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	2200      	movs	r2, #0
 80173b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80173bc:	2300      	movs	r3, #0
}
 80173be:	4618      	mov	r0, r3
 80173c0:	3710      	adds	r7, #16
 80173c2:	46bd      	mov	sp, r7
 80173c4:	bd80      	pop	{r7, pc}
 80173c6:	bf00      	nop
 80173c8:	000186a0 	.word	0x000186a0
 80173cc:	001e847f 	.word	0x001e847f
 80173d0:	003d08ff 	.word	0x003d08ff
 80173d4:	431bde83 	.word	0x431bde83
 80173d8:	10624dd3 	.word	0x10624dd3

080173dc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80173dc:	b580      	push	{r7, lr}
 80173de:	b088      	sub	sp, #32
 80173e0:	af02      	add	r7, sp, #8
 80173e2:	60f8      	str	r0, [r7, #12]
 80173e4:	4608      	mov	r0, r1
 80173e6:	4611      	mov	r1, r2
 80173e8:	461a      	mov	r2, r3
 80173ea:	4603      	mov	r3, r0
 80173ec:	817b      	strh	r3, [r7, #10]
 80173ee:	460b      	mov	r3, r1
 80173f0:	813b      	strh	r3, [r7, #8]
 80173f2:	4613      	mov	r3, r2
 80173f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80173f6:	f7fe ff8d 	bl	8016314 <HAL_GetTick>
 80173fa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80173fc:	68fb      	ldr	r3, [r7, #12]
 80173fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017402:	b2db      	uxtb	r3, r3
 8017404:	2b20      	cmp	r3, #32
 8017406:	f040 80d9 	bne.w	80175bc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801740a:	697b      	ldr	r3, [r7, #20]
 801740c:	9300      	str	r3, [sp, #0]
 801740e:	2319      	movs	r3, #25
 8017410:	2201      	movs	r2, #1
 8017412:	496d      	ldr	r1, [pc, #436]	; (80175c8 <HAL_I2C_Mem_Write+0x1ec>)
 8017414:	68f8      	ldr	r0, [r7, #12]
 8017416:	f002 fad1 	bl	80199bc <I2C_WaitOnFlagUntilTimeout>
 801741a:	4603      	mov	r3, r0
 801741c:	2b00      	cmp	r3, #0
 801741e:	d001      	beq.n	8017424 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8017420:	2302      	movs	r3, #2
 8017422:	e0cc      	b.n	80175be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017424:	68fb      	ldr	r3, [r7, #12]
 8017426:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801742a:	2b01      	cmp	r3, #1
 801742c:	d101      	bne.n	8017432 <HAL_I2C_Mem_Write+0x56>
 801742e:	2302      	movs	r3, #2
 8017430:	e0c5      	b.n	80175be <HAL_I2C_Mem_Write+0x1e2>
 8017432:	68fb      	ldr	r3, [r7, #12]
 8017434:	2201      	movs	r2, #1
 8017436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801743a:	68fb      	ldr	r3, [r7, #12]
 801743c:	681b      	ldr	r3, [r3, #0]
 801743e:	681b      	ldr	r3, [r3, #0]
 8017440:	f003 0301 	and.w	r3, r3, #1
 8017444:	2b01      	cmp	r3, #1
 8017446:	d007      	beq.n	8017458 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8017448:	68fb      	ldr	r3, [r7, #12]
 801744a:	681b      	ldr	r3, [r3, #0]
 801744c:	681a      	ldr	r2, [r3, #0]
 801744e:	68fb      	ldr	r3, [r7, #12]
 8017450:	681b      	ldr	r3, [r3, #0]
 8017452:	f042 0201 	orr.w	r2, r2, #1
 8017456:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8017458:	68fb      	ldr	r3, [r7, #12]
 801745a:	681b      	ldr	r3, [r3, #0]
 801745c:	681a      	ldr	r2, [r3, #0]
 801745e:	68fb      	ldr	r3, [r7, #12]
 8017460:	681b      	ldr	r3, [r3, #0]
 8017462:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8017466:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8017468:	68fb      	ldr	r3, [r7, #12]
 801746a:	2221      	movs	r2, #33	; 0x21
 801746c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8017470:	68fb      	ldr	r3, [r7, #12]
 8017472:	2240      	movs	r2, #64	; 0x40
 8017474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8017478:	68fb      	ldr	r3, [r7, #12]
 801747a:	2200      	movs	r2, #0
 801747c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801747e:	68fb      	ldr	r3, [r7, #12]
 8017480:	6a3a      	ldr	r2, [r7, #32]
 8017482:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8017484:	68fb      	ldr	r3, [r7, #12]
 8017486:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017488:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801748a:	68fb      	ldr	r3, [r7, #12]
 801748c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801748e:	b29a      	uxth	r2, r3
 8017490:	68fb      	ldr	r3, [r7, #12]
 8017492:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8017494:	68fb      	ldr	r3, [r7, #12]
 8017496:	4a4d      	ldr	r2, [pc, #308]	; (80175cc <HAL_I2C_Mem_Write+0x1f0>)
 8017498:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 801749a:	88f8      	ldrh	r0, [r7, #6]
 801749c:	893a      	ldrh	r2, [r7, #8]
 801749e:	8979      	ldrh	r1, [r7, #10]
 80174a0:	697b      	ldr	r3, [r7, #20]
 80174a2:	9301      	str	r3, [sp, #4]
 80174a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174a6:	9300      	str	r3, [sp, #0]
 80174a8:	4603      	mov	r3, r0
 80174aa:	68f8      	ldr	r0, [r7, #12]
 80174ac:	f002 f860 	bl	8019570 <I2C_RequestMemoryWrite>
 80174b0:	4603      	mov	r3, r0
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	d052      	beq.n	801755c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80174b6:	2301      	movs	r3, #1
 80174b8:	e081      	b.n	80175be <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80174ba:	697a      	ldr	r2, [r7, #20]
 80174bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80174be:	68f8      	ldr	r0, [r7, #12]
 80174c0:	f002 fb52 	bl	8019b68 <I2C_WaitOnTXEFlagUntilTimeout>
 80174c4:	4603      	mov	r3, r0
 80174c6:	2b00      	cmp	r3, #0
 80174c8:	d00d      	beq.n	80174e6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80174ca:	68fb      	ldr	r3, [r7, #12]
 80174cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80174ce:	2b04      	cmp	r3, #4
 80174d0:	d107      	bne.n	80174e2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80174d2:	68fb      	ldr	r3, [r7, #12]
 80174d4:	681b      	ldr	r3, [r3, #0]
 80174d6:	681a      	ldr	r2, [r3, #0]
 80174d8:	68fb      	ldr	r3, [r7, #12]
 80174da:	681b      	ldr	r3, [r3, #0]
 80174dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80174e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80174e2:	2301      	movs	r3, #1
 80174e4:	e06b      	b.n	80175be <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80174e6:	68fb      	ldr	r3, [r7, #12]
 80174e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80174ea:	781a      	ldrb	r2, [r3, #0]
 80174ec:	68fb      	ldr	r3, [r7, #12]
 80174ee:	681b      	ldr	r3, [r3, #0]
 80174f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80174f2:	68fb      	ldr	r3, [r7, #12]
 80174f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80174f6:	1c5a      	adds	r2, r3, #1
 80174f8:	68fb      	ldr	r3, [r7, #12]
 80174fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80174fc:	68fb      	ldr	r3, [r7, #12]
 80174fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017500:	3b01      	subs	r3, #1
 8017502:	b29a      	uxth	r2, r3
 8017504:	68fb      	ldr	r3, [r7, #12]
 8017506:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8017508:	68fb      	ldr	r3, [r7, #12]
 801750a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801750c:	b29b      	uxth	r3, r3
 801750e:	3b01      	subs	r3, #1
 8017510:	b29a      	uxth	r2, r3
 8017512:	68fb      	ldr	r3, [r7, #12]
 8017514:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8017516:	68fb      	ldr	r3, [r7, #12]
 8017518:	681b      	ldr	r3, [r3, #0]
 801751a:	695b      	ldr	r3, [r3, #20]
 801751c:	f003 0304 	and.w	r3, r3, #4
 8017520:	2b04      	cmp	r3, #4
 8017522:	d11b      	bne.n	801755c <HAL_I2C_Mem_Write+0x180>
 8017524:	68fb      	ldr	r3, [r7, #12]
 8017526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017528:	2b00      	cmp	r3, #0
 801752a:	d017      	beq.n	801755c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 801752c:	68fb      	ldr	r3, [r7, #12]
 801752e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017530:	781a      	ldrb	r2, [r3, #0]
 8017532:	68fb      	ldr	r3, [r7, #12]
 8017534:	681b      	ldr	r3, [r3, #0]
 8017536:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8017538:	68fb      	ldr	r3, [r7, #12]
 801753a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801753c:	1c5a      	adds	r2, r3, #1
 801753e:	68fb      	ldr	r3, [r7, #12]
 8017540:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8017542:	68fb      	ldr	r3, [r7, #12]
 8017544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017546:	3b01      	subs	r3, #1
 8017548:	b29a      	uxth	r2, r3
 801754a:	68fb      	ldr	r3, [r7, #12]
 801754c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 801754e:	68fb      	ldr	r3, [r7, #12]
 8017550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017552:	b29b      	uxth	r3, r3
 8017554:	3b01      	subs	r3, #1
 8017556:	b29a      	uxth	r2, r3
 8017558:	68fb      	ldr	r3, [r7, #12]
 801755a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 801755c:	68fb      	ldr	r3, [r7, #12]
 801755e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017560:	2b00      	cmp	r3, #0
 8017562:	d1aa      	bne.n	80174ba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8017564:	697a      	ldr	r2, [r7, #20]
 8017566:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017568:	68f8      	ldr	r0, [r7, #12]
 801756a:	f002 fb3e 	bl	8019bea <I2C_WaitOnBTFFlagUntilTimeout>
 801756e:	4603      	mov	r3, r0
 8017570:	2b00      	cmp	r3, #0
 8017572:	d00d      	beq.n	8017590 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8017574:	68fb      	ldr	r3, [r7, #12]
 8017576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017578:	2b04      	cmp	r3, #4
 801757a:	d107      	bne.n	801758c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801757c:	68fb      	ldr	r3, [r7, #12]
 801757e:	681b      	ldr	r3, [r3, #0]
 8017580:	681a      	ldr	r2, [r3, #0]
 8017582:	68fb      	ldr	r3, [r7, #12]
 8017584:	681b      	ldr	r3, [r3, #0]
 8017586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801758a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 801758c:	2301      	movs	r3, #1
 801758e:	e016      	b.n	80175be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017590:	68fb      	ldr	r3, [r7, #12]
 8017592:	681b      	ldr	r3, [r3, #0]
 8017594:	681a      	ldr	r2, [r3, #0]
 8017596:	68fb      	ldr	r3, [r7, #12]
 8017598:	681b      	ldr	r3, [r3, #0]
 801759a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801759e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80175a0:	68fb      	ldr	r3, [r7, #12]
 80175a2:	2220      	movs	r2, #32
 80175a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80175a8:	68fb      	ldr	r3, [r7, #12]
 80175aa:	2200      	movs	r2, #0
 80175ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80175b0:	68fb      	ldr	r3, [r7, #12]
 80175b2:	2200      	movs	r2, #0
 80175b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80175b8:	2300      	movs	r3, #0
 80175ba:	e000      	b.n	80175be <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80175bc:	2302      	movs	r3, #2
  }
}
 80175be:	4618      	mov	r0, r3
 80175c0:	3718      	adds	r7, #24
 80175c2:	46bd      	mov	sp, r7
 80175c4:	bd80      	pop	{r7, pc}
 80175c6:	bf00      	nop
 80175c8:	00100002 	.word	0x00100002
 80175cc:	ffff0000 	.word	0xffff0000

080175d0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80175d0:	b580      	push	{r7, lr}
 80175d2:	b08c      	sub	sp, #48	; 0x30
 80175d4:	af02      	add	r7, sp, #8
 80175d6:	60f8      	str	r0, [r7, #12]
 80175d8:	4608      	mov	r0, r1
 80175da:	4611      	mov	r1, r2
 80175dc:	461a      	mov	r2, r3
 80175de:	4603      	mov	r3, r0
 80175e0:	817b      	strh	r3, [r7, #10]
 80175e2:	460b      	mov	r3, r1
 80175e4:	813b      	strh	r3, [r7, #8]
 80175e6:	4613      	mov	r3, r2
 80175e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80175ea:	f7fe fe93 	bl	8016314 <HAL_GetTick>
 80175ee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80175f0:	68fb      	ldr	r3, [r7, #12]
 80175f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80175f6:	b2db      	uxtb	r3, r3
 80175f8:	2b20      	cmp	r3, #32
 80175fa:	f040 8208 	bne.w	8017a0e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80175fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017600:	9300      	str	r3, [sp, #0]
 8017602:	2319      	movs	r3, #25
 8017604:	2201      	movs	r2, #1
 8017606:	497b      	ldr	r1, [pc, #492]	; (80177f4 <HAL_I2C_Mem_Read+0x224>)
 8017608:	68f8      	ldr	r0, [r7, #12]
 801760a:	f002 f9d7 	bl	80199bc <I2C_WaitOnFlagUntilTimeout>
 801760e:	4603      	mov	r3, r0
 8017610:	2b00      	cmp	r3, #0
 8017612:	d001      	beq.n	8017618 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8017614:	2302      	movs	r3, #2
 8017616:	e1fb      	b.n	8017a10 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017618:	68fb      	ldr	r3, [r7, #12]
 801761a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801761e:	2b01      	cmp	r3, #1
 8017620:	d101      	bne.n	8017626 <HAL_I2C_Mem_Read+0x56>
 8017622:	2302      	movs	r3, #2
 8017624:	e1f4      	b.n	8017a10 <HAL_I2C_Mem_Read+0x440>
 8017626:	68fb      	ldr	r3, [r7, #12]
 8017628:	2201      	movs	r2, #1
 801762a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801762e:	68fb      	ldr	r3, [r7, #12]
 8017630:	681b      	ldr	r3, [r3, #0]
 8017632:	681b      	ldr	r3, [r3, #0]
 8017634:	f003 0301 	and.w	r3, r3, #1
 8017638:	2b01      	cmp	r3, #1
 801763a:	d007      	beq.n	801764c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801763c:	68fb      	ldr	r3, [r7, #12]
 801763e:	681b      	ldr	r3, [r3, #0]
 8017640:	681a      	ldr	r2, [r3, #0]
 8017642:	68fb      	ldr	r3, [r7, #12]
 8017644:	681b      	ldr	r3, [r3, #0]
 8017646:	f042 0201 	orr.w	r2, r2, #1
 801764a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801764c:	68fb      	ldr	r3, [r7, #12]
 801764e:	681b      	ldr	r3, [r3, #0]
 8017650:	681a      	ldr	r2, [r3, #0]
 8017652:	68fb      	ldr	r3, [r7, #12]
 8017654:	681b      	ldr	r3, [r3, #0]
 8017656:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801765a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801765c:	68fb      	ldr	r3, [r7, #12]
 801765e:	2222      	movs	r2, #34	; 0x22
 8017660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8017664:	68fb      	ldr	r3, [r7, #12]
 8017666:	2240      	movs	r2, #64	; 0x40
 8017668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801766c:	68fb      	ldr	r3, [r7, #12]
 801766e:	2200      	movs	r2, #0
 8017670:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8017672:	68fb      	ldr	r3, [r7, #12]
 8017674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017676:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8017678:	68fb      	ldr	r3, [r7, #12]
 801767a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 801767c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801767e:	68fb      	ldr	r3, [r7, #12]
 8017680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017682:	b29a      	uxth	r2, r3
 8017684:	68fb      	ldr	r3, [r7, #12]
 8017686:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8017688:	68fb      	ldr	r3, [r7, #12]
 801768a:	4a5b      	ldr	r2, [pc, #364]	; (80177f8 <HAL_I2C_Mem_Read+0x228>)
 801768c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 801768e:	88f8      	ldrh	r0, [r7, #6]
 8017690:	893a      	ldrh	r2, [r7, #8]
 8017692:	8979      	ldrh	r1, [r7, #10]
 8017694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017696:	9301      	str	r3, [sp, #4]
 8017698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801769a:	9300      	str	r3, [sp, #0]
 801769c:	4603      	mov	r3, r0
 801769e:	68f8      	ldr	r0, [r7, #12]
 80176a0:	f001 fffc 	bl	801969c <I2C_RequestMemoryRead>
 80176a4:	4603      	mov	r3, r0
 80176a6:	2b00      	cmp	r3, #0
 80176a8:	d001      	beq.n	80176ae <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80176aa:	2301      	movs	r3, #1
 80176ac:	e1b0      	b.n	8017a10 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80176ae:	68fb      	ldr	r3, [r7, #12]
 80176b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80176b2:	2b00      	cmp	r3, #0
 80176b4:	d113      	bne.n	80176de <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80176b6:	2300      	movs	r3, #0
 80176b8:	623b      	str	r3, [r7, #32]
 80176ba:	68fb      	ldr	r3, [r7, #12]
 80176bc:	681b      	ldr	r3, [r3, #0]
 80176be:	695b      	ldr	r3, [r3, #20]
 80176c0:	623b      	str	r3, [r7, #32]
 80176c2:	68fb      	ldr	r3, [r7, #12]
 80176c4:	681b      	ldr	r3, [r3, #0]
 80176c6:	699b      	ldr	r3, [r3, #24]
 80176c8:	623b      	str	r3, [r7, #32]
 80176ca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80176cc:	68fb      	ldr	r3, [r7, #12]
 80176ce:	681b      	ldr	r3, [r3, #0]
 80176d0:	681a      	ldr	r2, [r3, #0]
 80176d2:	68fb      	ldr	r3, [r7, #12]
 80176d4:	681b      	ldr	r3, [r3, #0]
 80176d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80176da:	601a      	str	r2, [r3, #0]
 80176dc:	e184      	b.n	80179e8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80176de:	68fb      	ldr	r3, [r7, #12]
 80176e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80176e2:	2b01      	cmp	r3, #1
 80176e4:	d11b      	bne.n	801771e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80176e6:	68fb      	ldr	r3, [r7, #12]
 80176e8:	681b      	ldr	r3, [r3, #0]
 80176ea:	681a      	ldr	r2, [r3, #0]
 80176ec:	68fb      	ldr	r3, [r7, #12]
 80176ee:	681b      	ldr	r3, [r3, #0]
 80176f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80176f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80176f6:	2300      	movs	r3, #0
 80176f8:	61fb      	str	r3, [r7, #28]
 80176fa:	68fb      	ldr	r3, [r7, #12]
 80176fc:	681b      	ldr	r3, [r3, #0]
 80176fe:	695b      	ldr	r3, [r3, #20]
 8017700:	61fb      	str	r3, [r7, #28]
 8017702:	68fb      	ldr	r3, [r7, #12]
 8017704:	681b      	ldr	r3, [r3, #0]
 8017706:	699b      	ldr	r3, [r3, #24]
 8017708:	61fb      	str	r3, [r7, #28]
 801770a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801770c:	68fb      	ldr	r3, [r7, #12]
 801770e:	681b      	ldr	r3, [r3, #0]
 8017710:	681a      	ldr	r2, [r3, #0]
 8017712:	68fb      	ldr	r3, [r7, #12]
 8017714:	681b      	ldr	r3, [r3, #0]
 8017716:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801771a:	601a      	str	r2, [r3, #0]
 801771c:	e164      	b.n	80179e8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 801771e:	68fb      	ldr	r3, [r7, #12]
 8017720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017722:	2b02      	cmp	r3, #2
 8017724:	d11b      	bne.n	801775e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017726:	68fb      	ldr	r3, [r7, #12]
 8017728:	681b      	ldr	r3, [r3, #0]
 801772a:	681a      	ldr	r2, [r3, #0]
 801772c:	68fb      	ldr	r3, [r7, #12]
 801772e:	681b      	ldr	r3, [r3, #0]
 8017730:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017734:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8017736:	68fb      	ldr	r3, [r7, #12]
 8017738:	681b      	ldr	r3, [r3, #0]
 801773a:	681a      	ldr	r2, [r3, #0]
 801773c:	68fb      	ldr	r3, [r7, #12]
 801773e:	681b      	ldr	r3, [r3, #0]
 8017740:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8017744:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017746:	2300      	movs	r3, #0
 8017748:	61bb      	str	r3, [r7, #24]
 801774a:	68fb      	ldr	r3, [r7, #12]
 801774c:	681b      	ldr	r3, [r3, #0]
 801774e:	695b      	ldr	r3, [r3, #20]
 8017750:	61bb      	str	r3, [r7, #24]
 8017752:	68fb      	ldr	r3, [r7, #12]
 8017754:	681b      	ldr	r3, [r3, #0]
 8017756:	699b      	ldr	r3, [r3, #24]
 8017758:	61bb      	str	r3, [r7, #24]
 801775a:	69bb      	ldr	r3, [r7, #24]
 801775c:	e144      	b.n	80179e8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801775e:	2300      	movs	r3, #0
 8017760:	617b      	str	r3, [r7, #20]
 8017762:	68fb      	ldr	r3, [r7, #12]
 8017764:	681b      	ldr	r3, [r3, #0]
 8017766:	695b      	ldr	r3, [r3, #20]
 8017768:	617b      	str	r3, [r7, #20]
 801776a:	68fb      	ldr	r3, [r7, #12]
 801776c:	681b      	ldr	r3, [r3, #0]
 801776e:	699b      	ldr	r3, [r3, #24]
 8017770:	617b      	str	r3, [r7, #20]
 8017772:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8017774:	e138      	b.n	80179e8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8017776:	68fb      	ldr	r3, [r7, #12]
 8017778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801777a:	2b03      	cmp	r3, #3
 801777c:	f200 80f1 	bhi.w	8017962 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8017780:	68fb      	ldr	r3, [r7, #12]
 8017782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017784:	2b01      	cmp	r3, #1
 8017786:	d123      	bne.n	80177d0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8017788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801778a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801778c:	68f8      	ldr	r0, [r7, #12]
 801778e:	f002 fa9f 	bl	8019cd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8017792:	4603      	mov	r3, r0
 8017794:	2b00      	cmp	r3, #0
 8017796:	d001      	beq.n	801779c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8017798:	2301      	movs	r3, #1
 801779a:	e139      	b.n	8017a10 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801779c:	68fb      	ldr	r3, [r7, #12]
 801779e:	681b      	ldr	r3, [r3, #0]
 80177a0:	691a      	ldr	r2, [r3, #16]
 80177a2:	68fb      	ldr	r3, [r7, #12]
 80177a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80177a6:	b2d2      	uxtb	r2, r2
 80177a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80177aa:	68fb      	ldr	r3, [r7, #12]
 80177ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80177ae:	1c5a      	adds	r2, r3, #1
 80177b0:	68fb      	ldr	r3, [r7, #12]
 80177b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80177b4:	68fb      	ldr	r3, [r7, #12]
 80177b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80177b8:	3b01      	subs	r3, #1
 80177ba:	b29a      	uxth	r2, r3
 80177bc:	68fb      	ldr	r3, [r7, #12]
 80177be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80177c0:	68fb      	ldr	r3, [r7, #12]
 80177c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80177c4:	b29b      	uxth	r3, r3
 80177c6:	3b01      	subs	r3, #1
 80177c8:	b29a      	uxth	r2, r3
 80177ca:	68fb      	ldr	r3, [r7, #12]
 80177cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80177ce:	e10b      	b.n	80179e8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80177d0:	68fb      	ldr	r3, [r7, #12]
 80177d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80177d4:	2b02      	cmp	r3, #2
 80177d6:	d14e      	bne.n	8017876 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80177d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177da:	9300      	str	r3, [sp, #0]
 80177dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80177de:	2200      	movs	r2, #0
 80177e0:	4906      	ldr	r1, [pc, #24]	; (80177fc <HAL_I2C_Mem_Read+0x22c>)
 80177e2:	68f8      	ldr	r0, [r7, #12]
 80177e4:	f002 f8ea 	bl	80199bc <I2C_WaitOnFlagUntilTimeout>
 80177e8:	4603      	mov	r3, r0
 80177ea:	2b00      	cmp	r3, #0
 80177ec:	d008      	beq.n	8017800 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80177ee:	2301      	movs	r3, #1
 80177f0:	e10e      	b.n	8017a10 <HAL_I2C_Mem_Read+0x440>
 80177f2:	bf00      	nop
 80177f4:	00100002 	.word	0x00100002
 80177f8:	ffff0000 	.word	0xffff0000
 80177fc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017800:	68fb      	ldr	r3, [r7, #12]
 8017802:	681b      	ldr	r3, [r3, #0]
 8017804:	681a      	ldr	r2, [r3, #0]
 8017806:	68fb      	ldr	r3, [r7, #12]
 8017808:	681b      	ldr	r3, [r3, #0]
 801780a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801780e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017810:	68fb      	ldr	r3, [r7, #12]
 8017812:	681b      	ldr	r3, [r3, #0]
 8017814:	691a      	ldr	r2, [r3, #16]
 8017816:	68fb      	ldr	r3, [r7, #12]
 8017818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801781a:	b2d2      	uxtb	r2, r2
 801781c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801781e:	68fb      	ldr	r3, [r7, #12]
 8017820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017822:	1c5a      	adds	r2, r3, #1
 8017824:	68fb      	ldr	r3, [r7, #12]
 8017826:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017828:	68fb      	ldr	r3, [r7, #12]
 801782a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801782c:	3b01      	subs	r3, #1
 801782e:	b29a      	uxth	r2, r3
 8017830:	68fb      	ldr	r3, [r7, #12]
 8017832:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017834:	68fb      	ldr	r3, [r7, #12]
 8017836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017838:	b29b      	uxth	r3, r3
 801783a:	3b01      	subs	r3, #1
 801783c:	b29a      	uxth	r2, r3
 801783e:	68fb      	ldr	r3, [r7, #12]
 8017840:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017842:	68fb      	ldr	r3, [r7, #12]
 8017844:	681b      	ldr	r3, [r3, #0]
 8017846:	691a      	ldr	r2, [r3, #16]
 8017848:	68fb      	ldr	r3, [r7, #12]
 801784a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801784c:	b2d2      	uxtb	r2, r2
 801784e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017850:	68fb      	ldr	r3, [r7, #12]
 8017852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017854:	1c5a      	adds	r2, r3, #1
 8017856:	68fb      	ldr	r3, [r7, #12]
 8017858:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 801785a:	68fb      	ldr	r3, [r7, #12]
 801785c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801785e:	3b01      	subs	r3, #1
 8017860:	b29a      	uxth	r2, r3
 8017862:	68fb      	ldr	r3, [r7, #12]
 8017864:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017866:	68fb      	ldr	r3, [r7, #12]
 8017868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801786a:	b29b      	uxth	r3, r3
 801786c:	3b01      	subs	r3, #1
 801786e:	b29a      	uxth	r2, r3
 8017870:	68fb      	ldr	r3, [r7, #12]
 8017872:	855a      	strh	r2, [r3, #42]	; 0x2a
 8017874:	e0b8      	b.n	80179e8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8017876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017878:	9300      	str	r3, [sp, #0]
 801787a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801787c:	2200      	movs	r2, #0
 801787e:	4966      	ldr	r1, [pc, #408]	; (8017a18 <HAL_I2C_Mem_Read+0x448>)
 8017880:	68f8      	ldr	r0, [r7, #12]
 8017882:	f002 f89b 	bl	80199bc <I2C_WaitOnFlagUntilTimeout>
 8017886:	4603      	mov	r3, r0
 8017888:	2b00      	cmp	r3, #0
 801788a:	d001      	beq.n	8017890 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 801788c:	2301      	movs	r3, #1
 801788e:	e0bf      	b.n	8017a10 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017890:	68fb      	ldr	r3, [r7, #12]
 8017892:	681b      	ldr	r3, [r3, #0]
 8017894:	681a      	ldr	r2, [r3, #0]
 8017896:	68fb      	ldr	r3, [r7, #12]
 8017898:	681b      	ldr	r3, [r3, #0]
 801789a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801789e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80178a0:	68fb      	ldr	r3, [r7, #12]
 80178a2:	681b      	ldr	r3, [r3, #0]
 80178a4:	691a      	ldr	r2, [r3, #16]
 80178a6:	68fb      	ldr	r3, [r7, #12]
 80178a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80178aa:	b2d2      	uxtb	r2, r2
 80178ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80178ae:	68fb      	ldr	r3, [r7, #12]
 80178b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80178b2:	1c5a      	adds	r2, r3, #1
 80178b4:	68fb      	ldr	r3, [r7, #12]
 80178b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80178b8:	68fb      	ldr	r3, [r7, #12]
 80178ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80178bc:	3b01      	subs	r3, #1
 80178be:	b29a      	uxth	r2, r3
 80178c0:	68fb      	ldr	r3, [r7, #12]
 80178c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80178c4:	68fb      	ldr	r3, [r7, #12]
 80178c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80178c8:	b29b      	uxth	r3, r3
 80178ca:	3b01      	subs	r3, #1
 80178cc:	b29a      	uxth	r2, r3
 80178ce:	68fb      	ldr	r3, [r7, #12]
 80178d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80178d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178d4:	9300      	str	r3, [sp, #0]
 80178d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80178d8:	2200      	movs	r2, #0
 80178da:	494f      	ldr	r1, [pc, #316]	; (8017a18 <HAL_I2C_Mem_Read+0x448>)
 80178dc:	68f8      	ldr	r0, [r7, #12]
 80178de:	f002 f86d 	bl	80199bc <I2C_WaitOnFlagUntilTimeout>
 80178e2:	4603      	mov	r3, r0
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	d001      	beq.n	80178ec <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80178e8:	2301      	movs	r3, #1
 80178ea:	e091      	b.n	8017a10 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80178ec:	68fb      	ldr	r3, [r7, #12]
 80178ee:	681b      	ldr	r3, [r3, #0]
 80178f0:	681a      	ldr	r2, [r3, #0]
 80178f2:	68fb      	ldr	r3, [r7, #12]
 80178f4:	681b      	ldr	r3, [r3, #0]
 80178f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80178fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80178fc:	68fb      	ldr	r3, [r7, #12]
 80178fe:	681b      	ldr	r3, [r3, #0]
 8017900:	691a      	ldr	r2, [r3, #16]
 8017902:	68fb      	ldr	r3, [r7, #12]
 8017904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017906:	b2d2      	uxtb	r2, r2
 8017908:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801790a:	68fb      	ldr	r3, [r7, #12]
 801790c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801790e:	1c5a      	adds	r2, r3, #1
 8017910:	68fb      	ldr	r3, [r7, #12]
 8017912:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017914:	68fb      	ldr	r3, [r7, #12]
 8017916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017918:	3b01      	subs	r3, #1
 801791a:	b29a      	uxth	r2, r3
 801791c:	68fb      	ldr	r3, [r7, #12]
 801791e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017920:	68fb      	ldr	r3, [r7, #12]
 8017922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017924:	b29b      	uxth	r3, r3
 8017926:	3b01      	subs	r3, #1
 8017928:	b29a      	uxth	r2, r3
 801792a:	68fb      	ldr	r3, [r7, #12]
 801792c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801792e:	68fb      	ldr	r3, [r7, #12]
 8017930:	681b      	ldr	r3, [r3, #0]
 8017932:	691a      	ldr	r2, [r3, #16]
 8017934:	68fb      	ldr	r3, [r7, #12]
 8017936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017938:	b2d2      	uxtb	r2, r2
 801793a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801793c:	68fb      	ldr	r3, [r7, #12]
 801793e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017940:	1c5a      	adds	r2, r3, #1
 8017942:	68fb      	ldr	r3, [r7, #12]
 8017944:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017946:	68fb      	ldr	r3, [r7, #12]
 8017948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801794a:	3b01      	subs	r3, #1
 801794c:	b29a      	uxth	r2, r3
 801794e:	68fb      	ldr	r3, [r7, #12]
 8017950:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017952:	68fb      	ldr	r3, [r7, #12]
 8017954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017956:	b29b      	uxth	r3, r3
 8017958:	3b01      	subs	r3, #1
 801795a:	b29a      	uxth	r2, r3
 801795c:	68fb      	ldr	r3, [r7, #12]
 801795e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8017960:	e042      	b.n	80179e8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8017962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017964:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8017966:	68f8      	ldr	r0, [r7, #12]
 8017968:	f002 f9b2 	bl	8019cd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 801796c:	4603      	mov	r3, r0
 801796e:	2b00      	cmp	r3, #0
 8017970:	d001      	beq.n	8017976 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8017972:	2301      	movs	r3, #1
 8017974:	e04c      	b.n	8017a10 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017976:	68fb      	ldr	r3, [r7, #12]
 8017978:	681b      	ldr	r3, [r3, #0]
 801797a:	691a      	ldr	r2, [r3, #16]
 801797c:	68fb      	ldr	r3, [r7, #12]
 801797e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017980:	b2d2      	uxtb	r2, r2
 8017982:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8017984:	68fb      	ldr	r3, [r7, #12]
 8017986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017988:	1c5a      	adds	r2, r3, #1
 801798a:	68fb      	ldr	r3, [r7, #12]
 801798c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 801798e:	68fb      	ldr	r3, [r7, #12]
 8017990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017992:	3b01      	subs	r3, #1
 8017994:	b29a      	uxth	r2, r3
 8017996:	68fb      	ldr	r3, [r7, #12]
 8017998:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 801799a:	68fb      	ldr	r3, [r7, #12]
 801799c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801799e:	b29b      	uxth	r3, r3
 80179a0:	3b01      	subs	r3, #1
 80179a2:	b29a      	uxth	r2, r3
 80179a4:	68fb      	ldr	r3, [r7, #12]
 80179a6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80179a8:	68fb      	ldr	r3, [r7, #12]
 80179aa:	681b      	ldr	r3, [r3, #0]
 80179ac:	695b      	ldr	r3, [r3, #20]
 80179ae:	f003 0304 	and.w	r3, r3, #4
 80179b2:	2b04      	cmp	r3, #4
 80179b4:	d118      	bne.n	80179e8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80179b6:	68fb      	ldr	r3, [r7, #12]
 80179b8:	681b      	ldr	r3, [r3, #0]
 80179ba:	691a      	ldr	r2, [r3, #16]
 80179bc:	68fb      	ldr	r3, [r7, #12]
 80179be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179c0:	b2d2      	uxtb	r2, r2
 80179c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80179c4:	68fb      	ldr	r3, [r7, #12]
 80179c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179c8:	1c5a      	adds	r2, r3, #1
 80179ca:	68fb      	ldr	r3, [r7, #12]
 80179cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80179ce:	68fb      	ldr	r3, [r7, #12]
 80179d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80179d2:	3b01      	subs	r3, #1
 80179d4:	b29a      	uxth	r2, r3
 80179d6:	68fb      	ldr	r3, [r7, #12]
 80179d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80179da:	68fb      	ldr	r3, [r7, #12]
 80179dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80179de:	b29b      	uxth	r3, r3
 80179e0:	3b01      	subs	r3, #1
 80179e2:	b29a      	uxth	r2, r3
 80179e4:	68fb      	ldr	r3, [r7, #12]
 80179e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80179e8:	68fb      	ldr	r3, [r7, #12]
 80179ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80179ec:	2b00      	cmp	r3, #0
 80179ee:	f47f aec2 	bne.w	8017776 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80179f2:	68fb      	ldr	r3, [r7, #12]
 80179f4:	2220      	movs	r2, #32
 80179f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80179fa:	68fb      	ldr	r3, [r7, #12]
 80179fc:	2200      	movs	r2, #0
 80179fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017a02:	68fb      	ldr	r3, [r7, #12]
 8017a04:	2200      	movs	r2, #0
 8017a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8017a0a:	2300      	movs	r3, #0
 8017a0c:	e000      	b.n	8017a10 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8017a0e:	2302      	movs	r3, #2
  }
}
 8017a10:	4618      	mov	r0, r3
 8017a12:	3728      	adds	r7, #40	; 0x28
 8017a14:	46bd      	mov	sp, r7
 8017a16:	bd80      	pop	{r7, pc}
 8017a18:	00010004 	.word	0x00010004

08017a1c <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8017a1c:	b480      	push	{r7}
 8017a1e:	b087      	sub	sp, #28
 8017a20:	af00      	add	r7, sp, #0
 8017a22:	60f8      	str	r0, [r7, #12]
 8017a24:	607a      	str	r2, [r7, #4]
 8017a26:	461a      	mov	r2, r3
 8017a28:	460b      	mov	r3, r1
 8017a2a:	817b      	strh	r3, [r7, #10]
 8017a2c:	4613      	mov	r3, r2
 8017a2e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 8017a30:	2300      	movs	r3, #0
 8017a32:	617b      	str	r3, [r7, #20]
  __IO uint32_t count      = 0x00U;
 8017a34:	2300      	movs	r3, #0
 8017a36:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017a38:	68fb      	ldr	r3, [r7, #12]
 8017a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017a3e:	b2db      	uxtb	r3, r3
 8017a40:	2b20      	cmp	r3, #32
 8017a42:	f040 80a6 	bne.w	8017b92 <HAL_I2C_Master_Seq_Transmit_IT+0x176>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8017a46:	68fb      	ldr	r3, [r7, #12]
 8017a48:	681b      	ldr	r3, [r3, #0]
 8017a4a:	681b      	ldr	r3, [r3, #0]
 8017a4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8017a50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017a54:	d005      	beq.n	8017a62 <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 8017a56:	6a3b      	ldr	r3, [r7, #32]
 8017a58:	2b08      	cmp	r3, #8
 8017a5a:	d002      	beq.n	8017a62 <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 8017a5c:	6a3b      	ldr	r3, [r7, #32]
 8017a5e:	2b01      	cmp	r3, #1
 8017a60:	d130      	bne.n	8017ac4 <HAL_I2C_Master_Seq_Transmit_IT+0xa8>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8017a62:	4b4f      	ldr	r3, [pc, #316]	; (8017ba0 <HAL_I2C_Master_Seq_Transmit_IT+0x184>)
 8017a64:	681b      	ldr	r3, [r3, #0]
 8017a66:	08db      	lsrs	r3, r3, #3
 8017a68:	4a4e      	ldr	r2, [pc, #312]	; (8017ba4 <HAL_I2C_Master_Seq_Transmit_IT+0x188>)
 8017a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8017a6e:	0a1a      	lsrs	r2, r3, #8
 8017a70:	4613      	mov	r3, r2
 8017a72:	009b      	lsls	r3, r3, #2
 8017a74:	4413      	add	r3, r2
 8017a76:	009a      	lsls	r2, r3, #2
 8017a78:	4413      	add	r3, r2
 8017a7a:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 8017a7c:	693b      	ldr	r3, [r7, #16]
 8017a7e:	3b01      	subs	r3, #1
 8017a80:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 8017a82:	693b      	ldr	r3, [r7, #16]
 8017a84:	2b00      	cmp	r3, #0
 8017a86:	d116      	bne.n	8017ab6 <HAL_I2C_Master_Seq_Transmit_IT+0x9a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8017a88:	68fb      	ldr	r3, [r7, #12]
 8017a8a:	2200      	movs	r2, #0
 8017a8c:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8017a8e:	68fb      	ldr	r3, [r7, #12]
 8017a90:	2220      	movs	r2, #32
 8017a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8017a96:	68fb      	ldr	r3, [r7, #12]
 8017a98:	2200      	movs	r2, #0
 8017a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8017a9e:	68fb      	ldr	r3, [r7, #12]
 8017aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017aa2:	f043 0220 	orr.w	r2, r3, #32
 8017aa6:	68fb      	ldr	r3, [r7, #12]
 8017aa8:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8017aaa:	68fb      	ldr	r3, [r7, #12]
 8017aac:	2200      	movs	r2, #0
 8017aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8017ab2:	2301      	movs	r3, #1
 8017ab4:	e06e      	b.n	8017b94 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8017ab6:	68fb      	ldr	r3, [r7, #12]
 8017ab8:	681b      	ldr	r3, [r3, #0]
 8017aba:	699b      	ldr	r3, [r3, #24]
 8017abc:	f003 0302 	and.w	r3, r3, #2
 8017ac0:	2b02      	cmp	r3, #2
 8017ac2:	d0db      	beq.n	8017a7c <HAL_I2C_Master_Seq_Transmit_IT+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017ac4:	68fb      	ldr	r3, [r7, #12]
 8017ac6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017aca:	2b01      	cmp	r3, #1
 8017acc:	d101      	bne.n	8017ad2 <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
 8017ace:	2302      	movs	r3, #2
 8017ad0:	e060      	b.n	8017b94 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
 8017ad2:	68fb      	ldr	r3, [r7, #12]
 8017ad4:	2201      	movs	r2, #1
 8017ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8017ada:	68fb      	ldr	r3, [r7, #12]
 8017adc:	681b      	ldr	r3, [r3, #0]
 8017ade:	681b      	ldr	r3, [r3, #0]
 8017ae0:	f003 0301 	and.w	r3, r3, #1
 8017ae4:	2b01      	cmp	r3, #1
 8017ae6:	d007      	beq.n	8017af8 <HAL_I2C_Master_Seq_Transmit_IT+0xdc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8017ae8:	68fb      	ldr	r3, [r7, #12]
 8017aea:	681b      	ldr	r3, [r3, #0]
 8017aec:	681a      	ldr	r2, [r3, #0]
 8017aee:	68fb      	ldr	r3, [r7, #12]
 8017af0:	681b      	ldr	r3, [r3, #0]
 8017af2:	f042 0201 	orr.w	r2, r2, #1
 8017af6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8017af8:	68fb      	ldr	r3, [r7, #12]
 8017afa:	681b      	ldr	r3, [r3, #0]
 8017afc:	681a      	ldr	r2, [r3, #0]
 8017afe:	68fb      	ldr	r3, [r7, #12]
 8017b00:	681b      	ldr	r3, [r3, #0]
 8017b02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8017b06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8017b08:	68fb      	ldr	r3, [r7, #12]
 8017b0a:	2221      	movs	r2, #33	; 0x21
 8017b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8017b10:	68fb      	ldr	r3, [r7, #12]
 8017b12:	2210      	movs	r2, #16
 8017b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8017b18:	68fb      	ldr	r3, [r7, #12]
 8017b1a:	2200      	movs	r2, #0
 8017b1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8017b1e:	68fb      	ldr	r3, [r7, #12]
 8017b20:	687a      	ldr	r2, [r7, #4]
 8017b22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8017b24:	68fb      	ldr	r3, [r7, #12]
 8017b26:	893a      	ldrh	r2, [r7, #8]
 8017b28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8017b2a:	68fb      	ldr	r3, [r7, #12]
 8017b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017b2e:	b29a      	uxth	r2, r3
 8017b30:	68fb      	ldr	r3, [r7, #12]
 8017b32:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8017b34:	68fb      	ldr	r3, [r7, #12]
 8017b36:	6a3a      	ldr	r2, [r7, #32]
 8017b38:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8017b3a:	897a      	ldrh	r2, [r7, #10]
 8017b3c:	68fb      	ldr	r3, [r7, #12]
 8017b3e:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 8017b40:	68fb      	ldr	r3, [r7, #12]
 8017b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017b44:	617b      	str	r3, [r7, #20]

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8017b46:	697b      	ldr	r3, [r7, #20]
 8017b48:	2b11      	cmp	r3, #17
 8017b4a:	d10c      	bne.n	8017b66 <HAL_I2C_Master_Seq_Transmit_IT+0x14a>
 8017b4c:	6a3b      	ldr	r3, [r7, #32]
 8017b4e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8017b52:	d003      	beq.n	8017b5c <HAL_I2C_Master_Seq_Transmit_IT+0x140>
 8017b54:	6a3b      	ldr	r3, [r7, #32]
 8017b56:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8017b5a:	d101      	bne.n	8017b60 <HAL_I2C_Master_Seq_Transmit_IT+0x144>
 8017b5c:	2301      	movs	r3, #1
 8017b5e:	e000      	b.n	8017b62 <HAL_I2C_Master_Seq_Transmit_IT+0x146>
 8017b60:	2300      	movs	r3, #0
 8017b62:	2b01      	cmp	r3, #1
 8017b64:	d107      	bne.n	8017b76 <HAL_I2C_Master_Seq_Transmit_IT+0x15a>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8017b66:	68fb      	ldr	r3, [r7, #12]
 8017b68:	681b      	ldr	r3, [r3, #0]
 8017b6a:	681a      	ldr	r2, [r3, #0]
 8017b6c:	68fb      	ldr	r3, [r7, #12]
 8017b6e:	681b      	ldr	r3, [r3, #0]
 8017b70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017b74:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017b76:	68fb      	ldr	r3, [r7, #12]
 8017b78:	2200      	movs	r2, #0
 8017b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8017b7e:	68fb      	ldr	r3, [r7, #12]
 8017b80:	681b      	ldr	r3, [r3, #0]
 8017b82:	685a      	ldr	r2, [r3, #4]
 8017b84:	68fb      	ldr	r3, [r7, #12]
 8017b86:	681b      	ldr	r3, [r3, #0]
 8017b88:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8017b8c:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8017b8e:	2300      	movs	r3, #0
 8017b90:	e000      	b.n	8017b94 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 8017b92:	2302      	movs	r3, #2
  }
}
 8017b94:	4618      	mov	r0, r3
 8017b96:	371c      	adds	r7, #28
 8017b98:	46bd      	mov	sp, r7
 8017b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b9e:	4770      	bx	lr
 8017ba0:	20000184 	.word	0x20000184
 8017ba4:	14f8b589 	.word	0x14f8b589

08017ba8 <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8017ba8:	b480      	push	{r7}
 8017baa:	b089      	sub	sp, #36	; 0x24
 8017bac:	af00      	add	r7, sp, #0
 8017bae:	60f8      	str	r0, [r7, #12]
 8017bb0:	607a      	str	r2, [r7, #4]
 8017bb2:	461a      	mov	r2, r3
 8017bb4:	460b      	mov	r3, r1
 8017bb6:	817b      	strh	r3, [r7, #10]
 8017bb8:	4613      	mov	r3, r2
 8017bba:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 8017bbc:	2300      	movs	r3, #0
 8017bbe:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8017bc0:	2300      	movs	r3, #0
 8017bc2:	617b      	str	r3, [r7, #20]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8017bc4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8017bc8:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017bca:	68fb      	ldr	r3, [r7, #12]
 8017bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017bd0:	b2db      	uxtb	r3, r3
 8017bd2:	2b20      	cmp	r3, #32
 8017bd4:	f040 80da 	bne.w	8017d8c <HAL_I2C_Master_Seq_Receive_IT+0x1e4>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8017bd8:	68fb      	ldr	r3, [r7, #12]
 8017bda:	681b      	ldr	r3, [r3, #0]
 8017bdc:	681b      	ldr	r3, [r3, #0]
 8017bde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8017be2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017be6:	d005      	beq.n	8017bf4 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 8017be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bea:	2b08      	cmp	r3, #8
 8017bec:	d002      	beq.n	8017bf4 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 8017bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bf0:	2b01      	cmp	r3, #1
 8017bf2:	d130      	bne.n	8017c56 <HAL_I2C_Master_Seq_Receive_IT+0xae>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8017bf4:	4b69      	ldr	r3, [pc, #420]	; (8017d9c <HAL_I2C_Master_Seq_Receive_IT+0x1f4>)
 8017bf6:	681b      	ldr	r3, [r3, #0]
 8017bf8:	08db      	lsrs	r3, r3, #3
 8017bfa:	4a69      	ldr	r2, [pc, #420]	; (8017da0 <HAL_I2C_Master_Seq_Receive_IT+0x1f8>)
 8017bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8017c00:	0a1a      	lsrs	r2, r3, #8
 8017c02:	4613      	mov	r3, r2
 8017c04:	009b      	lsls	r3, r3, #2
 8017c06:	4413      	add	r3, r2
 8017c08:	009a      	lsls	r2, r3, #2
 8017c0a:	4413      	add	r3, r2
 8017c0c:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 8017c0e:	697b      	ldr	r3, [r7, #20]
 8017c10:	3b01      	subs	r3, #1
 8017c12:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 8017c14:	697b      	ldr	r3, [r7, #20]
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	d116      	bne.n	8017c48 <HAL_I2C_Master_Seq_Receive_IT+0xa0>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8017c1a:	68fb      	ldr	r3, [r7, #12]
 8017c1c:	2200      	movs	r2, #0
 8017c1e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8017c20:	68fb      	ldr	r3, [r7, #12]
 8017c22:	2220      	movs	r2, #32
 8017c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8017c28:	68fb      	ldr	r3, [r7, #12]
 8017c2a:	2200      	movs	r2, #0
 8017c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8017c30:	68fb      	ldr	r3, [r7, #12]
 8017c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c34:	f043 0220 	orr.w	r2, r3, #32
 8017c38:	68fb      	ldr	r3, [r7, #12]
 8017c3a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8017c3c:	68fb      	ldr	r3, [r7, #12]
 8017c3e:	2200      	movs	r2, #0
 8017c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8017c44:	2301      	movs	r3, #1
 8017c46:	e0a2      	b.n	8017d8e <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8017c48:	68fb      	ldr	r3, [r7, #12]
 8017c4a:	681b      	ldr	r3, [r3, #0]
 8017c4c:	699b      	ldr	r3, [r3, #24]
 8017c4e:	f003 0302 	and.w	r3, r3, #2
 8017c52:	2b02      	cmp	r3, #2
 8017c54:	d0db      	beq.n	8017c0e <HAL_I2C_Master_Seq_Receive_IT+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017c56:	68fb      	ldr	r3, [r7, #12]
 8017c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017c5c:	2b01      	cmp	r3, #1
 8017c5e:	d101      	bne.n	8017c64 <HAL_I2C_Master_Seq_Receive_IT+0xbc>
 8017c60:	2302      	movs	r3, #2
 8017c62:	e094      	b.n	8017d8e <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
 8017c64:	68fb      	ldr	r3, [r7, #12]
 8017c66:	2201      	movs	r2, #1
 8017c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8017c6c:	68fb      	ldr	r3, [r7, #12]
 8017c6e:	681b      	ldr	r3, [r3, #0]
 8017c70:	681b      	ldr	r3, [r3, #0]
 8017c72:	f003 0301 	and.w	r3, r3, #1
 8017c76:	2b01      	cmp	r3, #1
 8017c78:	d007      	beq.n	8017c8a <HAL_I2C_Master_Seq_Receive_IT+0xe2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8017c7a:	68fb      	ldr	r3, [r7, #12]
 8017c7c:	681b      	ldr	r3, [r3, #0]
 8017c7e:	681a      	ldr	r2, [r3, #0]
 8017c80:	68fb      	ldr	r3, [r7, #12]
 8017c82:	681b      	ldr	r3, [r3, #0]
 8017c84:	f042 0201 	orr.w	r2, r2, #1
 8017c88:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8017c8a:	68fb      	ldr	r3, [r7, #12]
 8017c8c:	681b      	ldr	r3, [r3, #0]
 8017c8e:	681a      	ldr	r2, [r3, #0]
 8017c90:	68fb      	ldr	r3, [r7, #12]
 8017c92:	681b      	ldr	r3, [r3, #0]
 8017c94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8017c98:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8017c9a:	68fb      	ldr	r3, [r7, #12]
 8017c9c:	2222      	movs	r2, #34	; 0x22
 8017c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8017ca2:	68fb      	ldr	r3, [r7, #12]
 8017ca4:	2210      	movs	r2, #16
 8017ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8017caa:	68fb      	ldr	r3, [r7, #12]
 8017cac:	2200      	movs	r2, #0
 8017cae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8017cb0:	68fb      	ldr	r3, [r7, #12]
 8017cb2:	687a      	ldr	r2, [r7, #4]
 8017cb4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8017cb6:	68fb      	ldr	r3, [r7, #12]
 8017cb8:	893a      	ldrh	r2, [r7, #8]
 8017cba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8017cbc:	68fb      	ldr	r3, [r7, #12]
 8017cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017cc0:	b29a      	uxth	r2, r3
 8017cc2:	68fb      	ldr	r3, [r7, #12]
 8017cc4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8017cc6:	68fb      	ldr	r3, [r7, #12]
 8017cc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017cca:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8017ccc:	897a      	ldrh	r2, [r7, #10]
 8017cce:	68fb      	ldr	r3, [r7, #12]
 8017cd0:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 8017cd2:	68fb      	ldr	r3, [r7, #12]
 8017cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017cd6:	61bb      	str	r3, [r7, #24]

    if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 8017cd8:	68fb      	ldr	r3, [r7, #12]
 8017cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017cdc:	b29b      	uxth	r3, r3
 8017cde:	2b02      	cmp	r3, #2
 8017ce0:	d126      	bne.n	8017d30 <HAL_I2C_Master_Seq_Receive_IT+0x188>
 8017ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ce4:	2b20      	cmp	r3, #32
 8017ce6:	d002      	beq.n	8017cee <HAL_I2C_Master_Seq_Receive_IT+0x146>
 8017ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cea:	2b10      	cmp	r3, #16
 8017cec:	d120      	bne.n	8017d30 <HAL_I2C_Master_Seq_Receive_IT+0x188>
    {
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8017cee:	69bb      	ldr	r3, [r7, #24]
 8017cf0:	2b12      	cmp	r3, #18
 8017cf2:	d114      	bne.n	8017d1e <HAL_I2C_Master_Seq_Receive_IT+0x176>
      {
        /* Disable Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017cf4:	68fb      	ldr	r3, [r7, #12]
 8017cf6:	681b      	ldr	r3, [r3, #0]
 8017cf8:	681a      	ldr	r2, [r3, #0]
 8017cfa:	68fb      	ldr	r3, [r7, #12]
 8017cfc:	681b      	ldr	r3, [r3, #0]
 8017cfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017d02:	601a      	str	r2, [r3, #0]

        /* Enable Pos */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8017d04:	68fb      	ldr	r3, [r7, #12]
 8017d06:	681b      	ldr	r3, [r3, #0]
 8017d08:	681a      	ldr	r2, [r3, #0]
 8017d0a:	68fb      	ldr	r3, [r7, #12]
 8017d0c:	681b      	ldr	r3, [r3, #0]
 8017d0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8017d12:	601a      	str	r2, [r3, #0]

        /* Remove Enabling of IT_BUF, mean RXNE treatment, treat the 2 bytes through BTF */
        enableIT &= ~I2C_IT_BUF;
 8017d14:	69fb      	ldr	r3, [r7, #28]
 8017d16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8017d1a:	61fb      	str	r3, [r7, #28]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8017d1c:	e010      	b.n	8017d40 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017d1e:	68fb      	ldr	r3, [r7, #12]
 8017d20:	681b      	ldr	r3, [r3, #0]
 8017d22:	681a      	ldr	r2, [r3, #0]
 8017d24:	68fb      	ldr	r3, [r7, #12]
 8017d26:	681b      	ldr	r3, [r3, #0]
 8017d28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8017d2c:	601a      	str	r2, [r3, #0]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8017d2e:	e007      	b.n	8017d40 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017d30:	68fb      	ldr	r3, [r7, #12]
 8017d32:	681b      	ldr	r3, [r3, #0]
 8017d34:	681a      	ldr	r2, [r3, #0]
 8017d36:	68fb      	ldr	r3, [r7, #12]
 8017d38:	681b      	ldr	r3, [r3, #0]
 8017d3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8017d3e:	601a      	str	r2, [r3, #0]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8017d40:	69bb      	ldr	r3, [r7, #24]
 8017d42:	2b12      	cmp	r3, #18
 8017d44:	d10c      	bne.n	8017d60 <HAL_I2C_Master_Seq_Receive_IT+0x1b8>
 8017d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d48:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8017d4c:	d003      	beq.n	8017d56 <HAL_I2C_Master_Seq_Receive_IT+0x1ae>
 8017d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d50:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8017d54:	d101      	bne.n	8017d5a <HAL_I2C_Master_Seq_Receive_IT+0x1b2>
 8017d56:	2301      	movs	r3, #1
 8017d58:	e000      	b.n	8017d5c <HAL_I2C_Master_Seq_Receive_IT+0x1b4>
 8017d5a:	2300      	movs	r3, #0
 8017d5c:	2b01      	cmp	r3, #1
 8017d5e:	d107      	bne.n	8017d70 <HAL_I2C_Master_Seq_Receive_IT+0x1c8>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8017d60:	68fb      	ldr	r3, [r7, #12]
 8017d62:	681b      	ldr	r3, [r3, #0]
 8017d64:	681a      	ldr	r2, [r3, #0]
 8017d66:	68fb      	ldr	r3, [r7, #12]
 8017d68:	681b      	ldr	r3, [r3, #0]
 8017d6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017d6e:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017d70:	68fb      	ldr	r3, [r7, #12]
 8017d72:	2200      	movs	r2, #0
 8017d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable interrupts */
    __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 8017d78:	68fb      	ldr	r3, [r7, #12]
 8017d7a:	681b      	ldr	r3, [r3, #0]
 8017d7c:	6859      	ldr	r1, [r3, #4]
 8017d7e:	68fb      	ldr	r3, [r7, #12]
 8017d80:	681b      	ldr	r3, [r3, #0]
 8017d82:	69fa      	ldr	r2, [r7, #28]
 8017d84:	430a      	orrs	r2, r1
 8017d86:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8017d88:	2300      	movs	r3, #0
 8017d8a:	e000      	b.n	8017d8e <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 8017d8c:	2302      	movs	r3, #2
  }
}
 8017d8e:	4618      	mov	r0, r3
 8017d90:	3724      	adds	r7, #36	; 0x24
 8017d92:	46bd      	mov	sp, r7
 8017d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d98:	4770      	bx	lr
 8017d9a:	bf00      	nop
 8017d9c:	20000184 	.word	0x20000184
 8017da0:	14f8b589 	.word	0x14f8b589

08017da4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8017da4:	b580      	push	{r7, lr}
 8017da6:	b088      	sub	sp, #32
 8017da8:	af00      	add	r7, sp, #0
 8017daa:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8017dac:	2300      	movs	r3, #0
 8017dae:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	681b      	ldr	r3, [r3, #0]
 8017db4:	685b      	ldr	r3, [r3, #4]
 8017db6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8017db8:	687b      	ldr	r3, [r7, #4]
 8017dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017dbc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8017dbe:	687b      	ldr	r3, [r7, #4]
 8017dc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8017dc4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8017dc6:	687b      	ldr	r3, [r7, #4]
 8017dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017dcc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8017dce:	7bfb      	ldrb	r3, [r7, #15]
 8017dd0:	2b10      	cmp	r3, #16
 8017dd2:	d003      	beq.n	8017ddc <HAL_I2C_EV_IRQHandler+0x38>
 8017dd4:	7bfb      	ldrb	r3, [r7, #15]
 8017dd6:	2b40      	cmp	r3, #64	; 0x40
 8017dd8:	f040 80c1 	bne.w	8017f5e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8017ddc:	687b      	ldr	r3, [r7, #4]
 8017dde:	681b      	ldr	r3, [r3, #0]
 8017de0:	699b      	ldr	r3, [r3, #24]
 8017de2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	681b      	ldr	r3, [r3, #0]
 8017de8:	695b      	ldr	r3, [r3, #20]
 8017dea:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8017dec:	69fb      	ldr	r3, [r7, #28]
 8017dee:	f003 0301 	and.w	r3, r3, #1
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	d10d      	bne.n	8017e12 <HAL_I2C_EV_IRQHandler+0x6e>
 8017df6:	693b      	ldr	r3, [r7, #16]
 8017df8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8017dfc:	d003      	beq.n	8017e06 <HAL_I2C_EV_IRQHandler+0x62>
 8017dfe:	693b      	ldr	r3, [r7, #16]
 8017e00:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8017e04:	d101      	bne.n	8017e0a <HAL_I2C_EV_IRQHandler+0x66>
 8017e06:	2301      	movs	r3, #1
 8017e08:	e000      	b.n	8017e0c <HAL_I2C_EV_IRQHandler+0x68>
 8017e0a:	2300      	movs	r3, #0
 8017e0c:	2b01      	cmp	r3, #1
 8017e0e:	f000 8132 	beq.w	8018076 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017e12:	69fb      	ldr	r3, [r7, #28]
 8017e14:	f003 0301 	and.w	r3, r3, #1
 8017e18:	2b00      	cmp	r3, #0
 8017e1a:	d00c      	beq.n	8017e36 <HAL_I2C_EV_IRQHandler+0x92>
 8017e1c:	697b      	ldr	r3, [r7, #20]
 8017e1e:	0a5b      	lsrs	r3, r3, #9
 8017e20:	f003 0301 	and.w	r3, r3, #1
 8017e24:	2b00      	cmp	r3, #0
 8017e26:	d006      	beq.n	8017e36 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8017e28:	6878      	ldr	r0, [r7, #4]
 8017e2a:	f001 ffd6 	bl	8019dda <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8017e2e:	6878      	ldr	r0, [r7, #4]
 8017e30:	f000 fd83 	bl	801893a <I2C_Master_SB>
 8017e34:	e092      	b.n	8017f5c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017e36:	69fb      	ldr	r3, [r7, #28]
 8017e38:	08db      	lsrs	r3, r3, #3
 8017e3a:	f003 0301 	and.w	r3, r3, #1
 8017e3e:	2b00      	cmp	r3, #0
 8017e40:	d009      	beq.n	8017e56 <HAL_I2C_EV_IRQHandler+0xb2>
 8017e42:	697b      	ldr	r3, [r7, #20]
 8017e44:	0a5b      	lsrs	r3, r3, #9
 8017e46:	f003 0301 	and.w	r3, r3, #1
 8017e4a:	2b00      	cmp	r3, #0
 8017e4c:	d003      	beq.n	8017e56 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8017e4e:	6878      	ldr	r0, [r7, #4]
 8017e50:	f000 fdf9 	bl	8018a46 <I2C_Master_ADD10>
 8017e54:	e082      	b.n	8017f5c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017e56:	69fb      	ldr	r3, [r7, #28]
 8017e58:	085b      	lsrs	r3, r3, #1
 8017e5a:	f003 0301 	and.w	r3, r3, #1
 8017e5e:	2b00      	cmp	r3, #0
 8017e60:	d009      	beq.n	8017e76 <HAL_I2C_EV_IRQHandler+0xd2>
 8017e62:	697b      	ldr	r3, [r7, #20]
 8017e64:	0a5b      	lsrs	r3, r3, #9
 8017e66:	f003 0301 	and.w	r3, r3, #1
 8017e6a:	2b00      	cmp	r3, #0
 8017e6c:	d003      	beq.n	8017e76 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8017e6e:	6878      	ldr	r0, [r7, #4]
 8017e70:	f000 fe13 	bl	8018a9a <I2C_Master_ADDR>
 8017e74:	e072      	b.n	8017f5c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8017e76:	69bb      	ldr	r3, [r7, #24]
 8017e78:	089b      	lsrs	r3, r3, #2
 8017e7a:	f003 0301 	and.w	r3, r3, #1
 8017e7e:	2b00      	cmp	r3, #0
 8017e80:	d03b      	beq.n	8017efa <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8017e82:	687b      	ldr	r3, [r7, #4]
 8017e84:	681b      	ldr	r3, [r3, #0]
 8017e86:	685b      	ldr	r3, [r3, #4]
 8017e88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017e8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017e90:	f000 80f3 	beq.w	801807a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8017e94:	69fb      	ldr	r3, [r7, #28]
 8017e96:	09db      	lsrs	r3, r3, #7
 8017e98:	f003 0301 	and.w	r3, r3, #1
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	d00f      	beq.n	8017ec0 <HAL_I2C_EV_IRQHandler+0x11c>
 8017ea0:	697b      	ldr	r3, [r7, #20]
 8017ea2:	0a9b      	lsrs	r3, r3, #10
 8017ea4:	f003 0301 	and.w	r3, r3, #1
 8017ea8:	2b00      	cmp	r3, #0
 8017eaa:	d009      	beq.n	8017ec0 <HAL_I2C_EV_IRQHandler+0x11c>
 8017eac:	69fb      	ldr	r3, [r7, #28]
 8017eae:	089b      	lsrs	r3, r3, #2
 8017eb0:	f003 0301 	and.w	r3, r3, #1
 8017eb4:	2b00      	cmp	r3, #0
 8017eb6:	d103      	bne.n	8017ec0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8017eb8:	6878      	ldr	r0, [r7, #4]
 8017eba:	f000 f9f3 	bl	80182a4 <I2C_MasterTransmit_TXE>
 8017ebe:	e04d      	b.n	8017f5c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017ec0:	69fb      	ldr	r3, [r7, #28]
 8017ec2:	089b      	lsrs	r3, r3, #2
 8017ec4:	f003 0301 	and.w	r3, r3, #1
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	f000 80d6 	beq.w	801807a <HAL_I2C_EV_IRQHandler+0x2d6>
 8017ece:	697b      	ldr	r3, [r7, #20]
 8017ed0:	0a5b      	lsrs	r3, r3, #9
 8017ed2:	f003 0301 	and.w	r3, r3, #1
 8017ed6:	2b00      	cmp	r3, #0
 8017ed8:	f000 80cf 	beq.w	801807a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8017edc:	7bbb      	ldrb	r3, [r7, #14]
 8017ede:	2b21      	cmp	r3, #33	; 0x21
 8017ee0:	d103      	bne.n	8017eea <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8017ee2:	6878      	ldr	r0, [r7, #4]
 8017ee4:	f000 fa7a 	bl	80183dc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017ee8:	e0c7      	b.n	801807a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8017eea:	7bfb      	ldrb	r3, [r7, #15]
 8017eec:	2b40      	cmp	r3, #64	; 0x40
 8017eee:	f040 80c4 	bne.w	801807a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8017ef2:	6878      	ldr	r0, [r7, #4]
 8017ef4:	f000 fae8 	bl	80184c8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017ef8:	e0bf      	b.n	801807a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8017efa:	687b      	ldr	r3, [r7, #4]
 8017efc:	681b      	ldr	r3, [r3, #0]
 8017efe:	685b      	ldr	r3, [r3, #4]
 8017f00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017f04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017f08:	f000 80b7 	beq.w	801807a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8017f0c:	69fb      	ldr	r3, [r7, #28]
 8017f0e:	099b      	lsrs	r3, r3, #6
 8017f10:	f003 0301 	and.w	r3, r3, #1
 8017f14:	2b00      	cmp	r3, #0
 8017f16:	d00f      	beq.n	8017f38 <HAL_I2C_EV_IRQHandler+0x194>
 8017f18:	697b      	ldr	r3, [r7, #20]
 8017f1a:	0a9b      	lsrs	r3, r3, #10
 8017f1c:	f003 0301 	and.w	r3, r3, #1
 8017f20:	2b00      	cmp	r3, #0
 8017f22:	d009      	beq.n	8017f38 <HAL_I2C_EV_IRQHandler+0x194>
 8017f24:	69fb      	ldr	r3, [r7, #28]
 8017f26:	089b      	lsrs	r3, r3, #2
 8017f28:	f003 0301 	and.w	r3, r3, #1
 8017f2c:	2b00      	cmp	r3, #0
 8017f2e:	d103      	bne.n	8017f38 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8017f30:	6878      	ldr	r0, [r7, #4]
 8017f32:	f000 fb5d 	bl	80185f0 <I2C_MasterReceive_RXNE>
 8017f36:	e011      	b.n	8017f5c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017f38:	69fb      	ldr	r3, [r7, #28]
 8017f3a:	089b      	lsrs	r3, r3, #2
 8017f3c:	f003 0301 	and.w	r3, r3, #1
 8017f40:	2b00      	cmp	r3, #0
 8017f42:	f000 809a 	beq.w	801807a <HAL_I2C_EV_IRQHandler+0x2d6>
 8017f46:	697b      	ldr	r3, [r7, #20]
 8017f48:	0a5b      	lsrs	r3, r3, #9
 8017f4a:	f003 0301 	and.w	r3, r3, #1
 8017f4e:	2b00      	cmp	r3, #0
 8017f50:	f000 8093 	beq.w	801807a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8017f54:	6878      	ldr	r0, [r7, #4]
 8017f56:	f000 fc06 	bl	8018766 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017f5a:	e08e      	b.n	801807a <HAL_I2C_EV_IRQHandler+0x2d6>
 8017f5c:	e08d      	b.n	801807a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8017f5e:	687b      	ldr	r3, [r7, #4]
 8017f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f62:	2b00      	cmp	r3, #0
 8017f64:	d004      	beq.n	8017f70 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	681b      	ldr	r3, [r3, #0]
 8017f6a:	695b      	ldr	r3, [r3, #20]
 8017f6c:	61fb      	str	r3, [r7, #28]
 8017f6e:	e007      	b.n	8017f80 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	681b      	ldr	r3, [r3, #0]
 8017f74:	699b      	ldr	r3, [r3, #24]
 8017f76:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8017f78:	687b      	ldr	r3, [r7, #4]
 8017f7a:	681b      	ldr	r3, [r3, #0]
 8017f7c:	695b      	ldr	r3, [r3, #20]
 8017f7e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017f80:	69fb      	ldr	r3, [r7, #28]
 8017f82:	085b      	lsrs	r3, r3, #1
 8017f84:	f003 0301 	and.w	r3, r3, #1
 8017f88:	2b00      	cmp	r3, #0
 8017f8a:	d012      	beq.n	8017fb2 <HAL_I2C_EV_IRQHandler+0x20e>
 8017f8c:	697b      	ldr	r3, [r7, #20]
 8017f8e:	0a5b      	lsrs	r3, r3, #9
 8017f90:	f003 0301 	and.w	r3, r3, #1
 8017f94:	2b00      	cmp	r3, #0
 8017f96:	d00c      	beq.n	8017fb2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8017f98:	687b      	ldr	r3, [r7, #4]
 8017f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f9c:	2b00      	cmp	r3, #0
 8017f9e:	d003      	beq.n	8017fa8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8017fa0:	687b      	ldr	r3, [r7, #4]
 8017fa2:	681b      	ldr	r3, [r3, #0]
 8017fa4:	699b      	ldr	r3, [r3, #24]
 8017fa6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8017fa8:	69b9      	ldr	r1, [r7, #24]
 8017faa:	6878      	ldr	r0, [r7, #4]
 8017fac:	f000 ffc4 	bl	8018f38 <I2C_Slave_ADDR>
 8017fb0:	e066      	b.n	8018080 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017fb2:	69fb      	ldr	r3, [r7, #28]
 8017fb4:	091b      	lsrs	r3, r3, #4
 8017fb6:	f003 0301 	and.w	r3, r3, #1
 8017fba:	2b00      	cmp	r3, #0
 8017fbc:	d009      	beq.n	8017fd2 <HAL_I2C_EV_IRQHandler+0x22e>
 8017fbe:	697b      	ldr	r3, [r7, #20]
 8017fc0:	0a5b      	lsrs	r3, r3, #9
 8017fc2:	f003 0301 	and.w	r3, r3, #1
 8017fc6:	2b00      	cmp	r3, #0
 8017fc8:	d003      	beq.n	8017fd2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8017fca:	6878      	ldr	r0, [r7, #4]
 8017fcc:	f000 fffe 	bl	8018fcc <I2C_Slave_STOPF>
 8017fd0:	e056      	b.n	8018080 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8017fd2:	7bbb      	ldrb	r3, [r7, #14]
 8017fd4:	2b21      	cmp	r3, #33	; 0x21
 8017fd6:	d002      	beq.n	8017fde <HAL_I2C_EV_IRQHandler+0x23a>
 8017fd8:	7bbb      	ldrb	r3, [r7, #14]
 8017fda:	2b29      	cmp	r3, #41	; 0x29
 8017fdc:	d125      	bne.n	801802a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8017fde:	69fb      	ldr	r3, [r7, #28]
 8017fe0:	09db      	lsrs	r3, r3, #7
 8017fe2:	f003 0301 	and.w	r3, r3, #1
 8017fe6:	2b00      	cmp	r3, #0
 8017fe8:	d00f      	beq.n	801800a <HAL_I2C_EV_IRQHandler+0x266>
 8017fea:	697b      	ldr	r3, [r7, #20]
 8017fec:	0a9b      	lsrs	r3, r3, #10
 8017fee:	f003 0301 	and.w	r3, r3, #1
 8017ff2:	2b00      	cmp	r3, #0
 8017ff4:	d009      	beq.n	801800a <HAL_I2C_EV_IRQHandler+0x266>
 8017ff6:	69fb      	ldr	r3, [r7, #28]
 8017ff8:	089b      	lsrs	r3, r3, #2
 8017ffa:	f003 0301 	and.w	r3, r3, #1
 8017ffe:	2b00      	cmp	r3, #0
 8018000:	d103      	bne.n	801800a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8018002:	6878      	ldr	r0, [r7, #4]
 8018004:	f000 feda 	bl	8018dbc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8018008:	e039      	b.n	801807e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801800a:	69fb      	ldr	r3, [r7, #28]
 801800c:	089b      	lsrs	r3, r3, #2
 801800e:	f003 0301 	and.w	r3, r3, #1
 8018012:	2b00      	cmp	r3, #0
 8018014:	d033      	beq.n	801807e <HAL_I2C_EV_IRQHandler+0x2da>
 8018016:	697b      	ldr	r3, [r7, #20]
 8018018:	0a5b      	lsrs	r3, r3, #9
 801801a:	f003 0301 	and.w	r3, r3, #1
 801801e:	2b00      	cmp	r3, #0
 8018020:	d02d      	beq.n	801807e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8018022:	6878      	ldr	r0, [r7, #4]
 8018024:	f000 ff07 	bl	8018e36 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8018028:	e029      	b.n	801807e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801802a:	69fb      	ldr	r3, [r7, #28]
 801802c:	099b      	lsrs	r3, r3, #6
 801802e:	f003 0301 	and.w	r3, r3, #1
 8018032:	2b00      	cmp	r3, #0
 8018034:	d00f      	beq.n	8018056 <HAL_I2C_EV_IRQHandler+0x2b2>
 8018036:	697b      	ldr	r3, [r7, #20]
 8018038:	0a9b      	lsrs	r3, r3, #10
 801803a:	f003 0301 	and.w	r3, r3, #1
 801803e:	2b00      	cmp	r3, #0
 8018040:	d009      	beq.n	8018056 <HAL_I2C_EV_IRQHandler+0x2b2>
 8018042:	69fb      	ldr	r3, [r7, #28]
 8018044:	089b      	lsrs	r3, r3, #2
 8018046:	f003 0301 	and.w	r3, r3, #1
 801804a:	2b00      	cmp	r3, #0
 801804c:	d103      	bne.n	8018056 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 801804e:	6878      	ldr	r0, [r7, #4]
 8018050:	f000 ff12 	bl	8018e78 <I2C_SlaveReceive_RXNE>
 8018054:	e014      	b.n	8018080 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8018056:	69fb      	ldr	r3, [r7, #28]
 8018058:	089b      	lsrs	r3, r3, #2
 801805a:	f003 0301 	and.w	r3, r3, #1
 801805e:	2b00      	cmp	r3, #0
 8018060:	d00e      	beq.n	8018080 <HAL_I2C_EV_IRQHandler+0x2dc>
 8018062:	697b      	ldr	r3, [r7, #20]
 8018064:	0a5b      	lsrs	r3, r3, #9
 8018066:	f003 0301 	and.w	r3, r3, #1
 801806a:	2b00      	cmp	r3, #0
 801806c:	d008      	beq.n	8018080 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 801806e:	6878      	ldr	r0, [r7, #4]
 8018070:	f000 ff40 	bl	8018ef4 <I2C_SlaveReceive_BTF>
 8018074:	e004      	b.n	8018080 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8018076:	bf00      	nop
 8018078:	e002      	b.n	8018080 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801807a:	bf00      	nop
 801807c:	e000      	b.n	8018080 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801807e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8018080:	3720      	adds	r7, #32
 8018082:	46bd      	mov	sp, r7
 8018084:	bd80      	pop	{r7, pc}

08018086 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8018086:	b580      	push	{r7, lr}
 8018088:	b08a      	sub	sp, #40	; 0x28
 801808a:	af00      	add	r7, sp, #0
 801808c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	681b      	ldr	r3, [r3, #0]
 8018092:	695b      	ldr	r3, [r3, #20]
 8018094:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8018096:	687b      	ldr	r3, [r7, #4]
 8018098:	681b      	ldr	r3, [r3, #0]
 801809a:	685b      	ldr	r3, [r3, #4]
 801809c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 801809e:	2300      	movs	r3, #0
 80180a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80180a2:	687b      	ldr	r3, [r7, #4]
 80180a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80180a8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80180aa:	6a3b      	ldr	r3, [r7, #32]
 80180ac:	0a1b      	lsrs	r3, r3, #8
 80180ae:	f003 0301 	and.w	r3, r3, #1
 80180b2:	2b00      	cmp	r3, #0
 80180b4:	d00e      	beq.n	80180d4 <HAL_I2C_ER_IRQHandler+0x4e>
 80180b6:	69fb      	ldr	r3, [r7, #28]
 80180b8:	0a1b      	lsrs	r3, r3, #8
 80180ba:	f003 0301 	and.w	r3, r3, #1
 80180be:	2b00      	cmp	r3, #0
 80180c0:	d008      	beq.n	80180d4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80180c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180c4:	f043 0301 	orr.w	r3, r3, #1
 80180c8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	681b      	ldr	r3, [r3, #0]
 80180ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80180d2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80180d4:	6a3b      	ldr	r3, [r7, #32]
 80180d6:	0a5b      	lsrs	r3, r3, #9
 80180d8:	f003 0301 	and.w	r3, r3, #1
 80180dc:	2b00      	cmp	r3, #0
 80180de:	d00e      	beq.n	80180fe <HAL_I2C_ER_IRQHandler+0x78>
 80180e0:	69fb      	ldr	r3, [r7, #28]
 80180e2:	0a1b      	lsrs	r3, r3, #8
 80180e4:	f003 0301 	and.w	r3, r3, #1
 80180e8:	2b00      	cmp	r3, #0
 80180ea:	d008      	beq.n	80180fe <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80180ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180ee:	f043 0302 	orr.w	r3, r3, #2
 80180f2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80180f4:	687b      	ldr	r3, [r7, #4]
 80180f6:	681b      	ldr	r3, [r3, #0]
 80180f8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80180fc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80180fe:	6a3b      	ldr	r3, [r7, #32]
 8018100:	0a9b      	lsrs	r3, r3, #10
 8018102:	f003 0301 	and.w	r3, r3, #1
 8018106:	2b00      	cmp	r3, #0
 8018108:	d03f      	beq.n	801818a <HAL_I2C_ER_IRQHandler+0x104>
 801810a:	69fb      	ldr	r3, [r7, #28]
 801810c:	0a1b      	lsrs	r3, r3, #8
 801810e:	f003 0301 	and.w	r3, r3, #1
 8018112:	2b00      	cmp	r3, #0
 8018114:	d039      	beq.n	801818a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8018116:	7efb      	ldrb	r3, [r7, #27]
 8018118:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 801811a:	687b      	ldr	r3, [r7, #4]
 801811c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801811e:	b29b      	uxth	r3, r3
 8018120:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8018122:	687b      	ldr	r3, [r7, #4]
 8018124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018128:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 801812a:	687b      	ldr	r3, [r7, #4]
 801812c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801812e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8018130:	7ebb      	ldrb	r3, [r7, #26]
 8018132:	2b20      	cmp	r3, #32
 8018134:	d112      	bne.n	801815c <HAL_I2C_ER_IRQHandler+0xd6>
 8018136:	697b      	ldr	r3, [r7, #20]
 8018138:	2b00      	cmp	r3, #0
 801813a:	d10f      	bne.n	801815c <HAL_I2C_ER_IRQHandler+0xd6>
 801813c:	7cfb      	ldrb	r3, [r7, #19]
 801813e:	2b21      	cmp	r3, #33	; 0x21
 8018140:	d008      	beq.n	8018154 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8018142:	7cfb      	ldrb	r3, [r7, #19]
 8018144:	2b29      	cmp	r3, #41	; 0x29
 8018146:	d005      	beq.n	8018154 <HAL_I2C_ER_IRQHandler+0xce>
 8018148:	7cfb      	ldrb	r3, [r7, #19]
 801814a:	2b28      	cmp	r3, #40	; 0x28
 801814c:	d106      	bne.n	801815c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 801814e:	68fb      	ldr	r3, [r7, #12]
 8018150:	2b21      	cmp	r3, #33	; 0x21
 8018152:	d103      	bne.n	801815c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8018154:	6878      	ldr	r0, [r7, #4]
 8018156:	f001 f869 	bl	801922c <I2C_Slave_AF>
 801815a:	e016      	b.n	801818a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	681b      	ldr	r3, [r3, #0]
 8018160:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8018164:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8018166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018168:	f043 0304 	orr.w	r3, r3, #4
 801816c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 801816e:	7efb      	ldrb	r3, [r7, #27]
 8018170:	2b10      	cmp	r3, #16
 8018172:	d002      	beq.n	801817a <HAL_I2C_ER_IRQHandler+0xf4>
 8018174:	7efb      	ldrb	r3, [r7, #27]
 8018176:	2b40      	cmp	r3, #64	; 0x40
 8018178:	d107      	bne.n	801818a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	681b      	ldr	r3, [r3, #0]
 801817e:	681a      	ldr	r2, [r3, #0]
 8018180:	687b      	ldr	r3, [r7, #4]
 8018182:	681b      	ldr	r3, [r3, #0]
 8018184:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018188:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801818a:	6a3b      	ldr	r3, [r7, #32]
 801818c:	0adb      	lsrs	r3, r3, #11
 801818e:	f003 0301 	and.w	r3, r3, #1
 8018192:	2b00      	cmp	r3, #0
 8018194:	d00e      	beq.n	80181b4 <HAL_I2C_ER_IRQHandler+0x12e>
 8018196:	69fb      	ldr	r3, [r7, #28]
 8018198:	0a1b      	lsrs	r3, r3, #8
 801819a:	f003 0301 	and.w	r3, r3, #1
 801819e:	2b00      	cmp	r3, #0
 80181a0:	d008      	beq.n	80181b4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80181a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181a4:	f043 0308 	orr.w	r3, r3, #8
 80181a8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80181aa:	687b      	ldr	r3, [r7, #4]
 80181ac:	681b      	ldr	r3, [r3, #0]
 80181ae:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80181b2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80181b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181b6:	2b00      	cmp	r3, #0
 80181b8:	d008      	beq.n	80181cc <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80181ba:	687b      	ldr	r3, [r7, #4]
 80181bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80181be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181c0:	431a      	orrs	r2, r3
 80181c2:	687b      	ldr	r3, [r7, #4]
 80181c4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80181c6:	6878      	ldr	r0, [r7, #4]
 80181c8:	f001 f8a0 	bl	801930c <I2C_ITError>
  }
}
 80181cc:	bf00      	nop
 80181ce:	3728      	adds	r7, #40	; 0x28
 80181d0:	46bd      	mov	sp, r7
 80181d2:	bd80      	pop	{r7, pc}

080181d4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80181d4:	b480      	push	{r7}
 80181d6:	b083      	sub	sp, #12
 80181d8:	af00      	add	r7, sp, #0
 80181da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80181dc:	bf00      	nop
 80181de:	370c      	adds	r7, #12
 80181e0:	46bd      	mov	sp, r7
 80181e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181e6:	4770      	bx	lr

080181e8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80181e8:	b480      	push	{r7}
 80181ea:	b083      	sub	sp, #12
 80181ec:	af00      	add	r7, sp, #0
 80181ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80181f0:	bf00      	nop
 80181f2:	370c      	adds	r7, #12
 80181f4:	46bd      	mov	sp, r7
 80181f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181fa:	4770      	bx	lr

080181fc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80181fc:	b480      	push	{r7}
 80181fe:	b083      	sub	sp, #12
 8018200:	af00      	add	r7, sp, #0
 8018202:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8018204:	bf00      	nop
 8018206:	370c      	adds	r7, #12
 8018208:	46bd      	mov	sp, r7
 801820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801820e:	4770      	bx	lr

08018210 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8018210:	b480      	push	{r7}
 8018212:	b083      	sub	sp, #12
 8018214:	af00      	add	r7, sp, #0
 8018216:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8018218:	bf00      	nop
 801821a:	370c      	adds	r7, #12
 801821c:	46bd      	mov	sp, r7
 801821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018222:	4770      	bx	lr

08018224 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8018224:	b480      	push	{r7}
 8018226:	b083      	sub	sp, #12
 8018228:	af00      	add	r7, sp, #0
 801822a:	6078      	str	r0, [r7, #4]
 801822c:	460b      	mov	r3, r1
 801822e:	70fb      	strb	r3, [r7, #3]
 8018230:	4613      	mov	r3, r2
 8018232:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8018234:	bf00      	nop
 8018236:	370c      	adds	r7, #12
 8018238:	46bd      	mov	sp, r7
 801823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801823e:	4770      	bx	lr

08018240 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8018240:	b480      	push	{r7}
 8018242:	b083      	sub	sp, #12
 8018244:	af00      	add	r7, sp, #0
 8018246:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8018248:	bf00      	nop
 801824a:	370c      	adds	r7, #12
 801824c:	46bd      	mov	sp, r7
 801824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018252:	4770      	bx	lr

08018254 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8018254:	b480      	push	{r7}
 8018256:	b083      	sub	sp, #12
 8018258:	af00      	add	r7, sp, #0
 801825a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 801825c:	bf00      	nop
 801825e:	370c      	adds	r7, #12
 8018260:	46bd      	mov	sp, r7
 8018262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018266:	4770      	bx	lr

08018268 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8018268:	b480      	push	{r7}
 801826a:	b083      	sub	sp, #12
 801826c:	af00      	add	r7, sp, #0
 801826e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8018270:	bf00      	nop
 8018272:	370c      	adds	r7, #12
 8018274:	46bd      	mov	sp, r7
 8018276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801827a:	4770      	bx	lr

0801827c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 801827c:	b480      	push	{r7}
 801827e:	b083      	sub	sp, #12
 8018280:	af00      	add	r7, sp, #0
 8018282:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8018284:	bf00      	nop
 8018286:	370c      	adds	r7, #12
 8018288:	46bd      	mov	sp, r7
 801828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801828e:	4770      	bx	lr

08018290 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8018290:	b480      	push	{r7}
 8018292:	b083      	sub	sp, #12
 8018294:	af00      	add	r7, sp, #0
 8018296:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8018298:	bf00      	nop
 801829a:	370c      	adds	r7, #12
 801829c:	46bd      	mov	sp, r7
 801829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182a2:	4770      	bx	lr

080182a4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80182a4:	b580      	push	{r7, lr}
 80182a6:	b084      	sub	sp, #16
 80182a8:	af00      	add	r7, sp, #0
 80182aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80182b2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80182b4:	687b      	ldr	r3, [r7, #4]
 80182b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80182ba:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80182c0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80182c2:	687b      	ldr	r3, [r7, #4]
 80182c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	d150      	bne.n	801836c <I2C_MasterTransmit_TXE+0xc8>
 80182ca:	7bfb      	ldrb	r3, [r7, #15]
 80182cc:	2b21      	cmp	r3, #33	; 0x21
 80182ce:	d14d      	bne.n	801836c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80182d0:	68bb      	ldr	r3, [r7, #8]
 80182d2:	2b08      	cmp	r3, #8
 80182d4:	d01d      	beq.n	8018312 <I2C_MasterTransmit_TXE+0x6e>
 80182d6:	68bb      	ldr	r3, [r7, #8]
 80182d8:	2b20      	cmp	r3, #32
 80182da:	d01a      	beq.n	8018312 <I2C_MasterTransmit_TXE+0x6e>
 80182dc:	68bb      	ldr	r3, [r7, #8]
 80182de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80182e2:	d016      	beq.n	8018312 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	681b      	ldr	r3, [r3, #0]
 80182e8:	685a      	ldr	r2, [r3, #4]
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	681b      	ldr	r3, [r3, #0]
 80182ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80182f2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	2211      	movs	r2, #17
 80182f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80182fa:	687b      	ldr	r3, [r7, #4]
 80182fc:	2200      	movs	r2, #0
 80182fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8018302:	687b      	ldr	r3, [r7, #4]
 8018304:	2220      	movs	r2, #32
 8018306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 801830a:	6878      	ldr	r0, [r7, #4]
 801830c:	f7ff ff62 	bl	80181d4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8018310:	e060      	b.n	80183d4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018312:	687b      	ldr	r3, [r7, #4]
 8018314:	681b      	ldr	r3, [r3, #0]
 8018316:	685a      	ldr	r2, [r3, #4]
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	681b      	ldr	r3, [r3, #0]
 801831c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018320:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	681b      	ldr	r3, [r3, #0]
 8018326:	681a      	ldr	r2, [r3, #0]
 8018328:	687b      	ldr	r3, [r7, #4]
 801832a:	681b      	ldr	r3, [r3, #0]
 801832c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018330:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	2200      	movs	r2, #0
 8018336:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	2220      	movs	r2, #32
 801833c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018346:	b2db      	uxtb	r3, r3
 8018348:	2b40      	cmp	r3, #64	; 0x40
 801834a:	d107      	bne.n	801835c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	2200      	movs	r2, #0
 8018350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8018354:	6878      	ldr	r0, [r7, #4]
 8018356:	f7ff ff7d 	bl	8018254 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801835a:	e03b      	b.n	80183d4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	2200      	movs	r2, #0
 8018360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8018364:	6878      	ldr	r0, [r7, #4]
 8018366:	f7ff ff35 	bl	80181d4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801836a:	e033      	b.n	80183d4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 801836c:	7bfb      	ldrb	r3, [r7, #15]
 801836e:	2b21      	cmp	r3, #33	; 0x21
 8018370:	d005      	beq.n	801837e <I2C_MasterTransmit_TXE+0xda>
 8018372:	7bbb      	ldrb	r3, [r7, #14]
 8018374:	2b40      	cmp	r3, #64	; 0x40
 8018376:	d12d      	bne.n	80183d4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8018378:	7bfb      	ldrb	r3, [r7, #15]
 801837a:	2b22      	cmp	r3, #34	; 0x22
 801837c:	d12a      	bne.n	80183d4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 801837e:	687b      	ldr	r3, [r7, #4]
 8018380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018382:	b29b      	uxth	r3, r3
 8018384:	2b00      	cmp	r3, #0
 8018386:	d108      	bne.n	801839a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	681b      	ldr	r3, [r3, #0]
 801838c:	685a      	ldr	r2, [r3, #4]
 801838e:	687b      	ldr	r3, [r7, #4]
 8018390:	681b      	ldr	r3, [r3, #0]
 8018392:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018396:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8018398:	e01c      	b.n	80183d4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80183a0:	b2db      	uxtb	r3, r3
 80183a2:	2b40      	cmp	r3, #64	; 0x40
 80183a4:	d103      	bne.n	80183ae <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80183a6:	6878      	ldr	r0, [r7, #4]
 80183a8:	f000 f88e 	bl	80184c8 <I2C_MemoryTransmit_TXE_BTF>
}
 80183ac:	e012      	b.n	80183d4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80183ae:	687b      	ldr	r3, [r7, #4]
 80183b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80183b2:	781a      	ldrb	r2, [r3, #0]
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	681b      	ldr	r3, [r3, #0]
 80183b8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80183ba:	687b      	ldr	r3, [r7, #4]
 80183bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80183be:	1c5a      	adds	r2, r3, #1
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80183c4:	687b      	ldr	r3, [r7, #4]
 80183c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80183c8:	b29b      	uxth	r3, r3
 80183ca:	3b01      	subs	r3, #1
 80183cc:	b29a      	uxth	r2, r3
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80183d2:	e7ff      	b.n	80183d4 <I2C_MasterTransmit_TXE+0x130>
 80183d4:	bf00      	nop
 80183d6:	3710      	adds	r7, #16
 80183d8:	46bd      	mov	sp, r7
 80183da:	bd80      	pop	{r7, pc}

080183dc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80183dc:	b580      	push	{r7, lr}
 80183de:	b084      	sub	sp, #16
 80183e0:	af00      	add	r7, sp, #0
 80183e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80183e4:	687b      	ldr	r3, [r7, #4]
 80183e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183e8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80183ea:	687b      	ldr	r3, [r7, #4]
 80183ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80183f0:	b2db      	uxtb	r3, r3
 80183f2:	2b21      	cmp	r3, #33	; 0x21
 80183f4:	d164      	bne.n	80184c0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80183f6:	687b      	ldr	r3, [r7, #4]
 80183f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80183fa:	b29b      	uxth	r3, r3
 80183fc:	2b00      	cmp	r3, #0
 80183fe:	d012      	beq.n	8018426 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018404:	781a      	ldrb	r2, [r3, #0]
 8018406:	687b      	ldr	r3, [r7, #4]
 8018408:	681b      	ldr	r3, [r3, #0]
 801840a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801840c:	687b      	ldr	r3, [r7, #4]
 801840e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018410:	1c5a      	adds	r2, r3, #1
 8018412:	687b      	ldr	r3, [r7, #4]
 8018414:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8018416:	687b      	ldr	r3, [r7, #4]
 8018418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801841a:	b29b      	uxth	r3, r3
 801841c:	3b01      	subs	r3, #1
 801841e:	b29a      	uxth	r2, r3
 8018420:	687b      	ldr	r3, [r7, #4]
 8018422:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8018424:	e04c      	b.n	80184c0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8018426:	68fb      	ldr	r3, [r7, #12]
 8018428:	2b08      	cmp	r3, #8
 801842a:	d01d      	beq.n	8018468 <I2C_MasterTransmit_BTF+0x8c>
 801842c:	68fb      	ldr	r3, [r7, #12]
 801842e:	2b20      	cmp	r3, #32
 8018430:	d01a      	beq.n	8018468 <I2C_MasterTransmit_BTF+0x8c>
 8018432:	68fb      	ldr	r3, [r7, #12]
 8018434:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8018438:	d016      	beq.n	8018468 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801843a:	687b      	ldr	r3, [r7, #4]
 801843c:	681b      	ldr	r3, [r3, #0]
 801843e:	685a      	ldr	r2, [r3, #4]
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	681b      	ldr	r3, [r3, #0]
 8018444:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018448:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 801844a:	687b      	ldr	r3, [r7, #4]
 801844c:	2211      	movs	r2, #17
 801844e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018450:	687b      	ldr	r3, [r7, #4]
 8018452:	2200      	movs	r2, #0
 8018454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8018458:	687b      	ldr	r3, [r7, #4]
 801845a:	2220      	movs	r2, #32
 801845c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8018460:	6878      	ldr	r0, [r7, #4]
 8018462:	f7ff feb7 	bl	80181d4 <HAL_I2C_MasterTxCpltCallback>
}
 8018466:	e02b      	b.n	80184c0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018468:	687b      	ldr	r3, [r7, #4]
 801846a:	681b      	ldr	r3, [r3, #0]
 801846c:	685a      	ldr	r2, [r3, #4]
 801846e:	687b      	ldr	r3, [r7, #4]
 8018470:	681b      	ldr	r3, [r3, #0]
 8018472:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018476:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018478:	687b      	ldr	r3, [r7, #4]
 801847a:	681b      	ldr	r3, [r3, #0]
 801847c:	681a      	ldr	r2, [r3, #0]
 801847e:	687b      	ldr	r3, [r7, #4]
 8018480:	681b      	ldr	r3, [r3, #0]
 8018482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018486:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	2200      	movs	r2, #0
 801848c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 801848e:	687b      	ldr	r3, [r7, #4]
 8018490:	2220      	movs	r2, #32
 8018492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801849c:	b2db      	uxtb	r3, r3
 801849e:	2b40      	cmp	r3, #64	; 0x40
 80184a0:	d107      	bne.n	80184b2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80184a2:	687b      	ldr	r3, [r7, #4]
 80184a4:	2200      	movs	r2, #0
 80184a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80184aa:	6878      	ldr	r0, [r7, #4]
 80184ac:	f7ff fed2 	bl	8018254 <HAL_I2C_MemTxCpltCallback>
}
 80184b0:	e006      	b.n	80184c0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80184b2:	687b      	ldr	r3, [r7, #4]
 80184b4:	2200      	movs	r2, #0
 80184b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80184ba:	6878      	ldr	r0, [r7, #4]
 80184bc:	f7ff fe8a 	bl	80181d4 <HAL_I2C_MasterTxCpltCallback>
}
 80184c0:	bf00      	nop
 80184c2:	3710      	adds	r7, #16
 80184c4:	46bd      	mov	sp, r7
 80184c6:	bd80      	pop	{r7, pc}

080184c8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80184c8:	b580      	push	{r7, lr}
 80184ca:	b084      	sub	sp, #16
 80184cc:	af00      	add	r7, sp, #0
 80184ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80184d0:	687b      	ldr	r3, [r7, #4]
 80184d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80184d6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80184d8:	687b      	ldr	r3, [r7, #4]
 80184da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80184dc:	2b00      	cmp	r3, #0
 80184de:	d11d      	bne.n	801851c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80184e0:	687b      	ldr	r3, [r7, #4]
 80184e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80184e4:	2b01      	cmp	r3, #1
 80184e6:	d10b      	bne.n	8018500 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80184e8:	687b      	ldr	r3, [r7, #4]
 80184ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80184ec:	b2da      	uxtb	r2, r3
 80184ee:	687b      	ldr	r3, [r7, #4]
 80184f0:	681b      	ldr	r3, [r3, #0]
 80184f2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80184f4:	687b      	ldr	r3, [r7, #4]
 80184f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80184f8:	1c9a      	adds	r2, r3, #2
 80184fa:	687b      	ldr	r3, [r7, #4]
 80184fc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80184fe:	e073      	b.n	80185e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018504:	b29b      	uxth	r3, r3
 8018506:	121b      	asrs	r3, r3, #8
 8018508:	b2da      	uxtb	r2, r3
 801850a:	687b      	ldr	r3, [r7, #4]
 801850c:	681b      	ldr	r3, [r3, #0]
 801850e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8018510:	687b      	ldr	r3, [r7, #4]
 8018512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018514:	1c5a      	adds	r2, r3, #1
 8018516:	687b      	ldr	r3, [r7, #4]
 8018518:	651a      	str	r2, [r3, #80]	; 0x50
}
 801851a:	e065      	b.n	80185e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 801851c:	687b      	ldr	r3, [r7, #4]
 801851e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018520:	2b01      	cmp	r3, #1
 8018522:	d10b      	bne.n	801853c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8018524:	687b      	ldr	r3, [r7, #4]
 8018526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018528:	b2da      	uxtb	r2, r3
 801852a:	687b      	ldr	r3, [r7, #4]
 801852c:	681b      	ldr	r3, [r3, #0]
 801852e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018534:	1c5a      	adds	r2, r3, #1
 8018536:	687b      	ldr	r3, [r7, #4]
 8018538:	651a      	str	r2, [r3, #80]	; 0x50
}
 801853a:	e055      	b.n	80185e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 801853c:	687b      	ldr	r3, [r7, #4]
 801853e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018540:	2b02      	cmp	r3, #2
 8018542:	d151      	bne.n	80185e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8018544:	7bfb      	ldrb	r3, [r7, #15]
 8018546:	2b22      	cmp	r3, #34	; 0x22
 8018548:	d10d      	bne.n	8018566 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 801854a:	687b      	ldr	r3, [r7, #4]
 801854c:	681b      	ldr	r3, [r3, #0]
 801854e:	681a      	ldr	r2, [r3, #0]
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	681b      	ldr	r3, [r3, #0]
 8018554:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8018558:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 801855a:	687b      	ldr	r3, [r7, #4]
 801855c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801855e:	1c5a      	adds	r2, r3, #1
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	651a      	str	r2, [r3, #80]	; 0x50
}
 8018564:	e040      	b.n	80185e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8018566:	687b      	ldr	r3, [r7, #4]
 8018568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801856a:	b29b      	uxth	r3, r3
 801856c:	2b00      	cmp	r3, #0
 801856e:	d015      	beq.n	801859c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8018570:	7bfb      	ldrb	r3, [r7, #15]
 8018572:	2b21      	cmp	r3, #33	; 0x21
 8018574:	d112      	bne.n	801859c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8018576:	687b      	ldr	r3, [r7, #4]
 8018578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801857a:	781a      	ldrb	r2, [r3, #0]
 801857c:	687b      	ldr	r3, [r7, #4]
 801857e:	681b      	ldr	r3, [r3, #0]
 8018580:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8018582:	687b      	ldr	r3, [r7, #4]
 8018584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018586:	1c5a      	adds	r2, r3, #1
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018590:	b29b      	uxth	r3, r3
 8018592:	3b01      	subs	r3, #1
 8018594:	b29a      	uxth	r2, r3
 8018596:	687b      	ldr	r3, [r7, #4]
 8018598:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801859a:	e025      	b.n	80185e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 801859c:	687b      	ldr	r3, [r7, #4]
 801859e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80185a0:	b29b      	uxth	r3, r3
 80185a2:	2b00      	cmp	r3, #0
 80185a4:	d120      	bne.n	80185e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80185a6:	7bfb      	ldrb	r3, [r7, #15]
 80185a8:	2b21      	cmp	r3, #33	; 0x21
 80185aa:	d11d      	bne.n	80185e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80185ac:	687b      	ldr	r3, [r7, #4]
 80185ae:	681b      	ldr	r3, [r3, #0]
 80185b0:	685a      	ldr	r2, [r3, #4]
 80185b2:	687b      	ldr	r3, [r7, #4]
 80185b4:	681b      	ldr	r3, [r3, #0]
 80185b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80185ba:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80185bc:	687b      	ldr	r3, [r7, #4]
 80185be:	681b      	ldr	r3, [r3, #0]
 80185c0:	681a      	ldr	r2, [r3, #0]
 80185c2:	687b      	ldr	r3, [r7, #4]
 80185c4:	681b      	ldr	r3, [r3, #0]
 80185c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80185ca:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80185cc:	687b      	ldr	r3, [r7, #4]
 80185ce:	2200      	movs	r2, #0
 80185d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80185d2:	687b      	ldr	r3, [r7, #4]
 80185d4:	2220      	movs	r2, #32
 80185d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80185da:	687b      	ldr	r3, [r7, #4]
 80185dc:	2200      	movs	r2, #0
 80185de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80185e2:	6878      	ldr	r0, [r7, #4]
 80185e4:	f7ff fe36 	bl	8018254 <HAL_I2C_MemTxCpltCallback>
}
 80185e8:	bf00      	nop
 80185ea:	3710      	adds	r7, #16
 80185ec:	46bd      	mov	sp, r7
 80185ee:	bd80      	pop	{r7, pc}

080185f0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80185f0:	b580      	push	{r7, lr}
 80185f2:	b084      	sub	sp, #16
 80185f4:	af00      	add	r7, sp, #0
 80185f6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80185fe:	b2db      	uxtb	r3, r3
 8018600:	2b22      	cmp	r3, #34	; 0x22
 8018602:	f040 80ac 	bne.w	801875e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8018606:	687b      	ldr	r3, [r7, #4]
 8018608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801860a:	b29b      	uxth	r3, r3
 801860c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 801860e:	68fb      	ldr	r3, [r7, #12]
 8018610:	2b03      	cmp	r3, #3
 8018612:	d921      	bls.n	8018658 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018614:	687b      	ldr	r3, [r7, #4]
 8018616:	681b      	ldr	r3, [r3, #0]
 8018618:	691a      	ldr	r2, [r3, #16]
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801861e:	b2d2      	uxtb	r2, r2
 8018620:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8018622:	687b      	ldr	r3, [r7, #4]
 8018624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018626:	1c5a      	adds	r2, r3, #1
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801862c:	687b      	ldr	r3, [r7, #4]
 801862e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018630:	b29b      	uxth	r3, r3
 8018632:	3b01      	subs	r3, #1
 8018634:	b29a      	uxth	r2, r3
 8018636:	687b      	ldr	r3, [r7, #4]
 8018638:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 801863a:	687b      	ldr	r3, [r7, #4]
 801863c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801863e:	b29b      	uxth	r3, r3
 8018640:	2b03      	cmp	r3, #3
 8018642:	f040 808c 	bne.w	801875e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8018646:	687b      	ldr	r3, [r7, #4]
 8018648:	681b      	ldr	r3, [r3, #0]
 801864a:	685a      	ldr	r2, [r3, #4]
 801864c:	687b      	ldr	r3, [r7, #4]
 801864e:	681b      	ldr	r3, [r3, #0]
 8018650:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018654:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8018656:	e082      	b.n	801875e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8018658:	687b      	ldr	r3, [r7, #4]
 801865a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801865c:	2b02      	cmp	r3, #2
 801865e:	d075      	beq.n	801874c <I2C_MasterReceive_RXNE+0x15c>
 8018660:	68fb      	ldr	r3, [r7, #12]
 8018662:	2b01      	cmp	r3, #1
 8018664:	d002      	beq.n	801866c <I2C_MasterReceive_RXNE+0x7c>
 8018666:	68fb      	ldr	r3, [r7, #12]
 8018668:	2b00      	cmp	r3, #0
 801866a:	d16f      	bne.n	801874c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801866c:	6878      	ldr	r0, [r7, #4]
 801866e:	f001 fafd 	bl	8019c6c <I2C_WaitOnSTOPRequestThroughIT>
 8018672:	4603      	mov	r3, r0
 8018674:	2b00      	cmp	r3, #0
 8018676:	d142      	bne.n	80186fe <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018678:	687b      	ldr	r3, [r7, #4]
 801867a:	681b      	ldr	r3, [r3, #0]
 801867c:	681a      	ldr	r2, [r3, #0]
 801867e:	687b      	ldr	r3, [r7, #4]
 8018680:	681b      	ldr	r3, [r3, #0]
 8018682:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018686:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	681b      	ldr	r3, [r3, #0]
 801868c:	685a      	ldr	r2, [r3, #4]
 801868e:	687b      	ldr	r3, [r7, #4]
 8018690:	681b      	ldr	r3, [r3, #0]
 8018692:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018696:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018698:	687b      	ldr	r3, [r7, #4]
 801869a:	681b      	ldr	r3, [r3, #0]
 801869c:	691a      	ldr	r2, [r3, #16]
 801869e:	687b      	ldr	r3, [r7, #4]
 80186a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80186a2:	b2d2      	uxtb	r2, r2
 80186a4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80186a6:	687b      	ldr	r3, [r7, #4]
 80186a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80186aa:	1c5a      	adds	r2, r3, #1
 80186ac:	687b      	ldr	r3, [r7, #4]
 80186ae:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80186b0:	687b      	ldr	r3, [r7, #4]
 80186b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80186b4:	b29b      	uxth	r3, r3
 80186b6:	3b01      	subs	r3, #1
 80186b8:	b29a      	uxth	r2, r3
 80186ba:	687b      	ldr	r3, [r7, #4]
 80186bc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80186be:	687b      	ldr	r3, [r7, #4]
 80186c0:	2220      	movs	r2, #32
 80186c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80186c6:	687b      	ldr	r3, [r7, #4]
 80186c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80186cc:	b2db      	uxtb	r3, r3
 80186ce:	2b40      	cmp	r3, #64	; 0x40
 80186d0:	d10a      	bne.n	80186e8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80186d2:	687b      	ldr	r3, [r7, #4]
 80186d4:	2200      	movs	r2, #0
 80186d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	2200      	movs	r2, #0
 80186de:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80186e0:	6878      	ldr	r0, [r7, #4]
 80186e2:	f7ff fdc1 	bl	8018268 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80186e6:	e03a      	b.n	801875e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80186e8:	687b      	ldr	r3, [r7, #4]
 80186ea:	2200      	movs	r2, #0
 80186ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	2212      	movs	r2, #18
 80186f4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80186f6:	6878      	ldr	r0, [r7, #4]
 80186f8:	f7ff fd76 	bl	80181e8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80186fc:	e02f      	b.n	801875e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80186fe:	687b      	ldr	r3, [r7, #4]
 8018700:	681b      	ldr	r3, [r3, #0]
 8018702:	685a      	ldr	r2, [r3, #4]
 8018704:	687b      	ldr	r3, [r7, #4]
 8018706:	681b      	ldr	r3, [r3, #0]
 8018708:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801870c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801870e:	687b      	ldr	r3, [r7, #4]
 8018710:	681b      	ldr	r3, [r3, #0]
 8018712:	691a      	ldr	r2, [r3, #16]
 8018714:	687b      	ldr	r3, [r7, #4]
 8018716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018718:	b2d2      	uxtb	r2, r2
 801871a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 801871c:	687b      	ldr	r3, [r7, #4]
 801871e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018720:	1c5a      	adds	r2, r3, #1
 8018722:	687b      	ldr	r3, [r7, #4]
 8018724:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8018726:	687b      	ldr	r3, [r7, #4]
 8018728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801872a:	b29b      	uxth	r3, r3
 801872c:	3b01      	subs	r3, #1
 801872e:	b29a      	uxth	r2, r3
 8018730:	687b      	ldr	r3, [r7, #4]
 8018732:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8018734:	687b      	ldr	r3, [r7, #4]
 8018736:	2220      	movs	r2, #32
 8018738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801873c:	687b      	ldr	r3, [r7, #4]
 801873e:	2200      	movs	r2, #0
 8018740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8018744:	6878      	ldr	r0, [r7, #4]
 8018746:	f7ff fd99 	bl	801827c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801874a:	e008      	b.n	801875e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	681b      	ldr	r3, [r3, #0]
 8018750:	685a      	ldr	r2, [r3, #4]
 8018752:	687b      	ldr	r3, [r7, #4]
 8018754:	681b      	ldr	r3, [r3, #0]
 8018756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801875a:	605a      	str	r2, [r3, #4]
}
 801875c:	e7ff      	b.n	801875e <I2C_MasterReceive_RXNE+0x16e>
 801875e:	bf00      	nop
 8018760:	3710      	adds	r7, #16
 8018762:	46bd      	mov	sp, r7
 8018764:	bd80      	pop	{r7, pc}

08018766 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8018766:	b580      	push	{r7, lr}
 8018768:	b084      	sub	sp, #16
 801876a:	af00      	add	r7, sp, #0
 801876c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 801876e:	687b      	ldr	r3, [r7, #4]
 8018770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018772:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018778:	b29b      	uxth	r3, r3
 801877a:	2b04      	cmp	r3, #4
 801877c:	d11b      	bne.n	80187b6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801877e:	687b      	ldr	r3, [r7, #4]
 8018780:	681b      	ldr	r3, [r3, #0]
 8018782:	685a      	ldr	r2, [r3, #4]
 8018784:	687b      	ldr	r3, [r7, #4]
 8018786:	681b      	ldr	r3, [r3, #0]
 8018788:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801878c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801878e:	687b      	ldr	r3, [r7, #4]
 8018790:	681b      	ldr	r3, [r3, #0]
 8018792:	691a      	ldr	r2, [r3, #16]
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018798:	b2d2      	uxtb	r2, r2
 801879a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187a0:	1c5a      	adds	r2, r3, #1
 80187a2:	687b      	ldr	r3, [r7, #4]
 80187a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80187a6:	687b      	ldr	r3, [r7, #4]
 80187a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80187aa:	b29b      	uxth	r3, r3
 80187ac:	3b01      	subs	r3, #1
 80187ae:	b29a      	uxth	r2, r3
 80187b0:	687b      	ldr	r3, [r7, #4]
 80187b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80187b4:	e0bd      	b.n	8018932 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80187b6:	687b      	ldr	r3, [r7, #4]
 80187b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80187ba:	b29b      	uxth	r3, r3
 80187bc:	2b03      	cmp	r3, #3
 80187be:	d129      	bne.n	8018814 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80187c0:	687b      	ldr	r3, [r7, #4]
 80187c2:	681b      	ldr	r3, [r3, #0]
 80187c4:	685a      	ldr	r2, [r3, #4]
 80187c6:	687b      	ldr	r3, [r7, #4]
 80187c8:	681b      	ldr	r3, [r3, #0]
 80187ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80187ce:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80187d0:	68fb      	ldr	r3, [r7, #12]
 80187d2:	2b04      	cmp	r3, #4
 80187d4:	d00a      	beq.n	80187ec <I2C_MasterReceive_BTF+0x86>
 80187d6:	68fb      	ldr	r3, [r7, #12]
 80187d8:	2b02      	cmp	r3, #2
 80187da:	d007      	beq.n	80187ec <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80187dc:	687b      	ldr	r3, [r7, #4]
 80187de:	681b      	ldr	r3, [r3, #0]
 80187e0:	681a      	ldr	r2, [r3, #0]
 80187e2:	687b      	ldr	r3, [r7, #4]
 80187e4:	681b      	ldr	r3, [r3, #0]
 80187e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80187ea:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	681b      	ldr	r3, [r3, #0]
 80187f0:	691a      	ldr	r2, [r3, #16]
 80187f2:	687b      	ldr	r3, [r7, #4]
 80187f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187f6:	b2d2      	uxtb	r2, r2
 80187f8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80187fa:	687b      	ldr	r3, [r7, #4]
 80187fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187fe:	1c5a      	adds	r2, r3, #1
 8018800:	687b      	ldr	r3, [r7, #4]
 8018802:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018808:	b29b      	uxth	r3, r3
 801880a:	3b01      	subs	r3, #1
 801880c:	b29a      	uxth	r2, r3
 801880e:	687b      	ldr	r3, [r7, #4]
 8018810:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8018812:	e08e      	b.n	8018932 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8018814:	687b      	ldr	r3, [r7, #4]
 8018816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018818:	b29b      	uxth	r3, r3
 801881a:	2b02      	cmp	r3, #2
 801881c:	d176      	bne.n	801890c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 801881e:	68fb      	ldr	r3, [r7, #12]
 8018820:	2b01      	cmp	r3, #1
 8018822:	d002      	beq.n	801882a <I2C_MasterReceive_BTF+0xc4>
 8018824:	68fb      	ldr	r3, [r7, #12]
 8018826:	2b10      	cmp	r3, #16
 8018828:	d108      	bne.n	801883c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801882a:	687b      	ldr	r3, [r7, #4]
 801882c:	681b      	ldr	r3, [r3, #0]
 801882e:	681a      	ldr	r2, [r3, #0]
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	681b      	ldr	r3, [r3, #0]
 8018834:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018838:	601a      	str	r2, [r3, #0]
 801883a:	e019      	b.n	8018870 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 801883c:	68fb      	ldr	r3, [r7, #12]
 801883e:	2b04      	cmp	r3, #4
 8018840:	d002      	beq.n	8018848 <I2C_MasterReceive_BTF+0xe2>
 8018842:	68fb      	ldr	r3, [r7, #12]
 8018844:	2b02      	cmp	r3, #2
 8018846:	d108      	bne.n	801885a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	681b      	ldr	r3, [r3, #0]
 801884c:	681a      	ldr	r2, [r3, #0]
 801884e:	687b      	ldr	r3, [r7, #4]
 8018850:	681b      	ldr	r3, [r3, #0]
 8018852:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018856:	601a      	str	r2, [r3, #0]
 8018858:	e00a      	b.n	8018870 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 801885a:	68fb      	ldr	r3, [r7, #12]
 801885c:	2b10      	cmp	r3, #16
 801885e:	d007      	beq.n	8018870 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018860:	687b      	ldr	r3, [r7, #4]
 8018862:	681b      	ldr	r3, [r3, #0]
 8018864:	681a      	ldr	r2, [r3, #0]
 8018866:	687b      	ldr	r3, [r7, #4]
 8018868:	681b      	ldr	r3, [r3, #0]
 801886a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801886e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018870:	687b      	ldr	r3, [r7, #4]
 8018872:	681b      	ldr	r3, [r3, #0]
 8018874:	691a      	ldr	r2, [r3, #16]
 8018876:	687b      	ldr	r3, [r7, #4]
 8018878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801887a:	b2d2      	uxtb	r2, r2
 801887c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801887e:	687b      	ldr	r3, [r7, #4]
 8018880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018882:	1c5a      	adds	r2, r3, #1
 8018884:	687b      	ldr	r3, [r7, #4]
 8018886:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8018888:	687b      	ldr	r3, [r7, #4]
 801888a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801888c:	b29b      	uxth	r3, r3
 801888e:	3b01      	subs	r3, #1
 8018890:	b29a      	uxth	r2, r3
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	681b      	ldr	r3, [r3, #0]
 801889a:	691a      	ldr	r2, [r3, #16]
 801889c:	687b      	ldr	r3, [r7, #4]
 801889e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188a0:	b2d2      	uxtb	r2, r2
 80188a2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80188a4:	687b      	ldr	r3, [r7, #4]
 80188a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188a8:	1c5a      	adds	r2, r3, #1
 80188aa:	687b      	ldr	r3, [r7, #4]
 80188ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80188b2:	b29b      	uxth	r3, r3
 80188b4:	3b01      	subs	r3, #1
 80188b6:	b29a      	uxth	r2, r3
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	681b      	ldr	r3, [r3, #0]
 80188c0:	685a      	ldr	r2, [r3, #4]
 80188c2:	687b      	ldr	r3, [r7, #4]
 80188c4:	681b      	ldr	r3, [r3, #0]
 80188c6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80188ca:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80188cc:	687b      	ldr	r3, [r7, #4]
 80188ce:	2220      	movs	r2, #32
 80188d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80188d4:	687b      	ldr	r3, [r7, #4]
 80188d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80188da:	b2db      	uxtb	r3, r3
 80188dc:	2b40      	cmp	r3, #64	; 0x40
 80188de:	d10a      	bne.n	80188f6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80188e0:	687b      	ldr	r3, [r7, #4]
 80188e2:	2200      	movs	r2, #0
 80188e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80188e8:	687b      	ldr	r3, [r7, #4]
 80188ea:	2200      	movs	r2, #0
 80188ec:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80188ee:	6878      	ldr	r0, [r7, #4]
 80188f0:	f7ff fcba 	bl	8018268 <HAL_I2C_MemRxCpltCallback>
}
 80188f4:	e01d      	b.n	8018932 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80188f6:	687b      	ldr	r3, [r7, #4]
 80188f8:	2200      	movs	r2, #0
 80188fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80188fe:	687b      	ldr	r3, [r7, #4]
 8018900:	2212      	movs	r2, #18
 8018902:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8018904:	6878      	ldr	r0, [r7, #4]
 8018906:	f7ff fc6f 	bl	80181e8 <HAL_I2C_MasterRxCpltCallback>
}
 801890a:	e012      	b.n	8018932 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	681b      	ldr	r3, [r3, #0]
 8018910:	691a      	ldr	r2, [r3, #16]
 8018912:	687b      	ldr	r3, [r7, #4]
 8018914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018916:	b2d2      	uxtb	r2, r2
 8018918:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801891a:	687b      	ldr	r3, [r7, #4]
 801891c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801891e:	1c5a      	adds	r2, r3, #1
 8018920:	687b      	ldr	r3, [r7, #4]
 8018922:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8018924:	687b      	ldr	r3, [r7, #4]
 8018926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018928:	b29b      	uxth	r3, r3
 801892a:	3b01      	subs	r3, #1
 801892c:	b29a      	uxth	r2, r3
 801892e:	687b      	ldr	r3, [r7, #4]
 8018930:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8018932:	bf00      	nop
 8018934:	3710      	adds	r7, #16
 8018936:	46bd      	mov	sp, r7
 8018938:	bd80      	pop	{r7, pc}

0801893a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 801893a:	b480      	push	{r7}
 801893c:	b083      	sub	sp, #12
 801893e:	af00      	add	r7, sp, #0
 8018940:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8018942:	687b      	ldr	r3, [r7, #4]
 8018944:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018948:	b2db      	uxtb	r3, r3
 801894a:	2b40      	cmp	r3, #64	; 0x40
 801894c:	d117      	bne.n	801897e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 801894e:	687b      	ldr	r3, [r7, #4]
 8018950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018952:	2b00      	cmp	r3, #0
 8018954:	d109      	bne.n	801896a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8018956:	687b      	ldr	r3, [r7, #4]
 8018958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801895a:	b2db      	uxtb	r3, r3
 801895c:	461a      	mov	r2, r3
 801895e:	687b      	ldr	r3, [r7, #4]
 8018960:	681b      	ldr	r3, [r3, #0]
 8018962:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8018966:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8018968:	e067      	b.n	8018a3a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 801896a:	687b      	ldr	r3, [r7, #4]
 801896c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801896e:	b2db      	uxtb	r3, r3
 8018970:	f043 0301 	orr.w	r3, r3, #1
 8018974:	b2da      	uxtb	r2, r3
 8018976:	687b      	ldr	r3, [r7, #4]
 8018978:	681b      	ldr	r3, [r3, #0]
 801897a:	611a      	str	r2, [r3, #16]
}
 801897c:	e05d      	b.n	8018a3a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801897e:	687b      	ldr	r3, [r7, #4]
 8018980:	691b      	ldr	r3, [r3, #16]
 8018982:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8018986:	d133      	bne.n	80189f0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801898e:	b2db      	uxtb	r3, r3
 8018990:	2b21      	cmp	r3, #33	; 0x21
 8018992:	d109      	bne.n	80189a8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8018994:	687b      	ldr	r3, [r7, #4]
 8018996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018998:	b2db      	uxtb	r3, r3
 801899a:	461a      	mov	r2, r3
 801899c:	687b      	ldr	r3, [r7, #4]
 801899e:	681b      	ldr	r3, [r3, #0]
 80189a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80189a4:	611a      	str	r2, [r3, #16]
 80189a6:	e008      	b.n	80189ba <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80189a8:	687b      	ldr	r3, [r7, #4]
 80189aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80189ac:	b2db      	uxtb	r3, r3
 80189ae:	f043 0301 	orr.w	r3, r3, #1
 80189b2:	b2da      	uxtb	r2, r3
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	681b      	ldr	r3, [r3, #0]
 80189b8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80189ba:	687b      	ldr	r3, [r7, #4]
 80189bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80189be:	2b00      	cmp	r3, #0
 80189c0:	d004      	beq.n	80189cc <I2C_Master_SB+0x92>
 80189c2:	687b      	ldr	r3, [r7, #4]
 80189c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80189c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80189c8:	2b00      	cmp	r3, #0
 80189ca:	d108      	bne.n	80189de <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80189cc:	687b      	ldr	r3, [r7, #4]
 80189ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80189d0:	2b00      	cmp	r3, #0
 80189d2:	d032      	beq.n	8018a3a <I2C_Master_SB+0x100>
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80189d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80189da:	2b00      	cmp	r3, #0
 80189dc:	d02d      	beq.n	8018a3a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80189de:	687b      	ldr	r3, [r7, #4]
 80189e0:	681b      	ldr	r3, [r3, #0]
 80189e2:	685a      	ldr	r2, [r3, #4]
 80189e4:	687b      	ldr	r3, [r7, #4]
 80189e6:	681b      	ldr	r3, [r3, #0]
 80189e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80189ec:	605a      	str	r2, [r3, #4]
}
 80189ee:	e024      	b.n	8018a3a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80189f4:	2b00      	cmp	r3, #0
 80189f6:	d10e      	bne.n	8018a16 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80189fc:	b29b      	uxth	r3, r3
 80189fe:	11db      	asrs	r3, r3, #7
 8018a00:	b2db      	uxtb	r3, r3
 8018a02:	f003 0306 	and.w	r3, r3, #6
 8018a06:	b2db      	uxtb	r3, r3
 8018a08:	f063 030f 	orn	r3, r3, #15
 8018a0c:	b2da      	uxtb	r2, r3
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	681b      	ldr	r3, [r3, #0]
 8018a12:	611a      	str	r2, [r3, #16]
}
 8018a14:	e011      	b.n	8018a3a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8018a16:	687b      	ldr	r3, [r7, #4]
 8018a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018a1a:	2b01      	cmp	r3, #1
 8018a1c:	d10d      	bne.n	8018a3a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8018a1e:	687b      	ldr	r3, [r7, #4]
 8018a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018a22:	b29b      	uxth	r3, r3
 8018a24:	11db      	asrs	r3, r3, #7
 8018a26:	b2db      	uxtb	r3, r3
 8018a28:	f003 0306 	and.w	r3, r3, #6
 8018a2c:	b2db      	uxtb	r3, r3
 8018a2e:	f063 030e 	orn	r3, r3, #14
 8018a32:	b2da      	uxtb	r2, r3
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	681b      	ldr	r3, [r3, #0]
 8018a38:	611a      	str	r2, [r3, #16]
}
 8018a3a:	bf00      	nop
 8018a3c:	370c      	adds	r7, #12
 8018a3e:	46bd      	mov	sp, r7
 8018a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a44:	4770      	bx	lr

08018a46 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8018a46:	b480      	push	{r7}
 8018a48:	b083      	sub	sp, #12
 8018a4a:	af00      	add	r7, sp, #0
 8018a4c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8018a4e:	687b      	ldr	r3, [r7, #4]
 8018a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018a52:	b2da      	uxtb	r2, r3
 8018a54:	687b      	ldr	r3, [r7, #4]
 8018a56:	681b      	ldr	r3, [r3, #0]
 8018a58:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8018a5a:	687b      	ldr	r3, [r7, #4]
 8018a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018a5e:	2b00      	cmp	r3, #0
 8018a60:	d004      	beq.n	8018a6c <I2C_Master_ADD10+0x26>
 8018a62:	687b      	ldr	r3, [r7, #4]
 8018a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018a68:	2b00      	cmp	r3, #0
 8018a6a:	d108      	bne.n	8018a7e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8018a6c:	687b      	ldr	r3, [r7, #4]
 8018a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018a70:	2b00      	cmp	r3, #0
 8018a72:	d00c      	beq.n	8018a8e <I2C_Master_ADD10+0x48>
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018a7a:	2b00      	cmp	r3, #0
 8018a7c:	d007      	beq.n	8018a8e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8018a7e:	687b      	ldr	r3, [r7, #4]
 8018a80:	681b      	ldr	r3, [r3, #0]
 8018a82:	685a      	ldr	r2, [r3, #4]
 8018a84:	687b      	ldr	r3, [r7, #4]
 8018a86:	681b      	ldr	r3, [r3, #0]
 8018a88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8018a8c:	605a      	str	r2, [r3, #4]
  }
}
 8018a8e:	bf00      	nop
 8018a90:	370c      	adds	r7, #12
 8018a92:	46bd      	mov	sp, r7
 8018a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a98:	4770      	bx	lr

08018a9a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8018a9a:	b480      	push	{r7}
 8018a9c:	b091      	sub	sp, #68	; 0x44
 8018a9e:	af00      	add	r7, sp, #0
 8018aa0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8018aa2:	687b      	ldr	r3, [r7, #4]
 8018aa4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018aa8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8018aac:	687b      	ldr	r3, [r7, #4]
 8018aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ab0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8018ab2:	687b      	ldr	r3, [r7, #4]
 8018ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018ab6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8018ab8:	687b      	ldr	r3, [r7, #4]
 8018aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018abe:	b2db      	uxtb	r3, r3
 8018ac0:	2b22      	cmp	r3, #34	; 0x22
 8018ac2:	f040 8169 	bne.w	8018d98 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8018ac6:	687b      	ldr	r3, [r7, #4]
 8018ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018aca:	2b00      	cmp	r3, #0
 8018acc:	d10f      	bne.n	8018aee <I2C_Master_ADDR+0x54>
 8018ace:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8018ad2:	2b40      	cmp	r3, #64	; 0x40
 8018ad4:	d10b      	bne.n	8018aee <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018ad6:	2300      	movs	r3, #0
 8018ad8:	633b      	str	r3, [r7, #48]	; 0x30
 8018ada:	687b      	ldr	r3, [r7, #4]
 8018adc:	681b      	ldr	r3, [r3, #0]
 8018ade:	695b      	ldr	r3, [r3, #20]
 8018ae0:	633b      	str	r3, [r7, #48]	; 0x30
 8018ae2:	687b      	ldr	r3, [r7, #4]
 8018ae4:	681b      	ldr	r3, [r3, #0]
 8018ae6:	699b      	ldr	r3, [r3, #24]
 8018ae8:	633b      	str	r3, [r7, #48]	; 0x30
 8018aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018aec:	e160      	b.n	8018db0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8018aee:	687b      	ldr	r3, [r7, #4]
 8018af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018af2:	2b00      	cmp	r3, #0
 8018af4:	d11d      	bne.n	8018b32 <I2C_Master_ADDR+0x98>
 8018af6:	687b      	ldr	r3, [r7, #4]
 8018af8:	691b      	ldr	r3, [r3, #16]
 8018afa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8018afe:	d118      	bne.n	8018b32 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018b00:	2300      	movs	r3, #0
 8018b02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	681b      	ldr	r3, [r3, #0]
 8018b08:	695b      	ldr	r3, [r3, #20]
 8018b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018b0c:	687b      	ldr	r3, [r7, #4]
 8018b0e:	681b      	ldr	r3, [r3, #0]
 8018b10:	699b      	ldr	r3, [r3, #24]
 8018b12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8018b16:	687b      	ldr	r3, [r7, #4]
 8018b18:	681b      	ldr	r3, [r3, #0]
 8018b1a:	681a      	ldr	r2, [r3, #0]
 8018b1c:	687b      	ldr	r3, [r7, #4]
 8018b1e:	681b      	ldr	r3, [r3, #0]
 8018b20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8018b24:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018b2a:	1c5a      	adds	r2, r3, #1
 8018b2c:	687b      	ldr	r3, [r7, #4]
 8018b2e:	651a      	str	r2, [r3, #80]	; 0x50
 8018b30:	e13e      	b.n	8018db0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8018b32:	687b      	ldr	r3, [r7, #4]
 8018b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018b36:	b29b      	uxth	r3, r3
 8018b38:	2b00      	cmp	r3, #0
 8018b3a:	d113      	bne.n	8018b64 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018b3c:	2300      	movs	r3, #0
 8018b3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	681b      	ldr	r3, [r3, #0]
 8018b44:	695b      	ldr	r3, [r3, #20]
 8018b46:	62bb      	str	r3, [r7, #40]	; 0x28
 8018b48:	687b      	ldr	r3, [r7, #4]
 8018b4a:	681b      	ldr	r3, [r3, #0]
 8018b4c:	699b      	ldr	r3, [r3, #24]
 8018b4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8018b50:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018b52:	687b      	ldr	r3, [r7, #4]
 8018b54:	681b      	ldr	r3, [r3, #0]
 8018b56:	681a      	ldr	r2, [r3, #0]
 8018b58:	687b      	ldr	r3, [r7, #4]
 8018b5a:	681b      	ldr	r3, [r3, #0]
 8018b5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018b60:	601a      	str	r2, [r3, #0]
 8018b62:	e115      	b.n	8018d90 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8018b64:	687b      	ldr	r3, [r7, #4]
 8018b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018b68:	b29b      	uxth	r3, r3
 8018b6a:	2b01      	cmp	r3, #1
 8018b6c:	f040 808a 	bne.w	8018c84 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8018b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b72:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8018b76:	d137      	bne.n	8018be8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018b78:	687b      	ldr	r3, [r7, #4]
 8018b7a:	681b      	ldr	r3, [r3, #0]
 8018b7c:	681a      	ldr	r2, [r3, #0]
 8018b7e:	687b      	ldr	r3, [r7, #4]
 8018b80:	681b      	ldr	r3, [r3, #0]
 8018b82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018b86:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8018b88:	687b      	ldr	r3, [r7, #4]
 8018b8a:	681b      	ldr	r3, [r3, #0]
 8018b8c:	685b      	ldr	r3, [r3, #4]
 8018b8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018b92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018b96:	d113      	bne.n	8018bc0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018b98:	687b      	ldr	r3, [r7, #4]
 8018b9a:	681b      	ldr	r3, [r3, #0]
 8018b9c:	681a      	ldr	r2, [r3, #0]
 8018b9e:	687b      	ldr	r3, [r7, #4]
 8018ba0:	681b      	ldr	r3, [r3, #0]
 8018ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018ba6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018ba8:	2300      	movs	r3, #0
 8018baa:	627b      	str	r3, [r7, #36]	; 0x24
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	681b      	ldr	r3, [r3, #0]
 8018bb0:	695b      	ldr	r3, [r3, #20]
 8018bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8018bb4:	687b      	ldr	r3, [r7, #4]
 8018bb6:	681b      	ldr	r3, [r3, #0]
 8018bb8:	699b      	ldr	r3, [r3, #24]
 8018bba:	627b      	str	r3, [r7, #36]	; 0x24
 8018bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bbe:	e0e7      	b.n	8018d90 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018bc0:	2300      	movs	r3, #0
 8018bc2:	623b      	str	r3, [r7, #32]
 8018bc4:	687b      	ldr	r3, [r7, #4]
 8018bc6:	681b      	ldr	r3, [r3, #0]
 8018bc8:	695b      	ldr	r3, [r3, #20]
 8018bca:	623b      	str	r3, [r7, #32]
 8018bcc:	687b      	ldr	r3, [r7, #4]
 8018bce:	681b      	ldr	r3, [r3, #0]
 8018bd0:	699b      	ldr	r3, [r3, #24]
 8018bd2:	623b      	str	r3, [r7, #32]
 8018bd4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018bd6:	687b      	ldr	r3, [r7, #4]
 8018bd8:	681b      	ldr	r3, [r3, #0]
 8018bda:	681a      	ldr	r2, [r3, #0]
 8018bdc:	687b      	ldr	r3, [r7, #4]
 8018bde:	681b      	ldr	r3, [r3, #0]
 8018be0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018be4:	601a      	str	r2, [r3, #0]
 8018be6:	e0d3      	b.n	8018d90 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8018be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018bea:	2b08      	cmp	r3, #8
 8018bec:	d02e      	beq.n	8018c4c <I2C_Master_ADDR+0x1b2>
 8018bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018bf0:	2b20      	cmp	r3, #32
 8018bf2:	d02b      	beq.n	8018c4c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8018bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018bf6:	2b12      	cmp	r3, #18
 8018bf8:	d102      	bne.n	8018c00 <I2C_Master_ADDR+0x166>
 8018bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018bfc:	2b01      	cmp	r3, #1
 8018bfe:	d125      	bne.n	8018c4c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8018c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c02:	2b04      	cmp	r3, #4
 8018c04:	d00e      	beq.n	8018c24 <I2C_Master_ADDR+0x18a>
 8018c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c08:	2b02      	cmp	r3, #2
 8018c0a:	d00b      	beq.n	8018c24 <I2C_Master_ADDR+0x18a>
 8018c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c0e:	2b10      	cmp	r3, #16
 8018c10:	d008      	beq.n	8018c24 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018c12:	687b      	ldr	r3, [r7, #4]
 8018c14:	681b      	ldr	r3, [r3, #0]
 8018c16:	681a      	ldr	r2, [r3, #0]
 8018c18:	687b      	ldr	r3, [r7, #4]
 8018c1a:	681b      	ldr	r3, [r3, #0]
 8018c1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018c20:	601a      	str	r2, [r3, #0]
 8018c22:	e007      	b.n	8018c34 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018c24:	687b      	ldr	r3, [r7, #4]
 8018c26:	681b      	ldr	r3, [r3, #0]
 8018c28:	681a      	ldr	r2, [r3, #0]
 8018c2a:	687b      	ldr	r3, [r7, #4]
 8018c2c:	681b      	ldr	r3, [r3, #0]
 8018c2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018c32:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018c34:	2300      	movs	r3, #0
 8018c36:	61fb      	str	r3, [r7, #28]
 8018c38:	687b      	ldr	r3, [r7, #4]
 8018c3a:	681b      	ldr	r3, [r3, #0]
 8018c3c:	695b      	ldr	r3, [r3, #20]
 8018c3e:	61fb      	str	r3, [r7, #28]
 8018c40:	687b      	ldr	r3, [r7, #4]
 8018c42:	681b      	ldr	r3, [r3, #0]
 8018c44:	699b      	ldr	r3, [r3, #24]
 8018c46:	61fb      	str	r3, [r7, #28]
 8018c48:	69fb      	ldr	r3, [r7, #28]
 8018c4a:	e0a1      	b.n	8018d90 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018c4c:	687b      	ldr	r3, [r7, #4]
 8018c4e:	681b      	ldr	r3, [r3, #0]
 8018c50:	681a      	ldr	r2, [r3, #0]
 8018c52:	687b      	ldr	r3, [r7, #4]
 8018c54:	681b      	ldr	r3, [r3, #0]
 8018c56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018c5a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018c5c:	2300      	movs	r3, #0
 8018c5e:	61bb      	str	r3, [r7, #24]
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	681b      	ldr	r3, [r3, #0]
 8018c64:	695b      	ldr	r3, [r3, #20]
 8018c66:	61bb      	str	r3, [r7, #24]
 8018c68:	687b      	ldr	r3, [r7, #4]
 8018c6a:	681b      	ldr	r3, [r3, #0]
 8018c6c:	699b      	ldr	r3, [r3, #24]
 8018c6e:	61bb      	str	r3, [r7, #24]
 8018c70:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018c72:	687b      	ldr	r3, [r7, #4]
 8018c74:	681b      	ldr	r3, [r3, #0]
 8018c76:	681a      	ldr	r2, [r3, #0]
 8018c78:	687b      	ldr	r3, [r7, #4]
 8018c7a:	681b      	ldr	r3, [r3, #0]
 8018c7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018c80:	601a      	str	r2, [r3, #0]
 8018c82:	e085      	b.n	8018d90 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8018c84:	687b      	ldr	r3, [r7, #4]
 8018c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018c88:	b29b      	uxth	r3, r3
 8018c8a:	2b02      	cmp	r3, #2
 8018c8c:	d14d      	bne.n	8018d2a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8018c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c90:	2b04      	cmp	r3, #4
 8018c92:	d016      	beq.n	8018cc2 <I2C_Master_ADDR+0x228>
 8018c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c96:	2b02      	cmp	r3, #2
 8018c98:	d013      	beq.n	8018cc2 <I2C_Master_ADDR+0x228>
 8018c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c9c:	2b10      	cmp	r3, #16
 8018c9e:	d010      	beq.n	8018cc2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	681b      	ldr	r3, [r3, #0]
 8018ca4:	681a      	ldr	r2, [r3, #0]
 8018ca6:	687b      	ldr	r3, [r7, #4]
 8018ca8:	681b      	ldr	r3, [r3, #0]
 8018caa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018cae:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	681b      	ldr	r3, [r3, #0]
 8018cb4:	681a      	ldr	r2, [r3, #0]
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	681b      	ldr	r3, [r3, #0]
 8018cba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8018cbe:	601a      	str	r2, [r3, #0]
 8018cc0:	e007      	b.n	8018cd2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018cc2:	687b      	ldr	r3, [r7, #4]
 8018cc4:	681b      	ldr	r3, [r3, #0]
 8018cc6:	681a      	ldr	r2, [r3, #0]
 8018cc8:	687b      	ldr	r3, [r7, #4]
 8018cca:	681b      	ldr	r3, [r3, #0]
 8018ccc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018cd0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8018cd2:	687b      	ldr	r3, [r7, #4]
 8018cd4:	681b      	ldr	r3, [r3, #0]
 8018cd6:	685b      	ldr	r3, [r3, #4]
 8018cd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018cdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018ce0:	d117      	bne.n	8018d12 <I2C_Master_ADDR+0x278>
 8018ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ce4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8018ce8:	d00b      	beq.n	8018d02 <I2C_Master_ADDR+0x268>
 8018cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018cec:	2b01      	cmp	r3, #1
 8018cee:	d008      	beq.n	8018d02 <I2C_Master_ADDR+0x268>
 8018cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018cf2:	2b08      	cmp	r3, #8
 8018cf4:	d005      	beq.n	8018d02 <I2C_Master_ADDR+0x268>
 8018cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018cf8:	2b10      	cmp	r3, #16
 8018cfa:	d002      	beq.n	8018d02 <I2C_Master_ADDR+0x268>
 8018cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018cfe:	2b20      	cmp	r3, #32
 8018d00:	d107      	bne.n	8018d12 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8018d02:	687b      	ldr	r3, [r7, #4]
 8018d04:	681b      	ldr	r3, [r3, #0]
 8018d06:	685a      	ldr	r2, [r3, #4]
 8018d08:	687b      	ldr	r3, [r7, #4]
 8018d0a:	681b      	ldr	r3, [r3, #0]
 8018d0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8018d10:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018d12:	2300      	movs	r3, #0
 8018d14:	617b      	str	r3, [r7, #20]
 8018d16:	687b      	ldr	r3, [r7, #4]
 8018d18:	681b      	ldr	r3, [r3, #0]
 8018d1a:	695b      	ldr	r3, [r3, #20]
 8018d1c:	617b      	str	r3, [r7, #20]
 8018d1e:	687b      	ldr	r3, [r7, #4]
 8018d20:	681b      	ldr	r3, [r3, #0]
 8018d22:	699b      	ldr	r3, [r3, #24]
 8018d24:	617b      	str	r3, [r7, #20]
 8018d26:	697b      	ldr	r3, [r7, #20]
 8018d28:	e032      	b.n	8018d90 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	681b      	ldr	r3, [r3, #0]
 8018d2e:	681a      	ldr	r2, [r3, #0]
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	681b      	ldr	r3, [r3, #0]
 8018d34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018d38:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8018d3a:	687b      	ldr	r3, [r7, #4]
 8018d3c:	681b      	ldr	r3, [r3, #0]
 8018d3e:	685b      	ldr	r3, [r3, #4]
 8018d40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018d44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018d48:	d117      	bne.n	8018d7a <I2C_Master_ADDR+0x2e0>
 8018d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8018d50:	d00b      	beq.n	8018d6a <I2C_Master_ADDR+0x2d0>
 8018d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d54:	2b01      	cmp	r3, #1
 8018d56:	d008      	beq.n	8018d6a <I2C_Master_ADDR+0x2d0>
 8018d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d5a:	2b08      	cmp	r3, #8
 8018d5c:	d005      	beq.n	8018d6a <I2C_Master_ADDR+0x2d0>
 8018d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d60:	2b10      	cmp	r3, #16
 8018d62:	d002      	beq.n	8018d6a <I2C_Master_ADDR+0x2d0>
 8018d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d66:	2b20      	cmp	r3, #32
 8018d68:	d107      	bne.n	8018d7a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	681b      	ldr	r3, [r3, #0]
 8018d6e:	685a      	ldr	r2, [r3, #4]
 8018d70:	687b      	ldr	r3, [r7, #4]
 8018d72:	681b      	ldr	r3, [r3, #0]
 8018d74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8018d78:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018d7a:	2300      	movs	r3, #0
 8018d7c:	613b      	str	r3, [r7, #16]
 8018d7e:	687b      	ldr	r3, [r7, #4]
 8018d80:	681b      	ldr	r3, [r3, #0]
 8018d82:	695b      	ldr	r3, [r3, #20]
 8018d84:	613b      	str	r3, [r7, #16]
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	681b      	ldr	r3, [r3, #0]
 8018d8a:	699b      	ldr	r3, [r3, #24]
 8018d8c:	613b      	str	r3, [r7, #16]
 8018d8e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	2200      	movs	r2, #0
 8018d94:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8018d96:	e00b      	b.n	8018db0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018d98:	2300      	movs	r3, #0
 8018d9a:	60fb      	str	r3, [r7, #12]
 8018d9c:	687b      	ldr	r3, [r7, #4]
 8018d9e:	681b      	ldr	r3, [r3, #0]
 8018da0:	695b      	ldr	r3, [r3, #20]
 8018da2:	60fb      	str	r3, [r7, #12]
 8018da4:	687b      	ldr	r3, [r7, #4]
 8018da6:	681b      	ldr	r3, [r3, #0]
 8018da8:	699b      	ldr	r3, [r3, #24]
 8018daa:	60fb      	str	r3, [r7, #12]
 8018dac:	68fb      	ldr	r3, [r7, #12]
}
 8018dae:	e7ff      	b.n	8018db0 <I2C_Master_ADDR+0x316>
 8018db0:	bf00      	nop
 8018db2:	3744      	adds	r7, #68	; 0x44
 8018db4:	46bd      	mov	sp, r7
 8018db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dba:	4770      	bx	lr

08018dbc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8018dbc:	b580      	push	{r7, lr}
 8018dbe:	b084      	sub	sp, #16
 8018dc0:	af00      	add	r7, sp, #0
 8018dc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018dca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018dd0:	b29b      	uxth	r3, r3
 8018dd2:	2b00      	cmp	r3, #0
 8018dd4:	d02b      	beq.n	8018e2e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8018dd6:	687b      	ldr	r3, [r7, #4]
 8018dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018dda:	781a      	ldrb	r2, [r3, #0]
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	681b      	ldr	r3, [r3, #0]
 8018de0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8018de2:	687b      	ldr	r3, [r7, #4]
 8018de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018de6:	1c5a      	adds	r2, r3, #1
 8018de8:	687b      	ldr	r3, [r7, #4]
 8018dea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8018dec:	687b      	ldr	r3, [r7, #4]
 8018dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018df0:	b29b      	uxth	r3, r3
 8018df2:	3b01      	subs	r3, #1
 8018df4:	b29a      	uxth	r2, r3
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8018dfa:	687b      	ldr	r3, [r7, #4]
 8018dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018dfe:	b29b      	uxth	r3, r3
 8018e00:	2b00      	cmp	r3, #0
 8018e02:	d114      	bne.n	8018e2e <I2C_SlaveTransmit_TXE+0x72>
 8018e04:	7bfb      	ldrb	r3, [r7, #15]
 8018e06:	2b29      	cmp	r3, #41	; 0x29
 8018e08:	d111      	bne.n	8018e2e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8018e0a:	687b      	ldr	r3, [r7, #4]
 8018e0c:	681b      	ldr	r3, [r3, #0]
 8018e0e:	685a      	ldr	r2, [r3, #4]
 8018e10:	687b      	ldr	r3, [r7, #4]
 8018e12:	681b      	ldr	r3, [r3, #0]
 8018e14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018e18:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8018e1a:	687b      	ldr	r3, [r7, #4]
 8018e1c:	2221      	movs	r2, #33	; 0x21
 8018e1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	2228      	movs	r2, #40	; 0x28
 8018e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8018e28:	6878      	ldr	r0, [r7, #4]
 8018e2a:	f7ff f9e7 	bl	80181fc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8018e2e:	bf00      	nop
 8018e30:	3710      	adds	r7, #16
 8018e32:	46bd      	mov	sp, r7
 8018e34:	bd80      	pop	{r7, pc}

08018e36 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8018e36:	b480      	push	{r7}
 8018e38:	b083      	sub	sp, #12
 8018e3a:	af00      	add	r7, sp, #0
 8018e3c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8018e3e:	687b      	ldr	r3, [r7, #4]
 8018e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018e42:	b29b      	uxth	r3, r3
 8018e44:	2b00      	cmp	r3, #0
 8018e46:	d011      	beq.n	8018e6c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8018e48:	687b      	ldr	r3, [r7, #4]
 8018e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e4c:	781a      	ldrb	r2, [r3, #0]
 8018e4e:	687b      	ldr	r3, [r7, #4]
 8018e50:	681b      	ldr	r3, [r3, #0]
 8018e52:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8018e54:	687b      	ldr	r3, [r7, #4]
 8018e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e58:	1c5a      	adds	r2, r3, #1
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8018e5e:	687b      	ldr	r3, [r7, #4]
 8018e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018e62:	b29b      	uxth	r3, r3
 8018e64:	3b01      	subs	r3, #1
 8018e66:	b29a      	uxth	r2, r3
 8018e68:	687b      	ldr	r3, [r7, #4]
 8018e6a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8018e6c:	bf00      	nop
 8018e6e:	370c      	adds	r7, #12
 8018e70:	46bd      	mov	sp, r7
 8018e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e76:	4770      	bx	lr

08018e78 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8018e78:	b580      	push	{r7, lr}
 8018e7a:	b084      	sub	sp, #16
 8018e7c:	af00      	add	r7, sp, #0
 8018e7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018e86:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018e8c:	b29b      	uxth	r3, r3
 8018e8e:	2b00      	cmp	r3, #0
 8018e90:	d02c      	beq.n	8018eec <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018e92:	687b      	ldr	r3, [r7, #4]
 8018e94:	681b      	ldr	r3, [r3, #0]
 8018e96:	691a      	ldr	r2, [r3, #16]
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e9c:	b2d2      	uxtb	r2, r2
 8018e9e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ea4:	1c5a      	adds	r2, r3, #1
 8018ea6:	687b      	ldr	r3, [r7, #4]
 8018ea8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8018eaa:	687b      	ldr	r3, [r7, #4]
 8018eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018eae:	b29b      	uxth	r3, r3
 8018eb0:	3b01      	subs	r3, #1
 8018eb2:	b29a      	uxth	r2, r3
 8018eb4:	687b      	ldr	r3, [r7, #4]
 8018eb6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018ebc:	b29b      	uxth	r3, r3
 8018ebe:	2b00      	cmp	r3, #0
 8018ec0:	d114      	bne.n	8018eec <I2C_SlaveReceive_RXNE+0x74>
 8018ec2:	7bfb      	ldrb	r3, [r7, #15]
 8018ec4:	2b2a      	cmp	r3, #42	; 0x2a
 8018ec6:	d111      	bne.n	8018eec <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	681b      	ldr	r3, [r3, #0]
 8018ecc:	685a      	ldr	r2, [r3, #4]
 8018ece:	687b      	ldr	r3, [r7, #4]
 8018ed0:	681b      	ldr	r3, [r3, #0]
 8018ed2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018ed6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	2222      	movs	r2, #34	; 0x22
 8018edc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8018ede:	687b      	ldr	r3, [r7, #4]
 8018ee0:	2228      	movs	r2, #40	; 0x28
 8018ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8018ee6:	6878      	ldr	r0, [r7, #4]
 8018ee8:	f7ff f992 	bl	8018210 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8018eec:	bf00      	nop
 8018eee:	3710      	adds	r7, #16
 8018ef0:	46bd      	mov	sp, r7
 8018ef2:	bd80      	pop	{r7, pc}

08018ef4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8018ef4:	b480      	push	{r7}
 8018ef6:	b083      	sub	sp, #12
 8018ef8:	af00      	add	r7, sp, #0
 8018efa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8018efc:	687b      	ldr	r3, [r7, #4]
 8018efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018f00:	b29b      	uxth	r3, r3
 8018f02:	2b00      	cmp	r3, #0
 8018f04:	d012      	beq.n	8018f2c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018f06:	687b      	ldr	r3, [r7, #4]
 8018f08:	681b      	ldr	r3, [r3, #0]
 8018f0a:	691a      	ldr	r2, [r3, #16]
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f10:	b2d2      	uxtb	r2, r2
 8018f12:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f18:	1c5a      	adds	r2, r3, #1
 8018f1a:	687b      	ldr	r3, [r7, #4]
 8018f1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018f22:	b29b      	uxth	r3, r3
 8018f24:	3b01      	subs	r3, #1
 8018f26:	b29a      	uxth	r2, r3
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8018f2c:	bf00      	nop
 8018f2e:	370c      	adds	r7, #12
 8018f30:	46bd      	mov	sp, r7
 8018f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f36:	4770      	bx	lr

08018f38 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8018f38:	b580      	push	{r7, lr}
 8018f3a:	b084      	sub	sp, #16
 8018f3c:	af00      	add	r7, sp, #0
 8018f3e:	6078      	str	r0, [r7, #4]
 8018f40:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8018f42:	2300      	movs	r3, #0
 8018f44:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8018f46:	687b      	ldr	r3, [r7, #4]
 8018f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018f4c:	b2db      	uxtb	r3, r3
 8018f4e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8018f52:	2b28      	cmp	r3, #40	; 0x28
 8018f54:	d127      	bne.n	8018fa6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8018f56:	687b      	ldr	r3, [r7, #4]
 8018f58:	681b      	ldr	r3, [r3, #0]
 8018f5a:	685a      	ldr	r2, [r3, #4]
 8018f5c:	687b      	ldr	r3, [r7, #4]
 8018f5e:	681b      	ldr	r3, [r3, #0]
 8018f60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018f64:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8018f66:	683b      	ldr	r3, [r7, #0]
 8018f68:	089b      	lsrs	r3, r3, #2
 8018f6a:	f003 0301 	and.w	r3, r3, #1
 8018f6e:	2b00      	cmp	r3, #0
 8018f70:	d101      	bne.n	8018f76 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8018f72:	2301      	movs	r3, #1
 8018f74:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8018f76:	683b      	ldr	r3, [r7, #0]
 8018f78:	09db      	lsrs	r3, r3, #7
 8018f7a:	f003 0301 	and.w	r3, r3, #1
 8018f7e:	2b00      	cmp	r3, #0
 8018f80:	d103      	bne.n	8018f8a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8018f82:	687b      	ldr	r3, [r7, #4]
 8018f84:	68db      	ldr	r3, [r3, #12]
 8018f86:	81bb      	strh	r3, [r7, #12]
 8018f88:	e002      	b.n	8018f90 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8018f8a:	687b      	ldr	r3, [r7, #4]
 8018f8c:	699b      	ldr	r3, [r3, #24]
 8018f8e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	2200      	movs	r2, #0
 8018f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8018f98:	89ba      	ldrh	r2, [r7, #12]
 8018f9a:	7bfb      	ldrb	r3, [r7, #15]
 8018f9c:	4619      	mov	r1, r3
 8018f9e:	6878      	ldr	r0, [r7, #4]
 8018fa0:	f7ff f940 	bl	8018224 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8018fa4:	e00e      	b.n	8018fc4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018fa6:	2300      	movs	r3, #0
 8018fa8:	60bb      	str	r3, [r7, #8]
 8018faa:	687b      	ldr	r3, [r7, #4]
 8018fac:	681b      	ldr	r3, [r3, #0]
 8018fae:	695b      	ldr	r3, [r3, #20]
 8018fb0:	60bb      	str	r3, [r7, #8]
 8018fb2:	687b      	ldr	r3, [r7, #4]
 8018fb4:	681b      	ldr	r3, [r3, #0]
 8018fb6:	699b      	ldr	r3, [r3, #24]
 8018fb8:	60bb      	str	r3, [r7, #8]
 8018fba:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	2200      	movs	r2, #0
 8018fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8018fc4:	bf00      	nop
 8018fc6:	3710      	adds	r7, #16
 8018fc8:	46bd      	mov	sp, r7
 8018fca:	bd80      	pop	{r7, pc}

08018fcc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8018fcc:	b580      	push	{r7, lr}
 8018fce:	b084      	sub	sp, #16
 8018fd0:	af00      	add	r7, sp, #0
 8018fd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8018fd4:	687b      	ldr	r3, [r7, #4]
 8018fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018fda:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	681b      	ldr	r3, [r3, #0]
 8018fe0:	685a      	ldr	r2, [r3, #4]
 8018fe2:	687b      	ldr	r3, [r7, #4]
 8018fe4:	681b      	ldr	r3, [r3, #0]
 8018fe6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018fea:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8018fec:	2300      	movs	r3, #0
 8018fee:	60bb      	str	r3, [r7, #8]
 8018ff0:	687b      	ldr	r3, [r7, #4]
 8018ff2:	681b      	ldr	r3, [r3, #0]
 8018ff4:	695b      	ldr	r3, [r3, #20]
 8018ff6:	60bb      	str	r3, [r7, #8]
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	681b      	ldr	r3, [r3, #0]
 8018ffc:	681a      	ldr	r2, [r3, #0]
 8018ffe:	687b      	ldr	r3, [r7, #4]
 8019000:	681b      	ldr	r3, [r3, #0]
 8019002:	f042 0201 	orr.w	r2, r2, #1
 8019006:	601a      	str	r2, [r3, #0]
 8019008:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801900a:	687b      	ldr	r3, [r7, #4]
 801900c:	681b      	ldr	r3, [r3, #0]
 801900e:	681a      	ldr	r2, [r3, #0]
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	681b      	ldr	r3, [r3, #0]
 8019014:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019018:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 801901a:	687b      	ldr	r3, [r7, #4]
 801901c:	681b      	ldr	r3, [r3, #0]
 801901e:	685b      	ldr	r3, [r3, #4]
 8019020:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019024:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8019028:	d172      	bne.n	8019110 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801902a:	7bfb      	ldrb	r3, [r7, #15]
 801902c:	2b22      	cmp	r3, #34	; 0x22
 801902e:	d002      	beq.n	8019036 <I2C_Slave_STOPF+0x6a>
 8019030:	7bfb      	ldrb	r3, [r7, #15]
 8019032:	2b2a      	cmp	r3, #42	; 0x2a
 8019034:	d135      	bne.n	80190a2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8019036:	687b      	ldr	r3, [r7, #4]
 8019038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801903a:	681b      	ldr	r3, [r3, #0]
 801903c:	685b      	ldr	r3, [r3, #4]
 801903e:	b29a      	uxth	r2, r3
 8019040:	687b      	ldr	r3, [r7, #4]
 8019042:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019048:	b29b      	uxth	r3, r3
 801904a:	2b00      	cmp	r3, #0
 801904c:	d005      	beq.n	801905a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801904e:	687b      	ldr	r3, [r7, #4]
 8019050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019052:	f043 0204 	orr.w	r2, r3, #4
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801905a:	687b      	ldr	r3, [r7, #4]
 801905c:	681b      	ldr	r3, [r3, #0]
 801905e:	685a      	ldr	r2, [r3, #4]
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	681b      	ldr	r3, [r3, #0]
 8019064:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8019068:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801906a:	687b      	ldr	r3, [r7, #4]
 801906c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801906e:	4618      	mov	r0, r3
 8019070:	f7fd fdb4 	bl	8016bdc <HAL_DMA_GetState>
 8019074:	4603      	mov	r3, r0
 8019076:	2b01      	cmp	r3, #1
 8019078:	d049      	beq.n	801910e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 801907a:	687b      	ldr	r3, [r7, #4]
 801907c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801907e:	4a69      	ldr	r2, [pc, #420]	; (8019224 <I2C_Slave_STOPF+0x258>)
 8019080:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8019082:	687b      	ldr	r3, [r7, #4]
 8019084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019086:	4618      	mov	r0, r3
 8019088:	f7fd fbfc 	bl	8016884 <HAL_DMA_Abort_IT>
 801908c:	4603      	mov	r3, r0
 801908e:	2b00      	cmp	r3, #0
 8019090:	d03d      	beq.n	801910e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8019092:	687b      	ldr	r3, [r7, #4]
 8019094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019098:	687a      	ldr	r2, [r7, #4]
 801909a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801909c:	4610      	mov	r0, r2
 801909e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80190a0:	e035      	b.n	801910e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80190a2:	687b      	ldr	r3, [r7, #4]
 80190a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80190a6:	681b      	ldr	r3, [r3, #0]
 80190a8:	685b      	ldr	r3, [r3, #4]
 80190aa:	b29a      	uxth	r2, r3
 80190ac:	687b      	ldr	r3, [r7, #4]
 80190ae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80190b0:	687b      	ldr	r3, [r7, #4]
 80190b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80190b4:	b29b      	uxth	r3, r3
 80190b6:	2b00      	cmp	r3, #0
 80190b8:	d005      	beq.n	80190c6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80190ba:	687b      	ldr	r3, [r7, #4]
 80190bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80190be:	f043 0204 	orr.w	r2, r3, #4
 80190c2:	687b      	ldr	r3, [r7, #4]
 80190c4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80190c6:	687b      	ldr	r3, [r7, #4]
 80190c8:	681b      	ldr	r3, [r3, #0]
 80190ca:	685a      	ldr	r2, [r3, #4]
 80190cc:	687b      	ldr	r3, [r7, #4]
 80190ce:	681b      	ldr	r3, [r3, #0]
 80190d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80190d4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80190d6:	687b      	ldr	r3, [r7, #4]
 80190d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80190da:	4618      	mov	r0, r3
 80190dc:	f7fd fd7e 	bl	8016bdc <HAL_DMA_GetState>
 80190e0:	4603      	mov	r3, r0
 80190e2:	2b01      	cmp	r3, #1
 80190e4:	d014      	beq.n	8019110 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80190e6:	687b      	ldr	r3, [r7, #4]
 80190e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80190ea:	4a4e      	ldr	r2, [pc, #312]	; (8019224 <I2C_Slave_STOPF+0x258>)
 80190ec:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80190ee:	687b      	ldr	r3, [r7, #4]
 80190f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80190f2:	4618      	mov	r0, r3
 80190f4:	f7fd fbc6 	bl	8016884 <HAL_DMA_Abort_IT>
 80190f8:	4603      	mov	r3, r0
 80190fa:	2b00      	cmp	r3, #0
 80190fc:	d008      	beq.n	8019110 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80190fe:	687b      	ldr	r3, [r7, #4]
 8019100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019104:	687a      	ldr	r2, [r7, #4]
 8019106:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8019108:	4610      	mov	r0, r2
 801910a:	4798      	blx	r3
 801910c:	e000      	b.n	8019110 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801910e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8019110:	687b      	ldr	r3, [r7, #4]
 8019112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019114:	b29b      	uxth	r3, r3
 8019116:	2b00      	cmp	r3, #0
 8019118:	d03e      	beq.n	8019198 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 801911a:	687b      	ldr	r3, [r7, #4]
 801911c:	681b      	ldr	r3, [r3, #0]
 801911e:	695b      	ldr	r3, [r3, #20]
 8019120:	f003 0304 	and.w	r3, r3, #4
 8019124:	2b04      	cmp	r3, #4
 8019126:	d112      	bne.n	801914e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8019128:	687b      	ldr	r3, [r7, #4]
 801912a:	681b      	ldr	r3, [r3, #0]
 801912c:	691a      	ldr	r2, [r3, #16]
 801912e:	687b      	ldr	r3, [r7, #4]
 8019130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019132:	b2d2      	uxtb	r2, r2
 8019134:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8019136:	687b      	ldr	r3, [r7, #4]
 8019138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801913a:	1c5a      	adds	r2, r3, #1
 801913c:	687b      	ldr	r3, [r7, #4]
 801913e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8019140:	687b      	ldr	r3, [r7, #4]
 8019142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019144:	b29b      	uxth	r3, r3
 8019146:	3b01      	subs	r3, #1
 8019148:	b29a      	uxth	r2, r3
 801914a:	687b      	ldr	r3, [r7, #4]
 801914c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801914e:	687b      	ldr	r3, [r7, #4]
 8019150:	681b      	ldr	r3, [r3, #0]
 8019152:	695b      	ldr	r3, [r3, #20]
 8019154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019158:	2b40      	cmp	r3, #64	; 0x40
 801915a:	d112      	bne.n	8019182 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801915c:	687b      	ldr	r3, [r7, #4]
 801915e:	681b      	ldr	r3, [r3, #0]
 8019160:	691a      	ldr	r2, [r3, #16]
 8019162:	687b      	ldr	r3, [r7, #4]
 8019164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019166:	b2d2      	uxtb	r2, r2
 8019168:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801916a:	687b      	ldr	r3, [r7, #4]
 801916c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801916e:	1c5a      	adds	r2, r3, #1
 8019170:	687b      	ldr	r3, [r7, #4]
 8019172:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8019174:	687b      	ldr	r3, [r7, #4]
 8019176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019178:	b29b      	uxth	r3, r3
 801917a:	3b01      	subs	r3, #1
 801917c:	b29a      	uxth	r2, r3
 801917e:	687b      	ldr	r3, [r7, #4]
 8019180:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8019182:	687b      	ldr	r3, [r7, #4]
 8019184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019186:	b29b      	uxth	r3, r3
 8019188:	2b00      	cmp	r3, #0
 801918a:	d005      	beq.n	8019198 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801918c:	687b      	ldr	r3, [r7, #4]
 801918e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019190:	f043 0204 	orr.w	r2, r3, #4
 8019194:	687b      	ldr	r3, [r7, #4]
 8019196:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801919c:	2b00      	cmp	r3, #0
 801919e:	d003      	beq.n	80191a8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80191a0:	6878      	ldr	r0, [r7, #4]
 80191a2:	f000 f8b3 	bl	801930c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80191a6:	e039      	b.n	801921c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80191a8:	7bfb      	ldrb	r3, [r7, #15]
 80191aa:	2b2a      	cmp	r3, #42	; 0x2a
 80191ac:	d109      	bne.n	80191c2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80191ae:	687b      	ldr	r3, [r7, #4]
 80191b0:	2200      	movs	r2, #0
 80191b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80191b4:	687b      	ldr	r3, [r7, #4]
 80191b6:	2228      	movs	r2, #40	; 0x28
 80191b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80191bc:	6878      	ldr	r0, [r7, #4]
 80191be:	f7ff f827 	bl	8018210 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80191c2:	687b      	ldr	r3, [r7, #4]
 80191c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80191c8:	b2db      	uxtb	r3, r3
 80191ca:	2b28      	cmp	r3, #40	; 0x28
 80191cc:	d111      	bne.n	80191f2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80191ce:	687b      	ldr	r3, [r7, #4]
 80191d0:	4a15      	ldr	r2, [pc, #84]	; (8019228 <I2C_Slave_STOPF+0x25c>)
 80191d2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80191d4:	687b      	ldr	r3, [r7, #4]
 80191d6:	2200      	movs	r2, #0
 80191d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80191da:	687b      	ldr	r3, [r7, #4]
 80191dc:	2220      	movs	r2, #32
 80191de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80191e2:	687b      	ldr	r3, [r7, #4]
 80191e4:	2200      	movs	r2, #0
 80191e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80191ea:	6878      	ldr	r0, [r7, #4]
 80191ec:	f7ff f828 	bl	8018240 <HAL_I2C_ListenCpltCallback>
}
 80191f0:	e014      	b.n	801921c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80191f2:	687b      	ldr	r3, [r7, #4]
 80191f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80191f6:	2b22      	cmp	r3, #34	; 0x22
 80191f8:	d002      	beq.n	8019200 <I2C_Slave_STOPF+0x234>
 80191fa:	7bfb      	ldrb	r3, [r7, #15]
 80191fc:	2b22      	cmp	r3, #34	; 0x22
 80191fe:	d10d      	bne.n	801921c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8019200:	687b      	ldr	r3, [r7, #4]
 8019202:	2200      	movs	r2, #0
 8019204:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8019206:	687b      	ldr	r3, [r7, #4]
 8019208:	2220      	movs	r2, #32
 801920a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801920e:	687b      	ldr	r3, [r7, #4]
 8019210:	2200      	movs	r2, #0
 8019212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8019216:	6878      	ldr	r0, [r7, #4]
 8019218:	f7fe fffa 	bl	8018210 <HAL_I2C_SlaveRxCpltCallback>
}
 801921c:	bf00      	nop
 801921e:	3710      	adds	r7, #16
 8019220:	46bd      	mov	sp, r7
 8019222:	bd80      	pop	{r7, pc}
 8019224:	0801986d 	.word	0x0801986d
 8019228:	ffff0000 	.word	0xffff0000

0801922c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 801922c:	b580      	push	{r7, lr}
 801922e:	b084      	sub	sp, #16
 8019230:	af00      	add	r7, sp, #0
 8019232:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8019234:	687b      	ldr	r3, [r7, #4]
 8019236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801923a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801923c:	687b      	ldr	r3, [r7, #4]
 801923e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019240:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8019242:	68bb      	ldr	r3, [r7, #8]
 8019244:	2b08      	cmp	r3, #8
 8019246:	d002      	beq.n	801924e <I2C_Slave_AF+0x22>
 8019248:	68bb      	ldr	r3, [r7, #8]
 801924a:	2b20      	cmp	r3, #32
 801924c:	d129      	bne.n	80192a2 <I2C_Slave_AF+0x76>
 801924e:	7bfb      	ldrb	r3, [r7, #15]
 8019250:	2b28      	cmp	r3, #40	; 0x28
 8019252:	d126      	bne.n	80192a2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8019254:	687b      	ldr	r3, [r7, #4]
 8019256:	4a2c      	ldr	r2, [pc, #176]	; (8019308 <I2C_Slave_AF+0xdc>)
 8019258:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801925a:	687b      	ldr	r3, [r7, #4]
 801925c:	681b      	ldr	r3, [r3, #0]
 801925e:	685a      	ldr	r2, [r3, #4]
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	681b      	ldr	r3, [r3, #0]
 8019264:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8019268:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801926a:	687b      	ldr	r3, [r7, #4]
 801926c:	681b      	ldr	r3, [r3, #0]
 801926e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8019272:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019274:	687b      	ldr	r3, [r7, #4]
 8019276:	681b      	ldr	r3, [r3, #0]
 8019278:	681a      	ldr	r2, [r3, #0]
 801927a:	687b      	ldr	r3, [r7, #4]
 801927c:	681b      	ldr	r3, [r3, #0]
 801927e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019282:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8019284:	687b      	ldr	r3, [r7, #4]
 8019286:	2200      	movs	r2, #0
 8019288:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801928a:	687b      	ldr	r3, [r7, #4]
 801928c:	2220      	movs	r2, #32
 801928e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8019292:	687b      	ldr	r3, [r7, #4]
 8019294:	2200      	movs	r2, #0
 8019296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 801929a:	6878      	ldr	r0, [r7, #4]
 801929c:	f7fe ffd0 	bl	8018240 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80192a0:	e02e      	b.n	8019300 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80192a2:	7bfb      	ldrb	r3, [r7, #15]
 80192a4:	2b21      	cmp	r3, #33	; 0x21
 80192a6:	d126      	bne.n	80192f6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80192a8:	687b      	ldr	r3, [r7, #4]
 80192aa:	4a17      	ldr	r2, [pc, #92]	; (8019308 <I2C_Slave_AF+0xdc>)
 80192ac:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80192ae:	687b      	ldr	r3, [r7, #4]
 80192b0:	2221      	movs	r2, #33	; 0x21
 80192b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80192b4:	687b      	ldr	r3, [r7, #4]
 80192b6:	2220      	movs	r2, #32
 80192b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80192bc:	687b      	ldr	r3, [r7, #4]
 80192be:	2200      	movs	r2, #0
 80192c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80192c4:	687b      	ldr	r3, [r7, #4]
 80192c6:	681b      	ldr	r3, [r3, #0]
 80192c8:	685a      	ldr	r2, [r3, #4]
 80192ca:	687b      	ldr	r3, [r7, #4]
 80192cc:	681b      	ldr	r3, [r3, #0]
 80192ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80192d2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80192d4:	687b      	ldr	r3, [r7, #4]
 80192d6:	681b      	ldr	r3, [r3, #0]
 80192d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80192dc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80192de:	687b      	ldr	r3, [r7, #4]
 80192e0:	681b      	ldr	r3, [r3, #0]
 80192e2:	681a      	ldr	r2, [r3, #0]
 80192e4:	687b      	ldr	r3, [r7, #4]
 80192e6:	681b      	ldr	r3, [r3, #0]
 80192e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80192ec:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80192ee:	6878      	ldr	r0, [r7, #4]
 80192f0:	f7fe ff84 	bl	80181fc <HAL_I2C_SlaveTxCpltCallback>
}
 80192f4:	e004      	b.n	8019300 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80192f6:	687b      	ldr	r3, [r7, #4]
 80192f8:	681b      	ldr	r3, [r3, #0]
 80192fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80192fe:	615a      	str	r2, [r3, #20]
}
 8019300:	bf00      	nop
 8019302:	3710      	adds	r7, #16
 8019304:	46bd      	mov	sp, r7
 8019306:	bd80      	pop	{r7, pc}
 8019308:	ffff0000 	.word	0xffff0000

0801930c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 801930c:	b580      	push	{r7, lr}
 801930e:	b084      	sub	sp, #16
 8019310:	af00      	add	r7, sp, #0
 8019312:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8019314:	687b      	ldr	r3, [r7, #4]
 8019316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801931a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 801931c:	687b      	ldr	r3, [r7, #4]
 801931e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8019322:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8019324:	7bbb      	ldrb	r3, [r7, #14]
 8019326:	2b10      	cmp	r3, #16
 8019328:	d002      	beq.n	8019330 <I2C_ITError+0x24>
 801932a:	7bbb      	ldrb	r3, [r7, #14]
 801932c:	2b40      	cmp	r3, #64	; 0x40
 801932e:	d10a      	bne.n	8019346 <I2C_ITError+0x3a>
 8019330:	7bfb      	ldrb	r3, [r7, #15]
 8019332:	2b22      	cmp	r3, #34	; 0x22
 8019334:	d107      	bne.n	8019346 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8019336:	687b      	ldr	r3, [r7, #4]
 8019338:	681b      	ldr	r3, [r3, #0]
 801933a:	681a      	ldr	r2, [r3, #0]
 801933c:	687b      	ldr	r3, [r7, #4]
 801933e:	681b      	ldr	r3, [r3, #0]
 8019340:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8019344:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8019346:	7bfb      	ldrb	r3, [r7, #15]
 8019348:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801934c:	2b28      	cmp	r3, #40	; 0x28
 801934e:	d107      	bne.n	8019360 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8019350:	687b      	ldr	r3, [r7, #4]
 8019352:	2200      	movs	r2, #0
 8019354:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8019356:	687b      	ldr	r3, [r7, #4]
 8019358:	2228      	movs	r2, #40	; 0x28
 801935a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 801935e:	e015      	b.n	801938c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8019360:	687b      	ldr	r3, [r7, #4]
 8019362:	681b      	ldr	r3, [r3, #0]
 8019364:	685b      	ldr	r3, [r3, #4]
 8019366:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801936a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801936e:	d00a      	beq.n	8019386 <I2C_ITError+0x7a>
 8019370:	7bfb      	ldrb	r3, [r7, #15]
 8019372:	2b60      	cmp	r3, #96	; 0x60
 8019374:	d007      	beq.n	8019386 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8019376:	687b      	ldr	r3, [r7, #4]
 8019378:	2220      	movs	r2, #32
 801937a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801937e:	687b      	ldr	r3, [r7, #4]
 8019380:	2200      	movs	r2, #0
 8019382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8019386:	687b      	ldr	r3, [r7, #4]
 8019388:	2200      	movs	r2, #0
 801938a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 801938c:	687b      	ldr	r3, [r7, #4]
 801938e:	681b      	ldr	r3, [r3, #0]
 8019390:	685b      	ldr	r3, [r3, #4]
 8019392:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019396:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801939a:	d162      	bne.n	8019462 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 801939c:	687b      	ldr	r3, [r7, #4]
 801939e:	681b      	ldr	r3, [r3, #0]
 80193a0:	685a      	ldr	r2, [r3, #4]
 80193a2:	687b      	ldr	r3, [r7, #4]
 80193a4:	681b      	ldr	r3, [r3, #0]
 80193a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80193aa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80193ac:	687b      	ldr	r3, [r7, #4]
 80193ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80193b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80193b4:	b2db      	uxtb	r3, r3
 80193b6:	2b01      	cmp	r3, #1
 80193b8:	d020      	beq.n	80193fc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80193ba:	687b      	ldr	r3, [r7, #4]
 80193bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80193be:	4a6a      	ldr	r2, [pc, #424]	; (8019568 <I2C_ITError+0x25c>)
 80193c0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80193c2:	687b      	ldr	r3, [r7, #4]
 80193c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80193c6:	4618      	mov	r0, r3
 80193c8:	f7fd fa5c 	bl	8016884 <HAL_DMA_Abort_IT>
 80193cc:	4603      	mov	r3, r0
 80193ce:	2b00      	cmp	r3, #0
 80193d0:	f000 8089 	beq.w	80194e6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80193d4:	687b      	ldr	r3, [r7, #4]
 80193d6:	681b      	ldr	r3, [r3, #0]
 80193d8:	681a      	ldr	r2, [r3, #0]
 80193da:	687b      	ldr	r3, [r7, #4]
 80193dc:	681b      	ldr	r3, [r3, #0]
 80193de:	f022 0201 	bic.w	r2, r2, #1
 80193e2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80193e4:	687b      	ldr	r3, [r7, #4]
 80193e6:	2220      	movs	r2, #32
 80193e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80193ec:	687b      	ldr	r3, [r7, #4]
 80193ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80193f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80193f2:	687a      	ldr	r2, [r7, #4]
 80193f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80193f6:	4610      	mov	r0, r2
 80193f8:	4798      	blx	r3
 80193fa:	e074      	b.n	80194e6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80193fc:	687b      	ldr	r3, [r7, #4]
 80193fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019400:	4a59      	ldr	r2, [pc, #356]	; (8019568 <I2C_ITError+0x25c>)
 8019402:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8019404:	687b      	ldr	r3, [r7, #4]
 8019406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019408:	4618      	mov	r0, r3
 801940a:	f7fd fa3b 	bl	8016884 <HAL_DMA_Abort_IT>
 801940e:	4603      	mov	r3, r0
 8019410:	2b00      	cmp	r3, #0
 8019412:	d068      	beq.n	80194e6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8019414:	687b      	ldr	r3, [r7, #4]
 8019416:	681b      	ldr	r3, [r3, #0]
 8019418:	695b      	ldr	r3, [r3, #20]
 801941a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801941e:	2b40      	cmp	r3, #64	; 0x40
 8019420:	d10b      	bne.n	801943a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8019422:	687b      	ldr	r3, [r7, #4]
 8019424:	681b      	ldr	r3, [r3, #0]
 8019426:	691a      	ldr	r2, [r3, #16]
 8019428:	687b      	ldr	r3, [r7, #4]
 801942a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801942c:	b2d2      	uxtb	r2, r2
 801942e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8019430:	687b      	ldr	r3, [r7, #4]
 8019432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019434:	1c5a      	adds	r2, r3, #1
 8019436:	687b      	ldr	r3, [r7, #4]
 8019438:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 801943a:	687b      	ldr	r3, [r7, #4]
 801943c:	681b      	ldr	r3, [r3, #0]
 801943e:	681a      	ldr	r2, [r3, #0]
 8019440:	687b      	ldr	r3, [r7, #4]
 8019442:	681b      	ldr	r3, [r3, #0]
 8019444:	f022 0201 	bic.w	r2, r2, #1
 8019448:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 801944a:	687b      	ldr	r3, [r7, #4]
 801944c:	2220      	movs	r2, #32
 801944e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8019452:	687b      	ldr	r3, [r7, #4]
 8019454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019458:	687a      	ldr	r2, [r7, #4]
 801945a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801945c:	4610      	mov	r0, r2
 801945e:	4798      	blx	r3
 8019460:	e041      	b.n	80194e6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8019462:	687b      	ldr	r3, [r7, #4]
 8019464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019468:	b2db      	uxtb	r3, r3
 801946a:	2b60      	cmp	r3, #96	; 0x60
 801946c:	d125      	bne.n	80194ba <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 801946e:	687b      	ldr	r3, [r7, #4]
 8019470:	2220      	movs	r2, #32
 8019472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8019476:	687b      	ldr	r3, [r7, #4]
 8019478:	2200      	movs	r2, #0
 801947a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	681b      	ldr	r3, [r3, #0]
 8019480:	695b      	ldr	r3, [r3, #20]
 8019482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019486:	2b40      	cmp	r3, #64	; 0x40
 8019488:	d10b      	bne.n	80194a2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801948a:	687b      	ldr	r3, [r7, #4]
 801948c:	681b      	ldr	r3, [r3, #0]
 801948e:	691a      	ldr	r2, [r3, #16]
 8019490:	687b      	ldr	r3, [r7, #4]
 8019492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019494:	b2d2      	uxtb	r2, r2
 8019496:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8019498:	687b      	ldr	r3, [r7, #4]
 801949a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801949c:	1c5a      	adds	r2, r3, #1
 801949e:	687b      	ldr	r3, [r7, #4]
 80194a0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80194a2:	687b      	ldr	r3, [r7, #4]
 80194a4:	681b      	ldr	r3, [r3, #0]
 80194a6:	681a      	ldr	r2, [r3, #0]
 80194a8:	687b      	ldr	r3, [r7, #4]
 80194aa:	681b      	ldr	r3, [r3, #0]
 80194ac:	f022 0201 	bic.w	r2, r2, #1
 80194b0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80194b2:	6878      	ldr	r0, [r7, #4]
 80194b4:	f7fe feec 	bl	8018290 <HAL_I2C_AbortCpltCallback>
 80194b8:	e015      	b.n	80194e6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80194ba:	687b      	ldr	r3, [r7, #4]
 80194bc:	681b      	ldr	r3, [r3, #0]
 80194be:	695b      	ldr	r3, [r3, #20]
 80194c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80194c4:	2b40      	cmp	r3, #64	; 0x40
 80194c6:	d10b      	bne.n	80194e0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80194c8:	687b      	ldr	r3, [r7, #4]
 80194ca:	681b      	ldr	r3, [r3, #0]
 80194cc:	691a      	ldr	r2, [r3, #16]
 80194ce:	687b      	ldr	r3, [r7, #4]
 80194d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80194d2:	b2d2      	uxtb	r2, r2
 80194d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80194d6:	687b      	ldr	r3, [r7, #4]
 80194d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80194da:	1c5a      	adds	r2, r3, #1
 80194dc:	687b      	ldr	r3, [r7, #4]
 80194de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80194e0:	6878      	ldr	r0, [r7, #4]
 80194e2:	f7fe fecb 	bl	801827c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80194e6:	687b      	ldr	r3, [r7, #4]
 80194e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80194ea:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80194ec:	68bb      	ldr	r3, [r7, #8]
 80194ee:	f003 0301 	and.w	r3, r3, #1
 80194f2:	2b00      	cmp	r3, #0
 80194f4:	d10e      	bne.n	8019514 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80194f6:	68bb      	ldr	r3, [r7, #8]
 80194f8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80194fc:	2b00      	cmp	r3, #0
 80194fe:	d109      	bne.n	8019514 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8019500:	68bb      	ldr	r3, [r7, #8]
 8019502:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8019506:	2b00      	cmp	r3, #0
 8019508:	d104      	bne.n	8019514 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 801950a:	68bb      	ldr	r3, [r7, #8]
 801950c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8019510:	2b00      	cmp	r3, #0
 8019512:	d007      	beq.n	8019524 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8019514:	687b      	ldr	r3, [r7, #4]
 8019516:	681b      	ldr	r3, [r3, #0]
 8019518:	685a      	ldr	r2, [r3, #4]
 801951a:	687b      	ldr	r3, [r7, #4]
 801951c:	681b      	ldr	r3, [r3, #0]
 801951e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8019522:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8019524:	687b      	ldr	r3, [r7, #4]
 8019526:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801952a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 801952c:	687b      	ldr	r3, [r7, #4]
 801952e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019530:	f003 0304 	and.w	r3, r3, #4
 8019534:	2b04      	cmp	r3, #4
 8019536:	d113      	bne.n	8019560 <I2C_ITError+0x254>
 8019538:	7bfb      	ldrb	r3, [r7, #15]
 801953a:	2b28      	cmp	r3, #40	; 0x28
 801953c:	d110      	bne.n	8019560 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801953e:	687b      	ldr	r3, [r7, #4]
 8019540:	4a0a      	ldr	r2, [pc, #40]	; (801956c <I2C_ITError+0x260>)
 8019542:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	2200      	movs	r2, #0
 8019548:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801954a:	687b      	ldr	r3, [r7, #4]
 801954c:	2220      	movs	r2, #32
 801954e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8019552:	687b      	ldr	r3, [r7, #4]
 8019554:	2200      	movs	r2, #0
 8019556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 801955a:	6878      	ldr	r0, [r7, #4]
 801955c:	f7fe fe70 	bl	8018240 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8019560:	bf00      	nop
 8019562:	3710      	adds	r7, #16
 8019564:	46bd      	mov	sp, r7
 8019566:	bd80      	pop	{r7, pc}
 8019568:	0801986d 	.word	0x0801986d
 801956c:	ffff0000 	.word	0xffff0000

08019570 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8019570:	b580      	push	{r7, lr}
 8019572:	b088      	sub	sp, #32
 8019574:	af02      	add	r7, sp, #8
 8019576:	60f8      	str	r0, [r7, #12]
 8019578:	4608      	mov	r0, r1
 801957a:	4611      	mov	r1, r2
 801957c:	461a      	mov	r2, r3
 801957e:	4603      	mov	r3, r0
 8019580:	817b      	strh	r3, [r7, #10]
 8019582:	460b      	mov	r3, r1
 8019584:	813b      	strh	r3, [r7, #8]
 8019586:	4613      	mov	r3, r2
 8019588:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801958a:	68fb      	ldr	r3, [r7, #12]
 801958c:	681b      	ldr	r3, [r3, #0]
 801958e:	681a      	ldr	r2, [r3, #0]
 8019590:	68fb      	ldr	r3, [r7, #12]
 8019592:	681b      	ldr	r3, [r3, #0]
 8019594:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019598:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801959a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801959c:	9300      	str	r3, [sp, #0]
 801959e:	6a3b      	ldr	r3, [r7, #32]
 80195a0:	2200      	movs	r2, #0
 80195a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80195a6:	68f8      	ldr	r0, [r7, #12]
 80195a8:	f000 fa08 	bl	80199bc <I2C_WaitOnFlagUntilTimeout>
 80195ac:	4603      	mov	r3, r0
 80195ae:	2b00      	cmp	r3, #0
 80195b0:	d00d      	beq.n	80195ce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80195b2:	68fb      	ldr	r3, [r7, #12]
 80195b4:	681b      	ldr	r3, [r3, #0]
 80195b6:	681b      	ldr	r3, [r3, #0]
 80195b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80195bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80195c0:	d103      	bne.n	80195ca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80195c2:	68fb      	ldr	r3, [r7, #12]
 80195c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80195c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80195ca:	2303      	movs	r3, #3
 80195cc:	e05f      	b.n	801968e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80195ce:	897b      	ldrh	r3, [r7, #10]
 80195d0:	b2db      	uxtb	r3, r3
 80195d2:	461a      	mov	r2, r3
 80195d4:	68fb      	ldr	r3, [r7, #12]
 80195d6:	681b      	ldr	r3, [r3, #0]
 80195d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80195dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80195de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195e0:	6a3a      	ldr	r2, [r7, #32]
 80195e2:	492d      	ldr	r1, [pc, #180]	; (8019698 <I2C_RequestMemoryWrite+0x128>)
 80195e4:	68f8      	ldr	r0, [r7, #12]
 80195e6:	f000 fa40 	bl	8019a6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80195ea:	4603      	mov	r3, r0
 80195ec:	2b00      	cmp	r3, #0
 80195ee:	d001      	beq.n	80195f4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80195f0:	2301      	movs	r3, #1
 80195f2:	e04c      	b.n	801968e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80195f4:	2300      	movs	r3, #0
 80195f6:	617b      	str	r3, [r7, #20]
 80195f8:	68fb      	ldr	r3, [r7, #12]
 80195fa:	681b      	ldr	r3, [r3, #0]
 80195fc:	695b      	ldr	r3, [r3, #20]
 80195fe:	617b      	str	r3, [r7, #20]
 8019600:	68fb      	ldr	r3, [r7, #12]
 8019602:	681b      	ldr	r3, [r3, #0]
 8019604:	699b      	ldr	r3, [r3, #24]
 8019606:	617b      	str	r3, [r7, #20]
 8019608:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801960a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801960c:	6a39      	ldr	r1, [r7, #32]
 801960e:	68f8      	ldr	r0, [r7, #12]
 8019610:	f000 faaa 	bl	8019b68 <I2C_WaitOnTXEFlagUntilTimeout>
 8019614:	4603      	mov	r3, r0
 8019616:	2b00      	cmp	r3, #0
 8019618:	d00d      	beq.n	8019636 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801961a:	68fb      	ldr	r3, [r7, #12]
 801961c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801961e:	2b04      	cmp	r3, #4
 8019620:	d107      	bne.n	8019632 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8019622:	68fb      	ldr	r3, [r7, #12]
 8019624:	681b      	ldr	r3, [r3, #0]
 8019626:	681a      	ldr	r2, [r3, #0]
 8019628:	68fb      	ldr	r3, [r7, #12]
 801962a:	681b      	ldr	r3, [r3, #0]
 801962c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019630:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8019632:	2301      	movs	r3, #1
 8019634:	e02b      	b.n	801968e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8019636:	88fb      	ldrh	r3, [r7, #6]
 8019638:	2b01      	cmp	r3, #1
 801963a:	d105      	bne.n	8019648 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801963c:	893b      	ldrh	r3, [r7, #8]
 801963e:	b2da      	uxtb	r2, r3
 8019640:	68fb      	ldr	r3, [r7, #12]
 8019642:	681b      	ldr	r3, [r3, #0]
 8019644:	611a      	str	r2, [r3, #16]
 8019646:	e021      	b.n	801968c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8019648:	893b      	ldrh	r3, [r7, #8]
 801964a:	0a1b      	lsrs	r3, r3, #8
 801964c:	b29b      	uxth	r3, r3
 801964e:	b2da      	uxtb	r2, r3
 8019650:	68fb      	ldr	r3, [r7, #12]
 8019652:	681b      	ldr	r3, [r3, #0]
 8019654:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8019656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019658:	6a39      	ldr	r1, [r7, #32]
 801965a:	68f8      	ldr	r0, [r7, #12]
 801965c:	f000 fa84 	bl	8019b68 <I2C_WaitOnTXEFlagUntilTimeout>
 8019660:	4603      	mov	r3, r0
 8019662:	2b00      	cmp	r3, #0
 8019664:	d00d      	beq.n	8019682 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8019666:	68fb      	ldr	r3, [r7, #12]
 8019668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801966a:	2b04      	cmp	r3, #4
 801966c:	d107      	bne.n	801967e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801966e:	68fb      	ldr	r3, [r7, #12]
 8019670:	681b      	ldr	r3, [r3, #0]
 8019672:	681a      	ldr	r2, [r3, #0]
 8019674:	68fb      	ldr	r3, [r7, #12]
 8019676:	681b      	ldr	r3, [r3, #0]
 8019678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801967c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 801967e:	2301      	movs	r3, #1
 8019680:	e005      	b.n	801968e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8019682:	893b      	ldrh	r3, [r7, #8]
 8019684:	b2da      	uxtb	r2, r3
 8019686:	68fb      	ldr	r3, [r7, #12]
 8019688:	681b      	ldr	r3, [r3, #0]
 801968a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 801968c:	2300      	movs	r3, #0
}
 801968e:	4618      	mov	r0, r3
 8019690:	3718      	adds	r7, #24
 8019692:	46bd      	mov	sp, r7
 8019694:	bd80      	pop	{r7, pc}
 8019696:	bf00      	nop
 8019698:	00010002 	.word	0x00010002

0801969c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 801969c:	b580      	push	{r7, lr}
 801969e:	b088      	sub	sp, #32
 80196a0:	af02      	add	r7, sp, #8
 80196a2:	60f8      	str	r0, [r7, #12]
 80196a4:	4608      	mov	r0, r1
 80196a6:	4611      	mov	r1, r2
 80196a8:	461a      	mov	r2, r3
 80196aa:	4603      	mov	r3, r0
 80196ac:	817b      	strh	r3, [r7, #10]
 80196ae:	460b      	mov	r3, r1
 80196b0:	813b      	strh	r3, [r7, #8]
 80196b2:	4613      	mov	r3, r2
 80196b4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80196b6:	68fb      	ldr	r3, [r7, #12]
 80196b8:	681b      	ldr	r3, [r3, #0]
 80196ba:	681a      	ldr	r2, [r3, #0]
 80196bc:	68fb      	ldr	r3, [r7, #12]
 80196be:	681b      	ldr	r3, [r3, #0]
 80196c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80196c4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80196c6:	68fb      	ldr	r3, [r7, #12]
 80196c8:	681b      	ldr	r3, [r3, #0]
 80196ca:	681a      	ldr	r2, [r3, #0]
 80196cc:	68fb      	ldr	r3, [r7, #12]
 80196ce:	681b      	ldr	r3, [r3, #0]
 80196d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80196d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80196d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196d8:	9300      	str	r3, [sp, #0]
 80196da:	6a3b      	ldr	r3, [r7, #32]
 80196dc:	2200      	movs	r2, #0
 80196de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80196e2:	68f8      	ldr	r0, [r7, #12]
 80196e4:	f000 f96a 	bl	80199bc <I2C_WaitOnFlagUntilTimeout>
 80196e8:	4603      	mov	r3, r0
 80196ea:	2b00      	cmp	r3, #0
 80196ec:	d00d      	beq.n	801970a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80196ee:	68fb      	ldr	r3, [r7, #12]
 80196f0:	681b      	ldr	r3, [r3, #0]
 80196f2:	681b      	ldr	r3, [r3, #0]
 80196f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80196f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80196fc:	d103      	bne.n	8019706 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80196fe:	68fb      	ldr	r3, [r7, #12]
 8019700:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019704:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8019706:	2303      	movs	r3, #3
 8019708:	e0aa      	b.n	8019860 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801970a:	897b      	ldrh	r3, [r7, #10]
 801970c:	b2db      	uxtb	r3, r3
 801970e:	461a      	mov	r2, r3
 8019710:	68fb      	ldr	r3, [r7, #12]
 8019712:	681b      	ldr	r3, [r3, #0]
 8019714:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8019718:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801971a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801971c:	6a3a      	ldr	r2, [r7, #32]
 801971e:	4952      	ldr	r1, [pc, #328]	; (8019868 <I2C_RequestMemoryRead+0x1cc>)
 8019720:	68f8      	ldr	r0, [r7, #12]
 8019722:	f000 f9a2 	bl	8019a6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8019726:	4603      	mov	r3, r0
 8019728:	2b00      	cmp	r3, #0
 801972a:	d001      	beq.n	8019730 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 801972c:	2301      	movs	r3, #1
 801972e:	e097      	b.n	8019860 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8019730:	2300      	movs	r3, #0
 8019732:	617b      	str	r3, [r7, #20]
 8019734:	68fb      	ldr	r3, [r7, #12]
 8019736:	681b      	ldr	r3, [r3, #0]
 8019738:	695b      	ldr	r3, [r3, #20]
 801973a:	617b      	str	r3, [r7, #20]
 801973c:	68fb      	ldr	r3, [r7, #12]
 801973e:	681b      	ldr	r3, [r3, #0]
 8019740:	699b      	ldr	r3, [r3, #24]
 8019742:	617b      	str	r3, [r7, #20]
 8019744:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8019746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019748:	6a39      	ldr	r1, [r7, #32]
 801974a:	68f8      	ldr	r0, [r7, #12]
 801974c:	f000 fa0c 	bl	8019b68 <I2C_WaitOnTXEFlagUntilTimeout>
 8019750:	4603      	mov	r3, r0
 8019752:	2b00      	cmp	r3, #0
 8019754:	d00d      	beq.n	8019772 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8019756:	68fb      	ldr	r3, [r7, #12]
 8019758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801975a:	2b04      	cmp	r3, #4
 801975c:	d107      	bne.n	801976e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801975e:	68fb      	ldr	r3, [r7, #12]
 8019760:	681b      	ldr	r3, [r3, #0]
 8019762:	681a      	ldr	r2, [r3, #0]
 8019764:	68fb      	ldr	r3, [r7, #12]
 8019766:	681b      	ldr	r3, [r3, #0]
 8019768:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801976c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 801976e:	2301      	movs	r3, #1
 8019770:	e076      	b.n	8019860 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8019772:	88fb      	ldrh	r3, [r7, #6]
 8019774:	2b01      	cmp	r3, #1
 8019776:	d105      	bne.n	8019784 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8019778:	893b      	ldrh	r3, [r7, #8]
 801977a:	b2da      	uxtb	r2, r3
 801977c:	68fb      	ldr	r3, [r7, #12]
 801977e:	681b      	ldr	r3, [r3, #0]
 8019780:	611a      	str	r2, [r3, #16]
 8019782:	e021      	b.n	80197c8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8019784:	893b      	ldrh	r3, [r7, #8]
 8019786:	0a1b      	lsrs	r3, r3, #8
 8019788:	b29b      	uxth	r3, r3
 801978a:	b2da      	uxtb	r2, r3
 801978c:	68fb      	ldr	r3, [r7, #12]
 801978e:	681b      	ldr	r3, [r3, #0]
 8019790:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8019792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019794:	6a39      	ldr	r1, [r7, #32]
 8019796:	68f8      	ldr	r0, [r7, #12]
 8019798:	f000 f9e6 	bl	8019b68 <I2C_WaitOnTXEFlagUntilTimeout>
 801979c:	4603      	mov	r3, r0
 801979e:	2b00      	cmp	r3, #0
 80197a0:	d00d      	beq.n	80197be <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80197a2:	68fb      	ldr	r3, [r7, #12]
 80197a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80197a6:	2b04      	cmp	r3, #4
 80197a8:	d107      	bne.n	80197ba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80197aa:	68fb      	ldr	r3, [r7, #12]
 80197ac:	681b      	ldr	r3, [r3, #0]
 80197ae:	681a      	ldr	r2, [r3, #0]
 80197b0:	68fb      	ldr	r3, [r7, #12]
 80197b2:	681b      	ldr	r3, [r3, #0]
 80197b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80197b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80197ba:	2301      	movs	r3, #1
 80197bc:	e050      	b.n	8019860 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80197be:	893b      	ldrh	r3, [r7, #8]
 80197c0:	b2da      	uxtb	r2, r3
 80197c2:	68fb      	ldr	r3, [r7, #12]
 80197c4:	681b      	ldr	r3, [r3, #0]
 80197c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80197c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80197ca:	6a39      	ldr	r1, [r7, #32]
 80197cc:	68f8      	ldr	r0, [r7, #12]
 80197ce:	f000 f9cb 	bl	8019b68 <I2C_WaitOnTXEFlagUntilTimeout>
 80197d2:	4603      	mov	r3, r0
 80197d4:	2b00      	cmp	r3, #0
 80197d6:	d00d      	beq.n	80197f4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80197d8:	68fb      	ldr	r3, [r7, #12]
 80197da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80197dc:	2b04      	cmp	r3, #4
 80197de:	d107      	bne.n	80197f0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80197e0:	68fb      	ldr	r3, [r7, #12]
 80197e2:	681b      	ldr	r3, [r3, #0]
 80197e4:	681a      	ldr	r2, [r3, #0]
 80197e6:	68fb      	ldr	r3, [r7, #12]
 80197e8:	681b      	ldr	r3, [r3, #0]
 80197ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80197ee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80197f0:	2301      	movs	r3, #1
 80197f2:	e035      	b.n	8019860 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80197f4:	68fb      	ldr	r3, [r7, #12]
 80197f6:	681b      	ldr	r3, [r3, #0]
 80197f8:	681a      	ldr	r2, [r3, #0]
 80197fa:	68fb      	ldr	r3, [r7, #12]
 80197fc:	681b      	ldr	r3, [r3, #0]
 80197fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019802:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8019804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019806:	9300      	str	r3, [sp, #0]
 8019808:	6a3b      	ldr	r3, [r7, #32]
 801980a:	2200      	movs	r2, #0
 801980c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8019810:	68f8      	ldr	r0, [r7, #12]
 8019812:	f000 f8d3 	bl	80199bc <I2C_WaitOnFlagUntilTimeout>
 8019816:	4603      	mov	r3, r0
 8019818:	2b00      	cmp	r3, #0
 801981a:	d00d      	beq.n	8019838 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801981c:	68fb      	ldr	r3, [r7, #12]
 801981e:	681b      	ldr	r3, [r3, #0]
 8019820:	681b      	ldr	r3, [r3, #0]
 8019822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801982a:	d103      	bne.n	8019834 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801982c:	68fb      	ldr	r3, [r7, #12]
 801982e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019832:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8019834:	2303      	movs	r3, #3
 8019836:	e013      	b.n	8019860 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8019838:	897b      	ldrh	r3, [r7, #10]
 801983a:	b2db      	uxtb	r3, r3
 801983c:	f043 0301 	orr.w	r3, r3, #1
 8019840:	b2da      	uxtb	r2, r3
 8019842:	68fb      	ldr	r3, [r7, #12]
 8019844:	681b      	ldr	r3, [r3, #0]
 8019846:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8019848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801984a:	6a3a      	ldr	r2, [r7, #32]
 801984c:	4906      	ldr	r1, [pc, #24]	; (8019868 <I2C_RequestMemoryRead+0x1cc>)
 801984e:	68f8      	ldr	r0, [r7, #12]
 8019850:	f000 f90b 	bl	8019a6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8019854:	4603      	mov	r3, r0
 8019856:	2b00      	cmp	r3, #0
 8019858:	d001      	beq.n	801985e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 801985a:	2301      	movs	r3, #1
 801985c:	e000      	b.n	8019860 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 801985e:	2300      	movs	r3, #0
}
 8019860:	4618      	mov	r0, r3
 8019862:	3718      	adds	r7, #24
 8019864:	46bd      	mov	sp, r7
 8019866:	bd80      	pop	{r7, pc}
 8019868:	00010002 	.word	0x00010002

0801986c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 801986c:	b580      	push	{r7, lr}
 801986e:	b086      	sub	sp, #24
 8019870:	af00      	add	r7, sp, #0
 8019872:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8019874:	2300      	movs	r3, #0
 8019876:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8019878:	687b      	ldr	r3, [r7, #4]
 801987a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801987c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801987e:	697b      	ldr	r3, [r7, #20]
 8019880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019884:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8019886:	4b4b      	ldr	r3, [pc, #300]	; (80199b4 <I2C_DMAAbort+0x148>)
 8019888:	681b      	ldr	r3, [r3, #0]
 801988a:	08db      	lsrs	r3, r3, #3
 801988c:	4a4a      	ldr	r2, [pc, #296]	; (80199b8 <I2C_DMAAbort+0x14c>)
 801988e:	fba2 2303 	umull	r2, r3, r2, r3
 8019892:	0a1a      	lsrs	r2, r3, #8
 8019894:	4613      	mov	r3, r2
 8019896:	009b      	lsls	r3, r3, #2
 8019898:	4413      	add	r3, r2
 801989a:	00da      	lsls	r2, r3, #3
 801989c:	1ad3      	subs	r3, r2, r3
 801989e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80198a0:	68fb      	ldr	r3, [r7, #12]
 80198a2:	2b00      	cmp	r3, #0
 80198a4:	d106      	bne.n	80198b4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80198a6:	697b      	ldr	r3, [r7, #20]
 80198a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80198aa:	f043 0220 	orr.w	r2, r3, #32
 80198ae:	697b      	ldr	r3, [r7, #20]
 80198b0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80198b2:	e00a      	b.n	80198ca <I2C_DMAAbort+0x5e>
    }
    count--;
 80198b4:	68fb      	ldr	r3, [r7, #12]
 80198b6:	3b01      	subs	r3, #1
 80198b8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80198ba:	697b      	ldr	r3, [r7, #20]
 80198bc:	681b      	ldr	r3, [r3, #0]
 80198be:	681b      	ldr	r3, [r3, #0]
 80198c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80198c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80198c8:	d0ea      	beq.n	80198a0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80198ca:	697b      	ldr	r3, [r7, #20]
 80198cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80198ce:	2b00      	cmp	r3, #0
 80198d0:	d003      	beq.n	80198da <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80198d2:	697b      	ldr	r3, [r7, #20]
 80198d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80198d6:	2200      	movs	r2, #0
 80198d8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80198da:	697b      	ldr	r3, [r7, #20]
 80198dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80198de:	2b00      	cmp	r3, #0
 80198e0:	d003      	beq.n	80198ea <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80198e2:	697b      	ldr	r3, [r7, #20]
 80198e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80198e6:	2200      	movs	r2, #0
 80198e8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80198ea:	697b      	ldr	r3, [r7, #20]
 80198ec:	681b      	ldr	r3, [r3, #0]
 80198ee:	681a      	ldr	r2, [r3, #0]
 80198f0:	697b      	ldr	r3, [r7, #20]
 80198f2:	681b      	ldr	r3, [r3, #0]
 80198f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80198f8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80198fa:	697b      	ldr	r3, [r7, #20]
 80198fc:	2200      	movs	r2, #0
 80198fe:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8019900:	697b      	ldr	r3, [r7, #20]
 8019902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019904:	2b00      	cmp	r3, #0
 8019906:	d003      	beq.n	8019910 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8019908:	697b      	ldr	r3, [r7, #20]
 801990a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801990c:	2200      	movs	r2, #0
 801990e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8019910:	697b      	ldr	r3, [r7, #20]
 8019912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019914:	2b00      	cmp	r3, #0
 8019916:	d003      	beq.n	8019920 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8019918:	697b      	ldr	r3, [r7, #20]
 801991a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801991c:	2200      	movs	r2, #0
 801991e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8019920:	697b      	ldr	r3, [r7, #20]
 8019922:	681b      	ldr	r3, [r3, #0]
 8019924:	681a      	ldr	r2, [r3, #0]
 8019926:	697b      	ldr	r3, [r7, #20]
 8019928:	681b      	ldr	r3, [r3, #0]
 801992a:	f022 0201 	bic.w	r2, r2, #1
 801992e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8019930:	697b      	ldr	r3, [r7, #20]
 8019932:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019936:	b2db      	uxtb	r3, r3
 8019938:	2b60      	cmp	r3, #96	; 0x60
 801993a:	d10e      	bne.n	801995a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 801993c:	697b      	ldr	r3, [r7, #20]
 801993e:	2220      	movs	r2, #32
 8019940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8019944:	697b      	ldr	r3, [r7, #20]
 8019946:	2200      	movs	r2, #0
 8019948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 801994c:	697b      	ldr	r3, [r7, #20]
 801994e:	2200      	movs	r2, #0
 8019950:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8019952:	6978      	ldr	r0, [r7, #20]
 8019954:	f7fe fc9c 	bl	8018290 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8019958:	e027      	b.n	80199aa <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801995a:	7cfb      	ldrb	r3, [r7, #19]
 801995c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8019960:	2b28      	cmp	r3, #40	; 0x28
 8019962:	d117      	bne.n	8019994 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8019964:	697b      	ldr	r3, [r7, #20]
 8019966:	681b      	ldr	r3, [r3, #0]
 8019968:	681a      	ldr	r2, [r3, #0]
 801996a:	697b      	ldr	r3, [r7, #20]
 801996c:	681b      	ldr	r3, [r3, #0]
 801996e:	f042 0201 	orr.w	r2, r2, #1
 8019972:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019974:	697b      	ldr	r3, [r7, #20]
 8019976:	681b      	ldr	r3, [r3, #0]
 8019978:	681a      	ldr	r2, [r3, #0]
 801997a:	697b      	ldr	r3, [r7, #20]
 801997c:	681b      	ldr	r3, [r3, #0]
 801997e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8019982:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8019984:	697b      	ldr	r3, [r7, #20]
 8019986:	2200      	movs	r2, #0
 8019988:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801998a:	697b      	ldr	r3, [r7, #20]
 801998c:	2228      	movs	r2, #40	; 0x28
 801998e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8019992:	e007      	b.n	80199a4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8019994:	697b      	ldr	r3, [r7, #20]
 8019996:	2220      	movs	r2, #32
 8019998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801999c:	697b      	ldr	r3, [r7, #20]
 801999e:	2200      	movs	r2, #0
 80199a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80199a4:	6978      	ldr	r0, [r7, #20]
 80199a6:	f7fe fc69 	bl	801827c <HAL_I2C_ErrorCallback>
}
 80199aa:	bf00      	nop
 80199ac:	3718      	adds	r7, #24
 80199ae:	46bd      	mov	sp, r7
 80199b0:	bd80      	pop	{r7, pc}
 80199b2:	bf00      	nop
 80199b4:	20000184 	.word	0x20000184
 80199b8:	14f8b589 	.word	0x14f8b589

080199bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80199bc:	b580      	push	{r7, lr}
 80199be:	b084      	sub	sp, #16
 80199c0:	af00      	add	r7, sp, #0
 80199c2:	60f8      	str	r0, [r7, #12]
 80199c4:	60b9      	str	r1, [r7, #8]
 80199c6:	603b      	str	r3, [r7, #0]
 80199c8:	4613      	mov	r3, r2
 80199ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80199cc:	e025      	b.n	8019a1a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80199ce:	683b      	ldr	r3, [r7, #0]
 80199d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80199d4:	d021      	beq.n	8019a1a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80199d6:	f7fc fc9d 	bl	8016314 <HAL_GetTick>
 80199da:	4602      	mov	r2, r0
 80199dc:	69bb      	ldr	r3, [r7, #24]
 80199de:	1ad3      	subs	r3, r2, r3
 80199e0:	683a      	ldr	r2, [r7, #0]
 80199e2:	429a      	cmp	r2, r3
 80199e4:	d302      	bcc.n	80199ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80199e6:	683b      	ldr	r3, [r7, #0]
 80199e8:	2b00      	cmp	r3, #0
 80199ea:	d116      	bne.n	8019a1a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80199ec:	68fb      	ldr	r3, [r7, #12]
 80199ee:	2200      	movs	r2, #0
 80199f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80199f2:	68fb      	ldr	r3, [r7, #12]
 80199f4:	2220      	movs	r2, #32
 80199f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80199fa:	68fb      	ldr	r3, [r7, #12]
 80199fc:	2200      	movs	r2, #0
 80199fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8019a02:	68fb      	ldr	r3, [r7, #12]
 8019a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019a06:	f043 0220 	orr.w	r2, r3, #32
 8019a0a:	68fb      	ldr	r3, [r7, #12]
 8019a0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8019a0e:	68fb      	ldr	r3, [r7, #12]
 8019a10:	2200      	movs	r2, #0
 8019a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8019a16:	2301      	movs	r3, #1
 8019a18:	e023      	b.n	8019a62 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8019a1a:	68bb      	ldr	r3, [r7, #8]
 8019a1c:	0c1b      	lsrs	r3, r3, #16
 8019a1e:	b2db      	uxtb	r3, r3
 8019a20:	2b01      	cmp	r3, #1
 8019a22:	d10d      	bne.n	8019a40 <I2C_WaitOnFlagUntilTimeout+0x84>
 8019a24:	68fb      	ldr	r3, [r7, #12]
 8019a26:	681b      	ldr	r3, [r3, #0]
 8019a28:	695b      	ldr	r3, [r3, #20]
 8019a2a:	43da      	mvns	r2, r3
 8019a2c:	68bb      	ldr	r3, [r7, #8]
 8019a2e:	4013      	ands	r3, r2
 8019a30:	b29b      	uxth	r3, r3
 8019a32:	2b00      	cmp	r3, #0
 8019a34:	bf0c      	ite	eq
 8019a36:	2301      	moveq	r3, #1
 8019a38:	2300      	movne	r3, #0
 8019a3a:	b2db      	uxtb	r3, r3
 8019a3c:	461a      	mov	r2, r3
 8019a3e:	e00c      	b.n	8019a5a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8019a40:	68fb      	ldr	r3, [r7, #12]
 8019a42:	681b      	ldr	r3, [r3, #0]
 8019a44:	699b      	ldr	r3, [r3, #24]
 8019a46:	43da      	mvns	r2, r3
 8019a48:	68bb      	ldr	r3, [r7, #8]
 8019a4a:	4013      	ands	r3, r2
 8019a4c:	b29b      	uxth	r3, r3
 8019a4e:	2b00      	cmp	r3, #0
 8019a50:	bf0c      	ite	eq
 8019a52:	2301      	moveq	r3, #1
 8019a54:	2300      	movne	r3, #0
 8019a56:	b2db      	uxtb	r3, r3
 8019a58:	461a      	mov	r2, r3
 8019a5a:	79fb      	ldrb	r3, [r7, #7]
 8019a5c:	429a      	cmp	r2, r3
 8019a5e:	d0b6      	beq.n	80199ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8019a60:	2300      	movs	r3, #0
}
 8019a62:	4618      	mov	r0, r3
 8019a64:	3710      	adds	r7, #16
 8019a66:	46bd      	mov	sp, r7
 8019a68:	bd80      	pop	{r7, pc}

08019a6a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8019a6a:	b580      	push	{r7, lr}
 8019a6c:	b084      	sub	sp, #16
 8019a6e:	af00      	add	r7, sp, #0
 8019a70:	60f8      	str	r0, [r7, #12]
 8019a72:	60b9      	str	r1, [r7, #8]
 8019a74:	607a      	str	r2, [r7, #4]
 8019a76:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8019a78:	e051      	b.n	8019b1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8019a7a:	68fb      	ldr	r3, [r7, #12]
 8019a7c:	681b      	ldr	r3, [r3, #0]
 8019a7e:	695b      	ldr	r3, [r3, #20]
 8019a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8019a84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019a88:	d123      	bne.n	8019ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8019a8a:	68fb      	ldr	r3, [r7, #12]
 8019a8c:	681b      	ldr	r3, [r3, #0]
 8019a8e:	681a      	ldr	r2, [r3, #0]
 8019a90:	68fb      	ldr	r3, [r7, #12]
 8019a92:	681b      	ldr	r3, [r3, #0]
 8019a94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019a98:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019a9a:	68fb      	ldr	r3, [r7, #12]
 8019a9c:	681b      	ldr	r3, [r3, #0]
 8019a9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8019aa2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8019aa4:	68fb      	ldr	r3, [r7, #12]
 8019aa6:	2200      	movs	r2, #0
 8019aa8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8019aaa:	68fb      	ldr	r3, [r7, #12]
 8019aac:	2220      	movs	r2, #32
 8019aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8019ab2:	68fb      	ldr	r3, [r7, #12]
 8019ab4:	2200      	movs	r2, #0
 8019ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8019aba:	68fb      	ldr	r3, [r7, #12]
 8019abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019abe:	f043 0204 	orr.w	r2, r3, #4
 8019ac2:	68fb      	ldr	r3, [r7, #12]
 8019ac4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8019ac6:	68fb      	ldr	r3, [r7, #12]
 8019ac8:	2200      	movs	r2, #0
 8019aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8019ace:	2301      	movs	r3, #1
 8019ad0:	e046      	b.n	8019b60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8019ad2:	687b      	ldr	r3, [r7, #4]
 8019ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019ad8:	d021      	beq.n	8019b1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019ada:	f7fc fc1b 	bl	8016314 <HAL_GetTick>
 8019ade:	4602      	mov	r2, r0
 8019ae0:	683b      	ldr	r3, [r7, #0]
 8019ae2:	1ad3      	subs	r3, r2, r3
 8019ae4:	687a      	ldr	r2, [r7, #4]
 8019ae6:	429a      	cmp	r2, r3
 8019ae8:	d302      	bcc.n	8019af0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8019aea:	687b      	ldr	r3, [r7, #4]
 8019aec:	2b00      	cmp	r3, #0
 8019aee:	d116      	bne.n	8019b1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8019af0:	68fb      	ldr	r3, [r7, #12]
 8019af2:	2200      	movs	r2, #0
 8019af4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8019af6:	68fb      	ldr	r3, [r7, #12]
 8019af8:	2220      	movs	r2, #32
 8019afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8019afe:	68fb      	ldr	r3, [r7, #12]
 8019b00:	2200      	movs	r2, #0
 8019b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8019b06:	68fb      	ldr	r3, [r7, #12]
 8019b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019b0a:	f043 0220 	orr.w	r2, r3, #32
 8019b0e:	68fb      	ldr	r3, [r7, #12]
 8019b10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8019b12:	68fb      	ldr	r3, [r7, #12]
 8019b14:	2200      	movs	r2, #0
 8019b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8019b1a:	2301      	movs	r3, #1
 8019b1c:	e020      	b.n	8019b60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8019b1e:	68bb      	ldr	r3, [r7, #8]
 8019b20:	0c1b      	lsrs	r3, r3, #16
 8019b22:	b2db      	uxtb	r3, r3
 8019b24:	2b01      	cmp	r3, #1
 8019b26:	d10c      	bne.n	8019b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8019b28:	68fb      	ldr	r3, [r7, #12]
 8019b2a:	681b      	ldr	r3, [r3, #0]
 8019b2c:	695b      	ldr	r3, [r3, #20]
 8019b2e:	43da      	mvns	r2, r3
 8019b30:	68bb      	ldr	r3, [r7, #8]
 8019b32:	4013      	ands	r3, r2
 8019b34:	b29b      	uxth	r3, r3
 8019b36:	2b00      	cmp	r3, #0
 8019b38:	bf14      	ite	ne
 8019b3a:	2301      	movne	r3, #1
 8019b3c:	2300      	moveq	r3, #0
 8019b3e:	b2db      	uxtb	r3, r3
 8019b40:	e00b      	b.n	8019b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8019b42:	68fb      	ldr	r3, [r7, #12]
 8019b44:	681b      	ldr	r3, [r3, #0]
 8019b46:	699b      	ldr	r3, [r3, #24]
 8019b48:	43da      	mvns	r2, r3
 8019b4a:	68bb      	ldr	r3, [r7, #8]
 8019b4c:	4013      	ands	r3, r2
 8019b4e:	b29b      	uxth	r3, r3
 8019b50:	2b00      	cmp	r3, #0
 8019b52:	bf14      	ite	ne
 8019b54:	2301      	movne	r3, #1
 8019b56:	2300      	moveq	r3, #0
 8019b58:	b2db      	uxtb	r3, r3
 8019b5a:	2b00      	cmp	r3, #0
 8019b5c:	d18d      	bne.n	8019a7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8019b5e:	2300      	movs	r3, #0
}
 8019b60:	4618      	mov	r0, r3
 8019b62:	3710      	adds	r7, #16
 8019b64:	46bd      	mov	sp, r7
 8019b66:	bd80      	pop	{r7, pc}

08019b68 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8019b68:	b580      	push	{r7, lr}
 8019b6a:	b084      	sub	sp, #16
 8019b6c:	af00      	add	r7, sp, #0
 8019b6e:	60f8      	str	r0, [r7, #12]
 8019b70:	60b9      	str	r1, [r7, #8]
 8019b72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8019b74:	e02d      	b.n	8019bd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8019b76:	68f8      	ldr	r0, [r7, #12]
 8019b78:	f000 f900 	bl	8019d7c <I2C_IsAcknowledgeFailed>
 8019b7c:	4603      	mov	r3, r0
 8019b7e:	2b00      	cmp	r3, #0
 8019b80:	d001      	beq.n	8019b86 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8019b82:	2301      	movs	r3, #1
 8019b84:	e02d      	b.n	8019be2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8019b86:	68bb      	ldr	r3, [r7, #8]
 8019b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019b8c:	d021      	beq.n	8019bd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019b8e:	f7fc fbc1 	bl	8016314 <HAL_GetTick>
 8019b92:	4602      	mov	r2, r0
 8019b94:	687b      	ldr	r3, [r7, #4]
 8019b96:	1ad3      	subs	r3, r2, r3
 8019b98:	68ba      	ldr	r2, [r7, #8]
 8019b9a:	429a      	cmp	r2, r3
 8019b9c:	d302      	bcc.n	8019ba4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8019b9e:	68bb      	ldr	r3, [r7, #8]
 8019ba0:	2b00      	cmp	r3, #0
 8019ba2:	d116      	bne.n	8019bd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8019ba4:	68fb      	ldr	r3, [r7, #12]
 8019ba6:	2200      	movs	r2, #0
 8019ba8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8019baa:	68fb      	ldr	r3, [r7, #12]
 8019bac:	2220      	movs	r2, #32
 8019bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8019bb2:	68fb      	ldr	r3, [r7, #12]
 8019bb4:	2200      	movs	r2, #0
 8019bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8019bba:	68fb      	ldr	r3, [r7, #12]
 8019bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019bbe:	f043 0220 	orr.w	r2, r3, #32
 8019bc2:	68fb      	ldr	r3, [r7, #12]
 8019bc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8019bc6:	68fb      	ldr	r3, [r7, #12]
 8019bc8:	2200      	movs	r2, #0
 8019bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8019bce:	2301      	movs	r3, #1
 8019bd0:	e007      	b.n	8019be2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8019bd2:	68fb      	ldr	r3, [r7, #12]
 8019bd4:	681b      	ldr	r3, [r3, #0]
 8019bd6:	695b      	ldr	r3, [r3, #20]
 8019bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019bdc:	2b80      	cmp	r3, #128	; 0x80
 8019bde:	d1ca      	bne.n	8019b76 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8019be0:	2300      	movs	r3, #0
}
 8019be2:	4618      	mov	r0, r3
 8019be4:	3710      	adds	r7, #16
 8019be6:	46bd      	mov	sp, r7
 8019be8:	bd80      	pop	{r7, pc}

08019bea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8019bea:	b580      	push	{r7, lr}
 8019bec:	b084      	sub	sp, #16
 8019bee:	af00      	add	r7, sp, #0
 8019bf0:	60f8      	str	r0, [r7, #12]
 8019bf2:	60b9      	str	r1, [r7, #8]
 8019bf4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8019bf6:	e02d      	b.n	8019c54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8019bf8:	68f8      	ldr	r0, [r7, #12]
 8019bfa:	f000 f8bf 	bl	8019d7c <I2C_IsAcknowledgeFailed>
 8019bfe:	4603      	mov	r3, r0
 8019c00:	2b00      	cmp	r3, #0
 8019c02:	d001      	beq.n	8019c08 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8019c04:	2301      	movs	r3, #1
 8019c06:	e02d      	b.n	8019c64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8019c08:	68bb      	ldr	r3, [r7, #8]
 8019c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019c0e:	d021      	beq.n	8019c54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019c10:	f7fc fb80 	bl	8016314 <HAL_GetTick>
 8019c14:	4602      	mov	r2, r0
 8019c16:	687b      	ldr	r3, [r7, #4]
 8019c18:	1ad3      	subs	r3, r2, r3
 8019c1a:	68ba      	ldr	r2, [r7, #8]
 8019c1c:	429a      	cmp	r2, r3
 8019c1e:	d302      	bcc.n	8019c26 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8019c20:	68bb      	ldr	r3, [r7, #8]
 8019c22:	2b00      	cmp	r3, #0
 8019c24:	d116      	bne.n	8019c54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8019c26:	68fb      	ldr	r3, [r7, #12]
 8019c28:	2200      	movs	r2, #0
 8019c2a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8019c2c:	68fb      	ldr	r3, [r7, #12]
 8019c2e:	2220      	movs	r2, #32
 8019c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8019c34:	68fb      	ldr	r3, [r7, #12]
 8019c36:	2200      	movs	r2, #0
 8019c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8019c3c:	68fb      	ldr	r3, [r7, #12]
 8019c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019c40:	f043 0220 	orr.w	r2, r3, #32
 8019c44:	68fb      	ldr	r3, [r7, #12]
 8019c46:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8019c48:	68fb      	ldr	r3, [r7, #12]
 8019c4a:	2200      	movs	r2, #0
 8019c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8019c50:	2301      	movs	r3, #1
 8019c52:	e007      	b.n	8019c64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8019c54:	68fb      	ldr	r3, [r7, #12]
 8019c56:	681b      	ldr	r3, [r3, #0]
 8019c58:	695b      	ldr	r3, [r3, #20]
 8019c5a:	f003 0304 	and.w	r3, r3, #4
 8019c5e:	2b04      	cmp	r3, #4
 8019c60:	d1ca      	bne.n	8019bf8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8019c62:	2300      	movs	r3, #0
}
 8019c64:	4618      	mov	r0, r3
 8019c66:	3710      	adds	r7, #16
 8019c68:	46bd      	mov	sp, r7
 8019c6a:	bd80      	pop	{r7, pc}

08019c6c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8019c6c:	b480      	push	{r7}
 8019c6e:	b085      	sub	sp, #20
 8019c70:	af00      	add	r7, sp, #0
 8019c72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8019c74:	2300      	movs	r3, #0
 8019c76:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8019c78:	4b13      	ldr	r3, [pc, #76]	; (8019cc8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8019c7a:	681b      	ldr	r3, [r3, #0]
 8019c7c:	08db      	lsrs	r3, r3, #3
 8019c7e:	4a13      	ldr	r2, [pc, #76]	; (8019ccc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8019c80:	fba2 2303 	umull	r2, r3, r2, r3
 8019c84:	0a1a      	lsrs	r2, r3, #8
 8019c86:	4613      	mov	r3, r2
 8019c88:	009b      	lsls	r3, r3, #2
 8019c8a:	4413      	add	r3, r2
 8019c8c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8019c8e:	68fb      	ldr	r3, [r7, #12]
 8019c90:	3b01      	subs	r3, #1
 8019c92:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8019c94:	68fb      	ldr	r3, [r7, #12]
 8019c96:	2b00      	cmp	r3, #0
 8019c98:	d107      	bne.n	8019caa <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8019c9a:	687b      	ldr	r3, [r7, #4]
 8019c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019c9e:	f043 0220 	orr.w	r2, r3, #32
 8019ca2:	687b      	ldr	r3, [r7, #4]
 8019ca4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8019ca6:	2301      	movs	r3, #1
 8019ca8:	e008      	b.n	8019cbc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8019caa:	687b      	ldr	r3, [r7, #4]
 8019cac:	681b      	ldr	r3, [r3, #0]
 8019cae:	681b      	ldr	r3, [r3, #0]
 8019cb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019cb8:	d0e9      	beq.n	8019c8e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8019cba:	2300      	movs	r3, #0
}
 8019cbc:	4618      	mov	r0, r3
 8019cbe:	3714      	adds	r7, #20
 8019cc0:	46bd      	mov	sp, r7
 8019cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cc6:	4770      	bx	lr
 8019cc8:	20000184 	.word	0x20000184
 8019ccc:	14f8b589 	.word	0x14f8b589

08019cd0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8019cd0:	b580      	push	{r7, lr}
 8019cd2:	b084      	sub	sp, #16
 8019cd4:	af00      	add	r7, sp, #0
 8019cd6:	60f8      	str	r0, [r7, #12]
 8019cd8:	60b9      	str	r1, [r7, #8]
 8019cda:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8019cdc:	e042      	b.n	8019d64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8019cde:	68fb      	ldr	r3, [r7, #12]
 8019ce0:	681b      	ldr	r3, [r3, #0]
 8019ce2:	695b      	ldr	r3, [r3, #20]
 8019ce4:	f003 0310 	and.w	r3, r3, #16
 8019ce8:	2b10      	cmp	r3, #16
 8019cea:	d119      	bne.n	8019d20 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8019cec:	68fb      	ldr	r3, [r7, #12]
 8019cee:	681b      	ldr	r3, [r3, #0]
 8019cf0:	f06f 0210 	mvn.w	r2, #16
 8019cf4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8019cf6:	68fb      	ldr	r3, [r7, #12]
 8019cf8:	2200      	movs	r2, #0
 8019cfa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8019cfc:	68fb      	ldr	r3, [r7, #12]
 8019cfe:	2220      	movs	r2, #32
 8019d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8019d04:	68fb      	ldr	r3, [r7, #12]
 8019d06:	2200      	movs	r2, #0
 8019d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8019d0c:	68fb      	ldr	r3, [r7, #12]
 8019d0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8019d10:	68fb      	ldr	r3, [r7, #12]
 8019d12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8019d14:	68fb      	ldr	r3, [r7, #12]
 8019d16:	2200      	movs	r2, #0
 8019d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8019d1c:	2301      	movs	r3, #1
 8019d1e:	e029      	b.n	8019d74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019d20:	f7fc faf8 	bl	8016314 <HAL_GetTick>
 8019d24:	4602      	mov	r2, r0
 8019d26:	687b      	ldr	r3, [r7, #4]
 8019d28:	1ad3      	subs	r3, r2, r3
 8019d2a:	68ba      	ldr	r2, [r7, #8]
 8019d2c:	429a      	cmp	r2, r3
 8019d2e:	d302      	bcc.n	8019d36 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8019d30:	68bb      	ldr	r3, [r7, #8]
 8019d32:	2b00      	cmp	r3, #0
 8019d34:	d116      	bne.n	8019d64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8019d36:	68fb      	ldr	r3, [r7, #12]
 8019d38:	2200      	movs	r2, #0
 8019d3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8019d3c:	68fb      	ldr	r3, [r7, #12]
 8019d3e:	2220      	movs	r2, #32
 8019d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8019d44:	68fb      	ldr	r3, [r7, #12]
 8019d46:	2200      	movs	r2, #0
 8019d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8019d4c:	68fb      	ldr	r3, [r7, #12]
 8019d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019d50:	f043 0220 	orr.w	r2, r3, #32
 8019d54:	68fb      	ldr	r3, [r7, #12]
 8019d56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8019d58:	68fb      	ldr	r3, [r7, #12]
 8019d5a:	2200      	movs	r2, #0
 8019d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8019d60:	2301      	movs	r3, #1
 8019d62:	e007      	b.n	8019d74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8019d64:	68fb      	ldr	r3, [r7, #12]
 8019d66:	681b      	ldr	r3, [r3, #0]
 8019d68:	695b      	ldr	r3, [r3, #20]
 8019d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019d6e:	2b40      	cmp	r3, #64	; 0x40
 8019d70:	d1b5      	bne.n	8019cde <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8019d72:	2300      	movs	r3, #0
}
 8019d74:	4618      	mov	r0, r3
 8019d76:	3710      	adds	r7, #16
 8019d78:	46bd      	mov	sp, r7
 8019d7a:	bd80      	pop	{r7, pc}

08019d7c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8019d7c:	b480      	push	{r7}
 8019d7e:	b083      	sub	sp, #12
 8019d80:	af00      	add	r7, sp, #0
 8019d82:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8019d84:	687b      	ldr	r3, [r7, #4]
 8019d86:	681b      	ldr	r3, [r3, #0]
 8019d88:	695b      	ldr	r3, [r3, #20]
 8019d8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8019d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019d92:	d11b      	bne.n	8019dcc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019d94:	687b      	ldr	r3, [r7, #4]
 8019d96:	681b      	ldr	r3, [r3, #0]
 8019d98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8019d9c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8019d9e:	687b      	ldr	r3, [r7, #4]
 8019da0:	2200      	movs	r2, #0
 8019da2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8019da4:	687b      	ldr	r3, [r7, #4]
 8019da6:	2220      	movs	r2, #32
 8019da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8019dac:	687b      	ldr	r3, [r7, #4]
 8019dae:	2200      	movs	r2, #0
 8019db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8019db4:	687b      	ldr	r3, [r7, #4]
 8019db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019db8:	f043 0204 	orr.w	r2, r3, #4
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8019dc0:	687b      	ldr	r3, [r7, #4]
 8019dc2:	2200      	movs	r2, #0
 8019dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8019dc8:	2301      	movs	r3, #1
 8019dca:	e000      	b.n	8019dce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8019dcc:	2300      	movs	r3, #0
}
 8019dce:	4618      	mov	r0, r3
 8019dd0:	370c      	adds	r7, #12
 8019dd2:	46bd      	mov	sp, r7
 8019dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dd8:	4770      	bx	lr

08019dda <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8019dda:	b480      	push	{r7}
 8019ddc:	b083      	sub	sp, #12
 8019dde:	af00      	add	r7, sp, #0
 8019de0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8019de2:	687b      	ldr	r3, [r7, #4]
 8019de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019de6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8019dea:	d103      	bne.n	8019df4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8019dec:	687b      	ldr	r3, [r7, #4]
 8019dee:	2201      	movs	r2, #1
 8019df0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8019df2:	e007      	b.n	8019e04 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8019df4:	687b      	ldr	r3, [r7, #4]
 8019df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019df8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8019dfc:	d102      	bne.n	8019e04 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8019dfe:	687b      	ldr	r3, [r7, #4]
 8019e00:	2208      	movs	r2, #8
 8019e02:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8019e04:	bf00      	nop
 8019e06:	370c      	adds	r7, #12
 8019e08:	46bd      	mov	sp, r7
 8019e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e0e:	4770      	bx	lr

08019e10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8019e10:	b580      	push	{r7, lr}
 8019e12:	b086      	sub	sp, #24
 8019e14:	af00      	add	r7, sp, #0
 8019e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8019e18:	687b      	ldr	r3, [r7, #4]
 8019e1a:	2b00      	cmp	r3, #0
 8019e1c:	d101      	bne.n	8019e22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8019e1e:	2301      	movs	r3, #1
 8019e20:	e267      	b.n	801a2f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8019e22:	687b      	ldr	r3, [r7, #4]
 8019e24:	681b      	ldr	r3, [r3, #0]
 8019e26:	f003 0301 	and.w	r3, r3, #1
 8019e2a:	2b00      	cmp	r3, #0
 8019e2c:	d075      	beq.n	8019f1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8019e2e:	4b88      	ldr	r3, [pc, #544]	; (801a050 <HAL_RCC_OscConfig+0x240>)
 8019e30:	689b      	ldr	r3, [r3, #8]
 8019e32:	f003 030c 	and.w	r3, r3, #12
 8019e36:	2b04      	cmp	r3, #4
 8019e38:	d00c      	beq.n	8019e54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8019e3a:	4b85      	ldr	r3, [pc, #532]	; (801a050 <HAL_RCC_OscConfig+0x240>)
 8019e3c:	689b      	ldr	r3, [r3, #8]
 8019e3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8019e42:	2b08      	cmp	r3, #8
 8019e44:	d112      	bne.n	8019e6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8019e46:	4b82      	ldr	r3, [pc, #520]	; (801a050 <HAL_RCC_OscConfig+0x240>)
 8019e48:	685b      	ldr	r3, [r3, #4]
 8019e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8019e4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8019e52:	d10b      	bne.n	8019e6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8019e54:	4b7e      	ldr	r3, [pc, #504]	; (801a050 <HAL_RCC_OscConfig+0x240>)
 8019e56:	681b      	ldr	r3, [r3, #0]
 8019e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019e5c:	2b00      	cmp	r3, #0
 8019e5e:	d05b      	beq.n	8019f18 <HAL_RCC_OscConfig+0x108>
 8019e60:	687b      	ldr	r3, [r7, #4]
 8019e62:	685b      	ldr	r3, [r3, #4]
 8019e64:	2b00      	cmp	r3, #0
 8019e66:	d157      	bne.n	8019f18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8019e68:	2301      	movs	r3, #1
 8019e6a:	e242      	b.n	801a2f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8019e6c:	687b      	ldr	r3, [r7, #4]
 8019e6e:	685b      	ldr	r3, [r3, #4]
 8019e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019e74:	d106      	bne.n	8019e84 <HAL_RCC_OscConfig+0x74>
 8019e76:	4b76      	ldr	r3, [pc, #472]	; (801a050 <HAL_RCC_OscConfig+0x240>)
 8019e78:	681b      	ldr	r3, [r3, #0]
 8019e7a:	4a75      	ldr	r2, [pc, #468]	; (801a050 <HAL_RCC_OscConfig+0x240>)
 8019e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019e80:	6013      	str	r3, [r2, #0]
 8019e82:	e01d      	b.n	8019ec0 <HAL_RCC_OscConfig+0xb0>
 8019e84:	687b      	ldr	r3, [r7, #4]
 8019e86:	685b      	ldr	r3, [r3, #4]
 8019e88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8019e8c:	d10c      	bne.n	8019ea8 <HAL_RCC_OscConfig+0x98>
 8019e8e:	4b70      	ldr	r3, [pc, #448]	; (801a050 <HAL_RCC_OscConfig+0x240>)
 8019e90:	681b      	ldr	r3, [r3, #0]
 8019e92:	4a6f      	ldr	r2, [pc, #444]	; (801a050 <HAL_RCC_OscConfig+0x240>)
 8019e94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8019e98:	6013      	str	r3, [r2, #0]
 8019e9a:	4b6d      	ldr	r3, [pc, #436]	; (801a050 <HAL_RCC_OscConfig+0x240>)
 8019e9c:	681b      	ldr	r3, [r3, #0]
 8019e9e:	4a6c      	ldr	r2, [pc, #432]	; (801a050 <HAL_RCC_OscConfig+0x240>)
 8019ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019ea4:	6013      	str	r3, [r2, #0]
 8019ea6:	e00b      	b.n	8019ec0 <HAL_RCC_OscConfig+0xb0>
 8019ea8:	4b69      	ldr	r3, [pc, #420]	; (801a050 <HAL_RCC_OscConfig+0x240>)
 8019eaa:	681b      	ldr	r3, [r3, #0]
 8019eac:	4a68      	ldr	r2, [pc, #416]	; (801a050 <HAL_RCC_OscConfig+0x240>)
 8019eae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8019eb2:	6013      	str	r3, [r2, #0]
 8019eb4:	4b66      	ldr	r3, [pc, #408]	; (801a050 <HAL_RCC_OscConfig+0x240>)
 8019eb6:	681b      	ldr	r3, [r3, #0]
 8019eb8:	4a65      	ldr	r2, [pc, #404]	; (801a050 <HAL_RCC_OscConfig+0x240>)
 8019eba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8019ebe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8019ec0:	687b      	ldr	r3, [r7, #4]
 8019ec2:	685b      	ldr	r3, [r3, #4]
 8019ec4:	2b00      	cmp	r3, #0
 8019ec6:	d013      	beq.n	8019ef0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8019ec8:	f7fc fa24 	bl	8016314 <HAL_GetTick>
 8019ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8019ece:	e008      	b.n	8019ee2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8019ed0:	f7fc fa20 	bl	8016314 <HAL_GetTick>
 8019ed4:	4602      	mov	r2, r0
 8019ed6:	693b      	ldr	r3, [r7, #16]
 8019ed8:	1ad3      	subs	r3, r2, r3
 8019eda:	2b64      	cmp	r3, #100	; 0x64
 8019edc:	d901      	bls.n	8019ee2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8019ede:	2303      	movs	r3, #3
 8019ee0:	e207      	b.n	801a2f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8019ee2:	4b5b      	ldr	r3, [pc, #364]	; (801a050 <HAL_RCC_OscConfig+0x240>)
 8019ee4:	681b      	ldr	r3, [r3, #0]
 8019ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019eea:	2b00      	cmp	r3, #0
 8019eec:	d0f0      	beq.n	8019ed0 <HAL_RCC_OscConfig+0xc0>
 8019eee:	e014      	b.n	8019f1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8019ef0:	f7fc fa10 	bl	8016314 <HAL_GetTick>
 8019ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8019ef6:	e008      	b.n	8019f0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8019ef8:	f7fc fa0c 	bl	8016314 <HAL_GetTick>
 8019efc:	4602      	mov	r2, r0
 8019efe:	693b      	ldr	r3, [r7, #16]
 8019f00:	1ad3      	subs	r3, r2, r3
 8019f02:	2b64      	cmp	r3, #100	; 0x64
 8019f04:	d901      	bls.n	8019f0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8019f06:	2303      	movs	r3, #3
 8019f08:	e1f3      	b.n	801a2f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8019f0a:	4b51      	ldr	r3, [pc, #324]	; (801a050 <HAL_RCC_OscConfig+0x240>)
 8019f0c:	681b      	ldr	r3, [r3, #0]
 8019f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019f12:	2b00      	cmp	r3, #0
 8019f14:	d1f0      	bne.n	8019ef8 <HAL_RCC_OscConfig+0xe8>
 8019f16:	e000      	b.n	8019f1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8019f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8019f1a:	687b      	ldr	r3, [r7, #4]
 8019f1c:	681b      	ldr	r3, [r3, #0]
 8019f1e:	f003 0302 	and.w	r3, r3, #2
 8019f22:	2b00      	cmp	r3, #0
 8019f24:	d063      	beq.n	8019fee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8019f26:	4b4a      	ldr	r3, [pc, #296]	; (801a050 <HAL_RCC_OscConfig+0x240>)
 8019f28:	689b      	ldr	r3, [r3, #8]
 8019f2a:	f003 030c 	and.w	r3, r3, #12
 8019f2e:	2b00      	cmp	r3, #0
 8019f30:	d00b      	beq.n	8019f4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8019f32:	4b47      	ldr	r3, [pc, #284]	; (801a050 <HAL_RCC_OscConfig+0x240>)
 8019f34:	689b      	ldr	r3, [r3, #8]
 8019f36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8019f3a:	2b08      	cmp	r3, #8
 8019f3c:	d11c      	bne.n	8019f78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8019f3e:	4b44      	ldr	r3, [pc, #272]	; (801a050 <HAL_RCC_OscConfig+0x240>)
 8019f40:	685b      	ldr	r3, [r3, #4]
 8019f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8019f46:	2b00      	cmp	r3, #0
 8019f48:	d116      	bne.n	8019f78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8019f4a:	4b41      	ldr	r3, [pc, #260]	; (801a050 <HAL_RCC_OscConfig+0x240>)
 8019f4c:	681b      	ldr	r3, [r3, #0]
 8019f4e:	f003 0302 	and.w	r3, r3, #2
 8019f52:	2b00      	cmp	r3, #0
 8019f54:	d005      	beq.n	8019f62 <HAL_RCC_OscConfig+0x152>
 8019f56:	687b      	ldr	r3, [r7, #4]
 8019f58:	68db      	ldr	r3, [r3, #12]
 8019f5a:	2b01      	cmp	r3, #1
 8019f5c:	d001      	beq.n	8019f62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8019f5e:	2301      	movs	r3, #1
 8019f60:	e1c7      	b.n	801a2f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8019f62:	4b3b      	ldr	r3, [pc, #236]	; (801a050 <HAL_RCC_OscConfig+0x240>)
 8019f64:	681b      	ldr	r3, [r3, #0]
 8019f66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8019f6a:	687b      	ldr	r3, [r7, #4]
 8019f6c:	691b      	ldr	r3, [r3, #16]
 8019f6e:	00db      	lsls	r3, r3, #3
 8019f70:	4937      	ldr	r1, [pc, #220]	; (801a050 <HAL_RCC_OscConfig+0x240>)
 8019f72:	4313      	orrs	r3, r2
 8019f74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8019f76:	e03a      	b.n	8019fee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8019f78:	687b      	ldr	r3, [r7, #4]
 8019f7a:	68db      	ldr	r3, [r3, #12]
 8019f7c:	2b00      	cmp	r3, #0
 8019f7e:	d020      	beq.n	8019fc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8019f80:	4b34      	ldr	r3, [pc, #208]	; (801a054 <HAL_RCC_OscConfig+0x244>)
 8019f82:	2201      	movs	r2, #1
 8019f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8019f86:	f7fc f9c5 	bl	8016314 <HAL_GetTick>
 8019f8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8019f8c:	e008      	b.n	8019fa0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8019f8e:	f7fc f9c1 	bl	8016314 <HAL_GetTick>
 8019f92:	4602      	mov	r2, r0
 8019f94:	693b      	ldr	r3, [r7, #16]
 8019f96:	1ad3      	subs	r3, r2, r3
 8019f98:	2b02      	cmp	r3, #2
 8019f9a:	d901      	bls.n	8019fa0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8019f9c:	2303      	movs	r3, #3
 8019f9e:	e1a8      	b.n	801a2f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8019fa0:	4b2b      	ldr	r3, [pc, #172]	; (801a050 <HAL_RCC_OscConfig+0x240>)
 8019fa2:	681b      	ldr	r3, [r3, #0]
 8019fa4:	f003 0302 	and.w	r3, r3, #2
 8019fa8:	2b00      	cmp	r3, #0
 8019faa:	d0f0      	beq.n	8019f8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8019fac:	4b28      	ldr	r3, [pc, #160]	; (801a050 <HAL_RCC_OscConfig+0x240>)
 8019fae:	681b      	ldr	r3, [r3, #0]
 8019fb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8019fb4:	687b      	ldr	r3, [r7, #4]
 8019fb6:	691b      	ldr	r3, [r3, #16]
 8019fb8:	00db      	lsls	r3, r3, #3
 8019fba:	4925      	ldr	r1, [pc, #148]	; (801a050 <HAL_RCC_OscConfig+0x240>)
 8019fbc:	4313      	orrs	r3, r2
 8019fbe:	600b      	str	r3, [r1, #0]
 8019fc0:	e015      	b.n	8019fee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8019fc2:	4b24      	ldr	r3, [pc, #144]	; (801a054 <HAL_RCC_OscConfig+0x244>)
 8019fc4:	2200      	movs	r2, #0
 8019fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8019fc8:	f7fc f9a4 	bl	8016314 <HAL_GetTick>
 8019fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8019fce:	e008      	b.n	8019fe2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8019fd0:	f7fc f9a0 	bl	8016314 <HAL_GetTick>
 8019fd4:	4602      	mov	r2, r0
 8019fd6:	693b      	ldr	r3, [r7, #16]
 8019fd8:	1ad3      	subs	r3, r2, r3
 8019fda:	2b02      	cmp	r3, #2
 8019fdc:	d901      	bls.n	8019fe2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8019fde:	2303      	movs	r3, #3
 8019fe0:	e187      	b.n	801a2f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8019fe2:	4b1b      	ldr	r3, [pc, #108]	; (801a050 <HAL_RCC_OscConfig+0x240>)
 8019fe4:	681b      	ldr	r3, [r3, #0]
 8019fe6:	f003 0302 	and.w	r3, r3, #2
 8019fea:	2b00      	cmp	r3, #0
 8019fec:	d1f0      	bne.n	8019fd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8019fee:	687b      	ldr	r3, [r7, #4]
 8019ff0:	681b      	ldr	r3, [r3, #0]
 8019ff2:	f003 0308 	and.w	r3, r3, #8
 8019ff6:	2b00      	cmp	r3, #0
 8019ff8:	d036      	beq.n	801a068 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8019ffa:	687b      	ldr	r3, [r7, #4]
 8019ffc:	695b      	ldr	r3, [r3, #20]
 8019ffe:	2b00      	cmp	r3, #0
 801a000:	d016      	beq.n	801a030 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801a002:	4b15      	ldr	r3, [pc, #84]	; (801a058 <HAL_RCC_OscConfig+0x248>)
 801a004:	2201      	movs	r2, #1
 801a006:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801a008:	f7fc f984 	bl	8016314 <HAL_GetTick>
 801a00c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801a00e:	e008      	b.n	801a022 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801a010:	f7fc f980 	bl	8016314 <HAL_GetTick>
 801a014:	4602      	mov	r2, r0
 801a016:	693b      	ldr	r3, [r7, #16]
 801a018:	1ad3      	subs	r3, r2, r3
 801a01a:	2b02      	cmp	r3, #2
 801a01c:	d901      	bls.n	801a022 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801a01e:	2303      	movs	r3, #3
 801a020:	e167      	b.n	801a2f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801a022:	4b0b      	ldr	r3, [pc, #44]	; (801a050 <HAL_RCC_OscConfig+0x240>)
 801a024:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a026:	f003 0302 	and.w	r3, r3, #2
 801a02a:	2b00      	cmp	r3, #0
 801a02c:	d0f0      	beq.n	801a010 <HAL_RCC_OscConfig+0x200>
 801a02e:	e01b      	b.n	801a068 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801a030:	4b09      	ldr	r3, [pc, #36]	; (801a058 <HAL_RCC_OscConfig+0x248>)
 801a032:	2200      	movs	r2, #0
 801a034:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801a036:	f7fc f96d 	bl	8016314 <HAL_GetTick>
 801a03a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801a03c:	e00e      	b.n	801a05c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801a03e:	f7fc f969 	bl	8016314 <HAL_GetTick>
 801a042:	4602      	mov	r2, r0
 801a044:	693b      	ldr	r3, [r7, #16]
 801a046:	1ad3      	subs	r3, r2, r3
 801a048:	2b02      	cmp	r3, #2
 801a04a:	d907      	bls.n	801a05c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 801a04c:	2303      	movs	r3, #3
 801a04e:	e150      	b.n	801a2f2 <HAL_RCC_OscConfig+0x4e2>
 801a050:	40023800 	.word	0x40023800
 801a054:	42470000 	.word	0x42470000
 801a058:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801a05c:	4b88      	ldr	r3, [pc, #544]	; (801a280 <HAL_RCC_OscConfig+0x470>)
 801a05e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a060:	f003 0302 	and.w	r3, r3, #2
 801a064:	2b00      	cmp	r3, #0
 801a066:	d1ea      	bne.n	801a03e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801a068:	687b      	ldr	r3, [r7, #4]
 801a06a:	681b      	ldr	r3, [r3, #0]
 801a06c:	f003 0304 	and.w	r3, r3, #4
 801a070:	2b00      	cmp	r3, #0
 801a072:	f000 8097 	beq.w	801a1a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 801a076:	2300      	movs	r3, #0
 801a078:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801a07a:	4b81      	ldr	r3, [pc, #516]	; (801a280 <HAL_RCC_OscConfig+0x470>)
 801a07c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a07e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801a082:	2b00      	cmp	r3, #0
 801a084:	d10f      	bne.n	801a0a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801a086:	2300      	movs	r3, #0
 801a088:	60bb      	str	r3, [r7, #8]
 801a08a:	4b7d      	ldr	r3, [pc, #500]	; (801a280 <HAL_RCC_OscConfig+0x470>)
 801a08c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a08e:	4a7c      	ldr	r2, [pc, #496]	; (801a280 <HAL_RCC_OscConfig+0x470>)
 801a090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801a094:	6413      	str	r3, [r2, #64]	; 0x40
 801a096:	4b7a      	ldr	r3, [pc, #488]	; (801a280 <HAL_RCC_OscConfig+0x470>)
 801a098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a09a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801a09e:	60bb      	str	r3, [r7, #8]
 801a0a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801a0a2:	2301      	movs	r3, #1
 801a0a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801a0a6:	4b77      	ldr	r3, [pc, #476]	; (801a284 <HAL_RCC_OscConfig+0x474>)
 801a0a8:	681b      	ldr	r3, [r3, #0]
 801a0aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a0ae:	2b00      	cmp	r3, #0
 801a0b0:	d118      	bne.n	801a0e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801a0b2:	4b74      	ldr	r3, [pc, #464]	; (801a284 <HAL_RCC_OscConfig+0x474>)
 801a0b4:	681b      	ldr	r3, [r3, #0]
 801a0b6:	4a73      	ldr	r2, [pc, #460]	; (801a284 <HAL_RCC_OscConfig+0x474>)
 801a0b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801a0bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801a0be:	f7fc f929 	bl	8016314 <HAL_GetTick>
 801a0c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801a0c4:	e008      	b.n	801a0d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801a0c6:	f7fc f925 	bl	8016314 <HAL_GetTick>
 801a0ca:	4602      	mov	r2, r0
 801a0cc:	693b      	ldr	r3, [r7, #16]
 801a0ce:	1ad3      	subs	r3, r2, r3
 801a0d0:	2b02      	cmp	r3, #2
 801a0d2:	d901      	bls.n	801a0d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 801a0d4:	2303      	movs	r3, #3
 801a0d6:	e10c      	b.n	801a2f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801a0d8:	4b6a      	ldr	r3, [pc, #424]	; (801a284 <HAL_RCC_OscConfig+0x474>)
 801a0da:	681b      	ldr	r3, [r3, #0]
 801a0dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a0e0:	2b00      	cmp	r3, #0
 801a0e2:	d0f0      	beq.n	801a0c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801a0e4:	687b      	ldr	r3, [r7, #4]
 801a0e6:	689b      	ldr	r3, [r3, #8]
 801a0e8:	2b01      	cmp	r3, #1
 801a0ea:	d106      	bne.n	801a0fa <HAL_RCC_OscConfig+0x2ea>
 801a0ec:	4b64      	ldr	r3, [pc, #400]	; (801a280 <HAL_RCC_OscConfig+0x470>)
 801a0ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a0f0:	4a63      	ldr	r2, [pc, #396]	; (801a280 <HAL_RCC_OscConfig+0x470>)
 801a0f2:	f043 0301 	orr.w	r3, r3, #1
 801a0f6:	6713      	str	r3, [r2, #112]	; 0x70
 801a0f8:	e01c      	b.n	801a134 <HAL_RCC_OscConfig+0x324>
 801a0fa:	687b      	ldr	r3, [r7, #4]
 801a0fc:	689b      	ldr	r3, [r3, #8]
 801a0fe:	2b05      	cmp	r3, #5
 801a100:	d10c      	bne.n	801a11c <HAL_RCC_OscConfig+0x30c>
 801a102:	4b5f      	ldr	r3, [pc, #380]	; (801a280 <HAL_RCC_OscConfig+0x470>)
 801a104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a106:	4a5e      	ldr	r2, [pc, #376]	; (801a280 <HAL_RCC_OscConfig+0x470>)
 801a108:	f043 0304 	orr.w	r3, r3, #4
 801a10c:	6713      	str	r3, [r2, #112]	; 0x70
 801a10e:	4b5c      	ldr	r3, [pc, #368]	; (801a280 <HAL_RCC_OscConfig+0x470>)
 801a110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a112:	4a5b      	ldr	r2, [pc, #364]	; (801a280 <HAL_RCC_OscConfig+0x470>)
 801a114:	f043 0301 	orr.w	r3, r3, #1
 801a118:	6713      	str	r3, [r2, #112]	; 0x70
 801a11a:	e00b      	b.n	801a134 <HAL_RCC_OscConfig+0x324>
 801a11c:	4b58      	ldr	r3, [pc, #352]	; (801a280 <HAL_RCC_OscConfig+0x470>)
 801a11e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a120:	4a57      	ldr	r2, [pc, #348]	; (801a280 <HAL_RCC_OscConfig+0x470>)
 801a122:	f023 0301 	bic.w	r3, r3, #1
 801a126:	6713      	str	r3, [r2, #112]	; 0x70
 801a128:	4b55      	ldr	r3, [pc, #340]	; (801a280 <HAL_RCC_OscConfig+0x470>)
 801a12a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a12c:	4a54      	ldr	r2, [pc, #336]	; (801a280 <HAL_RCC_OscConfig+0x470>)
 801a12e:	f023 0304 	bic.w	r3, r3, #4
 801a132:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801a134:	687b      	ldr	r3, [r7, #4]
 801a136:	689b      	ldr	r3, [r3, #8]
 801a138:	2b00      	cmp	r3, #0
 801a13a:	d015      	beq.n	801a168 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801a13c:	f7fc f8ea 	bl	8016314 <HAL_GetTick>
 801a140:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801a142:	e00a      	b.n	801a15a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801a144:	f7fc f8e6 	bl	8016314 <HAL_GetTick>
 801a148:	4602      	mov	r2, r0
 801a14a:	693b      	ldr	r3, [r7, #16]
 801a14c:	1ad3      	subs	r3, r2, r3
 801a14e:	f241 3288 	movw	r2, #5000	; 0x1388
 801a152:	4293      	cmp	r3, r2
 801a154:	d901      	bls.n	801a15a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 801a156:	2303      	movs	r3, #3
 801a158:	e0cb      	b.n	801a2f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801a15a:	4b49      	ldr	r3, [pc, #292]	; (801a280 <HAL_RCC_OscConfig+0x470>)
 801a15c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a15e:	f003 0302 	and.w	r3, r3, #2
 801a162:	2b00      	cmp	r3, #0
 801a164:	d0ee      	beq.n	801a144 <HAL_RCC_OscConfig+0x334>
 801a166:	e014      	b.n	801a192 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801a168:	f7fc f8d4 	bl	8016314 <HAL_GetTick>
 801a16c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801a16e:	e00a      	b.n	801a186 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801a170:	f7fc f8d0 	bl	8016314 <HAL_GetTick>
 801a174:	4602      	mov	r2, r0
 801a176:	693b      	ldr	r3, [r7, #16]
 801a178:	1ad3      	subs	r3, r2, r3
 801a17a:	f241 3288 	movw	r2, #5000	; 0x1388
 801a17e:	4293      	cmp	r3, r2
 801a180:	d901      	bls.n	801a186 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 801a182:	2303      	movs	r3, #3
 801a184:	e0b5      	b.n	801a2f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801a186:	4b3e      	ldr	r3, [pc, #248]	; (801a280 <HAL_RCC_OscConfig+0x470>)
 801a188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a18a:	f003 0302 	and.w	r3, r3, #2
 801a18e:	2b00      	cmp	r3, #0
 801a190:	d1ee      	bne.n	801a170 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801a192:	7dfb      	ldrb	r3, [r7, #23]
 801a194:	2b01      	cmp	r3, #1
 801a196:	d105      	bne.n	801a1a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801a198:	4b39      	ldr	r3, [pc, #228]	; (801a280 <HAL_RCC_OscConfig+0x470>)
 801a19a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a19c:	4a38      	ldr	r2, [pc, #224]	; (801a280 <HAL_RCC_OscConfig+0x470>)
 801a19e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801a1a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801a1a4:	687b      	ldr	r3, [r7, #4]
 801a1a6:	699b      	ldr	r3, [r3, #24]
 801a1a8:	2b00      	cmp	r3, #0
 801a1aa:	f000 80a1 	beq.w	801a2f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801a1ae:	4b34      	ldr	r3, [pc, #208]	; (801a280 <HAL_RCC_OscConfig+0x470>)
 801a1b0:	689b      	ldr	r3, [r3, #8]
 801a1b2:	f003 030c 	and.w	r3, r3, #12
 801a1b6:	2b08      	cmp	r3, #8
 801a1b8:	d05c      	beq.n	801a274 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801a1ba:	687b      	ldr	r3, [r7, #4]
 801a1bc:	699b      	ldr	r3, [r3, #24]
 801a1be:	2b02      	cmp	r3, #2
 801a1c0:	d141      	bne.n	801a246 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801a1c2:	4b31      	ldr	r3, [pc, #196]	; (801a288 <HAL_RCC_OscConfig+0x478>)
 801a1c4:	2200      	movs	r2, #0
 801a1c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a1c8:	f7fc f8a4 	bl	8016314 <HAL_GetTick>
 801a1cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801a1ce:	e008      	b.n	801a1e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801a1d0:	f7fc f8a0 	bl	8016314 <HAL_GetTick>
 801a1d4:	4602      	mov	r2, r0
 801a1d6:	693b      	ldr	r3, [r7, #16]
 801a1d8:	1ad3      	subs	r3, r2, r3
 801a1da:	2b02      	cmp	r3, #2
 801a1dc:	d901      	bls.n	801a1e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 801a1de:	2303      	movs	r3, #3
 801a1e0:	e087      	b.n	801a2f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801a1e2:	4b27      	ldr	r3, [pc, #156]	; (801a280 <HAL_RCC_OscConfig+0x470>)
 801a1e4:	681b      	ldr	r3, [r3, #0]
 801a1e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a1ea:	2b00      	cmp	r3, #0
 801a1ec:	d1f0      	bne.n	801a1d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801a1ee:	687b      	ldr	r3, [r7, #4]
 801a1f0:	69da      	ldr	r2, [r3, #28]
 801a1f2:	687b      	ldr	r3, [r7, #4]
 801a1f4:	6a1b      	ldr	r3, [r3, #32]
 801a1f6:	431a      	orrs	r2, r3
 801a1f8:	687b      	ldr	r3, [r7, #4]
 801a1fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a1fc:	019b      	lsls	r3, r3, #6
 801a1fe:	431a      	orrs	r2, r3
 801a200:	687b      	ldr	r3, [r7, #4]
 801a202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a204:	085b      	lsrs	r3, r3, #1
 801a206:	3b01      	subs	r3, #1
 801a208:	041b      	lsls	r3, r3, #16
 801a20a:	431a      	orrs	r2, r3
 801a20c:	687b      	ldr	r3, [r7, #4]
 801a20e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a210:	061b      	lsls	r3, r3, #24
 801a212:	491b      	ldr	r1, [pc, #108]	; (801a280 <HAL_RCC_OscConfig+0x470>)
 801a214:	4313      	orrs	r3, r2
 801a216:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801a218:	4b1b      	ldr	r3, [pc, #108]	; (801a288 <HAL_RCC_OscConfig+0x478>)
 801a21a:	2201      	movs	r2, #1
 801a21c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a21e:	f7fc f879 	bl	8016314 <HAL_GetTick>
 801a222:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801a224:	e008      	b.n	801a238 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801a226:	f7fc f875 	bl	8016314 <HAL_GetTick>
 801a22a:	4602      	mov	r2, r0
 801a22c:	693b      	ldr	r3, [r7, #16]
 801a22e:	1ad3      	subs	r3, r2, r3
 801a230:	2b02      	cmp	r3, #2
 801a232:	d901      	bls.n	801a238 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 801a234:	2303      	movs	r3, #3
 801a236:	e05c      	b.n	801a2f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801a238:	4b11      	ldr	r3, [pc, #68]	; (801a280 <HAL_RCC_OscConfig+0x470>)
 801a23a:	681b      	ldr	r3, [r3, #0]
 801a23c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a240:	2b00      	cmp	r3, #0
 801a242:	d0f0      	beq.n	801a226 <HAL_RCC_OscConfig+0x416>
 801a244:	e054      	b.n	801a2f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801a246:	4b10      	ldr	r3, [pc, #64]	; (801a288 <HAL_RCC_OscConfig+0x478>)
 801a248:	2200      	movs	r2, #0
 801a24a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a24c:	f7fc f862 	bl	8016314 <HAL_GetTick>
 801a250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801a252:	e008      	b.n	801a266 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801a254:	f7fc f85e 	bl	8016314 <HAL_GetTick>
 801a258:	4602      	mov	r2, r0
 801a25a:	693b      	ldr	r3, [r7, #16]
 801a25c:	1ad3      	subs	r3, r2, r3
 801a25e:	2b02      	cmp	r3, #2
 801a260:	d901      	bls.n	801a266 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 801a262:	2303      	movs	r3, #3
 801a264:	e045      	b.n	801a2f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801a266:	4b06      	ldr	r3, [pc, #24]	; (801a280 <HAL_RCC_OscConfig+0x470>)
 801a268:	681b      	ldr	r3, [r3, #0]
 801a26a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a26e:	2b00      	cmp	r3, #0
 801a270:	d1f0      	bne.n	801a254 <HAL_RCC_OscConfig+0x444>
 801a272:	e03d      	b.n	801a2f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801a274:	687b      	ldr	r3, [r7, #4]
 801a276:	699b      	ldr	r3, [r3, #24]
 801a278:	2b01      	cmp	r3, #1
 801a27a:	d107      	bne.n	801a28c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 801a27c:	2301      	movs	r3, #1
 801a27e:	e038      	b.n	801a2f2 <HAL_RCC_OscConfig+0x4e2>
 801a280:	40023800 	.word	0x40023800
 801a284:	40007000 	.word	0x40007000
 801a288:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801a28c:	4b1b      	ldr	r3, [pc, #108]	; (801a2fc <HAL_RCC_OscConfig+0x4ec>)
 801a28e:	685b      	ldr	r3, [r3, #4]
 801a290:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801a292:	687b      	ldr	r3, [r7, #4]
 801a294:	699b      	ldr	r3, [r3, #24]
 801a296:	2b01      	cmp	r3, #1
 801a298:	d028      	beq.n	801a2ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801a29a:	68fb      	ldr	r3, [r7, #12]
 801a29c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801a2a0:	687b      	ldr	r3, [r7, #4]
 801a2a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801a2a4:	429a      	cmp	r2, r3
 801a2a6:	d121      	bne.n	801a2ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801a2a8:	68fb      	ldr	r3, [r7, #12]
 801a2aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801a2ae:	687b      	ldr	r3, [r7, #4]
 801a2b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801a2b2:	429a      	cmp	r2, r3
 801a2b4:	d11a      	bne.n	801a2ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801a2b6:	68fa      	ldr	r2, [r7, #12]
 801a2b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801a2bc:	4013      	ands	r3, r2
 801a2be:	687a      	ldr	r2, [r7, #4]
 801a2c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801a2c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801a2c4:	4293      	cmp	r3, r2
 801a2c6:	d111      	bne.n	801a2ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801a2c8:	68fb      	ldr	r3, [r7, #12]
 801a2ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801a2ce:	687b      	ldr	r3, [r7, #4]
 801a2d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a2d2:	085b      	lsrs	r3, r3, #1
 801a2d4:	3b01      	subs	r3, #1
 801a2d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801a2d8:	429a      	cmp	r2, r3
 801a2da:	d107      	bne.n	801a2ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 801a2dc:	68fb      	ldr	r3, [r7, #12]
 801a2de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801a2e2:	687b      	ldr	r3, [r7, #4]
 801a2e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a2e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801a2e8:	429a      	cmp	r2, r3
 801a2ea:	d001      	beq.n	801a2f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 801a2ec:	2301      	movs	r3, #1
 801a2ee:	e000      	b.n	801a2f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 801a2f0:	2300      	movs	r3, #0
}
 801a2f2:	4618      	mov	r0, r3
 801a2f4:	3718      	adds	r7, #24
 801a2f6:	46bd      	mov	sp, r7
 801a2f8:	bd80      	pop	{r7, pc}
 801a2fa:	bf00      	nop
 801a2fc:	40023800 	.word	0x40023800

0801a300 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801a300:	b580      	push	{r7, lr}
 801a302:	b084      	sub	sp, #16
 801a304:	af00      	add	r7, sp, #0
 801a306:	6078      	str	r0, [r7, #4]
 801a308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801a30a:	687b      	ldr	r3, [r7, #4]
 801a30c:	2b00      	cmp	r3, #0
 801a30e:	d101      	bne.n	801a314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801a310:	2301      	movs	r3, #1
 801a312:	e0cc      	b.n	801a4ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801a314:	4b68      	ldr	r3, [pc, #416]	; (801a4b8 <HAL_RCC_ClockConfig+0x1b8>)
 801a316:	681b      	ldr	r3, [r3, #0]
 801a318:	f003 0307 	and.w	r3, r3, #7
 801a31c:	683a      	ldr	r2, [r7, #0]
 801a31e:	429a      	cmp	r2, r3
 801a320:	d90c      	bls.n	801a33c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801a322:	4b65      	ldr	r3, [pc, #404]	; (801a4b8 <HAL_RCC_ClockConfig+0x1b8>)
 801a324:	683a      	ldr	r2, [r7, #0]
 801a326:	b2d2      	uxtb	r2, r2
 801a328:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801a32a:	4b63      	ldr	r3, [pc, #396]	; (801a4b8 <HAL_RCC_ClockConfig+0x1b8>)
 801a32c:	681b      	ldr	r3, [r3, #0]
 801a32e:	f003 0307 	and.w	r3, r3, #7
 801a332:	683a      	ldr	r2, [r7, #0]
 801a334:	429a      	cmp	r2, r3
 801a336:	d001      	beq.n	801a33c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 801a338:	2301      	movs	r3, #1
 801a33a:	e0b8      	b.n	801a4ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801a33c:	687b      	ldr	r3, [r7, #4]
 801a33e:	681b      	ldr	r3, [r3, #0]
 801a340:	f003 0302 	and.w	r3, r3, #2
 801a344:	2b00      	cmp	r3, #0
 801a346:	d020      	beq.n	801a38a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801a348:	687b      	ldr	r3, [r7, #4]
 801a34a:	681b      	ldr	r3, [r3, #0]
 801a34c:	f003 0304 	and.w	r3, r3, #4
 801a350:	2b00      	cmp	r3, #0
 801a352:	d005      	beq.n	801a360 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801a354:	4b59      	ldr	r3, [pc, #356]	; (801a4bc <HAL_RCC_ClockConfig+0x1bc>)
 801a356:	689b      	ldr	r3, [r3, #8]
 801a358:	4a58      	ldr	r2, [pc, #352]	; (801a4bc <HAL_RCC_ClockConfig+0x1bc>)
 801a35a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801a35e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801a360:	687b      	ldr	r3, [r7, #4]
 801a362:	681b      	ldr	r3, [r3, #0]
 801a364:	f003 0308 	and.w	r3, r3, #8
 801a368:	2b00      	cmp	r3, #0
 801a36a:	d005      	beq.n	801a378 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801a36c:	4b53      	ldr	r3, [pc, #332]	; (801a4bc <HAL_RCC_ClockConfig+0x1bc>)
 801a36e:	689b      	ldr	r3, [r3, #8]
 801a370:	4a52      	ldr	r2, [pc, #328]	; (801a4bc <HAL_RCC_ClockConfig+0x1bc>)
 801a372:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801a376:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801a378:	4b50      	ldr	r3, [pc, #320]	; (801a4bc <HAL_RCC_ClockConfig+0x1bc>)
 801a37a:	689b      	ldr	r3, [r3, #8]
 801a37c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801a380:	687b      	ldr	r3, [r7, #4]
 801a382:	689b      	ldr	r3, [r3, #8]
 801a384:	494d      	ldr	r1, [pc, #308]	; (801a4bc <HAL_RCC_ClockConfig+0x1bc>)
 801a386:	4313      	orrs	r3, r2
 801a388:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801a38a:	687b      	ldr	r3, [r7, #4]
 801a38c:	681b      	ldr	r3, [r3, #0]
 801a38e:	f003 0301 	and.w	r3, r3, #1
 801a392:	2b00      	cmp	r3, #0
 801a394:	d044      	beq.n	801a420 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801a396:	687b      	ldr	r3, [r7, #4]
 801a398:	685b      	ldr	r3, [r3, #4]
 801a39a:	2b01      	cmp	r3, #1
 801a39c:	d107      	bne.n	801a3ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801a39e:	4b47      	ldr	r3, [pc, #284]	; (801a4bc <HAL_RCC_ClockConfig+0x1bc>)
 801a3a0:	681b      	ldr	r3, [r3, #0]
 801a3a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a3a6:	2b00      	cmp	r3, #0
 801a3a8:	d119      	bne.n	801a3de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801a3aa:	2301      	movs	r3, #1
 801a3ac:	e07f      	b.n	801a4ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801a3ae:	687b      	ldr	r3, [r7, #4]
 801a3b0:	685b      	ldr	r3, [r3, #4]
 801a3b2:	2b02      	cmp	r3, #2
 801a3b4:	d003      	beq.n	801a3be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801a3b6:	687b      	ldr	r3, [r7, #4]
 801a3b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801a3ba:	2b03      	cmp	r3, #3
 801a3bc:	d107      	bne.n	801a3ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801a3be:	4b3f      	ldr	r3, [pc, #252]	; (801a4bc <HAL_RCC_ClockConfig+0x1bc>)
 801a3c0:	681b      	ldr	r3, [r3, #0]
 801a3c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a3c6:	2b00      	cmp	r3, #0
 801a3c8:	d109      	bne.n	801a3de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801a3ca:	2301      	movs	r3, #1
 801a3cc:	e06f      	b.n	801a4ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801a3ce:	4b3b      	ldr	r3, [pc, #236]	; (801a4bc <HAL_RCC_ClockConfig+0x1bc>)
 801a3d0:	681b      	ldr	r3, [r3, #0]
 801a3d2:	f003 0302 	and.w	r3, r3, #2
 801a3d6:	2b00      	cmp	r3, #0
 801a3d8:	d101      	bne.n	801a3de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801a3da:	2301      	movs	r3, #1
 801a3dc:	e067      	b.n	801a4ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801a3de:	4b37      	ldr	r3, [pc, #220]	; (801a4bc <HAL_RCC_ClockConfig+0x1bc>)
 801a3e0:	689b      	ldr	r3, [r3, #8]
 801a3e2:	f023 0203 	bic.w	r2, r3, #3
 801a3e6:	687b      	ldr	r3, [r7, #4]
 801a3e8:	685b      	ldr	r3, [r3, #4]
 801a3ea:	4934      	ldr	r1, [pc, #208]	; (801a4bc <HAL_RCC_ClockConfig+0x1bc>)
 801a3ec:	4313      	orrs	r3, r2
 801a3ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801a3f0:	f7fb ff90 	bl	8016314 <HAL_GetTick>
 801a3f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801a3f6:	e00a      	b.n	801a40e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801a3f8:	f7fb ff8c 	bl	8016314 <HAL_GetTick>
 801a3fc:	4602      	mov	r2, r0
 801a3fe:	68fb      	ldr	r3, [r7, #12]
 801a400:	1ad3      	subs	r3, r2, r3
 801a402:	f241 3288 	movw	r2, #5000	; 0x1388
 801a406:	4293      	cmp	r3, r2
 801a408:	d901      	bls.n	801a40e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801a40a:	2303      	movs	r3, #3
 801a40c:	e04f      	b.n	801a4ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801a40e:	4b2b      	ldr	r3, [pc, #172]	; (801a4bc <HAL_RCC_ClockConfig+0x1bc>)
 801a410:	689b      	ldr	r3, [r3, #8]
 801a412:	f003 020c 	and.w	r2, r3, #12
 801a416:	687b      	ldr	r3, [r7, #4]
 801a418:	685b      	ldr	r3, [r3, #4]
 801a41a:	009b      	lsls	r3, r3, #2
 801a41c:	429a      	cmp	r2, r3
 801a41e:	d1eb      	bne.n	801a3f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801a420:	4b25      	ldr	r3, [pc, #148]	; (801a4b8 <HAL_RCC_ClockConfig+0x1b8>)
 801a422:	681b      	ldr	r3, [r3, #0]
 801a424:	f003 0307 	and.w	r3, r3, #7
 801a428:	683a      	ldr	r2, [r7, #0]
 801a42a:	429a      	cmp	r2, r3
 801a42c:	d20c      	bcs.n	801a448 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801a42e:	4b22      	ldr	r3, [pc, #136]	; (801a4b8 <HAL_RCC_ClockConfig+0x1b8>)
 801a430:	683a      	ldr	r2, [r7, #0]
 801a432:	b2d2      	uxtb	r2, r2
 801a434:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801a436:	4b20      	ldr	r3, [pc, #128]	; (801a4b8 <HAL_RCC_ClockConfig+0x1b8>)
 801a438:	681b      	ldr	r3, [r3, #0]
 801a43a:	f003 0307 	and.w	r3, r3, #7
 801a43e:	683a      	ldr	r2, [r7, #0]
 801a440:	429a      	cmp	r2, r3
 801a442:	d001      	beq.n	801a448 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801a444:	2301      	movs	r3, #1
 801a446:	e032      	b.n	801a4ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801a448:	687b      	ldr	r3, [r7, #4]
 801a44a:	681b      	ldr	r3, [r3, #0]
 801a44c:	f003 0304 	and.w	r3, r3, #4
 801a450:	2b00      	cmp	r3, #0
 801a452:	d008      	beq.n	801a466 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801a454:	4b19      	ldr	r3, [pc, #100]	; (801a4bc <HAL_RCC_ClockConfig+0x1bc>)
 801a456:	689b      	ldr	r3, [r3, #8]
 801a458:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801a45c:	687b      	ldr	r3, [r7, #4]
 801a45e:	68db      	ldr	r3, [r3, #12]
 801a460:	4916      	ldr	r1, [pc, #88]	; (801a4bc <HAL_RCC_ClockConfig+0x1bc>)
 801a462:	4313      	orrs	r3, r2
 801a464:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801a466:	687b      	ldr	r3, [r7, #4]
 801a468:	681b      	ldr	r3, [r3, #0]
 801a46a:	f003 0308 	and.w	r3, r3, #8
 801a46e:	2b00      	cmp	r3, #0
 801a470:	d009      	beq.n	801a486 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801a472:	4b12      	ldr	r3, [pc, #72]	; (801a4bc <HAL_RCC_ClockConfig+0x1bc>)
 801a474:	689b      	ldr	r3, [r3, #8]
 801a476:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801a47a:	687b      	ldr	r3, [r7, #4]
 801a47c:	691b      	ldr	r3, [r3, #16]
 801a47e:	00db      	lsls	r3, r3, #3
 801a480:	490e      	ldr	r1, [pc, #56]	; (801a4bc <HAL_RCC_ClockConfig+0x1bc>)
 801a482:	4313      	orrs	r3, r2
 801a484:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801a486:	f000 f821 	bl	801a4cc <HAL_RCC_GetSysClockFreq>
 801a48a:	4602      	mov	r2, r0
 801a48c:	4b0b      	ldr	r3, [pc, #44]	; (801a4bc <HAL_RCC_ClockConfig+0x1bc>)
 801a48e:	689b      	ldr	r3, [r3, #8]
 801a490:	091b      	lsrs	r3, r3, #4
 801a492:	f003 030f 	and.w	r3, r3, #15
 801a496:	490a      	ldr	r1, [pc, #40]	; (801a4c0 <HAL_RCC_ClockConfig+0x1c0>)
 801a498:	5ccb      	ldrb	r3, [r1, r3]
 801a49a:	fa22 f303 	lsr.w	r3, r2, r3
 801a49e:	4a09      	ldr	r2, [pc, #36]	; (801a4c4 <HAL_RCC_ClockConfig+0x1c4>)
 801a4a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801a4a2:	4b09      	ldr	r3, [pc, #36]	; (801a4c8 <HAL_RCC_ClockConfig+0x1c8>)
 801a4a4:	681b      	ldr	r3, [r3, #0]
 801a4a6:	4618      	mov	r0, r3
 801a4a8:	f7fb fef0 	bl	801628c <HAL_InitTick>

  return HAL_OK;
 801a4ac:	2300      	movs	r3, #0
}
 801a4ae:	4618      	mov	r0, r3
 801a4b0:	3710      	adds	r7, #16
 801a4b2:	46bd      	mov	sp, r7
 801a4b4:	bd80      	pop	{r7, pc}
 801a4b6:	bf00      	nop
 801a4b8:	40023c00 	.word	0x40023c00
 801a4bc:	40023800 	.word	0x40023800
 801a4c0:	08029ab4 	.word	0x08029ab4
 801a4c4:	20000184 	.word	0x20000184
 801a4c8:	20000188 	.word	0x20000188

0801a4cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801a4cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801a4d0:	b094      	sub	sp, #80	; 0x50
 801a4d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 801a4d4:	2300      	movs	r3, #0
 801a4d6:	647b      	str	r3, [r7, #68]	; 0x44
 801a4d8:	2300      	movs	r3, #0
 801a4da:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a4dc:	2300      	movs	r3, #0
 801a4de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 801a4e0:	2300      	movs	r3, #0
 801a4e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801a4e4:	4b79      	ldr	r3, [pc, #484]	; (801a6cc <HAL_RCC_GetSysClockFreq+0x200>)
 801a4e6:	689b      	ldr	r3, [r3, #8]
 801a4e8:	f003 030c 	and.w	r3, r3, #12
 801a4ec:	2b08      	cmp	r3, #8
 801a4ee:	d00d      	beq.n	801a50c <HAL_RCC_GetSysClockFreq+0x40>
 801a4f0:	2b08      	cmp	r3, #8
 801a4f2:	f200 80e1 	bhi.w	801a6b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 801a4f6:	2b00      	cmp	r3, #0
 801a4f8:	d002      	beq.n	801a500 <HAL_RCC_GetSysClockFreq+0x34>
 801a4fa:	2b04      	cmp	r3, #4
 801a4fc:	d003      	beq.n	801a506 <HAL_RCC_GetSysClockFreq+0x3a>
 801a4fe:	e0db      	b.n	801a6b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801a500:	4b73      	ldr	r3, [pc, #460]	; (801a6d0 <HAL_RCC_GetSysClockFreq+0x204>)
 801a502:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 801a504:	e0db      	b.n	801a6be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801a506:	4b73      	ldr	r3, [pc, #460]	; (801a6d4 <HAL_RCC_GetSysClockFreq+0x208>)
 801a508:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801a50a:	e0d8      	b.n	801a6be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801a50c:	4b6f      	ldr	r3, [pc, #444]	; (801a6cc <HAL_RCC_GetSysClockFreq+0x200>)
 801a50e:	685b      	ldr	r3, [r3, #4]
 801a510:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a514:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801a516:	4b6d      	ldr	r3, [pc, #436]	; (801a6cc <HAL_RCC_GetSysClockFreq+0x200>)
 801a518:	685b      	ldr	r3, [r3, #4]
 801a51a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801a51e:	2b00      	cmp	r3, #0
 801a520:	d063      	beq.n	801a5ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801a522:	4b6a      	ldr	r3, [pc, #424]	; (801a6cc <HAL_RCC_GetSysClockFreq+0x200>)
 801a524:	685b      	ldr	r3, [r3, #4]
 801a526:	099b      	lsrs	r3, r3, #6
 801a528:	2200      	movs	r2, #0
 801a52a:	63bb      	str	r3, [r7, #56]	; 0x38
 801a52c:	63fa      	str	r2, [r7, #60]	; 0x3c
 801a52e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a534:	633b      	str	r3, [r7, #48]	; 0x30
 801a536:	2300      	movs	r3, #0
 801a538:	637b      	str	r3, [r7, #52]	; 0x34
 801a53a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 801a53e:	4622      	mov	r2, r4
 801a540:	462b      	mov	r3, r5
 801a542:	f04f 0000 	mov.w	r0, #0
 801a546:	f04f 0100 	mov.w	r1, #0
 801a54a:	0159      	lsls	r1, r3, #5
 801a54c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801a550:	0150      	lsls	r0, r2, #5
 801a552:	4602      	mov	r2, r0
 801a554:	460b      	mov	r3, r1
 801a556:	4621      	mov	r1, r4
 801a558:	1a51      	subs	r1, r2, r1
 801a55a:	6139      	str	r1, [r7, #16]
 801a55c:	4629      	mov	r1, r5
 801a55e:	eb63 0301 	sbc.w	r3, r3, r1
 801a562:	617b      	str	r3, [r7, #20]
 801a564:	f04f 0200 	mov.w	r2, #0
 801a568:	f04f 0300 	mov.w	r3, #0
 801a56c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801a570:	4659      	mov	r1, fp
 801a572:	018b      	lsls	r3, r1, #6
 801a574:	4651      	mov	r1, sl
 801a576:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 801a57a:	4651      	mov	r1, sl
 801a57c:	018a      	lsls	r2, r1, #6
 801a57e:	4651      	mov	r1, sl
 801a580:	ebb2 0801 	subs.w	r8, r2, r1
 801a584:	4659      	mov	r1, fp
 801a586:	eb63 0901 	sbc.w	r9, r3, r1
 801a58a:	f04f 0200 	mov.w	r2, #0
 801a58e:	f04f 0300 	mov.w	r3, #0
 801a592:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801a596:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801a59a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801a59e:	4690      	mov	r8, r2
 801a5a0:	4699      	mov	r9, r3
 801a5a2:	4623      	mov	r3, r4
 801a5a4:	eb18 0303 	adds.w	r3, r8, r3
 801a5a8:	60bb      	str	r3, [r7, #8]
 801a5aa:	462b      	mov	r3, r5
 801a5ac:	eb49 0303 	adc.w	r3, r9, r3
 801a5b0:	60fb      	str	r3, [r7, #12]
 801a5b2:	f04f 0200 	mov.w	r2, #0
 801a5b6:	f04f 0300 	mov.w	r3, #0
 801a5ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 801a5be:	4629      	mov	r1, r5
 801a5c0:	024b      	lsls	r3, r1, #9
 801a5c2:	4621      	mov	r1, r4
 801a5c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 801a5c8:	4621      	mov	r1, r4
 801a5ca:	024a      	lsls	r2, r1, #9
 801a5cc:	4610      	mov	r0, r2
 801a5ce:	4619      	mov	r1, r3
 801a5d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a5d2:	2200      	movs	r2, #0
 801a5d4:	62bb      	str	r3, [r7, #40]	; 0x28
 801a5d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a5d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801a5dc:	f7e6 fb0c 	bl	8000bf8 <__aeabi_uldivmod>
 801a5e0:	4602      	mov	r2, r0
 801a5e2:	460b      	mov	r3, r1
 801a5e4:	4613      	mov	r3, r2
 801a5e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a5e8:	e058      	b.n	801a69c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801a5ea:	4b38      	ldr	r3, [pc, #224]	; (801a6cc <HAL_RCC_GetSysClockFreq+0x200>)
 801a5ec:	685b      	ldr	r3, [r3, #4]
 801a5ee:	099b      	lsrs	r3, r3, #6
 801a5f0:	2200      	movs	r2, #0
 801a5f2:	4618      	mov	r0, r3
 801a5f4:	4611      	mov	r1, r2
 801a5f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 801a5fa:	623b      	str	r3, [r7, #32]
 801a5fc:	2300      	movs	r3, #0
 801a5fe:	627b      	str	r3, [r7, #36]	; 0x24
 801a600:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 801a604:	4642      	mov	r2, r8
 801a606:	464b      	mov	r3, r9
 801a608:	f04f 0000 	mov.w	r0, #0
 801a60c:	f04f 0100 	mov.w	r1, #0
 801a610:	0159      	lsls	r1, r3, #5
 801a612:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801a616:	0150      	lsls	r0, r2, #5
 801a618:	4602      	mov	r2, r0
 801a61a:	460b      	mov	r3, r1
 801a61c:	4641      	mov	r1, r8
 801a61e:	ebb2 0a01 	subs.w	sl, r2, r1
 801a622:	4649      	mov	r1, r9
 801a624:	eb63 0b01 	sbc.w	fp, r3, r1
 801a628:	f04f 0200 	mov.w	r2, #0
 801a62c:	f04f 0300 	mov.w	r3, #0
 801a630:	ea4f 138b 	mov.w	r3, fp, lsl #6
 801a634:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 801a638:	ea4f 128a 	mov.w	r2, sl, lsl #6
 801a63c:	ebb2 040a 	subs.w	r4, r2, sl
 801a640:	eb63 050b 	sbc.w	r5, r3, fp
 801a644:	f04f 0200 	mov.w	r2, #0
 801a648:	f04f 0300 	mov.w	r3, #0
 801a64c:	00eb      	lsls	r3, r5, #3
 801a64e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801a652:	00e2      	lsls	r2, r4, #3
 801a654:	4614      	mov	r4, r2
 801a656:	461d      	mov	r5, r3
 801a658:	4643      	mov	r3, r8
 801a65a:	18e3      	adds	r3, r4, r3
 801a65c:	603b      	str	r3, [r7, #0]
 801a65e:	464b      	mov	r3, r9
 801a660:	eb45 0303 	adc.w	r3, r5, r3
 801a664:	607b      	str	r3, [r7, #4]
 801a666:	f04f 0200 	mov.w	r2, #0
 801a66a:	f04f 0300 	mov.w	r3, #0
 801a66e:	e9d7 4500 	ldrd	r4, r5, [r7]
 801a672:	4629      	mov	r1, r5
 801a674:	028b      	lsls	r3, r1, #10
 801a676:	4621      	mov	r1, r4
 801a678:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 801a67c:	4621      	mov	r1, r4
 801a67e:	028a      	lsls	r2, r1, #10
 801a680:	4610      	mov	r0, r2
 801a682:	4619      	mov	r1, r3
 801a684:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a686:	2200      	movs	r2, #0
 801a688:	61bb      	str	r3, [r7, #24]
 801a68a:	61fa      	str	r2, [r7, #28]
 801a68c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801a690:	f7e6 fab2 	bl	8000bf8 <__aeabi_uldivmod>
 801a694:	4602      	mov	r2, r0
 801a696:	460b      	mov	r3, r1
 801a698:	4613      	mov	r3, r2
 801a69a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801a69c:	4b0b      	ldr	r3, [pc, #44]	; (801a6cc <HAL_RCC_GetSysClockFreq+0x200>)
 801a69e:	685b      	ldr	r3, [r3, #4]
 801a6a0:	0c1b      	lsrs	r3, r3, #16
 801a6a2:	f003 0303 	and.w	r3, r3, #3
 801a6a6:	3301      	adds	r3, #1
 801a6a8:	005b      	lsls	r3, r3, #1
 801a6aa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 801a6ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a6ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a6b0:	fbb2 f3f3 	udiv	r3, r2, r3
 801a6b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801a6b6:	e002      	b.n	801a6be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801a6b8:	4b05      	ldr	r3, [pc, #20]	; (801a6d0 <HAL_RCC_GetSysClockFreq+0x204>)
 801a6ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801a6bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 801a6be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 801a6c0:	4618      	mov	r0, r3
 801a6c2:	3750      	adds	r7, #80	; 0x50
 801a6c4:	46bd      	mov	sp, r7
 801a6c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801a6ca:	bf00      	nop
 801a6cc:	40023800 	.word	0x40023800
 801a6d0:	00f42400 	.word	0x00f42400
 801a6d4:	007a1200 	.word	0x007a1200

0801a6d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801a6d8:	b480      	push	{r7}
 801a6da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801a6dc:	4b03      	ldr	r3, [pc, #12]	; (801a6ec <HAL_RCC_GetHCLKFreq+0x14>)
 801a6de:	681b      	ldr	r3, [r3, #0]
}
 801a6e0:	4618      	mov	r0, r3
 801a6e2:	46bd      	mov	sp, r7
 801a6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6e8:	4770      	bx	lr
 801a6ea:	bf00      	nop
 801a6ec:	20000184 	.word	0x20000184

0801a6f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801a6f0:	b580      	push	{r7, lr}
 801a6f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 801a6f4:	f7ff fff0 	bl	801a6d8 <HAL_RCC_GetHCLKFreq>
 801a6f8:	4602      	mov	r2, r0
 801a6fa:	4b05      	ldr	r3, [pc, #20]	; (801a710 <HAL_RCC_GetPCLK1Freq+0x20>)
 801a6fc:	689b      	ldr	r3, [r3, #8]
 801a6fe:	0a9b      	lsrs	r3, r3, #10
 801a700:	f003 0307 	and.w	r3, r3, #7
 801a704:	4903      	ldr	r1, [pc, #12]	; (801a714 <HAL_RCC_GetPCLK1Freq+0x24>)
 801a706:	5ccb      	ldrb	r3, [r1, r3]
 801a708:	fa22 f303 	lsr.w	r3, r2, r3
}
 801a70c:	4618      	mov	r0, r3
 801a70e:	bd80      	pop	{r7, pc}
 801a710:	40023800 	.word	0x40023800
 801a714:	08029ac4 	.word	0x08029ac4

0801a718 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801a718:	b580      	push	{r7, lr}
 801a71a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 801a71c:	f7ff ffdc 	bl	801a6d8 <HAL_RCC_GetHCLKFreq>
 801a720:	4602      	mov	r2, r0
 801a722:	4b05      	ldr	r3, [pc, #20]	; (801a738 <HAL_RCC_GetPCLK2Freq+0x20>)
 801a724:	689b      	ldr	r3, [r3, #8]
 801a726:	0b5b      	lsrs	r3, r3, #13
 801a728:	f003 0307 	and.w	r3, r3, #7
 801a72c:	4903      	ldr	r1, [pc, #12]	; (801a73c <HAL_RCC_GetPCLK2Freq+0x24>)
 801a72e:	5ccb      	ldrb	r3, [r1, r3]
 801a730:	fa22 f303 	lsr.w	r3, r2, r3
}
 801a734:	4618      	mov	r0, r3
 801a736:	bd80      	pop	{r7, pc}
 801a738:	40023800 	.word	0x40023800
 801a73c:	08029ac4 	.word	0x08029ac4

0801a740 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801a740:	b580      	push	{r7, lr}
 801a742:	b082      	sub	sp, #8
 801a744:	af00      	add	r7, sp, #0
 801a746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801a748:	687b      	ldr	r3, [r7, #4]
 801a74a:	2b00      	cmp	r3, #0
 801a74c:	d101      	bne.n	801a752 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801a74e:	2301      	movs	r3, #1
 801a750:	e041      	b.n	801a7d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801a752:	687b      	ldr	r3, [r7, #4]
 801a754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a758:	b2db      	uxtb	r3, r3
 801a75a:	2b00      	cmp	r3, #0
 801a75c:	d106      	bne.n	801a76c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801a75e:	687b      	ldr	r3, [r7, #4]
 801a760:	2200      	movs	r2, #0
 801a762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801a766:	6878      	ldr	r0, [r7, #4]
 801a768:	f7fb fa86 	bl	8015c78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a76c:	687b      	ldr	r3, [r7, #4]
 801a76e:	2202      	movs	r2, #2
 801a770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801a774:	687b      	ldr	r3, [r7, #4]
 801a776:	681a      	ldr	r2, [r3, #0]
 801a778:	687b      	ldr	r3, [r7, #4]
 801a77a:	3304      	adds	r3, #4
 801a77c:	4619      	mov	r1, r3
 801a77e:	4610      	mov	r0, r2
 801a780:	f000 fcae 	bl	801b0e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801a784:	687b      	ldr	r3, [r7, #4]
 801a786:	2201      	movs	r2, #1
 801a788:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801a78c:	687b      	ldr	r3, [r7, #4]
 801a78e:	2201      	movs	r2, #1
 801a790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801a794:	687b      	ldr	r3, [r7, #4]
 801a796:	2201      	movs	r2, #1
 801a798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801a79c:	687b      	ldr	r3, [r7, #4]
 801a79e:	2201      	movs	r2, #1
 801a7a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801a7a4:	687b      	ldr	r3, [r7, #4]
 801a7a6:	2201      	movs	r2, #1
 801a7a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801a7ac:	687b      	ldr	r3, [r7, #4]
 801a7ae:	2201      	movs	r2, #1
 801a7b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801a7b4:	687b      	ldr	r3, [r7, #4]
 801a7b6:	2201      	movs	r2, #1
 801a7b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801a7bc:	687b      	ldr	r3, [r7, #4]
 801a7be:	2201      	movs	r2, #1
 801a7c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a7c4:	687b      	ldr	r3, [r7, #4]
 801a7c6:	2201      	movs	r2, #1
 801a7c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801a7cc:	687b      	ldr	r3, [r7, #4]
 801a7ce:	2201      	movs	r2, #1
 801a7d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801a7d4:	2300      	movs	r3, #0
}
 801a7d6:	4618      	mov	r0, r3
 801a7d8:	3708      	adds	r7, #8
 801a7da:	46bd      	mov	sp, r7
 801a7dc:	bd80      	pop	{r7, pc}
	...

0801a7e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801a7e0:	b480      	push	{r7}
 801a7e2:	b085      	sub	sp, #20
 801a7e4:	af00      	add	r7, sp, #0
 801a7e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801a7e8:	687b      	ldr	r3, [r7, #4]
 801a7ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a7ee:	b2db      	uxtb	r3, r3
 801a7f0:	2b01      	cmp	r3, #1
 801a7f2:	d001      	beq.n	801a7f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801a7f4:	2301      	movs	r3, #1
 801a7f6:	e03c      	b.n	801a872 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a7f8:	687b      	ldr	r3, [r7, #4]
 801a7fa:	2202      	movs	r2, #2
 801a7fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801a800:	687b      	ldr	r3, [r7, #4]
 801a802:	681b      	ldr	r3, [r3, #0]
 801a804:	4a1e      	ldr	r2, [pc, #120]	; (801a880 <HAL_TIM_Base_Start+0xa0>)
 801a806:	4293      	cmp	r3, r2
 801a808:	d018      	beq.n	801a83c <HAL_TIM_Base_Start+0x5c>
 801a80a:	687b      	ldr	r3, [r7, #4]
 801a80c:	681b      	ldr	r3, [r3, #0]
 801a80e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a812:	d013      	beq.n	801a83c <HAL_TIM_Base_Start+0x5c>
 801a814:	687b      	ldr	r3, [r7, #4]
 801a816:	681b      	ldr	r3, [r3, #0]
 801a818:	4a1a      	ldr	r2, [pc, #104]	; (801a884 <HAL_TIM_Base_Start+0xa4>)
 801a81a:	4293      	cmp	r3, r2
 801a81c:	d00e      	beq.n	801a83c <HAL_TIM_Base_Start+0x5c>
 801a81e:	687b      	ldr	r3, [r7, #4]
 801a820:	681b      	ldr	r3, [r3, #0]
 801a822:	4a19      	ldr	r2, [pc, #100]	; (801a888 <HAL_TIM_Base_Start+0xa8>)
 801a824:	4293      	cmp	r3, r2
 801a826:	d009      	beq.n	801a83c <HAL_TIM_Base_Start+0x5c>
 801a828:	687b      	ldr	r3, [r7, #4]
 801a82a:	681b      	ldr	r3, [r3, #0]
 801a82c:	4a17      	ldr	r2, [pc, #92]	; (801a88c <HAL_TIM_Base_Start+0xac>)
 801a82e:	4293      	cmp	r3, r2
 801a830:	d004      	beq.n	801a83c <HAL_TIM_Base_Start+0x5c>
 801a832:	687b      	ldr	r3, [r7, #4]
 801a834:	681b      	ldr	r3, [r3, #0]
 801a836:	4a16      	ldr	r2, [pc, #88]	; (801a890 <HAL_TIM_Base_Start+0xb0>)
 801a838:	4293      	cmp	r3, r2
 801a83a:	d111      	bne.n	801a860 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801a83c:	687b      	ldr	r3, [r7, #4]
 801a83e:	681b      	ldr	r3, [r3, #0]
 801a840:	689b      	ldr	r3, [r3, #8]
 801a842:	f003 0307 	and.w	r3, r3, #7
 801a846:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a848:	68fb      	ldr	r3, [r7, #12]
 801a84a:	2b06      	cmp	r3, #6
 801a84c:	d010      	beq.n	801a870 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 801a84e:	687b      	ldr	r3, [r7, #4]
 801a850:	681b      	ldr	r3, [r3, #0]
 801a852:	681a      	ldr	r2, [r3, #0]
 801a854:	687b      	ldr	r3, [r7, #4]
 801a856:	681b      	ldr	r3, [r3, #0]
 801a858:	f042 0201 	orr.w	r2, r2, #1
 801a85c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a85e:	e007      	b.n	801a870 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801a860:	687b      	ldr	r3, [r7, #4]
 801a862:	681b      	ldr	r3, [r3, #0]
 801a864:	681a      	ldr	r2, [r3, #0]
 801a866:	687b      	ldr	r3, [r7, #4]
 801a868:	681b      	ldr	r3, [r3, #0]
 801a86a:	f042 0201 	orr.w	r2, r2, #1
 801a86e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801a870:	2300      	movs	r3, #0
}
 801a872:	4618      	mov	r0, r3
 801a874:	3714      	adds	r7, #20
 801a876:	46bd      	mov	sp, r7
 801a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a87c:	4770      	bx	lr
 801a87e:	bf00      	nop
 801a880:	40010000 	.word	0x40010000
 801a884:	40000400 	.word	0x40000400
 801a888:	40000800 	.word	0x40000800
 801a88c:	40000c00 	.word	0x40000c00
 801a890:	40014000 	.word	0x40014000

0801a894 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801a894:	b480      	push	{r7}
 801a896:	b085      	sub	sp, #20
 801a898:	af00      	add	r7, sp, #0
 801a89a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801a89c:	687b      	ldr	r3, [r7, #4]
 801a89e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a8a2:	b2db      	uxtb	r3, r3
 801a8a4:	2b01      	cmp	r3, #1
 801a8a6:	d001      	beq.n	801a8ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801a8a8:	2301      	movs	r3, #1
 801a8aa:	e044      	b.n	801a936 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a8ac:	687b      	ldr	r3, [r7, #4]
 801a8ae:	2202      	movs	r2, #2
 801a8b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801a8b4:	687b      	ldr	r3, [r7, #4]
 801a8b6:	681b      	ldr	r3, [r3, #0]
 801a8b8:	68da      	ldr	r2, [r3, #12]
 801a8ba:	687b      	ldr	r3, [r7, #4]
 801a8bc:	681b      	ldr	r3, [r3, #0]
 801a8be:	f042 0201 	orr.w	r2, r2, #1
 801a8c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801a8c4:	687b      	ldr	r3, [r7, #4]
 801a8c6:	681b      	ldr	r3, [r3, #0]
 801a8c8:	4a1e      	ldr	r2, [pc, #120]	; (801a944 <HAL_TIM_Base_Start_IT+0xb0>)
 801a8ca:	4293      	cmp	r3, r2
 801a8cc:	d018      	beq.n	801a900 <HAL_TIM_Base_Start_IT+0x6c>
 801a8ce:	687b      	ldr	r3, [r7, #4]
 801a8d0:	681b      	ldr	r3, [r3, #0]
 801a8d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a8d6:	d013      	beq.n	801a900 <HAL_TIM_Base_Start_IT+0x6c>
 801a8d8:	687b      	ldr	r3, [r7, #4]
 801a8da:	681b      	ldr	r3, [r3, #0]
 801a8dc:	4a1a      	ldr	r2, [pc, #104]	; (801a948 <HAL_TIM_Base_Start_IT+0xb4>)
 801a8de:	4293      	cmp	r3, r2
 801a8e0:	d00e      	beq.n	801a900 <HAL_TIM_Base_Start_IT+0x6c>
 801a8e2:	687b      	ldr	r3, [r7, #4]
 801a8e4:	681b      	ldr	r3, [r3, #0]
 801a8e6:	4a19      	ldr	r2, [pc, #100]	; (801a94c <HAL_TIM_Base_Start_IT+0xb8>)
 801a8e8:	4293      	cmp	r3, r2
 801a8ea:	d009      	beq.n	801a900 <HAL_TIM_Base_Start_IT+0x6c>
 801a8ec:	687b      	ldr	r3, [r7, #4]
 801a8ee:	681b      	ldr	r3, [r3, #0]
 801a8f0:	4a17      	ldr	r2, [pc, #92]	; (801a950 <HAL_TIM_Base_Start_IT+0xbc>)
 801a8f2:	4293      	cmp	r3, r2
 801a8f4:	d004      	beq.n	801a900 <HAL_TIM_Base_Start_IT+0x6c>
 801a8f6:	687b      	ldr	r3, [r7, #4]
 801a8f8:	681b      	ldr	r3, [r3, #0]
 801a8fa:	4a16      	ldr	r2, [pc, #88]	; (801a954 <HAL_TIM_Base_Start_IT+0xc0>)
 801a8fc:	4293      	cmp	r3, r2
 801a8fe:	d111      	bne.n	801a924 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801a900:	687b      	ldr	r3, [r7, #4]
 801a902:	681b      	ldr	r3, [r3, #0]
 801a904:	689b      	ldr	r3, [r3, #8]
 801a906:	f003 0307 	and.w	r3, r3, #7
 801a90a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a90c:	68fb      	ldr	r3, [r7, #12]
 801a90e:	2b06      	cmp	r3, #6
 801a910:	d010      	beq.n	801a934 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 801a912:	687b      	ldr	r3, [r7, #4]
 801a914:	681b      	ldr	r3, [r3, #0]
 801a916:	681a      	ldr	r2, [r3, #0]
 801a918:	687b      	ldr	r3, [r7, #4]
 801a91a:	681b      	ldr	r3, [r3, #0]
 801a91c:	f042 0201 	orr.w	r2, r2, #1
 801a920:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a922:	e007      	b.n	801a934 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801a924:	687b      	ldr	r3, [r7, #4]
 801a926:	681b      	ldr	r3, [r3, #0]
 801a928:	681a      	ldr	r2, [r3, #0]
 801a92a:	687b      	ldr	r3, [r7, #4]
 801a92c:	681b      	ldr	r3, [r3, #0]
 801a92e:	f042 0201 	orr.w	r2, r2, #1
 801a932:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801a934:	2300      	movs	r3, #0
}
 801a936:	4618      	mov	r0, r3
 801a938:	3714      	adds	r7, #20
 801a93a:	46bd      	mov	sp, r7
 801a93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a940:	4770      	bx	lr
 801a942:	bf00      	nop
 801a944:	40010000 	.word	0x40010000
 801a948:	40000400 	.word	0x40000400
 801a94c:	40000800 	.word	0x40000800
 801a950:	40000c00 	.word	0x40000c00
 801a954:	40014000 	.word	0x40014000

0801a958 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801a958:	b580      	push	{r7, lr}
 801a95a:	b082      	sub	sp, #8
 801a95c:	af00      	add	r7, sp, #0
 801a95e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801a960:	687b      	ldr	r3, [r7, #4]
 801a962:	2b00      	cmp	r3, #0
 801a964:	d101      	bne.n	801a96a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801a966:	2301      	movs	r3, #1
 801a968:	e041      	b.n	801a9ee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801a96a:	687b      	ldr	r3, [r7, #4]
 801a96c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a970:	b2db      	uxtb	r3, r3
 801a972:	2b00      	cmp	r3, #0
 801a974:	d106      	bne.n	801a984 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801a976:	687b      	ldr	r3, [r7, #4]
 801a978:	2200      	movs	r2, #0
 801a97a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801a97e:	6878      	ldr	r0, [r7, #4]
 801a980:	f000 f839 	bl	801a9f6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a984:	687b      	ldr	r3, [r7, #4]
 801a986:	2202      	movs	r2, #2
 801a988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801a98c:	687b      	ldr	r3, [r7, #4]
 801a98e:	681a      	ldr	r2, [r3, #0]
 801a990:	687b      	ldr	r3, [r7, #4]
 801a992:	3304      	adds	r3, #4
 801a994:	4619      	mov	r1, r3
 801a996:	4610      	mov	r0, r2
 801a998:	f000 fba2 	bl	801b0e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801a99c:	687b      	ldr	r3, [r7, #4]
 801a99e:	2201      	movs	r2, #1
 801a9a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801a9a4:	687b      	ldr	r3, [r7, #4]
 801a9a6:	2201      	movs	r2, #1
 801a9a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801a9ac:	687b      	ldr	r3, [r7, #4]
 801a9ae:	2201      	movs	r2, #1
 801a9b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801a9b4:	687b      	ldr	r3, [r7, #4]
 801a9b6:	2201      	movs	r2, #1
 801a9b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801a9bc:	687b      	ldr	r3, [r7, #4]
 801a9be:	2201      	movs	r2, #1
 801a9c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801a9c4:	687b      	ldr	r3, [r7, #4]
 801a9c6:	2201      	movs	r2, #1
 801a9c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801a9cc:	687b      	ldr	r3, [r7, #4]
 801a9ce:	2201      	movs	r2, #1
 801a9d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801a9d4:	687b      	ldr	r3, [r7, #4]
 801a9d6:	2201      	movs	r2, #1
 801a9d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a9dc:	687b      	ldr	r3, [r7, #4]
 801a9de:	2201      	movs	r2, #1
 801a9e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801a9e4:	687b      	ldr	r3, [r7, #4]
 801a9e6:	2201      	movs	r2, #1
 801a9e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801a9ec:	2300      	movs	r3, #0
}
 801a9ee:	4618      	mov	r0, r3
 801a9f0:	3708      	adds	r7, #8
 801a9f2:	46bd      	mov	sp, r7
 801a9f4:	bd80      	pop	{r7, pc}

0801a9f6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801a9f6:	b480      	push	{r7}
 801a9f8:	b083      	sub	sp, #12
 801a9fa:	af00      	add	r7, sp, #0
 801a9fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801a9fe:	bf00      	nop
 801aa00:	370c      	adds	r7, #12
 801aa02:	46bd      	mov	sp, r7
 801aa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa08:	4770      	bx	lr
	...

0801aa0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801aa0c:	b580      	push	{r7, lr}
 801aa0e:	b084      	sub	sp, #16
 801aa10:	af00      	add	r7, sp, #0
 801aa12:	6078      	str	r0, [r7, #4]
 801aa14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801aa16:	683b      	ldr	r3, [r7, #0]
 801aa18:	2b00      	cmp	r3, #0
 801aa1a:	d109      	bne.n	801aa30 <HAL_TIM_PWM_Start+0x24>
 801aa1c:	687b      	ldr	r3, [r7, #4]
 801aa1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801aa22:	b2db      	uxtb	r3, r3
 801aa24:	2b01      	cmp	r3, #1
 801aa26:	bf14      	ite	ne
 801aa28:	2301      	movne	r3, #1
 801aa2a:	2300      	moveq	r3, #0
 801aa2c:	b2db      	uxtb	r3, r3
 801aa2e:	e022      	b.n	801aa76 <HAL_TIM_PWM_Start+0x6a>
 801aa30:	683b      	ldr	r3, [r7, #0]
 801aa32:	2b04      	cmp	r3, #4
 801aa34:	d109      	bne.n	801aa4a <HAL_TIM_PWM_Start+0x3e>
 801aa36:	687b      	ldr	r3, [r7, #4]
 801aa38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801aa3c:	b2db      	uxtb	r3, r3
 801aa3e:	2b01      	cmp	r3, #1
 801aa40:	bf14      	ite	ne
 801aa42:	2301      	movne	r3, #1
 801aa44:	2300      	moveq	r3, #0
 801aa46:	b2db      	uxtb	r3, r3
 801aa48:	e015      	b.n	801aa76 <HAL_TIM_PWM_Start+0x6a>
 801aa4a:	683b      	ldr	r3, [r7, #0]
 801aa4c:	2b08      	cmp	r3, #8
 801aa4e:	d109      	bne.n	801aa64 <HAL_TIM_PWM_Start+0x58>
 801aa50:	687b      	ldr	r3, [r7, #4]
 801aa52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801aa56:	b2db      	uxtb	r3, r3
 801aa58:	2b01      	cmp	r3, #1
 801aa5a:	bf14      	ite	ne
 801aa5c:	2301      	movne	r3, #1
 801aa5e:	2300      	moveq	r3, #0
 801aa60:	b2db      	uxtb	r3, r3
 801aa62:	e008      	b.n	801aa76 <HAL_TIM_PWM_Start+0x6a>
 801aa64:	687b      	ldr	r3, [r7, #4]
 801aa66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801aa6a:	b2db      	uxtb	r3, r3
 801aa6c:	2b01      	cmp	r3, #1
 801aa6e:	bf14      	ite	ne
 801aa70:	2301      	movne	r3, #1
 801aa72:	2300      	moveq	r3, #0
 801aa74:	b2db      	uxtb	r3, r3
 801aa76:	2b00      	cmp	r3, #0
 801aa78:	d001      	beq.n	801aa7e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 801aa7a:	2301      	movs	r3, #1
 801aa7c:	e068      	b.n	801ab50 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801aa7e:	683b      	ldr	r3, [r7, #0]
 801aa80:	2b00      	cmp	r3, #0
 801aa82:	d104      	bne.n	801aa8e <HAL_TIM_PWM_Start+0x82>
 801aa84:	687b      	ldr	r3, [r7, #4]
 801aa86:	2202      	movs	r2, #2
 801aa88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801aa8c:	e013      	b.n	801aab6 <HAL_TIM_PWM_Start+0xaa>
 801aa8e:	683b      	ldr	r3, [r7, #0]
 801aa90:	2b04      	cmp	r3, #4
 801aa92:	d104      	bne.n	801aa9e <HAL_TIM_PWM_Start+0x92>
 801aa94:	687b      	ldr	r3, [r7, #4]
 801aa96:	2202      	movs	r2, #2
 801aa98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801aa9c:	e00b      	b.n	801aab6 <HAL_TIM_PWM_Start+0xaa>
 801aa9e:	683b      	ldr	r3, [r7, #0]
 801aaa0:	2b08      	cmp	r3, #8
 801aaa2:	d104      	bne.n	801aaae <HAL_TIM_PWM_Start+0xa2>
 801aaa4:	687b      	ldr	r3, [r7, #4]
 801aaa6:	2202      	movs	r2, #2
 801aaa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801aaac:	e003      	b.n	801aab6 <HAL_TIM_PWM_Start+0xaa>
 801aaae:	687b      	ldr	r3, [r7, #4]
 801aab0:	2202      	movs	r2, #2
 801aab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801aab6:	687b      	ldr	r3, [r7, #4]
 801aab8:	681b      	ldr	r3, [r3, #0]
 801aaba:	2201      	movs	r2, #1
 801aabc:	6839      	ldr	r1, [r7, #0]
 801aabe:	4618      	mov	r0, r3
 801aac0:	f000 fdb4 	bl	801b62c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801aac4:	687b      	ldr	r3, [r7, #4]
 801aac6:	681b      	ldr	r3, [r3, #0]
 801aac8:	4a23      	ldr	r2, [pc, #140]	; (801ab58 <HAL_TIM_PWM_Start+0x14c>)
 801aaca:	4293      	cmp	r3, r2
 801aacc:	d107      	bne.n	801aade <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801aace:	687b      	ldr	r3, [r7, #4]
 801aad0:	681b      	ldr	r3, [r3, #0]
 801aad2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801aad4:	687b      	ldr	r3, [r7, #4]
 801aad6:	681b      	ldr	r3, [r3, #0]
 801aad8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801aadc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801aade:	687b      	ldr	r3, [r7, #4]
 801aae0:	681b      	ldr	r3, [r3, #0]
 801aae2:	4a1d      	ldr	r2, [pc, #116]	; (801ab58 <HAL_TIM_PWM_Start+0x14c>)
 801aae4:	4293      	cmp	r3, r2
 801aae6:	d018      	beq.n	801ab1a <HAL_TIM_PWM_Start+0x10e>
 801aae8:	687b      	ldr	r3, [r7, #4]
 801aaea:	681b      	ldr	r3, [r3, #0]
 801aaec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801aaf0:	d013      	beq.n	801ab1a <HAL_TIM_PWM_Start+0x10e>
 801aaf2:	687b      	ldr	r3, [r7, #4]
 801aaf4:	681b      	ldr	r3, [r3, #0]
 801aaf6:	4a19      	ldr	r2, [pc, #100]	; (801ab5c <HAL_TIM_PWM_Start+0x150>)
 801aaf8:	4293      	cmp	r3, r2
 801aafa:	d00e      	beq.n	801ab1a <HAL_TIM_PWM_Start+0x10e>
 801aafc:	687b      	ldr	r3, [r7, #4]
 801aafe:	681b      	ldr	r3, [r3, #0]
 801ab00:	4a17      	ldr	r2, [pc, #92]	; (801ab60 <HAL_TIM_PWM_Start+0x154>)
 801ab02:	4293      	cmp	r3, r2
 801ab04:	d009      	beq.n	801ab1a <HAL_TIM_PWM_Start+0x10e>
 801ab06:	687b      	ldr	r3, [r7, #4]
 801ab08:	681b      	ldr	r3, [r3, #0]
 801ab0a:	4a16      	ldr	r2, [pc, #88]	; (801ab64 <HAL_TIM_PWM_Start+0x158>)
 801ab0c:	4293      	cmp	r3, r2
 801ab0e:	d004      	beq.n	801ab1a <HAL_TIM_PWM_Start+0x10e>
 801ab10:	687b      	ldr	r3, [r7, #4]
 801ab12:	681b      	ldr	r3, [r3, #0]
 801ab14:	4a14      	ldr	r2, [pc, #80]	; (801ab68 <HAL_TIM_PWM_Start+0x15c>)
 801ab16:	4293      	cmp	r3, r2
 801ab18:	d111      	bne.n	801ab3e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801ab1a:	687b      	ldr	r3, [r7, #4]
 801ab1c:	681b      	ldr	r3, [r3, #0]
 801ab1e:	689b      	ldr	r3, [r3, #8]
 801ab20:	f003 0307 	and.w	r3, r3, #7
 801ab24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ab26:	68fb      	ldr	r3, [r7, #12]
 801ab28:	2b06      	cmp	r3, #6
 801ab2a:	d010      	beq.n	801ab4e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 801ab2c:	687b      	ldr	r3, [r7, #4]
 801ab2e:	681b      	ldr	r3, [r3, #0]
 801ab30:	681a      	ldr	r2, [r3, #0]
 801ab32:	687b      	ldr	r3, [r7, #4]
 801ab34:	681b      	ldr	r3, [r3, #0]
 801ab36:	f042 0201 	orr.w	r2, r2, #1
 801ab3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ab3c:	e007      	b.n	801ab4e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801ab3e:	687b      	ldr	r3, [r7, #4]
 801ab40:	681b      	ldr	r3, [r3, #0]
 801ab42:	681a      	ldr	r2, [r3, #0]
 801ab44:	687b      	ldr	r3, [r7, #4]
 801ab46:	681b      	ldr	r3, [r3, #0]
 801ab48:	f042 0201 	orr.w	r2, r2, #1
 801ab4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801ab4e:	2300      	movs	r3, #0
}
 801ab50:	4618      	mov	r0, r3
 801ab52:	3710      	adds	r7, #16
 801ab54:	46bd      	mov	sp, r7
 801ab56:	bd80      	pop	{r7, pc}
 801ab58:	40010000 	.word	0x40010000
 801ab5c:	40000400 	.word	0x40000400
 801ab60:	40000800 	.word	0x40000800
 801ab64:	40000c00 	.word	0x40000c00
 801ab68:	40014000 	.word	0x40014000

0801ab6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801ab6c:	b580      	push	{r7, lr}
 801ab6e:	b082      	sub	sp, #8
 801ab70:	af00      	add	r7, sp, #0
 801ab72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801ab74:	687b      	ldr	r3, [r7, #4]
 801ab76:	681b      	ldr	r3, [r3, #0]
 801ab78:	691b      	ldr	r3, [r3, #16]
 801ab7a:	f003 0302 	and.w	r3, r3, #2
 801ab7e:	2b02      	cmp	r3, #2
 801ab80:	d122      	bne.n	801abc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801ab82:	687b      	ldr	r3, [r7, #4]
 801ab84:	681b      	ldr	r3, [r3, #0]
 801ab86:	68db      	ldr	r3, [r3, #12]
 801ab88:	f003 0302 	and.w	r3, r3, #2
 801ab8c:	2b02      	cmp	r3, #2
 801ab8e:	d11b      	bne.n	801abc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801ab90:	687b      	ldr	r3, [r7, #4]
 801ab92:	681b      	ldr	r3, [r3, #0]
 801ab94:	f06f 0202 	mvn.w	r2, #2
 801ab98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801ab9a:	687b      	ldr	r3, [r7, #4]
 801ab9c:	2201      	movs	r2, #1
 801ab9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801aba0:	687b      	ldr	r3, [r7, #4]
 801aba2:	681b      	ldr	r3, [r3, #0]
 801aba4:	699b      	ldr	r3, [r3, #24]
 801aba6:	f003 0303 	and.w	r3, r3, #3
 801abaa:	2b00      	cmp	r3, #0
 801abac:	d003      	beq.n	801abb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801abae:	6878      	ldr	r0, [r7, #4]
 801abb0:	f000 fa77 	bl	801b0a2 <HAL_TIM_IC_CaptureCallback>
 801abb4:	e005      	b.n	801abc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801abb6:	6878      	ldr	r0, [r7, #4]
 801abb8:	f000 fa69 	bl	801b08e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801abbc:	6878      	ldr	r0, [r7, #4]
 801abbe:	f000 fa7a 	bl	801b0b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801abc2:	687b      	ldr	r3, [r7, #4]
 801abc4:	2200      	movs	r2, #0
 801abc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801abc8:	687b      	ldr	r3, [r7, #4]
 801abca:	681b      	ldr	r3, [r3, #0]
 801abcc:	691b      	ldr	r3, [r3, #16]
 801abce:	f003 0304 	and.w	r3, r3, #4
 801abd2:	2b04      	cmp	r3, #4
 801abd4:	d122      	bne.n	801ac1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801abd6:	687b      	ldr	r3, [r7, #4]
 801abd8:	681b      	ldr	r3, [r3, #0]
 801abda:	68db      	ldr	r3, [r3, #12]
 801abdc:	f003 0304 	and.w	r3, r3, #4
 801abe0:	2b04      	cmp	r3, #4
 801abe2:	d11b      	bne.n	801ac1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801abe4:	687b      	ldr	r3, [r7, #4]
 801abe6:	681b      	ldr	r3, [r3, #0]
 801abe8:	f06f 0204 	mvn.w	r2, #4
 801abec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801abee:	687b      	ldr	r3, [r7, #4]
 801abf0:	2202      	movs	r2, #2
 801abf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801abf4:	687b      	ldr	r3, [r7, #4]
 801abf6:	681b      	ldr	r3, [r3, #0]
 801abf8:	699b      	ldr	r3, [r3, #24]
 801abfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801abfe:	2b00      	cmp	r3, #0
 801ac00:	d003      	beq.n	801ac0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801ac02:	6878      	ldr	r0, [r7, #4]
 801ac04:	f000 fa4d 	bl	801b0a2 <HAL_TIM_IC_CaptureCallback>
 801ac08:	e005      	b.n	801ac16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801ac0a:	6878      	ldr	r0, [r7, #4]
 801ac0c:	f000 fa3f 	bl	801b08e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801ac10:	6878      	ldr	r0, [r7, #4]
 801ac12:	f000 fa50 	bl	801b0b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ac16:	687b      	ldr	r3, [r7, #4]
 801ac18:	2200      	movs	r2, #0
 801ac1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801ac1c:	687b      	ldr	r3, [r7, #4]
 801ac1e:	681b      	ldr	r3, [r3, #0]
 801ac20:	691b      	ldr	r3, [r3, #16]
 801ac22:	f003 0308 	and.w	r3, r3, #8
 801ac26:	2b08      	cmp	r3, #8
 801ac28:	d122      	bne.n	801ac70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801ac2a:	687b      	ldr	r3, [r7, #4]
 801ac2c:	681b      	ldr	r3, [r3, #0]
 801ac2e:	68db      	ldr	r3, [r3, #12]
 801ac30:	f003 0308 	and.w	r3, r3, #8
 801ac34:	2b08      	cmp	r3, #8
 801ac36:	d11b      	bne.n	801ac70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801ac38:	687b      	ldr	r3, [r7, #4]
 801ac3a:	681b      	ldr	r3, [r3, #0]
 801ac3c:	f06f 0208 	mvn.w	r2, #8
 801ac40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801ac42:	687b      	ldr	r3, [r7, #4]
 801ac44:	2204      	movs	r2, #4
 801ac46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801ac48:	687b      	ldr	r3, [r7, #4]
 801ac4a:	681b      	ldr	r3, [r3, #0]
 801ac4c:	69db      	ldr	r3, [r3, #28]
 801ac4e:	f003 0303 	and.w	r3, r3, #3
 801ac52:	2b00      	cmp	r3, #0
 801ac54:	d003      	beq.n	801ac5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801ac56:	6878      	ldr	r0, [r7, #4]
 801ac58:	f000 fa23 	bl	801b0a2 <HAL_TIM_IC_CaptureCallback>
 801ac5c:	e005      	b.n	801ac6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801ac5e:	6878      	ldr	r0, [r7, #4]
 801ac60:	f000 fa15 	bl	801b08e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801ac64:	6878      	ldr	r0, [r7, #4]
 801ac66:	f000 fa26 	bl	801b0b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ac6a:	687b      	ldr	r3, [r7, #4]
 801ac6c:	2200      	movs	r2, #0
 801ac6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801ac70:	687b      	ldr	r3, [r7, #4]
 801ac72:	681b      	ldr	r3, [r3, #0]
 801ac74:	691b      	ldr	r3, [r3, #16]
 801ac76:	f003 0310 	and.w	r3, r3, #16
 801ac7a:	2b10      	cmp	r3, #16
 801ac7c:	d122      	bne.n	801acc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801ac7e:	687b      	ldr	r3, [r7, #4]
 801ac80:	681b      	ldr	r3, [r3, #0]
 801ac82:	68db      	ldr	r3, [r3, #12]
 801ac84:	f003 0310 	and.w	r3, r3, #16
 801ac88:	2b10      	cmp	r3, #16
 801ac8a:	d11b      	bne.n	801acc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801ac8c:	687b      	ldr	r3, [r7, #4]
 801ac8e:	681b      	ldr	r3, [r3, #0]
 801ac90:	f06f 0210 	mvn.w	r2, #16
 801ac94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801ac96:	687b      	ldr	r3, [r7, #4]
 801ac98:	2208      	movs	r2, #8
 801ac9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801ac9c:	687b      	ldr	r3, [r7, #4]
 801ac9e:	681b      	ldr	r3, [r3, #0]
 801aca0:	69db      	ldr	r3, [r3, #28]
 801aca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801aca6:	2b00      	cmp	r3, #0
 801aca8:	d003      	beq.n	801acb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801acaa:	6878      	ldr	r0, [r7, #4]
 801acac:	f000 f9f9 	bl	801b0a2 <HAL_TIM_IC_CaptureCallback>
 801acb0:	e005      	b.n	801acbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801acb2:	6878      	ldr	r0, [r7, #4]
 801acb4:	f000 f9eb 	bl	801b08e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801acb8:	6878      	ldr	r0, [r7, #4]
 801acba:	f000 f9fc 	bl	801b0b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801acbe:	687b      	ldr	r3, [r7, #4]
 801acc0:	2200      	movs	r2, #0
 801acc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801acc4:	687b      	ldr	r3, [r7, #4]
 801acc6:	681b      	ldr	r3, [r3, #0]
 801acc8:	691b      	ldr	r3, [r3, #16]
 801acca:	f003 0301 	and.w	r3, r3, #1
 801acce:	2b01      	cmp	r3, #1
 801acd0:	d10e      	bne.n	801acf0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801acd2:	687b      	ldr	r3, [r7, #4]
 801acd4:	681b      	ldr	r3, [r3, #0]
 801acd6:	68db      	ldr	r3, [r3, #12]
 801acd8:	f003 0301 	and.w	r3, r3, #1
 801acdc:	2b01      	cmp	r3, #1
 801acde:	d107      	bne.n	801acf0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801ace0:	687b      	ldr	r3, [r7, #4]
 801ace2:	681b      	ldr	r3, [r3, #0]
 801ace4:	f06f 0201 	mvn.w	r2, #1
 801ace8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801acea:	6878      	ldr	r0, [r7, #4]
 801acec:	f7e9 f85e 	bl	8003dac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801acf0:	687b      	ldr	r3, [r7, #4]
 801acf2:	681b      	ldr	r3, [r3, #0]
 801acf4:	691b      	ldr	r3, [r3, #16]
 801acf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801acfa:	2b80      	cmp	r3, #128	; 0x80
 801acfc:	d10e      	bne.n	801ad1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801acfe:	687b      	ldr	r3, [r7, #4]
 801ad00:	681b      	ldr	r3, [r3, #0]
 801ad02:	68db      	ldr	r3, [r3, #12]
 801ad04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ad08:	2b80      	cmp	r3, #128	; 0x80
 801ad0a:	d107      	bne.n	801ad1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801ad0c:	687b      	ldr	r3, [r7, #4]
 801ad0e:	681b      	ldr	r3, [r3, #0]
 801ad10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801ad14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801ad16:	6878      	ldr	r0, [r7, #4]
 801ad18:	f000 fd26 	bl	801b768 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801ad1c:	687b      	ldr	r3, [r7, #4]
 801ad1e:	681b      	ldr	r3, [r3, #0]
 801ad20:	691b      	ldr	r3, [r3, #16]
 801ad22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ad26:	2b40      	cmp	r3, #64	; 0x40
 801ad28:	d10e      	bne.n	801ad48 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801ad2a:	687b      	ldr	r3, [r7, #4]
 801ad2c:	681b      	ldr	r3, [r3, #0]
 801ad2e:	68db      	ldr	r3, [r3, #12]
 801ad30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ad34:	2b40      	cmp	r3, #64	; 0x40
 801ad36:	d107      	bne.n	801ad48 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801ad38:	687b      	ldr	r3, [r7, #4]
 801ad3a:	681b      	ldr	r3, [r3, #0]
 801ad3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801ad40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801ad42:	6878      	ldr	r0, [r7, #4]
 801ad44:	f000 f9c1 	bl	801b0ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801ad48:	687b      	ldr	r3, [r7, #4]
 801ad4a:	681b      	ldr	r3, [r3, #0]
 801ad4c:	691b      	ldr	r3, [r3, #16]
 801ad4e:	f003 0320 	and.w	r3, r3, #32
 801ad52:	2b20      	cmp	r3, #32
 801ad54:	d10e      	bne.n	801ad74 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801ad56:	687b      	ldr	r3, [r7, #4]
 801ad58:	681b      	ldr	r3, [r3, #0]
 801ad5a:	68db      	ldr	r3, [r3, #12]
 801ad5c:	f003 0320 	and.w	r3, r3, #32
 801ad60:	2b20      	cmp	r3, #32
 801ad62:	d107      	bne.n	801ad74 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801ad64:	687b      	ldr	r3, [r7, #4]
 801ad66:	681b      	ldr	r3, [r3, #0]
 801ad68:	f06f 0220 	mvn.w	r2, #32
 801ad6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801ad6e:	6878      	ldr	r0, [r7, #4]
 801ad70:	f000 fcf0 	bl	801b754 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801ad74:	bf00      	nop
 801ad76:	3708      	adds	r7, #8
 801ad78:	46bd      	mov	sp, r7
 801ad7a:	bd80      	pop	{r7, pc}

0801ad7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801ad7c:	b580      	push	{r7, lr}
 801ad7e:	b086      	sub	sp, #24
 801ad80:	af00      	add	r7, sp, #0
 801ad82:	60f8      	str	r0, [r7, #12]
 801ad84:	60b9      	str	r1, [r7, #8]
 801ad86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801ad88:	2300      	movs	r3, #0
 801ad8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801ad8c:	68fb      	ldr	r3, [r7, #12]
 801ad8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801ad92:	2b01      	cmp	r3, #1
 801ad94:	d101      	bne.n	801ad9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 801ad96:	2302      	movs	r3, #2
 801ad98:	e0ae      	b.n	801aef8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 801ad9a:	68fb      	ldr	r3, [r7, #12]
 801ad9c:	2201      	movs	r2, #1
 801ad9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801ada2:	687b      	ldr	r3, [r7, #4]
 801ada4:	2b0c      	cmp	r3, #12
 801ada6:	f200 809f 	bhi.w	801aee8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 801adaa:	a201      	add	r2, pc, #4	; (adr r2, 801adb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801adac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801adb0:	0801ade5 	.word	0x0801ade5
 801adb4:	0801aee9 	.word	0x0801aee9
 801adb8:	0801aee9 	.word	0x0801aee9
 801adbc:	0801aee9 	.word	0x0801aee9
 801adc0:	0801ae25 	.word	0x0801ae25
 801adc4:	0801aee9 	.word	0x0801aee9
 801adc8:	0801aee9 	.word	0x0801aee9
 801adcc:	0801aee9 	.word	0x0801aee9
 801add0:	0801ae67 	.word	0x0801ae67
 801add4:	0801aee9 	.word	0x0801aee9
 801add8:	0801aee9 	.word	0x0801aee9
 801addc:	0801aee9 	.word	0x0801aee9
 801ade0:	0801aea7 	.word	0x0801aea7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801ade4:	68fb      	ldr	r3, [r7, #12]
 801ade6:	681b      	ldr	r3, [r3, #0]
 801ade8:	68b9      	ldr	r1, [r7, #8]
 801adea:	4618      	mov	r0, r3
 801adec:	f000 f9f8 	bl	801b1e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801adf0:	68fb      	ldr	r3, [r7, #12]
 801adf2:	681b      	ldr	r3, [r3, #0]
 801adf4:	699a      	ldr	r2, [r3, #24]
 801adf6:	68fb      	ldr	r3, [r7, #12]
 801adf8:	681b      	ldr	r3, [r3, #0]
 801adfa:	f042 0208 	orr.w	r2, r2, #8
 801adfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801ae00:	68fb      	ldr	r3, [r7, #12]
 801ae02:	681b      	ldr	r3, [r3, #0]
 801ae04:	699a      	ldr	r2, [r3, #24]
 801ae06:	68fb      	ldr	r3, [r7, #12]
 801ae08:	681b      	ldr	r3, [r3, #0]
 801ae0a:	f022 0204 	bic.w	r2, r2, #4
 801ae0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801ae10:	68fb      	ldr	r3, [r7, #12]
 801ae12:	681b      	ldr	r3, [r3, #0]
 801ae14:	6999      	ldr	r1, [r3, #24]
 801ae16:	68bb      	ldr	r3, [r7, #8]
 801ae18:	691a      	ldr	r2, [r3, #16]
 801ae1a:	68fb      	ldr	r3, [r7, #12]
 801ae1c:	681b      	ldr	r3, [r3, #0]
 801ae1e:	430a      	orrs	r2, r1
 801ae20:	619a      	str	r2, [r3, #24]
      break;
 801ae22:	e064      	b.n	801aeee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801ae24:	68fb      	ldr	r3, [r7, #12]
 801ae26:	681b      	ldr	r3, [r3, #0]
 801ae28:	68b9      	ldr	r1, [r7, #8]
 801ae2a:	4618      	mov	r0, r3
 801ae2c:	f000 fa3e 	bl	801b2ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801ae30:	68fb      	ldr	r3, [r7, #12]
 801ae32:	681b      	ldr	r3, [r3, #0]
 801ae34:	699a      	ldr	r2, [r3, #24]
 801ae36:	68fb      	ldr	r3, [r7, #12]
 801ae38:	681b      	ldr	r3, [r3, #0]
 801ae3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801ae3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801ae40:	68fb      	ldr	r3, [r7, #12]
 801ae42:	681b      	ldr	r3, [r3, #0]
 801ae44:	699a      	ldr	r2, [r3, #24]
 801ae46:	68fb      	ldr	r3, [r7, #12]
 801ae48:	681b      	ldr	r3, [r3, #0]
 801ae4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ae4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801ae50:	68fb      	ldr	r3, [r7, #12]
 801ae52:	681b      	ldr	r3, [r3, #0]
 801ae54:	6999      	ldr	r1, [r3, #24]
 801ae56:	68bb      	ldr	r3, [r7, #8]
 801ae58:	691b      	ldr	r3, [r3, #16]
 801ae5a:	021a      	lsls	r2, r3, #8
 801ae5c:	68fb      	ldr	r3, [r7, #12]
 801ae5e:	681b      	ldr	r3, [r3, #0]
 801ae60:	430a      	orrs	r2, r1
 801ae62:	619a      	str	r2, [r3, #24]
      break;
 801ae64:	e043      	b.n	801aeee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801ae66:	68fb      	ldr	r3, [r7, #12]
 801ae68:	681b      	ldr	r3, [r3, #0]
 801ae6a:	68b9      	ldr	r1, [r7, #8]
 801ae6c:	4618      	mov	r0, r3
 801ae6e:	f000 fa89 	bl	801b384 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801ae72:	68fb      	ldr	r3, [r7, #12]
 801ae74:	681b      	ldr	r3, [r3, #0]
 801ae76:	69da      	ldr	r2, [r3, #28]
 801ae78:	68fb      	ldr	r3, [r7, #12]
 801ae7a:	681b      	ldr	r3, [r3, #0]
 801ae7c:	f042 0208 	orr.w	r2, r2, #8
 801ae80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801ae82:	68fb      	ldr	r3, [r7, #12]
 801ae84:	681b      	ldr	r3, [r3, #0]
 801ae86:	69da      	ldr	r2, [r3, #28]
 801ae88:	68fb      	ldr	r3, [r7, #12]
 801ae8a:	681b      	ldr	r3, [r3, #0]
 801ae8c:	f022 0204 	bic.w	r2, r2, #4
 801ae90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801ae92:	68fb      	ldr	r3, [r7, #12]
 801ae94:	681b      	ldr	r3, [r3, #0]
 801ae96:	69d9      	ldr	r1, [r3, #28]
 801ae98:	68bb      	ldr	r3, [r7, #8]
 801ae9a:	691a      	ldr	r2, [r3, #16]
 801ae9c:	68fb      	ldr	r3, [r7, #12]
 801ae9e:	681b      	ldr	r3, [r3, #0]
 801aea0:	430a      	orrs	r2, r1
 801aea2:	61da      	str	r2, [r3, #28]
      break;
 801aea4:	e023      	b.n	801aeee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801aea6:	68fb      	ldr	r3, [r7, #12]
 801aea8:	681b      	ldr	r3, [r3, #0]
 801aeaa:	68b9      	ldr	r1, [r7, #8]
 801aeac:	4618      	mov	r0, r3
 801aeae:	f000 fad3 	bl	801b458 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801aeb2:	68fb      	ldr	r3, [r7, #12]
 801aeb4:	681b      	ldr	r3, [r3, #0]
 801aeb6:	69da      	ldr	r2, [r3, #28]
 801aeb8:	68fb      	ldr	r3, [r7, #12]
 801aeba:	681b      	ldr	r3, [r3, #0]
 801aebc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801aec0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801aec2:	68fb      	ldr	r3, [r7, #12]
 801aec4:	681b      	ldr	r3, [r3, #0]
 801aec6:	69da      	ldr	r2, [r3, #28]
 801aec8:	68fb      	ldr	r3, [r7, #12]
 801aeca:	681b      	ldr	r3, [r3, #0]
 801aecc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801aed0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801aed2:	68fb      	ldr	r3, [r7, #12]
 801aed4:	681b      	ldr	r3, [r3, #0]
 801aed6:	69d9      	ldr	r1, [r3, #28]
 801aed8:	68bb      	ldr	r3, [r7, #8]
 801aeda:	691b      	ldr	r3, [r3, #16]
 801aedc:	021a      	lsls	r2, r3, #8
 801aede:	68fb      	ldr	r3, [r7, #12]
 801aee0:	681b      	ldr	r3, [r3, #0]
 801aee2:	430a      	orrs	r2, r1
 801aee4:	61da      	str	r2, [r3, #28]
      break;
 801aee6:	e002      	b.n	801aeee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 801aee8:	2301      	movs	r3, #1
 801aeea:	75fb      	strb	r3, [r7, #23]
      break;
 801aeec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801aeee:	68fb      	ldr	r3, [r7, #12]
 801aef0:	2200      	movs	r2, #0
 801aef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801aef6:	7dfb      	ldrb	r3, [r7, #23]
}
 801aef8:	4618      	mov	r0, r3
 801aefa:	3718      	adds	r7, #24
 801aefc:	46bd      	mov	sp, r7
 801aefe:	bd80      	pop	{r7, pc}

0801af00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801af00:	b580      	push	{r7, lr}
 801af02:	b084      	sub	sp, #16
 801af04:	af00      	add	r7, sp, #0
 801af06:	6078      	str	r0, [r7, #4]
 801af08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801af0a:	2300      	movs	r3, #0
 801af0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801af0e:	687b      	ldr	r3, [r7, #4]
 801af10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801af14:	2b01      	cmp	r3, #1
 801af16:	d101      	bne.n	801af1c <HAL_TIM_ConfigClockSource+0x1c>
 801af18:	2302      	movs	r3, #2
 801af1a:	e0b4      	b.n	801b086 <HAL_TIM_ConfigClockSource+0x186>
 801af1c:	687b      	ldr	r3, [r7, #4]
 801af1e:	2201      	movs	r2, #1
 801af20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801af24:	687b      	ldr	r3, [r7, #4]
 801af26:	2202      	movs	r2, #2
 801af28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801af2c:	687b      	ldr	r3, [r7, #4]
 801af2e:	681b      	ldr	r3, [r3, #0]
 801af30:	689b      	ldr	r3, [r3, #8]
 801af32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801af34:	68bb      	ldr	r3, [r7, #8]
 801af36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801af3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801af3c:	68bb      	ldr	r3, [r7, #8]
 801af3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801af42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801af44:	687b      	ldr	r3, [r7, #4]
 801af46:	681b      	ldr	r3, [r3, #0]
 801af48:	68ba      	ldr	r2, [r7, #8]
 801af4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801af4c:	683b      	ldr	r3, [r7, #0]
 801af4e:	681b      	ldr	r3, [r3, #0]
 801af50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801af54:	d03e      	beq.n	801afd4 <HAL_TIM_ConfigClockSource+0xd4>
 801af56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801af5a:	f200 8087 	bhi.w	801b06c <HAL_TIM_ConfigClockSource+0x16c>
 801af5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801af62:	f000 8086 	beq.w	801b072 <HAL_TIM_ConfigClockSource+0x172>
 801af66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801af6a:	d87f      	bhi.n	801b06c <HAL_TIM_ConfigClockSource+0x16c>
 801af6c:	2b70      	cmp	r3, #112	; 0x70
 801af6e:	d01a      	beq.n	801afa6 <HAL_TIM_ConfigClockSource+0xa6>
 801af70:	2b70      	cmp	r3, #112	; 0x70
 801af72:	d87b      	bhi.n	801b06c <HAL_TIM_ConfigClockSource+0x16c>
 801af74:	2b60      	cmp	r3, #96	; 0x60
 801af76:	d050      	beq.n	801b01a <HAL_TIM_ConfigClockSource+0x11a>
 801af78:	2b60      	cmp	r3, #96	; 0x60
 801af7a:	d877      	bhi.n	801b06c <HAL_TIM_ConfigClockSource+0x16c>
 801af7c:	2b50      	cmp	r3, #80	; 0x50
 801af7e:	d03c      	beq.n	801affa <HAL_TIM_ConfigClockSource+0xfa>
 801af80:	2b50      	cmp	r3, #80	; 0x50
 801af82:	d873      	bhi.n	801b06c <HAL_TIM_ConfigClockSource+0x16c>
 801af84:	2b40      	cmp	r3, #64	; 0x40
 801af86:	d058      	beq.n	801b03a <HAL_TIM_ConfigClockSource+0x13a>
 801af88:	2b40      	cmp	r3, #64	; 0x40
 801af8a:	d86f      	bhi.n	801b06c <HAL_TIM_ConfigClockSource+0x16c>
 801af8c:	2b30      	cmp	r3, #48	; 0x30
 801af8e:	d064      	beq.n	801b05a <HAL_TIM_ConfigClockSource+0x15a>
 801af90:	2b30      	cmp	r3, #48	; 0x30
 801af92:	d86b      	bhi.n	801b06c <HAL_TIM_ConfigClockSource+0x16c>
 801af94:	2b20      	cmp	r3, #32
 801af96:	d060      	beq.n	801b05a <HAL_TIM_ConfigClockSource+0x15a>
 801af98:	2b20      	cmp	r3, #32
 801af9a:	d867      	bhi.n	801b06c <HAL_TIM_ConfigClockSource+0x16c>
 801af9c:	2b00      	cmp	r3, #0
 801af9e:	d05c      	beq.n	801b05a <HAL_TIM_ConfigClockSource+0x15a>
 801afa0:	2b10      	cmp	r3, #16
 801afa2:	d05a      	beq.n	801b05a <HAL_TIM_ConfigClockSource+0x15a>
 801afa4:	e062      	b.n	801b06c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801afa6:	687b      	ldr	r3, [r7, #4]
 801afa8:	6818      	ldr	r0, [r3, #0]
 801afaa:	683b      	ldr	r3, [r7, #0]
 801afac:	6899      	ldr	r1, [r3, #8]
 801afae:	683b      	ldr	r3, [r7, #0]
 801afb0:	685a      	ldr	r2, [r3, #4]
 801afb2:	683b      	ldr	r3, [r7, #0]
 801afb4:	68db      	ldr	r3, [r3, #12]
 801afb6:	f000 fb19 	bl	801b5ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801afba:	687b      	ldr	r3, [r7, #4]
 801afbc:	681b      	ldr	r3, [r3, #0]
 801afbe:	689b      	ldr	r3, [r3, #8]
 801afc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801afc2:	68bb      	ldr	r3, [r7, #8]
 801afc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801afc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801afca:	687b      	ldr	r3, [r7, #4]
 801afcc:	681b      	ldr	r3, [r3, #0]
 801afce:	68ba      	ldr	r2, [r7, #8]
 801afd0:	609a      	str	r2, [r3, #8]
      break;
 801afd2:	e04f      	b.n	801b074 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801afd4:	687b      	ldr	r3, [r7, #4]
 801afd6:	6818      	ldr	r0, [r3, #0]
 801afd8:	683b      	ldr	r3, [r7, #0]
 801afda:	6899      	ldr	r1, [r3, #8]
 801afdc:	683b      	ldr	r3, [r7, #0]
 801afde:	685a      	ldr	r2, [r3, #4]
 801afe0:	683b      	ldr	r3, [r7, #0]
 801afe2:	68db      	ldr	r3, [r3, #12]
 801afe4:	f000 fb02 	bl	801b5ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801afe8:	687b      	ldr	r3, [r7, #4]
 801afea:	681b      	ldr	r3, [r3, #0]
 801afec:	689a      	ldr	r2, [r3, #8]
 801afee:	687b      	ldr	r3, [r7, #4]
 801aff0:	681b      	ldr	r3, [r3, #0]
 801aff2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801aff6:	609a      	str	r2, [r3, #8]
      break;
 801aff8:	e03c      	b.n	801b074 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801affa:	687b      	ldr	r3, [r7, #4]
 801affc:	6818      	ldr	r0, [r3, #0]
 801affe:	683b      	ldr	r3, [r7, #0]
 801b000:	6859      	ldr	r1, [r3, #4]
 801b002:	683b      	ldr	r3, [r7, #0]
 801b004:	68db      	ldr	r3, [r3, #12]
 801b006:	461a      	mov	r2, r3
 801b008:	f000 fa76 	bl	801b4f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801b00c:	687b      	ldr	r3, [r7, #4]
 801b00e:	681b      	ldr	r3, [r3, #0]
 801b010:	2150      	movs	r1, #80	; 0x50
 801b012:	4618      	mov	r0, r3
 801b014:	f000 facf 	bl	801b5b6 <TIM_ITRx_SetConfig>
      break;
 801b018:	e02c      	b.n	801b074 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801b01a:	687b      	ldr	r3, [r7, #4]
 801b01c:	6818      	ldr	r0, [r3, #0]
 801b01e:	683b      	ldr	r3, [r7, #0]
 801b020:	6859      	ldr	r1, [r3, #4]
 801b022:	683b      	ldr	r3, [r7, #0]
 801b024:	68db      	ldr	r3, [r3, #12]
 801b026:	461a      	mov	r2, r3
 801b028:	f000 fa95 	bl	801b556 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801b02c:	687b      	ldr	r3, [r7, #4]
 801b02e:	681b      	ldr	r3, [r3, #0]
 801b030:	2160      	movs	r1, #96	; 0x60
 801b032:	4618      	mov	r0, r3
 801b034:	f000 fabf 	bl	801b5b6 <TIM_ITRx_SetConfig>
      break;
 801b038:	e01c      	b.n	801b074 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801b03a:	687b      	ldr	r3, [r7, #4]
 801b03c:	6818      	ldr	r0, [r3, #0]
 801b03e:	683b      	ldr	r3, [r7, #0]
 801b040:	6859      	ldr	r1, [r3, #4]
 801b042:	683b      	ldr	r3, [r7, #0]
 801b044:	68db      	ldr	r3, [r3, #12]
 801b046:	461a      	mov	r2, r3
 801b048:	f000 fa56 	bl	801b4f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801b04c:	687b      	ldr	r3, [r7, #4]
 801b04e:	681b      	ldr	r3, [r3, #0]
 801b050:	2140      	movs	r1, #64	; 0x40
 801b052:	4618      	mov	r0, r3
 801b054:	f000 faaf 	bl	801b5b6 <TIM_ITRx_SetConfig>
      break;
 801b058:	e00c      	b.n	801b074 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801b05a:	687b      	ldr	r3, [r7, #4]
 801b05c:	681a      	ldr	r2, [r3, #0]
 801b05e:	683b      	ldr	r3, [r7, #0]
 801b060:	681b      	ldr	r3, [r3, #0]
 801b062:	4619      	mov	r1, r3
 801b064:	4610      	mov	r0, r2
 801b066:	f000 faa6 	bl	801b5b6 <TIM_ITRx_SetConfig>
      break;
 801b06a:	e003      	b.n	801b074 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 801b06c:	2301      	movs	r3, #1
 801b06e:	73fb      	strb	r3, [r7, #15]
      break;
 801b070:	e000      	b.n	801b074 <HAL_TIM_ConfigClockSource+0x174>
      break;
 801b072:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801b074:	687b      	ldr	r3, [r7, #4]
 801b076:	2201      	movs	r2, #1
 801b078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801b07c:	687b      	ldr	r3, [r7, #4]
 801b07e:	2200      	movs	r2, #0
 801b080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801b084:	7bfb      	ldrb	r3, [r7, #15]
}
 801b086:	4618      	mov	r0, r3
 801b088:	3710      	adds	r7, #16
 801b08a:	46bd      	mov	sp, r7
 801b08c:	bd80      	pop	{r7, pc}

0801b08e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801b08e:	b480      	push	{r7}
 801b090:	b083      	sub	sp, #12
 801b092:	af00      	add	r7, sp, #0
 801b094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801b096:	bf00      	nop
 801b098:	370c      	adds	r7, #12
 801b09a:	46bd      	mov	sp, r7
 801b09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0a0:	4770      	bx	lr

0801b0a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801b0a2:	b480      	push	{r7}
 801b0a4:	b083      	sub	sp, #12
 801b0a6:	af00      	add	r7, sp, #0
 801b0a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801b0aa:	bf00      	nop
 801b0ac:	370c      	adds	r7, #12
 801b0ae:	46bd      	mov	sp, r7
 801b0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0b4:	4770      	bx	lr

0801b0b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801b0b6:	b480      	push	{r7}
 801b0b8:	b083      	sub	sp, #12
 801b0ba:	af00      	add	r7, sp, #0
 801b0bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801b0be:	bf00      	nop
 801b0c0:	370c      	adds	r7, #12
 801b0c2:	46bd      	mov	sp, r7
 801b0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0c8:	4770      	bx	lr

0801b0ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801b0ca:	b480      	push	{r7}
 801b0cc:	b083      	sub	sp, #12
 801b0ce:	af00      	add	r7, sp, #0
 801b0d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801b0d2:	bf00      	nop
 801b0d4:	370c      	adds	r7, #12
 801b0d6:	46bd      	mov	sp, r7
 801b0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0dc:	4770      	bx	lr
	...

0801b0e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801b0e0:	b480      	push	{r7}
 801b0e2:	b085      	sub	sp, #20
 801b0e4:	af00      	add	r7, sp, #0
 801b0e6:	6078      	str	r0, [r7, #4]
 801b0e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801b0ea:	687b      	ldr	r3, [r7, #4]
 801b0ec:	681b      	ldr	r3, [r3, #0]
 801b0ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801b0f0:	687b      	ldr	r3, [r7, #4]
 801b0f2:	4a34      	ldr	r2, [pc, #208]	; (801b1c4 <TIM_Base_SetConfig+0xe4>)
 801b0f4:	4293      	cmp	r3, r2
 801b0f6:	d00f      	beq.n	801b118 <TIM_Base_SetConfig+0x38>
 801b0f8:	687b      	ldr	r3, [r7, #4]
 801b0fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b0fe:	d00b      	beq.n	801b118 <TIM_Base_SetConfig+0x38>
 801b100:	687b      	ldr	r3, [r7, #4]
 801b102:	4a31      	ldr	r2, [pc, #196]	; (801b1c8 <TIM_Base_SetConfig+0xe8>)
 801b104:	4293      	cmp	r3, r2
 801b106:	d007      	beq.n	801b118 <TIM_Base_SetConfig+0x38>
 801b108:	687b      	ldr	r3, [r7, #4]
 801b10a:	4a30      	ldr	r2, [pc, #192]	; (801b1cc <TIM_Base_SetConfig+0xec>)
 801b10c:	4293      	cmp	r3, r2
 801b10e:	d003      	beq.n	801b118 <TIM_Base_SetConfig+0x38>
 801b110:	687b      	ldr	r3, [r7, #4]
 801b112:	4a2f      	ldr	r2, [pc, #188]	; (801b1d0 <TIM_Base_SetConfig+0xf0>)
 801b114:	4293      	cmp	r3, r2
 801b116:	d108      	bne.n	801b12a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801b118:	68fb      	ldr	r3, [r7, #12]
 801b11a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b11e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801b120:	683b      	ldr	r3, [r7, #0]
 801b122:	685b      	ldr	r3, [r3, #4]
 801b124:	68fa      	ldr	r2, [r7, #12]
 801b126:	4313      	orrs	r3, r2
 801b128:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801b12a:	687b      	ldr	r3, [r7, #4]
 801b12c:	4a25      	ldr	r2, [pc, #148]	; (801b1c4 <TIM_Base_SetConfig+0xe4>)
 801b12e:	4293      	cmp	r3, r2
 801b130:	d01b      	beq.n	801b16a <TIM_Base_SetConfig+0x8a>
 801b132:	687b      	ldr	r3, [r7, #4]
 801b134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b138:	d017      	beq.n	801b16a <TIM_Base_SetConfig+0x8a>
 801b13a:	687b      	ldr	r3, [r7, #4]
 801b13c:	4a22      	ldr	r2, [pc, #136]	; (801b1c8 <TIM_Base_SetConfig+0xe8>)
 801b13e:	4293      	cmp	r3, r2
 801b140:	d013      	beq.n	801b16a <TIM_Base_SetConfig+0x8a>
 801b142:	687b      	ldr	r3, [r7, #4]
 801b144:	4a21      	ldr	r2, [pc, #132]	; (801b1cc <TIM_Base_SetConfig+0xec>)
 801b146:	4293      	cmp	r3, r2
 801b148:	d00f      	beq.n	801b16a <TIM_Base_SetConfig+0x8a>
 801b14a:	687b      	ldr	r3, [r7, #4]
 801b14c:	4a20      	ldr	r2, [pc, #128]	; (801b1d0 <TIM_Base_SetConfig+0xf0>)
 801b14e:	4293      	cmp	r3, r2
 801b150:	d00b      	beq.n	801b16a <TIM_Base_SetConfig+0x8a>
 801b152:	687b      	ldr	r3, [r7, #4]
 801b154:	4a1f      	ldr	r2, [pc, #124]	; (801b1d4 <TIM_Base_SetConfig+0xf4>)
 801b156:	4293      	cmp	r3, r2
 801b158:	d007      	beq.n	801b16a <TIM_Base_SetConfig+0x8a>
 801b15a:	687b      	ldr	r3, [r7, #4]
 801b15c:	4a1e      	ldr	r2, [pc, #120]	; (801b1d8 <TIM_Base_SetConfig+0xf8>)
 801b15e:	4293      	cmp	r3, r2
 801b160:	d003      	beq.n	801b16a <TIM_Base_SetConfig+0x8a>
 801b162:	687b      	ldr	r3, [r7, #4]
 801b164:	4a1d      	ldr	r2, [pc, #116]	; (801b1dc <TIM_Base_SetConfig+0xfc>)
 801b166:	4293      	cmp	r3, r2
 801b168:	d108      	bne.n	801b17c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801b16a:	68fb      	ldr	r3, [r7, #12]
 801b16c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b170:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801b172:	683b      	ldr	r3, [r7, #0]
 801b174:	68db      	ldr	r3, [r3, #12]
 801b176:	68fa      	ldr	r2, [r7, #12]
 801b178:	4313      	orrs	r3, r2
 801b17a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801b17c:	68fb      	ldr	r3, [r7, #12]
 801b17e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801b182:	683b      	ldr	r3, [r7, #0]
 801b184:	695b      	ldr	r3, [r3, #20]
 801b186:	4313      	orrs	r3, r2
 801b188:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801b18a:	687b      	ldr	r3, [r7, #4]
 801b18c:	68fa      	ldr	r2, [r7, #12]
 801b18e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801b190:	683b      	ldr	r3, [r7, #0]
 801b192:	689a      	ldr	r2, [r3, #8]
 801b194:	687b      	ldr	r3, [r7, #4]
 801b196:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801b198:	683b      	ldr	r3, [r7, #0]
 801b19a:	681a      	ldr	r2, [r3, #0]
 801b19c:	687b      	ldr	r3, [r7, #4]
 801b19e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801b1a0:	687b      	ldr	r3, [r7, #4]
 801b1a2:	4a08      	ldr	r2, [pc, #32]	; (801b1c4 <TIM_Base_SetConfig+0xe4>)
 801b1a4:	4293      	cmp	r3, r2
 801b1a6:	d103      	bne.n	801b1b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801b1a8:	683b      	ldr	r3, [r7, #0]
 801b1aa:	691a      	ldr	r2, [r3, #16]
 801b1ac:	687b      	ldr	r3, [r7, #4]
 801b1ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801b1b0:	687b      	ldr	r3, [r7, #4]
 801b1b2:	2201      	movs	r2, #1
 801b1b4:	615a      	str	r2, [r3, #20]
}
 801b1b6:	bf00      	nop
 801b1b8:	3714      	adds	r7, #20
 801b1ba:	46bd      	mov	sp, r7
 801b1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1c0:	4770      	bx	lr
 801b1c2:	bf00      	nop
 801b1c4:	40010000 	.word	0x40010000
 801b1c8:	40000400 	.word	0x40000400
 801b1cc:	40000800 	.word	0x40000800
 801b1d0:	40000c00 	.word	0x40000c00
 801b1d4:	40014000 	.word	0x40014000
 801b1d8:	40014400 	.word	0x40014400
 801b1dc:	40014800 	.word	0x40014800

0801b1e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801b1e0:	b480      	push	{r7}
 801b1e2:	b087      	sub	sp, #28
 801b1e4:	af00      	add	r7, sp, #0
 801b1e6:	6078      	str	r0, [r7, #4]
 801b1e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801b1ea:	687b      	ldr	r3, [r7, #4]
 801b1ec:	6a1b      	ldr	r3, [r3, #32]
 801b1ee:	f023 0201 	bic.w	r2, r3, #1
 801b1f2:	687b      	ldr	r3, [r7, #4]
 801b1f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b1f6:	687b      	ldr	r3, [r7, #4]
 801b1f8:	6a1b      	ldr	r3, [r3, #32]
 801b1fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b1fc:	687b      	ldr	r3, [r7, #4]
 801b1fe:	685b      	ldr	r3, [r3, #4]
 801b200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801b202:	687b      	ldr	r3, [r7, #4]
 801b204:	699b      	ldr	r3, [r3, #24]
 801b206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801b208:	68fb      	ldr	r3, [r7, #12]
 801b20a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b20e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801b210:	68fb      	ldr	r3, [r7, #12]
 801b212:	f023 0303 	bic.w	r3, r3, #3
 801b216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801b218:	683b      	ldr	r3, [r7, #0]
 801b21a:	681b      	ldr	r3, [r3, #0]
 801b21c:	68fa      	ldr	r2, [r7, #12]
 801b21e:	4313      	orrs	r3, r2
 801b220:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801b222:	697b      	ldr	r3, [r7, #20]
 801b224:	f023 0302 	bic.w	r3, r3, #2
 801b228:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801b22a:	683b      	ldr	r3, [r7, #0]
 801b22c:	689b      	ldr	r3, [r3, #8]
 801b22e:	697a      	ldr	r2, [r7, #20]
 801b230:	4313      	orrs	r3, r2
 801b232:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801b234:	687b      	ldr	r3, [r7, #4]
 801b236:	4a1c      	ldr	r2, [pc, #112]	; (801b2a8 <TIM_OC1_SetConfig+0xc8>)
 801b238:	4293      	cmp	r3, r2
 801b23a:	d10c      	bne.n	801b256 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801b23c:	697b      	ldr	r3, [r7, #20]
 801b23e:	f023 0308 	bic.w	r3, r3, #8
 801b242:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801b244:	683b      	ldr	r3, [r7, #0]
 801b246:	68db      	ldr	r3, [r3, #12]
 801b248:	697a      	ldr	r2, [r7, #20]
 801b24a:	4313      	orrs	r3, r2
 801b24c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801b24e:	697b      	ldr	r3, [r7, #20]
 801b250:	f023 0304 	bic.w	r3, r3, #4
 801b254:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b256:	687b      	ldr	r3, [r7, #4]
 801b258:	4a13      	ldr	r2, [pc, #76]	; (801b2a8 <TIM_OC1_SetConfig+0xc8>)
 801b25a:	4293      	cmp	r3, r2
 801b25c:	d111      	bne.n	801b282 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801b25e:	693b      	ldr	r3, [r7, #16]
 801b260:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b264:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801b266:	693b      	ldr	r3, [r7, #16]
 801b268:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801b26c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801b26e:	683b      	ldr	r3, [r7, #0]
 801b270:	695b      	ldr	r3, [r3, #20]
 801b272:	693a      	ldr	r2, [r7, #16]
 801b274:	4313      	orrs	r3, r2
 801b276:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801b278:	683b      	ldr	r3, [r7, #0]
 801b27a:	699b      	ldr	r3, [r3, #24]
 801b27c:	693a      	ldr	r2, [r7, #16]
 801b27e:	4313      	orrs	r3, r2
 801b280:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b282:	687b      	ldr	r3, [r7, #4]
 801b284:	693a      	ldr	r2, [r7, #16]
 801b286:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801b288:	687b      	ldr	r3, [r7, #4]
 801b28a:	68fa      	ldr	r2, [r7, #12]
 801b28c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801b28e:	683b      	ldr	r3, [r7, #0]
 801b290:	685a      	ldr	r2, [r3, #4]
 801b292:	687b      	ldr	r3, [r7, #4]
 801b294:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b296:	687b      	ldr	r3, [r7, #4]
 801b298:	697a      	ldr	r2, [r7, #20]
 801b29a:	621a      	str	r2, [r3, #32]
}
 801b29c:	bf00      	nop
 801b29e:	371c      	adds	r7, #28
 801b2a0:	46bd      	mov	sp, r7
 801b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2a6:	4770      	bx	lr
 801b2a8:	40010000 	.word	0x40010000

0801b2ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801b2ac:	b480      	push	{r7}
 801b2ae:	b087      	sub	sp, #28
 801b2b0:	af00      	add	r7, sp, #0
 801b2b2:	6078      	str	r0, [r7, #4]
 801b2b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801b2b6:	687b      	ldr	r3, [r7, #4]
 801b2b8:	6a1b      	ldr	r3, [r3, #32]
 801b2ba:	f023 0210 	bic.w	r2, r3, #16
 801b2be:	687b      	ldr	r3, [r7, #4]
 801b2c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b2c2:	687b      	ldr	r3, [r7, #4]
 801b2c4:	6a1b      	ldr	r3, [r3, #32]
 801b2c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b2c8:	687b      	ldr	r3, [r7, #4]
 801b2ca:	685b      	ldr	r3, [r3, #4]
 801b2cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801b2ce:	687b      	ldr	r3, [r7, #4]
 801b2d0:	699b      	ldr	r3, [r3, #24]
 801b2d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801b2d4:	68fb      	ldr	r3, [r7, #12]
 801b2d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801b2da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801b2dc:	68fb      	ldr	r3, [r7, #12]
 801b2de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b2e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801b2e4:	683b      	ldr	r3, [r7, #0]
 801b2e6:	681b      	ldr	r3, [r3, #0]
 801b2e8:	021b      	lsls	r3, r3, #8
 801b2ea:	68fa      	ldr	r2, [r7, #12]
 801b2ec:	4313      	orrs	r3, r2
 801b2ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801b2f0:	697b      	ldr	r3, [r7, #20]
 801b2f2:	f023 0320 	bic.w	r3, r3, #32
 801b2f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801b2f8:	683b      	ldr	r3, [r7, #0]
 801b2fa:	689b      	ldr	r3, [r3, #8]
 801b2fc:	011b      	lsls	r3, r3, #4
 801b2fe:	697a      	ldr	r2, [r7, #20]
 801b300:	4313      	orrs	r3, r2
 801b302:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801b304:	687b      	ldr	r3, [r7, #4]
 801b306:	4a1e      	ldr	r2, [pc, #120]	; (801b380 <TIM_OC2_SetConfig+0xd4>)
 801b308:	4293      	cmp	r3, r2
 801b30a:	d10d      	bne.n	801b328 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801b30c:	697b      	ldr	r3, [r7, #20]
 801b30e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b312:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801b314:	683b      	ldr	r3, [r7, #0]
 801b316:	68db      	ldr	r3, [r3, #12]
 801b318:	011b      	lsls	r3, r3, #4
 801b31a:	697a      	ldr	r2, [r7, #20]
 801b31c:	4313      	orrs	r3, r2
 801b31e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801b320:	697b      	ldr	r3, [r7, #20]
 801b322:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b326:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b328:	687b      	ldr	r3, [r7, #4]
 801b32a:	4a15      	ldr	r2, [pc, #84]	; (801b380 <TIM_OC2_SetConfig+0xd4>)
 801b32c:	4293      	cmp	r3, r2
 801b32e:	d113      	bne.n	801b358 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801b330:	693b      	ldr	r3, [r7, #16]
 801b332:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801b336:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801b338:	693b      	ldr	r3, [r7, #16]
 801b33a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b33e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801b340:	683b      	ldr	r3, [r7, #0]
 801b342:	695b      	ldr	r3, [r3, #20]
 801b344:	009b      	lsls	r3, r3, #2
 801b346:	693a      	ldr	r2, [r7, #16]
 801b348:	4313      	orrs	r3, r2
 801b34a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801b34c:	683b      	ldr	r3, [r7, #0]
 801b34e:	699b      	ldr	r3, [r3, #24]
 801b350:	009b      	lsls	r3, r3, #2
 801b352:	693a      	ldr	r2, [r7, #16]
 801b354:	4313      	orrs	r3, r2
 801b356:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b358:	687b      	ldr	r3, [r7, #4]
 801b35a:	693a      	ldr	r2, [r7, #16]
 801b35c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801b35e:	687b      	ldr	r3, [r7, #4]
 801b360:	68fa      	ldr	r2, [r7, #12]
 801b362:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801b364:	683b      	ldr	r3, [r7, #0]
 801b366:	685a      	ldr	r2, [r3, #4]
 801b368:	687b      	ldr	r3, [r7, #4]
 801b36a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b36c:	687b      	ldr	r3, [r7, #4]
 801b36e:	697a      	ldr	r2, [r7, #20]
 801b370:	621a      	str	r2, [r3, #32]
}
 801b372:	bf00      	nop
 801b374:	371c      	adds	r7, #28
 801b376:	46bd      	mov	sp, r7
 801b378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b37c:	4770      	bx	lr
 801b37e:	bf00      	nop
 801b380:	40010000 	.word	0x40010000

0801b384 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801b384:	b480      	push	{r7}
 801b386:	b087      	sub	sp, #28
 801b388:	af00      	add	r7, sp, #0
 801b38a:	6078      	str	r0, [r7, #4]
 801b38c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801b38e:	687b      	ldr	r3, [r7, #4]
 801b390:	6a1b      	ldr	r3, [r3, #32]
 801b392:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801b396:	687b      	ldr	r3, [r7, #4]
 801b398:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b39a:	687b      	ldr	r3, [r7, #4]
 801b39c:	6a1b      	ldr	r3, [r3, #32]
 801b39e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b3a0:	687b      	ldr	r3, [r7, #4]
 801b3a2:	685b      	ldr	r3, [r3, #4]
 801b3a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801b3a6:	687b      	ldr	r3, [r7, #4]
 801b3a8:	69db      	ldr	r3, [r3, #28]
 801b3aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801b3ac:	68fb      	ldr	r3, [r7, #12]
 801b3ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b3b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801b3b4:	68fb      	ldr	r3, [r7, #12]
 801b3b6:	f023 0303 	bic.w	r3, r3, #3
 801b3ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801b3bc:	683b      	ldr	r3, [r7, #0]
 801b3be:	681b      	ldr	r3, [r3, #0]
 801b3c0:	68fa      	ldr	r2, [r7, #12]
 801b3c2:	4313      	orrs	r3, r2
 801b3c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801b3c6:	697b      	ldr	r3, [r7, #20]
 801b3c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801b3cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801b3ce:	683b      	ldr	r3, [r7, #0]
 801b3d0:	689b      	ldr	r3, [r3, #8]
 801b3d2:	021b      	lsls	r3, r3, #8
 801b3d4:	697a      	ldr	r2, [r7, #20]
 801b3d6:	4313      	orrs	r3, r2
 801b3d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801b3da:	687b      	ldr	r3, [r7, #4]
 801b3dc:	4a1d      	ldr	r2, [pc, #116]	; (801b454 <TIM_OC3_SetConfig+0xd0>)
 801b3de:	4293      	cmp	r3, r2
 801b3e0:	d10d      	bne.n	801b3fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801b3e2:	697b      	ldr	r3, [r7, #20]
 801b3e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b3e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801b3ea:	683b      	ldr	r3, [r7, #0]
 801b3ec:	68db      	ldr	r3, [r3, #12]
 801b3ee:	021b      	lsls	r3, r3, #8
 801b3f0:	697a      	ldr	r2, [r7, #20]
 801b3f2:	4313      	orrs	r3, r2
 801b3f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801b3f6:	697b      	ldr	r3, [r7, #20]
 801b3f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801b3fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b3fe:	687b      	ldr	r3, [r7, #4]
 801b400:	4a14      	ldr	r2, [pc, #80]	; (801b454 <TIM_OC3_SetConfig+0xd0>)
 801b402:	4293      	cmp	r3, r2
 801b404:	d113      	bne.n	801b42e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801b406:	693b      	ldr	r3, [r7, #16]
 801b408:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b40c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801b40e:	693b      	ldr	r3, [r7, #16]
 801b410:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801b414:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801b416:	683b      	ldr	r3, [r7, #0]
 801b418:	695b      	ldr	r3, [r3, #20]
 801b41a:	011b      	lsls	r3, r3, #4
 801b41c:	693a      	ldr	r2, [r7, #16]
 801b41e:	4313      	orrs	r3, r2
 801b420:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801b422:	683b      	ldr	r3, [r7, #0]
 801b424:	699b      	ldr	r3, [r3, #24]
 801b426:	011b      	lsls	r3, r3, #4
 801b428:	693a      	ldr	r2, [r7, #16]
 801b42a:	4313      	orrs	r3, r2
 801b42c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b42e:	687b      	ldr	r3, [r7, #4]
 801b430:	693a      	ldr	r2, [r7, #16]
 801b432:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801b434:	687b      	ldr	r3, [r7, #4]
 801b436:	68fa      	ldr	r2, [r7, #12]
 801b438:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801b43a:	683b      	ldr	r3, [r7, #0]
 801b43c:	685a      	ldr	r2, [r3, #4]
 801b43e:	687b      	ldr	r3, [r7, #4]
 801b440:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b442:	687b      	ldr	r3, [r7, #4]
 801b444:	697a      	ldr	r2, [r7, #20]
 801b446:	621a      	str	r2, [r3, #32]
}
 801b448:	bf00      	nop
 801b44a:	371c      	adds	r7, #28
 801b44c:	46bd      	mov	sp, r7
 801b44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b452:	4770      	bx	lr
 801b454:	40010000 	.word	0x40010000

0801b458 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801b458:	b480      	push	{r7}
 801b45a:	b087      	sub	sp, #28
 801b45c:	af00      	add	r7, sp, #0
 801b45e:	6078      	str	r0, [r7, #4]
 801b460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801b462:	687b      	ldr	r3, [r7, #4]
 801b464:	6a1b      	ldr	r3, [r3, #32]
 801b466:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801b46a:	687b      	ldr	r3, [r7, #4]
 801b46c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b46e:	687b      	ldr	r3, [r7, #4]
 801b470:	6a1b      	ldr	r3, [r3, #32]
 801b472:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b474:	687b      	ldr	r3, [r7, #4]
 801b476:	685b      	ldr	r3, [r3, #4]
 801b478:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801b47a:	687b      	ldr	r3, [r7, #4]
 801b47c:	69db      	ldr	r3, [r3, #28]
 801b47e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801b480:	68fb      	ldr	r3, [r7, #12]
 801b482:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801b486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801b488:	68fb      	ldr	r3, [r7, #12]
 801b48a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b48e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801b490:	683b      	ldr	r3, [r7, #0]
 801b492:	681b      	ldr	r3, [r3, #0]
 801b494:	021b      	lsls	r3, r3, #8
 801b496:	68fa      	ldr	r2, [r7, #12]
 801b498:	4313      	orrs	r3, r2
 801b49a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801b49c:	693b      	ldr	r3, [r7, #16]
 801b49e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801b4a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801b4a4:	683b      	ldr	r3, [r7, #0]
 801b4a6:	689b      	ldr	r3, [r3, #8]
 801b4a8:	031b      	lsls	r3, r3, #12
 801b4aa:	693a      	ldr	r2, [r7, #16]
 801b4ac:	4313      	orrs	r3, r2
 801b4ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b4b0:	687b      	ldr	r3, [r7, #4]
 801b4b2:	4a10      	ldr	r2, [pc, #64]	; (801b4f4 <TIM_OC4_SetConfig+0x9c>)
 801b4b4:	4293      	cmp	r3, r2
 801b4b6:	d109      	bne.n	801b4cc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801b4b8:	697b      	ldr	r3, [r7, #20]
 801b4ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801b4be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801b4c0:	683b      	ldr	r3, [r7, #0]
 801b4c2:	695b      	ldr	r3, [r3, #20]
 801b4c4:	019b      	lsls	r3, r3, #6
 801b4c6:	697a      	ldr	r2, [r7, #20]
 801b4c8:	4313      	orrs	r3, r2
 801b4ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b4cc:	687b      	ldr	r3, [r7, #4]
 801b4ce:	697a      	ldr	r2, [r7, #20]
 801b4d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801b4d2:	687b      	ldr	r3, [r7, #4]
 801b4d4:	68fa      	ldr	r2, [r7, #12]
 801b4d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801b4d8:	683b      	ldr	r3, [r7, #0]
 801b4da:	685a      	ldr	r2, [r3, #4]
 801b4dc:	687b      	ldr	r3, [r7, #4]
 801b4de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b4e0:	687b      	ldr	r3, [r7, #4]
 801b4e2:	693a      	ldr	r2, [r7, #16]
 801b4e4:	621a      	str	r2, [r3, #32]
}
 801b4e6:	bf00      	nop
 801b4e8:	371c      	adds	r7, #28
 801b4ea:	46bd      	mov	sp, r7
 801b4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4f0:	4770      	bx	lr
 801b4f2:	bf00      	nop
 801b4f4:	40010000 	.word	0x40010000

0801b4f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801b4f8:	b480      	push	{r7}
 801b4fa:	b087      	sub	sp, #28
 801b4fc:	af00      	add	r7, sp, #0
 801b4fe:	60f8      	str	r0, [r7, #12]
 801b500:	60b9      	str	r1, [r7, #8]
 801b502:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801b504:	68fb      	ldr	r3, [r7, #12]
 801b506:	6a1b      	ldr	r3, [r3, #32]
 801b508:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801b50a:	68fb      	ldr	r3, [r7, #12]
 801b50c:	6a1b      	ldr	r3, [r3, #32]
 801b50e:	f023 0201 	bic.w	r2, r3, #1
 801b512:	68fb      	ldr	r3, [r7, #12]
 801b514:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801b516:	68fb      	ldr	r3, [r7, #12]
 801b518:	699b      	ldr	r3, [r3, #24]
 801b51a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801b51c:	693b      	ldr	r3, [r7, #16]
 801b51e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801b522:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801b524:	687b      	ldr	r3, [r7, #4]
 801b526:	011b      	lsls	r3, r3, #4
 801b528:	693a      	ldr	r2, [r7, #16]
 801b52a:	4313      	orrs	r3, r2
 801b52c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801b52e:	697b      	ldr	r3, [r7, #20]
 801b530:	f023 030a 	bic.w	r3, r3, #10
 801b534:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801b536:	697a      	ldr	r2, [r7, #20]
 801b538:	68bb      	ldr	r3, [r7, #8]
 801b53a:	4313      	orrs	r3, r2
 801b53c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801b53e:	68fb      	ldr	r3, [r7, #12]
 801b540:	693a      	ldr	r2, [r7, #16]
 801b542:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801b544:	68fb      	ldr	r3, [r7, #12]
 801b546:	697a      	ldr	r2, [r7, #20]
 801b548:	621a      	str	r2, [r3, #32]
}
 801b54a:	bf00      	nop
 801b54c:	371c      	adds	r7, #28
 801b54e:	46bd      	mov	sp, r7
 801b550:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b554:	4770      	bx	lr

0801b556 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801b556:	b480      	push	{r7}
 801b558:	b087      	sub	sp, #28
 801b55a:	af00      	add	r7, sp, #0
 801b55c:	60f8      	str	r0, [r7, #12]
 801b55e:	60b9      	str	r1, [r7, #8]
 801b560:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801b562:	68fb      	ldr	r3, [r7, #12]
 801b564:	6a1b      	ldr	r3, [r3, #32]
 801b566:	f023 0210 	bic.w	r2, r3, #16
 801b56a:	68fb      	ldr	r3, [r7, #12]
 801b56c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801b56e:	68fb      	ldr	r3, [r7, #12]
 801b570:	699b      	ldr	r3, [r3, #24]
 801b572:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801b574:	68fb      	ldr	r3, [r7, #12]
 801b576:	6a1b      	ldr	r3, [r3, #32]
 801b578:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801b57a:	697b      	ldr	r3, [r7, #20]
 801b57c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801b580:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801b582:	687b      	ldr	r3, [r7, #4]
 801b584:	031b      	lsls	r3, r3, #12
 801b586:	697a      	ldr	r2, [r7, #20]
 801b588:	4313      	orrs	r3, r2
 801b58a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801b58c:	693b      	ldr	r3, [r7, #16]
 801b58e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801b592:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801b594:	68bb      	ldr	r3, [r7, #8]
 801b596:	011b      	lsls	r3, r3, #4
 801b598:	693a      	ldr	r2, [r7, #16]
 801b59a:	4313      	orrs	r3, r2
 801b59c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801b59e:	68fb      	ldr	r3, [r7, #12]
 801b5a0:	697a      	ldr	r2, [r7, #20]
 801b5a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801b5a4:	68fb      	ldr	r3, [r7, #12]
 801b5a6:	693a      	ldr	r2, [r7, #16]
 801b5a8:	621a      	str	r2, [r3, #32]
}
 801b5aa:	bf00      	nop
 801b5ac:	371c      	adds	r7, #28
 801b5ae:	46bd      	mov	sp, r7
 801b5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5b4:	4770      	bx	lr

0801b5b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801b5b6:	b480      	push	{r7}
 801b5b8:	b085      	sub	sp, #20
 801b5ba:	af00      	add	r7, sp, #0
 801b5bc:	6078      	str	r0, [r7, #4]
 801b5be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801b5c0:	687b      	ldr	r3, [r7, #4]
 801b5c2:	689b      	ldr	r3, [r3, #8]
 801b5c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801b5c6:	68fb      	ldr	r3, [r7, #12]
 801b5c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b5cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801b5ce:	683a      	ldr	r2, [r7, #0]
 801b5d0:	68fb      	ldr	r3, [r7, #12]
 801b5d2:	4313      	orrs	r3, r2
 801b5d4:	f043 0307 	orr.w	r3, r3, #7
 801b5d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801b5da:	687b      	ldr	r3, [r7, #4]
 801b5dc:	68fa      	ldr	r2, [r7, #12]
 801b5de:	609a      	str	r2, [r3, #8]
}
 801b5e0:	bf00      	nop
 801b5e2:	3714      	adds	r7, #20
 801b5e4:	46bd      	mov	sp, r7
 801b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5ea:	4770      	bx	lr

0801b5ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801b5ec:	b480      	push	{r7}
 801b5ee:	b087      	sub	sp, #28
 801b5f0:	af00      	add	r7, sp, #0
 801b5f2:	60f8      	str	r0, [r7, #12]
 801b5f4:	60b9      	str	r1, [r7, #8]
 801b5f6:	607a      	str	r2, [r7, #4]
 801b5f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801b5fa:	68fb      	ldr	r3, [r7, #12]
 801b5fc:	689b      	ldr	r3, [r3, #8]
 801b5fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801b600:	697b      	ldr	r3, [r7, #20]
 801b602:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801b606:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801b608:	683b      	ldr	r3, [r7, #0]
 801b60a:	021a      	lsls	r2, r3, #8
 801b60c:	687b      	ldr	r3, [r7, #4]
 801b60e:	431a      	orrs	r2, r3
 801b610:	68bb      	ldr	r3, [r7, #8]
 801b612:	4313      	orrs	r3, r2
 801b614:	697a      	ldr	r2, [r7, #20]
 801b616:	4313      	orrs	r3, r2
 801b618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801b61a:	68fb      	ldr	r3, [r7, #12]
 801b61c:	697a      	ldr	r2, [r7, #20]
 801b61e:	609a      	str	r2, [r3, #8]
}
 801b620:	bf00      	nop
 801b622:	371c      	adds	r7, #28
 801b624:	46bd      	mov	sp, r7
 801b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b62a:	4770      	bx	lr

0801b62c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801b62c:	b480      	push	{r7}
 801b62e:	b087      	sub	sp, #28
 801b630:	af00      	add	r7, sp, #0
 801b632:	60f8      	str	r0, [r7, #12]
 801b634:	60b9      	str	r1, [r7, #8]
 801b636:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801b638:	68bb      	ldr	r3, [r7, #8]
 801b63a:	f003 031f 	and.w	r3, r3, #31
 801b63e:	2201      	movs	r2, #1
 801b640:	fa02 f303 	lsl.w	r3, r2, r3
 801b644:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801b646:	68fb      	ldr	r3, [r7, #12]
 801b648:	6a1a      	ldr	r2, [r3, #32]
 801b64a:	697b      	ldr	r3, [r7, #20]
 801b64c:	43db      	mvns	r3, r3
 801b64e:	401a      	ands	r2, r3
 801b650:	68fb      	ldr	r3, [r7, #12]
 801b652:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801b654:	68fb      	ldr	r3, [r7, #12]
 801b656:	6a1a      	ldr	r2, [r3, #32]
 801b658:	68bb      	ldr	r3, [r7, #8]
 801b65a:	f003 031f 	and.w	r3, r3, #31
 801b65e:	6879      	ldr	r1, [r7, #4]
 801b660:	fa01 f303 	lsl.w	r3, r1, r3
 801b664:	431a      	orrs	r2, r3
 801b666:	68fb      	ldr	r3, [r7, #12]
 801b668:	621a      	str	r2, [r3, #32]
}
 801b66a:	bf00      	nop
 801b66c:	371c      	adds	r7, #28
 801b66e:	46bd      	mov	sp, r7
 801b670:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b674:	4770      	bx	lr
	...

0801b678 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801b678:	b480      	push	{r7}
 801b67a:	b085      	sub	sp, #20
 801b67c:	af00      	add	r7, sp, #0
 801b67e:	6078      	str	r0, [r7, #4]
 801b680:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801b682:	687b      	ldr	r3, [r7, #4]
 801b684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801b688:	2b01      	cmp	r3, #1
 801b68a:	d101      	bne.n	801b690 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801b68c:	2302      	movs	r3, #2
 801b68e:	e050      	b.n	801b732 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 801b690:	687b      	ldr	r3, [r7, #4]
 801b692:	2201      	movs	r2, #1
 801b694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801b698:	687b      	ldr	r3, [r7, #4]
 801b69a:	2202      	movs	r2, #2
 801b69c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801b6a0:	687b      	ldr	r3, [r7, #4]
 801b6a2:	681b      	ldr	r3, [r3, #0]
 801b6a4:	685b      	ldr	r3, [r3, #4]
 801b6a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801b6a8:	687b      	ldr	r3, [r7, #4]
 801b6aa:	681b      	ldr	r3, [r3, #0]
 801b6ac:	689b      	ldr	r3, [r3, #8]
 801b6ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801b6b0:	68fb      	ldr	r3, [r7, #12]
 801b6b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b6b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801b6b8:	683b      	ldr	r3, [r7, #0]
 801b6ba:	681b      	ldr	r3, [r3, #0]
 801b6bc:	68fa      	ldr	r2, [r7, #12]
 801b6be:	4313      	orrs	r3, r2
 801b6c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801b6c2:	687b      	ldr	r3, [r7, #4]
 801b6c4:	681b      	ldr	r3, [r3, #0]
 801b6c6:	68fa      	ldr	r2, [r7, #12]
 801b6c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801b6ca:	687b      	ldr	r3, [r7, #4]
 801b6cc:	681b      	ldr	r3, [r3, #0]
 801b6ce:	4a1c      	ldr	r2, [pc, #112]	; (801b740 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 801b6d0:	4293      	cmp	r3, r2
 801b6d2:	d018      	beq.n	801b706 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801b6d4:	687b      	ldr	r3, [r7, #4]
 801b6d6:	681b      	ldr	r3, [r3, #0]
 801b6d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b6dc:	d013      	beq.n	801b706 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801b6de:	687b      	ldr	r3, [r7, #4]
 801b6e0:	681b      	ldr	r3, [r3, #0]
 801b6e2:	4a18      	ldr	r2, [pc, #96]	; (801b744 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 801b6e4:	4293      	cmp	r3, r2
 801b6e6:	d00e      	beq.n	801b706 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801b6e8:	687b      	ldr	r3, [r7, #4]
 801b6ea:	681b      	ldr	r3, [r3, #0]
 801b6ec:	4a16      	ldr	r2, [pc, #88]	; (801b748 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 801b6ee:	4293      	cmp	r3, r2
 801b6f0:	d009      	beq.n	801b706 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801b6f2:	687b      	ldr	r3, [r7, #4]
 801b6f4:	681b      	ldr	r3, [r3, #0]
 801b6f6:	4a15      	ldr	r2, [pc, #84]	; (801b74c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 801b6f8:	4293      	cmp	r3, r2
 801b6fa:	d004      	beq.n	801b706 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801b6fc:	687b      	ldr	r3, [r7, #4]
 801b6fe:	681b      	ldr	r3, [r3, #0]
 801b700:	4a13      	ldr	r2, [pc, #76]	; (801b750 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 801b702:	4293      	cmp	r3, r2
 801b704:	d10c      	bne.n	801b720 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801b706:	68bb      	ldr	r3, [r7, #8]
 801b708:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b70c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801b70e:	683b      	ldr	r3, [r7, #0]
 801b710:	685b      	ldr	r3, [r3, #4]
 801b712:	68ba      	ldr	r2, [r7, #8]
 801b714:	4313      	orrs	r3, r2
 801b716:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801b718:	687b      	ldr	r3, [r7, #4]
 801b71a:	681b      	ldr	r3, [r3, #0]
 801b71c:	68ba      	ldr	r2, [r7, #8]
 801b71e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801b720:	687b      	ldr	r3, [r7, #4]
 801b722:	2201      	movs	r2, #1
 801b724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801b728:	687b      	ldr	r3, [r7, #4]
 801b72a:	2200      	movs	r2, #0
 801b72c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801b730:	2300      	movs	r3, #0
}
 801b732:	4618      	mov	r0, r3
 801b734:	3714      	adds	r7, #20
 801b736:	46bd      	mov	sp, r7
 801b738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b73c:	4770      	bx	lr
 801b73e:	bf00      	nop
 801b740:	40010000 	.word	0x40010000
 801b744:	40000400 	.word	0x40000400
 801b748:	40000800 	.word	0x40000800
 801b74c:	40000c00 	.word	0x40000c00
 801b750:	40014000 	.word	0x40014000

0801b754 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801b754:	b480      	push	{r7}
 801b756:	b083      	sub	sp, #12
 801b758:	af00      	add	r7, sp, #0
 801b75a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801b75c:	bf00      	nop
 801b75e:	370c      	adds	r7, #12
 801b760:	46bd      	mov	sp, r7
 801b762:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b766:	4770      	bx	lr

0801b768 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801b768:	b480      	push	{r7}
 801b76a:	b083      	sub	sp, #12
 801b76c:	af00      	add	r7, sp, #0
 801b76e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801b770:	bf00      	nop
 801b772:	370c      	adds	r7, #12
 801b774:	46bd      	mov	sp, r7
 801b776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b77a:	4770      	bx	lr

0801b77c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801b77c:	b580      	push	{r7, lr}
 801b77e:	b082      	sub	sp, #8
 801b780:	af00      	add	r7, sp, #0
 801b782:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801b784:	687b      	ldr	r3, [r7, #4]
 801b786:	2b00      	cmp	r3, #0
 801b788:	d101      	bne.n	801b78e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801b78a:	2301      	movs	r3, #1
 801b78c:	e03f      	b.n	801b80e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801b78e:	687b      	ldr	r3, [r7, #4]
 801b790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801b794:	b2db      	uxtb	r3, r3
 801b796:	2b00      	cmp	r3, #0
 801b798:	d106      	bne.n	801b7a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801b79a:	687b      	ldr	r3, [r7, #4]
 801b79c:	2200      	movs	r2, #0
 801b79e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801b7a2:	6878      	ldr	r0, [r7, #4]
 801b7a4:	f7fa fafe 	bl	8015da4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801b7a8:	687b      	ldr	r3, [r7, #4]
 801b7aa:	2224      	movs	r2, #36	; 0x24
 801b7ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801b7b0:	687b      	ldr	r3, [r7, #4]
 801b7b2:	681b      	ldr	r3, [r3, #0]
 801b7b4:	68da      	ldr	r2, [r3, #12]
 801b7b6:	687b      	ldr	r3, [r7, #4]
 801b7b8:	681b      	ldr	r3, [r3, #0]
 801b7ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801b7be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 801b7c0:	6878      	ldr	r0, [r7, #4]
 801b7c2:	f000 ff9b 	bl	801c6fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801b7c6:	687b      	ldr	r3, [r7, #4]
 801b7c8:	681b      	ldr	r3, [r3, #0]
 801b7ca:	691a      	ldr	r2, [r3, #16]
 801b7cc:	687b      	ldr	r3, [r7, #4]
 801b7ce:	681b      	ldr	r3, [r3, #0]
 801b7d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801b7d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801b7d6:	687b      	ldr	r3, [r7, #4]
 801b7d8:	681b      	ldr	r3, [r3, #0]
 801b7da:	695a      	ldr	r2, [r3, #20]
 801b7dc:	687b      	ldr	r3, [r7, #4]
 801b7de:	681b      	ldr	r3, [r3, #0]
 801b7e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801b7e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801b7e6:	687b      	ldr	r3, [r7, #4]
 801b7e8:	681b      	ldr	r3, [r3, #0]
 801b7ea:	68da      	ldr	r2, [r3, #12]
 801b7ec:	687b      	ldr	r3, [r7, #4]
 801b7ee:	681b      	ldr	r3, [r3, #0]
 801b7f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801b7f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b7f6:	687b      	ldr	r3, [r7, #4]
 801b7f8:	2200      	movs	r2, #0
 801b7fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 801b7fc:	687b      	ldr	r3, [r7, #4]
 801b7fe:	2220      	movs	r2, #32
 801b800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 801b804:	687b      	ldr	r3, [r7, #4]
 801b806:	2220      	movs	r2, #32
 801b808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801b80c:	2300      	movs	r3, #0
}
 801b80e:	4618      	mov	r0, r3
 801b810:	3708      	adds	r7, #8
 801b812:	46bd      	mov	sp, r7
 801b814:	bd80      	pop	{r7, pc}

0801b816 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801b816:	b580      	push	{r7, lr}
 801b818:	b08a      	sub	sp, #40	; 0x28
 801b81a:	af02      	add	r7, sp, #8
 801b81c:	60f8      	str	r0, [r7, #12]
 801b81e:	60b9      	str	r1, [r7, #8]
 801b820:	603b      	str	r3, [r7, #0]
 801b822:	4613      	mov	r3, r2
 801b824:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 801b826:	2300      	movs	r3, #0
 801b828:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801b82a:	68fb      	ldr	r3, [r7, #12]
 801b82c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801b830:	b2db      	uxtb	r3, r3
 801b832:	2b20      	cmp	r3, #32
 801b834:	d17c      	bne.n	801b930 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 801b836:	68bb      	ldr	r3, [r7, #8]
 801b838:	2b00      	cmp	r3, #0
 801b83a:	d002      	beq.n	801b842 <HAL_UART_Transmit+0x2c>
 801b83c:	88fb      	ldrh	r3, [r7, #6]
 801b83e:	2b00      	cmp	r3, #0
 801b840:	d101      	bne.n	801b846 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 801b842:	2301      	movs	r3, #1
 801b844:	e075      	b.n	801b932 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801b846:	68fb      	ldr	r3, [r7, #12]
 801b848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801b84c:	2b01      	cmp	r3, #1
 801b84e:	d101      	bne.n	801b854 <HAL_UART_Transmit+0x3e>
 801b850:	2302      	movs	r3, #2
 801b852:	e06e      	b.n	801b932 <HAL_UART_Transmit+0x11c>
 801b854:	68fb      	ldr	r3, [r7, #12]
 801b856:	2201      	movs	r2, #1
 801b858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b85c:	68fb      	ldr	r3, [r7, #12]
 801b85e:	2200      	movs	r2, #0
 801b860:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801b862:	68fb      	ldr	r3, [r7, #12]
 801b864:	2221      	movs	r2, #33	; 0x21
 801b866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801b86a:	f7fa fd53 	bl	8016314 <HAL_GetTick>
 801b86e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 801b870:	68fb      	ldr	r3, [r7, #12]
 801b872:	88fa      	ldrh	r2, [r7, #6]
 801b874:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801b876:	68fb      	ldr	r3, [r7, #12]
 801b878:	88fa      	ldrh	r2, [r7, #6]
 801b87a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801b87c:	68fb      	ldr	r3, [r7, #12]
 801b87e:	689b      	ldr	r3, [r3, #8]
 801b880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b884:	d108      	bne.n	801b898 <HAL_UART_Transmit+0x82>
 801b886:	68fb      	ldr	r3, [r7, #12]
 801b888:	691b      	ldr	r3, [r3, #16]
 801b88a:	2b00      	cmp	r3, #0
 801b88c:	d104      	bne.n	801b898 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 801b88e:	2300      	movs	r3, #0
 801b890:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801b892:	68bb      	ldr	r3, [r7, #8]
 801b894:	61bb      	str	r3, [r7, #24]
 801b896:	e003      	b.n	801b8a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 801b898:	68bb      	ldr	r3, [r7, #8]
 801b89a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801b89c:	2300      	movs	r3, #0
 801b89e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801b8a0:	68fb      	ldr	r3, [r7, #12]
 801b8a2:	2200      	movs	r2, #0
 801b8a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 801b8a8:	e02a      	b.n	801b900 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801b8aa:	683b      	ldr	r3, [r7, #0]
 801b8ac:	9300      	str	r3, [sp, #0]
 801b8ae:	697b      	ldr	r3, [r7, #20]
 801b8b0:	2200      	movs	r2, #0
 801b8b2:	2180      	movs	r1, #128	; 0x80
 801b8b4:	68f8      	ldr	r0, [r7, #12]
 801b8b6:	f000 fc53 	bl	801c160 <UART_WaitOnFlagUntilTimeout>
 801b8ba:	4603      	mov	r3, r0
 801b8bc:	2b00      	cmp	r3, #0
 801b8be:	d001      	beq.n	801b8c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 801b8c0:	2303      	movs	r3, #3
 801b8c2:	e036      	b.n	801b932 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 801b8c4:	69fb      	ldr	r3, [r7, #28]
 801b8c6:	2b00      	cmp	r3, #0
 801b8c8:	d10b      	bne.n	801b8e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 801b8ca:	69bb      	ldr	r3, [r7, #24]
 801b8cc:	881b      	ldrh	r3, [r3, #0]
 801b8ce:	461a      	mov	r2, r3
 801b8d0:	68fb      	ldr	r3, [r7, #12]
 801b8d2:	681b      	ldr	r3, [r3, #0]
 801b8d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801b8d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 801b8da:	69bb      	ldr	r3, [r7, #24]
 801b8dc:	3302      	adds	r3, #2
 801b8de:	61bb      	str	r3, [r7, #24]
 801b8e0:	e007      	b.n	801b8f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 801b8e2:	69fb      	ldr	r3, [r7, #28]
 801b8e4:	781a      	ldrb	r2, [r3, #0]
 801b8e6:	68fb      	ldr	r3, [r7, #12]
 801b8e8:	681b      	ldr	r3, [r3, #0]
 801b8ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 801b8ec:	69fb      	ldr	r3, [r7, #28]
 801b8ee:	3301      	adds	r3, #1
 801b8f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801b8f2:	68fb      	ldr	r3, [r7, #12]
 801b8f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801b8f6:	b29b      	uxth	r3, r3
 801b8f8:	3b01      	subs	r3, #1
 801b8fa:	b29a      	uxth	r2, r3
 801b8fc:	68fb      	ldr	r3, [r7, #12]
 801b8fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 801b900:	68fb      	ldr	r3, [r7, #12]
 801b902:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801b904:	b29b      	uxth	r3, r3
 801b906:	2b00      	cmp	r3, #0
 801b908:	d1cf      	bne.n	801b8aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801b90a:	683b      	ldr	r3, [r7, #0]
 801b90c:	9300      	str	r3, [sp, #0]
 801b90e:	697b      	ldr	r3, [r7, #20]
 801b910:	2200      	movs	r2, #0
 801b912:	2140      	movs	r1, #64	; 0x40
 801b914:	68f8      	ldr	r0, [r7, #12]
 801b916:	f000 fc23 	bl	801c160 <UART_WaitOnFlagUntilTimeout>
 801b91a:	4603      	mov	r3, r0
 801b91c:	2b00      	cmp	r3, #0
 801b91e:	d001      	beq.n	801b924 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 801b920:	2303      	movs	r3, #3
 801b922:	e006      	b.n	801b932 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801b924:	68fb      	ldr	r3, [r7, #12]
 801b926:	2220      	movs	r2, #32
 801b928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 801b92c:	2300      	movs	r3, #0
 801b92e:	e000      	b.n	801b932 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 801b930:	2302      	movs	r3, #2
  }
}
 801b932:	4618      	mov	r0, r3
 801b934:	3720      	adds	r7, #32
 801b936:	46bd      	mov	sp, r7
 801b938:	bd80      	pop	{r7, pc}

0801b93a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801b93a:	b580      	push	{r7, lr}
 801b93c:	b08c      	sub	sp, #48	; 0x30
 801b93e:	af00      	add	r7, sp, #0
 801b940:	60f8      	str	r0, [r7, #12]
 801b942:	60b9      	str	r1, [r7, #8]
 801b944:	4613      	mov	r3, r2
 801b946:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801b948:	68fb      	ldr	r3, [r7, #12]
 801b94a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801b94e:	b2db      	uxtb	r3, r3
 801b950:	2b20      	cmp	r3, #32
 801b952:	d152      	bne.n	801b9fa <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 801b954:	68bb      	ldr	r3, [r7, #8]
 801b956:	2b00      	cmp	r3, #0
 801b958:	d002      	beq.n	801b960 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 801b95a:	88fb      	ldrh	r3, [r7, #6]
 801b95c:	2b00      	cmp	r3, #0
 801b95e:	d101      	bne.n	801b964 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 801b960:	2301      	movs	r3, #1
 801b962:	e04b      	b.n	801b9fc <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 801b964:	68fb      	ldr	r3, [r7, #12]
 801b966:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801b96a:	2b01      	cmp	r3, #1
 801b96c:	d101      	bne.n	801b972 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 801b96e:	2302      	movs	r3, #2
 801b970:	e044      	b.n	801b9fc <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 801b972:	68fb      	ldr	r3, [r7, #12]
 801b974:	2201      	movs	r2, #1
 801b976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 801b97a:	68fb      	ldr	r3, [r7, #12]
 801b97c:	2201      	movs	r2, #1
 801b97e:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 801b980:	88fb      	ldrh	r3, [r7, #6]
 801b982:	461a      	mov	r2, r3
 801b984:	68b9      	ldr	r1, [r7, #8]
 801b986:	68f8      	ldr	r0, [r7, #12]
 801b988:	f000 fc58 	bl	801c23c <UART_Start_Receive_DMA>
 801b98c:	4603      	mov	r3, r0
 801b98e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 801b992:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b996:	2b00      	cmp	r3, #0
 801b998:	d12c      	bne.n	801b9f4 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b99a:	68fb      	ldr	r3, [r7, #12]
 801b99c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b99e:	2b01      	cmp	r3, #1
 801b9a0:	d125      	bne.n	801b9ee <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 801b9a2:	2300      	movs	r3, #0
 801b9a4:	613b      	str	r3, [r7, #16]
 801b9a6:	68fb      	ldr	r3, [r7, #12]
 801b9a8:	681b      	ldr	r3, [r3, #0]
 801b9aa:	681b      	ldr	r3, [r3, #0]
 801b9ac:	613b      	str	r3, [r7, #16]
 801b9ae:	68fb      	ldr	r3, [r7, #12]
 801b9b0:	681b      	ldr	r3, [r3, #0]
 801b9b2:	685b      	ldr	r3, [r3, #4]
 801b9b4:	613b      	str	r3, [r7, #16]
 801b9b6:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b9b8:	68fb      	ldr	r3, [r7, #12]
 801b9ba:	681b      	ldr	r3, [r3, #0]
 801b9bc:	330c      	adds	r3, #12
 801b9be:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b9c0:	69bb      	ldr	r3, [r7, #24]
 801b9c2:	e853 3f00 	ldrex	r3, [r3]
 801b9c6:	617b      	str	r3, [r7, #20]
   return(result);
 801b9c8:	697b      	ldr	r3, [r7, #20]
 801b9ca:	f043 0310 	orr.w	r3, r3, #16
 801b9ce:	62bb      	str	r3, [r7, #40]	; 0x28
 801b9d0:	68fb      	ldr	r3, [r7, #12]
 801b9d2:	681b      	ldr	r3, [r3, #0]
 801b9d4:	330c      	adds	r3, #12
 801b9d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b9d8:	627a      	str	r2, [r7, #36]	; 0x24
 801b9da:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b9dc:	6a39      	ldr	r1, [r7, #32]
 801b9de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b9e0:	e841 2300 	strex	r3, r2, [r1]
 801b9e4:	61fb      	str	r3, [r7, #28]
   return(result);
 801b9e6:	69fb      	ldr	r3, [r7, #28]
 801b9e8:	2b00      	cmp	r3, #0
 801b9ea:	d1e5      	bne.n	801b9b8 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 801b9ec:	e002      	b.n	801b9f4 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 801b9ee:	2301      	movs	r3, #1
 801b9f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 801b9f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b9f8:	e000      	b.n	801b9fc <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 801b9fa:	2302      	movs	r3, #2
  }
}
 801b9fc:	4618      	mov	r0, r3
 801b9fe:	3730      	adds	r7, #48	; 0x30
 801ba00:	46bd      	mov	sp, r7
 801ba02:	bd80      	pop	{r7, pc}

0801ba04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801ba04:	b580      	push	{r7, lr}
 801ba06:	b0ba      	sub	sp, #232	; 0xe8
 801ba08:	af00      	add	r7, sp, #0
 801ba0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 801ba0c:	687b      	ldr	r3, [r7, #4]
 801ba0e:	681b      	ldr	r3, [r3, #0]
 801ba10:	681b      	ldr	r3, [r3, #0]
 801ba12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801ba16:	687b      	ldr	r3, [r7, #4]
 801ba18:	681b      	ldr	r3, [r3, #0]
 801ba1a:	68db      	ldr	r3, [r3, #12]
 801ba1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801ba20:	687b      	ldr	r3, [r7, #4]
 801ba22:	681b      	ldr	r3, [r3, #0]
 801ba24:	695b      	ldr	r3, [r3, #20]
 801ba26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 801ba2a:	2300      	movs	r3, #0
 801ba2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 801ba30:	2300      	movs	r3, #0
 801ba32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801ba36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801ba3a:	f003 030f 	and.w	r3, r3, #15
 801ba3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 801ba42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801ba46:	2b00      	cmp	r3, #0
 801ba48:	d10f      	bne.n	801ba6a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801ba4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801ba4e:	f003 0320 	and.w	r3, r3, #32
 801ba52:	2b00      	cmp	r3, #0
 801ba54:	d009      	beq.n	801ba6a <HAL_UART_IRQHandler+0x66>
 801ba56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801ba5a:	f003 0320 	and.w	r3, r3, #32
 801ba5e:	2b00      	cmp	r3, #0
 801ba60:	d003      	beq.n	801ba6a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 801ba62:	6878      	ldr	r0, [r7, #4]
 801ba64:	f000 fd8f 	bl	801c586 <UART_Receive_IT>
      return;
 801ba68:	e256      	b.n	801bf18 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 801ba6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801ba6e:	2b00      	cmp	r3, #0
 801ba70:	f000 80de 	beq.w	801bc30 <HAL_UART_IRQHandler+0x22c>
 801ba74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801ba78:	f003 0301 	and.w	r3, r3, #1
 801ba7c:	2b00      	cmp	r3, #0
 801ba7e:	d106      	bne.n	801ba8e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 801ba80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801ba84:	f403 7390 	and.w	r3, r3, #288	; 0x120
 801ba88:	2b00      	cmp	r3, #0
 801ba8a:	f000 80d1 	beq.w	801bc30 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 801ba8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801ba92:	f003 0301 	and.w	r3, r3, #1
 801ba96:	2b00      	cmp	r3, #0
 801ba98:	d00b      	beq.n	801bab2 <HAL_UART_IRQHandler+0xae>
 801ba9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801ba9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801baa2:	2b00      	cmp	r3, #0
 801baa4:	d005      	beq.n	801bab2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801baa6:	687b      	ldr	r3, [r7, #4]
 801baa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801baaa:	f043 0201 	orr.w	r2, r3, #1
 801baae:	687b      	ldr	r3, [r7, #4]
 801bab0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801bab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bab6:	f003 0304 	and.w	r3, r3, #4
 801baba:	2b00      	cmp	r3, #0
 801babc:	d00b      	beq.n	801bad6 <HAL_UART_IRQHandler+0xd2>
 801babe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801bac2:	f003 0301 	and.w	r3, r3, #1
 801bac6:	2b00      	cmp	r3, #0
 801bac8:	d005      	beq.n	801bad6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801baca:	687b      	ldr	r3, [r7, #4]
 801bacc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bace:	f043 0202 	orr.w	r2, r3, #2
 801bad2:	687b      	ldr	r3, [r7, #4]
 801bad4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801bad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bada:	f003 0302 	and.w	r3, r3, #2
 801bade:	2b00      	cmp	r3, #0
 801bae0:	d00b      	beq.n	801bafa <HAL_UART_IRQHandler+0xf6>
 801bae2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801bae6:	f003 0301 	and.w	r3, r3, #1
 801baea:	2b00      	cmp	r3, #0
 801baec:	d005      	beq.n	801bafa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801baee:	687b      	ldr	r3, [r7, #4]
 801baf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801baf2:	f043 0204 	orr.w	r2, r3, #4
 801baf6:	687b      	ldr	r3, [r7, #4]
 801baf8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 801bafa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bafe:	f003 0308 	and.w	r3, r3, #8
 801bb02:	2b00      	cmp	r3, #0
 801bb04:	d011      	beq.n	801bb2a <HAL_UART_IRQHandler+0x126>
 801bb06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bb0a:	f003 0320 	and.w	r3, r3, #32
 801bb0e:	2b00      	cmp	r3, #0
 801bb10:	d105      	bne.n	801bb1e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 801bb12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801bb16:	f003 0301 	and.w	r3, r3, #1
 801bb1a:	2b00      	cmp	r3, #0
 801bb1c:	d005      	beq.n	801bb2a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801bb1e:	687b      	ldr	r3, [r7, #4]
 801bb20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bb22:	f043 0208 	orr.w	r2, r3, #8
 801bb26:	687b      	ldr	r3, [r7, #4]
 801bb28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801bb2a:	687b      	ldr	r3, [r7, #4]
 801bb2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bb2e:	2b00      	cmp	r3, #0
 801bb30:	f000 81ed 	beq.w	801bf0e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801bb34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bb38:	f003 0320 	and.w	r3, r3, #32
 801bb3c:	2b00      	cmp	r3, #0
 801bb3e:	d008      	beq.n	801bb52 <HAL_UART_IRQHandler+0x14e>
 801bb40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bb44:	f003 0320 	and.w	r3, r3, #32
 801bb48:	2b00      	cmp	r3, #0
 801bb4a:	d002      	beq.n	801bb52 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 801bb4c:	6878      	ldr	r0, [r7, #4]
 801bb4e:	f000 fd1a 	bl	801c586 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801bb52:	687b      	ldr	r3, [r7, #4]
 801bb54:	681b      	ldr	r3, [r3, #0]
 801bb56:	695b      	ldr	r3, [r3, #20]
 801bb58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bb5c:	2b40      	cmp	r3, #64	; 0x40
 801bb5e:	bf0c      	ite	eq
 801bb60:	2301      	moveq	r3, #1
 801bb62:	2300      	movne	r3, #0
 801bb64:	b2db      	uxtb	r3, r3
 801bb66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801bb6a:	687b      	ldr	r3, [r7, #4]
 801bb6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bb6e:	f003 0308 	and.w	r3, r3, #8
 801bb72:	2b00      	cmp	r3, #0
 801bb74:	d103      	bne.n	801bb7e <HAL_UART_IRQHandler+0x17a>
 801bb76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801bb7a:	2b00      	cmp	r3, #0
 801bb7c:	d04f      	beq.n	801bc1e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801bb7e:	6878      	ldr	r0, [r7, #4]
 801bb80:	f000 fc22 	bl	801c3c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801bb84:	687b      	ldr	r3, [r7, #4]
 801bb86:	681b      	ldr	r3, [r3, #0]
 801bb88:	695b      	ldr	r3, [r3, #20]
 801bb8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bb8e:	2b40      	cmp	r3, #64	; 0x40
 801bb90:	d141      	bne.n	801bc16 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801bb92:	687b      	ldr	r3, [r7, #4]
 801bb94:	681b      	ldr	r3, [r3, #0]
 801bb96:	3314      	adds	r3, #20
 801bb98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bb9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801bba0:	e853 3f00 	ldrex	r3, [r3]
 801bba4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801bba8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801bbac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801bbb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801bbb4:	687b      	ldr	r3, [r7, #4]
 801bbb6:	681b      	ldr	r3, [r3, #0]
 801bbb8:	3314      	adds	r3, #20
 801bbba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801bbbe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801bbc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bbc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801bbca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801bbce:	e841 2300 	strex	r3, r2, [r1]
 801bbd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801bbd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801bbda:	2b00      	cmp	r3, #0
 801bbdc:	d1d9      	bne.n	801bb92 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 801bbde:	687b      	ldr	r3, [r7, #4]
 801bbe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bbe2:	2b00      	cmp	r3, #0
 801bbe4:	d013      	beq.n	801bc0e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801bbe6:	687b      	ldr	r3, [r7, #4]
 801bbe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bbea:	4a7d      	ldr	r2, [pc, #500]	; (801bde0 <HAL_UART_IRQHandler+0x3dc>)
 801bbec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801bbee:	687b      	ldr	r3, [r7, #4]
 801bbf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bbf2:	4618      	mov	r0, r3
 801bbf4:	f7fa fe46 	bl	8016884 <HAL_DMA_Abort_IT>
 801bbf8:	4603      	mov	r3, r0
 801bbfa:	2b00      	cmp	r3, #0
 801bbfc:	d016      	beq.n	801bc2c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801bbfe:	687b      	ldr	r3, [r7, #4]
 801bc00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bc02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bc04:	687a      	ldr	r2, [r7, #4]
 801bc06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801bc08:	4610      	mov	r0, r2
 801bc0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801bc0c:	e00e      	b.n	801bc2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801bc0e:	6878      	ldr	r0, [r7, #4]
 801bc10:	f000 f9a4 	bl	801bf5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801bc14:	e00a      	b.n	801bc2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801bc16:	6878      	ldr	r0, [r7, #4]
 801bc18:	f000 f9a0 	bl	801bf5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801bc1c:	e006      	b.n	801bc2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801bc1e:	6878      	ldr	r0, [r7, #4]
 801bc20:	f000 f99c 	bl	801bf5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801bc24:	687b      	ldr	r3, [r7, #4]
 801bc26:	2200      	movs	r2, #0
 801bc28:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 801bc2a:	e170      	b.n	801bf0e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801bc2c:	bf00      	nop
    return;
 801bc2e:	e16e      	b.n	801bf0e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801bc30:	687b      	ldr	r3, [r7, #4]
 801bc32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bc34:	2b01      	cmp	r3, #1
 801bc36:	f040 814a 	bne.w	801bece <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 801bc3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bc3e:	f003 0310 	and.w	r3, r3, #16
 801bc42:	2b00      	cmp	r3, #0
 801bc44:	f000 8143 	beq.w	801bece <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 801bc48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bc4c:	f003 0310 	and.w	r3, r3, #16
 801bc50:	2b00      	cmp	r3, #0
 801bc52:	f000 813c 	beq.w	801bece <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 801bc56:	2300      	movs	r3, #0
 801bc58:	60bb      	str	r3, [r7, #8]
 801bc5a:	687b      	ldr	r3, [r7, #4]
 801bc5c:	681b      	ldr	r3, [r3, #0]
 801bc5e:	681b      	ldr	r3, [r3, #0]
 801bc60:	60bb      	str	r3, [r7, #8]
 801bc62:	687b      	ldr	r3, [r7, #4]
 801bc64:	681b      	ldr	r3, [r3, #0]
 801bc66:	685b      	ldr	r3, [r3, #4]
 801bc68:	60bb      	str	r3, [r7, #8]
 801bc6a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801bc6c:	687b      	ldr	r3, [r7, #4]
 801bc6e:	681b      	ldr	r3, [r3, #0]
 801bc70:	695b      	ldr	r3, [r3, #20]
 801bc72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bc76:	2b40      	cmp	r3, #64	; 0x40
 801bc78:	f040 80b4 	bne.w	801bde4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801bc7c:	687b      	ldr	r3, [r7, #4]
 801bc7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bc80:	681b      	ldr	r3, [r3, #0]
 801bc82:	685b      	ldr	r3, [r3, #4]
 801bc84:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801bc88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801bc8c:	2b00      	cmp	r3, #0
 801bc8e:	f000 8140 	beq.w	801bf12 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801bc92:	687b      	ldr	r3, [r7, #4]
 801bc94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801bc96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801bc9a:	429a      	cmp	r2, r3
 801bc9c:	f080 8139 	bcs.w	801bf12 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801bca0:	687b      	ldr	r3, [r7, #4]
 801bca2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801bca6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801bca8:	687b      	ldr	r3, [r7, #4]
 801bcaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bcac:	69db      	ldr	r3, [r3, #28]
 801bcae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801bcb2:	f000 8088 	beq.w	801bdc6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801bcb6:	687b      	ldr	r3, [r7, #4]
 801bcb8:	681b      	ldr	r3, [r3, #0]
 801bcba:	330c      	adds	r3, #12
 801bcbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bcc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801bcc4:	e853 3f00 	ldrex	r3, [r3]
 801bcc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801bccc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801bcd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801bcd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801bcd8:	687b      	ldr	r3, [r7, #4]
 801bcda:	681b      	ldr	r3, [r3, #0]
 801bcdc:	330c      	adds	r3, #12
 801bcde:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801bce2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801bce6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bcea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801bcee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801bcf2:	e841 2300 	strex	r3, r2, [r1]
 801bcf6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801bcfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801bcfe:	2b00      	cmp	r3, #0
 801bd00:	d1d9      	bne.n	801bcb6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801bd02:	687b      	ldr	r3, [r7, #4]
 801bd04:	681b      	ldr	r3, [r3, #0]
 801bd06:	3314      	adds	r3, #20
 801bd08:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bd0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801bd0c:	e853 3f00 	ldrex	r3, [r3]
 801bd10:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801bd12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801bd14:	f023 0301 	bic.w	r3, r3, #1
 801bd18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801bd1c:	687b      	ldr	r3, [r7, #4]
 801bd1e:	681b      	ldr	r3, [r3, #0]
 801bd20:	3314      	adds	r3, #20
 801bd22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801bd26:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801bd2a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bd2c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801bd2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801bd32:	e841 2300 	strex	r3, r2, [r1]
 801bd36:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801bd38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801bd3a:	2b00      	cmp	r3, #0
 801bd3c:	d1e1      	bne.n	801bd02 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801bd3e:	687b      	ldr	r3, [r7, #4]
 801bd40:	681b      	ldr	r3, [r3, #0]
 801bd42:	3314      	adds	r3, #20
 801bd44:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bd46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801bd48:	e853 3f00 	ldrex	r3, [r3]
 801bd4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801bd4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801bd50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801bd54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801bd58:	687b      	ldr	r3, [r7, #4]
 801bd5a:	681b      	ldr	r3, [r3, #0]
 801bd5c:	3314      	adds	r3, #20
 801bd5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801bd62:	66fa      	str	r2, [r7, #108]	; 0x6c
 801bd64:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bd66:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801bd68:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801bd6a:	e841 2300 	strex	r3, r2, [r1]
 801bd6e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801bd70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bd72:	2b00      	cmp	r3, #0
 801bd74:	d1e3      	bne.n	801bd3e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801bd76:	687b      	ldr	r3, [r7, #4]
 801bd78:	2220      	movs	r2, #32
 801bd7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801bd7e:	687b      	ldr	r3, [r7, #4]
 801bd80:	2200      	movs	r2, #0
 801bd82:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801bd84:	687b      	ldr	r3, [r7, #4]
 801bd86:	681b      	ldr	r3, [r3, #0]
 801bd88:	330c      	adds	r3, #12
 801bd8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bd8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bd8e:	e853 3f00 	ldrex	r3, [r3]
 801bd92:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801bd94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bd96:	f023 0310 	bic.w	r3, r3, #16
 801bd9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801bd9e:	687b      	ldr	r3, [r7, #4]
 801bda0:	681b      	ldr	r3, [r3, #0]
 801bda2:	330c      	adds	r3, #12
 801bda4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801bda8:	65ba      	str	r2, [r7, #88]	; 0x58
 801bdaa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bdac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801bdae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801bdb0:	e841 2300 	strex	r3, r2, [r1]
 801bdb4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801bdb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bdb8:	2b00      	cmp	r3, #0
 801bdba:	d1e3      	bne.n	801bd84 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801bdbc:	687b      	ldr	r3, [r7, #4]
 801bdbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bdc0:	4618      	mov	r0, r3
 801bdc2:	f7fa fcef 	bl	80167a4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801bdc6:	687b      	ldr	r3, [r7, #4]
 801bdc8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801bdca:	687b      	ldr	r3, [r7, #4]
 801bdcc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801bdce:	b29b      	uxth	r3, r3
 801bdd0:	1ad3      	subs	r3, r2, r3
 801bdd2:	b29b      	uxth	r3, r3
 801bdd4:	4619      	mov	r1, r3
 801bdd6:	6878      	ldr	r0, [r7, #4]
 801bdd8:	f7e5 f8c8 	bl	8000f6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801bddc:	e099      	b.n	801bf12 <HAL_UART_IRQHandler+0x50e>
 801bdde:	bf00      	nop
 801bde0:	0801c48f 	.word	0x0801c48f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801bde4:	687b      	ldr	r3, [r7, #4]
 801bde6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801bde8:	687b      	ldr	r3, [r7, #4]
 801bdea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801bdec:	b29b      	uxth	r3, r3
 801bdee:	1ad3      	subs	r3, r2, r3
 801bdf0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801bdf4:	687b      	ldr	r3, [r7, #4]
 801bdf6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801bdf8:	b29b      	uxth	r3, r3
 801bdfa:	2b00      	cmp	r3, #0
 801bdfc:	f000 808b 	beq.w	801bf16 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 801be00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801be04:	2b00      	cmp	r3, #0
 801be06:	f000 8086 	beq.w	801bf16 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801be0a:	687b      	ldr	r3, [r7, #4]
 801be0c:	681b      	ldr	r3, [r3, #0]
 801be0e:	330c      	adds	r3, #12
 801be10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801be12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801be14:	e853 3f00 	ldrex	r3, [r3]
 801be18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801be1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801be1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801be20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801be24:	687b      	ldr	r3, [r7, #4]
 801be26:	681b      	ldr	r3, [r3, #0]
 801be28:	330c      	adds	r3, #12
 801be2a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801be2e:	647a      	str	r2, [r7, #68]	; 0x44
 801be30:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801be32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801be34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801be36:	e841 2300 	strex	r3, r2, [r1]
 801be3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801be3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801be3e:	2b00      	cmp	r3, #0
 801be40:	d1e3      	bne.n	801be0a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801be42:	687b      	ldr	r3, [r7, #4]
 801be44:	681b      	ldr	r3, [r3, #0]
 801be46:	3314      	adds	r3, #20
 801be48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801be4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801be4c:	e853 3f00 	ldrex	r3, [r3]
 801be50:	623b      	str	r3, [r7, #32]
   return(result);
 801be52:	6a3b      	ldr	r3, [r7, #32]
 801be54:	f023 0301 	bic.w	r3, r3, #1
 801be58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801be5c:	687b      	ldr	r3, [r7, #4]
 801be5e:	681b      	ldr	r3, [r3, #0]
 801be60:	3314      	adds	r3, #20
 801be62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801be66:	633a      	str	r2, [r7, #48]	; 0x30
 801be68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801be6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801be6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801be6e:	e841 2300 	strex	r3, r2, [r1]
 801be72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801be74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be76:	2b00      	cmp	r3, #0
 801be78:	d1e3      	bne.n	801be42 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801be7a:	687b      	ldr	r3, [r7, #4]
 801be7c:	2220      	movs	r2, #32
 801be7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801be82:	687b      	ldr	r3, [r7, #4]
 801be84:	2200      	movs	r2, #0
 801be86:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801be88:	687b      	ldr	r3, [r7, #4]
 801be8a:	681b      	ldr	r3, [r3, #0]
 801be8c:	330c      	adds	r3, #12
 801be8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801be90:	693b      	ldr	r3, [r7, #16]
 801be92:	e853 3f00 	ldrex	r3, [r3]
 801be96:	60fb      	str	r3, [r7, #12]
   return(result);
 801be98:	68fb      	ldr	r3, [r7, #12]
 801be9a:	f023 0310 	bic.w	r3, r3, #16
 801be9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801bea2:	687b      	ldr	r3, [r7, #4]
 801bea4:	681b      	ldr	r3, [r3, #0]
 801bea6:	330c      	adds	r3, #12
 801bea8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801beac:	61fa      	str	r2, [r7, #28]
 801beae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801beb0:	69b9      	ldr	r1, [r7, #24]
 801beb2:	69fa      	ldr	r2, [r7, #28]
 801beb4:	e841 2300 	strex	r3, r2, [r1]
 801beb8:	617b      	str	r3, [r7, #20]
   return(result);
 801beba:	697b      	ldr	r3, [r7, #20]
 801bebc:	2b00      	cmp	r3, #0
 801bebe:	d1e3      	bne.n	801be88 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801bec0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801bec4:	4619      	mov	r1, r3
 801bec6:	6878      	ldr	r0, [r7, #4]
 801bec8:	f7e5 f850 	bl	8000f6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801becc:	e023      	b.n	801bf16 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 801bece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801bed6:	2b00      	cmp	r3, #0
 801bed8:	d009      	beq.n	801beee <HAL_UART_IRQHandler+0x4ea>
 801beda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801bee2:	2b00      	cmp	r3, #0
 801bee4:	d003      	beq.n	801beee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 801bee6:	6878      	ldr	r0, [r7, #4]
 801bee8:	f000 fae5 	bl	801c4b6 <UART_Transmit_IT>
    return;
 801beec:	e014      	b.n	801bf18 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801beee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bef6:	2b00      	cmp	r3, #0
 801bef8:	d00e      	beq.n	801bf18 <HAL_UART_IRQHandler+0x514>
 801befa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801befe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bf02:	2b00      	cmp	r3, #0
 801bf04:	d008      	beq.n	801bf18 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 801bf06:	6878      	ldr	r0, [r7, #4]
 801bf08:	f000 fb25 	bl	801c556 <UART_EndTransmit_IT>
    return;
 801bf0c:	e004      	b.n	801bf18 <HAL_UART_IRQHandler+0x514>
    return;
 801bf0e:	bf00      	nop
 801bf10:	e002      	b.n	801bf18 <HAL_UART_IRQHandler+0x514>
      return;
 801bf12:	bf00      	nop
 801bf14:	e000      	b.n	801bf18 <HAL_UART_IRQHandler+0x514>
      return;
 801bf16:	bf00      	nop
  }
}
 801bf18:	37e8      	adds	r7, #232	; 0xe8
 801bf1a:	46bd      	mov	sp, r7
 801bf1c:	bd80      	pop	{r7, pc}
 801bf1e:	bf00      	nop

0801bf20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801bf20:	b480      	push	{r7}
 801bf22:	b083      	sub	sp, #12
 801bf24:	af00      	add	r7, sp, #0
 801bf26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 801bf28:	bf00      	nop
 801bf2a:	370c      	adds	r7, #12
 801bf2c:	46bd      	mov	sp, r7
 801bf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf32:	4770      	bx	lr

0801bf34 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801bf34:	b480      	push	{r7}
 801bf36:	b083      	sub	sp, #12
 801bf38:	af00      	add	r7, sp, #0
 801bf3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 801bf3c:	bf00      	nop
 801bf3e:	370c      	adds	r7, #12
 801bf40:	46bd      	mov	sp, r7
 801bf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf46:	4770      	bx	lr

0801bf48 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801bf48:	b480      	push	{r7}
 801bf4a:	b083      	sub	sp, #12
 801bf4c:	af00      	add	r7, sp, #0
 801bf4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 801bf50:	bf00      	nop
 801bf52:	370c      	adds	r7, #12
 801bf54:	46bd      	mov	sp, r7
 801bf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf5a:	4770      	bx	lr

0801bf5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801bf5c:	b480      	push	{r7}
 801bf5e:	b083      	sub	sp, #12
 801bf60:	af00      	add	r7, sp, #0
 801bf62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 801bf64:	bf00      	nop
 801bf66:	370c      	adds	r7, #12
 801bf68:	46bd      	mov	sp, r7
 801bf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf6e:	4770      	bx	lr

0801bf70 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801bf70:	b580      	push	{r7, lr}
 801bf72:	b09c      	sub	sp, #112	; 0x70
 801bf74:	af00      	add	r7, sp, #0
 801bf76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801bf78:	687b      	ldr	r3, [r7, #4]
 801bf7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bf7c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 801bf7e:	687b      	ldr	r3, [r7, #4]
 801bf80:	681b      	ldr	r3, [r3, #0]
 801bf82:	681b      	ldr	r3, [r3, #0]
 801bf84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bf88:	2b00      	cmp	r3, #0
 801bf8a:	d172      	bne.n	801c072 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 801bf8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801bf8e:	2200      	movs	r2, #0
 801bf90:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801bf92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801bf94:	681b      	ldr	r3, [r3, #0]
 801bf96:	330c      	adds	r3, #12
 801bf98:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bf9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bf9c:	e853 3f00 	ldrex	r3, [r3]
 801bfa0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801bfa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bfa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801bfa8:	66bb      	str	r3, [r7, #104]	; 0x68
 801bfaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801bfac:	681b      	ldr	r3, [r3, #0]
 801bfae:	330c      	adds	r3, #12
 801bfb0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801bfb2:	65ba      	str	r2, [r7, #88]	; 0x58
 801bfb4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bfb6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801bfb8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801bfba:	e841 2300 	strex	r3, r2, [r1]
 801bfbe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801bfc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bfc2:	2b00      	cmp	r3, #0
 801bfc4:	d1e5      	bne.n	801bf92 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801bfc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801bfc8:	681b      	ldr	r3, [r3, #0]
 801bfca:	3314      	adds	r3, #20
 801bfcc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bfce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bfd0:	e853 3f00 	ldrex	r3, [r3]
 801bfd4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801bfd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bfd8:	f023 0301 	bic.w	r3, r3, #1
 801bfdc:	667b      	str	r3, [r7, #100]	; 0x64
 801bfde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801bfe0:	681b      	ldr	r3, [r3, #0]
 801bfe2:	3314      	adds	r3, #20
 801bfe4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801bfe6:	647a      	str	r2, [r7, #68]	; 0x44
 801bfe8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bfea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801bfec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801bfee:	e841 2300 	strex	r3, r2, [r1]
 801bff2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801bff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bff6:	2b00      	cmp	r3, #0
 801bff8:	d1e5      	bne.n	801bfc6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801bffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801bffc:	681b      	ldr	r3, [r3, #0]
 801bffe:	3314      	adds	r3, #20
 801c000:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c004:	e853 3f00 	ldrex	r3, [r3]
 801c008:	623b      	str	r3, [r7, #32]
   return(result);
 801c00a:	6a3b      	ldr	r3, [r7, #32]
 801c00c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801c010:	663b      	str	r3, [r7, #96]	; 0x60
 801c012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c014:	681b      	ldr	r3, [r3, #0]
 801c016:	3314      	adds	r3, #20
 801c018:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801c01a:	633a      	str	r2, [r7, #48]	; 0x30
 801c01c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c01e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c022:	e841 2300 	strex	r3, r2, [r1]
 801c026:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801c028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c02a:	2b00      	cmp	r3, #0
 801c02c:	d1e5      	bne.n	801bffa <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801c02e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c030:	2220      	movs	r2, #32
 801c032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c03a:	2b01      	cmp	r3, #1
 801c03c:	d119      	bne.n	801c072 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c03e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c040:	681b      	ldr	r3, [r3, #0]
 801c042:	330c      	adds	r3, #12
 801c044:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c046:	693b      	ldr	r3, [r7, #16]
 801c048:	e853 3f00 	ldrex	r3, [r3]
 801c04c:	60fb      	str	r3, [r7, #12]
   return(result);
 801c04e:	68fb      	ldr	r3, [r7, #12]
 801c050:	f023 0310 	bic.w	r3, r3, #16
 801c054:	65fb      	str	r3, [r7, #92]	; 0x5c
 801c056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c058:	681b      	ldr	r3, [r3, #0]
 801c05a:	330c      	adds	r3, #12
 801c05c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801c05e:	61fa      	str	r2, [r7, #28]
 801c060:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c062:	69b9      	ldr	r1, [r7, #24]
 801c064:	69fa      	ldr	r2, [r7, #28]
 801c066:	e841 2300 	strex	r3, r2, [r1]
 801c06a:	617b      	str	r3, [r7, #20]
   return(result);
 801c06c:	697b      	ldr	r3, [r7, #20]
 801c06e:	2b00      	cmp	r3, #0
 801c070:	d1e5      	bne.n	801c03e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c076:	2b01      	cmp	r3, #1
 801c078:	d106      	bne.n	801c088 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801c07a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c07c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801c07e:	4619      	mov	r1, r3
 801c080:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801c082:	f7e4 ff73 	bl	8000f6c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801c086:	e002      	b.n	801c08e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 801c088:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801c08a:	f7ff ff53 	bl	801bf34 <HAL_UART_RxCpltCallback>
}
 801c08e:	bf00      	nop
 801c090:	3770      	adds	r7, #112	; 0x70
 801c092:	46bd      	mov	sp, r7
 801c094:	bd80      	pop	{r7, pc}

0801c096 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801c096:	b580      	push	{r7, lr}
 801c098:	b084      	sub	sp, #16
 801c09a:	af00      	add	r7, sp, #0
 801c09c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801c09e:	687b      	ldr	r3, [r7, #4]
 801c0a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c0a2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c0a4:	68fb      	ldr	r3, [r7, #12]
 801c0a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c0a8:	2b01      	cmp	r3, #1
 801c0aa:	d108      	bne.n	801c0be <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801c0ac:	68fb      	ldr	r3, [r7, #12]
 801c0ae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801c0b0:	085b      	lsrs	r3, r3, #1
 801c0b2:	b29b      	uxth	r3, r3
 801c0b4:	4619      	mov	r1, r3
 801c0b6:	68f8      	ldr	r0, [r7, #12]
 801c0b8:	f7e4 ff58 	bl	8000f6c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801c0bc:	e002      	b.n	801c0c4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 801c0be:	68f8      	ldr	r0, [r7, #12]
 801c0c0:	f7ff ff42 	bl	801bf48 <HAL_UART_RxHalfCpltCallback>
}
 801c0c4:	bf00      	nop
 801c0c6:	3710      	adds	r7, #16
 801c0c8:	46bd      	mov	sp, r7
 801c0ca:	bd80      	pop	{r7, pc}

0801c0cc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801c0cc:	b580      	push	{r7, lr}
 801c0ce:	b084      	sub	sp, #16
 801c0d0:	af00      	add	r7, sp, #0
 801c0d2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 801c0d4:	2300      	movs	r3, #0
 801c0d6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801c0d8:	687b      	ldr	r3, [r7, #4]
 801c0da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c0dc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 801c0de:	68bb      	ldr	r3, [r7, #8]
 801c0e0:	681b      	ldr	r3, [r3, #0]
 801c0e2:	695b      	ldr	r3, [r3, #20]
 801c0e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c0e8:	2b80      	cmp	r3, #128	; 0x80
 801c0ea:	bf0c      	ite	eq
 801c0ec:	2301      	moveq	r3, #1
 801c0ee:	2300      	movne	r3, #0
 801c0f0:	b2db      	uxtb	r3, r3
 801c0f2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 801c0f4:	68bb      	ldr	r3, [r7, #8]
 801c0f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801c0fa:	b2db      	uxtb	r3, r3
 801c0fc:	2b21      	cmp	r3, #33	; 0x21
 801c0fe:	d108      	bne.n	801c112 <UART_DMAError+0x46>
 801c100:	68fb      	ldr	r3, [r7, #12]
 801c102:	2b00      	cmp	r3, #0
 801c104:	d005      	beq.n	801c112 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 801c106:	68bb      	ldr	r3, [r7, #8]
 801c108:	2200      	movs	r2, #0
 801c10a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 801c10c:	68b8      	ldr	r0, [r7, #8]
 801c10e:	f000 f933 	bl	801c378 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801c112:	68bb      	ldr	r3, [r7, #8]
 801c114:	681b      	ldr	r3, [r3, #0]
 801c116:	695b      	ldr	r3, [r3, #20]
 801c118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c11c:	2b40      	cmp	r3, #64	; 0x40
 801c11e:	bf0c      	ite	eq
 801c120:	2301      	moveq	r3, #1
 801c122:	2300      	movne	r3, #0
 801c124:	b2db      	uxtb	r3, r3
 801c126:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 801c128:	68bb      	ldr	r3, [r7, #8]
 801c12a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801c12e:	b2db      	uxtb	r3, r3
 801c130:	2b22      	cmp	r3, #34	; 0x22
 801c132:	d108      	bne.n	801c146 <UART_DMAError+0x7a>
 801c134:	68fb      	ldr	r3, [r7, #12]
 801c136:	2b00      	cmp	r3, #0
 801c138:	d005      	beq.n	801c146 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 801c13a:	68bb      	ldr	r3, [r7, #8]
 801c13c:	2200      	movs	r2, #0
 801c13e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 801c140:	68b8      	ldr	r0, [r7, #8]
 801c142:	f000 f941 	bl	801c3c8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801c146:	68bb      	ldr	r3, [r7, #8]
 801c148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c14a:	f043 0210 	orr.w	r2, r3, #16
 801c14e:	68bb      	ldr	r3, [r7, #8]
 801c150:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801c152:	68b8      	ldr	r0, [r7, #8]
 801c154:	f7ff ff02 	bl	801bf5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c158:	bf00      	nop
 801c15a:	3710      	adds	r7, #16
 801c15c:	46bd      	mov	sp, r7
 801c15e:	bd80      	pop	{r7, pc}

0801c160 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 801c160:	b580      	push	{r7, lr}
 801c162:	b090      	sub	sp, #64	; 0x40
 801c164:	af00      	add	r7, sp, #0
 801c166:	60f8      	str	r0, [r7, #12]
 801c168:	60b9      	str	r1, [r7, #8]
 801c16a:	603b      	str	r3, [r7, #0]
 801c16c:	4613      	mov	r3, r2
 801c16e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801c170:	e050      	b.n	801c214 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801c172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c174:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c178:	d04c      	beq.n	801c214 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 801c17a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c17c:	2b00      	cmp	r3, #0
 801c17e:	d007      	beq.n	801c190 <UART_WaitOnFlagUntilTimeout+0x30>
 801c180:	f7fa f8c8 	bl	8016314 <HAL_GetTick>
 801c184:	4602      	mov	r2, r0
 801c186:	683b      	ldr	r3, [r7, #0]
 801c188:	1ad3      	subs	r3, r2, r3
 801c18a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c18c:	429a      	cmp	r2, r3
 801c18e:	d241      	bcs.n	801c214 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801c190:	68fb      	ldr	r3, [r7, #12]
 801c192:	681b      	ldr	r3, [r3, #0]
 801c194:	330c      	adds	r3, #12
 801c196:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c19a:	e853 3f00 	ldrex	r3, [r3]
 801c19e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801c1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c1a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801c1a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c1a8:	68fb      	ldr	r3, [r7, #12]
 801c1aa:	681b      	ldr	r3, [r3, #0]
 801c1ac:	330c      	adds	r3, #12
 801c1ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c1b0:	637a      	str	r2, [r7, #52]	; 0x34
 801c1b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c1b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c1b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c1b8:	e841 2300 	strex	r3, r2, [r1]
 801c1bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801c1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c1c0:	2b00      	cmp	r3, #0
 801c1c2:	d1e5      	bne.n	801c190 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c1c4:	68fb      	ldr	r3, [r7, #12]
 801c1c6:	681b      	ldr	r3, [r3, #0]
 801c1c8:	3314      	adds	r3, #20
 801c1ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c1cc:	697b      	ldr	r3, [r7, #20]
 801c1ce:	e853 3f00 	ldrex	r3, [r3]
 801c1d2:	613b      	str	r3, [r7, #16]
   return(result);
 801c1d4:	693b      	ldr	r3, [r7, #16]
 801c1d6:	f023 0301 	bic.w	r3, r3, #1
 801c1da:	63bb      	str	r3, [r7, #56]	; 0x38
 801c1dc:	68fb      	ldr	r3, [r7, #12]
 801c1de:	681b      	ldr	r3, [r3, #0]
 801c1e0:	3314      	adds	r3, #20
 801c1e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c1e4:	623a      	str	r2, [r7, #32]
 801c1e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c1e8:	69f9      	ldr	r1, [r7, #28]
 801c1ea:	6a3a      	ldr	r2, [r7, #32]
 801c1ec:	e841 2300 	strex	r3, r2, [r1]
 801c1f0:	61bb      	str	r3, [r7, #24]
   return(result);
 801c1f2:	69bb      	ldr	r3, [r7, #24]
 801c1f4:	2b00      	cmp	r3, #0
 801c1f6:	d1e5      	bne.n	801c1c4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 801c1f8:	68fb      	ldr	r3, [r7, #12]
 801c1fa:	2220      	movs	r2, #32
 801c1fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 801c200:	68fb      	ldr	r3, [r7, #12]
 801c202:	2220      	movs	r2, #32
 801c204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 801c208:	68fb      	ldr	r3, [r7, #12]
 801c20a:	2200      	movs	r2, #0
 801c20c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 801c210:	2303      	movs	r3, #3
 801c212:	e00f      	b.n	801c234 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801c214:	68fb      	ldr	r3, [r7, #12]
 801c216:	681b      	ldr	r3, [r3, #0]
 801c218:	681a      	ldr	r2, [r3, #0]
 801c21a:	68bb      	ldr	r3, [r7, #8]
 801c21c:	4013      	ands	r3, r2
 801c21e:	68ba      	ldr	r2, [r7, #8]
 801c220:	429a      	cmp	r2, r3
 801c222:	bf0c      	ite	eq
 801c224:	2301      	moveq	r3, #1
 801c226:	2300      	movne	r3, #0
 801c228:	b2db      	uxtb	r3, r3
 801c22a:	461a      	mov	r2, r3
 801c22c:	79fb      	ldrb	r3, [r7, #7]
 801c22e:	429a      	cmp	r2, r3
 801c230:	d09f      	beq.n	801c172 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801c232:	2300      	movs	r3, #0
}
 801c234:	4618      	mov	r0, r3
 801c236:	3740      	adds	r7, #64	; 0x40
 801c238:	46bd      	mov	sp, r7
 801c23a:	bd80      	pop	{r7, pc}

0801c23c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801c23c:	b580      	push	{r7, lr}
 801c23e:	b098      	sub	sp, #96	; 0x60
 801c240:	af00      	add	r7, sp, #0
 801c242:	60f8      	str	r0, [r7, #12]
 801c244:	60b9      	str	r1, [r7, #8]
 801c246:	4613      	mov	r3, r2
 801c248:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 801c24a:	68ba      	ldr	r2, [r7, #8]
 801c24c:	68fb      	ldr	r3, [r7, #12]
 801c24e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 801c250:	68fb      	ldr	r3, [r7, #12]
 801c252:	88fa      	ldrh	r2, [r7, #6]
 801c254:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c256:	68fb      	ldr	r3, [r7, #12]
 801c258:	2200      	movs	r2, #0
 801c25a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801c25c:	68fb      	ldr	r3, [r7, #12]
 801c25e:	2222      	movs	r2, #34	; 0x22
 801c260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801c264:	68fb      	ldr	r3, [r7, #12]
 801c266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c268:	4a40      	ldr	r2, [pc, #256]	; (801c36c <UART_Start_Receive_DMA+0x130>)
 801c26a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801c26c:	68fb      	ldr	r3, [r7, #12]
 801c26e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c270:	4a3f      	ldr	r2, [pc, #252]	; (801c370 <UART_Start_Receive_DMA+0x134>)
 801c272:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 801c274:	68fb      	ldr	r3, [r7, #12]
 801c276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c278:	4a3e      	ldr	r2, [pc, #248]	; (801c374 <UART_Start_Receive_DMA+0x138>)
 801c27a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 801c27c:	68fb      	ldr	r3, [r7, #12]
 801c27e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c280:	2200      	movs	r2, #0
 801c282:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 801c284:	f107 0308 	add.w	r3, r7, #8
 801c288:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 801c28a:	68fb      	ldr	r3, [r7, #12]
 801c28c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801c28e:	68fb      	ldr	r3, [r7, #12]
 801c290:	681b      	ldr	r3, [r3, #0]
 801c292:	3304      	adds	r3, #4
 801c294:	4619      	mov	r1, r3
 801c296:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c298:	681a      	ldr	r2, [r3, #0]
 801c29a:	88fb      	ldrh	r3, [r7, #6]
 801c29c:	f7fa fa2a 	bl	80166f4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 801c2a0:	2300      	movs	r3, #0
 801c2a2:	613b      	str	r3, [r7, #16]
 801c2a4:	68fb      	ldr	r3, [r7, #12]
 801c2a6:	681b      	ldr	r3, [r3, #0]
 801c2a8:	681b      	ldr	r3, [r3, #0]
 801c2aa:	613b      	str	r3, [r7, #16]
 801c2ac:	68fb      	ldr	r3, [r7, #12]
 801c2ae:	681b      	ldr	r3, [r3, #0]
 801c2b0:	685b      	ldr	r3, [r3, #4]
 801c2b2:	613b      	str	r3, [r7, #16]
 801c2b4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801c2b6:	68fb      	ldr	r3, [r7, #12]
 801c2b8:	2200      	movs	r2, #0
 801c2ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 801c2be:	68fb      	ldr	r3, [r7, #12]
 801c2c0:	691b      	ldr	r3, [r3, #16]
 801c2c2:	2b00      	cmp	r3, #0
 801c2c4:	d019      	beq.n	801c2fa <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801c2c6:	68fb      	ldr	r3, [r7, #12]
 801c2c8:	681b      	ldr	r3, [r3, #0]
 801c2ca:	330c      	adds	r3, #12
 801c2cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c2ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c2d0:	e853 3f00 	ldrex	r3, [r3]
 801c2d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801c2d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c2d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c2dc:	65bb      	str	r3, [r7, #88]	; 0x58
 801c2de:	68fb      	ldr	r3, [r7, #12]
 801c2e0:	681b      	ldr	r3, [r3, #0]
 801c2e2:	330c      	adds	r3, #12
 801c2e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801c2e6:	64fa      	str	r2, [r7, #76]	; 0x4c
 801c2e8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c2ea:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801c2ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c2ee:	e841 2300 	strex	r3, r2, [r1]
 801c2f2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801c2f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c2f6:	2b00      	cmp	r3, #0
 801c2f8:	d1e5      	bne.n	801c2c6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c2fa:	68fb      	ldr	r3, [r7, #12]
 801c2fc:	681b      	ldr	r3, [r3, #0]
 801c2fe:	3314      	adds	r3, #20
 801c300:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c304:	e853 3f00 	ldrex	r3, [r3]
 801c308:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801c30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c30c:	f043 0301 	orr.w	r3, r3, #1
 801c310:	657b      	str	r3, [r7, #84]	; 0x54
 801c312:	68fb      	ldr	r3, [r7, #12]
 801c314:	681b      	ldr	r3, [r3, #0]
 801c316:	3314      	adds	r3, #20
 801c318:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c31a:	63ba      	str	r2, [r7, #56]	; 0x38
 801c31c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c31e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801c320:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c322:	e841 2300 	strex	r3, r2, [r1]
 801c326:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801c328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c32a:	2b00      	cmp	r3, #0
 801c32c:	d1e5      	bne.n	801c2fa <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801c32e:	68fb      	ldr	r3, [r7, #12]
 801c330:	681b      	ldr	r3, [r3, #0]
 801c332:	3314      	adds	r3, #20
 801c334:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c336:	69bb      	ldr	r3, [r7, #24]
 801c338:	e853 3f00 	ldrex	r3, [r3]
 801c33c:	617b      	str	r3, [r7, #20]
   return(result);
 801c33e:	697b      	ldr	r3, [r7, #20]
 801c340:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c344:	653b      	str	r3, [r7, #80]	; 0x50
 801c346:	68fb      	ldr	r3, [r7, #12]
 801c348:	681b      	ldr	r3, [r3, #0]
 801c34a:	3314      	adds	r3, #20
 801c34c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801c34e:	627a      	str	r2, [r7, #36]	; 0x24
 801c350:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c352:	6a39      	ldr	r1, [r7, #32]
 801c354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c356:	e841 2300 	strex	r3, r2, [r1]
 801c35a:	61fb      	str	r3, [r7, #28]
   return(result);
 801c35c:	69fb      	ldr	r3, [r7, #28]
 801c35e:	2b00      	cmp	r3, #0
 801c360:	d1e5      	bne.n	801c32e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 801c362:	2300      	movs	r3, #0
}
 801c364:	4618      	mov	r0, r3
 801c366:	3760      	adds	r7, #96	; 0x60
 801c368:	46bd      	mov	sp, r7
 801c36a:	bd80      	pop	{r7, pc}
 801c36c:	0801bf71 	.word	0x0801bf71
 801c370:	0801c097 	.word	0x0801c097
 801c374:	0801c0cd 	.word	0x0801c0cd

0801c378 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801c378:	b480      	push	{r7}
 801c37a:	b089      	sub	sp, #36	; 0x24
 801c37c:	af00      	add	r7, sp, #0
 801c37e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801c380:	687b      	ldr	r3, [r7, #4]
 801c382:	681b      	ldr	r3, [r3, #0]
 801c384:	330c      	adds	r3, #12
 801c386:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c388:	68fb      	ldr	r3, [r7, #12]
 801c38a:	e853 3f00 	ldrex	r3, [r3]
 801c38e:	60bb      	str	r3, [r7, #8]
   return(result);
 801c390:	68bb      	ldr	r3, [r7, #8]
 801c392:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801c396:	61fb      	str	r3, [r7, #28]
 801c398:	687b      	ldr	r3, [r7, #4]
 801c39a:	681b      	ldr	r3, [r3, #0]
 801c39c:	330c      	adds	r3, #12
 801c39e:	69fa      	ldr	r2, [r7, #28]
 801c3a0:	61ba      	str	r2, [r7, #24]
 801c3a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c3a4:	6979      	ldr	r1, [r7, #20]
 801c3a6:	69ba      	ldr	r2, [r7, #24]
 801c3a8:	e841 2300 	strex	r3, r2, [r1]
 801c3ac:	613b      	str	r3, [r7, #16]
   return(result);
 801c3ae:	693b      	ldr	r3, [r7, #16]
 801c3b0:	2b00      	cmp	r3, #0
 801c3b2:	d1e5      	bne.n	801c380 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801c3b4:	687b      	ldr	r3, [r7, #4]
 801c3b6:	2220      	movs	r2, #32
 801c3b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 801c3bc:	bf00      	nop
 801c3be:	3724      	adds	r7, #36	; 0x24
 801c3c0:	46bd      	mov	sp, r7
 801c3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3c6:	4770      	bx	lr

0801c3c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801c3c8:	b480      	push	{r7}
 801c3ca:	b095      	sub	sp, #84	; 0x54
 801c3cc:	af00      	add	r7, sp, #0
 801c3ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c3d0:	687b      	ldr	r3, [r7, #4]
 801c3d2:	681b      	ldr	r3, [r3, #0]
 801c3d4:	330c      	adds	r3, #12
 801c3d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c3d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c3da:	e853 3f00 	ldrex	r3, [r3]
 801c3de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801c3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c3e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801c3e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c3e8:	687b      	ldr	r3, [r7, #4]
 801c3ea:	681b      	ldr	r3, [r3, #0]
 801c3ec:	330c      	adds	r3, #12
 801c3ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c3f0:	643a      	str	r2, [r7, #64]	; 0x40
 801c3f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c3f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801c3f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801c3f8:	e841 2300 	strex	r3, r2, [r1]
 801c3fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801c3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c400:	2b00      	cmp	r3, #0
 801c402:	d1e5      	bne.n	801c3d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c404:	687b      	ldr	r3, [r7, #4]
 801c406:	681b      	ldr	r3, [r3, #0]
 801c408:	3314      	adds	r3, #20
 801c40a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c40c:	6a3b      	ldr	r3, [r7, #32]
 801c40e:	e853 3f00 	ldrex	r3, [r3]
 801c412:	61fb      	str	r3, [r7, #28]
   return(result);
 801c414:	69fb      	ldr	r3, [r7, #28]
 801c416:	f023 0301 	bic.w	r3, r3, #1
 801c41a:	64bb      	str	r3, [r7, #72]	; 0x48
 801c41c:	687b      	ldr	r3, [r7, #4]
 801c41e:	681b      	ldr	r3, [r3, #0]
 801c420:	3314      	adds	r3, #20
 801c422:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c424:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c426:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c428:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c42a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c42c:	e841 2300 	strex	r3, r2, [r1]
 801c430:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801c432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c434:	2b00      	cmp	r3, #0
 801c436:	d1e5      	bne.n	801c404 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c438:	687b      	ldr	r3, [r7, #4]
 801c43a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c43c:	2b01      	cmp	r3, #1
 801c43e:	d119      	bne.n	801c474 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c440:	687b      	ldr	r3, [r7, #4]
 801c442:	681b      	ldr	r3, [r3, #0]
 801c444:	330c      	adds	r3, #12
 801c446:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c448:	68fb      	ldr	r3, [r7, #12]
 801c44a:	e853 3f00 	ldrex	r3, [r3]
 801c44e:	60bb      	str	r3, [r7, #8]
   return(result);
 801c450:	68bb      	ldr	r3, [r7, #8]
 801c452:	f023 0310 	bic.w	r3, r3, #16
 801c456:	647b      	str	r3, [r7, #68]	; 0x44
 801c458:	687b      	ldr	r3, [r7, #4]
 801c45a:	681b      	ldr	r3, [r3, #0]
 801c45c:	330c      	adds	r3, #12
 801c45e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c460:	61ba      	str	r2, [r7, #24]
 801c462:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c464:	6979      	ldr	r1, [r7, #20]
 801c466:	69ba      	ldr	r2, [r7, #24]
 801c468:	e841 2300 	strex	r3, r2, [r1]
 801c46c:	613b      	str	r3, [r7, #16]
   return(result);
 801c46e:	693b      	ldr	r3, [r7, #16]
 801c470:	2b00      	cmp	r3, #0
 801c472:	d1e5      	bne.n	801c440 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801c474:	687b      	ldr	r3, [r7, #4]
 801c476:	2220      	movs	r2, #32
 801c478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c47c:	687b      	ldr	r3, [r7, #4]
 801c47e:	2200      	movs	r2, #0
 801c480:	631a      	str	r2, [r3, #48]	; 0x30
}
 801c482:	bf00      	nop
 801c484:	3754      	adds	r7, #84	; 0x54
 801c486:	46bd      	mov	sp, r7
 801c488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c48c:	4770      	bx	lr

0801c48e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801c48e:	b580      	push	{r7, lr}
 801c490:	b084      	sub	sp, #16
 801c492:	af00      	add	r7, sp, #0
 801c494:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801c496:	687b      	ldr	r3, [r7, #4]
 801c498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c49a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 801c49c:	68fb      	ldr	r3, [r7, #12]
 801c49e:	2200      	movs	r2, #0
 801c4a0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 801c4a2:	68fb      	ldr	r3, [r7, #12]
 801c4a4:	2200      	movs	r2, #0
 801c4a6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801c4a8:	68f8      	ldr	r0, [r7, #12]
 801c4aa:	f7ff fd57 	bl	801bf5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c4ae:	bf00      	nop
 801c4b0:	3710      	adds	r7, #16
 801c4b2:	46bd      	mov	sp, r7
 801c4b4:	bd80      	pop	{r7, pc}

0801c4b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801c4b6:	b480      	push	{r7}
 801c4b8:	b085      	sub	sp, #20
 801c4ba:	af00      	add	r7, sp, #0
 801c4bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801c4be:	687b      	ldr	r3, [r7, #4]
 801c4c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801c4c4:	b2db      	uxtb	r3, r3
 801c4c6:	2b21      	cmp	r3, #33	; 0x21
 801c4c8:	d13e      	bne.n	801c548 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c4ca:	687b      	ldr	r3, [r7, #4]
 801c4cc:	689b      	ldr	r3, [r3, #8]
 801c4ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c4d2:	d114      	bne.n	801c4fe <UART_Transmit_IT+0x48>
 801c4d4:	687b      	ldr	r3, [r7, #4]
 801c4d6:	691b      	ldr	r3, [r3, #16]
 801c4d8:	2b00      	cmp	r3, #0
 801c4da:	d110      	bne.n	801c4fe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 801c4dc:	687b      	ldr	r3, [r7, #4]
 801c4de:	6a1b      	ldr	r3, [r3, #32]
 801c4e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801c4e2:	68fb      	ldr	r3, [r7, #12]
 801c4e4:	881b      	ldrh	r3, [r3, #0]
 801c4e6:	461a      	mov	r2, r3
 801c4e8:	687b      	ldr	r3, [r7, #4]
 801c4ea:	681b      	ldr	r3, [r3, #0]
 801c4ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801c4f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 801c4f2:	687b      	ldr	r3, [r7, #4]
 801c4f4:	6a1b      	ldr	r3, [r3, #32]
 801c4f6:	1c9a      	adds	r2, r3, #2
 801c4f8:	687b      	ldr	r3, [r7, #4]
 801c4fa:	621a      	str	r2, [r3, #32]
 801c4fc:	e008      	b.n	801c510 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801c4fe:	687b      	ldr	r3, [r7, #4]
 801c500:	6a1b      	ldr	r3, [r3, #32]
 801c502:	1c59      	adds	r1, r3, #1
 801c504:	687a      	ldr	r2, [r7, #4]
 801c506:	6211      	str	r1, [r2, #32]
 801c508:	781a      	ldrb	r2, [r3, #0]
 801c50a:	687b      	ldr	r3, [r7, #4]
 801c50c:	681b      	ldr	r3, [r3, #0]
 801c50e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 801c510:	687b      	ldr	r3, [r7, #4]
 801c512:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801c514:	b29b      	uxth	r3, r3
 801c516:	3b01      	subs	r3, #1
 801c518:	b29b      	uxth	r3, r3
 801c51a:	687a      	ldr	r2, [r7, #4]
 801c51c:	4619      	mov	r1, r3
 801c51e:	84d1      	strh	r1, [r2, #38]	; 0x26
 801c520:	2b00      	cmp	r3, #0
 801c522:	d10f      	bne.n	801c544 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801c524:	687b      	ldr	r3, [r7, #4]
 801c526:	681b      	ldr	r3, [r3, #0]
 801c528:	68da      	ldr	r2, [r3, #12]
 801c52a:	687b      	ldr	r3, [r7, #4]
 801c52c:	681b      	ldr	r3, [r3, #0]
 801c52e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801c532:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801c534:	687b      	ldr	r3, [r7, #4]
 801c536:	681b      	ldr	r3, [r3, #0]
 801c538:	68da      	ldr	r2, [r3, #12]
 801c53a:	687b      	ldr	r3, [r7, #4]
 801c53c:	681b      	ldr	r3, [r3, #0]
 801c53e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c542:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 801c544:	2300      	movs	r3, #0
 801c546:	e000      	b.n	801c54a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 801c548:	2302      	movs	r3, #2
  }
}
 801c54a:	4618      	mov	r0, r3
 801c54c:	3714      	adds	r7, #20
 801c54e:	46bd      	mov	sp, r7
 801c550:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c554:	4770      	bx	lr

0801c556 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801c556:	b580      	push	{r7, lr}
 801c558:	b082      	sub	sp, #8
 801c55a:	af00      	add	r7, sp, #0
 801c55c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 801c55e:	687b      	ldr	r3, [r7, #4]
 801c560:	681b      	ldr	r3, [r3, #0]
 801c562:	68da      	ldr	r2, [r3, #12]
 801c564:	687b      	ldr	r3, [r7, #4]
 801c566:	681b      	ldr	r3, [r3, #0]
 801c568:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c56c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801c56e:	687b      	ldr	r3, [r7, #4]
 801c570:	2220      	movs	r2, #32
 801c572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801c576:	6878      	ldr	r0, [r7, #4]
 801c578:	f7ff fcd2 	bl	801bf20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 801c57c:	2300      	movs	r3, #0
}
 801c57e:	4618      	mov	r0, r3
 801c580:	3708      	adds	r7, #8
 801c582:	46bd      	mov	sp, r7
 801c584:	bd80      	pop	{r7, pc}

0801c586 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801c586:	b580      	push	{r7, lr}
 801c588:	b08c      	sub	sp, #48	; 0x30
 801c58a:	af00      	add	r7, sp, #0
 801c58c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801c58e:	687b      	ldr	r3, [r7, #4]
 801c590:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801c594:	b2db      	uxtb	r3, r3
 801c596:	2b22      	cmp	r3, #34	; 0x22
 801c598:	f040 80ab 	bne.w	801c6f2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c59c:	687b      	ldr	r3, [r7, #4]
 801c59e:	689b      	ldr	r3, [r3, #8]
 801c5a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c5a4:	d117      	bne.n	801c5d6 <UART_Receive_IT+0x50>
 801c5a6:	687b      	ldr	r3, [r7, #4]
 801c5a8:	691b      	ldr	r3, [r3, #16]
 801c5aa:	2b00      	cmp	r3, #0
 801c5ac:	d113      	bne.n	801c5d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 801c5ae:	2300      	movs	r3, #0
 801c5b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 801c5b2:	687b      	ldr	r3, [r7, #4]
 801c5b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c5b6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 801c5b8:	687b      	ldr	r3, [r7, #4]
 801c5ba:	681b      	ldr	r3, [r3, #0]
 801c5bc:	685b      	ldr	r3, [r3, #4]
 801c5be:	b29b      	uxth	r3, r3
 801c5c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c5c4:	b29a      	uxth	r2, r3
 801c5c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c5c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801c5ca:	687b      	ldr	r3, [r7, #4]
 801c5cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c5ce:	1c9a      	adds	r2, r3, #2
 801c5d0:	687b      	ldr	r3, [r7, #4]
 801c5d2:	629a      	str	r2, [r3, #40]	; 0x28
 801c5d4:	e026      	b.n	801c624 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 801c5d6:	687b      	ldr	r3, [r7, #4]
 801c5d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c5da:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 801c5dc:	2300      	movs	r3, #0
 801c5de:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 801c5e0:	687b      	ldr	r3, [r7, #4]
 801c5e2:	689b      	ldr	r3, [r3, #8]
 801c5e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c5e8:	d007      	beq.n	801c5fa <UART_Receive_IT+0x74>
 801c5ea:	687b      	ldr	r3, [r7, #4]
 801c5ec:	689b      	ldr	r3, [r3, #8]
 801c5ee:	2b00      	cmp	r3, #0
 801c5f0:	d10a      	bne.n	801c608 <UART_Receive_IT+0x82>
 801c5f2:	687b      	ldr	r3, [r7, #4]
 801c5f4:	691b      	ldr	r3, [r3, #16]
 801c5f6:	2b00      	cmp	r3, #0
 801c5f8:	d106      	bne.n	801c608 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801c5fa:	687b      	ldr	r3, [r7, #4]
 801c5fc:	681b      	ldr	r3, [r3, #0]
 801c5fe:	685b      	ldr	r3, [r3, #4]
 801c600:	b2da      	uxtb	r2, r3
 801c602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c604:	701a      	strb	r2, [r3, #0]
 801c606:	e008      	b.n	801c61a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801c608:	687b      	ldr	r3, [r7, #4]
 801c60a:	681b      	ldr	r3, [r3, #0]
 801c60c:	685b      	ldr	r3, [r3, #4]
 801c60e:	b2db      	uxtb	r3, r3
 801c610:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c614:	b2da      	uxtb	r2, r3
 801c616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c618:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 801c61a:	687b      	ldr	r3, [r7, #4]
 801c61c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c61e:	1c5a      	adds	r2, r3, #1
 801c620:	687b      	ldr	r3, [r7, #4]
 801c622:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 801c624:	687b      	ldr	r3, [r7, #4]
 801c626:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801c628:	b29b      	uxth	r3, r3
 801c62a:	3b01      	subs	r3, #1
 801c62c:	b29b      	uxth	r3, r3
 801c62e:	687a      	ldr	r2, [r7, #4]
 801c630:	4619      	mov	r1, r3
 801c632:	85d1      	strh	r1, [r2, #46]	; 0x2e
 801c634:	2b00      	cmp	r3, #0
 801c636:	d15a      	bne.n	801c6ee <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801c638:	687b      	ldr	r3, [r7, #4]
 801c63a:	681b      	ldr	r3, [r3, #0]
 801c63c:	68da      	ldr	r2, [r3, #12]
 801c63e:	687b      	ldr	r3, [r7, #4]
 801c640:	681b      	ldr	r3, [r3, #0]
 801c642:	f022 0220 	bic.w	r2, r2, #32
 801c646:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801c648:	687b      	ldr	r3, [r7, #4]
 801c64a:	681b      	ldr	r3, [r3, #0]
 801c64c:	68da      	ldr	r2, [r3, #12]
 801c64e:	687b      	ldr	r3, [r7, #4]
 801c650:	681b      	ldr	r3, [r3, #0]
 801c652:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801c656:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801c658:	687b      	ldr	r3, [r7, #4]
 801c65a:	681b      	ldr	r3, [r3, #0]
 801c65c:	695a      	ldr	r2, [r3, #20]
 801c65e:	687b      	ldr	r3, [r7, #4]
 801c660:	681b      	ldr	r3, [r3, #0]
 801c662:	f022 0201 	bic.w	r2, r2, #1
 801c666:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801c668:	687b      	ldr	r3, [r7, #4]
 801c66a:	2220      	movs	r2, #32
 801c66c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c670:	687b      	ldr	r3, [r7, #4]
 801c672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c674:	2b01      	cmp	r3, #1
 801c676:	d135      	bne.n	801c6e4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c678:	687b      	ldr	r3, [r7, #4]
 801c67a:	2200      	movs	r2, #0
 801c67c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c67e:	687b      	ldr	r3, [r7, #4]
 801c680:	681b      	ldr	r3, [r3, #0]
 801c682:	330c      	adds	r3, #12
 801c684:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c686:	697b      	ldr	r3, [r7, #20]
 801c688:	e853 3f00 	ldrex	r3, [r3]
 801c68c:	613b      	str	r3, [r7, #16]
   return(result);
 801c68e:	693b      	ldr	r3, [r7, #16]
 801c690:	f023 0310 	bic.w	r3, r3, #16
 801c694:	627b      	str	r3, [r7, #36]	; 0x24
 801c696:	687b      	ldr	r3, [r7, #4]
 801c698:	681b      	ldr	r3, [r3, #0]
 801c69a:	330c      	adds	r3, #12
 801c69c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c69e:	623a      	str	r2, [r7, #32]
 801c6a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c6a2:	69f9      	ldr	r1, [r7, #28]
 801c6a4:	6a3a      	ldr	r2, [r7, #32]
 801c6a6:	e841 2300 	strex	r3, r2, [r1]
 801c6aa:	61bb      	str	r3, [r7, #24]
   return(result);
 801c6ac:	69bb      	ldr	r3, [r7, #24]
 801c6ae:	2b00      	cmp	r3, #0
 801c6b0:	d1e5      	bne.n	801c67e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 801c6b2:	687b      	ldr	r3, [r7, #4]
 801c6b4:	681b      	ldr	r3, [r3, #0]
 801c6b6:	681b      	ldr	r3, [r3, #0]
 801c6b8:	f003 0310 	and.w	r3, r3, #16
 801c6bc:	2b10      	cmp	r3, #16
 801c6be:	d10a      	bne.n	801c6d6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 801c6c0:	2300      	movs	r3, #0
 801c6c2:	60fb      	str	r3, [r7, #12]
 801c6c4:	687b      	ldr	r3, [r7, #4]
 801c6c6:	681b      	ldr	r3, [r3, #0]
 801c6c8:	681b      	ldr	r3, [r3, #0]
 801c6ca:	60fb      	str	r3, [r7, #12]
 801c6cc:	687b      	ldr	r3, [r7, #4]
 801c6ce:	681b      	ldr	r3, [r3, #0]
 801c6d0:	685b      	ldr	r3, [r3, #4]
 801c6d2:	60fb      	str	r3, [r7, #12]
 801c6d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801c6d6:	687b      	ldr	r3, [r7, #4]
 801c6d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801c6da:	4619      	mov	r1, r3
 801c6dc:	6878      	ldr	r0, [r7, #4]
 801c6de:	f7e4 fc45 	bl	8000f6c <HAL_UARTEx_RxEventCallback>
 801c6e2:	e002      	b.n	801c6ea <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 801c6e4:	6878      	ldr	r0, [r7, #4]
 801c6e6:	f7ff fc25 	bl	801bf34 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 801c6ea:	2300      	movs	r3, #0
 801c6ec:	e002      	b.n	801c6f4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 801c6ee:	2300      	movs	r3, #0
 801c6f0:	e000      	b.n	801c6f4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 801c6f2:	2302      	movs	r3, #2
  }
}
 801c6f4:	4618      	mov	r0, r3
 801c6f6:	3730      	adds	r7, #48	; 0x30
 801c6f8:	46bd      	mov	sp, r7
 801c6fa:	bd80      	pop	{r7, pc}

0801c6fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801c6fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801c700:	b0c0      	sub	sp, #256	; 0x100
 801c702:	af00      	add	r7, sp, #0
 801c704:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801c708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c70c:	681b      	ldr	r3, [r3, #0]
 801c70e:	691b      	ldr	r3, [r3, #16]
 801c710:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 801c714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c718:	68d9      	ldr	r1, [r3, #12]
 801c71a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c71e:	681a      	ldr	r2, [r3, #0]
 801c720:	ea40 0301 	orr.w	r3, r0, r1
 801c724:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801c726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c72a:	689a      	ldr	r2, [r3, #8]
 801c72c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c730:	691b      	ldr	r3, [r3, #16]
 801c732:	431a      	orrs	r2, r3
 801c734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c738:	695b      	ldr	r3, [r3, #20]
 801c73a:	431a      	orrs	r2, r3
 801c73c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c740:	69db      	ldr	r3, [r3, #28]
 801c742:	4313      	orrs	r3, r2
 801c744:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 801c748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c74c:	681b      	ldr	r3, [r3, #0]
 801c74e:	68db      	ldr	r3, [r3, #12]
 801c750:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 801c754:	f021 010c 	bic.w	r1, r1, #12
 801c758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c75c:	681a      	ldr	r2, [r3, #0]
 801c75e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801c762:	430b      	orrs	r3, r1
 801c764:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801c766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c76a:	681b      	ldr	r3, [r3, #0]
 801c76c:	695b      	ldr	r3, [r3, #20]
 801c76e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 801c772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c776:	6999      	ldr	r1, [r3, #24]
 801c778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c77c:	681a      	ldr	r2, [r3, #0]
 801c77e:	ea40 0301 	orr.w	r3, r0, r1
 801c782:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801c784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c788:	681a      	ldr	r2, [r3, #0]
 801c78a:	4b8f      	ldr	r3, [pc, #572]	; (801c9c8 <UART_SetConfig+0x2cc>)
 801c78c:	429a      	cmp	r2, r3
 801c78e:	d005      	beq.n	801c79c <UART_SetConfig+0xa0>
 801c790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c794:	681a      	ldr	r2, [r3, #0]
 801c796:	4b8d      	ldr	r3, [pc, #564]	; (801c9cc <UART_SetConfig+0x2d0>)
 801c798:	429a      	cmp	r2, r3
 801c79a:	d104      	bne.n	801c7a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801c79c:	f7fd ffbc 	bl	801a718 <HAL_RCC_GetPCLK2Freq>
 801c7a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 801c7a4:	e003      	b.n	801c7ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801c7a6:	f7fd ffa3 	bl	801a6f0 <HAL_RCC_GetPCLK1Freq>
 801c7aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801c7ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c7b2:	69db      	ldr	r3, [r3, #28]
 801c7b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c7b8:	f040 810c 	bne.w	801c9d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801c7bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801c7c0:	2200      	movs	r2, #0
 801c7c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801c7c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 801c7ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 801c7ce:	4622      	mov	r2, r4
 801c7d0:	462b      	mov	r3, r5
 801c7d2:	1891      	adds	r1, r2, r2
 801c7d4:	65b9      	str	r1, [r7, #88]	; 0x58
 801c7d6:	415b      	adcs	r3, r3
 801c7d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 801c7da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801c7de:	4621      	mov	r1, r4
 801c7e0:	eb12 0801 	adds.w	r8, r2, r1
 801c7e4:	4629      	mov	r1, r5
 801c7e6:	eb43 0901 	adc.w	r9, r3, r1
 801c7ea:	f04f 0200 	mov.w	r2, #0
 801c7ee:	f04f 0300 	mov.w	r3, #0
 801c7f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801c7f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801c7fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801c7fe:	4690      	mov	r8, r2
 801c800:	4699      	mov	r9, r3
 801c802:	4623      	mov	r3, r4
 801c804:	eb18 0303 	adds.w	r3, r8, r3
 801c808:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801c80c:	462b      	mov	r3, r5
 801c80e:	eb49 0303 	adc.w	r3, r9, r3
 801c812:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801c816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c81a:	685b      	ldr	r3, [r3, #4]
 801c81c:	2200      	movs	r2, #0
 801c81e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801c822:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801c826:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 801c82a:	460b      	mov	r3, r1
 801c82c:	18db      	adds	r3, r3, r3
 801c82e:	653b      	str	r3, [r7, #80]	; 0x50
 801c830:	4613      	mov	r3, r2
 801c832:	eb42 0303 	adc.w	r3, r2, r3
 801c836:	657b      	str	r3, [r7, #84]	; 0x54
 801c838:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 801c83c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801c840:	f7e4 f9da 	bl	8000bf8 <__aeabi_uldivmod>
 801c844:	4602      	mov	r2, r0
 801c846:	460b      	mov	r3, r1
 801c848:	4b61      	ldr	r3, [pc, #388]	; (801c9d0 <UART_SetConfig+0x2d4>)
 801c84a:	fba3 2302 	umull	r2, r3, r3, r2
 801c84e:	095b      	lsrs	r3, r3, #5
 801c850:	011c      	lsls	r4, r3, #4
 801c852:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801c856:	2200      	movs	r2, #0
 801c858:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801c85c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 801c860:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 801c864:	4642      	mov	r2, r8
 801c866:	464b      	mov	r3, r9
 801c868:	1891      	adds	r1, r2, r2
 801c86a:	64b9      	str	r1, [r7, #72]	; 0x48
 801c86c:	415b      	adcs	r3, r3
 801c86e:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c870:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801c874:	4641      	mov	r1, r8
 801c876:	eb12 0a01 	adds.w	sl, r2, r1
 801c87a:	4649      	mov	r1, r9
 801c87c:	eb43 0b01 	adc.w	fp, r3, r1
 801c880:	f04f 0200 	mov.w	r2, #0
 801c884:	f04f 0300 	mov.w	r3, #0
 801c888:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801c88c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 801c890:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801c894:	4692      	mov	sl, r2
 801c896:	469b      	mov	fp, r3
 801c898:	4643      	mov	r3, r8
 801c89a:	eb1a 0303 	adds.w	r3, sl, r3
 801c89e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801c8a2:	464b      	mov	r3, r9
 801c8a4:	eb4b 0303 	adc.w	r3, fp, r3
 801c8a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801c8ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c8b0:	685b      	ldr	r3, [r3, #4]
 801c8b2:	2200      	movs	r2, #0
 801c8b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801c8b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 801c8bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 801c8c0:	460b      	mov	r3, r1
 801c8c2:	18db      	adds	r3, r3, r3
 801c8c4:	643b      	str	r3, [r7, #64]	; 0x40
 801c8c6:	4613      	mov	r3, r2
 801c8c8:	eb42 0303 	adc.w	r3, r2, r3
 801c8cc:	647b      	str	r3, [r7, #68]	; 0x44
 801c8ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801c8d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 801c8d6:	f7e4 f98f 	bl	8000bf8 <__aeabi_uldivmod>
 801c8da:	4602      	mov	r2, r0
 801c8dc:	460b      	mov	r3, r1
 801c8de:	4611      	mov	r1, r2
 801c8e0:	4b3b      	ldr	r3, [pc, #236]	; (801c9d0 <UART_SetConfig+0x2d4>)
 801c8e2:	fba3 2301 	umull	r2, r3, r3, r1
 801c8e6:	095b      	lsrs	r3, r3, #5
 801c8e8:	2264      	movs	r2, #100	; 0x64
 801c8ea:	fb02 f303 	mul.w	r3, r2, r3
 801c8ee:	1acb      	subs	r3, r1, r3
 801c8f0:	00db      	lsls	r3, r3, #3
 801c8f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 801c8f6:	4b36      	ldr	r3, [pc, #216]	; (801c9d0 <UART_SetConfig+0x2d4>)
 801c8f8:	fba3 2302 	umull	r2, r3, r3, r2
 801c8fc:	095b      	lsrs	r3, r3, #5
 801c8fe:	005b      	lsls	r3, r3, #1
 801c900:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801c904:	441c      	add	r4, r3
 801c906:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801c90a:	2200      	movs	r2, #0
 801c90c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801c910:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 801c914:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 801c918:	4642      	mov	r2, r8
 801c91a:	464b      	mov	r3, r9
 801c91c:	1891      	adds	r1, r2, r2
 801c91e:	63b9      	str	r1, [r7, #56]	; 0x38
 801c920:	415b      	adcs	r3, r3
 801c922:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c924:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801c928:	4641      	mov	r1, r8
 801c92a:	1851      	adds	r1, r2, r1
 801c92c:	6339      	str	r1, [r7, #48]	; 0x30
 801c92e:	4649      	mov	r1, r9
 801c930:	414b      	adcs	r3, r1
 801c932:	637b      	str	r3, [r7, #52]	; 0x34
 801c934:	f04f 0200 	mov.w	r2, #0
 801c938:	f04f 0300 	mov.w	r3, #0
 801c93c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 801c940:	4659      	mov	r1, fp
 801c942:	00cb      	lsls	r3, r1, #3
 801c944:	4651      	mov	r1, sl
 801c946:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801c94a:	4651      	mov	r1, sl
 801c94c:	00ca      	lsls	r2, r1, #3
 801c94e:	4610      	mov	r0, r2
 801c950:	4619      	mov	r1, r3
 801c952:	4603      	mov	r3, r0
 801c954:	4642      	mov	r2, r8
 801c956:	189b      	adds	r3, r3, r2
 801c958:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801c95c:	464b      	mov	r3, r9
 801c95e:	460a      	mov	r2, r1
 801c960:	eb42 0303 	adc.w	r3, r2, r3
 801c964:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801c968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c96c:	685b      	ldr	r3, [r3, #4]
 801c96e:	2200      	movs	r2, #0
 801c970:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801c974:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 801c978:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 801c97c:	460b      	mov	r3, r1
 801c97e:	18db      	adds	r3, r3, r3
 801c980:	62bb      	str	r3, [r7, #40]	; 0x28
 801c982:	4613      	mov	r3, r2
 801c984:	eb42 0303 	adc.w	r3, r2, r3
 801c988:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c98a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801c98e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 801c992:	f7e4 f931 	bl	8000bf8 <__aeabi_uldivmod>
 801c996:	4602      	mov	r2, r0
 801c998:	460b      	mov	r3, r1
 801c99a:	4b0d      	ldr	r3, [pc, #52]	; (801c9d0 <UART_SetConfig+0x2d4>)
 801c99c:	fba3 1302 	umull	r1, r3, r3, r2
 801c9a0:	095b      	lsrs	r3, r3, #5
 801c9a2:	2164      	movs	r1, #100	; 0x64
 801c9a4:	fb01 f303 	mul.w	r3, r1, r3
 801c9a8:	1ad3      	subs	r3, r2, r3
 801c9aa:	00db      	lsls	r3, r3, #3
 801c9ac:	3332      	adds	r3, #50	; 0x32
 801c9ae:	4a08      	ldr	r2, [pc, #32]	; (801c9d0 <UART_SetConfig+0x2d4>)
 801c9b0:	fba2 2303 	umull	r2, r3, r2, r3
 801c9b4:	095b      	lsrs	r3, r3, #5
 801c9b6:	f003 0207 	and.w	r2, r3, #7
 801c9ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c9be:	681b      	ldr	r3, [r3, #0]
 801c9c0:	4422      	add	r2, r4
 801c9c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 801c9c4:	e105      	b.n	801cbd2 <UART_SetConfig+0x4d6>
 801c9c6:	bf00      	nop
 801c9c8:	40011000 	.word	0x40011000
 801c9cc:	40011400 	.word	0x40011400
 801c9d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801c9d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801c9d8:	2200      	movs	r2, #0
 801c9da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801c9de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801c9e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 801c9e6:	4642      	mov	r2, r8
 801c9e8:	464b      	mov	r3, r9
 801c9ea:	1891      	adds	r1, r2, r2
 801c9ec:	6239      	str	r1, [r7, #32]
 801c9ee:	415b      	adcs	r3, r3
 801c9f0:	627b      	str	r3, [r7, #36]	; 0x24
 801c9f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801c9f6:	4641      	mov	r1, r8
 801c9f8:	1854      	adds	r4, r2, r1
 801c9fa:	4649      	mov	r1, r9
 801c9fc:	eb43 0501 	adc.w	r5, r3, r1
 801ca00:	f04f 0200 	mov.w	r2, #0
 801ca04:	f04f 0300 	mov.w	r3, #0
 801ca08:	00eb      	lsls	r3, r5, #3
 801ca0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801ca0e:	00e2      	lsls	r2, r4, #3
 801ca10:	4614      	mov	r4, r2
 801ca12:	461d      	mov	r5, r3
 801ca14:	4643      	mov	r3, r8
 801ca16:	18e3      	adds	r3, r4, r3
 801ca18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801ca1c:	464b      	mov	r3, r9
 801ca1e:	eb45 0303 	adc.w	r3, r5, r3
 801ca22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801ca26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801ca2a:	685b      	ldr	r3, [r3, #4]
 801ca2c:	2200      	movs	r2, #0
 801ca2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801ca32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801ca36:	f04f 0200 	mov.w	r2, #0
 801ca3a:	f04f 0300 	mov.w	r3, #0
 801ca3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801ca42:	4629      	mov	r1, r5
 801ca44:	008b      	lsls	r3, r1, #2
 801ca46:	4621      	mov	r1, r4
 801ca48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801ca4c:	4621      	mov	r1, r4
 801ca4e:	008a      	lsls	r2, r1, #2
 801ca50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 801ca54:	f7e4 f8d0 	bl	8000bf8 <__aeabi_uldivmod>
 801ca58:	4602      	mov	r2, r0
 801ca5a:	460b      	mov	r3, r1
 801ca5c:	4b60      	ldr	r3, [pc, #384]	; (801cbe0 <UART_SetConfig+0x4e4>)
 801ca5e:	fba3 2302 	umull	r2, r3, r3, r2
 801ca62:	095b      	lsrs	r3, r3, #5
 801ca64:	011c      	lsls	r4, r3, #4
 801ca66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801ca6a:	2200      	movs	r2, #0
 801ca6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801ca70:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801ca74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 801ca78:	4642      	mov	r2, r8
 801ca7a:	464b      	mov	r3, r9
 801ca7c:	1891      	adds	r1, r2, r2
 801ca7e:	61b9      	str	r1, [r7, #24]
 801ca80:	415b      	adcs	r3, r3
 801ca82:	61fb      	str	r3, [r7, #28]
 801ca84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801ca88:	4641      	mov	r1, r8
 801ca8a:	1851      	adds	r1, r2, r1
 801ca8c:	6139      	str	r1, [r7, #16]
 801ca8e:	4649      	mov	r1, r9
 801ca90:	414b      	adcs	r3, r1
 801ca92:	617b      	str	r3, [r7, #20]
 801ca94:	f04f 0200 	mov.w	r2, #0
 801ca98:	f04f 0300 	mov.w	r3, #0
 801ca9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801caa0:	4659      	mov	r1, fp
 801caa2:	00cb      	lsls	r3, r1, #3
 801caa4:	4651      	mov	r1, sl
 801caa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801caaa:	4651      	mov	r1, sl
 801caac:	00ca      	lsls	r2, r1, #3
 801caae:	4610      	mov	r0, r2
 801cab0:	4619      	mov	r1, r3
 801cab2:	4603      	mov	r3, r0
 801cab4:	4642      	mov	r2, r8
 801cab6:	189b      	adds	r3, r3, r2
 801cab8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801cabc:	464b      	mov	r3, r9
 801cabe:	460a      	mov	r2, r1
 801cac0:	eb42 0303 	adc.w	r3, r2, r3
 801cac4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801cac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cacc:	685b      	ldr	r3, [r3, #4]
 801cace:	2200      	movs	r2, #0
 801cad0:	67bb      	str	r3, [r7, #120]	; 0x78
 801cad2:	67fa      	str	r2, [r7, #124]	; 0x7c
 801cad4:	f04f 0200 	mov.w	r2, #0
 801cad8:	f04f 0300 	mov.w	r3, #0
 801cadc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 801cae0:	4649      	mov	r1, r9
 801cae2:	008b      	lsls	r3, r1, #2
 801cae4:	4641      	mov	r1, r8
 801cae6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801caea:	4641      	mov	r1, r8
 801caec:	008a      	lsls	r2, r1, #2
 801caee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 801caf2:	f7e4 f881 	bl	8000bf8 <__aeabi_uldivmod>
 801caf6:	4602      	mov	r2, r0
 801caf8:	460b      	mov	r3, r1
 801cafa:	4b39      	ldr	r3, [pc, #228]	; (801cbe0 <UART_SetConfig+0x4e4>)
 801cafc:	fba3 1302 	umull	r1, r3, r3, r2
 801cb00:	095b      	lsrs	r3, r3, #5
 801cb02:	2164      	movs	r1, #100	; 0x64
 801cb04:	fb01 f303 	mul.w	r3, r1, r3
 801cb08:	1ad3      	subs	r3, r2, r3
 801cb0a:	011b      	lsls	r3, r3, #4
 801cb0c:	3332      	adds	r3, #50	; 0x32
 801cb0e:	4a34      	ldr	r2, [pc, #208]	; (801cbe0 <UART_SetConfig+0x4e4>)
 801cb10:	fba2 2303 	umull	r2, r3, r2, r3
 801cb14:	095b      	lsrs	r3, r3, #5
 801cb16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801cb1a:	441c      	add	r4, r3
 801cb1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801cb20:	2200      	movs	r2, #0
 801cb22:	673b      	str	r3, [r7, #112]	; 0x70
 801cb24:	677a      	str	r2, [r7, #116]	; 0x74
 801cb26:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 801cb2a:	4642      	mov	r2, r8
 801cb2c:	464b      	mov	r3, r9
 801cb2e:	1891      	adds	r1, r2, r2
 801cb30:	60b9      	str	r1, [r7, #8]
 801cb32:	415b      	adcs	r3, r3
 801cb34:	60fb      	str	r3, [r7, #12]
 801cb36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801cb3a:	4641      	mov	r1, r8
 801cb3c:	1851      	adds	r1, r2, r1
 801cb3e:	6039      	str	r1, [r7, #0]
 801cb40:	4649      	mov	r1, r9
 801cb42:	414b      	adcs	r3, r1
 801cb44:	607b      	str	r3, [r7, #4]
 801cb46:	f04f 0200 	mov.w	r2, #0
 801cb4a:	f04f 0300 	mov.w	r3, #0
 801cb4e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 801cb52:	4659      	mov	r1, fp
 801cb54:	00cb      	lsls	r3, r1, #3
 801cb56:	4651      	mov	r1, sl
 801cb58:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801cb5c:	4651      	mov	r1, sl
 801cb5e:	00ca      	lsls	r2, r1, #3
 801cb60:	4610      	mov	r0, r2
 801cb62:	4619      	mov	r1, r3
 801cb64:	4603      	mov	r3, r0
 801cb66:	4642      	mov	r2, r8
 801cb68:	189b      	adds	r3, r3, r2
 801cb6a:	66bb      	str	r3, [r7, #104]	; 0x68
 801cb6c:	464b      	mov	r3, r9
 801cb6e:	460a      	mov	r2, r1
 801cb70:	eb42 0303 	adc.w	r3, r2, r3
 801cb74:	66fb      	str	r3, [r7, #108]	; 0x6c
 801cb76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cb7a:	685b      	ldr	r3, [r3, #4]
 801cb7c:	2200      	movs	r2, #0
 801cb7e:	663b      	str	r3, [r7, #96]	; 0x60
 801cb80:	667a      	str	r2, [r7, #100]	; 0x64
 801cb82:	f04f 0200 	mov.w	r2, #0
 801cb86:	f04f 0300 	mov.w	r3, #0
 801cb8a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 801cb8e:	4649      	mov	r1, r9
 801cb90:	008b      	lsls	r3, r1, #2
 801cb92:	4641      	mov	r1, r8
 801cb94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801cb98:	4641      	mov	r1, r8
 801cb9a:	008a      	lsls	r2, r1, #2
 801cb9c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 801cba0:	f7e4 f82a 	bl	8000bf8 <__aeabi_uldivmod>
 801cba4:	4602      	mov	r2, r0
 801cba6:	460b      	mov	r3, r1
 801cba8:	4b0d      	ldr	r3, [pc, #52]	; (801cbe0 <UART_SetConfig+0x4e4>)
 801cbaa:	fba3 1302 	umull	r1, r3, r3, r2
 801cbae:	095b      	lsrs	r3, r3, #5
 801cbb0:	2164      	movs	r1, #100	; 0x64
 801cbb2:	fb01 f303 	mul.w	r3, r1, r3
 801cbb6:	1ad3      	subs	r3, r2, r3
 801cbb8:	011b      	lsls	r3, r3, #4
 801cbba:	3332      	adds	r3, #50	; 0x32
 801cbbc:	4a08      	ldr	r2, [pc, #32]	; (801cbe0 <UART_SetConfig+0x4e4>)
 801cbbe:	fba2 2303 	umull	r2, r3, r2, r3
 801cbc2:	095b      	lsrs	r3, r3, #5
 801cbc4:	f003 020f 	and.w	r2, r3, #15
 801cbc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cbcc:	681b      	ldr	r3, [r3, #0]
 801cbce:	4422      	add	r2, r4
 801cbd0:	609a      	str	r2, [r3, #8]
}
 801cbd2:	bf00      	nop
 801cbd4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 801cbd8:	46bd      	mov	sp, r7
 801cbda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801cbde:	bf00      	nop
 801cbe0:	51eb851f 	.word	0x51eb851f

0801cbe4 <pow>:
 801cbe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cbe6:	ed2d 8b02 	vpush	{d8}
 801cbea:	eeb0 8a40 	vmov.f32	s16, s0
 801cbee:	eef0 8a60 	vmov.f32	s17, s1
 801cbf2:	ec55 4b11 	vmov	r4, r5, d1
 801cbf6:	f000 f883 	bl	801cd00 <__ieee754_pow>
 801cbfa:	4622      	mov	r2, r4
 801cbfc:	462b      	mov	r3, r5
 801cbfe:	4620      	mov	r0, r4
 801cc00:	4629      	mov	r1, r5
 801cc02:	ec57 6b10 	vmov	r6, r7, d0
 801cc06:	f7e3 ff91 	bl	8000b2c <__aeabi_dcmpun>
 801cc0a:	2800      	cmp	r0, #0
 801cc0c:	d13b      	bne.n	801cc86 <pow+0xa2>
 801cc0e:	ec51 0b18 	vmov	r0, r1, d8
 801cc12:	2200      	movs	r2, #0
 801cc14:	2300      	movs	r3, #0
 801cc16:	f7e3 ff57 	bl	8000ac8 <__aeabi_dcmpeq>
 801cc1a:	b1b8      	cbz	r0, 801cc4c <pow+0x68>
 801cc1c:	2200      	movs	r2, #0
 801cc1e:	2300      	movs	r3, #0
 801cc20:	4620      	mov	r0, r4
 801cc22:	4629      	mov	r1, r5
 801cc24:	f7e3 ff50 	bl	8000ac8 <__aeabi_dcmpeq>
 801cc28:	2800      	cmp	r0, #0
 801cc2a:	d146      	bne.n	801ccba <pow+0xd6>
 801cc2c:	ec45 4b10 	vmov	d0, r4, r5
 801cc30:	f000 fe82 	bl	801d938 <finite>
 801cc34:	b338      	cbz	r0, 801cc86 <pow+0xa2>
 801cc36:	2200      	movs	r2, #0
 801cc38:	2300      	movs	r3, #0
 801cc3a:	4620      	mov	r0, r4
 801cc3c:	4629      	mov	r1, r5
 801cc3e:	f7e3 ff4d 	bl	8000adc <__aeabi_dcmplt>
 801cc42:	b300      	cbz	r0, 801cc86 <pow+0xa2>
 801cc44:	f000 ff28 	bl	801da98 <__errno>
 801cc48:	2322      	movs	r3, #34	; 0x22
 801cc4a:	e01b      	b.n	801cc84 <pow+0xa0>
 801cc4c:	ec47 6b10 	vmov	d0, r6, r7
 801cc50:	f000 fe72 	bl	801d938 <finite>
 801cc54:	b9e0      	cbnz	r0, 801cc90 <pow+0xac>
 801cc56:	eeb0 0a48 	vmov.f32	s0, s16
 801cc5a:	eef0 0a68 	vmov.f32	s1, s17
 801cc5e:	f000 fe6b 	bl	801d938 <finite>
 801cc62:	b1a8      	cbz	r0, 801cc90 <pow+0xac>
 801cc64:	ec45 4b10 	vmov	d0, r4, r5
 801cc68:	f000 fe66 	bl	801d938 <finite>
 801cc6c:	b180      	cbz	r0, 801cc90 <pow+0xac>
 801cc6e:	4632      	mov	r2, r6
 801cc70:	463b      	mov	r3, r7
 801cc72:	4630      	mov	r0, r6
 801cc74:	4639      	mov	r1, r7
 801cc76:	f7e3 ff59 	bl	8000b2c <__aeabi_dcmpun>
 801cc7a:	2800      	cmp	r0, #0
 801cc7c:	d0e2      	beq.n	801cc44 <pow+0x60>
 801cc7e:	f000 ff0b 	bl	801da98 <__errno>
 801cc82:	2321      	movs	r3, #33	; 0x21
 801cc84:	6003      	str	r3, [r0, #0]
 801cc86:	ecbd 8b02 	vpop	{d8}
 801cc8a:	ec47 6b10 	vmov	d0, r6, r7
 801cc8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cc90:	2200      	movs	r2, #0
 801cc92:	2300      	movs	r3, #0
 801cc94:	4630      	mov	r0, r6
 801cc96:	4639      	mov	r1, r7
 801cc98:	f7e3 ff16 	bl	8000ac8 <__aeabi_dcmpeq>
 801cc9c:	2800      	cmp	r0, #0
 801cc9e:	d0f2      	beq.n	801cc86 <pow+0xa2>
 801cca0:	eeb0 0a48 	vmov.f32	s0, s16
 801cca4:	eef0 0a68 	vmov.f32	s1, s17
 801cca8:	f000 fe46 	bl	801d938 <finite>
 801ccac:	2800      	cmp	r0, #0
 801ccae:	d0ea      	beq.n	801cc86 <pow+0xa2>
 801ccb0:	ec45 4b10 	vmov	d0, r4, r5
 801ccb4:	f000 fe40 	bl	801d938 <finite>
 801ccb8:	e7c3      	b.n	801cc42 <pow+0x5e>
 801ccba:	4f01      	ldr	r7, [pc, #4]	; (801ccc0 <pow+0xdc>)
 801ccbc:	2600      	movs	r6, #0
 801ccbe:	e7e2      	b.n	801cc86 <pow+0xa2>
 801ccc0:	3ff00000 	.word	0x3ff00000

0801ccc4 <sqrtf>:
 801ccc4:	b508      	push	{r3, lr}
 801ccc6:	ed2d 8b02 	vpush	{d8}
 801ccca:	eeb0 8a40 	vmov.f32	s16, s0
 801ccce:	f000 fdf7 	bl	801d8c0 <__ieee754_sqrtf>
 801ccd2:	eeb4 8a48 	vcmp.f32	s16, s16
 801ccd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ccda:	d60c      	bvs.n	801ccf6 <sqrtf+0x32>
 801ccdc:	eddf 8a07 	vldr	s17, [pc, #28]	; 801ccfc <sqrtf+0x38>
 801cce0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801cce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cce8:	d505      	bpl.n	801ccf6 <sqrtf+0x32>
 801ccea:	f000 fed5 	bl	801da98 <__errno>
 801ccee:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801ccf2:	2321      	movs	r3, #33	; 0x21
 801ccf4:	6003      	str	r3, [r0, #0]
 801ccf6:	ecbd 8b02 	vpop	{d8}
 801ccfa:	bd08      	pop	{r3, pc}
 801ccfc:	00000000 	.word	0x00000000

0801cd00 <__ieee754_pow>:
 801cd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd04:	ed2d 8b06 	vpush	{d8-d10}
 801cd08:	b089      	sub	sp, #36	; 0x24
 801cd0a:	ed8d 1b00 	vstr	d1, [sp]
 801cd0e:	e9dd 2900 	ldrd	r2, r9, [sp]
 801cd12:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801cd16:	ea58 0102 	orrs.w	r1, r8, r2
 801cd1a:	ec57 6b10 	vmov	r6, r7, d0
 801cd1e:	d115      	bne.n	801cd4c <__ieee754_pow+0x4c>
 801cd20:	19b3      	adds	r3, r6, r6
 801cd22:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801cd26:	4152      	adcs	r2, r2
 801cd28:	4299      	cmp	r1, r3
 801cd2a:	4b89      	ldr	r3, [pc, #548]	; (801cf50 <__ieee754_pow+0x250>)
 801cd2c:	4193      	sbcs	r3, r2
 801cd2e:	f080 84d2 	bcs.w	801d6d6 <__ieee754_pow+0x9d6>
 801cd32:	e9dd 2300 	ldrd	r2, r3, [sp]
 801cd36:	4630      	mov	r0, r6
 801cd38:	4639      	mov	r1, r7
 801cd3a:	f7e3 faa7 	bl	800028c <__adddf3>
 801cd3e:	ec41 0b10 	vmov	d0, r0, r1
 801cd42:	b009      	add	sp, #36	; 0x24
 801cd44:	ecbd 8b06 	vpop	{d8-d10}
 801cd48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd4c:	4b81      	ldr	r3, [pc, #516]	; (801cf54 <__ieee754_pow+0x254>)
 801cd4e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801cd52:	429c      	cmp	r4, r3
 801cd54:	ee10 aa10 	vmov	sl, s0
 801cd58:	463d      	mov	r5, r7
 801cd5a:	dc06      	bgt.n	801cd6a <__ieee754_pow+0x6a>
 801cd5c:	d101      	bne.n	801cd62 <__ieee754_pow+0x62>
 801cd5e:	2e00      	cmp	r6, #0
 801cd60:	d1e7      	bne.n	801cd32 <__ieee754_pow+0x32>
 801cd62:	4598      	cmp	r8, r3
 801cd64:	dc01      	bgt.n	801cd6a <__ieee754_pow+0x6a>
 801cd66:	d10f      	bne.n	801cd88 <__ieee754_pow+0x88>
 801cd68:	b172      	cbz	r2, 801cd88 <__ieee754_pow+0x88>
 801cd6a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801cd6e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801cd72:	ea55 050a 	orrs.w	r5, r5, sl
 801cd76:	d1dc      	bne.n	801cd32 <__ieee754_pow+0x32>
 801cd78:	e9dd 3200 	ldrd	r3, r2, [sp]
 801cd7c:	18db      	adds	r3, r3, r3
 801cd7e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801cd82:	4152      	adcs	r2, r2
 801cd84:	429d      	cmp	r5, r3
 801cd86:	e7d0      	b.n	801cd2a <__ieee754_pow+0x2a>
 801cd88:	2d00      	cmp	r5, #0
 801cd8a:	da3b      	bge.n	801ce04 <__ieee754_pow+0x104>
 801cd8c:	4b72      	ldr	r3, [pc, #456]	; (801cf58 <__ieee754_pow+0x258>)
 801cd8e:	4598      	cmp	r8, r3
 801cd90:	dc51      	bgt.n	801ce36 <__ieee754_pow+0x136>
 801cd92:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801cd96:	4598      	cmp	r8, r3
 801cd98:	f340 84ac 	ble.w	801d6f4 <__ieee754_pow+0x9f4>
 801cd9c:	ea4f 5328 	mov.w	r3, r8, asr #20
 801cda0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801cda4:	2b14      	cmp	r3, #20
 801cda6:	dd0f      	ble.n	801cdc8 <__ieee754_pow+0xc8>
 801cda8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801cdac:	fa22 f103 	lsr.w	r1, r2, r3
 801cdb0:	fa01 f303 	lsl.w	r3, r1, r3
 801cdb4:	4293      	cmp	r3, r2
 801cdb6:	f040 849d 	bne.w	801d6f4 <__ieee754_pow+0x9f4>
 801cdba:	f001 0101 	and.w	r1, r1, #1
 801cdbe:	f1c1 0302 	rsb	r3, r1, #2
 801cdc2:	9304      	str	r3, [sp, #16]
 801cdc4:	b182      	cbz	r2, 801cde8 <__ieee754_pow+0xe8>
 801cdc6:	e05f      	b.n	801ce88 <__ieee754_pow+0x188>
 801cdc8:	2a00      	cmp	r2, #0
 801cdca:	d15b      	bne.n	801ce84 <__ieee754_pow+0x184>
 801cdcc:	f1c3 0314 	rsb	r3, r3, #20
 801cdd0:	fa48 f103 	asr.w	r1, r8, r3
 801cdd4:	fa01 f303 	lsl.w	r3, r1, r3
 801cdd8:	4543      	cmp	r3, r8
 801cdda:	f040 8488 	bne.w	801d6ee <__ieee754_pow+0x9ee>
 801cdde:	f001 0101 	and.w	r1, r1, #1
 801cde2:	f1c1 0302 	rsb	r3, r1, #2
 801cde6:	9304      	str	r3, [sp, #16]
 801cde8:	4b5c      	ldr	r3, [pc, #368]	; (801cf5c <__ieee754_pow+0x25c>)
 801cdea:	4598      	cmp	r8, r3
 801cdec:	d132      	bne.n	801ce54 <__ieee754_pow+0x154>
 801cdee:	f1b9 0f00 	cmp.w	r9, #0
 801cdf2:	f280 8478 	bge.w	801d6e6 <__ieee754_pow+0x9e6>
 801cdf6:	4959      	ldr	r1, [pc, #356]	; (801cf5c <__ieee754_pow+0x25c>)
 801cdf8:	4632      	mov	r2, r6
 801cdfa:	463b      	mov	r3, r7
 801cdfc:	2000      	movs	r0, #0
 801cdfe:	f7e3 fd25 	bl	800084c <__aeabi_ddiv>
 801ce02:	e79c      	b.n	801cd3e <__ieee754_pow+0x3e>
 801ce04:	2300      	movs	r3, #0
 801ce06:	9304      	str	r3, [sp, #16]
 801ce08:	2a00      	cmp	r2, #0
 801ce0a:	d13d      	bne.n	801ce88 <__ieee754_pow+0x188>
 801ce0c:	4b51      	ldr	r3, [pc, #324]	; (801cf54 <__ieee754_pow+0x254>)
 801ce0e:	4598      	cmp	r8, r3
 801ce10:	d1ea      	bne.n	801cde8 <__ieee754_pow+0xe8>
 801ce12:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801ce16:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801ce1a:	ea53 030a 	orrs.w	r3, r3, sl
 801ce1e:	f000 845a 	beq.w	801d6d6 <__ieee754_pow+0x9d6>
 801ce22:	4b4f      	ldr	r3, [pc, #316]	; (801cf60 <__ieee754_pow+0x260>)
 801ce24:	429c      	cmp	r4, r3
 801ce26:	dd08      	ble.n	801ce3a <__ieee754_pow+0x13a>
 801ce28:	f1b9 0f00 	cmp.w	r9, #0
 801ce2c:	f2c0 8457 	blt.w	801d6de <__ieee754_pow+0x9de>
 801ce30:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ce34:	e783      	b.n	801cd3e <__ieee754_pow+0x3e>
 801ce36:	2302      	movs	r3, #2
 801ce38:	e7e5      	b.n	801ce06 <__ieee754_pow+0x106>
 801ce3a:	f1b9 0f00 	cmp.w	r9, #0
 801ce3e:	f04f 0000 	mov.w	r0, #0
 801ce42:	f04f 0100 	mov.w	r1, #0
 801ce46:	f6bf af7a 	bge.w	801cd3e <__ieee754_pow+0x3e>
 801ce4a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801ce4e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801ce52:	e774      	b.n	801cd3e <__ieee754_pow+0x3e>
 801ce54:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801ce58:	d106      	bne.n	801ce68 <__ieee754_pow+0x168>
 801ce5a:	4632      	mov	r2, r6
 801ce5c:	463b      	mov	r3, r7
 801ce5e:	4630      	mov	r0, r6
 801ce60:	4639      	mov	r1, r7
 801ce62:	f7e3 fbc9 	bl	80005f8 <__aeabi_dmul>
 801ce66:	e76a      	b.n	801cd3e <__ieee754_pow+0x3e>
 801ce68:	4b3e      	ldr	r3, [pc, #248]	; (801cf64 <__ieee754_pow+0x264>)
 801ce6a:	4599      	cmp	r9, r3
 801ce6c:	d10c      	bne.n	801ce88 <__ieee754_pow+0x188>
 801ce6e:	2d00      	cmp	r5, #0
 801ce70:	db0a      	blt.n	801ce88 <__ieee754_pow+0x188>
 801ce72:	ec47 6b10 	vmov	d0, r6, r7
 801ce76:	b009      	add	sp, #36	; 0x24
 801ce78:	ecbd 8b06 	vpop	{d8-d10}
 801ce7c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce80:	f000 bc6c 	b.w	801d75c <__ieee754_sqrt>
 801ce84:	2300      	movs	r3, #0
 801ce86:	9304      	str	r3, [sp, #16]
 801ce88:	ec47 6b10 	vmov	d0, r6, r7
 801ce8c:	f000 fd4b 	bl	801d926 <fabs>
 801ce90:	ec51 0b10 	vmov	r0, r1, d0
 801ce94:	f1ba 0f00 	cmp.w	sl, #0
 801ce98:	d129      	bne.n	801ceee <__ieee754_pow+0x1ee>
 801ce9a:	b124      	cbz	r4, 801cea6 <__ieee754_pow+0x1a6>
 801ce9c:	4b2f      	ldr	r3, [pc, #188]	; (801cf5c <__ieee754_pow+0x25c>)
 801ce9e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801cea2:	429a      	cmp	r2, r3
 801cea4:	d123      	bne.n	801ceee <__ieee754_pow+0x1ee>
 801cea6:	f1b9 0f00 	cmp.w	r9, #0
 801ceaa:	da05      	bge.n	801ceb8 <__ieee754_pow+0x1b8>
 801ceac:	4602      	mov	r2, r0
 801ceae:	460b      	mov	r3, r1
 801ceb0:	2000      	movs	r0, #0
 801ceb2:	492a      	ldr	r1, [pc, #168]	; (801cf5c <__ieee754_pow+0x25c>)
 801ceb4:	f7e3 fcca 	bl	800084c <__aeabi_ddiv>
 801ceb8:	2d00      	cmp	r5, #0
 801ceba:	f6bf af40 	bge.w	801cd3e <__ieee754_pow+0x3e>
 801cebe:	9b04      	ldr	r3, [sp, #16]
 801cec0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801cec4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801cec8:	4323      	orrs	r3, r4
 801ceca:	d108      	bne.n	801cede <__ieee754_pow+0x1de>
 801cecc:	4602      	mov	r2, r0
 801cece:	460b      	mov	r3, r1
 801ced0:	4610      	mov	r0, r2
 801ced2:	4619      	mov	r1, r3
 801ced4:	f7e3 f9d8 	bl	8000288 <__aeabi_dsub>
 801ced8:	4602      	mov	r2, r0
 801ceda:	460b      	mov	r3, r1
 801cedc:	e78f      	b.n	801cdfe <__ieee754_pow+0xfe>
 801cede:	9b04      	ldr	r3, [sp, #16]
 801cee0:	2b01      	cmp	r3, #1
 801cee2:	f47f af2c 	bne.w	801cd3e <__ieee754_pow+0x3e>
 801cee6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ceea:	4619      	mov	r1, r3
 801ceec:	e727      	b.n	801cd3e <__ieee754_pow+0x3e>
 801ceee:	0feb      	lsrs	r3, r5, #31
 801cef0:	3b01      	subs	r3, #1
 801cef2:	9306      	str	r3, [sp, #24]
 801cef4:	9a06      	ldr	r2, [sp, #24]
 801cef6:	9b04      	ldr	r3, [sp, #16]
 801cef8:	4313      	orrs	r3, r2
 801cefa:	d102      	bne.n	801cf02 <__ieee754_pow+0x202>
 801cefc:	4632      	mov	r2, r6
 801cefe:	463b      	mov	r3, r7
 801cf00:	e7e6      	b.n	801ced0 <__ieee754_pow+0x1d0>
 801cf02:	4b19      	ldr	r3, [pc, #100]	; (801cf68 <__ieee754_pow+0x268>)
 801cf04:	4598      	cmp	r8, r3
 801cf06:	f340 80fb 	ble.w	801d100 <__ieee754_pow+0x400>
 801cf0a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801cf0e:	4598      	cmp	r8, r3
 801cf10:	4b13      	ldr	r3, [pc, #76]	; (801cf60 <__ieee754_pow+0x260>)
 801cf12:	dd0c      	ble.n	801cf2e <__ieee754_pow+0x22e>
 801cf14:	429c      	cmp	r4, r3
 801cf16:	dc0f      	bgt.n	801cf38 <__ieee754_pow+0x238>
 801cf18:	f1b9 0f00 	cmp.w	r9, #0
 801cf1c:	da0f      	bge.n	801cf3e <__ieee754_pow+0x23e>
 801cf1e:	2000      	movs	r0, #0
 801cf20:	b009      	add	sp, #36	; 0x24
 801cf22:	ecbd 8b06 	vpop	{d8-d10}
 801cf26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf2a:	f000 bcf3 	b.w	801d914 <__math_oflow>
 801cf2e:	429c      	cmp	r4, r3
 801cf30:	dbf2      	blt.n	801cf18 <__ieee754_pow+0x218>
 801cf32:	4b0a      	ldr	r3, [pc, #40]	; (801cf5c <__ieee754_pow+0x25c>)
 801cf34:	429c      	cmp	r4, r3
 801cf36:	dd19      	ble.n	801cf6c <__ieee754_pow+0x26c>
 801cf38:	f1b9 0f00 	cmp.w	r9, #0
 801cf3c:	dcef      	bgt.n	801cf1e <__ieee754_pow+0x21e>
 801cf3e:	2000      	movs	r0, #0
 801cf40:	b009      	add	sp, #36	; 0x24
 801cf42:	ecbd 8b06 	vpop	{d8-d10}
 801cf46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf4a:	f000 bcda 	b.w	801d902 <__math_uflow>
 801cf4e:	bf00      	nop
 801cf50:	fff00000 	.word	0xfff00000
 801cf54:	7ff00000 	.word	0x7ff00000
 801cf58:	433fffff 	.word	0x433fffff
 801cf5c:	3ff00000 	.word	0x3ff00000
 801cf60:	3fefffff 	.word	0x3fefffff
 801cf64:	3fe00000 	.word	0x3fe00000
 801cf68:	41e00000 	.word	0x41e00000
 801cf6c:	4b60      	ldr	r3, [pc, #384]	; (801d0f0 <__ieee754_pow+0x3f0>)
 801cf6e:	2200      	movs	r2, #0
 801cf70:	f7e3 f98a 	bl	8000288 <__aeabi_dsub>
 801cf74:	a354      	add	r3, pc, #336	; (adr r3, 801d0c8 <__ieee754_pow+0x3c8>)
 801cf76:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf7a:	4604      	mov	r4, r0
 801cf7c:	460d      	mov	r5, r1
 801cf7e:	f7e3 fb3b 	bl	80005f8 <__aeabi_dmul>
 801cf82:	a353      	add	r3, pc, #332	; (adr r3, 801d0d0 <__ieee754_pow+0x3d0>)
 801cf84:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf88:	4606      	mov	r6, r0
 801cf8a:	460f      	mov	r7, r1
 801cf8c:	4620      	mov	r0, r4
 801cf8e:	4629      	mov	r1, r5
 801cf90:	f7e3 fb32 	bl	80005f8 <__aeabi_dmul>
 801cf94:	4b57      	ldr	r3, [pc, #348]	; (801d0f4 <__ieee754_pow+0x3f4>)
 801cf96:	4682      	mov	sl, r0
 801cf98:	468b      	mov	fp, r1
 801cf9a:	2200      	movs	r2, #0
 801cf9c:	4620      	mov	r0, r4
 801cf9e:	4629      	mov	r1, r5
 801cfa0:	f7e3 fb2a 	bl	80005f8 <__aeabi_dmul>
 801cfa4:	4602      	mov	r2, r0
 801cfa6:	460b      	mov	r3, r1
 801cfa8:	a14b      	add	r1, pc, #300	; (adr r1, 801d0d8 <__ieee754_pow+0x3d8>)
 801cfaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cfae:	f7e3 f96b 	bl	8000288 <__aeabi_dsub>
 801cfb2:	4622      	mov	r2, r4
 801cfb4:	462b      	mov	r3, r5
 801cfb6:	f7e3 fb1f 	bl	80005f8 <__aeabi_dmul>
 801cfba:	4602      	mov	r2, r0
 801cfbc:	460b      	mov	r3, r1
 801cfbe:	2000      	movs	r0, #0
 801cfc0:	494d      	ldr	r1, [pc, #308]	; (801d0f8 <__ieee754_pow+0x3f8>)
 801cfc2:	f7e3 f961 	bl	8000288 <__aeabi_dsub>
 801cfc6:	4622      	mov	r2, r4
 801cfc8:	4680      	mov	r8, r0
 801cfca:	4689      	mov	r9, r1
 801cfcc:	462b      	mov	r3, r5
 801cfce:	4620      	mov	r0, r4
 801cfd0:	4629      	mov	r1, r5
 801cfd2:	f7e3 fb11 	bl	80005f8 <__aeabi_dmul>
 801cfd6:	4602      	mov	r2, r0
 801cfd8:	460b      	mov	r3, r1
 801cfda:	4640      	mov	r0, r8
 801cfdc:	4649      	mov	r1, r9
 801cfde:	f7e3 fb0b 	bl	80005f8 <__aeabi_dmul>
 801cfe2:	a33f      	add	r3, pc, #252	; (adr r3, 801d0e0 <__ieee754_pow+0x3e0>)
 801cfe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cfe8:	f7e3 fb06 	bl	80005f8 <__aeabi_dmul>
 801cfec:	4602      	mov	r2, r0
 801cfee:	460b      	mov	r3, r1
 801cff0:	4650      	mov	r0, sl
 801cff2:	4659      	mov	r1, fp
 801cff4:	f7e3 f948 	bl	8000288 <__aeabi_dsub>
 801cff8:	4602      	mov	r2, r0
 801cffa:	460b      	mov	r3, r1
 801cffc:	4680      	mov	r8, r0
 801cffe:	4689      	mov	r9, r1
 801d000:	4630      	mov	r0, r6
 801d002:	4639      	mov	r1, r7
 801d004:	f7e3 f942 	bl	800028c <__adddf3>
 801d008:	2000      	movs	r0, #0
 801d00a:	4632      	mov	r2, r6
 801d00c:	463b      	mov	r3, r7
 801d00e:	4604      	mov	r4, r0
 801d010:	460d      	mov	r5, r1
 801d012:	f7e3 f939 	bl	8000288 <__aeabi_dsub>
 801d016:	4602      	mov	r2, r0
 801d018:	460b      	mov	r3, r1
 801d01a:	4640      	mov	r0, r8
 801d01c:	4649      	mov	r1, r9
 801d01e:	f7e3 f933 	bl	8000288 <__aeabi_dsub>
 801d022:	9b04      	ldr	r3, [sp, #16]
 801d024:	9a06      	ldr	r2, [sp, #24]
 801d026:	3b01      	subs	r3, #1
 801d028:	4313      	orrs	r3, r2
 801d02a:	4682      	mov	sl, r0
 801d02c:	468b      	mov	fp, r1
 801d02e:	f040 81e7 	bne.w	801d400 <__ieee754_pow+0x700>
 801d032:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 801d0e8 <__ieee754_pow+0x3e8>
 801d036:	eeb0 8a47 	vmov.f32	s16, s14
 801d03a:	eef0 8a67 	vmov.f32	s17, s15
 801d03e:	e9dd 6700 	ldrd	r6, r7, [sp]
 801d042:	2600      	movs	r6, #0
 801d044:	4632      	mov	r2, r6
 801d046:	463b      	mov	r3, r7
 801d048:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d04c:	f7e3 f91c 	bl	8000288 <__aeabi_dsub>
 801d050:	4622      	mov	r2, r4
 801d052:	462b      	mov	r3, r5
 801d054:	f7e3 fad0 	bl	80005f8 <__aeabi_dmul>
 801d058:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d05c:	4680      	mov	r8, r0
 801d05e:	4689      	mov	r9, r1
 801d060:	4650      	mov	r0, sl
 801d062:	4659      	mov	r1, fp
 801d064:	f7e3 fac8 	bl	80005f8 <__aeabi_dmul>
 801d068:	4602      	mov	r2, r0
 801d06a:	460b      	mov	r3, r1
 801d06c:	4640      	mov	r0, r8
 801d06e:	4649      	mov	r1, r9
 801d070:	f7e3 f90c 	bl	800028c <__adddf3>
 801d074:	4632      	mov	r2, r6
 801d076:	463b      	mov	r3, r7
 801d078:	4680      	mov	r8, r0
 801d07a:	4689      	mov	r9, r1
 801d07c:	4620      	mov	r0, r4
 801d07e:	4629      	mov	r1, r5
 801d080:	f7e3 faba 	bl	80005f8 <__aeabi_dmul>
 801d084:	460b      	mov	r3, r1
 801d086:	4604      	mov	r4, r0
 801d088:	460d      	mov	r5, r1
 801d08a:	4602      	mov	r2, r0
 801d08c:	4649      	mov	r1, r9
 801d08e:	4640      	mov	r0, r8
 801d090:	f7e3 f8fc 	bl	800028c <__adddf3>
 801d094:	4b19      	ldr	r3, [pc, #100]	; (801d0fc <__ieee754_pow+0x3fc>)
 801d096:	4299      	cmp	r1, r3
 801d098:	ec45 4b19 	vmov	d9, r4, r5
 801d09c:	4606      	mov	r6, r0
 801d09e:	460f      	mov	r7, r1
 801d0a0:	468b      	mov	fp, r1
 801d0a2:	f340 82f1 	ble.w	801d688 <__ieee754_pow+0x988>
 801d0a6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801d0aa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801d0ae:	4303      	orrs	r3, r0
 801d0b0:	f000 81e4 	beq.w	801d47c <__ieee754_pow+0x77c>
 801d0b4:	ec51 0b18 	vmov	r0, r1, d8
 801d0b8:	2200      	movs	r2, #0
 801d0ba:	2300      	movs	r3, #0
 801d0bc:	f7e3 fd0e 	bl	8000adc <__aeabi_dcmplt>
 801d0c0:	3800      	subs	r0, #0
 801d0c2:	bf18      	it	ne
 801d0c4:	2001      	movne	r0, #1
 801d0c6:	e72b      	b.n	801cf20 <__ieee754_pow+0x220>
 801d0c8:	60000000 	.word	0x60000000
 801d0cc:	3ff71547 	.word	0x3ff71547
 801d0d0:	f85ddf44 	.word	0xf85ddf44
 801d0d4:	3e54ae0b 	.word	0x3e54ae0b
 801d0d8:	55555555 	.word	0x55555555
 801d0dc:	3fd55555 	.word	0x3fd55555
 801d0e0:	652b82fe 	.word	0x652b82fe
 801d0e4:	3ff71547 	.word	0x3ff71547
 801d0e8:	00000000 	.word	0x00000000
 801d0ec:	bff00000 	.word	0xbff00000
 801d0f0:	3ff00000 	.word	0x3ff00000
 801d0f4:	3fd00000 	.word	0x3fd00000
 801d0f8:	3fe00000 	.word	0x3fe00000
 801d0fc:	408fffff 	.word	0x408fffff
 801d100:	4bd5      	ldr	r3, [pc, #852]	; (801d458 <__ieee754_pow+0x758>)
 801d102:	402b      	ands	r3, r5
 801d104:	2200      	movs	r2, #0
 801d106:	b92b      	cbnz	r3, 801d114 <__ieee754_pow+0x414>
 801d108:	4bd4      	ldr	r3, [pc, #848]	; (801d45c <__ieee754_pow+0x75c>)
 801d10a:	f7e3 fa75 	bl	80005f8 <__aeabi_dmul>
 801d10e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801d112:	460c      	mov	r4, r1
 801d114:	1523      	asrs	r3, r4, #20
 801d116:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801d11a:	4413      	add	r3, r2
 801d11c:	9305      	str	r3, [sp, #20]
 801d11e:	4bd0      	ldr	r3, [pc, #832]	; (801d460 <__ieee754_pow+0x760>)
 801d120:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801d124:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801d128:	429c      	cmp	r4, r3
 801d12a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801d12e:	dd08      	ble.n	801d142 <__ieee754_pow+0x442>
 801d130:	4bcc      	ldr	r3, [pc, #816]	; (801d464 <__ieee754_pow+0x764>)
 801d132:	429c      	cmp	r4, r3
 801d134:	f340 8162 	ble.w	801d3fc <__ieee754_pow+0x6fc>
 801d138:	9b05      	ldr	r3, [sp, #20]
 801d13a:	3301      	adds	r3, #1
 801d13c:	9305      	str	r3, [sp, #20]
 801d13e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801d142:	2400      	movs	r4, #0
 801d144:	00e3      	lsls	r3, r4, #3
 801d146:	9307      	str	r3, [sp, #28]
 801d148:	4bc7      	ldr	r3, [pc, #796]	; (801d468 <__ieee754_pow+0x768>)
 801d14a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801d14e:	ed93 7b00 	vldr	d7, [r3]
 801d152:	4629      	mov	r1, r5
 801d154:	ec53 2b17 	vmov	r2, r3, d7
 801d158:	eeb0 9a47 	vmov.f32	s18, s14
 801d15c:	eef0 9a67 	vmov.f32	s19, s15
 801d160:	4682      	mov	sl, r0
 801d162:	f7e3 f891 	bl	8000288 <__aeabi_dsub>
 801d166:	4652      	mov	r2, sl
 801d168:	4606      	mov	r6, r0
 801d16a:	460f      	mov	r7, r1
 801d16c:	462b      	mov	r3, r5
 801d16e:	ec51 0b19 	vmov	r0, r1, d9
 801d172:	f7e3 f88b 	bl	800028c <__adddf3>
 801d176:	4602      	mov	r2, r0
 801d178:	460b      	mov	r3, r1
 801d17a:	2000      	movs	r0, #0
 801d17c:	49bb      	ldr	r1, [pc, #748]	; (801d46c <__ieee754_pow+0x76c>)
 801d17e:	f7e3 fb65 	bl	800084c <__aeabi_ddiv>
 801d182:	ec41 0b1a 	vmov	d10, r0, r1
 801d186:	4602      	mov	r2, r0
 801d188:	460b      	mov	r3, r1
 801d18a:	4630      	mov	r0, r6
 801d18c:	4639      	mov	r1, r7
 801d18e:	f7e3 fa33 	bl	80005f8 <__aeabi_dmul>
 801d192:	2300      	movs	r3, #0
 801d194:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d198:	9302      	str	r3, [sp, #8]
 801d19a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801d19e:	46ab      	mov	fp, r5
 801d1a0:	106d      	asrs	r5, r5, #1
 801d1a2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801d1a6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801d1aa:	ec41 0b18 	vmov	d8, r0, r1
 801d1ae:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801d1b2:	2200      	movs	r2, #0
 801d1b4:	4640      	mov	r0, r8
 801d1b6:	4649      	mov	r1, r9
 801d1b8:	4614      	mov	r4, r2
 801d1ba:	461d      	mov	r5, r3
 801d1bc:	f7e3 fa1c 	bl	80005f8 <__aeabi_dmul>
 801d1c0:	4602      	mov	r2, r0
 801d1c2:	460b      	mov	r3, r1
 801d1c4:	4630      	mov	r0, r6
 801d1c6:	4639      	mov	r1, r7
 801d1c8:	f7e3 f85e 	bl	8000288 <__aeabi_dsub>
 801d1cc:	ec53 2b19 	vmov	r2, r3, d9
 801d1d0:	4606      	mov	r6, r0
 801d1d2:	460f      	mov	r7, r1
 801d1d4:	4620      	mov	r0, r4
 801d1d6:	4629      	mov	r1, r5
 801d1d8:	f7e3 f856 	bl	8000288 <__aeabi_dsub>
 801d1dc:	4602      	mov	r2, r0
 801d1de:	460b      	mov	r3, r1
 801d1e0:	4650      	mov	r0, sl
 801d1e2:	4659      	mov	r1, fp
 801d1e4:	f7e3 f850 	bl	8000288 <__aeabi_dsub>
 801d1e8:	4642      	mov	r2, r8
 801d1ea:	464b      	mov	r3, r9
 801d1ec:	f7e3 fa04 	bl	80005f8 <__aeabi_dmul>
 801d1f0:	4602      	mov	r2, r0
 801d1f2:	460b      	mov	r3, r1
 801d1f4:	4630      	mov	r0, r6
 801d1f6:	4639      	mov	r1, r7
 801d1f8:	f7e3 f846 	bl	8000288 <__aeabi_dsub>
 801d1fc:	ec53 2b1a 	vmov	r2, r3, d10
 801d200:	f7e3 f9fa 	bl	80005f8 <__aeabi_dmul>
 801d204:	ec53 2b18 	vmov	r2, r3, d8
 801d208:	ec41 0b19 	vmov	d9, r0, r1
 801d20c:	ec51 0b18 	vmov	r0, r1, d8
 801d210:	f7e3 f9f2 	bl	80005f8 <__aeabi_dmul>
 801d214:	a37c      	add	r3, pc, #496	; (adr r3, 801d408 <__ieee754_pow+0x708>)
 801d216:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d21a:	4604      	mov	r4, r0
 801d21c:	460d      	mov	r5, r1
 801d21e:	f7e3 f9eb 	bl	80005f8 <__aeabi_dmul>
 801d222:	a37b      	add	r3, pc, #492	; (adr r3, 801d410 <__ieee754_pow+0x710>)
 801d224:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d228:	f7e3 f830 	bl	800028c <__adddf3>
 801d22c:	4622      	mov	r2, r4
 801d22e:	462b      	mov	r3, r5
 801d230:	f7e3 f9e2 	bl	80005f8 <__aeabi_dmul>
 801d234:	a378      	add	r3, pc, #480	; (adr r3, 801d418 <__ieee754_pow+0x718>)
 801d236:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d23a:	f7e3 f827 	bl	800028c <__adddf3>
 801d23e:	4622      	mov	r2, r4
 801d240:	462b      	mov	r3, r5
 801d242:	f7e3 f9d9 	bl	80005f8 <__aeabi_dmul>
 801d246:	a376      	add	r3, pc, #472	; (adr r3, 801d420 <__ieee754_pow+0x720>)
 801d248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d24c:	f7e3 f81e 	bl	800028c <__adddf3>
 801d250:	4622      	mov	r2, r4
 801d252:	462b      	mov	r3, r5
 801d254:	f7e3 f9d0 	bl	80005f8 <__aeabi_dmul>
 801d258:	a373      	add	r3, pc, #460	; (adr r3, 801d428 <__ieee754_pow+0x728>)
 801d25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d25e:	f7e3 f815 	bl	800028c <__adddf3>
 801d262:	4622      	mov	r2, r4
 801d264:	462b      	mov	r3, r5
 801d266:	f7e3 f9c7 	bl	80005f8 <__aeabi_dmul>
 801d26a:	a371      	add	r3, pc, #452	; (adr r3, 801d430 <__ieee754_pow+0x730>)
 801d26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d270:	f7e3 f80c 	bl	800028c <__adddf3>
 801d274:	4622      	mov	r2, r4
 801d276:	4606      	mov	r6, r0
 801d278:	460f      	mov	r7, r1
 801d27a:	462b      	mov	r3, r5
 801d27c:	4620      	mov	r0, r4
 801d27e:	4629      	mov	r1, r5
 801d280:	f7e3 f9ba 	bl	80005f8 <__aeabi_dmul>
 801d284:	4602      	mov	r2, r0
 801d286:	460b      	mov	r3, r1
 801d288:	4630      	mov	r0, r6
 801d28a:	4639      	mov	r1, r7
 801d28c:	f7e3 f9b4 	bl	80005f8 <__aeabi_dmul>
 801d290:	4642      	mov	r2, r8
 801d292:	4604      	mov	r4, r0
 801d294:	460d      	mov	r5, r1
 801d296:	464b      	mov	r3, r9
 801d298:	ec51 0b18 	vmov	r0, r1, d8
 801d29c:	f7e2 fff6 	bl	800028c <__adddf3>
 801d2a0:	ec53 2b19 	vmov	r2, r3, d9
 801d2a4:	f7e3 f9a8 	bl	80005f8 <__aeabi_dmul>
 801d2a8:	4622      	mov	r2, r4
 801d2aa:	462b      	mov	r3, r5
 801d2ac:	f7e2 ffee 	bl	800028c <__adddf3>
 801d2b0:	4642      	mov	r2, r8
 801d2b2:	4682      	mov	sl, r0
 801d2b4:	468b      	mov	fp, r1
 801d2b6:	464b      	mov	r3, r9
 801d2b8:	4640      	mov	r0, r8
 801d2ba:	4649      	mov	r1, r9
 801d2bc:	f7e3 f99c 	bl	80005f8 <__aeabi_dmul>
 801d2c0:	4b6b      	ldr	r3, [pc, #428]	; (801d470 <__ieee754_pow+0x770>)
 801d2c2:	2200      	movs	r2, #0
 801d2c4:	4606      	mov	r6, r0
 801d2c6:	460f      	mov	r7, r1
 801d2c8:	f7e2 ffe0 	bl	800028c <__adddf3>
 801d2cc:	4652      	mov	r2, sl
 801d2ce:	465b      	mov	r3, fp
 801d2d0:	f7e2 ffdc 	bl	800028c <__adddf3>
 801d2d4:	2000      	movs	r0, #0
 801d2d6:	4604      	mov	r4, r0
 801d2d8:	460d      	mov	r5, r1
 801d2da:	4602      	mov	r2, r0
 801d2dc:	460b      	mov	r3, r1
 801d2de:	4640      	mov	r0, r8
 801d2e0:	4649      	mov	r1, r9
 801d2e2:	f7e3 f989 	bl	80005f8 <__aeabi_dmul>
 801d2e6:	4b62      	ldr	r3, [pc, #392]	; (801d470 <__ieee754_pow+0x770>)
 801d2e8:	4680      	mov	r8, r0
 801d2ea:	4689      	mov	r9, r1
 801d2ec:	2200      	movs	r2, #0
 801d2ee:	4620      	mov	r0, r4
 801d2f0:	4629      	mov	r1, r5
 801d2f2:	f7e2 ffc9 	bl	8000288 <__aeabi_dsub>
 801d2f6:	4632      	mov	r2, r6
 801d2f8:	463b      	mov	r3, r7
 801d2fa:	f7e2 ffc5 	bl	8000288 <__aeabi_dsub>
 801d2fe:	4602      	mov	r2, r0
 801d300:	460b      	mov	r3, r1
 801d302:	4650      	mov	r0, sl
 801d304:	4659      	mov	r1, fp
 801d306:	f7e2 ffbf 	bl	8000288 <__aeabi_dsub>
 801d30a:	ec53 2b18 	vmov	r2, r3, d8
 801d30e:	f7e3 f973 	bl	80005f8 <__aeabi_dmul>
 801d312:	4622      	mov	r2, r4
 801d314:	4606      	mov	r6, r0
 801d316:	460f      	mov	r7, r1
 801d318:	462b      	mov	r3, r5
 801d31a:	ec51 0b19 	vmov	r0, r1, d9
 801d31e:	f7e3 f96b 	bl	80005f8 <__aeabi_dmul>
 801d322:	4602      	mov	r2, r0
 801d324:	460b      	mov	r3, r1
 801d326:	4630      	mov	r0, r6
 801d328:	4639      	mov	r1, r7
 801d32a:	f7e2 ffaf 	bl	800028c <__adddf3>
 801d32e:	4606      	mov	r6, r0
 801d330:	460f      	mov	r7, r1
 801d332:	4602      	mov	r2, r0
 801d334:	460b      	mov	r3, r1
 801d336:	4640      	mov	r0, r8
 801d338:	4649      	mov	r1, r9
 801d33a:	f7e2 ffa7 	bl	800028c <__adddf3>
 801d33e:	a33e      	add	r3, pc, #248	; (adr r3, 801d438 <__ieee754_pow+0x738>)
 801d340:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d344:	2000      	movs	r0, #0
 801d346:	4604      	mov	r4, r0
 801d348:	460d      	mov	r5, r1
 801d34a:	f7e3 f955 	bl	80005f8 <__aeabi_dmul>
 801d34e:	4642      	mov	r2, r8
 801d350:	ec41 0b18 	vmov	d8, r0, r1
 801d354:	464b      	mov	r3, r9
 801d356:	4620      	mov	r0, r4
 801d358:	4629      	mov	r1, r5
 801d35a:	f7e2 ff95 	bl	8000288 <__aeabi_dsub>
 801d35e:	4602      	mov	r2, r0
 801d360:	460b      	mov	r3, r1
 801d362:	4630      	mov	r0, r6
 801d364:	4639      	mov	r1, r7
 801d366:	f7e2 ff8f 	bl	8000288 <__aeabi_dsub>
 801d36a:	a335      	add	r3, pc, #212	; (adr r3, 801d440 <__ieee754_pow+0x740>)
 801d36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d370:	f7e3 f942 	bl	80005f8 <__aeabi_dmul>
 801d374:	a334      	add	r3, pc, #208	; (adr r3, 801d448 <__ieee754_pow+0x748>)
 801d376:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d37a:	4606      	mov	r6, r0
 801d37c:	460f      	mov	r7, r1
 801d37e:	4620      	mov	r0, r4
 801d380:	4629      	mov	r1, r5
 801d382:	f7e3 f939 	bl	80005f8 <__aeabi_dmul>
 801d386:	4602      	mov	r2, r0
 801d388:	460b      	mov	r3, r1
 801d38a:	4630      	mov	r0, r6
 801d38c:	4639      	mov	r1, r7
 801d38e:	f7e2 ff7d 	bl	800028c <__adddf3>
 801d392:	9a07      	ldr	r2, [sp, #28]
 801d394:	4b37      	ldr	r3, [pc, #220]	; (801d474 <__ieee754_pow+0x774>)
 801d396:	4413      	add	r3, r2
 801d398:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d39c:	f7e2 ff76 	bl	800028c <__adddf3>
 801d3a0:	4682      	mov	sl, r0
 801d3a2:	9805      	ldr	r0, [sp, #20]
 801d3a4:	468b      	mov	fp, r1
 801d3a6:	f7e3 f8bd 	bl	8000524 <__aeabi_i2d>
 801d3aa:	9a07      	ldr	r2, [sp, #28]
 801d3ac:	4b32      	ldr	r3, [pc, #200]	; (801d478 <__ieee754_pow+0x778>)
 801d3ae:	4413      	add	r3, r2
 801d3b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d3b4:	4606      	mov	r6, r0
 801d3b6:	460f      	mov	r7, r1
 801d3b8:	4652      	mov	r2, sl
 801d3ba:	465b      	mov	r3, fp
 801d3bc:	ec51 0b18 	vmov	r0, r1, d8
 801d3c0:	f7e2 ff64 	bl	800028c <__adddf3>
 801d3c4:	4642      	mov	r2, r8
 801d3c6:	464b      	mov	r3, r9
 801d3c8:	f7e2 ff60 	bl	800028c <__adddf3>
 801d3cc:	4632      	mov	r2, r6
 801d3ce:	463b      	mov	r3, r7
 801d3d0:	f7e2 ff5c 	bl	800028c <__adddf3>
 801d3d4:	2000      	movs	r0, #0
 801d3d6:	4632      	mov	r2, r6
 801d3d8:	463b      	mov	r3, r7
 801d3da:	4604      	mov	r4, r0
 801d3dc:	460d      	mov	r5, r1
 801d3de:	f7e2 ff53 	bl	8000288 <__aeabi_dsub>
 801d3e2:	4642      	mov	r2, r8
 801d3e4:	464b      	mov	r3, r9
 801d3e6:	f7e2 ff4f 	bl	8000288 <__aeabi_dsub>
 801d3ea:	ec53 2b18 	vmov	r2, r3, d8
 801d3ee:	f7e2 ff4b 	bl	8000288 <__aeabi_dsub>
 801d3f2:	4602      	mov	r2, r0
 801d3f4:	460b      	mov	r3, r1
 801d3f6:	4650      	mov	r0, sl
 801d3f8:	4659      	mov	r1, fp
 801d3fa:	e610      	b.n	801d01e <__ieee754_pow+0x31e>
 801d3fc:	2401      	movs	r4, #1
 801d3fe:	e6a1      	b.n	801d144 <__ieee754_pow+0x444>
 801d400:	ed9f 7b13 	vldr	d7, [pc, #76]	; 801d450 <__ieee754_pow+0x750>
 801d404:	e617      	b.n	801d036 <__ieee754_pow+0x336>
 801d406:	bf00      	nop
 801d408:	4a454eef 	.word	0x4a454eef
 801d40c:	3fca7e28 	.word	0x3fca7e28
 801d410:	93c9db65 	.word	0x93c9db65
 801d414:	3fcd864a 	.word	0x3fcd864a
 801d418:	a91d4101 	.word	0xa91d4101
 801d41c:	3fd17460 	.word	0x3fd17460
 801d420:	518f264d 	.word	0x518f264d
 801d424:	3fd55555 	.word	0x3fd55555
 801d428:	db6fabff 	.word	0xdb6fabff
 801d42c:	3fdb6db6 	.word	0x3fdb6db6
 801d430:	33333303 	.word	0x33333303
 801d434:	3fe33333 	.word	0x3fe33333
 801d438:	e0000000 	.word	0xe0000000
 801d43c:	3feec709 	.word	0x3feec709
 801d440:	dc3a03fd 	.word	0xdc3a03fd
 801d444:	3feec709 	.word	0x3feec709
 801d448:	145b01f5 	.word	0x145b01f5
 801d44c:	be3e2fe0 	.word	0xbe3e2fe0
 801d450:	00000000 	.word	0x00000000
 801d454:	3ff00000 	.word	0x3ff00000
 801d458:	7ff00000 	.word	0x7ff00000
 801d45c:	43400000 	.word	0x43400000
 801d460:	0003988e 	.word	0x0003988e
 801d464:	000bb679 	.word	0x000bb679
 801d468:	08029ad8 	.word	0x08029ad8
 801d46c:	3ff00000 	.word	0x3ff00000
 801d470:	40080000 	.word	0x40080000
 801d474:	08029af8 	.word	0x08029af8
 801d478:	08029ae8 	.word	0x08029ae8
 801d47c:	a3b5      	add	r3, pc, #724	; (adr r3, 801d754 <__ieee754_pow+0xa54>)
 801d47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d482:	4640      	mov	r0, r8
 801d484:	4649      	mov	r1, r9
 801d486:	f7e2 ff01 	bl	800028c <__adddf3>
 801d48a:	4622      	mov	r2, r4
 801d48c:	ec41 0b1a 	vmov	d10, r0, r1
 801d490:	462b      	mov	r3, r5
 801d492:	4630      	mov	r0, r6
 801d494:	4639      	mov	r1, r7
 801d496:	f7e2 fef7 	bl	8000288 <__aeabi_dsub>
 801d49a:	4602      	mov	r2, r0
 801d49c:	460b      	mov	r3, r1
 801d49e:	ec51 0b1a 	vmov	r0, r1, d10
 801d4a2:	f7e3 fb39 	bl	8000b18 <__aeabi_dcmpgt>
 801d4a6:	2800      	cmp	r0, #0
 801d4a8:	f47f ae04 	bne.w	801d0b4 <__ieee754_pow+0x3b4>
 801d4ac:	4aa4      	ldr	r2, [pc, #656]	; (801d740 <__ieee754_pow+0xa40>)
 801d4ae:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801d4b2:	4293      	cmp	r3, r2
 801d4b4:	f340 8108 	ble.w	801d6c8 <__ieee754_pow+0x9c8>
 801d4b8:	151b      	asrs	r3, r3, #20
 801d4ba:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801d4be:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801d4c2:	fa4a f303 	asr.w	r3, sl, r3
 801d4c6:	445b      	add	r3, fp
 801d4c8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801d4cc:	4e9d      	ldr	r6, [pc, #628]	; (801d744 <__ieee754_pow+0xa44>)
 801d4ce:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801d4d2:	4116      	asrs	r6, r2
 801d4d4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801d4d8:	2000      	movs	r0, #0
 801d4da:	ea23 0106 	bic.w	r1, r3, r6
 801d4de:	f1c2 0214 	rsb	r2, r2, #20
 801d4e2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801d4e6:	fa4a fa02 	asr.w	sl, sl, r2
 801d4ea:	f1bb 0f00 	cmp.w	fp, #0
 801d4ee:	4602      	mov	r2, r0
 801d4f0:	460b      	mov	r3, r1
 801d4f2:	4620      	mov	r0, r4
 801d4f4:	4629      	mov	r1, r5
 801d4f6:	bfb8      	it	lt
 801d4f8:	f1ca 0a00 	rsblt	sl, sl, #0
 801d4fc:	f7e2 fec4 	bl	8000288 <__aeabi_dsub>
 801d500:	ec41 0b19 	vmov	d9, r0, r1
 801d504:	4642      	mov	r2, r8
 801d506:	464b      	mov	r3, r9
 801d508:	ec51 0b19 	vmov	r0, r1, d9
 801d50c:	f7e2 febe 	bl	800028c <__adddf3>
 801d510:	a37b      	add	r3, pc, #492	; (adr r3, 801d700 <__ieee754_pow+0xa00>)
 801d512:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d516:	2000      	movs	r0, #0
 801d518:	4604      	mov	r4, r0
 801d51a:	460d      	mov	r5, r1
 801d51c:	f7e3 f86c 	bl	80005f8 <__aeabi_dmul>
 801d520:	ec53 2b19 	vmov	r2, r3, d9
 801d524:	4606      	mov	r6, r0
 801d526:	460f      	mov	r7, r1
 801d528:	4620      	mov	r0, r4
 801d52a:	4629      	mov	r1, r5
 801d52c:	f7e2 feac 	bl	8000288 <__aeabi_dsub>
 801d530:	4602      	mov	r2, r0
 801d532:	460b      	mov	r3, r1
 801d534:	4640      	mov	r0, r8
 801d536:	4649      	mov	r1, r9
 801d538:	f7e2 fea6 	bl	8000288 <__aeabi_dsub>
 801d53c:	a372      	add	r3, pc, #456	; (adr r3, 801d708 <__ieee754_pow+0xa08>)
 801d53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d542:	f7e3 f859 	bl	80005f8 <__aeabi_dmul>
 801d546:	a372      	add	r3, pc, #456	; (adr r3, 801d710 <__ieee754_pow+0xa10>)
 801d548:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d54c:	4680      	mov	r8, r0
 801d54e:	4689      	mov	r9, r1
 801d550:	4620      	mov	r0, r4
 801d552:	4629      	mov	r1, r5
 801d554:	f7e3 f850 	bl	80005f8 <__aeabi_dmul>
 801d558:	4602      	mov	r2, r0
 801d55a:	460b      	mov	r3, r1
 801d55c:	4640      	mov	r0, r8
 801d55e:	4649      	mov	r1, r9
 801d560:	f7e2 fe94 	bl	800028c <__adddf3>
 801d564:	4604      	mov	r4, r0
 801d566:	460d      	mov	r5, r1
 801d568:	4602      	mov	r2, r0
 801d56a:	460b      	mov	r3, r1
 801d56c:	4630      	mov	r0, r6
 801d56e:	4639      	mov	r1, r7
 801d570:	f7e2 fe8c 	bl	800028c <__adddf3>
 801d574:	4632      	mov	r2, r6
 801d576:	463b      	mov	r3, r7
 801d578:	4680      	mov	r8, r0
 801d57a:	4689      	mov	r9, r1
 801d57c:	f7e2 fe84 	bl	8000288 <__aeabi_dsub>
 801d580:	4602      	mov	r2, r0
 801d582:	460b      	mov	r3, r1
 801d584:	4620      	mov	r0, r4
 801d586:	4629      	mov	r1, r5
 801d588:	f7e2 fe7e 	bl	8000288 <__aeabi_dsub>
 801d58c:	4642      	mov	r2, r8
 801d58e:	4606      	mov	r6, r0
 801d590:	460f      	mov	r7, r1
 801d592:	464b      	mov	r3, r9
 801d594:	4640      	mov	r0, r8
 801d596:	4649      	mov	r1, r9
 801d598:	f7e3 f82e 	bl	80005f8 <__aeabi_dmul>
 801d59c:	a35e      	add	r3, pc, #376	; (adr r3, 801d718 <__ieee754_pow+0xa18>)
 801d59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5a2:	4604      	mov	r4, r0
 801d5a4:	460d      	mov	r5, r1
 801d5a6:	f7e3 f827 	bl	80005f8 <__aeabi_dmul>
 801d5aa:	a35d      	add	r3, pc, #372	; (adr r3, 801d720 <__ieee754_pow+0xa20>)
 801d5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5b0:	f7e2 fe6a 	bl	8000288 <__aeabi_dsub>
 801d5b4:	4622      	mov	r2, r4
 801d5b6:	462b      	mov	r3, r5
 801d5b8:	f7e3 f81e 	bl	80005f8 <__aeabi_dmul>
 801d5bc:	a35a      	add	r3, pc, #360	; (adr r3, 801d728 <__ieee754_pow+0xa28>)
 801d5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5c2:	f7e2 fe63 	bl	800028c <__adddf3>
 801d5c6:	4622      	mov	r2, r4
 801d5c8:	462b      	mov	r3, r5
 801d5ca:	f7e3 f815 	bl	80005f8 <__aeabi_dmul>
 801d5ce:	a358      	add	r3, pc, #352	; (adr r3, 801d730 <__ieee754_pow+0xa30>)
 801d5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5d4:	f7e2 fe58 	bl	8000288 <__aeabi_dsub>
 801d5d8:	4622      	mov	r2, r4
 801d5da:	462b      	mov	r3, r5
 801d5dc:	f7e3 f80c 	bl	80005f8 <__aeabi_dmul>
 801d5e0:	a355      	add	r3, pc, #340	; (adr r3, 801d738 <__ieee754_pow+0xa38>)
 801d5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5e6:	f7e2 fe51 	bl	800028c <__adddf3>
 801d5ea:	4622      	mov	r2, r4
 801d5ec:	462b      	mov	r3, r5
 801d5ee:	f7e3 f803 	bl	80005f8 <__aeabi_dmul>
 801d5f2:	4602      	mov	r2, r0
 801d5f4:	460b      	mov	r3, r1
 801d5f6:	4640      	mov	r0, r8
 801d5f8:	4649      	mov	r1, r9
 801d5fa:	f7e2 fe45 	bl	8000288 <__aeabi_dsub>
 801d5fe:	4604      	mov	r4, r0
 801d600:	460d      	mov	r5, r1
 801d602:	4602      	mov	r2, r0
 801d604:	460b      	mov	r3, r1
 801d606:	4640      	mov	r0, r8
 801d608:	4649      	mov	r1, r9
 801d60a:	f7e2 fff5 	bl	80005f8 <__aeabi_dmul>
 801d60e:	2200      	movs	r2, #0
 801d610:	ec41 0b19 	vmov	d9, r0, r1
 801d614:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801d618:	4620      	mov	r0, r4
 801d61a:	4629      	mov	r1, r5
 801d61c:	f7e2 fe34 	bl	8000288 <__aeabi_dsub>
 801d620:	4602      	mov	r2, r0
 801d622:	460b      	mov	r3, r1
 801d624:	ec51 0b19 	vmov	r0, r1, d9
 801d628:	f7e3 f910 	bl	800084c <__aeabi_ddiv>
 801d62c:	4632      	mov	r2, r6
 801d62e:	4604      	mov	r4, r0
 801d630:	460d      	mov	r5, r1
 801d632:	463b      	mov	r3, r7
 801d634:	4640      	mov	r0, r8
 801d636:	4649      	mov	r1, r9
 801d638:	f7e2 ffde 	bl	80005f8 <__aeabi_dmul>
 801d63c:	4632      	mov	r2, r6
 801d63e:	463b      	mov	r3, r7
 801d640:	f7e2 fe24 	bl	800028c <__adddf3>
 801d644:	4602      	mov	r2, r0
 801d646:	460b      	mov	r3, r1
 801d648:	4620      	mov	r0, r4
 801d64a:	4629      	mov	r1, r5
 801d64c:	f7e2 fe1c 	bl	8000288 <__aeabi_dsub>
 801d650:	4642      	mov	r2, r8
 801d652:	464b      	mov	r3, r9
 801d654:	f7e2 fe18 	bl	8000288 <__aeabi_dsub>
 801d658:	460b      	mov	r3, r1
 801d65a:	4602      	mov	r2, r0
 801d65c:	493a      	ldr	r1, [pc, #232]	; (801d748 <__ieee754_pow+0xa48>)
 801d65e:	2000      	movs	r0, #0
 801d660:	f7e2 fe12 	bl	8000288 <__aeabi_dsub>
 801d664:	ec41 0b10 	vmov	d0, r0, r1
 801d668:	ee10 3a90 	vmov	r3, s1
 801d66c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801d670:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801d674:	da2b      	bge.n	801d6ce <__ieee754_pow+0x9ce>
 801d676:	4650      	mov	r0, sl
 801d678:	f000 f96a 	bl	801d950 <scalbn>
 801d67c:	ec51 0b10 	vmov	r0, r1, d0
 801d680:	ec53 2b18 	vmov	r2, r3, d8
 801d684:	f7ff bbed 	b.w	801ce62 <__ieee754_pow+0x162>
 801d688:	4b30      	ldr	r3, [pc, #192]	; (801d74c <__ieee754_pow+0xa4c>)
 801d68a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801d68e:	429e      	cmp	r6, r3
 801d690:	f77f af0c 	ble.w	801d4ac <__ieee754_pow+0x7ac>
 801d694:	4b2e      	ldr	r3, [pc, #184]	; (801d750 <__ieee754_pow+0xa50>)
 801d696:	440b      	add	r3, r1
 801d698:	4303      	orrs	r3, r0
 801d69a:	d009      	beq.n	801d6b0 <__ieee754_pow+0x9b0>
 801d69c:	ec51 0b18 	vmov	r0, r1, d8
 801d6a0:	2200      	movs	r2, #0
 801d6a2:	2300      	movs	r3, #0
 801d6a4:	f7e3 fa1a 	bl	8000adc <__aeabi_dcmplt>
 801d6a8:	3800      	subs	r0, #0
 801d6aa:	bf18      	it	ne
 801d6ac:	2001      	movne	r0, #1
 801d6ae:	e447      	b.n	801cf40 <__ieee754_pow+0x240>
 801d6b0:	4622      	mov	r2, r4
 801d6b2:	462b      	mov	r3, r5
 801d6b4:	f7e2 fde8 	bl	8000288 <__aeabi_dsub>
 801d6b8:	4642      	mov	r2, r8
 801d6ba:	464b      	mov	r3, r9
 801d6bc:	f7e3 fa22 	bl	8000b04 <__aeabi_dcmpge>
 801d6c0:	2800      	cmp	r0, #0
 801d6c2:	f43f aef3 	beq.w	801d4ac <__ieee754_pow+0x7ac>
 801d6c6:	e7e9      	b.n	801d69c <__ieee754_pow+0x99c>
 801d6c8:	f04f 0a00 	mov.w	sl, #0
 801d6cc:	e71a      	b.n	801d504 <__ieee754_pow+0x804>
 801d6ce:	ec51 0b10 	vmov	r0, r1, d0
 801d6d2:	4619      	mov	r1, r3
 801d6d4:	e7d4      	b.n	801d680 <__ieee754_pow+0x980>
 801d6d6:	491c      	ldr	r1, [pc, #112]	; (801d748 <__ieee754_pow+0xa48>)
 801d6d8:	2000      	movs	r0, #0
 801d6da:	f7ff bb30 	b.w	801cd3e <__ieee754_pow+0x3e>
 801d6de:	2000      	movs	r0, #0
 801d6e0:	2100      	movs	r1, #0
 801d6e2:	f7ff bb2c 	b.w	801cd3e <__ieee754_pow+0x3e>
 801d6e6:	4630      	mov	r0, r6
 801d6e8:	4639      	mov	r1, r7
 801d6ea:	f7ff bb28 	b.w	801cd3e <__ieee754_pow+0x3e>
 801d6ee:	9204      	str	r2, [sp, #16]
 801d6f0:	f7ff bb7a 	b.w	801cde8 <__ieee754_pow+0xe8>
 801d6f4:	2300      	movs	r3, #0
 801d6f6:	f7ff bb64 	b.w	801cdc2 <__ieee754_pow+0xc2>
 801d6fa:	bf00      	nop
 801d6fc:	f3af 8000 	nop.w
 801d700:	00000000 	.word	0x00000000
 801d704:	3fe62e43 	.word	0x3fe62e43
 801d708:	fefa39ef 	.word	0xfefa39ef
 801d70c:	3fe62e42 	.word	0x3fe62e42
 801d710:	0ca86c39 	.word	0x0ca86c39
 801d714:	be205c61 	.word	0xbe205c61
 801d718:	72bea4d0 	.word	0x72bea4d0
 801d71c:	3e663769 	.word	0x3e663769
 801d720:	c5d26bf1 	.word	0xc5d26bf1
 801d724:	3ebbbd41 	.word	0x3ebbbd41
 801d728:	af25de2c 	.word	0xaf25de2c
 801d72c:	3f11566a 	.word	0x3f11566a
 801d730:	16bebd93 	.word	0x16bebd93
 801d734:	3f66c16c 	.word	0x3f66c16c
 801d738:	5555553e 	.word	0x5555553e
 801d73c:	3fc55555 	.word	0x3fc55555
 801d740:	3fe00000 	.word	0x3fe00000
 801d744:	000fffff 	.word	0x000fffff
 801d748:	3ff00000 	.word	0x3ff00000
 801d74c:	4090cbff 	.word	0x4090cbff
 801d750:	3f6f3400 	.word	0x3f6f3400
 801d754:	652b82fe 	.word	0x652b82fe
 801d758:	3c971547 	.word	0x3c971547

0801d75c <__ieee754_sqrt>:
 801d75c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d760:	ec55 4b10 	vmov	r4, r5, d0
 801d764:	4e55      	ldr	r6, [pc, #340]	; (801d8bc <__ieee754_sqrt+0x160>)
 801d766:	43ae      	bics	r6, r5
 801d768:	ee10 0a10 	vmov	r0, s0
 801d76c:	ee10 3a10 	vmov	r3, s0
 801d770:	462a      	mov	r2, r5
 801d772:	4629      	mov	r1, r5
 801d774:	d110      	bne.n	801d798 <__ieee754_sqrt+0x3c>
 801d776:	ee10 2a10 	vmov	r2, s0
 801d77a:	462b      	mov	r3, r5
 801d77c:	f7e2 ff3c 	bl	80005f8 <__aeabi_dmul>
 801d780:	4602      	mov	r2, r0
 801d782:	460b      	mov	r3, r1
 801d784:	4620      	mov	r0, r4
 801d786:	4629      	mov	r1, r5
 801d788:	f7e2 fd80 	bl	800028c <__adddf3>
 801d78c:	4604      	mov	r4, r0
 801d78e:	460d      	mov	r5, r1
 801d790:	ec45 4b10 	vmov	d0, r4, r5
 801d794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d798:	2d00      	cmp	r5, #0
 801d79a:	dc10      	bgt.n	801d7be <__ieee754_sqrt+0x62>
 801d79c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801d7a0:	4330      	orrs	r0, r6
 801d7a2:	d0f5      	beq.n	801d790 <__ieee754_sqrt+0x34>
 801d7a4:	b15d      	cbz	r5, 801d7be <__ieee754_sqrt+0x62>
 801d7a6:	ee10 2a10 	vmov	r2, s0
 801d7aa:	462b      	mov	r3, r5
 801d7ac:	ee10 0a10 	vmov	r0, s0
 801d7b0:	f7e2 fd6a 	bl	8000288 <__aeabi_dsub>
 801d7b4:	4602      	mov	r2, r0
 801d7b6:	460b      	mov	r3, r1
 801d7b8:	f7e3 f848 	bl	800084c <__aeabi_ddiv>
 801d7bc:	e7e6      	b.n	801d78c <__ieee754_sqrt+0x30>
 801d7be:	1512      	asrs	r2, r2, #20
 801d7c0:	d074      	beq.n	801d8ac <__ieee754_sqrt+0x150>
 801d7c2:	07d4      	lsls	r4, r2, #31
 801d7c4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801d7c8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801d7cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801d7d0:	bf5e      	ittt	pl
 801d7d2:	0fda      	lsrpl	r2, r3, #31
 801d7d4:	005b      	lslpl	r3, r3, #1
 801d7d6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801d7da:	2400      	movs	r4, #0
 801d7dc:	0fda      	lsrs	r2, r3, #31
 801d7de:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801d7e2:	107f      	asrs	r7, r7, #1
 801d7e4:	005b      	lsls	r3, r3, #1
 801d7e6:	2516      	movs	r5, #22
 801d7e8:	4620      	mov	r0, r4
 801d7ea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801d7ee:	1886      	adds	r6, r0, r2
 801d7f0:	428e      	cmp	r6, r1
 801d7f2:	bfde      	ittt	le
 801d7f4:	1b89      	suble	r1, r1, r6
 801d7f6:	18b0      	addle	r0, r6, r2
 801d7f8:	18a4      	addle	r4, r4, r2
 801d7fa:	0049      	lsls	r1, r1, #1
 801d7fc:	3d01      	subs	r5, #1
 801d7fe:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801d802:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801d806:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801d80a:	d1f0      	bne.n	801d7ee <__ieee754_sqrt+0x92>
 801d80c:	462a      	mov	r2, r5
 801d80e:	f04f 0e20 	mov.w	lr, #32
 801d812:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801d816:	4281      	cmp	r1, r0
 801d818:	eb06 0c05 	add.w	ip, r6, r5
 801d81c:	dc02      	bgt.n	801d824 <__ieee754_sqrt+0xc8>
 801d81e:	d113      	bne.n	801d848 <__ieee754_sqrt+0xec>
 801d820:	459c      	cmp	ip, r3
 801d822:	d811      	bhi.n	801d848 <__ieee754_sqrt+0xec>
 801d824:	f1bc 0f00 	cmp.w	ip, #0
 801d828:	eb0c 0506 	add.w	r5, ip, r6
 801d82c:	da43      	bge.n	801d8b6 <__ieee754_sqrt+0x15a>
 801d82e:	2d00      	cmp	r5, #0
 801d830:	db41      	blt.n	801d8b6 <__ieee754_sqrt+0x15a>
 801d832:	f100 0801 	add.w	r8, r0, #1
 801d836:	1a09      	subs	r1, r1, r0
 801d838:	459c      	cmp	ip, r3
 801d83a:	bf88      	it	hi
 801d83c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 801d840:	eba3 030c 	sub.w	r3, r3, ip
 801d844:	4432      	add	r2, r6
 801d846:	4640      	mov	r0, r8
 801d848:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801d84c:	f1be 0e01 	subs.w	lr, lr, #1
 801d850:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801d854:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801d858:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801d85c:	d1db      	bne.n	801d816 <__ieee754_sqrt+0xba>
 801d85e:	430b      	orrs	r3, r1
 801d860:	d006      	beq.n	801d870 <__ieee754_sqrt+0x114>
 801d862:	1c50      	adds	r0, r2, #1
 801d864:	bf13      	iteet	ne
 801d866:	3201      	addne	r2, #1
 801d868:	3401      	addeq	r4, #1
 801d86a:	4672      	moveq	r2, lr
 801d86c:	f022 0201 	bicne.w	r2, r2, #1
 801d870:	1063      	asrs	r3, r4, #1
 801d872:	0852      	lsrs	r2, r2, #1
 801d874:	07e1      	lsls	r1, r4, #31
 801d876:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801d87a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801d87e:	bf48      	it	mi
 801d880:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801d884:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 801d888:	4614      	mov	r4, r2
 801d88a:	e781      	b.n	801d790 <__ieee754_sqrt+0x34>
 801d88c:	0ad9      	lsrs	r1, r3, #11
 801d88e:	3815      	subs	r0, #21
 801d890:	055b      	lsls	r3, r3, #21
 801d892:	2900      	cmp	r1, #0
 801d894:	d0fa      	beq.n	801d88c <__ieee754_sqrt+0x130>
 801d896:	02cd      	lsls	r5, r1, #11
 801d898:	d50a      	bpl.n	801d8b0 <__ieee754_sqrt+0x154>
 801d89a:	f1c2 0420 	rsb	r4, r2, #32
 801d89e:	fa23 f404 	lsr.w	r4, r3, r4
 801d8a2:	1e55      	subs	r5, r2, #1
 801d8a4:	4093      	lsls	r3, r2
 801d8a6:	4321      	orrs	r1, r4
 801d8a8:	1b42      	subs	r2, r0, r5
 801d8aa:	e78a      	b.n	801d7c2 <__ieee754_sqrt+0x66>
 801d8ac:	4610      	mov	r0, r2
 801d8ae:	e7f0      	b.n	801d892 <__ieee754_sqrt+0x136>
 801d8b0:	0049      	lsls	r1, r1, #1
 801d8b2:	3201      	adds	r2, #1
 801d8b4:	e7ef      	b.n	801d896 <__ieee754_sqrt+0x13a>
 801d8b6:	4680      	mov	r8, r0
 801d8b8:	e7bd      	b.n	801d836 <__ieee754_sqrt+0xda>
 801d8ba:	bf00      	nop
 801d8bc:	7ff00000 	.word	0x7ff00000

0801d8c0 <__ieee754_sqrtf>:
 801d8c0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801d8c4:	4770      	bx	lr

0801d8c6 <with_errno>:
 801d8c6:	b570      	push	{r4, r5, r6, lr}
 801d8c8:	4604      	mov	r4, r0
 801d8ca:	460d      	mov	r5, r1
 801d8cc:	4616      	mov	r6, r2
 801d8ce:	f000 f8e3 	bl	801da98 <__errno>
 801d8d2:	4629      	mov	r1, r5
 801d8d4:	6006      	str	r6, [r0, #0]
 801d8d6:	4620      	mov	r0, r4
 801d8d8:	bd70      	pop	{r4, r5, r6, pc}

0801d8da <xflow>:
 801d8da:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d8dc:	4614      	mov	r4, r2
 801d8de:	461d      	mov	r5, r3
 801d8e0:	b108      	cbz	r0, 801d8e6 <xflow+0xc>
 801d8e2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801d8e6:	e9cd 2300 	strd	r2, r3, [sp]
 801d8ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d8ee:	4620      	mov	r0, r4
 801d8f0:	4629      	mov	r1, r5
 801d8f2:	f7e2 fe81 	bl	80005f8 <__aeabi_dmul>
 801d8f6:	2222      	movs	r2, #34	; 0x22
 801d8f8:	b003      	add	sp, #12
 801d8fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d8fe:	f7ff bfe2 	b.w	801d8c6 <with_errno>

0801d902 <__math_uflow>:
 801d902:	b508      	push	{r3, lr}
 801d904:	2200      	movs	r2, #0
 801d906:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801d90a:	f7ff ffe6 	bl	801d8da <xflow>
 801d90e:	ec41 0b10 	vmov	d0, r0, r1
 801d912:	bd08      	pop	{r3, pc}

0801d914 <__math_oflow>:
 801d914:	b508      	push	{r3, lr}
 801d916:	2200      	movs	r2, #0
 801d918:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801d91c:	f7ff ffdd 	bl	801d8da <xflow>
 801d920:	ec41 0b10 	vmov	d0, r0, r1
 801d924:	bd08      	pop	{r3, pc}

0801d926 <fabs>:
 801d926:	ec51 0b10 	vmov	r0, r1, d0
 801d92a:	ee10 2a10 	vmov	r2, s0
 801d92e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801d932:	ec43 2b10 	vmov	d0, r2, r3
 801d936:	4770      	bx	lr

0801d938 <finite>:
 801d938:	b082      	sub	sp, #8
 801d93a:	ed8d 0b00 	vstr	d0, [sp]
 801d93e:	9801      	ldr	r0, [sp, #4]
 801d940:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801d944:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801d948:	0fc0      	lsrs	r0, r0, #31
 801d94a:	b002      	add	sp, #8
 801d94c:	4770      	bx	lr
	...

0801d950 <scalbn>:
 801d950:	b570      	push	{r4, r5, r6, lr}
 801d952:	ec55 4b10 	vmov	r4, r5, d0
 801d956:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801d95a:	4606      	mov	r6, r0
 801d95c:	462b      	mov	r3, r5
 801d95e:	b99a      	cbnz	r2, 801d988 <scalbn+0x38>
 801d960:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801d964:	4323      	orrs	r3, r4
 801d966:	d036      	beq.n	801d9d6 <scalbn+0x86>
 801d968:	4b39      	ldr	r3, [pc, #228]	; (801da50 <scalbn+0x100>)
 801d96a:	4629      	mov	r1, r5
 801d96c:	ee10 0a10 	vmov	r0, s0
 801d970:	2200      	movs	r2, #0
 801d972:	f7e2 fe41 	bl	80005f8 <__aeabi_dmul>
 801d976:	4b37      	ldr	r3, [pc, #220]	; (801da54 <scalbn+0x104>)
 801d978:	429e      	cmp	r6, r3
 801d97a:	4604      	mov	r4, r0
 801d97c:	460d      	mov	r5, r1
 801d97e:	da10      	bge.n	801d9a2 <scalbn+0x52>
 801d980:	a32b      	add	r3, pc, #172	; (adr r3, 801da30 <scalbn+0xe0>)
 801d982:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d986:	e03a      	b.n	801d9fe <scalbn+0xae>
 801d988:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801d98c:	428a      	cmp	r2, r1
 801d98e:	d10c      	bne.n	801d9aa <scalbn+0x5a>
 801d990:	ee10 2a10 	vmov	r2, s0
 801d994:	4620      	mov	r0, r4
 801d996:	4629      	mov	r1, r5
 801d998:	f7e2 fc78 	bl	800028c <__adddf3>
 801d99c:	4604      	mov	r4, r0
 801d99e:	460d      	mov	r5, r1
 801d9a0:	e019      	b.n	801d9d6 <scalbn+0x86>
 801d9a2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801d9a6:	460b      	mov	r3, r1
 801d9a8:	3a36      	subs	r2, #54	; 0x36
 801d9aa:	4432      	add	r2, r6
 801d9ac:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801d9b0:	428a      	cmp	r2, r1
 801d9b2:	dd08      	ble.n	801d9c6 <scalbn+0x76>
 801d9b4:	2d00      	cmp	r5, #0
 801d9b6:	a120      	add	r1, pc, #128	; (adr r1, 801da38 <scalbn+0xe8>)
 801d9b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d9bc:	da1c      	bge.n	801d9f8 <scalbn+0xa8>
 801d9be:	a120      	add	r1, pc, #128	; (adr r1, 801da40 <scalbn+0xf0>)
 801d9c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d9c4:	e018      	b.n	801d9f8 <scalbn+0xa8>
 801d9c6:	2a00      	cmp	r2, #0
 801d9c8:	dd08      	ble.n	801d9dc <scalbn+0x8c>
 801d9ca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801d9ce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801d9d2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801d9d6:	ec45 4b10 	vmov	d0, r4, r5
 801d9da:	bd70      	pop	{r4, r5, r6, pc}
 801d9dc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801d9e0:	da19      	bge.n	801da16 <scalbn+0xc6>
 801d9e2:	f24c 3350 	movw	r3, #50000	; 0xc350
 801d9e6:	429e      	cmp	r6, r3
 801d9e8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801d9ec:	dd0a      	ble.n	801da04 <scalbn+0xb4>
 801d9ee:	a112      	add	r1, pc, #72	; (adr r1, 801da38 <scalbn+0xe8>)
 801d9f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d9f4:	2b00      	cmp	r3, #0
 801d9f6:	d1e2      	bne.n	801d9be <scalbn+0x6e>
 801d9f8:	a30f      	add	r3, pc, #60	; (adr r3, 801da38 <scalbn+0xe8>)
 801d9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9fe:	f7e2 fdfb 	bl	80005f8 <__aeabi_dmul>
 801da02:	e7cb      	b.n	801d99c <scalbn+0x4c>
 801da04:	a10a      	add	r1, pc, #40	; (adr r1, 801da30 <scalbn+0xe0>)
 801da06:	e9d1 0100 	ldrd	r0, r1, [r1]
 801da0a:	2b00      	cmp	r3, #0
 801da0c:	d0b8      	beq.n	801d980 <scalbn+0x30>
 801da0e:	a10e      	add	r1, pc, #56	; (adr r1, 801da48 <scalbn+0xf8>)
 801da10:	e9d1 0100 	ldrd	r0, r1, [r1]
 801da14:	e7b4      	b.n	801d980 <scalbn+0x30>
 801da16:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801da1a:	3236      	adds	r2, #54	; 0x36
 801da1c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801da20:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801da24:	4620      	mov	r0, r4
 801da26:	4b0c      	ldr	r3, [pc, #48]	; (801da58 <scalbn+0x108>)
 801da28:	2200      	movs	r2, #0
 801da2a:	e7e8      	b.n	801d9fe <scalbn+0xae>
 801da2c:	f3af 8000 	nop.w
 801da30:	c2f8f359 	.word	0xc2f8f359
 801da34:	01a56e1f 	.word	0x01a56e1f
 801da38:	8800759c 	.word	0x8800759c
 801da3c:	7e37e43c 	.word	0x7e37e43c
 801da40:	8800759c 	.word	0x8800759c
 801da44:	fe37e43c 	.word	0xfe37e43c
 801da48:	c2f8f359 	.word	0xc2f8f359
 801da4c:	81a56e1f 	.word	0x81a56e1f
 801da50:	43500000 	.word	0x43500000
 801da54:	ffff3cb0 	.word	0xffff3cb0
 801da58:	3c900000 	.word	0x3c900000

0801da5c <__assert_func>:
 801da5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801da5e:	4614      	mov	r4, r2
 801da60:	461a      	mov	r2, r3
 801da62:	4b09      	ldr	r3, [pc, #36]	; (801da88 <__assert_func+0x2c>)
 801da64:	681b      	ldr	r3, [r3, #0]
 801da66:	4605      	mov	r5, r0
 801da68:	68d8      	ldr	r0, [r3, #12]
 801da6a:	b14c      	cbz	r4, 801da80 <__assert_func+0x24>
 801da6c:	4b07      	ldr	r3, [pc, #28]	; (801da8c <__assert_func+0x30>)
 801da6e:	9100      	str	r1, [sp, #0]
 801da70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801da74:	4906      	ldr	r1, [pc, #24]	; (801da90 <__assert_func+0x34>)
 801da76:	462b      	mov	r3, r5
 801da78:	f000 f814 	bl	801daa4 <fiprintf>
 801da7c:	f000 fc0c 	bl	801e298 <abort>
 801da80:	4b04      	ldr	r3, [pc, #16]	; (801da94 <__assert_func+0x38>)
 801da82:	461c      	mov	r4, r3
 801da84:	e7f3      	b.n	801da6e <__assert_func+0x12>
 801da86:	bf00      	nop
 801da88:	20000190 	.word	0x20000190
 801da8c:	08029b08 	.word	0x08029b08
 801da90:	08029b15 	.word	0x08029b15
 801da94:	08029b43 	.word	0x08029b43

0801da98 <__errno>:
 801da98:	4b01      	ldr	r3, [pc, #4]	; (801daa0 <__errno+0x8>)
 801da9a:	6818      	ldr	r0, [r3, #0]
 801da9c:	4770      	bx	lr
 801da9e:	bf00      	nop
 801daa0:	20000190 	.word	0x20000190

0801daa4 <fiprintf>:
 801daa4:	b40e      	push	{r1, r2, r3}
 801daa6:	b503      	push	{r0, r1, lr}
 801daa8:	4601      	mov	r1, r0
 801daaa:	ab03      	add	r3, sp, #12
 801daac:	4805      	ldr	r0, [pc, #20]	; (801dac4 <fiprintf+0x20>)
 801daae:	f853 2b04 	ldr.w	r2, [r3], #4
 801dab2:	6800      	ldr	r0, [r0, #0]
 801dab4:	9301      	str	r3, [sp, #4]
 801dab6:	f000 f86b 	bl	801db90 <_vfiprintf_r>
 801daba:	b002      	add	sp, #8
 801dabc:	f85d eb04 	ldr.w	lr, [sp], #4
 801dac0:	b003      	add	sp, #12
 801dac2:	4770      	bx	lr
 801dac4:	20000190 	.word	0x20000190

0801dac8 <__libc_init_array>:
 801dac8:	b570      	push	{r4, r5, r6, lr}
 801daca:	4d0d      	ldr	r5, [pc, #52]	; (801db00 <__libc_init_array+0x38>)
 801dacc:	4c0d      	ldr	r4, [pc, #52]	; (801db04 <__libc_init_array+0x3c>)
 801dace:	1b64      	subs	r4, r4, r5
 801dad0:	10a4      	asrs	r4, r4, #2
 801dad2:	2600      	movs	r6, #0
 801dad4:	42a6      	cmp	r6, r4
 801dad6:	d109      	bne.n	801daec <__libc_init_array+0x24>
 801dad8:	4d0b      	ldr	r5, [pc, #44]	; (801db08 <__libc_init_array+0x40>)
 801dada:	4c0c      	ldr	r4, [pc, #48]	; (801db0c <__libc_init_array+0x44>)
 801dadc:	f000 fff0 	bl	801eac0 <_init>
 801dae0:	1b64      	subs	r4, r4, r5
 801dae2:	10a4      	asrs	r4, r4, #2
 801dae4:	2600      	movs	r6, #0
 801dae6:	42a6      	cmp	r6, r4
 801dae8:	d105      	bne.n	801daf6 <__libc_init_array+0x2e>
 801daea:	bd70      	pop	{r4, r5, r6, pc}
 801daec:	f855 3b04 	ldr.w	r3, [r5], #4
 801daf0:	4798      	blx	r3
 801daf2:	3601      	adds	r6, #1
 801daf4:	e7ee      	b.n	801dad4 <__libc_init_array+0xc>
 801daf6:	f855 3b04 	ldr.w	r3, [r5], #4
 801dafa:	4798      	blx	r3
 801dafc:	3601      	adds	r6, #1
 801dafe:	e7f2      	b.n	801dae6 <__libc_init_array+0x1e>
 801db00:	08029be4 	.word	0x08029be4
 801db04:	08029be4 	.word	0x08029be4
 801db08:	08029be4 	.word	0x08029be4
 801db0c:	08029bec 	.word	0x08029bec

0801db10 <memcpy>:
 801db10:	440a      	add	r2, r1
 801db12:	4291      	cmp	r1, r2
 801db14:	f100 33ff 	add.w	r3, r0, #4294967295
 801db18:	d100      	bne.n	801db1c <memcpy+0xc>
 801db1a:	4770      	bx	lr
 801db1c:	b510      	push	{r4, lr}
 801db1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801db22:	f803 4f01 	strb.w	r4, [r3, #1]!
 801db26:	4291      	cmp	r1, r2
 801db28:	d1f9      	bne.n	801db1e <memcpy+0xe>
 801db2a:	bd10      	pop	{r4, pc}

0801db2c <memset>:
 801db2c:	4402      	add	r2, r0
 801db2e:	4603      	mov	r3, r0
 801db30:	4293      	cmp	r3, r2
 801db32:	d100      	bne.n	801db36 <memset+0xa>
 801db34:	4770      	bx	lr
 801db36:	f803 1b01 	strb.w	r1, [r3], #1
 801db3a:	e7f9      	b.n	801db30 <memset+0x4>

0801db3c <__sfputc_r>:
 801db3c:	6893      	ldr	r3, [r2, #8]
 801db3e:	3b01      	subs	r3, #1
 801db40:	2b00      	cmp	r3, #0
 801db42:	b410      	push	{r4}
 801db44:	6093      	str	r3, [r2, #8]
 801db46:	da08      	bge.n	801db5a <__sfputc_r+0x1e>
 801db48:	6994      	ldr	r4, [r2, #24]
 801db4a:	42a3      	cmp	r3, r4
 801db4c:	db01      	blt.n	801db52 <__sfputc_r+0x16>
 801db4e:	290a      	cmp	r1, #10
 801db50:	d103      	bne.n	801db5a <__sfputc_r+0x1e>
 801db52:	f85d 4b04 	ldr.w	r4, [sp], #4
 801db56:	f000 badf 	b.w	801e118 <__swbuf_r>
 801db5a:	6813      	ldr	r3, [r2, #0]
 801db5c:	1c58      	adds	r0, r3, #1
 801db5e:	6010      	str	r0, [r2, #0]
 801db60:	7019      	strb	r1, [r3, #0]
 801db62:	4608      	mov	r0, r1
 801db64:	f85d 4b04 	ldr.w	r4, [sp], #4
 801db68:	4770      	bx	lr

0801db6a <__sfputs_r>:
 801db6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801db6c:	4606      	mov	r6, r0
 801db6e:	460f      	mov	r7, r1
 801db70:	4614      	mov	r4, r2
 801db72:	18d5      	adds	r5, r2, r3
 801db74:	42ac      	cmp	r4, r5
 801db76:	d101      	bne.n	801db7c <__sfputs_r+0x12>
 801db78:	2000      	movs	r0, #0
 801db7a:	e007      	b.n	801db8c <__sfputs_r+0x22>
 801db7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801db80:	463a      	mov	r2, r7
 801db82:	4630      	mov	r0, r6
 801db84:	f7ff ffda 	bl	801db3c <__sfputc_r>
 801db88:	1c43      	adds	r3, r0, #1
 801db8a:	d1f3      	bne.n	801db74 <__sfputs_r+0xa>
 801db8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801db90 <_vfiprintf_r>:
 801db90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db94:	460d      	mov	r5, r1
 801db96:	b09d      	sub	sp, #116	; 0x74
 801db98:	4614      	mov	r4, r2
 801db9a:	4698      	mov	r8, r3
 801db9c:	4606      	mov	r6, r0
 801db9e:	b118      	cbz	r0, 801dba8 <_vfiprintf_r+0x18>
 801dba0:	6983      	ldr	r3, [r0, #24]
 801dba2:	b90b      	cbnz	r3, 801dba8 <_vfiprintf_r+0x18>
 801dba4:	f000 fc9a 	bl	801e4dc <__sinit>
 801dba8:	4b89      	ldr	r3, [pc, #548]	; (801ddd0 <_vfiprintf_r+0x240>)
 801dbaa:	429d      	cmp	r5, r3
 801dbac:	d11b      	bne.n	801dbe6 <_vfiprintf_r+0x56>
 801dbae:	6875      	ldr	r5, [r6, #4]
 801dbb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801dbb2:	07d9      	lsls	r1, r3, #31
 801dbb4:	d405      	bmi.n	801dbc2 <_vfiprintf_r+0x32>
 801dbb6:	89ab      	ldrh	r3, [r5, #12]
 801dbb8:	059a      	lsls	r2, r3, #22
 801dbba:	d402      	bmi.n	801dbc2 <_vfiprintf_r+0x32>
 801dbbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801dbbe:	f000 fd2b 	bl	801e618 <__retarget_lock_acquire_recursive>
 801dbc2:	89ab      	ldrh	r3, [r5, #12]
 801dbc4:	071b      	lsls	r3, r3, #28
 801dbc6:	d501      	bpl.n	801dbcc <_vfiprintf_r+0x3c>
 801dbc8:	692b      	ldr	r3, [r5, #16]
 801dbca:	b9eb      	cbnz	r3, 801dc08 <_vfiprintf_r+0x78>
 801dbcc:	4629      	mov	r1, r5
 801dbce:	4630      	mov	r0, r6
 801dbd0:	f000 faf4 	bl	801e1bc <__swsetup_r>
 801dbd4:	b1c0      	cbz	r0, 801dc08 <_vfiprintf_r+0x78>
 801dbd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801dbd8:	07dc      	lsls	r4, r3, #31
 801dbda:	d50e      	bpl.n	801dbfa <_vfiprintf_r+0x6a>
 801dbdc:	f04f 30ff 	mov.w	r0, #4294967295
 801dbe0:	b01d      	add	sp, #116	; 0x74
 801dbe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dbe6:	4b7b      	ldr	r3, [pc, #492]	; (801ddd4 <_vfiprintf_r+0x244>)
 801dbe8:	429d      	cmp	r5, r3
 801dbea:	d101      	bne.n	801dbf0 <_vfiprintf_r+0x60>
 801dbec:	68b5      	ldr	r5, [r6, #8]
 801dbee:	e7df      	b.n	801dbb0 <_vfiprintf_r+0x20>
 801dbf0:	4b79      	ldr	r3, [pc, #484]	; (801ddd8 <_vfiprintf_r+0x248>)
 801dbf2:	429d      	cmp	r5, r3
 801dbf4:	bf08      	it	eq
 801dbf6:	68f5      	ldreq	r5, [r6, #12]
 801dbf8:	e7da      	b.n	801dbb0 <_vfiprintf_r+0x20>
 801dbfa:	89ab      	ldrh	r3, [r5, #12]
 801dbfc:	0598      	lsls	r0, r3, #22
 801dbfe:	d4ed      	bmi.n	801dbdc <_vfiprintf_r+0x4c>
 801dc00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801dc02:	f000 fd0a 	bl	801e61a <__retarget_lock_release_recursive>
 801dc06:	e7e9      	b.n	801dbdc <_vfiprintf_r+0x4c>
 801dc08:	2300      	movs	r3, #0
 801dc0a:	9309      	str	r3, [sp, #36]	; 0x24
 801dc0c:	2320      	movs	r3, #32
 801dc0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801dc12:	f8cd 800c 	str.w	r8, [sp, #12]
 801dc16:	2330      	movs	r3, #48	; 0x30
 801dc18:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801dddc <_vfiprintf_r+0x24c>
 801dc1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801dc20:	f04f 0901 	mov.w	r9, #1
 801dc24:	4623      	mov	r3, r4
 801dc26:	469a      	mov	sl, r3
 801dc28:	f813 2b01 	ldrb.w	r2, [r3], #1
 801dc2c:	b10a      	cbz	r2, 801dc32 <_vfiprintf_r+0xa2>
 801dc2e:	2a25      	cmp	r2, #37	; 0x25
 801dc30:	d1f9      	bne.n	801dc26 <_vfiprintf_r+0x96>
 801dc32:	ebba 0b04 	subs.w	fp, sl, r4
 801dc36:	d00b      	beq.n	801dc50 <_vfiprintf_r+0xc0>
 801dc38:	465b      	mov	r3, fp
 801dc3a:	4622      	mov	r2, r4
 801dc3c:	4629      	mov	r1, r5
 801dc3e:	4630      	mov	r0, r6
 801dc40:	f7ff ff93 	bl	801db6a <__sfputs_r>
 801dc44:	3001      	adds	r0, #1
 801dc46:	f000 80aa 	beq.w	801dd9e <_vfiprintf_r+0x20e>
 801dc4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dc4c:	445a      	add	r2, fp
 801dc4e:	9209      	str	r2, [sp, #36]	; 0x24
 801dc50:	f89a 3000 	ldrb.w	r3, [sl]
 801dc54:	2b00      	cmp	r3, #0
 801dc56:	f000 80a2 	beq.w	801dd9e <_vfiprintf_r+0x20e>
 801dc5a:	2300      	movs	r3, #0
 801dc5c:	f04f 32ff 	mov.w	r2, #4294967295
 801dc60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801dc64:	f10a 0a01 	add.w	sl, sl, #1
 801dc68:	9304      	str	r3, [sp, #16]
 801dc6a:	9307      	str	r3, [sp, #28]
 801dc6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801dc70:	931a      	str	r3, [sp, #104]	; 0x68
 801dc72:	4654      	mov	r4, sl
 801dc74:	2205      	movs	r2, #5
 801dc76:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dc7a:	4858      	ldr	r0, [pc, #352]	; (801dddc <_vfiprintf_r+0x24c>)
 801dc7c:	f7e2 fab0 	bl	80001e0 <memchr>
 801dc80:	9a04      	ldr	r2, [sp, #16]
 801dc82:	b9d8      	cbnz	r0, 801dcbc <_vfiprintf_r+0x12c>
 801dc84:	06d1      	lsls	r1, r2, #27
 801dc86:	bf44      	itt	mi
 801dc88:	2320      	movmi	r3, #32
 801dc8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801dc8e:	0713      	lsls	r3, r2, #28
 801dc90:	bf44      	itt	mi
 801dc92:	232b      	movmi	r3, #43	; 0x2b
 801dc94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801dc98:	f89a 3000 	ldrb.w	r3, [sl]
 801dc9c:	2b2a      	cmp	r3, #42	; 0x2a
 801dc9e:	d015      	beq.n	801dccc <_vfiprintf_r+0x13c>
 801dca0:	9a07      	ldr	r2, [sp, #28]
 801dca2:	4654      	mov	r4, sl
 801dca4:	2000      	movs	r0, #0
 801dca6:	f04f 0c0a 	mov.w	ip, #10
 801dcaa:	4621      	mov	r1, r4
 801dcac:	f811 3b01 	ldrb.w	r3, [r1], #1
 801dcb0:	3b30      	subs	r3, #48	; 0x30
 801dcb2:	2b09      	cmp	r3, #9
 801dcb4:	d94e      	bls.n	801dd54 <_vfiprintf_r+0x1c4>
 801dcb6:	b1b0      	cbz	r0, 801dce6 <_vfiprintf_r+0x156>
 801dcb8:	9207      	str	r2, [sp, #28]
 801dcba:	e014      	b.n	801dce6 <_vfiprintf_r+0x156>
 801dcbc:	eba0 0308 	sub.w	r3, r0, r8
 801dcc0:	fa09 f303 	lsl.w	r3, r9, r3
 801dcc4:	4313      	orrs	r3, r2
 801dcc6:	9304      	str	r3, [sp, #16]
 801dcc8:	46a2      	mov	sl, r4
 801dcca:	e7d2      	b.n	801dc72 <_vfiprintf_r+0xe2>
 801dccc:	9b03      	ldr	r3, [sp, #12]
 801dcce:	1d19      	adds	r1, r3, #4
 801dcd0:	681b      	ldr	r3, [r3, #0]
 801dcd2:	9103      	str	r1, [sp, #12]
 801dcd4:	2b00      	cmp	r3, #0
 801dcd6:	bfbb      	ittet	lt
 801dcd8:	425b      	neglt	r3, r3
 801dcda:	f042 0202 	orrlt.w	r2, r2, #2
 801dcde:	9307      	strge	r3, [sp, #28]
 801dce0:	9307      	strlt	r3, [sp, #28]
 801dce2:	bfb8      	it	lt
 801dce4:	9204      	strlt	r2, [sp, #16]
 801dce6:	7823      	ldrb	r3, [r4, #0]
 801dce8:	2b2e      	cmp	r3, #46	; 0x2e
 801dcea:	d10c      	bne.n	801dd06 <_vfiprintf_r+0x176>
 801dcec:	7863      	ldrb	r3, [r4, #1]
 801dcee:	2b2a      	cmp	r3, #42	; 0x2a
 801dcf0:	d135      	bne.n	801dd5e <_vfiprintf_r+0x1ce>
 801dcf2:	9b03      	ldr	r3, [sp, #12]
 801dcf4:	1d1a      	adds	r2, r3, #4
 801dcf6:	681b      	ldr	r3, [r3, #0]
 801dcf8:	9203      	str	r2, [sp, #12]
 801dcfa:	2b00      	cmp	r3, #0
 801dcfc:	bfb8      	it	lt
 801dcfe:	f04f 33ff 	movlt.w	r3, #4294967295
 801dd02:	3402      	adds	r4, #2
 801dd04:	9305      	str	r3, [sp, #20]
 801dd06:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801ddec <_vfiprintf_r+0x25c>
 801dd0a:	7821      	ldrb	r1, [r4, #0]
 801dd0c:	2203      	movs	r2, #3
 801dd0e:	4650      	mov	r0, sl
 801dd10:	f7e2 fa66 	bl	80001e0 <memchr>
 801dd14:	b140      	cbz	r0, 801dd28 <_vfiprintf_r+0x198>
 801dd16:	2340      	movs	r3, #64	; 0x40
 801dd18:	eba0 000a 	sub.w	r0, r0, sl
 801dd1c:	fa03 f000 	lsl.w	r0, r3, r0
 801dd20:	9b04      	ldr	r3, [sp, #16]
 801dd22:	4303      	orrs	r3, r0
 801dd24:	3401      	adds	r4, #1
 801dd26:	9304      	str	r3, [sp, #16]
 801dd28:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dd2c:	482c      	ldr	r0, [pc, #176]	; (801dde0 <_vfiprintf_r+0x250>)
 801dd2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801dd32:	2206      	movs	r2, #6
 801dd34:	f7e2 fa54 	bl	80001e0 <memchr>
 801dd38:	2800      	cmp	r0, #0
 801dd3a:	d03f      	beq.n	801ddbc <_vfiprintf_r+0x22c>
 801dd3c:	4b29      	ldr	r3, [pc, #164]	; (801dde4 <_vfiprintf_r+0x254>)
 801dd3e:	bb1b      	cbnz	r3, 801dd88 <_vfiprintf_r+0x1f8>
 801dd40:	9b03      	ldr	r3, [sp, #12]
 801dd42:	3307      	adds	r3, #7
 801dd44:	f023 0307 	bic.w	r3, r3, #7
 801dd48:	3308      	adds	r3, #8
 801dd4a:	9303      	str	r3, [sp, #12]
 801dd4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dd4e:	443b      	add	r3, r7
 801dd50:	9309      	str	r3, [sp, #36]	; 0x24
 801dd52:	e767      	b.n	801dc24 <_vfiprintf_r+0x94>
 801dd54:	fb0c 3202 	mla	r2, ip, r2, r3
 801dd58:	460c      	mov	r4, r1
 801dd5a:	2001      	movs	r0, #1
 801dd5c:	e7a5      	b.n	801dcaa <_vfiprintf_r+0x11a>
 801dd5e:	2300      	movs	r3, #0
 801dd60:	3401      	adds	r4, #1
 801dd62:	9305      	str	r3, [sp, #20]
 801dd64:	4619      	mov	r1, r3
 801dd66:	f04f 0c0a 	mov.w	ip, #10
 801dd6a:	4620      	mov	r0, r4
 801dd6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801dd70:	3a30      	subs	r2, #48	; 0x30
 801dd72:	2a09      	cmp	r2, #9
 801dd74:	d903      	bls.n	801dd7e <_vfiprintf_r+0x1ee>
 801dd76:	2b00      	cmp	r3, #0
 801dd78:	d0c5      	beq.n	801dd06 <_vfiprintf_r+0x176>
 801dd7a:	9105      	str	r1, [sp, #20]
 801dd7c:	e7c3      	b.n	801dd06 <_vfiprintf_r+0x176>
 801dd7e:	fb0c 2101 	mla	r1, ip, r1, r2
 801dd82:	4604      	mov	r4, r0
 801dd84:	2301      	movs	r3, #1
 801dd86:	e7f0      	b.n	801dd6a <_vfiprintf_r+0x1da>
 801dd88:	ab03      	add	r3, sp, #12
 801dd8a:	9300      	str	r3, [sp, #0]
 801dd8c:	462a      	mov	r2, r5
 801dd8e:	4b16      	ldr	r3, [pc, #88]	; (801dde8 <_vfiprintf_r+0x258>)
 801dd90:	a904      	add	r1, sp, #16
 801dd92:	4630      	mov	r0, r6
 801dd94:	f3af 8000 	nop.w
 801dd98:	4607      	mov	r7, r0
 801dd9a:	1c78      	adds	r0, r7, #1
 801dd9c:	d1d6      	bne.n	801dd4c <_vfiprintf_r+0x1bc>
 801dd9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801dda0:	07d9      	lsls	r1, r3, #31
 801dda2:	d405      	bmi.n	801ddb0 <_vfiprintf_r+0x220>
 801dda4:	89ab      	ldrh	r3, [r5, #12]
 801dda6:	059a      	lsls	r2, r3, #22
 801dda8:	d402      	bmi.n	801ddb0 <_vfiprintf_r+0x220>
 801ddaa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ddac:	f000 fc35 	bl	801e61a <__retarget_lock_release_recursive>
 801ddb0:	89ab      	ldrh	r3, [r5, #12]
 801ddb2:	065b      	lsls	r3, r3, #25
 801ddb4:	f53f af12 	bmi.w	801dbdc <_vfiprintf_r+0x4c>
 801ddb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ddba:	e711      	b.n	801dbe0 <_vfiprintf_r+0x50>
 801ddbc:	ab03      	add	r3, sp, #12
 801ddbe:	9300      	str	r3, [sp, #0]
 801ddc0:	462a      	mov	r2, r5
 801ddc2:	4b09      	ldr	r3, [pc, #36]	; (801dde8 <_vfiprintf_r+0x258>)
 801ddc4:	a904      	add	r1, sp, #16
 801ddc6:	4630      	mov	r0, r6
 801ddc8:	f000 f880 	bl	801decc <_printf_i>
 801ddcc:	e7e4      	b.n	801dd98 <_vfiprintf_r+0x208>
 801ddce:	bf00      	nop
 801ddd0:	08029b9c 	.word	0x08029b9c
 801ddd4:	08029bbc 	.word	0x08029bbc
 801ddd8:	08029b7c 	.word	0x08029b7c
 801dddc:	08029b48 	.word	0x08029b48
 801dde0:	08029b52 	.word	0x08029b52
 801dde4:	00000000 	.word	0x00000000
 801dde8:	0801db6b 	.word	0x0801db6b
 801ddec:	08029b4e 	.word	0x08029b4e

0801ddf0 <_printf_common>:
 801ddf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ddf4:	4616      	mov	r6, r2
 801ddf6:	4699      	mov	r9, r3
 801ddf8:	688a      	ldr	r2, [r1, #8]
 801ddfa:	690b      	ldr	r3, [r1, #16]
 801ddfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801de00:	4293      	cmp	r3, r2
 801de02:	bfb8      	it	lt
 801de04:	4613      	movlt	r3, r2
 801de06:	6033      	str	r3, [r6, #0]
 801de08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801de0c:	4607      	mov	r7, r0
 801de0e:	460c      	mov	r4, r1
 801de10:	b10a      	cbz	r2, 801de16 <_printf_common+0x26>
 801de12:	3301      	adds	r3, #1
 801de14:	6033      	str	r3, [r6, #0]
 801de16:	6823      	ldr	r3, [r4, #0]
 801de18:	0699      	lsls	r1, r3, #26
 801de1a:	bf42      	ittt	mi
 801de1c:	6833      	ldrmi	r3, [r6, #0]
 801de1e:	3302      	addmi	r3, #2
 801de20:	6033      	strmi	r3, [r6, #0]
 801de22:	6825      	ldr	r5, [r4, #0]
 801de24:	f015 0506 	ands.w	r5, r5, #6
 801de28:	d106      	bne.n	801de38 <_printf_common+0x48>
 801de2a:	f104 0a19 	add.w	sl, r4, #25
 801de2e:	68e3      	ldr	r3, [r4, #12]
 801de30:	6832      	ldr	r2, [r6, #0]
 801de32:	1a9b      	subs	r3, r3, r2
 801de34:	42ab      	cmp	r3, r5
 801de36:	dc26      	bgt.n	801de86 <_printf_common+0x96>
 801de38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801de3c:	1e13      	subs	r3, r2, #0
 801de3e:	6822      	ldr	r2, [r4, #0]
 801de40:	bf18      	it	ne
 801de42:	2301      	movne	r3, #1
 801de44:	0692      	lsls	r2, r2, #26
 801de46:	d42b      	bmi.n	801dea0 <_printf_common+0xb0>
 801de48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801de4c:	4649      	mov	r1, r9
 801de4e:	4638      	mov	r0, r7
 801de50:	47c0      	blx	r8
 801de52:	3001      	adds	r0, #1
 801de54:	d01e      	beq.n	801de94 <_printf_common+0xa4>
 801de56:	6823      	ldr	r3, [r4, #0]
 801de58:	68e5      	ldr	r5, [r4, #12]
 801de5a:	6832      	ldr	r2, [r6, #0]
 801de5c:	f003 0306 	and.w	r3, r3, #6
 801de60:	2b04      	cmp	r3, #4
 801de62:	bf08      	it	eq
 801de64:	1aad      	subeq	r5, r5, r2
 801de66:	68a3      	ldr	r3, [r4, #8]
 801de68:	6922      	ldr	r2, [r4, #16]
 801de6a:	bf0c      	ite	eq
 801de6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801de70:	2500      	movne	r5, #0
 801de72:	4293      	cmp	r3, r2
 801de74:	bfc4      	itt	gt
 801de76:	1a9b      	subgt	r3, r3, r2
 801de78:	18ed      	addgt	r5, r5, r3
 801de7a:	2600      	movs	r6, #0
 801de7c:	341a      	adds	r4, #26
 801de7e:	42b5      	cmp	r5, r6
 801de80:	d11a      	bne.n	801deb8 <_printf_common+0xc8>
 801de82:	2000      	movs	r0, #0
 801de84:	e008      	b.n	801de98 <_printf_common+0xa8>
 801de86:	2301      	movs	r3, #1
 801de88:	4652      	mov	r2, sl
 801de8a:	4649      	mov	r1, r9
 801de8c:	4638      	mov	r0, r7
 801de8e:	47c0      	blx	r8
 801de90:	3001      	adds	r0, #1
 801de92:	d103      	bne.n	801de9c <_printf_common+0xac>
 801de94:	f04f 30ff 	mov.w	r0, #4294967295
 801de98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801de9c:	3501      	adds	r5, #1
 801de9e:	e7c6      	b.n	801de2e <_printf_common+0x3e>
 801dea0:	18e1      	adds	r1, r4, r3
 801dea2:	1c5a      	adds	r2, r3, #1
 801dea4:	2030      	movs	r0, #48	; 0x30
 801dea6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801deaa:	4422      	add	r2, r4
 801deac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801deb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801deb4:	3302      	adds	r3, #2
 801deb6:	e7c7      	b.n	801de48 <_printf_common+0x58>
 801deb8:	2301      	movs	r3, #1
 801deba:	4622      	mov	r2, r4
 801debc:	4649      	mov	r1, r9
 801debe:	4638      	mov	r0, r7
 801dec0:	47c0      	blx	r8
 801dec2:	3001      	adds	r0, #1
 801dec4:	d0e6      	beq.n	801de94 <_printf_common+0xa4>
 801dec6:	3601      	adds	r6, #1
 801dec8:	e7d9      	b.n	801de7e <_printf_common+0x8e>
	...

0801decc <_printf_i>:
 801decc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ded0:	7e0f      	ldrb	r7, [r1, #24]
 801ded2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ded4:	2f78      	cmp	r7, #120	; 0x78
 801ded6:	4691      	mov	r9, r2
 801ded8:	4680      	mov	r8, r0
 801deda:	460c      	mov	r4, r1
 801dedc:	469a      	mov	sl, r3
 801dede:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801dee2:	d807      	bhi.n	801def4 <_printf_i+0x28>
 801dee4:	2f62      	cmp	r7, #98	; 0x62
 801dee6:	d80a      	bhi.n	801defe <_printf_i+0x32>
 801dee8:	2f00      	cmp	r7, #0
 801deea:	f000 80d8 	beq.w	801e09e <_printf_i+0x1d2>
 801deee:	2f58      	cmp	r7, #88	; 0x58
 801def0:	f000 80a3 	beq.w	801e03a <_printf_i+0x16e>
 801def4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801def8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801defc:	e03a      	b.n	801df74 <_printf_i+0xa8>
 801defe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801df02:	2b15      	cmp	r3, #21
 801df04:	d8f6      	bhi.n	801def4 <_printf_i+0x28>
 801df06:	a101      	add	r1, pc, #4	; (adr r1, 801df0c <_printf_i+0x40>)
 801df08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801df0c:	0801df65 	.word	0x0801df65
 801df10:	0801df79 	.word	0x0801df79
 801df14:	0801def5 	.word	0x0801def5
 801df18:	0801def5 	.word	0x0801def5
 801df1c:	0801def5 	.word	0x0801def5
 801df20:	0801def5 	.word	0x0801def5
 801df24:	0801df79 	.word	0x0801df79
 801df28:	0801def5 	.word	0x0801def5
 801df2c:	0801def5 	.word	0x0801def5
 801df30:	0801def5 	.word	0x0801def5
 801df34:	0801def5 	.word	0x0801def5
 801df38:	0801e085 	.word	0x0801e085
 801df3c:	0801dfa9 	.word	0x0801dfa9
 801df40:	0801e067 	.word	0x0801e067
 801df44:	0801def5 	.word	0x0801def5
 801df48:	0801def5 	.word	0x0801def5
 801df4c:	0801e0a7 	.word	0x0801e0a7
 801df50:	0801def5 	.word	0x0801def5
 801df54:	0801dfa9 	.word	0x0801dfa9
 801df58:	0801def5 	.word	0x0801def5
 801df5c:	0801def5 	.word	0x0801def5
 801df60:	0801e06f 	.word	0x0801e06f
 801df64:	682b      	ldr	r3, [r5, #0]
 801df66:	1d1a      	adds	r2, r3, #4
 801df68:	681b      	ldr	r3, [r3, #0]
 801df6a:	602a      	str	r2, [r5, #0]
 801df6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801df70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801df74:	2301      	movs	r3, #1
 801df76:	e0a3      	b.n	801e0c0 <_printf_i+0x1f4>
 801df78:	6820      	ldr	r0, [r4, #0]
 801df7a:	6829      	ldr	r1, [r5, #0]
 801df7c:	0606      	lsls	r6, r0, #24
 801df7e:	f101 0304 	add.w	r3, r1, #4
 801df82:	d50a      	bpl.n	801df9a <_printf_i+0xce>
 801df84:	680e      	ldr	r6, [r1, #0]
 801df86:	602b      	str	r3, [r5, #0]
 801df88:	2e00      	cmp	r6, #0
 801df8a:	da03      	bge.n	801df94 <_printf_i+0xc8>
 801df8c:	232d      	movs	r3, #45	; 0x2d
 801df8e:	4276      	negs	r6, r6
 801df90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801df94:	485e      	ldr	r0, [pc, #376]	; (801e110 <_printf_i+0x244>)
 801df96:	230a      	movs	r3, #10
 801df98:	e019      	b.n	801dfce <_printf_i+0x102>
 801df9a:	680e      	ldr	r6, [r1, #0]
 801df9c:	602b      	str	r3, [r5, #0]
 801df9e:	f010 0f40 	tst.w	r0, #64	; 0x40
 801dfa2:	bf18      	it	ne
 801dfa4:	b236      	sxthne	r6, r6
 801dfa6:	e7ef      	b.n	801df88 <_printf_i+0xbc>
 801dfa8:	682b      	ldr	r3, [r5, #0]
 801dfaa:	6820      	ldr	r0, [r4, #0]
 801dfac:	1d19      	adds	r1, r3, #4
 801dfae:	6029      	str	r1, [r5, #0]
 801dfb0:	0601      	lsls	r1, r0, #24
 801dfb2:	d501      	bpl.n	801dfb8 <_printf_i+0xec>
 801dfb4:	681e      	ldr	r6, [r3, #0]
 801dfb6:	e002      	b.n	801dfbe <_printf_i+0xf2>
 801dfb8:	0646      	lsls	r6, r0, #25
 801dfba:	d5fb      	bpl.n	801dfb4 <_printf_i+0xe8>
 801dfbc:	881e      	ldrh	r6, [r3, #0]
 801dfbe:	4854      	ldr	r0, [pc, #336]	; (801e110 <_printf_i+0x244>)
 801dfc0:	2f6f      	cmp	r7, #111	; 0x6f
 801dfc2:	bf0c      	ite	eq
 801dfc4:	2308      	moveq	r3, #8
 801dfc6:	230a      	movne	r3, #10
 801dfc8:	2100      	movs	r1, #0
 801dfca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801dfce:	6865      	ldr	r5, [r4, #4]
 801dfd0:	60a5      	str	r5, [r4, #8]
 801dfd2:	2d00      	cmp	r5, #0
 801dfd4:	bfa2      	ittt	ge
 801dfd6:	6821      	ldrge	r1, [r4, #0]
 801dfd8:	f021 0104 	bicge.w	r1, r1, #4
 801dfdc:	6021      	strge	r1, [r4, #0]
 801dfde:	b90e      	cbnz	r6, 801dfe4 <_printf_i+0x118>
 801dfe0:	2d00      	cmp	r5, #0
 801dfe2:	d04d      	beq.n	801e080 <_printf_i+0x1b4>
 801dfe4:	4615      	mov	r5, r2
 801dfe6:	fbb6 f1f3 	udiv	r1, r6, r3
 801dfea:	fb03 6711 	mls	r7, r3, r1, r6
 801dfee:	5dc7      	ldrb	r7, [r0, r7]
 801dff0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801dff4:	4637      	mov	r7, r6
 801dff6:	42bb      	cmp	r3, r7
 801dff8:	460e      	mov	r6, r1
 801dffa:	d9f4      	bls.n	801dfe6 <_printf_i+0x11a>
 801dffc:	2b08      	cmp	r3, #8
 801dffe:	d10b      	bne.n	801e018 <_printf_i+0x14c>
 801e000:	6823      	ldr	r3, [r4, #0]
 801e002:	07de      	lsls	r6, r3, #31
 801e004:	d508      	bpl.n	801e018 <_printf_i+0x14c>
 801e006:	6923      	ldr	r3, [r4, #16]
 801e008:	6861      	ldr	r1, [r4, #4]
 801e00a:	4299      	cmp	r1, r3
 801e00c:	bfde      	ittt	le
 801e00e:	2330      	movle	r3, #48	; 0x30
 801e010:	f805 3c01 	strble.w	r3, [r5, #-1]
 801e014:	f105 35ff 	addle.w	r5, r5, #4294967295
 801e018:	1b52      	subs	r2, r2, r5
 801e01a:	6122      	str	r2, [r4, #16]
 801e01c:	f8cd a000 	str.w	sl, [sp]
 801e020:	464b      	mov	r3, r9
 801e022:	aa03      	add	r2, sp, #12
 801e024:	4621      	mov	r1, r4
 801e026:	4640      	mov	r0, r8
 801e028:	f7ff fee2 	bl	801ddf0 <_printf_common>
 801e02c:	3001      	adds	r0, #1
 801e02e:	d14c      	bne.n	801e0ca <_printf_i+0x1fe>
 801e030:	f04f 30ff 	mov.w	r0, #4294967295
 801e034:	b004      	add	sp, #16
 801e036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e03a:	4835      	ldr	r0, [pc, #212]	; (801e110 <_printf_i+0x244>)
 801e03c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801e040:	6829      	ldr	r1, [r5, #0]
 801e042:	6823      	ldr	r3, [r4, #0]
 801e044:	f851 6b04 	ldr.w	r6, [r1], #4
 801e048:	6029      	str	r1, [r5, #0]
 801e04a:	061d      	lsls	r5, r3, #24
 801e04c:	d514      	bpl.n	801e078 <_printf_i+0x1ac>
 801e04e:	07df      	lsls	r7, r3, #31
 801e050:	bf44      	itt	mi
 801e052:	f043 0320 	orrmi.w	r3, r3, #32
 801e056:	6023      	strmi	r3, [r4, #0]
 801e058:	b91e      	cbnz	r6, 801e062 <_printf_i+0x196>
 801e05a:	6823      	ldr	r3, [r4, #0]
 801e05c:	f023 0320 	bic.w	r3, r3, #32
 801e060:	6023      	str	r3, [r4, #0]
 801e062:	2310      	movs	r3, #16
 801e064:	e7b0      	b.n	801dfc8 <_printf_i+0xfc>
 801e066:	6823      	ldr	r3, [r4, #0]
 801e068:	f043 0320 	orr.w	r3, r3, #32
 801e06c:	6023      	str	r3, [r4, #0]
 801e06e:	2378      	movs	r3, #120	; 0x78
 801e070:	4828      	ldr	r0, [pc, #160]	; (801e114 <_printf_i+0x248>)
 801e072:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801e076:	e7e3      	b.n	801e040 <_printf_i+0x174>
 801e078:	0659      	lsls	r1, r3, #25
 801e07a:	bf48      	it	mi
 801e07c:	b2b6      	uxthmi	r6, r6
 801e07e:	e7e6      	b.n	801e04e <_printf_i+0x182>
 801e080:	4615      	mov	r5, r2
 801e082:	e7bb      	b.n	801dffc <_printf_i+0x130>
 801e084:	682b      	ldr	r3, [r5, #0]
 801e086:	6826      	ldr	r6, [r4, #0]
 801e088:	6961      	ldr	r1, [r4, #20]
 801e08a:	1d18      	adds	r0, r3, #4
 801e08c:	6028      	str	r0, [r5, #0]
 801e08e:	0635      	lsls	r5, r6, #24
 801e090:	681b      	ldr	r3, [r3, #0]
 801e092:	d501      	bpl.n	801e098 <_printf_i+0x1cc>
 801e094:	6019      	str	r1, [r3, #0]
 801e096:	e002      	b.n	801e09e <_printf_i+0x1d2>
 801e098:	0670      	lsls	r0, r6, #25
 801e09a:	d5fb      	bpl.n	801e094 <_printf_i+0x1c8>
 801e09c:	8019      	strh	r1, [r3, #0]
 801e09e:	2300      	movs	r3, #0
 801e0a0:	6123      	str	r3, [r4, #16]
 801e0a2:	4615      	mov	r5, r2
 801e0a4:	e7ba      	b.n	801e01c <_printf_i+0x150>
 801e0a6:	682b      	ldr	r3, [r5, #0]
 801e0a8:	1d1a      	adds	r2, r3, #4
 801e0aa:	602a      	str	r2, [r5, #0]
 801e0ac:	681d      	ldr	r5, [r3, #0]
 801e0ae:	6862      	ldr	r2, [r4, #4]
 801e0b0:	2100      	movs	r1, #0
 801e0b2:	4628      	mov	r0, r5
 801e0b4:	f7e2 f894 	bl	80001e0 <memchr>
 801e0b8:	b108      	cbz	r0, 801e0be <_printf_i+0x1f2>
 801e0ba:	1b40      	subs	r0, r0, r5
 801e0bc:	6060      	str	r0, [r4, #4]
 801e0be:	6863      	ldr	r3, [r4, #4]
 801e0c0:	6123      	str	r3, [r4, #16]
 801e0c2:	2300      	movs	r3, #0
 801e0c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e0c8:	e7a8      	b.n	801e01c <_printf_i+0x150>
 801e0ca:	6923      	ldr	r3, [r4, #16]
 801e0cc:	462a      	mov	r2, r5
 801e0ce:	4649      	mov	r1, r9
 801e0d0:	4640      	mov	r0, r8
 801e0d2:	47d0      	blx	sl
 801e0d4:	3001      	adds	r0, #1
 801e0d6:	d0ab      	beq.n	801e030 <_printf_i+0x164>
 801e0d8:	6823      	ldr	r3, [r4, #0]
 801e0da:	079b      	lsls	r3, r3, #30
 801e0dc:	d413      	bmi.n	801e106 <_printf_i+0x23a>
 801e0de:	68e0      	ldr	r0, [r4, #12]
 801e0e0:	9b03      	ldr	r3, [sp, #12]
 801e0e2:	4298      	cmp	r0, r3
 801e0e4:	bfb8      	it	lt
 801e0e6:	4618      	movlt	r0, r3
 801e0e8:	e7a4      	b.n	801e034 <_printf_i+0x168>
 801e0ea:	2301      	movs	r3, #1
 801e0ec:	4632      	mov	r2, r6
 801e0ee:	4649      	mov	r1, r9
 801e0f0:	4640      	mov	r0, r8
 801e0f2:	47d0      	blx	sl
 801e0f4:	3001      	adds	r0, #1
 801e0f6:	d09b      	beq.n	801e030 <_printf_i+0x164>
 801e0f8:	3501      	adds	r5, #1
 801e0fa:	68e3      	ldr	r3, [r4, #12]
 801e0fc:	9903      	ldr	r1, [sp, #12]
 801e0fe:	1a5b      	subs	r3, r3, r1
 801e100:	42ab      	cmp	r3, r5
 801e102:	dcf2      	bgt.n	801e0ea <_printf_i+0x21e>
 801e104:	e7eb      	b.n	801e0de <_printf_i+0x212>
 801e106:	2500      	movs	r5, #0
 801e108:	f104 0619 	add.w	r6, r4, #25
 801e10c:	e7f5      	b.n	801e0fa <_printf_i+0x22e>
 801e10e:	bf00      	nop
 801e110:	08029b59 	.word	0x08029b59
 801e114:	08029b6a 	.word	0x08029b6a

0801e118 <__swbuf_r>:
 801e118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e11a:	460e      	mov	r6, r1
 801e11c:	4614      	mov	r4, r2
 801e11e:	4605      	mov	r5, r0
 801e120:	b118      	cbz	r0, 801e12a <__swbuf_r+0x12>
 801e122:	6983      	ldr	r3, [r0, #24]
 801e124:	b90b      	cbnz	r3, 801e12a <__swbuf_r+0x12>
 801e126:	f000 f9d9 	bl	801e4dc <__sinit>
 801e12a:	4b21      	ldr	r3, [pc, #132]	; (801e1b0 <__swbuf_r+0x98>)
 801e12c:	429c      	cmp	r4, r3
 801e12e:	d12b      	bne.n	801e188 <__swbuf_r+0x70>
 801e130:	686c      	ldr	r4, [r5, #4]
 801e132:	69a3      	ldr	r3, [r4, #24]
 801e134:	60a3      	str	r3, [r4, #8]
 801e136:	89a3      	ldrh	r3, [r4, #12]
 801e138:	071a      	lsls	r2, r3, #28
 801e13a:	d52f      	bpl.n	801e19c <__swbuf_r+0x84>
 801e13c:	6923      	ldr	r3, [r4, #16]
 801e13e:	b36b      	cbz	r3, 801e19c <__swbuf_r+0x84>
 801e140:	6923      	ldr	r3, [r4, #16]
 801e142:	6820      	ldr	r0, [r4, #0]
 801e144:	1ac0      	subs	r0, r0, r3
 801e146:	6963      	ldr	r3, [r4, #20]
 801e148:	b2f6      	uxtb	r6, r6
 801e14a:	4283      	cmp	r3, r0
 801e14c:	4637      	mov	r7, r6
 801e14e:	dc04      	bgt.n	801e15a <__swbuf_r+0x42>
 801e150:	4621      	mov	r1, r4
 801e152:	4628      	mov	r0, r5
 801e154:	f000 f92e 	bl	801e3b4 <_fflush_r>
 801e158:	bb30      	cbnz	r0, 801e1a8 <__swbuf_r+0x90>
 801e15a:	68a3      	ldr	r3, [r4, #8]
 801e15c:	3b01      	subs	r3, #1
 801e15e:	60a3      	str	r3, [r4, #8]
 801e160:	6823      	ldr	r3, [r4, #0]
 801e162:	1c5a      	adds	r2, r3, #1
 801e164:	6022      	str	r2, [r4, #0]
 801e166:	701e      	strb	r6, [r3, #0]
 801e168:	6963      	ldr	r3, [r4, #20]
 801e16a:	3001      	adds	r0, #1
 801e16c:	4283      	cmp	r3, r0
 801e16e:	d004      	beq.n	801e17a <__swbuf_r+0x62>
 801e170:	89a3      	ldrh	r3, [r4, #12]
 801e172:	07db      	lsls	r3, r3, #31
 801e174:	d506      	bpl.n	801e184 <__swbuf_r+0x6c>
 801e176:	2e0a      	cmp	r6, #10
 801e178:	d104      	bne.n	801e184 <__swbuf_r+0x6c>
 801e17a:	4621      	mov	r1, r4
 801e17c:	4628      	mov	r0, r5
 801e17e:	f000 f919 	bl	801e3b4 <_fflush_r>
 801e182:	b988      	cbnz	r0, 801e1a8 <__swbuf_r+0x90>
 801e184:	4638      	mov	r0, r7
 801e186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e188:	4b0a      	ldr	r3, [pc, #40]	; (801e1b4 <__swbuf_r+0x9c>)
 801e18a:	429c      	cmp	r4, r3
 801e18c:	d101      	bne.n	801e192 <__swbuf_r+0x7a>
 801e18e:	68ac      	ldr	r4, [r5, #8]
 801e190:	e7cf      	b.n	801e132 <__swbuf_r+0x1a>
 801e192:	4b09      	ldr	r3, [pc, #36]	; (801e1b8 <__swbuf_r+0xa0>)
 801e194:	429c      	cmp	r4, r3
 801e196:	bf08      	it	eq
 801e198:	68ec      	ldreq	r4, [r5, #12]
 801e19a:	e7ca      	b.n	801e132 <__swbuf_r+0x1a>
 801e19c:	4621      	mov	r1, r4
 801e19e:	4628      	mov	r0, r5
 801e1a0:	f000 f80c 	bl	801e1bc <__swsetup_r>
 801e1a4:	2800      	cmp	r0, #0
 801e1a6:	d0cb      	beq.n	801e140 <__swbuf_r+0x28>
 801e1a8:	f04f 37ff 	mov.w	r7, #4294967295
 801e1ac:	e7ea      	b.n	801e184 <__swbuf_r+0x6c>
 801e1ae:	bf00      	nop
 801e1b0:	08029b9c 	.word	0x08029b9c
 801e1b4:	08029bbc 	.word	0x08029bbc
 801e1b8:	08029b7c 	.word	0x08029b7c

0801e1bc <__swsetup_r>:
 801e1bc:	4b32      	ldr	r3, [pc, #200]	; (801e288 <__swsetup_r+0xcc>)
 801e1be:	b570      	push	{r4, r5, r6, lr}
 801e1c0:	681d      	ldr	r5, [r3, #0]
 801e1c2:	4606      	mov	r6, r0
 801e1c4:	460c      	mov	r4, r1
 801e1c6:	b125      	cbz	r5, 801e1d2 <__swsetup_r+0x16>
 801e1c8:	69ab      	ldr	r3, [r5, #24]
 801e1ca:	b913      	cbnz	r3, 801e1d2 <__swsetup_r+0x16>
 801e1cc:	4628      	mov	r0, r5
 801e1ce:	f000 f985 	bl	801e4dc <__sinit>
 801e1d2:	4b2e      	ldr	r3, [pc, #184]	; (801e28c <__swsetup_r+0xd0>)
 801e1d4:	429c      	cmp	r4, r3
 801e1d6:	d10f      	bne.n	801e1f8 <__swsetup_r+0x3c>
 801e1d8:	686c      	ldr	r4, [r5, #4]
 801e1da:	89a3      	ldrh	r3, [r4, #12]
 801e1dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e1e0:	0719      	lsls	r1, r3, #28
 801e1e2:	d42c      	bmi.n	801e23e <__swsetup_r+0x82>
 801e1e4:	06dd      	lsls	r5, r3, #27
 801e1e6:	d411      	bmi.n	801e20c <__swsetup_r+0x50>
 801e1e8:	2309      	movs	r3, #9
 801e1ea:	6033      	str	r3, [r6, #0]
 801e1ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801e1f0:	81a3      	strh	r3, [r4, #12]
 801e1f2:	f04f 30ff 	mov.w	r0, #4294967295
 801e1f6:	e03e      	b.n	801e276 <__swsetup_r+0xba>
 801e1f8:	4b25      	ldr	r3, [pc, #148]	; (801e290 <__swsetup_r+0xd4>)
 801e1fa:	429c      	cmp	r4, r3
 801e1fc:	d101      	bne.n	801e202 <__swsetup_r+0x46>
 801e1fe:	68ac      	ldr	r4, [r5, #8]
 801e200:	e7eb      	b.n	801e1da <__swsetup_r+0x1e>
 801e202:	4b24      	ldr	r3, [pc, #144]	; (801e294 <__swsetup_r+0xd8>)
 801e204:	429c      	cmp	r4, r3
 801e206:	bf08      	it	eq
 801e208:	68ec      	ldreq	r4, [r5, #12]
 801e20a:	e7e6      	b.n	801e1da <__swsetup_r+0x1e>
 801e20c:	0758      	lsls	r0, r3, #29
 801e20e:	d512      	bpl.n	801e236 <__swsetup_r+0x7a>
 801e210:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e212:	b141      	cbz	r1, 801e226 <__swsetup_r+0x6a>
 801e214:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e218:	4299      	cmp	r1, r3
 801e21a:	d002      	beq.n	801e222 <__swsetup_r+0x66>
 801e21c:	4630      	mov	r0, r6
 801e21e:	f000 fa63 	bl	801e6e8 <_free_r>
 801e222:	2300      	movs	r3, #0
 801e224:	6363      	str	r3, [r4, #52]	; 0x34
 801e226:	89a3      	ldrh	r3, [r4, #12]
 801e228:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e22c:	81a3      	strh	r3, [r4, #12]
 801e22e:	2300      	movs	r3, #0
 801e230:	6063      	str	r3, [r4, #4]
 801e232:	6923      	ldr	r3, [r4, #16]
 801e234:	6023      	str	r3, [r4, #0]
 801e236:	89a3      	ldrh	r3, [r4, #12]
 801e238:	f043 0308 	orr.w	r3, r3, #8
 801e23c:	81a3      	strh	r3, [r4, #12]
 801e23e:	6923      	ldr	r3, [r4, #16]
 801e240:	b94b      	cbnz	r3, 801e256 <__swsetup_r+0x9a>
 801e242:	89a3      	ldrh	r3, [r4, #12]
 801e244:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e248:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e24c:	d003      	beq.n	801e256 <__swsetup_r+0x9a>
 801e24e:	4621      	mov	r1, r4
 801e250:	4630      	mov	r0, r6
 801e252:	f000 fa09 	bl	801e668 <__smakebuf_r>
 801e256:	89a0      	ldrh	r0, [r4, #12]
 801e258:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e25c:	f010 0301 	ands.w	r3, r0, #1
 801e260:	d00a      	beq.n	801e278 <__swsetup_r+0xbc>
 801e262:	2300      	movs	r3, #0
 801e264:	60a3      	str	r3, [r4, #8]
 801e266:	6963      	ldr	r3, [r4, #20]
 801e268:	425b      	negs	r3, r3
 801e26a:	61a3      	str	r3, [r4, #24]
 801e26c:	6923      	ldr	r3, [r4, #16]
 801e26e:	b943      	cbnz	r3, 801e282 <__swsetup_r+0xc6>
 801e270:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801e274:	d1ba      	bne.n	801e1ec <__swsetup_r+0x30>
 801e276:	bd70      	pop	{r4, r5, r6, pc}
 801e278:	0781      	lsls	r1, r0, #30
 801e27a:	bf58      	it	pl
 801e27c:	6963      	ldrpl	r3, [r4, #20]
 801e27e:	60a3      	str	r3, [r4, #8]
 801e280:	e7f4      	b.n	801e26c <__swsetup_r+0xb0>
 801e282:	2000      	movs	r0, #0
 801e284:	e7f7      	b.n	801e276 <__swsetup_r+0xba>
 801e286:	bf00      	nop
 801e288:	20000190 	.word	0x20000190
 801e28c:	08029b9c 	.word	0x08029b9c
 801e290:	08029bbc 	.word	0x08029bbc
 801e294:	08029b7c 	.word	0x08029b7c

0801e298 <abort>:
 801e298:	b508      	push	{r3, lr}
 801e29a:	2006      	movs	r0, #6
 801e29c:	f000 fb3c 	bl	801e918 <raise>
 801e2a0:	2001      	movs	r0, #1
 801e2a2:	f7f7 fee7 	bl	8016074 <_exit>
	...

0801e2a8 <__sflush_r>:
 801e2a8:	898a      	ldrh	r2, [r1, #12]
 801e2aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e2ae:	4605      	mov	r5, r0
 801e2b0:	0710      	lsls	r0, r2, #28
 801e2b2:	460c      	mov	r4, r1
 801e2b4:	d458      	bmi.n	801e368 <__sflush_r+0xc0>
 801e2b6:	684b      	ldr	r3, [r1, #4]
 801e2b8:	2b00      	cmp	r3, #0
 801e2ba:	dc05      	bgt.n	801e2c8 <__sflush_r+0x20>
 801e2bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e2be:	2b00      	cmp	r3, #0
 801e2c0:	dc02      	bgt.n	801e2c8 <__sflush_r+0x20>
 801e2c2:	2000      	movs	r0, #0
 801e2c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e2c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e2ca:	2e00      	cmp	r6, #0
 801e2cc:	d0f9      	beq.n	801e2c2 <__sflush_r+0x1a>
 801e2ce:	2300      	movs	r3, #0
 801e2d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e2d4:	682f      	ldr	r7, [r5, #0]
 801e2d6:	602b      	str	r3, [r5, #0]
 801e2d8:	d032      	beq.n	801e340 <__sflush_r+0x98>
 801e2da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e2dc:	89a3      	ldrh	r3, [r4, #12]
 801e2de:	075a      	lsls	r2, r3, #29
 801e2e0:	d505      	bpl.n	801e2ee <__sflush_r+0x46>
 801e2e2:	6863      	ldr	r3, [r4, #4]
 801e2e4:	1ac0      	subs	r0, r0, r3
 801e2e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e2e8:	b10b      	cbz	r3, 801e2ee <__sflush_r+0x46>
 801e2ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e2ec:	1ac0      	subs	r0, r0, r3
 801e2ee:	2300      	movs	r3, #0
 801e2f0:	4602      	mov	r2, r0
 801e2f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e2f4:	6a21      	ldr	r1, [r4, #32]
 801e2f6:	4628      	mov	r0, r5
 801e2f8:	47b0      	blx	r6
 801e2fa:	1c43      	adds	r3, r0, #1
 801e2fc:	89a3      	ldrh	r3, [r4, #12]
 801e2fe:	d106      	bne.n	801e30e <__sflush_r+0x66>
 801e300:	6829      	ldr	r1, [r5, #0]
 801e302:	291d      	cmp	r1, #29
 801e304:	d82c      	bhi.n	801e360 <__sflush_r+0xb8>
 801e306:	4a2a      	ldr	r2, [pc, #168]	; (801e3b0 <__sflush_r+0x108>)
 801e308:	40ca      	lsrs	r2, r1
 801e30a:	07d6      	lsls	r6, r2, #31
 801e30c:	d528      	bpl.n	801e360 <__sflush_r+0xb8>
 801e30e:	2200      	movs	r2, #0
 801e310:	6062      	str	r2, [r4, #4]
 801e312:	04d9      	lsls	r1, r3, #19
 801e314:	6922      	ldr	r2, [r4, #16]
 801e316:	6022      	str	r2, [r4, #0]
 801e318:	d504      	bpl.n	801e324 <__sflush_r+0x7c>
 801e31a:	1c42      	adds	r2, r0, #1
 801e31c:	d101      	bne.n	801e322 <__sflush_r+0x7a>
 801e31e:	682b      	ldr	r3, [r5, #0]
 801e320:	b903      	cbnz	r3, 801e324 <__sflush_r+0x7c>
 801e322:	6560      	str	r0, [r4, #84]	; 0x54
 801e324:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e326:	602f      	str	r7, [r5, #0]
 801e328:	2900      	cmp	r1, #0
 801e32a:	d0ca      	beq.n	801e2c2 <__sflush_r+0x1a>
 801e32c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e330:	4299      	cmp	r1, r3
 801e332:	d002      	beq.n	801e33a <__sflush_r+0x92>
 801e334:	4628      	mov	r0, r5
 801e336:	f000 f9d7 	bl	801e6e8 <_free_r>
 801e33a:	2000      	movs	r0, #0
 801e33c:	6360      	str	r0, [r4, #52]	; 0x34
 801e33e:	e7c1      	b.n	801e2c4 <__sflush_r+0x1c>
 801e340:	6a21      	ldr	r1, [r4, #32]
 801e342:	2301      	movs	r3, #1
 801e344:	4628      	mov	r0, r5
 801e346:	47b0      	blx	r6
 801e348:	1c41      	adds	r1, r0, #1
 801e34a:	d1c7      	bne.n	801e2dc <__sflush_r+0x34>
 801e34c:	682b      	ldr	r3, [r5, #0]
 801e34e:	2b00      	cmp	r3, #0
 801e350:	d0c4      	beq.n	801e2dc <__sflush_r+0x34>
 801e352:	2b1d      	cmp	r3, #29
 801e354:	d001      	beq.n	801e35a <__sflush_r+0xb2>
 801e356:	2b16      	cmp	r3, #22
 801e358:	d101      	bne.n	801e35e <__sflush_r+0xb6>
 801e35a:	602f      	str	r7, [r5, #0]
 801e35c:	e7b1      	b.n	801e2c2 <__sflush_r+0x1a>
 801e35e:	89a3      	ldrh	r3, [r4, #12]
 801e360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e364:	81a3      	strh	r3, [r4, #12]
 801e366:	e7ad      	b.n	801e2c4 <__sflush_r+0x1c>
 801e368:	690f      	ldr	r7, [r1, #16]
 801e36a:	2f00      	cmp	r7, #0
 801e36c:	d0a9      	beq.n	801e2c2 <__sflush_r+0x1a>
 801e36e:	0793      	lsls	r3, r2, #30
 801e370:	680e      	ldr	r6, [r1, #0]
 801e372:	bf08      	it	eq
 801e374:	694b      	ldreq	r3, [r1, #20]
 801e376:	600f      	str	r7, [r1, #0]
 801e378:	bf18      	it	ne
 801e37a:	2300      	movne	r3, #0
 801e37c:	eba6 0807 	sub.w	r8, r6, r7
 801e380:	608b      	str	r3, [r1, #8]
 801e382:	f1b8 0f00 	cmp.w	r8, #0
 801e386:	dd9c      	ble.n	801e2c2 <__sflush_r+0x1a>
 801e388:	6a21      	ldr	r1, [r4, #32]
 801e38a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e38c:	4643      	mov	r3, r8
 801e38e:	463a      	mov	r2, r7
 801e390:	4628      	mov	r0, r5
 801e392:	47b0      	blx	r6
 801e394:	2800      	cmp	r0, #0
 801e396:	dc06      	bgt.n	801e3a6 <__sflush_r+0xfe>
 801e398:	89a3      	ldrh	r3, [r4, #12]
 801e39a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e39e:	81a3      	strh	r3, [r4, #12]
 801e3a0:	f04f 30ff 	mov.w	r0, #4294967295
 801e3a4:	e78e      	b.n	801e2c4 <__sflush_r+0x1c>
 801e3a6:	4407      	add	r7, r0
 801e3a8:	eba8 0800 	sub.w	r8, r8, r0
 801e3ac:	e7e9      	b.n	801e382 <__sflush_r+0xda>
 801e3ae:	bf00      	nop
 801e3b0:	20400001 	.word	0x20400001

0801e3b4 <_fflush_r>:
 801e3b4:	b538      	push	{r3, r4, r5, lr}
 801e3b6:	690b      	ldr	r3, [r1, #16]
 801e3b8:	4605      	mov	r5, r0
 801e3ba:	460c      	mov	r4, r1
 801e3bc:	b913      	cbnz	r3, 801e3c4 <_fflush_r+0x10>
 801e3be:	2500      	movs	r5, #0
 801e3c0:	4628      	mov	r0, r5
 801e3c2:	bd38      	pop	{r3, r4, r5, pc}
 801e3c4:	b118      	cbz	r0, 801e3ce <_fflush_r+0x1a>
 801e3c6:	6983      	ldr	r3, [r0, #24]
 801e3c8:	b90b      	cbnz	r3, 801e3ce <_fflush_r+0x1a>
 801e3ca:	f000 f887 	bl	801e4dc <__sinit>
 801e3ce:	4b14      	ldr	r3, [pc, #80]	; (801e420 <_fflush_r+0x6c>)
 801e3d0:	429c      	cmp	r4, r3
 801e3d2:	d11b      	bne.n	801e40c <_fflush_r+0x58>
 801e3d4:	686c      	ldr	r4, [r5, #4]
 801e3d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e3da:	2b00      	cmp	r3, #0
 801e3dc:	d0ef      	beq.n	801e3be <_fflush_r+0xa>
 801e3de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e3e0:	07d0      	lsls	r0, r2, #31
 801e3e2:	d404      	bmi.n	801e3ee <_fflush_r+0x3a>
 801e3e4:	0599      	lsls	r1, r3, #22
 801e3e6:	d402      	bmi.n	801e3ee <_fflush_r+0x3a>
 801e3e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e3ea:	f000 f915 	bl	801e618 <__retarget_lock_acquire_recursive>
 801e3ee:	4628      	mov	r0, r5
 801e3f0:	4621      	mov	r1, r4
 801e3f2:	f7ff ff59 	bl	801e2a8 <__sflush_r>
 801e3f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e3f8:	07da      	lsls	r2, r3, #31
 801e3fa:	4605      	mov	r5, r0
 801e3fc:	d4e0      	bmi.n	801e3c0 <_fflush_r+0xc>
 801e3fe:	89a3      	ldrh	r3, [r4, #12]
 801e400:	059b      	lsls	r3, r3, #22
 801e402:	d4dd      	bmi.n	801e3c0 <_fflush_r+0xc>
 801e404:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e406:	f000 f908 	bl	801e61a <__retarget_lock_release_recursive>
 801e40a:	e7d9      	b.n	801e3c0 <_fflush_r+0xc>
 801e40c:	4b05      	ldr	r3, [pc, #20]	; (801e424 <_fflush_r+0x70>)
 801e40e:	429c      	cmp	r4, r3
 801e410:	d101      	bne.n	801e416 <_fflush_r+0x62>
 801e412:	68ac      	ldr	r4, [r5, #8]
 801e414:	e7df      	b.n	801e3d6 <_fflush_r+0x22>
 801e416:	4b04      	ldr	r3, [pc, #16]	; (801e428 <_fflush_r+0x74>)
 801e418:	429c      	cmp	r4, r3
 801e41a:	bf08      	it	eq
 801e41c:	68ec      	ldreq	r4, [r5, #12]
 801e41e:	e7da      	b.n	801e3d6 <_fflush_r+0x22>
 801e420:	08029b9c 	.word	0x08029b9c
 801e424:	08029bbc 	.word	0x08029bbc
 801e428:	08029b7c 	.word	0x08029b7c

0801e42c <std>:
 801e42c:	2300      	movs	r3, #0
 801e42e:	b510      	push	{r4, lr}
 801e430:	4604      	mov	r4, r0
 801e432:	e9c0 3300 	strd	r3, r3, [r0]
 801e436:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e43a:	6083      	str	r3, [r0, #8]
 801e43c:	8181      	strh	r1, [r0, #12]
 801e43e:	6643      	str	r3, [r0, #100]	; 0x64
 801e440:	81c2      	strh	r2, [r0, #14]
 801e442:	6183      	str	r3, [r0, #24]
 801e444:	4619      	mov	r1, r3
 801e446:	2208      	movs	r2, #8
 801e448:	305c      	adds	r0, #92	; 0x5c
 801e44a:	f7ff fb6f 	bl	801db2c <memset>
 801e44e:	4b05      	ldr	r3, [pc, #20]	; (801e464 <std+0x38>)
 801e450:	6263      	str	r3, [r4, #36]	; 0x24
 801e452:	4b05      	ldr	r3, [pc, #20]	; (801e468 <std+0x3c>)
 801e454:	62a3      	str	r3, [r4, #40]	; 0x28
 801e456:	4b05      	ldr	r3, [pc, #20]	; (801e46c <std+0x40>)
 801e458:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e45a:	4b05      	ldr	r3, [pc, #20]	; (801e470 <std+0x44>)
 801e45c:	6224      	str	r4, [r4, #32]
 801e45e:	6323      	str	r3, [r4, #48]	; 0x30
 801e460:	bd10      	pop	{r4, pc}
 801e462:	bf00      	nop
 801e464:	0801e951 	.word	0x0801e951
 801e468:	0801e973 	.word	0x0801e973
 801e46c:	0801e9ab 	.word	0x0801e9ab
 801e470:	0801e9cf 	.word	0x0801e9cf

0801e474 <_cleanup_r>:
 801e474:	4901      	ldr	r1, [pc, #4]	; (801e47c <_cleanup_r+0x8>)
 801e476:	f000 b8af 	b.w	801e5d8 <_fwalk_reent>
 801e47a:	bf00      	nop
 801e47c:	0801e3b5 	.word	0x0801e3b5

0801e480 <__sfmoreglue>:
 801e480:	b570      	push	{r4, r5, r6, lr}
 801e482:	2268      	movs	r2, #104	; 0x68
 801e484:	1e4d      	subs	r5, r1, #1
 801e486:	4355      	muls	r5, r2
 801e488:	460e      	mov	r6, r1
 801e48a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801e48e:	f000 f997 	bl	801e7c0 <_malloc_r>
 801e492:	4604      	mov	r4, r0
 801e494:	b140      	cbz	r0, 801e4a8 <__sfmoreglue+0x28>
 801e496:	2100      	movs	r1, #0
 801e498:	e9c0 1600 	strd	r1, r6, [r0]
 801e49c:	300c      	adds	r0, #12
 801e49e:	60a0      	str	r0, [r4, #8]
 801e4a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801e4a4:	f7ff fb42 	bl	801db2c <memset>
 801e4a8:	4620      	mov	r0, r4
 801e4aa:	bd70      	pop	{r4, r5, r6, pc}

0801e4ac <__sfp_lock_acquire>:
 801e4ac:	4801      	ldr	r0, [pc, #4]	; (801e4b4 <__sfp_lock_acquire+0x8>)
 801e4ae:	f000 b8b3 	b.w	801e618 <__retarget_lock_acquire_recursive>
 801e4b2:	bf00      	nop
 801e4b4:	20000795 	.word	0x20000795

0801e4b8 <__sfp_lock_release>:
 801e4b8:	4801      	ldr	r0, [pc, #4]	; (801e4c0 <__sfp_lock_release+0x8>)
 801e4ba:	f000 b8ae 	b.w	801e61a <__retarget_lock_release_recursive>
 801e4be:	bf00      	nop
 801e4c0:	20000795 	.word	0x20000795

0801e4c4 <__sinit_lock_acquire>:
 801e4c4:	4801      	ldr	r0, [pc, #4]	; (801e4cc <__sinit_lock_acquire+0x8>)
 801e4c6:	f000 b8a7 	b.w	801e618 <__retarget_lock_acquire_recursive>
 801e4ca:	bf00      	nop
 801e4cc:	20000796 	.word	0x20000796

0801e4d0 <__sinit_lock_release>:
 801e4d0:	4801      	ldr	r0, [pc, #4]	; (801e4d8 <__sinit_lock_release+0x8>)
 801e4d2:	f000 b8a2 	b.w	801e61a <__retarget_lock_release_recursive>
 801e4d6:	bf00      	nop
 801e4d8:	20000796 	.word	0x20000796

0801e4dc <__sinit>:
 801e4dc:	b510      	push	{r4, lr}
 801e4de:	4604      	mov	r4, r0
 801e4e0:	f7ff fff0 	bl	801e4c4 <__sinit_lock_acquire>
 801e4e4:	69a3      	ldr	r3, [r4, #24]
 801e4e6:	b11b      	cbz	r3, 801e4f0 <__sinit+0x14>
 801e4e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e4ec:	f7ff bff0 	b.w	801e4d0 <__sinit_lock_release>
 801e4f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801e4f4:	6523      	str	r3, [r4, #80]	; 0x50
 801e4f6:	4b13      	ldr	r3, [pc, #76]	; (801e544 <__sinit+0x68>)
 801e4f8:	4a13      	ldr	r2, [pc, #76]	; (801e548 <__sinit+0x6c>)
 801e4fa:	681b      	ldr	r3, [r3, #0]
 801e4fc:	62a2      	str	r2, [r4, #40]	; 0x28
 801e4fe:	42a3      	cmp	r3, r4
 801e500:	bf04      	itt	eq
 801e502:	2301      	moveq	r3, #1
 801e504:	61a3      	streq	r3, [r4, #24]
 801e506:	4620      	mov	r0, r4
 801e508:	f000 f820 	bl	801e54c <__sfp>
 801e50c:	6060      	str	r0, [r4, #4]
 801e50e:	4620      	mov	r0, r4
 801e510:	f000 f81c 	bl	801e54c <__sfp>
 801e514:	60a0      	str	r0, [r4, #8]
 801e516:	4620      	mov	r0, r4
 801e518:	f000 f818 	bl	801e54c <__sfp>
 801e51c:	2200      	movs	r2, #0
 801e51e:	60e0      	str	r0, [r4, #12]
 801e520:	2104      	movs	r1, #4
 801e522:	6860      	ldr	r0, [r4, #4]
 801e524:	f7ff ff82 	bl	801e42c <std>
 801e528:	68a0      	ldr	r0, [r4, #8]
 801e52a:	2201      	movs	r2, #1
 801e52c:	2109      	movs	r1, #9
 801e52e:	f7ff ff7d 	bl	801e42c <std>
 801e532:	68e0      	ldr	r0, [r4, #12]
 801e534:	2202      	movs	r2, #2
 801e536:	2112      	movs	r1, #18
 801e538:	f7ff ff78 	bl	801e42c <std>
 801e53c:	2301      	movs	r3, #1
 801e53e:	61a3      	str	r3, [r4, #24]
 801e540:	e7d2      	b.n	801e4e8 <__sinit+0xc>
 801e542:	bf00      	nop
 801e544:	08029b44 	.word	0x08029b44
 801e548:	0801e475 	.word	0x0801e475

0801e54c <__sfp>:
 801e54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e54e:	4607      	mov	r7, r0
 801e550:	f7ff ffac 	bl	801e4ac <__sfp_lock_acquire>
 801e554:	4b1e      	ldr	r3, [pc, #120]	; (801e5d0 <__sfp+0x84>)
 801e556:	681e      	ldr	r6, [r3, #0]
 801e558:	69b3      	ldr	r3, [r6, #24]
 801e55a:	b913      	cbnz	r3, 801e562 <__sfp+0x16>
 801e55c:	4630      	mov	r0, r6
 801e55e:	f7ff ffbd 	bl	801e4dc <__sinit>
 801e562:	3648      	adds	r6, #72	; 0x48
 801e564:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801e568:	3b01      	subs	r3, #1
 801e56a:	d503      	bpl.n	801e574 <__sfp+0x28>
 801e56c:	6833      	ldr	r3, [r6, #0]
 801e56e:	b30b      	cbz	r3, 801e5b4 <__sfp+0x68>
 801e570:	6836      	ldr	r6, [r6, #0]
 801e572:	e7f7      	b.n	801e564 <__sfp+0x18>
 801e574:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801e578:	b9d5      	cbnz	r5, 801e5b0 <__sfp+0x64>
 801e57a:	4b16      	ldr	r3, [pc, #88]	; (801e5d4 <__sfp+0x88>)
 801e57c:	60e3      	str	r3, [r4, #12]
 801e57e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801e582:	6665      	str	r5, [r4, #100]	; 0x64
 801e584:	f000 f847 	bl	801e616 <__retarget_lock_init_recursive>
 801e588:	f7ff ff96 	bl	801e4b8 <__sfp_lock_release>
 801e58c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801e590:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801e594:	6025      	str	r5, [r4, #0]
 801e596:	61a5      	str	r5, [r4, #24]
 801e598:	2208      	movs	r2, #8
 801e59a:	4629      	mov	r1, r5
 801e59c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801e5a0:	f7ff fac4 	bl	801db2c <memset>
 801e5a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801e5a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801e5ac:	4620      	mov	r0, r4
 801e5ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e5b0:	3468      	adds	r4, #104	; 0x68
 801e5b2:	e7d9      	b.n	801e568 <__sfp+0x1c>
 801e5b4:	2104      	movs	r1, #4
 801e5b6:	4638      	mov	r0, r7
 801e5b8:	f7ff ff62 	bl	801e480 <__sfmoreglue>
 801e5bc:	4604      	mov	r4, r0
 801e5be:	6030      	str	r0, [r6, #0]
 801e5c0:	2800      	cmp	r0, #0
 801e5c2:	d1d5      	bne.n	801e570 <__sfp+0x24>
 801e5c4:	f7ff ff78 	bl	801e4b8 <__sfp_lock_release>
 801e5c8:	230c      	movs	r3, #12
 801e5ca:	603b      	str	r3, [r7, #0]
 801e5cc:	e7ee      	b.n	801e5ac <__sfp+0x60>
 801e5ce:	bf00      	nop
 801e5d0:	08029b44 	.word	0x08029b44
 801e5d4:	ffff0001 	.word	0xffff0001

0801e5d8 <_fwalk_reent>:
 801e5d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e5dc:	4606      	mov	r6, r0
 801e5de:	4688      	mov	r8, r1
 801e5e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801e5e4:	2700      	movs	r7, #0
 801e5e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e5ea:	f1b9 0901 	subs.w	r9, r9, #1
 801e5ee:	d505      	bpl.n	801e5fc <_fwalk_reent+0x24>
 801e5f0:	6824      	ldr	r4, [r4, #0]
 801e5f2:	2c00      	cmp	r4, #0
 801e5f4:	d1f7      	bne.n	801e5e6 <_fwalk_reent+0xe>
 801e5f6:	4638      	mov	r0, r7
 801e5f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e5fc:	89ab      	ldrh	r3, [r5, #12]
 801e5fe:	2b01      	cmp	r3, #1
 801e600:	d907      	bls.n	801e612 <_fwalk_reent+0x3a>
 801e602:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e606:	3301      	adds	r3, #1
 801e608:	d003      	beq.n	801e612 <_fwalk_reent+0x3a>
 801e60a:	4629      	mov	r1, r5
 801e60c:	4630      	mov	r0, r6
 801e60e:	47c0      	blx	r8
 801e610:	4307      	orrs	r7, r0
 801e612:	3568      	adds	r5, #104	; 0x68
 801e614:	e7e9      	b.n	801e5ea <_fwalk_reent+0x12>

0801e616 <__retarget_lock_init_recursive>:
 801e616:	4770      	bx	lr

0801e618 <__retarget_lock_acquire_recursive>:
 801e618:	4770      	bx	lr

0801e61a <__retarget_lock_release_recursive>:
 801e61a:	4770      	bx	lr

0801e61c <__swhatbuf_r>:
 801e61c:	b570      	push	{r4, r5, r6, lr}
 801e61e:	460e      	mov	r6, r1
 801e620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e624:	2900      	cmp	r1, #0
 801e626:	b096      	sub	sp, #88	; 0x58
 801e628:	4614      	mov	r4, r2
 801e62a:	461d      	mov	r5, r3
 801e62c:	da08      	bge.n	801e640 <__swhatbuf_r+0x24>
 801e62e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801e632:	2200      	movs	r2, #0
 801e634:	602a      	str	r2, [r5, #0]
 801e636:	061a      	lsls	r2, r3, #24
 801e638:	d410      	bmi.n	801e65c <__swhatbuf_r+0x40>
 801e63a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e63e:	e00e      	b.n	801e65e <__swhatbuf_r+0x42>
 801e640:	466a      	mov	r2, sp
 801e642:	f000 f9eb 	bl	801ea1c <_fstat_r>
 801e646:	2800      	cmp	r0, #0
 801e648:	dbf1      	blt.n	801e62e <__swhatbuf_r+0x12>
 801e64a:	9a01      	ldr	r2, [sp, #4]
 801e64c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801e650:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801e654:	425a      	negs	r2, r3
 801e656:	415a      	adcs	r2, r3
 801e658:	602a      	str	r2, [r5, #0]
 801e65a:	e7ee      	b.n	801e63a <__swhatbuf_r+0x1e>
 801e65c:	2340      	movs	r3, #64	; 0x40
 801e65e:	2000      	movs	r0, #0
 801e660:	6023      	str	r3, [r4, #0]
 801e662:	b016      	add	sp, #88	; 0x58
 801e664:	bd70      	pop	{r4, r5, r6, pc}
	...

0801e668 <__smakebuf_r>:
 801e668:	898b      	ldrh	r3, [r1, #12]
 801e66a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e66c:	079d      	lsls	r5, r3, #30
 801e66e:	4606      	mov	r6, r0
 801e670:	460c      	mov	r4, r1
 801e672:	d507      	bpl.n	801e684 <__smakebuf_r+0x1c>
 801e674:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e678:	6023      	str	r3, [r4, #0]
 801e67a:	6123      	str	r3, [r4, #16]
 801e67c:	2301      	movs	r3, #1
 801e67e:	6163      	str	r3, [r4, #20]
 801e680:	b002      	add	sp, #8
 801e682:	bd70      	pop	{r4, r5, r6, pc}
 801e684:	ab01      	add	r3, sp, #4
 801e686:	466a      	mov	r2, sp
 801e688:	f7ff ffc8 	bl	801e61c <__swhatbuf_r>
 801e68c:	9900      	ldr	r1, [sp, #0]
 801e68e:	4605      	mov	r5, r0
 801e690:	4630      	mov	r0, r6
 801e692:	f000 f895 	bl	801e7c0 <_malloc_r>
 801e696:	b948      	cbnz	r0, 801e6ac <__smakebuf_r+0x44>
 801e698:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e69c:	059a      	lsls	r2, r3, #22
 801e69e:	d4ef      	bmi.n	801e680 <__smakebuf_r+0x18>
 801e6a0:	f023 0303 	bic.w	r3, r3, #3
 801e6a4:	f043 0302 	orr.w	r3, r3, #2
 801e6a8:	81a3      	strh	r3, [r4, #12]
 801e6aa:	e7e3      	b.n	801e674 <__smakebuf_r+0xc>
 801e6ac:	4b0d      	ldr	r3, [pc, #52]	; (801e6e4 <__smakebuf_r+0x7c>)
 801e6ae:	62b3      	str	r3, [r6, #40]	; 0x28
 801e6b0:	89a3      	ldrh	r3, [r4, #12]
 801e6b2:	6020      	str	r0, [r4, #0]
 801e6b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e6b8:	81a3      	strh	r3, [r4, #12]
 801e6ba:	9b00      	ldr	r3, [sp, #0]
 801e6bc:	6163      	str	r3, [r4, #20]
 801e6be:	9b01      	ldr	r3, [sp, #4]
 801e6c0:	6120      	str	r0, [r4, #16]
 801e6c2:	b15b      	cbz	r3, 801e6dc <__smakebuf_r+0x74>
 801e6c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e6c8:	4630      	mov	r0, r6
 801e6ca:	f000 f9b9 	bl	801ea40 <_isatty_r>
 801e6ce:	b128      	cbz	r0, 801e6dc <__smakebuf_r+0x74>
 801e6d0:	89a3      	ldrh	r3, [r4, #12]
 801e6d2:	f023 0303 	bic.w	r3, r3, #3
 801e6d6:	f043 0301 	orr.w	r3, r3, #1
 801e6da:	81a3      	strh	r3, [r4, #12]
 801e6dc:	89a0      	ldrh	r0, [r4, #12]
 801e6de:	4305      	orrs	r5, r0
 801e6e0:	81a5      	strh	r5, [r4, #12]
 801e6e2:	e7cd      	b.n	801e680 <__smakebuf_r+0x18>
 801e6e4:	0801e475 	.word	0x0801e475

0801e6e8 <_free_r>:
 801e6e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e6ea:	2900      	cmp	r1, #0
 801e6ec:	d044      	beq.n	801e778 <_free_r+0x90>
 801e6ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e6f2:	9001      	str	r0, [sp, #4]
 801e6f4:	2b00      	cmp	r3, #0
 801e6f6:	f1a1 0404 	sub.w	r4, r1, #4
 801e6fa:	bfb8      	it	lt
 801e6fc:	18e4      	addlt	r4, r4, r3
 801e6fe:	f000 f9c1 	bl	801ea84 <__malloc_lock>
 801e702:	4a1e      	ldr	r2, [pc, #120]	; (801e77c <_free_r+0x94>)
 801e704:	9801      	ldr	r0, [sp, #4]
 801e706:	6813      	ldr	r3, [r2, #0]
 801e708:	b933      	cbnz	r3, 801e718 <_free_r+0x30>
 801e70a:	6063      	str	r3, [r4, #4]
 801e70c:	6014      	str	r4, [r2, #0]
 801e70e:	b003      	add	sp, #12
 801e710:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e714:	f000 b9bc 	b.w	801ea90 <__malloc_unlock>
 801e718:	42a3      	cmp	r3, r4
 801e71a:	d908      	bls.n	801e72e <_free_r+0x46>
 801e71c:	6825      	ldr	r5, [r4, #0]
 801e71e:	1961      	adds	r1, r4, r5
 801e720:	428b      	cmp	r3, r1
 801e722:	bf01      	itttt	eq
 801e724:	6819      	ldreq	r1, [r3, #0]
 801e726:	685b      	ldreq	r3, [r3, #4]
 801e728:	1949      	addeq	r1, r1, r5
 801e72a:	6021      	streq	r1, [r4, #0]
 801e72c:	e7ed      	b.n	801e70a <_free_r+0x22>
 801e72e:	461a      	mov	r2, r3
 801e730:	685b      	ldr	r3, [r3, #4]
 801e732:	b10b      	cbz	r3, 801e738 <_free_r+0x50>
 801e734:	42a3      	cmp	r3, r4
 801e736:	d9fa      	bls.n	801e72e <_free_r+0x46>
 801e738:	6811      	ldr	r1, [r2, #0]
 801e73a:	1855      	adds	r5, r2, r1
 801e73c:	42a5      	cmp	r5, r4
 801e73e:	d10b      	bne.n	801e758 <_free_r+0x70>
 801e740:	6824      	ldr	r4, [r4, #0]
 801e742:	4421      	add	r1, r4
 801e744:	1854      	adds	r4, r2, r1
 801e746:	42a3      	cmp	r3, r4
 801e748:	6011      	str	r1, [r2, #0]
 801e74a:	d1e0      	bne.n	801e70e <_free_r+0x26>
 801e74c:	681c      	ldr	r4, [r3, #0]
 801e74e:	685b      	ldr	r3, [r3, #4]
 801e750:	6053      	str	r3, [r2, #4]
 801e752:	4421      	add	r1, r4
 801e754:	6011      	str	r1, [r2, #0]
 801e756:	e7da      	b.n	801e70e <_free_r+0x26>
 801e758:	d902      	bls.n	801e760 <_free_r+0x78>
 801e75a:	230c      	movs	r3, #12
 801e75c:	6003      	str	r3, [r0, #0]
 801e75e:	e7d6      	b.n	801e70e <_free_r+0x26>
 801e760:	6825      	ldr	r5, [r4, #0]
 801e762:	1961      	adds	r1, r4, r5
 801e764:	428b      	cmp	r3, r1
 801e766:	bf04      	itt	eq
 801e768:	6819      	ldreq	r1, [r3, #0]
 801e76a:	685b      	ldreq	r3, [r3, #4]
 801e76c:	6063      	str	r3, [r4, #4]
 801e76e:	bf04      	itt	eq
 801e770:	1949      	addeq	r1, r1, r5
 801e772:	6021      	streq	r1, [r4, #0]
 801e774:	6054      	str	r4, [r2, #4]
 801e776:	e7ca      	b.n	801e70e <_free_r+0x26>
 801e778:	b003      	add	sp, #12
 801e77a:	bd30      	pop	{r4, r5, pc}
 801e77c:	20000798 	.word	0x20000798

0801e780 <sbrk_aligned>:
 801e780:	b570      	push	{r4, r5, r6, lr}
 801e782:	4e0e      	ldr	r6, [pc, #56]	; (801e7bc <sbrk_aligned+0x3c>)
 801e784:	460c      	mov	r4, r1
 801e786:	6831      	ldr	r1, [r6, #0]
 801e788:	4605      	mov	r5, r0
 801e78a:	b911      	cbnz	r1, 801e792 <sbrk_aligned+0x12>
 801e78c:	f000 f88c 	bl	801e8a8 <_sbrk_r>
 801e790:	6030      	str	r0, [r6, #0]
 801e792:	4621      	mov	r1, r4
 801e794:	4628      	mov	r0, r5
 801e796:	f000 f887 	bl	801e8a8 <_sbrk_r>
 801e79a:	1c43      	adds	r3, r0, #1
 801e79c:	d00a      	beq.n	801e7b4 <sbrk_aligned+0x34>
 801e79e:	1cc4      	adds	r4, r0, #3
 801e7a0:	f024 0403 	bic.w	r4, r4, #3
 801e7a4:	42a0      	cmp	r0, r4
 801e7a6:	d007      	beq.n	801e7b8 <sbrk_aligned+0x38>
 801e7a8:	1a21      	subs	r1, r4, r0
 801e7aa:	4628      	mov	r0, r5
 801e7ac:	f000 f87c 	bl	801e8a8 <_sbrk_r>
 801e7b0:	3001      	adds	r0, #1
 801e7b2:	d101      	bne.n	801e7b8 <sbrk_aligned+0x38>
 801e7b4:	f04f 34ff 	mov.w	r4, #4294967295
 801e7b8:	4620      	mov	r0, r4
 801e7ba:	bd70      	pop	{r4, r5, r6, pc}
 801e7bc:	2000079c 	.word	0x2000079c

0801e7c0 <_malloc_r>:
 801e7c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e7c4:	1ccd      	adds	r5, r1, #3
 801e7c6:	f025 0503 	bic.w	r5, r5, #3
 801e7ca:	3508      	adds	r5, #8
 801e7cc:	2d0c      	cmp	r5, #12
 801e7ce:	bf38      	it	cc
 801e7d0:	250c      	movcc	r5, #12
 801e7d2:	2d00      	cmp	r5, #0
 801e7d4:	4607      	mov	r7, r0
 801e7d6:	db01      	blt.n	801e7dc <_malloc_r+0x1c>
 801e7d8:	42a9      	cmp	r1, r5
 801e7da:	d905      	bls.n	801e7e8 <_malloc_r+0x28>
 801e7dc:	230c      	movs	r3, #12
 801e7de:	603b      	str	r3, [r7, #0]
 801e7e0:	2600      	movs	r6, #0
 801e7e2:	4630      	mov	r0, r6
 801e7e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e7e8:	4e2e      	ldr	r6, [pc, #184]	; (801e8a4 <_malloc_r+0xe4>)
 801e7ea:	f000 f94b 	bl	801ea84 <__malloc_lock>
 801e7ee:	6833      	ldr	r3, [r6, #0]
 801e7f0:	461c      	mov	r4, r3
 801e7f2:	bb34      	cbnz	r4, 801e842 <_malloc_r+0x82>
 801e7f4:	4629      	mov	r1, r5
 801e7f6:	4638      	mov	r0, r7
 801e7f8:	f7ff ffc2 	bl	801e780 <sbrk_aligned>
 801e7fc:	1c43      	adds	r3, r0, #1
 801e7fe:	4604      	mov	r4, r0
 801e800:	d14d      	bne.n	801e89e <_malloc_r+0xde>
 801e802:	6834      	ldr	r4, [r6, #0]
 801e804:	4626      	mov	r6, r4
 801e806:	2e00      	cmp	r6, #0
 801e808:	d140      	bne.n	801e88c <_malloc_r+0xcc>
 801e80a:	6823      	ldr	r3, [r4, #0]
 801e80c:	4631      	mov	r1, r6
 801e80e:	4638      	mov	r0, r7
 801e810:	eb04 0803 	add.w	r8, r4, r3
 801e814:	f000 f848 	bl	801e8a8 <_sbrk_r>
 801e818:	4580      	cmp	r8, r0
 801e81a:	d13a      	bne.n	801e892 <_malloc_r+0xd2>
 801e81c:	6821      	ldr	r1, [r4, #0]
 801e81e:	3503      	adds	r5, #3
 801e820:	1a6d      	subs	r5, r5, r1
 801e822:	f025 0503 	bic.w	r5, r5, #3
 801e826:	3508      	adds	r5, #8
 801e828:	2d0c      	cmp	r5, #12
 801e82a:	bf38      	it	cc
 801e82c:	250c      	movcc	r5, #12
 801e82e:	4629      	mov	r1, r5
 801e830:	4638      	mov	r0, r7
 801e832:	f7ff ffa5 	bl	801e780 <sbrk_aligned>
 801e836:	3001      	adds	r0, #1
 801e838:	d02b      	beq.n	801e892 <_malloc_r+0xd2>
 801e83a:	6823      	ldr	r3, [r4, #0]
 801e83c:	442b      	add	r3, r5
 801e83e:	6023      	str	r3, [r4, #0]
 801e840:	e00e      	b.n	801e860 <_malloc_r+0xa0>
 801e842:	6822      	ldr	r2, [r4, #0]
 801e844:	1b52      	subs	r2, r2, r5
 801e846:	d41e      	bmi.n	801e886 <_malloc_r+0xc6>
 801e848:	2a0b      	cmp	r2, #11
 801e84a:	d916      	bls.n	801e87a <_malloc_r+0xba>
 801e84c:	1961      	adds	r1, r4, r5
 801e84e:	42a3      	cmp	r3, r4
 801e850:	6025      	str	r5, [r4, #0]
 801e852:	bf18      	it	ne
 801e854:	6059      	strne	r1, [r3, #4]
 801e856:	6863      	ldr	r3, [r4, #4]
 801e858:	bf08      	it	eq
 801e85a:	6031      	streq	r1, [r6, #0]
 801e85c:	5162      	str	r2, [r4, r5]
 801e85e:	604b      	str	r3, [r1, #4]
 801e860:	4638      	mov	r0, r7
 801e862:	f104 060b 	add.w	r6, r4, #11
 801e866:	f000 f913 	bl	801ea90 <__malloc_unlock>
 801e86a:	f026 0607 	bic.w	r6, r6, #7
 801e86e:	1d23      	adds	r3, r4, #4
 801e870:	1af2      	subs	r2, r6, r3
 801e872:	d0b6      	beq.n	801e7e2 <_malloc_r+0x22>
 801e874:	1b9b      	subs	r3, r3, r6
 801e876:	50a3      	str	r3, [r4, r2]
 801e878:	e7b3      	b.n	801e7e2 <_malloc_r+0x22>
 801e87a:	6862      	ldr	r2, [r4, #4]
 801e87c:	42a3      	cmp	r3, r4
 801e87e:	bf0c      	ite	eq
 801e880:	6032      	streq	r2, [r6, #0]
 801e882:	605a      	strne	r2, [r3, #4]
 801e884:	e7ec      	b.n	801e860 <_malloc_r+0xa0>
 801e886:	4623      	mov	r3, r4
 801e888:	6864      	ldr	r4, [r4, #4]
 801e88a:	e7b2      	b.n	801e7f2 <_malloc_r+0x32>
 801e88c:	4634      	mov	r4, r6
 801e88e:	6876      	ldr	r6, [r6, #4]
 801e890:	e7b9      	b.n	801e806 <_malloc_r+0x46>
 801e892:	230c      	movs	r3, #12
 801e894:	603b      	str	r3, [r7, #0]
 801e896:	4638      	mov	r0, r7
 801e898:	f000 f8fa 	bl	801ea90 <__malloc_unlock>
 801e89c:	e7a1      	b.n	801e7e2 <_malloc_r+0x22>
 801e89e:	6025      	str	r5, [r4, #0]
 801e8a0:	e7de      	b.n	801e860 <_malloc_r+0xa0>
 801e8a2:	bf00      	nop
 801e8a4:	20000798 	.word	0x20000798

0801e8a8 <_sbrk_r>:
 801e8a8:	b538      	push	{r3, r4, r5, lr}
 801e8aa:	4d06      	ldr	r5, [pc, #24]	; (801e8c4 <_sbrk_r+0x1c>)
 801e8ac:	2300      	movs	r3, #0
 801e8ae:	4604      	mov	r4, r0
 801e8b0:	4608      	mov	r0, r1
 801e8b2:	602b      	str	r3, [r5, #0]
 801e8b4:	f7f7 fc56 	bl	8016164 <_sbrk>
 801e8b8:	1c43      	adds	r3, r0, #1
 801e8ba:	d102      	bne.n	801e8c2 <_sbrk_r+0x1a>
 801e8bc:	682b      	ldr	r3, [r5, #0]
 801e8be:	b103      	cbz	r3, 801e8c2 <_sbrk_r+0x1a>
 801e8c0:	6023      	str	r3, [r4, #0]
 801e8c2:	bd38      	pop	{r3, r4, r5, pc}
 801e8c4:	200007a0 	.word	0x200007a0

0801e8c8 <_raise_r>:
 801e8c8:	291f      	cmp	r1, #31
 801e8ca:	b538      	push	{r3, r4, r5, lr}
 801e8cc:	4604      	mov	r4, r0
 801e8ce:	460d      	mov	r5, r1
 801e8d0:	d904      	bls.n	801e8dc <_raise_r+0x14>
 801e8d2:	2316      	movs	r3, #22
 801e8d4:	6003      	str	r3, [r0, #0]
 801e8d6:	f04f 30ff 	mov.w	r0, #4294967295
 801e8da:	bd38      	pop	{r3, r4, r5, pc}
 801e8dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801e8de:	b112      	cbz	r2, 801e8e6 <_raise_r+0x1e>
 801e8e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e8e4:	b94b      	cbnz	r3, 801e8fa <_raise_r+0x32>
 801e8e6:	4620      	mov	r0, r4
 801e8e8:	f000 f830 	bl	801e94c <_getpid_r>
 801e8ec:	462a      	mov	r2, r5
 801e8ee:	4601      	mov	r1, r0
 801e8f0:	4620      	mov	r0, r4
 801e8f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e8f6:	f000 b817 	b.w	801e928 <_kill_r>
 801e8fa:	2b01      	cmp	r3, #1
 801e8fc:	d00a      	beq.n	801e914 <_raise_r+0x4c>
 801e8fe:	1c59      	adds	r1, r3, #1
 801e900:	d103      	bne.n	801e90a <_raise_r+0x42>
 801e902:	2316      	movs	r3, #22
 801e904:	6003      	str	r3, [r0, #0]
 801e906:	2001      	movs	r0, #1
 801e908:	e7e7      	b.n	801e8da <_raise_r+0x12>
 801e90a:	2400      	movs	r4, #0
 801e90c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801e910:	4628      	mov	r0, r5
 801e912:	4798      	blx	r3
 801e914:	2000      	movs	r0, #0
 801e916:	e7e0      	b.n	801e8da <_raise_r+0x12>

0801e918 <raise>:
 801e918:	4b02      	ldr	r3, [pc, #8]	; (801e924 <raise+0xc>)
 801e91a:	4601      	mov	r1, r0
 801e91c:	6818      	ldr	r0, [r3, #0]
 801e91e:	f7ff bfd3 	b.w	801e8c8 <_raise_r>
 801e922:	bf00      	nop
 801e924:	20000190 	.word	0x20000190

0801e928 <_kill_r>:
 801e928:	b538      	push	{r3, r4, r5, lr}
 801e92a:	4d07      	ldr	r5, [pc, #28]	; (801e948 <_kill_r+0x20>)
 801e92c:	2300      	movs	r3, #0
 801e92e:	4604      	mov	r4, r0
 801e930:	4608      	mov	r0, r1
 801e932:	4611      	mov	r1, r2
 801e934:	602b      	str	r3, [r5, #0]
 801e936:	f7f7 fb8d 	bl	8016054 <_kill>
 801e93a:	1c43      	adds	r3, r0, #1
 801e93c:	d102      	bne.n	801e944 <_kill_r+0x1c>
 801e93e:	682b      	ldr	r3, [r5, #0]
 801e940:	b103      	cbz	r3, 801e944 <_kill_r+0x1c>
 801e942:	6023      	str	r3, [r4, #0]
 801e944:	bd38      	pop	{r3, r4, r5, pc}
 801e946:	bf00      	nop
 801e948:	200007a0 	.word	0x200007a0

0801e94c <_getpid_r>:
 801e94c:	f7f7 bb7a 	b.w	8016044 <_getpid>

0801e950 <__sread>:
 801e950:	b510      	push	{r4, lr}
 801e952:	460c      	mov	r4, r1
 801e954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e958:	f000 f8a0 	bl	801ea9c <_read_r>
 801e95c:	2800      	cmp	r0, #0
 801e95e:	bfab      	itete	ge
 801e960:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801e962:	89a3      	ldrhlt	r3, [r4, #12]
 801e964:	181b      	addge	r3, r3, r0
 801e966:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801e96a:	bfac      	ite	ge
 801e96c:	6563      	strge	r3, [r4, #84]	; 0x54
 801e96e:	81a3      	strhlt	r3, [r4, #12]
 801e970:	bd10      	pop	{r4, pc}

0801e972 <__swrite>:
 801e972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e976:	461f      	mov	r7, r3
 801e978:	898b      	ldrh	r3, [r1, #12]
 801e97a:	05db      	lsls	r3, r3, #23
 801e97c:	4605      	mov	r5, r0
 801e97e:	460c      	mov	r4, r1
 801e980:	4616      	mov	r6, r2
 801e982:	d505      	bpl.n	801e990 <__swrite+0x1e>
 801e984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e988:	2302      	movs	r3, #2
 801e98a:	2200      	movs	r2, #0
 801e98c:	f000 f868 	bl	801ea60 <_lseek_r>
 801e990:	89a3      	ldrh	r3, [r4, #12]
 801e992:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e996:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801e99a:	81a3      	strh	r3, [r4, #12]
 801e99c:	4632      	mov	r2, r6
 801e99e:	463b      	mov	r3, r7
 801e9a0:	4628      	mov	r0, r5
 801e9a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e9a6:	f000 b817 	b.w	801e9d8 <_write_r>

0801e9aa <__sseek>:
 801e9aa:	b510      	push	{r4, lr}
 801e9ac:	460c      	mov	r4, r1
 801e9ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e9b2:	f000 f855 	bl	801ea60 <_lseek_r>
 801e9b6:	1c43      	adds	r3, r0, #1
 801e9b8:	89a3      	ldrh	r3, [r4, #12]
 801e9ba:	bf15      	itete	ne
 801e9bc:	6560      	strne	r0, [r4, #84]	; 0x54
 801e9be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801e9c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801e9c6:	81a3      	strheq	r3, [r4, #12]
 801e9c8:	bf18      	it	ne
 801e9ca:	81a3      	strhne	r3, [r4, #12]
 801e9cc:	bd10      	pop	{r4, pc}

0801e9ce <__sclose>:
 801e9ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e9d2:	f000 b813 	b.w	801e9fc <_close_r>
	...

0801e9d8 <_write_r>:
 801e9d8:	b538      	push	{r3, r4, r5, lr}
 801e9da:	4d07      	ldr	r5, [pc, #28]	; (801e9f8 <_write_r+0x20>)
 801e9dc:	4604      	mov	r4, r0
 801e9de:	4608      	mov	r0, r1
 801e9e0:	4611      	mov	r1, r2
 801e9e2:	2200      	movs	r2, #0
 801e9e4:	602a      	str	r2, [r5, #0]
 801e9e6:	461a      	mov	r2, r3
 801e9e8:	f7f7 fb6b 	bl	80160c2 <_write>
 801e9ec:	1c43      	adds	r3, r0, #1
 801e9ee:	d102      	bne.n	801e9f6 <_write_r+0x1e>
 801e9f0:	682b      	ldr	r3, [r5, #0]
 801e9f2:	b103      	cbz	r3, 801e9f6 <_write_r+0x1e>
 801e9f4:	6023      	str	r3, [r4, #0]
 801e9f6:	bd38      	pop	{r3, r4, r5, pc}
 801e9f8:	200007a0 	.word	0x200007a0

0801e9fc <_close_r>:
 801e9fc:	b538      	push	{r3, r4, r5, lr}
 801e9fe:	4d06      	ldr	r5, [pc, #24]	; (801ea18 <_close_r+0x1c>)
 801ea00:	2300      	movs	r3, #0
 801ea02:	4604      	mov	r4, r0
 801ea04:	4608      	mov	r0, r1
 801ea06:	602b      	str	r3, [r5, #0]
 801ea08:	f7f7 fb77 	bl	80160fa <_close>
 801ea0c:	1c43      	adds	r3, r0, #1
 801ea0e:	d102      	bne.n	801ea16 <_close_r+0x1a>
 801ea10:	682b      	ldr	r3, [r5, #0]
 801ea12:	b103      	cbz	r3, 801ea16 <_close_r+0x1a>
 801ea14:	6023      	str	r3, [r4, #0]
 801ea16:	bd38      	pop	{r3, r4, r5, pc}
 801ea18:	200007a0 	.word	0x200007a0

0801ea1c <_fstat_r>:
 801ea1c:	b538      	push	{r3, r4, r5, lr}
 801ea1e:	4d07      	ldr	r5, [pc, #28]	; (801ea3c <_fstat_r+0x20>)
 801ea20:	2300      	movs	r3, #0
 801ea22:	4604      	mov	r4, r0
 801ea24:	4608      	mov	r0, r1
 801ea26:	4611      	mov	r1, r2
 801ea28:	602b      	str	r3, [r5, #0]
 801ea2a:	f7f7 fb72 	bl	8016112 <_fstat>
 801ea2e:	1c43      	adds	r3, r0, #1
 801ea30:	d102      	bne.n	801ea38 <_fstat_r+0x1c>
 801ea32:	682b      	ldr	r3, [r5, #0]
 801ea34:	b103      	cbz	r3, 801ea38 <_fstat_r+0x1c>
 801ea36:	6023      	str	r3, [r4, #0]
 801ea38:	bd38      	pop	{r3, r4, r5, pc}
 801ea3a:	bf00      	nop
 801ea3c:	200007a0 	.word	0x200007a0

0801ea40 <_isatty_r>:
 801ea40:	b538      	push	{r3, r4, r5, lr}
 801ea42:	4d06      	ldr	r5, [pc, #24]	; (801ea5c <_isatty_r+0x1c>)
 801ea44:	2300      	movs	r3, #0
 801ea46:	4604      	mov	r4, r0
 801ea48:	4608      	mov	r0, r1
 801ea4a:	602b      	str	r3, [r5, #0]
 801ea4c:	f7f7 fb71 	bl	8016132 <_isatty>
 801ea50:	1c43      	adds	r3, r0, #1
 801ea52:	d102      	bne.n	801ea5a <_isatty_r+0x1a>
 801ea54:	682b      	ldr	r3, [r5, #0]
 801ea56:	b103      	cbz	r3, 801ea5a <_isatty_r+0x1a>
 801ea58:	6023      	str	r3, [r4, #0]
 801ea5a:	bd38      	pop	{r3, r4, r5, pc}
 801ea5c:	200007a0 	.word	0x200007a0

0801ea60 <_lseek_r>:
 801ea60:	b538      	push	{r3, r4, r5, lr}
 801ea62:	4d07      	ldr	r5, [pc, #28]	; (801ea80 <_lseek_r+0x20>)
 801ea64:	4604      	mov	r4, r0
 801ea66:	4608      	mov	r0, r1
 801ea68:	4611      	mov	r1, r2
 801ea6a:	2200      	movs	r2, #0
 801ea6c:	602a      	str	r2, [r5, #0]
 801ea6e:	461a      	mov	r2, r3
 801ea70:	f7f7 fb6a 	bl	8016148 <_lseek>
 801ea74:	1c43      	adds	r3, r0, #1
 801ea76:	d102      	bne.n	801ea7e <_lseek_r+0x1e>
 801ea78:	682b      	ldr	r3, [r5, #0]
 801ea7a:	b103      	cbz	r3, 801ea7e <_lseek_r+0x1e>
 801ea7c:	6023      	str	r3, [r4, #0]
 801ea7e:	bd38      	pop	{r3, r4, r5, pc}
 801ea80:	200007a0 	.word	0x200007a0

0801ea84 <__malloc_lock>:
 801ea84:	4801      	ldr	r0, [pc, #4]	; (801ea8c <__malloc_lock+0x8>)
 801ea86:	f7ff bdc7 	b.w	801e618 <__retarget_lock_acquire_recursive>
 801ea8a:	bf00      	nop
 801ea8c:	20000794 	.word	0x20000794

0801ea90 <__malloc_unlock>:
 801ea90:	4801      	ldr	r0, [pc, #4]	; (801ea98 <__malloc_unlock+0x8>)
 801ea92:	f7ff bdc2 	b.w	801e61a <__retarget_lock_release_recursive>
 801ea96:	bf00      	nop
 801ea98:	20000794 	.word	0x20000794

0801ea9c <_read_r>:
 801ea9c:	b538      	push	{r3, r4, r5, lr}
 801ea9e:	4d07      	ldr	r5, [pc, #28]	; (801eabc <_read_r+0x20>)
 801eaa0:	4604      	mov	r4, r0
 801eaa2:	4608      	mov	r0, r1
 801eaa4:	4611      	mov	r1, r2
 801eaa6:	2200      	movs	r2, #0
 801eaa8:	602a      	str	r2, [r5, #0]
 801eaaa:	461a      	mov	r2, r3
 801eaac:	f7f7 faec 	bl	8016088 <_read>
 801eab0:	1c43      	adds	r3, r0, #1
 801eab2:	d102      	bne.n	801eaba <_read_r+0x1e>
 801eab4:	682b      	ldr	r3, [r5, #0]
 801eab6:	b103      	cbz	r3, 801eaba <_read_r+0x1e>
 801eab8:	6023      	str	r3, [r4, #0]
 801eaba:	bd38      	pop	{r3, r4, r5, pc}
 801eabc:	200007a0 	.word	0x200007a0

0801eac0 <_init>:
 801eac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eac2:	bf00      	nop
 801eac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801eac6:	bc08      	pop	{r3}
 801eac8:	469e      	mov	lr, r3
 801eaca:	4770      	bx	lr

0801eacc <_fini>:
 801eacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eace:	bf00      	nop
 801ead0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ead2:	bc08      	pop	{r3}
 801ead4:	469e      	mov	lr, r3
 801ead6:	4770      	bx	lr
