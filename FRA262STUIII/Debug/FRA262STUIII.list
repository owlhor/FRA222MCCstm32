
FRA262STUIII.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007708  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080078a0  080078a0  000178a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078c0  080078c0  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  080078c0  080078c0  000178c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078c8  080078c8  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078c8  080078c8  000178c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078cc  080078cc  000178cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  080078d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  20000028  080078f8  00020028  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  080078f8  00020300  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010823  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e86  00000000  00000000  0003087b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f20  00000000  00000000  00032708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e90  00000000  00000000  00033628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015de4  00000000  00000000  000344b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011427  00000000  00000000  0004a29c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cc88  00000000  00000000  0005b6c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e834b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004274  00000000  00000000  000e839c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000028 	.word	0x20000028
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007888 	.word	0x08007888

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000002c 	.word	0x2000002c
 80001d4:	08007888 	.word	0x08007888

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295
 8000a28:	f000 b974 	b.w	8000d14 <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9d08      	ldr	r5, [sp, #32]
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	468e      	mov	lr, r1
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d14d      	bne.n	8000aee <__udivmoddi4+0xaa>
 8000a52:	428a      	cmp	r2, r1
 8000a54:	4694      	mov	ip, r2
 8000a56:	d969      	bls.n	8000b2c <__udivmoddi4+0xe8>
 8000a58:	fab2 f282 	clz	r2, r2
 8000a5c:	b152      	cbz	r2, 8000a74 <__udivmoddi4+0x30>
 8000a5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a62:	f1c2 0120 	rsb	r1, r2, #32
 8000a66:	fa20 f101 	lsr.w	r1, r0, r1
 8000a6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a72:	4094      	lsls	r4, r2
 8000a74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a78:	0c21      	lsrs	r1, r4, #16
 8000a7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a7e:	fa1f f78c 	uxth.w	r7, ip
 8000a82:	fb08 e316 	mls	r3, r8, r6, lr
 8000a86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a8a:	fb06 f107 	mul.w	r1, r6, r7
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	d90a      	bls.n	8000aa8 <__udivmoddi4+0x64>
 8000a92:	eb1c 0303 	adds.w	r3, ip, r3
 8000a96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a9a:	f080 811f 	bcs.w	8000cdc <__udivmoddi4+0x298>
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	f240 811c 	bls.w	8000cdc <__udivmoddi4+0x298>
 8000aa4:	3e02      	subs	r6, #2
 8000aa6:	4463      	add	r3, ip
 8000aa8:	1a5b      	subs	r3, r3, r1
 8000aaa:	b2a4      	uxth	r4, r4
 8000aac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ab0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ab4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab8:	fb00 f707 	mul.w	r7, r0, r7
 8000abc:	42a7      	cmp	r7, r4
 8000abe:	d90a      	bls.n	8000ad6 <__udivmoddi4+0x92>
 8000ac0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ac8:	f080 810a 	bcs.w	8000ce0 <__udivmoddi4+0x29c>
 8000acc:	42a7      	cmp	r7, r4
 8000ace:	f240 8107 	bls.w	8000ce0 <__udivmoddi4+0x29c>
 8000ad2:	4464      	add	r4, ip
 8000ad4:	3802      	subs	r0, #2
 8000ad6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ada:	1be4      	subs	r4, r4, r7
 8000adc:	2600      	movs	r6, #0
 8000ade:	b11d      	cbz	r5, 8000ae8 <__udivmoddi4+0xa4>
 8000ae0:	40d4      	lsrs	r4, r2
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ae8:	4631      	mov	r1, r6
 8000aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d909      	bls.n	8000b06 <__udivmoddi4+0xc2>
 8000af2:	2d00      	cmp	r5, #0
 8000af4:	f000 80ef 	beq.w	8000cd6 <__udivmoddi4+0x292>
 8000af8:	2600      	movs	r6, #0
 8000afa:	e9c5 0100 	strd	r0, r1, [r5]
 8000afe:	4630      	mov	r0, r6
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	fab3 f683 	clz	r6, r3
 8000b0a:	2e00      	cmp	r6, #0
 8000b0c:	d14a      	bne.n	8000ba4 <__udivmoddi4+0x160>
 8000b0e:	428b      	cmp	r3, r1
 8000b10:	d302      	bcc.n	8000b18 <__udivmoddi4+0xd4>
 8000b12:	4282      	cmp	r2, r0
 8000b14:	f200 80f9 	bhi.w	8000d0a <__udivmoddi4+0x2c6>
 8000b18:	1a84      	subs	r4, r0, r2
 8000b1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b1e:	2001      	movs	r0, #1
 8000b20:	469e      	mov	lr, r3
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	d0e0      	beq.n	8000ae8 <__udivmoddi4+0xa4>
 8000b26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b2a:	e7dd      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000b2c:	b902      	cbnz	r2, 8000b30 <__udivmoddi4+0xec>
 8000b2e:	deff      	udf	#255	; 0xff
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	2a00      	cmp	r2, #0
 8000b36:	f040 8092 	bne.w	8000c5e <__udivmoddi4+0x21a>
 8000b3a:	eba1 010c 	sub.w	r1, r1, ip
 8000b3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b42:	fa1f fe8c 	uxth.w	lr, ip
 8000b46:	2601      	movs	r6, #1
 8000b48:	0c20      	lsrs	r0, r4, #16
 8000b4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b56:	fb0e f003 	mul.w	r0, lr, r3
 8000b5a:	4288      	cmp	r0, r1
 8000b5c:	d908      	bls.n	8000b70 <__udivmoddi4+0x12c>
 8000b5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0x12a>
 8000b68:	4288      	cmp	r0, r1
 8000b6a:	f200 80cb 	bhi.w	8000d04 <__udivmoddi4+0x2c0>
 8000b6e:	4643      	mov	r3, r8
 8000b70:	1a09      	subs	r1, r1, r0
 8000b72:	b2a4      	uxth	r4, r4
 8000b74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b78:	fb07 1110 	mls	r1, r7, r0, r1
 8000b7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b80:	fb0e fe00 	mul.w	lr, lr, r0
 8000b84:	45a6      	cmp	lr, r4
 8000b86:	d908      	bls.n	8000b9a <__udivmoddi4+0x156>
 8000b88:	eb1c 0404 	adds.w	r4, ip, r4
 8000b8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b90:	d202      	bcs.n	8000b98 <__udivmoddi4+0x154>
 8000b92:	45a6      	cmp	lr, r4
 8000b94:	f200 80bb 	bhi.w	8000d0e <__udivmoddi4+0x2ca>
 8000b98:	4608      	mov	r0, r1
 8000b9a:	eba4 040e 	sub.w	r4, r4, lr
 8000b9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ba2:	e79c      	b.n	8000ade <__udivmoddi4+0x9a>
 8000ba4:	f1c6 0720 	rsb	r7, r6, #32
 8000ba8:	40b3      	lsls	r3, r6
 8000baa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bba:	431c      	orrs	r4, r3
 8000bbc:	40f9      	lsrs	r1, r7
 8000bbe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bc2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bc6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bca:	0c20      	lsrs	r0, r4, #16
 8000bcc:	fa1f fe8c 	uxth.w	lr, ip
 8000bd0:	fb09 1118 	mls	r1, r9, r8, r1
 8000bd4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bd8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bdc:	4288      	cmp	r0, r1
 8000bde:	fa02 f206 	lsl.w	r2, r2, r6
 8000be2:	d90b      	bls.n	8000bfc <__udivmoddi4+0x1b8>
 8000be4:	eb1c 0101 	adds.w	r1, ip, r1
 8000be8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bec:	f080 8088 	bcs.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf0:	4288      	cmp	r0, r1
 8000bf2:	f240 8085 	bls.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bfa:	4461      	add	r1, ip
 8000bfc:	1a09      	subs	r1, r1, r0
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c04:	fb09 1110 	mls	r1, r9, r0, r1
 8000c08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c10:	458e      	cmp	lr, r1
 8000c12:	d908      	bls.n	8000c26 <__udivmoddi4+0x1e2>
 8000c14:	eb1c 0101 	adds.w	r1, ip, r1
 8000c18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c1c:	d26c      	bcs.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c1e:	458e      	cmp	lr, r1
 8000c20:	d96a      	bls.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c22:	3802      	subs	r0, #2
 8000c24:	4461      	add	r1, ip
 8000c26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c2e:	eba1 010e 	sub.w	r1, r1, lr
 8000c32:	42a1      	cmp	r1, r4
 8000c34:	46c8      	mov	r8, r9
 8000c36:	46a6      	mov	lr, r4
 8000c38:	d356      	bcc.n	8000ce8 <__udivmoddi4+0x2a4>
 8000c3a:	d053      	beq.n	8000ce4 <__udivmoddi4+0x2a0>
 8000c3c:	b15d      	cbz	r5, 8000c56 <__udivmoddi4+0x212>
 8000c3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c42:	eb61 010e 	sbc.w	r1, r1, lr
 8000c46:	fa01 f707 	lsl.w	r7, r1, r7
 8000c4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c4e:	40f1      	lsrs	r1, r6
 8000c50:	431f      	orrs	r7, r3
 8000c52:	e9c5 7100 	strd	r7, r1, [r5]
 8000c56:	2600      	movs	r6, #0
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	f1c2 0320 	rsb	r3, r2, #32
 8000c62:	40d8      	lsrs	r0, r3
 8000c64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c68:	fa21 f303 	lsr.w	r3, r1, r3
 8000c6c:	4091      	lsls	r1, r2
 8000c6e:	4301      	orrs	r1, r0
 8000c70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c74:	fa1f fe8c 	uxth.w	lr, ip
 8000c78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c80:	0c0b      	lsrs	r3, r1, #16
 8000c82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c86:	fb00 f60e 	mul.w	r6, r0, lr
 8000c8a:	429e      	cmp	r6, r3
 8000c8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x260>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c9a:	d22f      	bcs.n	8000cfc <__udivmoddi4+0x2b8>
 8000c9c:	429e      	cmp	r6, r3
 8000c9e:	d92d      	bls.n	8000cfc <__udivmoddi4+0x2b8>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	1b9b      	subs	r3, r3, r6
 8000ca6:	b289      	uxth	r1, r1
 8000ca8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cac:	fb07 3316 	mls	r3, r7, r6, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x28a>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cc4:	d216      	bcs.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d914      	bls.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cca:	3e02      	subs	r6, #2
 8000ccc:	4461      	add	r1, ip
 8000cce:	1ac9      	subs	r1, r1, r3
 8000cd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cd4:	e738      	b.n	8000b48 <__udivmoddi4+0x104>
 8000cd6:	462e      	mov	r6, r5
 8000cd8:	4628      	mov	r0, r5
 8000cda:	e705      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000cdc:	4606      	mov	r6, r0
 8000cde:	e6e3      	b.n	8000aa8 <__udivmoddi4+0x64>
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	e6f8      	b.n	8000ad6 <__udivmoddi4+0x92>
 8000ce4:	454b      	cmp	r3, r9
 8000ce6:	d2a9      	bcs.n	8000c3c <__udivmoddi4+0x1f8>
 8000ce8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cf0:	3801      	subs	r0, #1
 8000cf2:	e7a3      	b.n	8000c3c <__udivmoddi4+0x1f8>
 8000cf4:	4646      	mov	r6, r8
 8000cf6:	e7ea      	b.n	8000cce <__udivmoddi4+0x28a>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	e794      	b.n	8000c26 <__udivmoddi4+0x1e2>
 8000cfc:	4640      	mov	r0, r8
 8000cfe:	e7d1      	b.n	8000ca4 <__udivmoddi4+0x260>
 8000d00:	46d0      	mov	r8, sl
 8000d02:	e77b      	b.n	8000bfc <__udivmoddi4+0x1b8>
 8000d04:	3b02      	subs	r3, #2
 8000d06:	4461      	add	r1, ip
 8000d08:	e732      	b.n	8000b70 <__udivmoddi4+0x12c>
 8000d0a:	4630      	mov	r0, r6
 8000d0c:	e709      	b.n	8000b22 <__udivmoddi4+0xde>
 8000d0e:	4464      	add	r4, ip
 8000d10:	3802      	subs	r0, #2
 8000d12:	e742      	b.n	8000b9a <__udivmoddi4+0x156>

08000d14 <__aeabi_idiv0>:
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop

08000d18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d20:	f000 feda 	bl	8001ad8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d24:	f000 f88a 	bl	8000e3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d28:	f000 fa72 	bl	8001210 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d2c:	f000 fa26 	bl	800117c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000d30:	f000 f91a 	bl	8000f68 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000d34:	f000 f988 	bl	8001048 <MX_TIM4_Init>
  MX_TIM11_Init();
 8000d38:	f000 f9fc 	bl	8001134 <MX_TIM11_Init>
  MX_DMA_Init();
 8000d3c:	f000 fa48 	bl	80011d0 <MX_DMA_Init>
  MX_I2C1_Init();
 8000d40:	f000 f8e4 	bl	8000f0c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_Base_Start_IT(&htim11); // micro timer
 8000d44:	4831      	ldr	r0, [pc, #196]	; (8000e0c <main+0xf4>)
 8000d46:	f004 ffd3 	bl	8005cf0 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start(&htim2); // Speed
 8000d4a:	4831      	ldr	r0, [pc, #196]	; (8000e10 <main+0xf8>)
 8000d4c:	f004 ff76 	bl	8005c3c <HAL_TIM_Base_Start>
    HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*) &capturedata,
 8000d50:	2310      	movs	r3, #16
 8000d52:	4a30      	ldr	r2, [pc, #192]	; (8000e14 <main+0xfc>)
 8000d54:	2100      	movs	r1, #0
 8000d56:	482e      	ldr	r0, [pc, #184]	; (8000e10 <main+0xf8>)
 8000d58:	f005 f990 	bl	800607c <HAL_TIM_IC_Start_DMA>
    			CAPTURENUM);

    //PWM Test
    HAL_TIM_Base_Start(&htim4);
 8000d5c:	482e      	ldr	r0, [pc, #184]	; (8000e18 <main+0x100>)
 8000d5e:	f004 ff6d 	bl	8005c3c <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000d62:	2100      	movs	r1, #0
 8000d64:	482c      	ldr	r0, [pc, #176]	; (8000e18 <main+0x100>)
 8000d66:	f005 f87f 	bl	8005e68 <HAL_TIM_PWM_Start>

    //MCP23017 setting init
    HAL_Delay(100);
 8000d6a:	2064      	movs	r0, #100	; 0x64
 8000d6c:	f000 ff26 	bl	8001bbc <HAL_Delay>
    IOExpenderInit();
 8000d70:	f000 fbb6 	bl	80014e0 <IOExpenderInit>
    /* USER CODE BEGIN 3 */

	  // parraregis driving act as DigitalOUT       // A0 as ser in


	  	  if (micros()-timeStampSR > 3000)      // don't use 1
 8000d74:	f000 fc58 	bl	8001628 <micros>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4927      	ldr	r1, [pc, #156]	; (8000e1c <main+0x104>)
 8000d7e:	6809      	ldr	r1, [r1, #0]
 8000d80:	2000      	movs	r0, #0
 8000d82:	468a      	mov	sl, r1
 8000d84:	4683      	mov	fp, r0
 8000d86:	ebb2 040a 	subs.w	r4, r2, sl
 8000d8a:	eb63 050b 	sbc.w	r5, r3, fp
 8000d8e:	f640 33b9 	movw	r3, #3001	; 0xbb9
 8000d92:	429c      	cmp	r4, r3
 8000d94:	f175 0300 	sbcs.w	r3, r5, #0
 8000d98:	d308      	bcc.n	8000dac <main+0x94>
	  	          {
	  	              timeStampSR = micros();           //set new time stamp
 8000d9a:	f000 fc45 	bl	8001628 <micros>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	460b      	mov	r3, r1
 8000da2:	4b1e      	ldr	r3, [pc, #120]	; (8000e1c <main+0x104>)
 8000da4:	601a      	str	r2, [r3, #0]
	  	              flag_absenc = 1;
 8000da6:	4b1e      	ldr	r3, [pc, #120]	; (8000e20 <main+0x108>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	701a      	strb	r2, [r3, #0]

	  	          }

	  	  AbsEncI2CRead(&RawEnBitA,&RawEnBitB);
 8000dac:	491d      	ldr	r1, [pc, #116]	; (8000e24 <main+0x10c>)
 8000dae:	481e      	ldr	r0, [pc, #120]	; (8000e28 <main+0x110>)
 8000db0:	f000 fbac 	bl	800150c <AbsEncI2CRead>
	  	  encoderSpeedReaderCycle();
 8000db4:	f000 fb20 	bl	80013f8 <encoderSpeedReaderCycle>
	  	  pwr_sense = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8000db8:	2102      	movs	r1, #2
 8000dba:	481c      	ldr	r0, [pc, #112]	; (8000e2c <main+0x114>)
 8000dbc:	f001 fd58 	bl	8002870 <HAL_GPIO_ReadPin>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	4b1a      	ldr	r3, [pc, #104]	; (8000e30 <main+0x118>)
 8000dc6:	701a      	strb	r2, [r3, #0]

	  	  ///////////////////// 2KHz change PWM PB6////////////////////
	  	  if(micros() - TimeLoopPWM > 500){
 8000dc8:	f000 fc2e 	bl	8001628 <micros>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	460b      	mov	r3, r1
 8000dd0:	4918      	ldr	r1, [pc, #96]	; (8000e34 <main+0x11c>)
 8000dd2:	6809      	ldr	r1, [r1, #0]
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	6039      	str	r1, [r7, #0]
 8000dd8:	6078      	str	r0, [r7, #4]
 8000dda:	6839      	ldr	r1, [r7, #0]
 8000ddc:	ebb2 0801 	subs.w	r8, r2, r1
 8000de0:	6879      	ldr	r1, [r7, #4]
 8000de2:	eb63 0901 	sbc.w	r9, r3, r1
 8000de6:	f240 13f5 	movw	r3, #501	; 0x1f5
 8000dea:	4598      	cmp	r8, r3
 8000dec:	f179 0300 	sbcs.w	r3, r9, #0
 8000df0:	d3c0      	bcc.n	8000d74 <main+0x5c>
	  	  		  TimeLoopPWM = micros(); // stamp
 8000df2:	f000 fc19 	bl	8001628 <micros>
 8000df6:	4602      	mov	r2, r0
 8000df8:	460b      	mov	r3, r1
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <main+0x11c>)
 8000dfc:	601a      	str	r2, [r3, #0]
	  	  		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWMOut);
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <main+0x120>)
 8000e00:	881a      	ldrh	r2, [r3, #0]
 8000e02:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <main+0x100>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	635a      	str	r2, [r3, #52]	; 0x34
	  	  if (micros()-timeStampSR > 3000)      // don't use 1
 8000e08:	e7b4      	b.n	8000d74 <main+0x5c>
 8000e0a:	bf00      	nop
 8000e0c:	20000128 	.word	0x20000128
 8000e10:	20000098 	.word	0x20000098
 8000e14:	20000234 	.word	0x20000234
 8000e18:	200000e0 	.word	0x200000e0
 8000e1c:	20000224 	.word	0x20000224
 8000e20:	20000230 	.word	0x20000230
 8000e24:	20000229 	.word	0x20000229
 8000e28:	20000228 	.word	0x20000228
 8000e2c:	40020400 	.word	0x40020400
 8000e30:	20000214 	.word	0x20000214
 8000e34:	200002f8 	.word	0x200002f8
 8000e38:	20000000 	.word	0x20000000

08000e3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b094      	sub	sp, #80	; 0x50
 8000e40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e42:	f107 0320 	add.w	r3, r7, #32
 8000e46:	2230      	movs	r2, #48	; 0x30
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f006 fd14 	bl	8007878 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e50:	f107 030c 	add.w	r3, r7, #12
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e60:	2300      	movs	r3, #0
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	4b27      	ldr	r3, [pc, #156]	; (8000f04 <SystemClock_Config+0xc8>)
 8000e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e68:	4a26      	ldr	r2, [pc, #152]	; (8000f04 <SystemClock_Config+0xc8>)
 8000e6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e70:	4b24      	ldr	r3, [pc, #144]	; (8000f04 <SystemClock_Config+0xc8>)
 8000e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	4b21      	ldr	r3, [pc, #132]	; (8000f08 <SystemClock_Config+0xcc>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a20      	ldr	r2, [pc, #128]	; (8000f08 <SystemClock_Config+0xcc>)
 8000e86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e8a:	6013      	str	r3, [r2, #0]
 8000e8c:	4b1e      	ldr	r3, [pc, #120]	; (8000f08 <SystemClock_Config+0xcc>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e94:	607b      	str	r3, [r7, #4]
 8000e96:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ea0:	2310      	movs	r3, #16
 8000ea2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000eac:	2308      	movs	r3, #8
 8000eae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000eb0:	2364      	movs	r3, #100	; 0x64
 8000eb2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000eb8:	2304      	movs	r3, #4
 8000eba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ebc:	f107 0320 	add.w	r3, r7, #32
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f004 f9d3 	bl	800526c <HAL_RCC_OscConfig>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ecc:	f000 fbc6 	bl	800165c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed0:	230f      	movs	r3, #15
 8000ed2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ee0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ee6:	f107 030c 	add.w	r3, r7, #12
 8000eea:	2103      	movs	r1, #3
 8000eec:	4618      	mov	r0, r3
 8000eee:	f004 fc35 	bl	800575c <HAL_RCC_ClockConfig>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000ef8:	f000 fbb0 	bl	800165c <Error_Handler>
  }
}
 8000efc:	bf00      	nop
 8000efe:	3750      	adds	r7, #80	; 0x50
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40023800 	.word	0x40023800
 8000f08:	40007000 	.word	0x40007000

08000f0c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f12:	4a13      	ldr	r2, [pc, #76]	; (8000f60 <MX_I2C1_Init+0x54>)
 8000f14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000f16:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f18:	4a12      	ldr	r2, [pc, #72]	; (8000f64 <MX_I2C1_Init+0x58>)
 8000f1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f1c:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f22:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f30:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f36:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f3c:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f48:	4804      	ldr	r0, [pc, #16]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f4a:	f001 fcf5 	bl	8002938 <HAL_I2C_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f54:	f000 fb82 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000044 	.word	0x20000044
 8000f60:	40005400 	.word	0x40005400
 8000f64:	00061a80 	.word	0x00061a80

08000f68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08a      	sub	sp, #40	; 0x28
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f6e:	f107 0318 	add.w	r3, r7, #24
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
 8000f78:	609a      	str	r2, [r3, #8]
 8000f7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f7c:	f107 0310 	add.w	r3, r7, #16
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f86:	463b      	mov	r3, r7
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f92:	4b2c      	ldr	r3, [pc, #176]	; (8001044 <MX_TIM2_Init+0xdc>)
 8000f94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f98:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8000f9a:	4b2a      	ldr	r3, [pc, #168]	; (8001044 <MX_TIM2_Init+0xdc>)
 8000f9c:	2263      	movs	r2, #99	; 0x63
 8000f9e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa0:	4b28      	ldr	r3, [pc, #160]	; (8001044 <MX_TIM2_Init+0xdc>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000fa6:	4b27      	ldr	r3, [pc, #156]	; (8001044 <MX_TIM2_Init+0xdc>)
 8000fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fae:	4b25      	ldr	r3, [pc, #148]	; (8001044 <MX_TIM2_Init+0xdc>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb4:	4b23      	ldr	r3, [pc, #140]	; (8001044 <MX_TIM2_Init+0xdc>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fba:	4822      	ldr	r0, [pc, #136]	; (8001044 <MX_TIM2_Init+0xdc>)
 8000fbc:	f004 fdee 	bl	8005b9c <HAL_TIM_Base_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000fc6:	f000 fb49 	bl	800165c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fce:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fd0:	f107 0318 	add.w	r3, r7, #24
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	481b      	ldr	r0, [pc, #108]	; (8001044 <MX_TIM2_Init+0xdc>)
 8000fd8:	f005 fb4a 	bl	8006670 <HAL_TIM_ConfigClockSource>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000fe2:	f000 fb3b 	bl	800165c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000fe6:	4817      	ldr	r0, [pc, #92]	; (8001044 <MX_TIM2_Init+0xdc>)
 8000fe8:	f004 ffee 	bl	8005fc8 <HAL_TIM_IC_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000ff2:	f000 fb33 	bl	800165c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ffe:	f107 0310 	add.w	r3, r7, #16
 8001002:	4619      	mov	r1, r3
 8001004:	480f      	ldr	r0, [pc, #60]	; (8001044 <MX_TIM2_Init+0xdc>)
 8001006:	f006 f8e3 	bl	80071d0 <HAL_TIMEx_MasterConfigSynchronization>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001010:	f000 fb24 	bl	800165c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001014:	2300      	movs	r3, #0
 8001016:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001018:	2301      	movs	r3, #1
 800101a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800101c:	2300      	movs	r3, #0
 800101e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001024:	463b      	mov	r3, r7
 8001026:	2200      	movs	r2, #0
 8001028:	4619      	mov	r1, r3
 800102a:	4806      	ldr	r0, [pc, #24]	; (8001044 <MX_TIM2_Init+0xdc>)
 800102c:	f005 f9c2 	bl	80063b4 <HAL_TIM_IC_ConfigChannel>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001036:	f000 fb11 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800103a:	bf00      	nop
 800103c:	3728      	adds	r7, #40	; 0x28
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000098 	.word	0x20000098

08001048 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08e      	sub	sp, #56	; 0x38
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800104e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800105c:	f107 0320 	add.w	r3, r7, #32
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
 8001074:	615a      	str	r2, [r3, #20]
 8001076:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001078:	4b2c      	ldr	r3, [pc, #176]	; (800112c <MX_TIM4_Init+0xe4>)
 800107a:	4a2d      	ldr	r2, [pc, #180]	; (8001130 <MX_TIM4_Init+0xe8>)
 800107c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800107e:	4b2b      	ldr	r3, [pc, #172]	; (800112c <MX_TIM4_Init+0xe4>)
 8001080:	2200      	movs	r2, #0
 8001082:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001084:	4b29      	ldr	r3, [pc, #164]	; (800112c <MX_TIM4_Init+0xe4>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 800108a:	4b28      	ldr	r3, [pc, #160]	; (800112c <MX_TIM4_Init+0xe4>)
 800108c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001090:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001092:	4b26      	ldr	r3, [pc, #152]	; (800112c <MX_TIM4_Init+0xe4>)
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001098:	4b24      	ldr	r3, [pc, #144]	; (800112c <MX_TIM4_Init+0xe4>)
 800109a:	2200      	movs	r2, #0
 800109c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800109e:	4823      	ldr	r0, [pc, #140]	; (800112c <MX_TIM4_Init+0xe4>)
 80010a0:	f004 fd7c 	bl	8005b9c <HAL_TIM_Base_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80010aa:	f000 fad7 	bl	800165c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80010b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010b8:	4619      	mov	r1, r3
 80010ba:	481c      	ldr	r0, [pc, #112]	; (800112c <MX_TIM4_Init+0xe4>)
 80010bc:	f005 fad8 	bl	8006670 <HAL_TIM_ConfigClockSource>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80010c6:	f000 fac9 	bl	800165c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80010ca:	4818      	ldr	r0, [pc, #96]	; (800112c <MX_TIM4_Init+0xe4>)
 80010cc:	f004 fe72 	bl	8005db4 <HAL_TIM_PWM_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80010d6:	f000 fac1 	bl	800165c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010da:	2300      	movs	r3, #0
 80010dc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010de:	2300      	movs	r3, #0
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010e2:	f107 0320 	add.w	r3, r7, #32
 80010e6:	4619      	mov	r1, r3
 80010e8:	4810      	ldr	r0, [pc, #64]	; (800112c <MX_TIM4_Init+0xe4>)
 80010ea:	f006 f871 	bl	80071d0 <HAL_TIMEx_MasterConfigSynchronization>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80010f4:	f000 fab2 	bl	800165c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010f8:	2360      	movs	r3, #96	; 0x60
 80010fa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001100:	2300      	movs	r3, #0
 8001102:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001108:	1d3b      	adds	r3, r7, #4
 800110a:	2200      	movs	r2, #0
 800110c:	4619      	mov	r1, r3
 800110e:	4807      	ldr	r0, [pc, #28]	; (800112c <MX_TIM4_Init+0xe4>)
 8001110:	f005 f9ec 	bl	80064ec <HAL_TIM_PWM_ConfigChannel>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800111a:	f000 fa9f 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800111e:	4803      	ldr	r0, [pc, #12]	; (800112c <MX_TIM4_Init+0xe4>)
 8001120:	f000 fbc8 	bl	80018b4 <HAL_TIM_MspPostInit>

}
 8001124:	bf00      	nop
 8001126:	3738      	adds	r7, #56	; 0x38
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	200000e0 	.word	0x200000e0
 8001130:	40000800 	.word	0x40000800

08001134 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001138:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <MX_TIM11_Init+0x40>)
 800113a:	4a0f      	ldr	r2, [pc, #60]	; (8001178 <MX_TIM11_Init+0x44>)
 800113c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 800113e:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <MX_TIM11_Init+0x40>)
 8001140:	2263      	movs	r2, #99	; 0x63
 8001142:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001144:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <MX_TIM11_Init+0x40>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800114a:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <MX_TIM11_Init+0x40>)
 800114c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001150:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001152:	4b08      	ldr	r3, [pc, #32]	; (8001174 <MX_TIM11_Init+0x40>)
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <MX_TIM11_Init+0x40>)
 800115a:	2200      	movs	r2, #0
 800115c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800115e:	4805      	ldr	r0, [pc, #20]	; (8001174 <MX_TIM11_Init+0x40>)
 8001160:	f004 fd1c 	bl	8005b9c <HAL_TIM_Base_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800116a:	f000 fa77 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000128 	.word	0x20000128
 8001178:	40014800 	.word	0x40014800

0800117c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001180:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <MX_USART2_UART_Init+0x4c>)
 8001182:	4a12      	ldr	r2, [pc, #72]	; (80011cc <MX_USART2_UART_Init+0x50>)
 8001184:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001186:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <MX_USART2_UART_Init+0x4c>)
 8001188:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800118c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <MX_USART2_UART_Init+0x4c>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <MX_USART2_UART_Init+0x4c>)
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800119a:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <MX_USART2_UART_Init+0x4c>)
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011a0:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <MX_USART2_UART_Init+0x4c>)
 80011a2:	220c      	movs	r2, #12
 80011a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011a6:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <MX_USART2_UART_Init+0x4c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <MX_USART2_UART_Init+0x4c>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011b2:	4805      	ldr	r0, [pc, #20]	; (80011c8 <MX_USART2_UART_Init+0x4c>)
 80011b4:	f006 f87a 	bl	80072ac <HAL_UART_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011be:	f000 fa4d 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200001d0 	.word	0x200001d0
 80011cc:	40004400 	.word	0x40004400

080011d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	4b0c      	ldr	r3, [pc, #48]	; (800120c <MX_DMA_Init+0x3c>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a0b      	ldr	r2, [pc, #44]	; (800120c <MX_DMA_Init+0x3c>)
 80011e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <MX_DMA_Init+0x3c>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2100      	movs	r1, #0
 80011f6:	2010      	movs	r0, #16
 80011f8:	f000 fddf 	bl	8001dba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80011fc:	2010      	movs	r0, #16
 80011fe:	f000 fdf8 	bl	8001df2 <HAL_NVIC_EnableIRQ>

}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40023800 	.word	0x40023800

08001210 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	; 0x28
 8001214:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
 8001224:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
 800122a:	4b4f      	ldr	r3, [pc, #316]	; (8001368 <MX_GPIO_Init+0x158>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a4e      	ldr	r2, [pc, #312]	; (8001368 <MX_GPIO_Init+0x158>)
 8001230:	f043 0304 	orr.w	r3, r3, #4
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b4c      	ldr	r3, [pc, #304]	; (8001368 <MX_GPIO_Init+0x158>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0304 	and.w	r3, r3, #4
 800123e:	613b      	str	r3, [r7, #16]
 8001240:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	4b48      	ldr	r3, [pc, #288]	; (8001368 <MX_GPIO_Init+0x158>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a47      	ldr	r2, [pc, #284]	; (8001368 <MX_GPIO_Init+0x158>)
 800124c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b45      	ldr	r3, [pc, #276]	; (8001368 <MX_GPIO_Init+0x158>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	4b41      	ldr	r3, [pc, #260]	; (8001368 <MX_GPIO_Init+0x158>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a40      	ldr	r2, [pc, #256]	; (8001368 <MX_GPIO_Init+0x158>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b3e      	ldr	r3, [pc, #248]	; (8001368 <MX_GPIO_Init+0x158>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	4b3a      	ldr	r3, [pc, #232]	; (8001368 <MX_GPIO_Init+0x158>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a39      	ldr	r2, [pc, #228]	; (8001368 <MX_GPIO_Init+0x158>)
 8001284:	f043 0302 	orr.w	r3, r3, #2
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b37      	ldr	r3, [pc, #220]	; (8001368 <MX_GPIO_Init+0x158>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001296:	2200      	movs	r2, #0
 8001298:	2120      	movs	r1, #32
 800129a:	4834      	ldr	r0, [pc, #208]	; (800136c <MX_GPIO_Init+0x15c>)
 800129c:	f001 fb00 	bl	80028a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Mot_dir_Pin|En_SHLD_Pin|En_SERCLK_Pin|En_INHCLK_Pin, GPIO_PIN_RESET);
 80012a0:	2200      	movs	r2, #0
 80012a2:	f24e 0104 	movw	r1, #57348	; 0xe004
 80012a6:	4832      	ldr	r0, [pc, #200]	; (8001370 <MX_GPIO_Init+0x160>)
 80012a8:	f001 fafa 	bl	80028a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012b2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4619      	mov	r1, r3
 80012c2:	482c      	ldr	r0, [pc, #176]	; (8001374 <MX_GPIO_Init+0x164>)
 80012c4:	f001 f950 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012c8:	2320      	movs	r3, #32
 80012ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012cc:	2301      	movs	r3, #1
 80012ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	4619      	mov	r1, r3
 80012de:	4823      	ldr	r0, [pc, #140]	; (800136c <MX_GPIO_Init+0x15c>)
 80012e0:	f001 f942 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pwr_Sense_Pin */
  GPIO_InitStruct.Pin = Pwr_Sense_Pin;
 80012e4:	2302      	movs	r3, #2
 80012e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pwr_Sense_GPIO_Port, &GPIO_InitStruct);
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	4619      	mov	r1, r3
 80012f6:	481e      	ldr	r0, [pc, #120]	; (8001370 <MX_GPIO_Init+0x160>)
 80012f8:	f001 f936 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pins : Mot_dir_Pin En_SHLD_Pin En_SERCLK_Pin En_INHCLK_Pin */
  GPIO_InitStruct.Pin = Mot_dir_Pin|En_SHLD_Pin|En_SERCLK_Pin|En_INHCLK_Pin;
 80012fc:	f24e 0304 	movw	r3, #57348	; 0xe004
 8001300:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001302:	2301      	movs	r3, #1
 8001304:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	2300      	movs	r3, #0
 800130c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4619      	mov	r1, r3
 8001314:	4816      	ldr	r0, [pc, #88]	; (8001370 <MX_GPIO_Init+0x160>)
 8001316:	f001 f927 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pin : D9_VeloDt_Pin */
  GPIO_InitStruct.Pin = D9_VeloDt_Pin;
 800131a:	2380      	movs	r3, #128	; 0x80
 800131c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800131e:	2300      	movs	r3, #0
 8001320:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D9_VeloDt_GPIO_Port, &GPIO_InitStruct);
 8001326:	f107 0314 	add.w	r3, r7, #20
 800132a:	4619      	mov	r1, r3
 800132c:	4811      	ldr	r0, [pc, #68]	; (8001374 <MX_GPIO_Init+0x164>)
 800132e:	f001 f91b 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI10_Emer_Pin */
  GPIO_InitStruct.Pin = EXTI10_Emer_Pin;
 8001332:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001336:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001338:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800133c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800133e:	2301      	movs	r3, #1
 8001340:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EXTI10_Emer_GPIO_Port, &GPIO_InitStruct);
 8001342:	f107 0314 	add.w	r3, r7, #20
 8001346:	4619      	mov	r1, r3
 8001348:	480a      	ldr	r0, [pc, #40]	; (8001374 <MX_GPIO_Init+0x164>)
 800134a:	f001 f90d 	bl	8002568 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2100      	movs	r1, #0
 8001352:	2028      	movs	r0, #40	; 0x28
 8001354:	f000 fd31 	bl	8001dba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001358:	2028      	movs	r0, #40	; 0x28
 800135a:	f000 fd4a 	bl	8001df2 <HAL_NVIC_EnableIRQ>

}
 800135e:	bf00      	nop
 8001360:	3728      	adds	r7, #40	; 0x28
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40023800 	.word	0x40023800
 800136c:	40020000 	.word	0x40020000
 8001370:	40020400 	.word	0x40020400
 8001374:	40020800 	.word	0x40020800

08001378 <GraytoBinario>:
        break;

        }//end switch
    }//end void prll

uint16_t GraytoBinario(uint16_t grayx,uint8_t numbit){ // numbit=10
 8001378:	b480      	push	{r7}
 800137a:	b087      	sub	sp, #28
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	460a      	mov	r2, r1
 8001382:	80fb      	strh	r3, [r7, #6]
 8001384:	4613      	mov	r3, r2
 8001386:	717b      	strb	r3, [r7, #5]

	uint16_t binaryout = 0b0;
 8001388:	2300      	movs	r3, #0
 800138a:	82fb      	strh	r3, [r7, #22]

    binaryout = (grayx >> (numbit-1))&0x01;
 800138c:	88fa      	ldrh	r2, [r7, #6]
 800138e:	797b      	ldrb	r3, [r7, #5]
 8001390:	3b01      	subs	r3, #1
 8001392:	fa42 f303 	asr.w	r3, r2, r3
 8001396:	b29b      	uxth	r3, r3
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	82fb      	strh	r3, [r7, #22]
    //std::cout << binaryout << std::endl;

    for (int i = 1; i < numbit ;i++){
 800139e:	2301      	movs	r3, #1
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	e01d      	b.n	80013e0 <GraytoBinario+0x68>
        /* XOR operation */
        int cp1 = binaryout&0x01 ;//>> (numbit-i)
 80013a4:	8afb      	ldrh	r3, [r7, #22]
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	60fb      	str	r3, [r7, #12]
        int cp2 = grayx >> (numbit-(i+1))&0x01; //
 80013ac:	88fa      	ldrh	r2, [r7, #6]
 80013ae:	7979      	ldrb	r1, [r7, #5]
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	3301      	adds	r3, #1
 80013b4:	1acb      	subs	r3, r1, r3
 80013b6:	fa42 f303 	asr.w	r3, r2, r3
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	60bb      	str	r3, [r7, #8]

        if (cp1 == cp2)
 80013c0:	68fa      	ldr	r2, [r7, #12]
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d103      	bne.n	80013d0 <GraytoBinario+0x58>
            {binaryout = (binaryout << 1) + 0; } //qd = 0;
 80013c8:	8afb      	ldrh	r3, [r7, #22]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	82fb      	strh	r3, [r7, #22]
 80013ce:	e004      	b.n	80013da <GraytoBinario+0x62>
        else
            {binaryout = (binaryout << 1) + 1; } //qd = 1;
 80013d0:	8afb      	ldrh	r3, [r7, #22]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	3301      	adds	r3, #1
 80013d8:	82fb      	strh	r3, [r7, #22]
    for (int i = 1; i < numbit ;i++){
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	3301      	adds	r3, #1
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	797b      	ldrb	r3, [r7, #5]
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	dbdd      	blt.n	80013a4 <GraytoBinario+0x2c>
        //std::cout << "cp" << i << " " << cp1 << cp2 << " " << qd << "  "<<binaryout << std::endl;
    }
    //BinPos = binaryout;
    return binaryout;
 80013e8:	8afb      	ldrh	r3, [r7, #22]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	371c      	adds	r7, #28
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
	...

080013f8 <encoderSpeedReaderCycle>:

void encoderSpeedReaderCycle() {
 80013f8:	b5b0      	push	{r4, r5, r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
	//
	//
	//
	//
	//get DMA Position form number of data
	uint32_t CapPos =CAPTURENUM -  __HAL_DMA_GET_COUNTER(htim2.hdma[TIM_DMA_ID_CC1]);
 80013fe:	4932      	ldr	r1, [pc, #200]	; (80014c8 <encoderSpeedReaderCycle+0xd0>)
 8001400:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8001402:	6809      	ldr	r1, [r1, #0]
 8001404:	6849      	ldr	r1, [r1, #4]
 8001406:	f1c1 0110 	rsb	r1, r1, #16
 800140a:	6039      	str	r1, [r7, #0]
	uint32_t sum = 0 ;
 800140c:	2100      	movs	r1, #0
 800140e:	6079      	str	r1, [r7, #4]

	//calculate diff from all buffer except current dma
	for(register int i=2 ;i < CAPTURENUM-1;i++)
 8001410:	2402      	movs	r4, #2
 8001412:	e022      	b.n	800145a <encoderSpeedReaderCycle+0x62>
	{
		DiffTime[i]  = capturedata[(CapPos+1+i)%CAPTURENUM]-capturedata[(CapPos+i)%CAPTURENUM];
 8001414:	4620      	mov	r0, r4
 8001416:	6839      	ldr	r1, [r7, #0]
 8001418:	4401      	add	r1, r0
 800141a:	3101      	adds	r1, #1
 800141c:	f001 010f 	and.w	r1, r1, #15
 8001420:	482a      	ldr	r0, [pc, #168]	; (80014cc <encoderSpeedReaderCycle+0xd4>)
 8001422:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8001426:	4625      	mov	r5, r4
 8001428:	6839      	ldr	r1, [r7, #0]
 800142a:	4429      	add	r1, r5
 800142c:	f001 010f 	and.w	r1, r1, #15
 8001430:	4d26      	ldr	r5, [pc, #152]	; (80014cc <encoderSpeedReaderCycle+0xd4>)
 8001432:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8001436:	1a41      	subs	r1, r0, r1
 8001438:	2000      	movs	r0, #0
 800143a:	460a      	mov	r2, r1
 800143c:	4603      	mov	r3, r0
 800143e:	4824      	ldr	r0, [pc, #144]	; (80014d0 <encoderSpeedReaderCycle+0xd8>)
 8001440:	00e1      	lsls	r1, r4, #3
 8001442:	4401      	add	r1, r0
 8001444:	e9c1 2300 	strd	r2, r3, [r1]
		//Sum all  Diff
		sum += DiffTime[i];
 8001448:	4821      	ldr	r0, [pc, #132]	; (80014d0 <encoderSpeedReaderCycle+0xd8>)
 800144a:	00e1      	lsls	r1, r4, #3
 800144c:	4401      	add	r1, r0
 800144e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001452:	6879      	ldr	r1, [r7, #4]
 8001454:	4401      	add	r1, r0
 8001456:	6079      	str	r1, [r7, #4]
	for(register int i=2 ;i < CAPTURENUM-1;i++)
 8001458:	3401      	adds	r4, #1
 800145a:	2c0e      	cmp	r4, #14
 800145c:	ddda      	ble.n	8001414 <encoderSpeedReaderCycle+0x1c>
	}

	//mean all Diff
	MeanTime =sum / (float)(CAPTURENUM-3);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	ee07 3a90 	vmov	s15, r3
 8001464:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001468:	eef2 6a0a 	vmov.f32	s13, #42	; 0x41500000  13.0
 800146c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001470:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <encoderSpeedReaderCycle+0xdc>)
 8001472:	edc3 7a00 	vstr	s15, [r3]
	// Meantime = 1 time period for 1 pulse
	// 60000000 / MeanTime = amount of pulse in 1 minute with that time period
	// 1024 pulse per round

	RoundNum = (60000000.0 / MeanTime)/1024.0; // round per min detect by 1024 clk
 8001476:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <encoderSpeedReaderCycle+0xdc>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff f810 	bl	80004a0 <__aeabi_f2d>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	a10e      	add	r1, pc, #56	; (adr r1, 80014c0 <encoderSpeedReaderCycle+0xc8>)
 8001486:	e9d1 0100 	ldrd	r0, r1, [r1]
 800148a:	f7ff f98b 	bl	80007a4 <__aeabi_ddiv>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4610      	mov	r0, r2
 8001494:	4619      	mov	r1, r3
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <encoderSpeedReaderCycle+0xe0>)
 800149c:	f7ff f982 	bl	80007a4 <__aeabi_ddiv>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	4610      	mov	r0, r2
 80014a6:	4619      	mov	r1, r3
 80014a8:	f7ff fa64 	bl	8000974 <__aeabi_d2f>
 80014ac:	4603      	mov	r3, r0
 80014ae:	4a0b      	ldr	r2, [pc, #44]	; (80014dc <encoderSpeedReaderCycle+0xe4>)
 80014b0:	6013      	str	r3, [r2, #0]

}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bdb0      	pop	{r4, r5, r7, pc}
 80014ba:	bf00      	nop
 80014bc:	f3af 8000 	nop.w
 80014c0:	00000000 	.word	0x00000000
 80014c4:	418c9c38 	.word	0x418c9c38
 80014c8:	20000098 	.word	0x20000098
 80014cc:	20000234 	.word	0x20000234
 80014d0:	20000278 	.word	0x20000278
 80014d4:	200002f0 	.word	0x200002f0
 80014d8:	40900000 	.word	0x40900000
 80014dc:	200002f4 	.word	0x200002f4

080014e0 <IOExpenderInit>:
/////////////////////Abs Encoder I2C////////////////////////////////////////////
void IOExpenderInit() {// call when start system
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af04      	add	r7, sp, #16
			0x00, 0x00, 0x00, 0x00,
			0x00, // 0x12 GPIOA
			0x00, // 0x13 GPIOB
			0x00, 0x00 };
	// OLATB -> Out data for pinB
	HAL_I2C_Mem_Write(&hi2c1, ADDR_IOXT, 0x00, I2C_MEMADD_SIZE_8BIT, Setting,
 80014e6:	2364      	movs	r3, #100	; 0x64
 80014e8:	9302      	str	r3, [sp, #8]
 80014ea:	2316      	movs	r3, #22
 80014ec:	9301      	str	r3, [sp, #4]
 80014ee:	4b05      	ldr	r3, [pc, #20]	; (8001504 <IOExpenderInit+0x24>)
 80014f0:	9300      	str	r3, [sp, #0]
 80014f2:	2301      	movs	r3, #1
 80014f4:	2200      	movs	r2, #0
 80014f6:	2140      	movs	r1, #64	; 0x40
 80014f8:	4803      	ldr	r0, [pc, #12]	; (8001508 <IOExpenderInit+0x28>)
 80014fa:	f001 fb61 	bl	8002bc0 <HAL_I2C_Mem_Write>
			0x16, 100);
}
 80014fe:	bf00      	nop
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000004 	.word	0x20000004
 8001508:	20000044 	.word	0x20000044

0800150c <AbsEncI2CRead>:

void AbsEncI2CRead(uint8_t *RawRA, uint8_t *RawRB){
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af04      	add	r7, sp, #16
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]

	if(flag_absenc != 0 && hi2c1.State == HAL_I2C_STATE_READY){
 8001516:	4b2f      	ldr	r3, [pc, #188]	; (80015d4 <AbsEncI2CRead+0xc8>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d053      	beq.n	80015c6 <AbsEncI2CRead+0xba>
 800151e:	4b2e      	ldr	r3, [pc, #184]	; (80015d8 <AbsEncI2CRead+0xcc>)
 8001520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001524:	b2db      	uxtb	r3, r3
 8001526:	2b20      	cmp	r3, #32
 8001528:	d14d      	bne.n	80015c6 <AbsEncI2CRead+0xba>
		//static uint8_t absencStep = 0;
		switch(flag_absenc){
 800152a:	4b2a      	ldr	r3, [pc, #168]	; (80015d4 <AbsEncI2CRead+0xc8>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b03      	cmp	r3, #3
 8001530:	d026      	beq.n	8001580 <AbsEncI2CRead+0x74>
 8001532:	2b03      	cmp	r3, #3
 8001534:	dc49      	bgt.n	80015ca <AbsEncI2CRead+0xbe>
 8001536:	2b01      	cmp	r3, #1
 8001538:	d002      	beq.n	8001540 <AbsEncI2CRead+0x34>
 800153a:	2b02      	cmp	r3, #2
 800153c:	d010      	beq.n	8001560 <AbsEncI2CRead+0x54>
		default:
			break;
 800153e:	e044      	b.n	80015ca <AbsEncI2CRead+0xbe>

		case 1:
			//HAL_I2C_Master_Receive(&hi2c1, ADDR_IOXT, GrayCBitx, 1, 100);
			//HAL_I2C_Master_Seq_Receive_DMA(hi2c, DevAddress, pData, Size, XferOptions);
			HAL_I2C_Mem_Read(&hi2c1, ADDR_IOXT, 0x12, I2C_MEMADD_SIZE_8BIT,
 8001540:	2364      	movs	r3, #100	; 0x64
 8001542:	9302      	str	r3, [sp, #8]
 8001544:	2301      	movs	r3, #1
 8001546:	9301      	str	r3, [sp, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	9300      	str	r3, [sp, #0]
 800154c:	2301      	movs	r3, #1
 800154e:	2212      	movs	r2, #18
 8001550:	2140      	movs	r1, #64	; 0x40
 8001552:	4821      	ldr	r0, [pc, #132]	; (80015d8 <AbsEncI2CRead+0xcc>)
 8001554:	f001 fc2e 	bl	8002db4 <HAL_I2C_Mem_Read>
						RawRA, 1, 100);
			flag_absenc = 2;
 8001558:	4b1e      	ldr	r3, [pc, #120]	; (80015d4 <AbsEncI2CRead+0xc8>)
 800155a:	2202      	movs	r2, #2
 800155c:	701a      	strb	r2, [r3, #0]
		break;
 800155e:	e035      	b.n	80015cc <AbsEncI2CRead+0xc0>

		case 2:
			HAL_I2C_Mem_Read(&hi2c1, ADDR_IOXT, 0x13, I2C_MEMADD_SIZE_8BIT,
 8001560:	2364      	movs	r3, #100	; 0x64
 8001562:	9302      	str	r3, [sp, #8]
 8001564:	2301      	movs	r3, #1
 8001566:	9301      	str	r3, [sp, #4]
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	2301      	movs	r3, #1
 800156e:	2213      	movs	r2, #19
 8001570:	2140      	movs	r1, #64	; 0x40
 8001572:	4819      	ldr	r0, [pc, #100]	; (80015d8 <AbsEncI2CRead+0xcc>)
 8001574:	f001 fc1e 	bl	8002db4 <HAL_I2C_Mem_Read>
								RawRB, 1, 100);
			flag_absenc = 3;
 8001578:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <AbsEncI2CRead+0xc8>)
 800157a:	2203      	movs	r2, #3
 800157c:	701a      	strb	r2, [r3, #0]
		break;
 800157e:	e025      	b.n	80015cc <AbsEncI2CRead+0xc0>

		case 3:
			GrayCBitx = (RawEnBitB << 8) | RawEnBitA;
 8001580:	4b16      	ldr	r3, [pc, #88]	; (80015dc <AbsEncI2CRead+0xd0>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	021b      	lsls	r3, r3, #8
 8001586:	b21a      	sxth	r2, r3
 8001588:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <AbsEncI2CRead+0xd4>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	b21b      	sxth	r3, r3
 800158e:	4313      	orrs	r3, r2
 8001590:	b21b      	sxth	r3, r3
 8001592:	b29a      	uxth	r2, r3
 8001594:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <AbsEncI2CRead+0xd8>)
 8001596:	801a      	strh	r2, [r3, #0]
			//GrayCBitXI = ~GrayCBitx - 0b1111110000000000; // invert and clear 6 high
			GrayCBitXI = ~GrayCBitx & 0b0000001111111111;
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <AbsEncI2CRead+0xd8>)
 800159a:	881b      	ldrh	r3, [r3, #0]
 800159c:	43db      	mvns	r3, r3
 800159e:	b29b      	uxth	r3, r3
 80015a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <AbsEncI2CRead+0xdc>)
 80015a8:	801a      	strh	r2, [r3, #0]
			//BinPosx = GraytoBinario(GrayCBitx, 10);
			BinPosXI = GraytoBinario(GrayCBitXI, 10);
 80015aa:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <AbsEncI2CRead+0xdc>)
 80015ac:	881b      	ldrh	r3, [r3, #0]
 80015ae:	210a      	movs	r1, #10
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff fee1 	bl	8001378 <GraytoBinario>
 80015b6:	4603      	mov	r3, r0
 80015b8:	461a      	mov	r2, r3
 80015ba:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <AbsEncI2CRead+0xe0>)
 80015bc:	801a      	strh	r2, [r3, #0]
			flag_absenc = 0;
 80015be:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <AbsEncI2CRead+0xc8>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
		break;
 80015c4:	e002      	b.n	80015cc <AbsEncI2CRead+0xc0>
		}
	}
 80015c6:	bf00      	nop
 80015c8:	e000      	b.n	80015cc <AbsEncI2CRead+0xc0>
			break;
 80015ca:	bf00      	nop
}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20000230 	.word	0x20000230
 80015d8:	20000044 	.word	0x20000044
 80015dc:	20000229 	.word	0x20000229
 80015e0:	20000228 	.word	0x20000228
 80015e4:	2000022a 	.word	0x2000022a
 80015e8:	2000022c 	.word	0x2000022c
 80015ec:	2000022e 	.word	0x2000022e

080015f0 <HAL_GPIO_EXTI_Callback>:
/////////////// Emer Interrupt /////////////////////////////////
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_10){
 80015fa:	88fb      	ldrh	r3, [r7, #6]
 80015fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001600:	d109      	bne.n	8001616 <HAL_GPIO_EXTI_Callback+0x26>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001602:	2120      	movs	r1, #32
 8001604:	4806      	ldr	r0, [pc, #24]	; (8001620 <HAL_GPIO_EXTI_Callback+0x30>)
 8001606:	f001 f964 	bl	80028d2 <HAL_GPIO_TogglePin>
		counter_e++;
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_GPIO_EXTI_Callback+0x34>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	3301      	adds	r3, #1
 8001610:	b2da      	uxtb	r2, r3
 8001612:	4b04      	ldr	r3, [pc, #16]	; (8001624 <HAL_GPIO_EXTI_Callback+0x34>)
 8001614:	701a      	strb	r2, [r3, #0]
		// Motor Driver Torque Lock here
	}
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40020000 	.word	0x40020000
 8001624:	20000220 	.word	0x20000220

08001628 <micros>:
///////////////////////////////////// micro timer////////////////////////////////////
uint64_t micros()
{return _micros + htim11.Instance->CNT;}
 8001628:	b4b0      	push	{r4, r5, r7}
 800162a:	af00      	add	r7, sp, #0
 800162c:	4b09      	ldr	r3, [pc, #36]	; (8001654 <micros+0x2c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001632:	2200      	movs	r2, #0
 8001634:	4618      	mov	r0, r3
 8001636:	4611      	mov	r1, r2
 8001638:	4b07      	ldr	r3, [pc, #28]	; (8001658 <micros+0x30>)
 800163a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163e:	1884      	adds	r4, r0, r2
 8001640:	eb41 0503 	adc.w	r5, r1, r3
 8001644:	4622      	mov	r2, r4
 8001646:	462b      	mov	r3, r5
 8001648:	4610      	mov	r0, r2
 800164a:	4619      	mov	r1, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	bcb0      	pop	{r4, r5, r7}
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	20000128 	.word	0x20000128
 8001658:	20000218 	.word	0x20000218

0800165c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001660:	b672      	cpsid	i
}
 8001662:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001664:	e7fe      	b.n	8001664 <Error_Handler+0x8>
	...

08001668 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	607b      	str	r3, [r7, #4]
 8001672:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <HAL_MspInit+0x4c>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001676:	4a0f      	ldr	r2, [pc, #60]	; (80016b4 <HAL_MspInit+0x4c>)
 8001678:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800167c:	6453      	str	r3, [r2, #68]	; 0x44
 800167e:	4b0d      	ldr	r3, [pc, #52]	; (80016b4 <HAL_MspInit+0x4c>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	603b      	str	r3, [r7, #0]
 800168e:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <HAL_MspInit+0x4c>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	4a08      	ldr	r2, [pc, #32]	; (80016b4 <HAL_MspInit+0x4c>)
 8001694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001698:	6413      	str	r3, [r2, #64]	; 0x40
 800169a:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <HAL_MspInit+0x4c>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a2:	603b      	str	r3, [r7, #0]
 80016a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016a6:	2007      	movs	r0, #7
 80016a8:	f000 fb7c 	bl	8001da4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40023800 	.word	0x40023800

080016b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08a      	sub	sp, #40	; 0x28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a21      	ldr	r2, [pc, #132]	; (800175c <HAL_I2C_MspInit+0xa4>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d13c      	bne.n	8001754 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
 80016de:	4b20      	ldr	r3, [pc, #128]	; (8001760 <HAL_I2C_MspInit+0xa8>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a1f      	ldr	r2, [pc, #124]	; (8001760 <HAL_I2C_MspInit+0xa8>)
 80016e4:	f043 0302 	orr.w	r3, r3, #2
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b1d      	ldr	r3, [pc, #116]	; (8001760 <HAL_I2C_MspInit+0xa8>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016fc:	2312      	movs	r3, #18
 80016fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001704:	2303      	movs	r3, #3
 8001706:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001708:	2304      	movs	r3, #4
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	4619      	mov	r1, r3
 8001712:	4814      	ldr	r0, [pc, #80]	; (8001764 <HAL_I2C_MspInit+0xac>)
 8001714:	f000 ff28 	bl	8002568 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001718:	2300      	movs	r3, #0
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	4b10      	ldr	r3, [pc, #64]	; (8001760 <HAL_I2C_MspInit+0xa8>)
 800171e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001720:	4a0f      	ldr	r2, [pc, #60]	; (8001760 <HAL_I2C_MspInit+0xa8>)
 8001722:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001726:	6413      	str	r3, [r2, #64]	; 0x40
 8001728:	4b0d      	ldr	r3, [pc, #52]	; (8001760 <HAL_I2C_MspInit+0xa8>)
 800172a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001734:	2200      	movs	r2, #0
 8001736:	2100      	movs	r1, #0
 8001738:	201f      	movs	r0, #31
 800173a:	f000 fb3e 	bl	8001dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800173e:	201f      	movs	r0, #31
 8001740:	f000 fb57 	bl	8001df2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001744:	2200      	movs	r2, #0
 8001746:	2100      	movs	r1, #0
 8001748:	2020      	movs	r0, #32
 800174a:	f000 fb36 	bl	8001dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800174e:	2020      	movs	r0, #32
 8001750:	f000 fb4f 	bl	8001df2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001754:	bf00      	nop
 8001756:	3728      	adds	r7, #40	; 0x28
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40005400 	.word	0x40005400
 8001760:	40023800 	.word	0x40023800
 8001764:	40020400 	.word	0x40020400

08001768 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b08c      	sub	sp, #48	; 0x30
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001770:	f107 031c 	add.w	r3, r7, #28
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001788:	d15d      	bne.n	8001846 <HAL_TIM_Base_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	61bb      	str	r3, [r7, #24]
 800178e:	4b43      	ldr	r3, [pc, #268]	; (800189c <HAL_TIM_Base_MspInit+0x134>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	4a42      	ldr	r2, [pc, #264]	; (800189c <HAL_TIM_Base_MspInit+0x134>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	6413      	str	r3, [r2, #64]	; 0x40
 800179a:	4b40      	ldr	r3, [pc, #256]	; (800189c <HAL_TIM_Base_MspInit+0x134>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	61bb      	str	r3, [r7, #24]
 80017a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]
 80017aa:	4b3c      	ldr	r3, [pc, #240]	; (800189c <HAL_TIM_Base_MspInit+0x134>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	4a3b      	ldr	r2, [pc, #236]	; (800189c <HAL_TIM_Base_MspInit+0x134>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	6313      	str	r3, [r2, #48]	; 0x30
 80017b6:	4b39      	ldr	r3, [pc, #228]	; (800189c <HAL_TIM_Base_MspInit+0x134>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017c2:	2301      	movs	r3, #1
 80017c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c6:	2302      	movs	r3, #2
 80017c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ce:	2300      	movs	r3, #0
 80017d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017d2:	2301      	movs	r3, #1
 80017d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d6:	f107 031c 	add.w	r3, r7, #28
 80017da:	4619      	mov	r1, r3
 80017dc:	4830      	ldr	r0, [pc, #192]	; (80018a0 <HAL_TIM_Base_MspInit+0x138>)
 80017de:	f000 fec3 	bl	8002568 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 80017e2:	4b30      	ldr	r3, [pc, #192]	; (80018a4 <HAL_TIM_Base_MspInit+0x13c>)
 80017e4:	4a30      	ldr	r2, [pc, #192]	; (80018a8 <HAL_TIM_Base_MspInit+0x140>)
 80017e6:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 80017e8:	4b2e      	ldr	r3, [pc, #184]	; (80018a4 <HAL_TIM_Base_MspInit+0x13c>)
 80017ea:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80017ee:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017f0:	4b2c      	ldr	r3, [pc, #176]	; (80018a4 <HAL_TIM_Base_MspInit+0x13c>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017f6:	4b2b      	ldr	r3, [pc, #172]	; (80018a4 <HAL_TIM_Base_MspInit+0x13c>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80017fc:	4b29      	ldr	r3, [pc, #164]	; (80018a4 <HAL_TIM_Base_MspInit+0x13c>)
 80017fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001802:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001804:	4b27      	ldr	r3, [pc, #156]	; (80018a4 <HAL_TIM_Base_MspInit+0x13c>)
 8001806:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800180a:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800180c:	4b25      	ldr	r3, [pc, #148]	; (80018a4 <HAL_TIM_Base_MspInit+0x13c>)
 800180e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001812:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8001814:	4b23      	ldr	r3, [pc, #140]	; (80018a4 <HAL_TIM_Base_MspInit+0x13c>)
 8001816:	f44f 7280 	mov.w	r2, #256	; 0x100
 800181a:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800181c:	4b21      	ldr	r3, [pc, #132]	; (80018a4 <HAL_TIM_Base_MspInit+0x13c>)
 800181e:	2200      	movs	r2, #0
 8001820:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001822:	4b20      	ldr	r3, [pc, #128]	; (80018a4 <HAL_TIM_Base_MspInit+0x13c>)
 8001824:	2200      	movs	r2, #0
 8001826:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001828:	481e      	ldr	r0, [pc, #120]	; (80018a4 <HAL_TIM_Base_MspInit+0x13c>)
 800182a:	f000 fafd 	bl	8001e28 <HAL_DMA_Init>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <HAL_TIM_Base_MspInit+0xd0>
    {
      Error_Handler();
 8001834:	f7ff ff12 	bl	800165c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a1a      	ldr	r2, [pc, #104]	; (80018a4 <HAL_TIM_Base_MspInit+0x13c>)
 800183c:	625a      	str	r2, [r3, #36]	; 0x24
 800183e:	4a19      	ldr	r2, [pc, #100]	; (80018a4 <HAL_TIM_Base_MspInit+0x13c>)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001844:	e026      	b.n	8001894 <HAL_TIM_Base_MspInit+0x12c>
  else if(htim_base->Instance==TIM4)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a18      	ldr	r2, [pc, #96]	; (80018ac <HAL_TIM_Base_MspInit+0x144>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d10e      	bne.n	800186e <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001850:	2300      	movs	r3, #0
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	4b11      	ldr	r3, [pc, #68]	; (800189c <HAL_TIM_Base_MspInit+0x134>)
 8001856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001858:	4a10      	ldr	r2, [pc, #64]	; (800189c <HAL_TIM_Base_MspInit+0x134>)
 800185a:	f043 0304 	orr.w	r3, r3, #4
 800185e:	6413      	str	r3, [r2, #64]	; 0x40
 8001860:	4b0e      	ldr	r3, [pc, #56]	; (800189c <HAL_TIM_Base_MspInit+0x134>)
 8001862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001864:	f003 0304 	and.w	r3, r3, #4
 8001868:	613b      	str	r3, [r7, #16]
 800186a:	693b      	ldr	r3, [r7, #16]
}
 800186c:	e012      	b.n	8001894 <HAL_TIM_Base_MspInit+0x12c>
  else if(htim_base->Instance==TIM11)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a0f      	ldr	r2, [pc, #60]	; (80018b0 <HAL_TIM_Base_MspInit+0x148>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d10d      	bne.n	8001894 <HAL_TIM_Base_MspInit+0x12c>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001878:	2300      	movs	r3, #0
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	4b07      	ldr	r3, [pc, #28]	; (800189c <HAL_TIM_Base_MspInit+0x134>)
 800187e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001880:	4a06      	ldr	r2, [pc, #24]	; (800189c <HAL_TIM_Base_MspInit+0x134>)
 8001882:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001886:	6453      	str	r3, [r2, #68]	; 0x44
 8001888:	4b04      	ldr	r3, [pc, #16]	; (800189c <HAL_TIM_Base_MspInit+0x134>)
 800188a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	68fb      	ldr	r3, [r7, #12]
}
 8001894:	bf00      	nop
 8001896:	3730      	adds	r7, #48	; 0x30
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40023800 	.word	0x40023800
 80018a0:	40020000 	.word	0x40020000
 80018a4:	20000170 	.word	0x20000170
 80018a8:	40026088 	.word	0x40026088
 80018ac:	40000800 	.word	0x40000800
 80018b0:	40014800 	.word	0x40014800

080018b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b088      	sub	sp, #32
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018bc:	f107 030c 	add.w	r3, r7, #12
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a12      	ldr	r2, [pc, #72]	; (800191c <HAL_TIM_MspPostInit+0x68>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d11d      	bne.n	8001912 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	4b11      	ldr	r3, [pc, #68]	; (8001920 <HAL_TIM_MspPostInit+0x6c>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a10      	ldr	r2, [pc, #64]	; (8001920 <HAL_TIM_MspPostInit+0x6c>)
 80018e0:	f043 0302 	orr.w	r3, r3, #2
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <HAL_TIM_MspPostInit+0x6c>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = TIM4_CH1_PWMMOT_Pin;
 80018f2:	2340      	movs	r3, #64	; 0x40
 80018f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f6:	2302      	movs	r3, #2
 80018f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fe:	2300      	movs	r3, #0
 8001900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001902:	2302      	movs	r3, #2
 8001904:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM4_CH1_PWMMOT_GPIO_Port, &GPIO_InitStruct);
 8001906:	f107 030c 	add.w	r3, r7, #12
 800190a:	4619      	mov	r1, r3
 800190c:	4805      	ldr	r0, [pc, #20]	; (8001924 <HAL_TIM_MspPostInit+0x70>)
 800190e:	f000 fe2b 	bl	8002568 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001912:	bf00      	nop
 8001914:	3720      	adds	r7, #32
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40000800 	.word	0x40000800
 8001920:	40023800 	.word	0x40023800
 8001924:	40020400 	.word	0x40020400

08001928 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08a      	sub	sp, #40	; 0x28
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a19      	ldr	r2, [pc, #100]	; (80019ac <HAL_UART_MspInit+0x84>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d12b      	bne.n	80019a2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <HAL_UART_MspInit+0x88>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	4a17      	ldr	r2, [pc, #92]	; (80019b0 <HAL_UART_MspInit+0x88>)
 8001954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001958:	6413      	str	r3, [r2, #64]	; 0x40
 800195a:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <HAL_UART_MspInit+0x88>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <HAL_UART_MspInit+0x88>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	4a10      	ldr	r2, [pc, #64]	; (80019b0 <HAL_UART_MspInit+0x88>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	6313      	str	r3, [r2, #48]	; 0x30
 8001976:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <HAL_UART_MspInit+0x88>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001982:	230c      	movs	r3, #12
 8001984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001986:	2302      	movs	r3, #2
 8001988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198e:	2303      	movs	r3, #3
 8001990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001992:	2307      	movs	r3, #7
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001996:	f107 0314 	add.w	r3, r7, #20
 800199a:	4619      	mov	r1, r3
 800199c:	4805      	ldr	r0, [pc, #20]	; (80019b4 <HAL_UART_MspInit+0x8c>)
 800199e:	f000 fde3 	bl	8002568 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019a2:	bf00      	nop
 80019a4:	3728      	adds	r7, #40	; 0x28
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40004400 	.word	0x40004400
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40020000 	.word	0x40020000

080019b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019bc:	e7fe      	b.n	80019bc <NMI_Handler+0x4>

080019be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019c2:	e7fe      	b.n	80019c2 <HardFault_Handler+0x4>

080019c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c8:	e7fe      	b.n	80019c8 <MemManage_Handler+0x4>

080019ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ca:	b480      	push	{r7}
 80019cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ce:	e7fe      	b.n	80019ce <BusFault_Handler+0x4>

080019d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019d4:	e7fe      	b.n	80019d4 <UsageFault_Handler+0x4>

080019d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a04:	f000 f8ba 	bl	8001b7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001a10:	4802      	ldr	r0, [pc, #8]	; (8001a1c <DMA1_Stream5_IRQHandler+0x10>)
 8001a12:	f000 fb31 	bl	8002078 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000170 	.word	0x20000170

08001a20 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001a24:	4802      	ldr	r0, [pc, #8]	; (8001a30 <I2C1_EV_IRQHandler+0x10>)
 8001a26:	f001 fbeb 	bl	8003200 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000044 	.word	0x20000044

08001a34 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001a38:	4802      	ldr	r0, [pc, #8]	; (8001a44 <I2C1_ER_IRQHandler+0x10>)
 8001a3a:	f001 fd52 	bl	80034e2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000044 	.word	0x20000044

08001a48 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI10_Emer_Pin);
 8001a4c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001a50:	f000 ff5a 	bl	8002908 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001a54:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a58:	f000 ff56 	bl	8002908 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <SystemInit+0x20>)
 8001a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a6a:	4a05      	ldr	r2, [pc, #20]	; (8001a80 <SystemInit+0x20>)
 8001a6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001abc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a88:	480d      	ldr	r0, [pc, #52]	; (8001ac0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a8a:	490e      	ldr	r1, [pc, #56]	; (8001ac4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a8c:	4a0e      	ldr	r2, [pc, #56]	; (8001ac8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a90:	e002      	b.n	8001a98 <LoopCopyDataInit>

08001a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a96:	3304      	adds	r3, #4

08001a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a9c:	d3f9      	bcc.n	8001a92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a9e:	4a0b      	ldr	r2, [pc, #44]	; (8001acc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001aa0:	4c0b      	ldr	r4, [pc, #44]	; (8001ad0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa4:	e001      	b.n	8001aaa <LoopFillZerobss>

08001aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aa8:	3204      	adds	r2, #4

08001aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aac:	d3fb      	bcc.n	8001aa6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001aae:	f7ff ffd7 	bl	8001a60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ab2:	f005 febd 	bl	8007830 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ab6:	f7ff f92f 	bl	8000d18 <main>
  bx  lr    
 8001aba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001abc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac4:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001ac8:	080078d0 	.word	0x080078d0
  ldr r2, =_sbss
 8001acc:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001ad0:	20000300 	.word	0x20000300

08001ad4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ad4:	e7fe      	b.n	8001ad4 <ADC_IRQHandler>
	...

08001ad8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001adc:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <HAL_Init+0x40>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a0d      	ldr	r2, [pc, #52]	; (8001b18 <HAL_Init+0x40>)
 8001ae2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ae6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ae8:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <HAL_Init+0x40>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a0a      	ldr	r2, [pc, #40]	; (8001b18 <HAL_Init+0x40>)
 8001aee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001af2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001af4:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <HAL_Init+0x40>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a07      	ldr	r2, [pc, #28]	; (8001b18 <HAL_Init+0x40>)
 8001afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001afe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b00:	2003      	movs	r0, #3
 8001b02:	f000 f94f 	bl	8001da4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b06:	2000      	movs	r0, #0
 8001b08:	f000 f808 	bl	8001b1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b0c:	f7ff fdac 	bl	8001668 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40023c00 	.word	0x40023c00

08001b1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b24:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <HAL_InitTick+0x54>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <HAL_InitTick+0x58>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 f967 	bl	8001e0e <HAL_SYSTICK_Config>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e00e      	b.n	8001b68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b0f      	cmp	r3, #15
 8001b4e:	d80a      	bhi.n	8001b66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b50:	2200      	movs	r2, #0
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	f04f 30ff 	mov.w	r0, #4294967295
 8001b58:	f000 f92f 	bl	8001dba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b5c:	4a06      	ldr	r2, [pc, #24]	; (8001b78 <HAL_InitTick+0x5c>)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
 8001b64:	e000      	b.n	8001b68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	2000001c 	.word	0x2000001c
 8001b74:	20000024 	.word	0x20000024
 8001b78:	20000020 	.word	0x20000020

08001b7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <HAL_IncTick+0x20>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	461a      	mov	r2, r3
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <HAL_IncTick+0x24>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	4a04      	ldr	r2, [pc, #16]	; (8001ba0 <HAL_IncTick+0x24>)
 8001b8e:	6013      	str	r3, [r2, #0]
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	20000024 	.word	0x20000024
 8001ba0:	200002fc 	.word	0x200002fc

08001ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ba8:	4b03      	ldr	r3, [pc, #12]	; (8001bb8 <HAL_GetTick+0x14>)
 8001baa:	681b      	ldr	r3, [r3, #0]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	200002fc 	.word	0x200002fc

08001bbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bc4:	f7ff ffee 	bl	8001ba4 <HAL_GetTick>
 8001bc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd4:	d005      	beq.n	8001be2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bd6:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <HAL_Delay+0x44>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4413      	add	r3, r2
 8001be0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001be2:	bf00      	nop
 8001be4:	f7ff ffde 	bl	8001ba4 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d8f7      	bhi.n	8001be4 <HAL_Delay+0x28>
  {
  }
}
 8001bf4:	bf00      	nop
 8001bf6:	bf00      	nop
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000024 	.word	0x20000024

08001c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c14:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <__NVIC_SetPriorityGrouping+0x44>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c1a:	68ba      	ldr	r2, [r7, #8]
 8001c1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c20:	4013      	ands	r3, r2
 8001c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c36:	4a04      	ldr	r2, [pc, #16]	; (8001c48 <__NVIC_SetPriorityGrouping+0x44>)
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	60d3      	str	r3, [r2, #12]
}
 8001c3c:	bf00      	nop
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c50:	4b04      	ldr	r3, [pc, #16]	; (8001c64 <__NVIC_GetPriorityGrouping+0x18>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	0a1b      	lsrs	r3, r3, #8
 8001c56:	f003 0307 	and.w	r3, r3, #7
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	db0b      	blt.n	8001c92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	f003 021f 	and.w	r2, r3, #31
 8001c80:	4907      	ldr	r1, [pc, #28]	; (8001ca0 <__NVIC_EnableIRQ+0x38>)
 8001c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c86:	095b      	lsrs	r3, r3, #5
 8001c88:	2001      	movs	r0, #1
 8001c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	e000e100 	.word	0xe000e100

08001ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	6039      	str	r1, [r7, #0]
 8001cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	db0a      	blt.n	8001cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	490c      	ldr	r1, [pc, #48]	; (8001cf0 <__NVIC_SetPriority+0x4c>)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	0112      	lsls	r2, r2, #4
 8001cc4:	b2d2      	uxtb	r2, r2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ccc:	e00a      	b.n	8001ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	4908      	ldr	r1, [pc, #32]	; (8001cf4 <__NVIC_SetPriority+0x50>)
 8001cd4:	79fb      	ldrb	r3, [r7, #7]
 8001cd6:	f003 030f 	and.w	r3, r3, #15
 8001cda:	3b04      	subs	r3, #4
 8001cdc:	0112      	lsls	r2, r2, #4
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	761a      	strb	r2, [r3, #24]
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	e000e100 	.word	0xe000e100
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b089      	sub	sp, #36	; 0x24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	f1c3 0307 	rsb	r3, r3, #7
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	bf28      	it	cs
 8001d16:	2304      	movcs	r3, #4
 8001d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	2b06      	cmp	r3, #6
 8001d20:	d902      	bls.n	8001d28 <NVIC_EncodePriority+0x30>
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	3b03      	subs	r3, #3
 8001d26:	e000      	b.n	8001d2a <NVIC_EncodePriority+0x32>
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43da      	mvns	r2, r3
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	401a      	ands	r2, r3
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d40:	f04f 31ff 	mov.w	r1, #4294967295
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4a:	43d9      	mvns	r1, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d50:	4313      	orrs	r3, r2
         );
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3724      	adds	r7, #36	; 0x24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
	...

08001d60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d70:	d301      	bcc.n	8001d76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d72:	2301      	movs	r3, #1
 8001d74:	e00f      	b.n	8001d96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d76:	4a0a      	ldr	r2, [pc, #40]	; (8001da0 <SysTick_Config+0x40>)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d7e:	210f      	movs	r1, #15
 8001d80:	f04f 30ff 	mov.w	r0, #4294967295
 8001d84:	f7ff ff8e 	bl	8001ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d88:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <SysTick_Config+0x40>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d8e:	4b04      	ldr	r3, [pc, #16]	; (8001da0 <SysTick_Config+0x40>)
 8001d90:	2207      	movs	r2, #7
 8001d92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	e000e010 	.word	0xe000e010

08001da4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff ff29 	bl	8001c04 <__NVIC_SetPriorityGrouping>
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b086      	sub	sp, #24
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	607a      	str	r2, [r7, #4]
 8001dc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dcc:	f7ff ff3e 	bl	8001c4c <__NVIC_GetPriorityGrouping>
 8001dd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	68b9      	ldr	r1, [r7, #8]
 8001dd6:	6978      	ldr	r0, [r7, #20]
 8001dd8:	f7ff ff8e 	bl	8001cf8 <NVIC_EncodePriority>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001de2:	4611      	mov	r1, r2
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff ff5d 	bl	8001ca4 <__NVIC_SetPriority>
}
 8001dea:	bf00      	nop
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	4603      	mov	r3, r0
 8001dfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff ff31 	bl	8001c68 <__NVIC_EnableIRQ>
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b082      	sub	sp, #8
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7ff ffa2 	bl	8001d60 <SysTick_Config>
 8001e1c:	4603      	mov	r3, r0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
	...

08001e28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e34:	f7ff feb6 	bl	8001ba4 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d101      	bne.n	8001e44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e099      	b.n	8001f78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2202      	movs	r2, #2
 8001e48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 0201 	bic.w	r2, r2, #1
 8001e62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e64:	e00f      	b.n	8001e86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e66:	f7ff fe9d 	bl	8001ba4 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b05      	cmp	r3, #5
 8001e72:	d908      	bls.n	8001e86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2220      	movs	r2, #32
 8001e78:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2203      	movs	r2, #3
 8001e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e078      	b.n	8001f78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1e8      	bne.n	8001e66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e9c:	697a      	ldr	r2, [r7, #20]
 8001e9e:	4b38      	ldr	r3, [pc, #224]	; (8001f80 <HAL_DMA_Init+0x158>)
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ebe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001edc:	2b04      	cmp	r3, #4
 8001ede:	d107      	bne.n	8001ef0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	f023 0307 	bic.w	r3, r3, #7
 8001f06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	697a      	ldr	r2, [r7, #20]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f16:	2b04      	cmp	r3, #4
 8001f18:	d117      	bne.n	8001f4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d00e      	beq.n	8001f4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 fa9f 	bl	8002470 <DMA_CheckFifoParam>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d008      	beq.n	8001f4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2240      	movs	r2, #64	; 0x40
 8001f3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f46:	2301      	movs	r3, #1
 8001f48:	e016      	b.n	8001f78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 fa56 	bl	8002404 <DMA_CalcBaseAndBitshift>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f60:	223f      	movs	r2, #63	; 0x3f
 8001f62:	409a      	lsls	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	f010803f 	.word	0xf010803f

08001f84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
 8001f90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f92:	2300      	movs	r3, #0
 8001f94:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d101      	bne.n	8001faa <HAL_DMA_Start_IT+0x26>
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	e040      	b.n	800202c <HAL_DMA_Start_IT+0xa8>
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d12f      	bne.n	800201e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2202      	movs	r2, #2
 8001fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	68b9      	ldr	r1, [r7, #8]
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f000 f9e8 	bl	80023a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fdc:	223f      	movs	r2, #63	; 0x3f
 8001fde:	409a      	lsls	r2, r3
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f042 0216 	orr.w	r2, r2, #22
 8001ff2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d007      	beq.n	800200c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f042 0208 	orr.w	r2, r2, #8
 800200a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0201 	orr.w	r2, r2, #1
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	e005      	b.n	800202a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002026:	2302      	movs	r3, #2
 8002028:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800202a:	7dfb      	ldrb	r3, [r7, #23]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d004      	beq.n	8002052 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2280      	movs	r2, #128	; 0x80
 800204c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e00c      	b.n	800206c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2205      	movs	r2, #5
 8002056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 0201 	bic.w	r2, r2, #1
 8002068:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002080:	2300      	movs	r3, #0
 8002082:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002084:	4b8e      	ldr	r3, [pc, #568]	; (80022c0 <HAL_DMA_IRQHandler+0x248>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a8e      	ldr	r2, [pc, #568]	; (80022c4 <HAL_DMA_IRQHandler+0x24c>)
 800208a:	fba2 2303 	umull	r2, r3, r2, r3
 800208e:	0a9b      	lsrs	r3, r3, #10
 8002090:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002096:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a2:	2208      	movs	r2, #8
 80020a4:	409a      	lsls	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	4013      	ands	r3, r2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d01a      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d013      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 0204 	bic.w	r2, r2, #4
 80020ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d0:	2208      	movs	r2, #8
 80020d2:	409a      	lsls	r2, r3
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020dc:	f043 0201 	orr.w	r2, r3, #1
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e8:	2201      	movs	r2, #1
 80020ea:	409a      	lsls	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4013      	ands	r3, r2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d012      	beq.n	800211a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00b      	beq.n	800211a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002106:	2201      	movs	r2, #1
 8002108:	409a      	lsls	r2, r3
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002112:	f043 0202 	orr.w	r2, r3, #2
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800211e:	2204      	movs	r2, #4
 8002120:	409a      	lsls	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	4013      	ands	r3, r2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d012      	beq.n	8002150 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00b      	beq.n	8002150 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800213c:	2204      	movs	r2, #4
 800213e:	409a      	lsls	r2, r3
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002148:	f043 0204 	orr.w	r2, r3, #4
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002154:	2210      	movs	r2, #16
 8002156:	409a      	lsls	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4013      	ands	r3, r2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d043      	beq.n	80021e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	2b00      	cmp	r3, #0
 800216c:	d03c      	beq.n	80021e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002172:	2210      	movs	r2, #16
 8002174:	409a      	lsls	r2, r3
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d018      	beq.n	80021ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d108      	bne.n	80021a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	2b00      	cmp	r3, #0
 800219c:	d024      	beq.n	80021e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	4798      	blx	r3
 80021a6:	e01f      	b.n	80021e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d01b      	beq.n	80021e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	4798      	blx	r3
 80021b8:	e016      	b.n	80021e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d107      	bne.n	80021d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 0208 	bic.w	r2, r2, #8
 80021d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d003      	beq.n	80021e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ec:	2220      	movs	r2, #32
 80021ee:	409a      	lsls	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4013      	ands	r3, r2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 808f 	beq.w	8002318 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0310 	and.w	r3, r3, #16
 8002204:	2b00      	cmp	r3, #0
 8002206:	f000 8087 	beq.w	8002318 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220e:	2220      	movs	r2, #32
 8002210:	409a      	lsls	r2, r3
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b05      	cmp	r3, #5
 8002220:	d136      	bne.n	8002290 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 0216 	bic.w	r2, r2, #22
 8002230:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	695a      	ldr	r2, [r3, #20]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002240:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	2b00      	cmp	r3, #0
 8002248:	d103      	bne.n	8002252 <HAL_DMA_IRQHandler+0x1da>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800224e:	2b00      	cmp	r3, #0
 8002250:	d007      	beq.n	8002262 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 0208 	bic.w	r2, r2, #8
 8002260:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002266:	223f      	movs	r2, #63	; 0x3f
 8002268:	409a      	lsls	r2, r3
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002282:	2b00      	cmp	r3, #0
 8002284:	d07e      	beq.n	8002384 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	4798      	blx	r3
        }
        return;
 800228e:	e079      	b.n	8002384 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d01d      	beq.n	80022da <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d10d      	bne.n	80022c8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d031      	beq.n	8002318 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	4798      	blx	r3
 80022bc:	e02c      	b.n	8002318 <HAL_DMA_IRQHandler+0x2a0>
 80022be:	bf00      	nop
 80022c0:	2000001c 	.word	0x2000001c
 80022c4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d023      	beq.n	8002318 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	4798      	blx	r3
 80022d8:	e01e      	b.n	8002318 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10f      	bne.n	8002308 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 0210 	bic.w	r2, r2, #16
 80022f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800230c:	2b00      	cmp	r3, #0
 800230e:	d003      	beq.n	8002318 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231c:	2b00      	cmp	r3, #0
 800231e:	d032      	beq.n	8002386 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002324:	f003 0301 	and.w	r3, r3, #1
 8002328:	2b00      	cmp	r3, #0
 800232a:	d022      	beq.n	8002372 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2205      	movs	r2, #5
 8002330:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 0201 	bic.w	r2, r2, #1
 8002342:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	3301      	adds	r3, #1
 8002348:	60bb      	str	r3, [r7, #8]
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	429a      	cmp	r2, r3
 800234e:	d307      	bcc.n	8002360 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f2      	bne.n	8002344 <HAL_DMA_IRQHandler+0x2cc>
 800235e:	e000      	b.n	8002362 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002360:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002376:	2b00      	cmp	r3, #0
 8002378:	d005      	beq.n	8002386 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	4798      	blx	r3
 8002382:	e000      	b.n	8002386 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002384:	bf00      	nop
    }
  }
}
 8002386:	3718      	adds	r7, #24
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800239a:	b2db      	uxtb	r3, r3
}
 800239c:	4618      	mov	r0, r3
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
 80023b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	2b40      	cmp	r3, #64	; 0x40
 80023d4:	d108      	bne.n	80023e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80023e6:	e007      	b.n	80023f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68ba      	ldr	r2, [r7, #8]
 80023ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	60da      	str	r2, [r3, #12]
}
 80023f8:	bf00      	nop
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	b2db      	uxtb	r3, r3
 8002412:	3b10      	subs	r3, #16
 8002414:	4a14      	ldr	r2, [pc, #80]	; (8002468 <DMA_CalcBaseAndBitshift+0x64>)
 8002416:	fba2 2303 	umull	r2, r3, r2, r3
 800241a:	091b      	lsrs	r3, r3, #4
 800241c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800241e:	4a13      	ldr	r2, [pc, #76]	; (800246c <DMA_CalcBaseAndBitshift+0x68>)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4413      	add	r3, r2
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	461a      	mov	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2b03      	cmp	r3, #3
 8002430:	d909      	bls.n	8002446 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800243a:	f023 0303 	bic.w	r3, r3, #3
 800243e:	1d1a      	adds	r2, r3, #4
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	659a      	str	r2, [r3, #88]	; 0x58
 8002444:	e007      	b.n	8002456 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800244e:	f023 0303 	bic.w	r3, r3, #3
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800245a:	4618      	mov	r0, r3
 800245c:	3714      	adds	r7, #20
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	aaaaaaab 	.word	0xaaaaaaab
 800246c:	080078b8 	.word	0x080078b8

08002470 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002478:	2300      	movs	r3, #0
 800247a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002480:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d11f      	bne.n	80024ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	2b03      	cmp	r3, #3
 800248e:	d856      	bhi.n	800253e <DMA_CheckFifoParam+0xce>
 8002490:	a201      	add	r2, pc, #4	; (adr r2, 8002498 <DMA_CheckFifoParam+0x28>)
 8002492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002496:	bf00      	nop
 8002498:	080024a9 	.word	0x080024a9
 800249c:	080024bb 	.word	0x080024bb
 80024a0:	080024a9 	.word	0x080024a9
 80024a4:	0800253f 	.word	0x0800253f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d046      	beq.n	8002542 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024b8:	e043      	b.n	8002542 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024c2:	d140      	bne.n	8002546 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024c8:	e03d      	b.n	8002546 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024d2:	d121      	bne.n	8002518 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	2b03      	cmp	r3, #3
 80024d8:	d837      	bhi.n	800254a <DMA_CheckFifoParam+0xda>
 80024da:	a201      	add	r2, pc, #4	; (adr r2, 80024e0 <DMA_CheckFifoParam+0x70>)
 80024dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e0:	080024f1 	.word	0x080024f1
 80024e4:	080024f7 	.word	0x080024f7
 80024e8:	080024f1 	.word	0x080024f1
 80024ec:	08002509 	.word	0x08002509
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	73fb      	strb	r3, [r7, #15]
      break;
 80024f4:	e030      	b.n	8002558 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d025      	beq.n	800254e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002506:	e022      	b.n	800254e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002510:	d11f      	bne.n	8002552 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002516:	e01c      	b.n	8002552 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	2b02      	cmp	r3, #2
 800251c:	d903      	bls.n	8002526 <DMA_CheckFifoParam+0xb6>
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	2b03      	cmp	r3, #3
 8002522:	d003      	beq.n	800252c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002524:	e018      	b.n	8002558 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	73fb      	strb	r3, [r7, #15]
      break;
 800252a:	e015      	b.n	8002558 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002530:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00e      	beq.n	8002556 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	73fb      	strb	r3, [r7, #15]
      break;
 800253c:	e00b      	b.n	8002556 <DMA_CheckFifoParam+0xe6>
      break;
 800253e:	bf00      	nop
 8002540:	e00a      	b.n	8002558 <DMA_CheckFifoParam+0xe8>
      break;
 8002542:	bf00      	nop
 8002544:	e008      	b.n	8002558 <DMA_CheckFifoParam+0xe8>
      break;
 8002546:	bf00      	nop
 8002548:	e006      	b.n	8002558 <DMA_CheckFifoParam+0xe8>
      break;
 800254a:	bf00      	nop
 800254c:	e004      	b.n	8002558 <DMA_CheckFifoParam+0xe8>
      break;
 800254e:	bf00      	nop
 8002550:	e002      	b.n	8002558 <DMA_CheckFifoParam+0xe8>
      break;   
 8002552:	bf00      	nop
 8002554:	e000      	b.n	8002558 <DMA_CheckFifoParam+0xe8>
      break;
 8002556:	bf00      	nop
    }
  } 
  
  return status; 
 8002558:	7bfb      	ldrb	r3, [r7, #15]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop

08002568 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002568:	b480      	push	{r7}
 800256a:	b089      	sub	sp, #36	; 0x24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002572:	2300      	movs	r3, #0
 8002574:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002576:	2300      	movs	r3, #0
 8002578:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800257a:	2300      	movs	r3, #0
 800257c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800257e:	2300      	movs	r3, #0
 8002580:	61fb      	str	r3, [r7, #28]
 8002582:	e159      	b.n	8002838 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002584:	2201      	movs	r2, #1
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	4013      	ands	r3, r2
 8002596:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	429a      	cmp	r2, r3
 800259e:	f040 8148 	bne.w	8002832 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f003 0303 	and.w	r3, r3, #3
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d005      	beq.n	80025ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d130      	bne.n	800261c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	2203      	movs	r2, #3
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	43db      	mvns	r3, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4013      	ands	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	68da      	ldr	r2, [r3, #12]
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025f0:	2201      	movs	r2, #1
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	43db      	mvns	r3, r3
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	4013      	ands	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	091b      	lsrs	r3, r3, #4
 8002606:	f003 0201 	and.w	r2, r3, #1
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4313      	orrs	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f003 0303 	and.w	r3, r3, #3
 8002624:	2b03      	cmp	r3, #3
 8002626:	d017      	beq.n	8002658 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	2203      	movs	r2, #3
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	43db      	mvns	r3, r3
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4013      	ands	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4313      	orrs	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f003 0303 	and.w	r3, r3, #3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d123      	bne.n	80026ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	08da      	lsrs	r2, r3, #3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3208      	adds	r2, #8
 800266c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002670:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	220f      	movs	r2, #15
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	43db      	mvns	r3, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4013      	ands	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	691a      	ldr	r2, [r3, #16]
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	f003 0307 	and.w	r3, r3, #7
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4313      	orrs	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	08da      	lsrs	r2, r3, #3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	3208      	adds	r2, #8
 80026a6:	69b9      	ldr	r1, [r7, #24]
 80026a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	2203      	movs	r2, #3
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	43db      	mvns	r3, r3
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4013      	ands	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f003 0203 	and.w	r2, r3, #3
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f000 80a2 	beq.w	8002832 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ee:	2300      	movs	r3, #0
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	4b57      	ldr	r3, [pc, #348]	; (8002850 <HAL_GPIO_Init+0x2e8>)
 80026f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f6:	4a56      	ldr	r2, [pc, #344]	; (8002850 <HAL_GPIO_Init+0x2e8>)
 80026f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026fc:	6453      	str	r3, [r2, #68]	; 0x44
 80026fe:	4b54      	ldr	r3, [pc, #336]	; (8002850 <HAL_GPIO_Init+0x2e8>)
 8002700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800270a:	4a52      	ldr	r2, [pc, #328]	; (8002854 <HAL_GPIO_Init+0x2ec>)
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	089b      	lsrs	r3, r3, #2
 8002710:	3302      	adds	r3, #2
 8002712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002716:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	f003 0303 	and.w	r3, r3, #3
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	220f      	movs	r2, #15
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	43db      	mvns	r3, r3
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	4013      	ands	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a49      	ldr	r2, [pc, #292]	; (8002858 <HAL_GPIO_Init+0x2f0>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d019      	beq.n	800276a <HAL_GPIO_Init+0x202>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a48      	ldr	r2, [pc, #288]	; (800285c <HAL_GPIO_Init+0x2f4>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d013      	beq.n	8002766 <HAL_GPIO_Init+0x1fe>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a47      	ldr	r2, [pc, #284]	; (8002860 <HAL_GPIO_Init+0x2f8>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d00d      	beq.n	8002762 <HAL_GPIO_Init+0x1fa>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a46      	ldr	r2, [pc, #280]	; (8002864 <HAL_GPIO_Init+0x2fc>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d007      	beq.n	800275e <HAL_GPIO_Init+0x1f6>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a45      	ldr	r2, [pc, #276]	; (8002868 <HAL_GPIO_Init+0x300>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d101      	bne.n	800275a <HAL_GPIO_Init+0x1f2>
 8002756:	2304      	movs	r3, #4
 8002758:	e008      	b.n	800276c <HAL_GPIO_Init+0x204>
 800275a:	2307      	movs	r3, #7
 800275c:	e006      	b.n	800276c <HAL_GPIO_Init+0x204>
 800275e:	2303      	movs	r3, #3
 8002760:	e004      	b.n	800276c <HAL_GPIO_Init+0x204>
 8002762:	2302      	movs	r3, #2
 8002764:	e002      	b.n	800276c <HAL_GPIO_Init+0x204>
 8002766:	2301      	movs	r3, #1
 8002768:	e000      	b.n	800276c <HAL_GPIO_Init+0x204>
 800276a:	2300      	movs	r3, #0
 800276c:	69fa      	ldr	r2, [r7, #28]
 800276e:	f002 0203 	and.w	r2, r2, #3
 8002772:	0092      	lsls	r2, r2, #2
 8002774:	4093      	lsls	r3, r2
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4313      	orrs	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800277c:	4935      	ldr	r1, [pc, #212]	; (8002854 <HAL_GPIO_Init+0x2ec>)
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	089b      	lsrs	r3, r3, #2
 8002782:	3302      	adds	r3, #2
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800278a:	4b38      	ldr	r3, [pc, #224]	; (800286c <HAL_GPIO_Init+0x304>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	43db      	mvns	r3, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4013      	ands	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027ae:	4a2f      	ldr	r2, [pc, #188]	; (800286c <HAL_GPIO_Init+0x304>)
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027b4:	4b2d      	ldr	r3, [pc, #180]	; (800286c <HAL_GPIO_Init+0x304>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	43db      	mvns	r3, r3
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	4013      	ands	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d003      	beq.n	80027d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027d8:	4a24      	ldr	r2, [pc, #144]	; (800286c <HAL_GPIO_Init+0x304>)
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027de:	4b23      	ldr	r3, [pc, #140]	; (800286c <HAL_GPIO_Init+0x304>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	43db      	mvns	r3, r3
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	4013      	ands	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	4313      	orrs	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002802:	4a1a      	ldr	r2, [pc, #104]	; (800286c <HAL_GPIO_Init+0x304>)
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002808:	4b18      	ldr	r3, [pc, #96]	; (800286c <HAL_GPIO_Init+0x304>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	43db      	mvns	r3, r3
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4013      	ands	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d003      	beq.n	800282c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	4313      	orrs	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800282c:	4a0f      	ldr	r2, [pc, #60]	; (800286c <HAL_GPIO_Init+0x304>)
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	3301      	adds	r3, #1
 8002836:	61fb      	str	r3, [r7, #28]
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	2b0f      	cmp	r3, #15
 800283c:	f67f aea2 	bls.w	8002584 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002840:	bf00      	nop
 8002842:	bf00      	nop
 8002844:	3724      	adds	r7, #36	; 0x24
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	40023800 	.word	0x40023800
 8002854:	40013800 	.word	0x40013800
 8002858:	40020000 	.word	0x40020000
 800285c:	40020400 	.word	0x40020400
 8002860:	40020800 	.word	0x40020800
 8002864:	40020c00 	.word	0x40020c00
 8002868:	40021000 	.word	0x40021000
 800286c:	40013c00 	.word	0x40013c00

08002870 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	460b      	mov	r3, r1
 800287a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	691a      	ldr	r2, [r3, #16]
 8002880:	887b      	ldrh	r3, [r7, #2]
 8002882:	4013      	ands	r3, r2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d002      	beq.n	800288e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002888:	2301      	movs	r3, #1
 800288a:	73fb      	strb	r3, [r7, #15]
 800288c:	e001      	b.n	8002892 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800288e:	2300      	movs	r3, #0
 8002890:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002892:	7bfb      	ldrb	r3, [r7, #15]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3714      	adds	r7, #20
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	807b      	strh	r3, [r7, #2]
 80028ac:	4613      	mov	r3, r2
 80028ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028b0:	787b      	ldrb	r3, [r7, #1]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028b6:	887a      	ldrh	r2, [r7, #2]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028bc:	e003      	b.n	80028c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028be:	887b      	ldrh	r3, [r7, #2]
 80028c0:	041a      	lsls	r2, r3, #16
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	619a      	str	r2, [r3, #24]
}
 80028c6:	bf00      	nop
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b085      	sub	sp, #20
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
 80028da:	460b      	mov	r3, r1
 80028dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028e4:	887a      	ldrh	r2, [r7, #2]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	4013      	ands	r3, r2
 80028ea:	041a      	lsls	r2, r3, #16
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	43d9      	mvns	r1, r3
 80028f0:	887b      	ldrh	r3, [r7, #2]
 80028f2:	400b      	ands	r3, r1
 80028f4:	431a      	orrs	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	619a      	str	r2, [r3, #24]
}
 80028fa:	bf00      	nop
 80028fc:	3714      	adds	r7, #20
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
	...

08002908 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002912:	4b08      	ldr	r3, [pc, #32]	; (8002934 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002914:	695a      	ldr	r2, [r3, #20]
 8002916:	88fb      	ldrh	r3, [r7, #6]
 8002918:	4013      	ands	r3, r2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d006      	beq.n	800292c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800291e:	4a05      	ldr	r2, [pc, #20]	; (8002934 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002920:	88fb      	ldrh	r3, [r7, #6]
 8002922:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002924:	88fb      	ldrh	r3, [r7, #6]
 8002926:	4618      	mov	r0, r3
 8002928:	f7fe fe62 	bl	80015f0 <HAL_GPIO_EXTI_Callback>
  }
}
 800292c:	bf00      	nop
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40013c00 	.word	0x40013c00

08002938 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e12b      	b.n	8002ba2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d106      	bne.n	8002964 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7fe feaa 	bl	80016b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2224      	movs	r2, #36	; 0x24
 8002968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0201 	bic.w	r2, r2, #1
 800297a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800298a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800299a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800299c:	f003 f8d6 	bl	8005b4c <HAL_RCC_GetPCLK1Freq>
 80029a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	4a81      	ldr	r2, [pc, #516]	; (8002bac <HAL_I2C_Init+0x274>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d807      	bhi.n	80029bc <HAL_I2C_Init+0x84>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4a80      	ldr	r2, [pc, #512]	; (8002bb0 <HAL_I2C_Init+0x278>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	bf94      	ite	ls
 80029b4:	2301      	movls	r3, #1
 80029b6:	2300      	movhi	r3, #0
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	e006      	b.n	80029ca <HAL_I2C_Init+0x92>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	4a7d      	ldr	r2, [pc, #500]	; (8002bb4 <HAL_I2C_Init+0x27c>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	bf94      	ite	ls
 80029c4:	2301      	movls	r3, #1
 80029c6:	2300      	movhi	r3, #0
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e0e7      	b.n	8002ba2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	4a78      	ldr	r2, [pc, #480]	; (8002bb8 <HAL_I2C_Init+0x280>)
 80029d6:	fba2 2303 	umull	r2, r3, r2, r3
 80029da:	0c9b      	lsrs	r3, r3, #18
 80029dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68ba      	ldr	r2, [r7, #8]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	4a6a      	ldr	r2, [pc, #424]	; (8002bac <HAL_I2C_Init+0x274>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d802      	bhi.n	8002a0c <HAL_I2C_Init+0xd4>
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	3301      	adds	r3, #1
 8002a0a:	e009      	b.n	8002a20 <HAL_I2C_Init+0xe8>
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a12:	fb02 f303 	mul.w	r3, r2, r3
 8002a16:	4a69      	ldr	r2, [pc, #420]	; (8002bbc <HAL_I2C_Init+0x284>)
 8002a18:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1c:	099b      	lsrs	r3, r3, #6
 8002a1e:	3301      	adds	r3, #1
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	6812      	ldr	r2, [r2, #0]
 8002a24:	430b      	orrs	r3, r1
 8002a26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a32:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	495c      	ldr	r1, [pc, #368]	; (8002bac <HAL_I2C_Init+0x274>)
 8002a3c:	428b      	cmp	r3, r1
 8002a3e:	d819      	bhi.n	8002a74 <HAL_I2C_Init+0x13c>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	1e59      	subs	r1, r3, #1
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a4e:	1c59      	adds	r1, r3, #1
 8002a50:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a54:	400b      	ands	r3, r1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00a      	beq.n	8002a70 <HAL_I2C_Init+0x138>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	1e59      	subs	r1, r3, #1
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a68:	3301      	adds	r3, #1
 8002a6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a6e:	e051      	b.n	8002b14 <HAL_I2C_Init+0x1dc>
 8002a70:	2304      	movs	r3, #4
 8002a72:	e04f      	b.n	8002b14 <HAL_I2C_Init+0x1dc>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d111      	bne.n	8002aa0 <HAL_I2C_Init+0x168>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	1e58      	subs	r0, r3, #1
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6859      	ldr	r1, [r3, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	440b      	add	r3, r1
 8002a8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a8e:	3301      	adds	r3, #1
 8002a90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	bf0c      	ite	eq
 8002a98:	2301      	moveq	r3, #1
 8002a9a:	2300      	movne	r3, #0
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	e012      	b.n	8002ac6 <HAL_I2C_Init+0x18e>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	1e58      	subs	r0, r3, #1
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6859      	ldr	r1, [r3, #4]
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	440b      	add	r3, r1
 8002aae:	0099      	lsls	r1, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	bf0c      	ite	eq
 8002ac0:	2301      	moveq	r3, #1
 8002ac2:	2300      	movne	r3, #0
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <HAL_I2C_Init+0x196>
 8002aca:	2301      	movs	r3, #1
 8002acc:	e022      	b.n	8002b14 <HAL_I2C_Init+0x1dc>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10e      	bne.n	8002af4 <HAL_I2C_Init+0x1bc>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	1e58      	subs	r0, r3, #1
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6859      	ldr	r1, [r3, #4]
 8002ade:	460b      	mov	r3, r1
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	440b      	add	r3, r1
 8002ae4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ae8:	3301      	adds	r3, #1
 8002aea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002af2:	e00f      	b.n	8002b14 <HAL_I2C_Init+0x1dc>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	1e58      	subs	r0, r3, #1
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6859      	ldr	r1, [r3, #4]
 8002afc:	460b      	mov	r3, r1
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	0099      	lsls	r1, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	6809      	ldr	r1, [r1, #0]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69da      	ldr	r2, [r3, #28]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	6911      	ldr	r1, [r2, #16]
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	68d2      	ldr	r2, [r2, #12]
 8002b4e:	4311      	orrs	r1, r2
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	6812      	ldr	r2, [r2, #0]
 8002b54:	430b      	orrs	r3, r1
 8002b56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	695a      	ldr	r2, [r3, #20]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	430a      	orrs	r2, r1
 8002b72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 0201 	orr.w	r2, r2, #1
 8002b82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2220      	movs	r2, #32
 8002b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	000186a0 	.word	0x000186a0
 8002bb0:	001e847f 	.word	0x001e847f
 8002bb4:	003d08ff 	.word	0x003d08ff
 8002bb8:	431bde83 	.word	0x431bde83
 8002bbc:	10624dd3 	.word	0x10624dd3

08002bc0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b088      	sub	sp, #32
 8002bc4:	af02      	add	r7, sp, #8
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	4608      	mov	r0, r1
 8002bca:	4611      	mov	r1, r2
 8002bcc:	461a      	mov	r2, r3
 8002bce:	4603      	mov	r3, r0
 8002bd0:	817b      	strh	r3, [r7, #10]
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	813b      	strh	r3, [r7, #8]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bda:	f7fe ffe3 	bl	8001ba4 <HAL_GetTick>
 8002bde:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b20      	cmp	r3, #32
 8002bea:	f040 80d9 	bne.w	8002da0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	2319      	movs	r3, #25
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	496d      	ldr	r1, [pc, #436]	; (8002dac <HAL_I2C_Mem_Write+0x1ec>)
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f002 f90d 	bl	8004e18 <I2C_WaitOnFlagUntilTimeout>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002c04:	2302      	movs	r3, #2
 8002c06:	e0cc      	b.n	8002da2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d101      	bne.n	8002c16 <HAL_I2C_Mem_Write+0x56>
 8002c12:	2302      	movs	r3, #2
 8002c14:	e0c5      	b.n	8002da2 <HAL_I2C_Mem_Write+0x1e2>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d007      	beq.n	8002c3c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f042 0201 	orr.w	r2, r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2221      	movs	r2, #33	; 0x21
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2240      	movs	r2, #64	; 0x40
 8002c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6a3a      	ldr	r2, [r7, #32]
 8002c66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	4a4d      	ldr	r2, [pc, #308]	; (8002db0 <HAL_I2C_Mem_Write+0x1f0>)
 8002c7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c7e:	88f8      	ldrh	r0, [r7, #6]
 8002c80:	893a      	ldrh	r2, [r7, #8]
 8002c82:	8979      	ldrh	r1, [r7, #10]
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	9301      	str	r3, [sp, #4]
 8002c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f001 fe9c 	bl	80049cc <I2C_RequestMemoryWrite>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d052      	beq.n	8002d40 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e081      	b.n	8002da2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f002 f98e 	bl	8004fc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00d      	beq.n	8002cca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d107      	bne.n	8002cc6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cc4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e06b      	b.n	8002da2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	781a      	ldrb	r2, [r3, #0]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cda:	1c5a      	adds	r2, r3, #1
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	2b04      	cmp	r3, #4
 8002d06:	d11b      	bne.n	8002d40 <HAL_I2C_Mem_Write+0x180>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d017      	beq.n	8002d40 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d14:	781a      	ldrb	r2, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d20:	1c5a      	adds	r2, r3, #1
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1aa      	bne.n	8002c9e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f002 f97a 	bl	8005046 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00d      	beq.n	8002d74 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5c:	2b04      	cmp	r3, #4
 8002d5e:	d107      	bne.n	8002d70 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d6e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e016      	b.n	8002da2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2220      	movs	r2, #32
 8002d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	e000      	b.n	8002da2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002da0:	2302      	movs	r3, #2
  }
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3718      	adds	r7, #24
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	00100002 	.word	0x00100002
 8002db0:	ffff0000 	.word	0xffff0000

08002db4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b08c      	sub	sp, #48	; 0x30
 8002db8:	af02      	add	r7, sp, #8
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	4608      	mov	r0, r1
 8002dbe:	4611      	mov	r1, r2
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	817b      	strh	r3, [r7, #10]
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	813b      	strh	r3, [r7, #8]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002dce:	f7fe fee9 	bl	8001ba4 <HAL_GetTick>
 8002dd2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b20      	cmp	r3, #32
 8002dde:	f040 8208 	bne.w	80031f2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	2319      	movs	r3, #25
 8002de8:	2201      	movs	r2, #1
 8002dea:	497b      	ldr	r1, [pc, #492]	; (8002fd8 <HAL_I2C_Mem_Read+0x224>)
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f002 f813 	bl	8004e18 <I2C_WaitOnFlagUntilTimeout>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002df8:	2302      	movs	r3, #2
 8002dfa:	e1fb      	b.n	80031f4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d101      	bne.n	8002e0a <HAL_I2C_Mem_Read+0x56>
 8002e06:	2302      	movs	r3, #2
 8002e08:	e1f4      	b.n	80031f4 <HAL_I2C_Mem_Read+0x440>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d007      	beq.n	8002e30 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f042 0201 	orr.w	r2, r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2222      	movs	r2, #34	; 0x22
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2240      	movs	r2, #64	; 0x40
 8002e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002e60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	4a5b      	ldr	r2, [pc, #364]	; (8002fdc <HAL_I2C_Mem_Read+0x228>)
 8002e70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e72:	88f8      	ldrh	r0, [r7, #6]
 8002e74:	893a      	ldrh	r2, [r7, #8]
 8002e76:	8979      	ldrh	r1, [r7, #10]
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	9301      	str	r3, [sp, #4]
 8002e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	4603      	mov	r3, r0
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f001 fe38 	bl	8004af8 <I2C_RequestMemoryRead>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e1b0      	b.n	80031f4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d113      	bne.n	8002ec2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	623b      	str	r3, [r7, #32]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	623b      	str	r3, [r7, #32]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	623b      	str	r3, [r7, #32]
 8002eae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	e184      	b.n	80031cc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d11b      	bne.n	8002f02 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ed8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eda:	2300      	movs	r3, #0
 8002edc:	61fb      	str	r3, [r7, #28]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	61fb      	str	r3, [r7, #28]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	61fb      	str	r3, [r7, #28]
 8002eee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	e164      	b.n	80031cc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d11b      	bne.n	8002f42 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f18:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	61bb      	str	r3, [r7, #24]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	695b      	ldr	r3, [r3, #20]
 8002f34:	61bb      	str	r3, [r7, #24]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	61bb      	str	r3, [r7, #24]
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	e144      	b.n	80031cc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f42:	2300      	movs	r3, #0
 8002f44:	617b      	str	r3, [r7, #20]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	617b      	str	r3, [r7, #20]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	617b      	str	r3, [r7, #20]
 8002f56:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002f58:	e138      	b.n	80031cc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f5e:	2b03      	cmp	r3, #3
 8002f60:	f200 80f1 	bhi.w	8003146 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d123      	bne.n	8002fb4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f002 f8db 	bl	800512c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e139      	b.n	80031f4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	691a      	ldr	r2, [r3, #16]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8a:	b2d2      	uxtb	r2, r2
 8002f8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f92:	1c5a      	adds	r2, r3, #1
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	3b01      	subs	r3, #1
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fb2:	e10b      	b.n	80031cc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d14e      	bne.n	800305a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	9300      	str	r3, [sp, #0]
 8002fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	4906      	ldr	r1, [pc, #24]	; (8002fe0 <HAL_I2C_Mem_Read+0x22c>)
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f001 ff26 	bl	8004e18 <I2C_WaitOnFlagUntilTimeout>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d008      	beq.n	8002fe4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e10e      	b.n	80031f4 <HAL_I2C_Mem_Read+0x440>
 8002fd6:	bf00      	nop
 8002fd8:	00100002 	.word	0x00100002
 8002fdc:	ffff0000 	.word	0xffff0000
 8002fe0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ff2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	691a      	ldr	r2, [r3, #16]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	b2d2      	uxtb	r2, r2
 8003000:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003006:	1c5a      	adds	r2, r3, #1
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003010:	3b01      	subs	r3, #1
 8003012:	b29a      	uxth	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800301c:	b29b      	uxth	r3, r3
 800301e:	3b01      	subs	r3, #1
 8003020:	b29a      	uxth	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	691a      	ldr	r2, [r3, #16]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	b2d2      	uxtb	r2, r2
 8003032:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	1c5a      	adds	r2, r3, #1
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003042:	3b01      	subs	r3, #1
 8003044:	b29a      	uxth	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800304e:	b29b      	uxth	r3, r3
 8003050:	3b01      	subs	r3, #1
 8003052:	b29a      	uxth	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003058:	e0b8      	b.n	80031cc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	9300      	str	r3, [sp, #0]
 800305e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003060:	2200      	movs	r2, #0
 8003062:	4966      	ldr	r1, [pc, #408]	; (80031fc <HAL_I2C_Mem_Read+0x448>)
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f001 fed7 	bl	8004e18 <I2C_WaitOnFlagUntilTimeout>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e0bf      	b.n	80031f4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003082:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	691a      	ldr	r2, [r3, #16]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	1c5a      	adds	r2, r3, #1
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a0:	3b01      	subs	r3, #1
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	3b01      	subs	r3, #1
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030bc:	2200      	movs	r2, #0
 80030be:	494f      	ldr	r1, [pc, #316]	; (80031fc <HAL_I2C_Mem_Read+0x448>)
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f001 fea9 	bl	8004e18 <I2C_WaitOnFlagUntilTimeout>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e091      	b.n	80031f4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	691a      	ldr	r2, [r3, #16]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ea:	b2d2      	uxtb	r2, r2
 80030ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	1c5a      	adds	r2, r3, #1
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030fc:	3b01      	subs	r3, #1
 80030fe:	b29a      	uxth	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003108:	b29b      	uxth	r3, r3
 800310a:	3b01      	subs	r3, #1
 800310c:	b29a      	uxth	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	691a      	ldr	r2, [r3, #16]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	b2d2      	uxtb	r2, r2
 800311e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	1c5a      	adds	r2, r3, #1
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800312e:	3b01      	subs	r3, #1
 8003130:	b29a      	uxth	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800313a:	b29b      	uxth	r3, r3
 800313c:	3b01      	subs	r3, #1
 800313e:	b29a      	uxth	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003144:	e042      	b.n	80031cc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003148:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f001 ffee 	bl	800512c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e04c      	b.n	80031f4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	691a      	ldr	r2, [r3, #16]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	b2d2      	uxtb	r2, r2
 8003166:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	1c5a      	adds	r2, r3, #1
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003176:	3b01      	subs	r3, #1
 8003178:	b29a      	uxth	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003182:	b29b      	uxth	r3, r3
 8003184:	3b01      	subs	r3, #1
 8003186:	b29a      	uxth	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	f003 0304 	and.w	r3, r3, #4
 8003196:	2b04      	cmp	r3, #4
 8003198:	d118      	bne.n	80031cc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	691a      	ldr	r2, [r3, #16]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	b2d2      	uxtb	r2, r2
 80031a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	1c5a      	adds	r2, r3, #1
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b6:	3b01      	subs	r3, #1
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	3b01      	subs	r3, #1
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f47f aec2 	bne.w	8002f5a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2220      	movs	r2, #32
 80031da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031ee:	2300      	movs	r3, #0
 80031f0:	e000      	b.n	80031f4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80031f2:	2302      	movs	r3, #2
  }
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3728      	adds	r7, #40	; 0x28
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	00010004 	.word	0x00010004

08003200 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b088      	sub	sp, #32
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003208:	2300      	movs	r3, #0
 800320a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003218:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003220:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003228:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800322a:	7bfb      	ldrb	r3, [r7, #15]
 800322c:	2b10      	cmp	r3, #16
 800322e:	d003      	beq.n	8003238 <HAL_I2C_EV_IRQHandler+0x38>
 8003230:	7bfb      	ldrb	r3, [r7, #15]
 8003232:	2b40      	cmp	r3, #64	; 0x40
 8003234:	f040 80c1 	bne.w	80033ba <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10d      	bne.n	800326e <HAL_I2C_EV_IRQHandler+0x6e>
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003258:	d003      	beq.n	8003262 <HAL_I2C_EV_IRQHandler+0x62>
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003260:	d101      	bne.n	8003266 <HAL_I2C_EV_IRQHandler+0x66>
 8003262:	2301      	movs	r3, #1
 8003264:	e000      	b.n	8003268 <HAL_I2C_EV_IRQHandler+0x68>
 8003266:	2300      	movs	r3, #0
 8003268:	2b01      	cmp	r3, #1
 800326a:	f000 8132 	beq.w	80034d2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00c      	beq.n	8003292 <HAL_I2C_EV_IRQHandler+0x92>
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	0a5b      	lsrs	r3, r3, #9
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b00      	cmp	r3, #0
 8003282:	d006      	beq.n	8003292 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f001 ffd6 	bl	8005236 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 fd83 	bl	8003d96 <I2C_Master_SB>
 8003290:	e092      	b.n	80033b8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	08db      	lsrs	r3, r3, #3
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b00      	cmp	r3, #0
 800329c:	d009      	beq.n	80032b2 <HAL_I2C_EV_IRQHandler+0xb2>
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	0a5b      	lsrs	r3, r3, #9
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d003      	beq.n	80032b2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 fdf9 	bl	8003ea2 <I2C_Master_ADD10>
 80032b0:	e082      	b.n	80033b8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	085b      	lsrs	r3, r3, #1
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d009      	beq.n	80032d2 <HAL_I2C_EV_IRQHandler+0xd2>
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	0a5b      	lsrs	r3, r3, #9
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 fe13 	bl	8003ef6 <I2C_Master_ADDR>
 80032d0:	e072      	b.n	80033b8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	089b      	lsrs	r3, r3, #2
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d03b      	beq.n	8003356 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032ec:	f000 80f3 	beq.w	80034d6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	09db      	lsrs	r3, r3, #7
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00f      	beq.n	800331c <HAL_I2C_EV_IRQHandler+0x11c>
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	0a9b      	lsrs	r3, r3, #10
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b00      	cmp	r3, #0
 8003306:	d009      	beq.n	800331c <HAL_I2C_EV_IRQHandler+0x11c>
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	089b      	lsrs	r3, r3, #2
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b00      	cmp	r3, #0
 8003312:	d103      	bne.n	800331c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 f9f3 	bl	8003700 <I2C_MasterTransmit_TXE>
 800331a:	e04d      	b.n	80033b8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	089b      	lsrs	r3, r3, #2
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 80d6 	beq.w	80034d6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	0a5b      	lsrs	r3, r3, #9
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 80cf 	beq.w	80034d6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003338:	7bbb      	ldrb	r3, [r7, #14]
 800333a:	2b21      	cmp	r3, #33	; 0x21
 800333c:	d103      	bne.n	8003346 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 fa7a 	bl	8003838 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003344:	e0c7      	b.n	80034d6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003346:	7bfb      	ldrb	r3, [r7, #15]
 8003348:	2b40      	cmp	r3, #64	; 0x40
 800334a:	f040 80c4 	bne.w	80034d6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 fae8 	bl	8003924 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003354:	e0bf      	b.n	80034d6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003360:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003364:	f000 80b7 	beq.w	80034d6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	099b      	lsrs	r3, r3, #6
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00f      	beq.n	8003394 <HAL_I2C_EV_IRQHandler+0x194>
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	0a9b      	lsrs	r3, r3, #10
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b00      	cmp	r3, #0
 800337e:	d009      	beq.n	8003394 <HAL_I2C_EV_IRQHandler+0x194>
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	089b      	lsrs	r3, r3, #2
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	2b00      	cmp	r3, #0
 800338a:	d103      	bne.n	8003394 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 fb5d 	bl	8003a4c <I2C_MasterReceive_RXNE>
 8003392:	e011      	b.n	80033b8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	089b      	lsrs	r3, r3, #2
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 809a 	beq.w	80034d6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	0a5b      	lsrs	r3, r3, #9
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f000 8093 	beq.w	80034d6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 fc06 	bl	8003bc2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033b6:	e08e      	b.n	80034d6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80033b8:	e08d      	b.n	80034d6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d004      	beq.n	80033cc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	61fb      	str	r3, [r7, #28]
 80033ca:	e007      	b.n	80033dc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	085b      	lsrs	r3, r3, #1
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d012      	beq.n	800340e <HAL_I2C_EV_IRQHandler+0x20e>
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	0a5b      	lsrs	r3, r3, #9
 80033ec:	f003 0301 	and.w	r3, r3, #1
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00c      	beq.n	800340e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d003      	beq.n	8003404 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003404:	69b9      	ldr	r1, [r7, #24]
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 ffc4 	bl	8004394 <I2C_Slave_ADDR>
 800340c:	e066      	b.n	80034dc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	091b      	lsrs	r3, r3, #4
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b00      	cmp	r3, #0
 8003418:	d009      	beq.n	800342e <HAL_I2C_EV_IRQHandler+0x22e>
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	0a5b      	lsrs	r3, r3, #9
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d003      	beq.n	800342e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 fffe 	bl	8004428 <I2C_Slave_STOPF>
 800342c:	e056      	b.n	80034dc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800342e:	7bbb      	ldrb	r3, [r7, #14]
 8003430:	2b21      	cmp	r3, #33	; 0x21
 8003432:	d002      	beq.n	800343a <HAL_I2C_EV_IRQHandler+0x23a>
 8003434:	7bbb      	ldrb	r3, [r7, #14]
 8003436:	2b29      	cmp	r3, #41	; 0x29
 8003438:	d125      	bne.n	8003486 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	09db      	lsrs	r3, r3, #7
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00f      	beq.n	8003466 <HAL_I2C_EV_IRQHandler+0x266>
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	0a9b      	lsrs	r3, r3, #10
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d009      	beq.n	8003466 <HAL_I2C_EV_IRQHandler+0x266>
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	089b      	lsrs	r3, r3, #2
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d103      	bne.n	8003466 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 feda 	bl	8004218 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003464:	e039      	b.n	80034da <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	089b      	lsrs	r3, r3, #2
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d033      	beq.n	80034da <HAL_I2C_EV_IRQHandler+0x2da>
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	0a5b      	lsrs	r3, r3, #9
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	d02d      	beq.n	80034da <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 ff07 	bl	8004292 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003484:	e029      	b.n	80034da <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	099b      	lsrs	r3, r3, #6
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00f      	beq.n	80034b2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	0a9b      	lsrs	r3, r3, #10
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d009      	beq.n	80034b2 <HAL_I2C_EV_IRQHandler+0x2b2>
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	089b      	lsrs	r3, r3, #2
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d103      	bne.n	80034b2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 ff12 	bl	80042d4 <I2C_SlaveReceive_RXNE>
 80034b0:	e014      	b.n	80034dc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	089b      	lsrs	r3, r3, #2
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00e      	beq.n	80034dc <HAL_I2C_EV_IRQHandler+0x2dc>
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	0a5b      	lsrs	r3, r3, #9
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d008      	beq.n	80034dc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 ff40 	bl	8004350 <I2C_SlaveReceive_BTF>
 80034d0:	e004      	b.n	80034dc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80034d2:	bf00      	nop
 80034d4:	e002      	b.n	80034dc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034d6:	bf00      	nop
 80034d8:	e000      	b.n	80034dc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034da:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80034dc:	3720      	adds	r7, #32
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b08a      	sub	sp, #40	; 0x28
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80034fa:	2300      	movs	r3, #0
 80034fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003504:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003506:	6a3b      	ldr	r3, [r7, #32]
 8003508:	0a1b      	lsrs	r3, r3, #8
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00e      	beq.n	8003530 <HAL_I2C_ER_IRQHandler+0x4e>
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	0a1b      	lsrs	r3, r3, #8
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d008      	beq.n	8003530 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	f043 0301 	orr.w	r3, r3, #1
 8003524:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800352e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003530:	6a3b      	ldr	r3, [r7, #32]
 8003532:	0a5b      	lsrs	r3, r3, #9
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00e      	beq.n	800355a <HAL_I2C_ER_IRQHandler+0x78>
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	0a1b      	lsrs	r3, r3, #8
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	2b00      	cmp	r3, #0
 8003546:	d008      	beq.n	800355a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354a:	f043 0302 	orr.w	r3, r3, #2
 800354e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003558:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	0a9b      	lsrs	r3, r3, #10
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	d03f      	beq.n	80035e6 <HAL_I2C_ER_IRQHandler+0x104>
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	0a1b      	lsrs	r3, r3, #8
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	d039      	beq.n	80035e6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003572:	7efb      	ldrb	r3, [r7, #27]
 8003574:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800357a:	b29b      	uxth	r3, r3
 800357c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003584:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800358c:	7ebb      	ldrb	r3, [r7, #26]
 800358e:	2b20      	cmp	r3, #32
 8003590:	d112      	bne.n	80035b8 <HAL_I2C_ER_IRQHandler+0xd6>
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10f      	bne.n	80035b8 <HAL_I2C_ER_IRQHandler+0xd6>
 8003598:	7cfb      	ldrb	r3, [r7, #19]
 800359a:	2b21      	cmp	r3, #33	; 0x21
 800359c:	d008      	beq.n	80035b0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800359e:	7cfb      	ldrb	r3, [r7, #19]
 80035a0:	2b29      	cmp	r3, #41	; 0x29
 80035a2:	d005      	beq.n	80035b0 <HAL_I2C_ER_IRQHandler+0xce>
 80035a4:	7cfb      	ldrb	r3, [r7, #19]
 80035a6:	2b28      	cmp	r3, #40	; 0x28
 80035a8:	d106      	bne.n	80035b8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2b21      	cmp	r3, #33	; 0x21
 80035ae:	d103      	bne.n	80035b8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f001 f869 	bl	8004688 <I2C_Slave_AF>
 80035b6:	e016      	b.n	80035e6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035c0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	f043 0304 	orr.w	r3, r3, #4
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80035ca:	7efb      	ldrb	r3, [r7, #27]
 80035cc:	2b10      	cmp	r3, #16
 80035ce:	d002      	beq.n	80035d6 <HAL_I2C_ER_IRQHandler+0xf4>
 80035d0:	7efb      	ldrb	r3, [r7, #27]
 80035d2:	2b40      	cmp	r3, #64	; 0x40
 80035d4:	d107      	bne.n	80035e6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80035e6:	6a3b      	ldr	r3, [r7, #32]
 80035e8:	0adb      	lsrs	r3, r3, #11
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00e      	beq.n	8003610 <HAL_I2C_ER_IRQHandler+0x12e>
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	0a1b      	lsrs	r3, r3, #8
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d008      	beq.n	8003610 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	f043 0308 	orr.w	r3, r3, #8
 8003604:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800360e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003612:	2b00      	cmp	r3, #0
 8003614:	d008      	beq.n	8003628 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	431a      	orrs	r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f001 f8a0 	bl	8004768 <I2C_ITError>
  }
}
 8003628:	bf00      	nop
 800362a:	3728      	adds	r7, #40	; 0x28
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	460b      	mov	r3, r1
 800368a:	70fb      	strb	r3, [r7, #3]
 800368c:	4613      	mov	r3, r2
 800368e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800370e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003716:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003722:	2b00      	cmp	r3, #0
 8003724:	d150      	bne.n	80037c8 <I2C_MasterTransmit_TXE+0xc8>
 8003726:	7bfb      	ldrb	r3, [r7, #15]
 8003728:	2b21      	cmp	r3, #33	; 0x21
 800372a:	d14d      	bne.n	80037c8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	2b08      	cmp	r3, #8
 8003730:	d01d      	beq.n	800376e <I2C_MasterTransmit_TXE+0x6e>
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	2b20      	cmp	r3, #32
 8003736:	d01a      	beq.n	800376e <I2C_MasterTransmit_TXE+0x6e>
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800373e:	d016      	beq.n	800376e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685a      	ldr	r2, [r3, #4]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800374e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2211      	movs	r2, #17
 8003754:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2220      	movs	r2, #32
 8003762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7ff ff62 	bl	8003630 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800376c:	e060      	b.n	8003830 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800377c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800378c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2220      	movs	r2, #32
 8003798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b40      	cmp	r3, #64	; 0x40
 80037a6:	d107      	bne.n	80037b8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f7ff ff7d 	bl	80036b0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037b6:	e03b      	b.n	8003830 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7ff ff35 	bl	8003630 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037c6:	e033      	b.n	8003830 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80037c8:	7bfb      	ldrb	r3, [r7, #15]
 80037ca:	2b21      	cmp	r3, #33	; 0x21
 80037cc:	d005      	beq.n	80037da <I2C_MasterTransmit_TXE+0xda>
 80037ce:	7bbb      	ldrb	r3, [r7, #14]
 80037d0:	2b40      	cmp	r3, #64	; 0x40
 80037d2:	d12d      	bne.n	8003830 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80037d4:	7bfb      	ldrb	r3, [r7, #15]
 80037d6:	2b22      	cmp	r3, #34	; 0x22
 80037d8:	d12a      	bne.n	8003830 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037de:	b29b      	uxth	r3, r3
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d108      	bne.n	80037f6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685a      	ldr	r2, [r3, #4]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037f2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80037f4:	e01c      	b.n	8003830 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b40      	cmp	r3, #64	; 0x40
 8003800:	d103      	bne.n	800380a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f88e 	bl	8003924 <I2C_MemoryTransmit_TXE_BTF>
}
 8003808:	e012      	b.n	8003830 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380e:	781a      	ldrb	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381a:	1c5a      	adds	r2, r3, #1
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003824:	b29b      	uxth	r3, r3
 8003826:	3b01      	subs	r3, #1
 8003828:	b29a      	uxth	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800382e:	e7ff      	b.n	8003830 <I2C_MasterTransmit_TXE+0x130>
 8003830:	bf00      	nop
 8003832:	3710      	adds	r7, #16
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003844:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b21      	cmp	r3, #33	; 0x21
 8003850:	d164      	bne.n	800391c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003856:	b29b      	uxth	r3, r3
 8003858:	2b00      	cmp	r3, #0
 800385a:	d012      	beq.n	8003882 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	781a      	ldrb	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386c:	1c5a      	adds	r2, r3, #1
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003876:	b29b      	uxth	r3, r3
 8003878:	3b01      	subs	r3, #1
 800387a:	b29a      	uxth	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003880:	e04c      	b.n	800391c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2b08      	cmp	r3, #8
 8003886:	d01d      	beq.n	80038c4 <I2C_MasterTransmit_BTF+0x8c>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2b20      	cmp	r3, #32
 800388c:	d01a      	beq.n	80038c4 <I2C_MasterTransmit_BTF+0x8c>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003894:	d016      	beq.n	80038c4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	685a      	ldr	r2, [r3, #4]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038a4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2211      	movs	r2, #17
 80038aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2220      	movs	r2, #32
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f7ff feb7 	bl	8003630 <HAL_I2C_MasterTxCpltCallback>
}
 80038c2:	e02b      	b.n	800391c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038d2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038e2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2220      	movs	r2, #32
 80038ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b40      	cmp	r3, #64	; 0x40
 80038fc:	d107      	bne.n	800390e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7ff fed2 	bl	80036b0 <HAL_I2C_MemTxCpltCallback>
}
 800390c:	e006      	b.n	800391c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7ff fe8a 	bl	8003630 <HAL_I2C_MasterTxCpltCallback>
}
 800391c:	bf00      	nop
 800391e:	3710      	adds	r7, #16
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003932:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003938:	2b00      	cmp	r3, #0
 800393a:	d11d      	bne.n	8003978 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003940:	2b01      	cmp	r3, #1
 8003942:	d10b      	bne.n	800395c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003948:	b2da      	uxtb	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003954:	1c9a      	adds	r2, r3, #2
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800395a:	e073      	b.n	8003a44 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003960:	b29b      	uxth	r3, r3
 8003962:	121b      	asrs	r3, r3, #8
 8003964:	b2da      	uxtb	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003970:	1c5a      	adds	r2, r3, #1
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003976:	e065      	b.n	8003a44 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800397c:	2b01      	cmp	r3, #1
 800397e:	d10b      	bne.n	8003998 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003984:	b2da      	uxtb	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003990:	1c5a      	adds	r2, r3, #1
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003996:	e055      	b.n	8003a44 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800399c:	2b02      	cmp	r3, #2
 800399e:	d151      	bne.n	8003a44 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80039a0:	7bfb      	ldrb	r3, [r7, #15]
 80039a2:	2b22      	cmp	r3, #34	; 0x22
 80039a4:	d10d      	bne.n	80039c2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039b4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ba:	1c5a      	adds	r2, r3, #1
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	651a      	str	r2, [r3, #80]	; 0x50
}
 80039c0:	e040      	b.n	8003a44 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d015      	beq.n	80039f8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80039cc:	7bfb      	ldrb	r3, [r7, #15]
 80039ce:	2b21      	cmp	r3, #33	; 0x21
 80039d0:	d112      	bne.n	80039f8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d6:	781a      	ldrb	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e2:	1c5a      	adds	r2, r3, #1
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	3b01      	subs	r3, #1
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80039f6:	e025      	b.n	8003a44 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d120      	bne.n	8003a44 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003a02:	7bfb      	ldrb	r3, [r7, #15]
 8003a04:	2b21      	cmp	r3, #33	; 0x21
 8003a06:	d11d      	bne.n	8003a44 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a16:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a26:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2220      	movs	r2, #32
 8003a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f7ff fe36 	bl	80036b0 <HAL_I2C_MemTxCpltCallback>
}
 8003a44:	bf00      	nop
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2b22      	cmp	r3, #34	; 0x22
 8003a5e:	f040 80ac 	bne.w	8003bba <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2b03      	cmp	r3, #3
 8003a6e:	d921      	bls.n	8003ab4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	691a      	ldr	r2, [r3, #16]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7a:	b2d2      	uxtb	r2, r2
 8003a7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a82:	1c5a      	adds	r2, r3, #1
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	2b03      	cmp	r3, #3
 8003a9e:	f040 808c 	bne.w	8003bba <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ab0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003ab2:	e082      	b.n	8003bba <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d075      	beq.n	8003ba8 <I2C_MasterReceive_RXNE+0x15c>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d002      	beq.n	8003ac8 <I2C_MasterReceive_RXNE+0x7c>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d16f      	bne.n	8003ba8 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f001 fafd 	bl	80050c8 <I2C_WaitOnSTOPRequestThroughIT>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d142      	bne.n	8003b5a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ae2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003af2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	691a      	ldr	r2, [r3, #16]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afe:	b2d2      	uxtb	r2, r2
 8003b00:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	1c5a      	adds	r2, r3, #1
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	3b01      	subs	r3, #1
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2220      	movs	r2, #32
 8003b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b40      	cmp	r3, #64	; 0x40
 8003b2c:	d10a      	bne.n	8003b44 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f7ff fdc1 	bl	80036c4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003b42:	e03a      	b.n	8003bba <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2212      	movs	r2, #18
 8003b50:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7ff fd76 	bl	8003644 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003b58:	e02f      	b.n	8003bba <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b68:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	691a      	ldr	r2, [r3, #16]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b74:	b2d2      	uxtb	r2, r2
 8003b76:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	1c5a      	adds	r2, r3, #1
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2220      	movs	r2, #32
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f7ff fd99 	bl	80036d8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003ba6:	e008      	b.n	8003bba <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bb6:	605a      	str	r2, [r3, #4]
}
 8003bb8:	e7ff      	b.n	8003bba <I2C_MasterReceive_RXNE+0x16e>
 8003bba:	bf00      	nop
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b084      	sub	sp, #16
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bce:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d11b      	bne.n	8003c12 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003be8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	691a      	ldr	r2, [r3, #16]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf4:	b2d2      	uxtb	r2, r2
 8003bf6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	1c5a      	adds	r2, r3, #1
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003c10:	e0bd      	b.n	8003d8e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	2b03      	cmp	r3, #3
 8003c1a:	d129      	bne.n	8003c70 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	685a      	ldr	r2, [r3, #4]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c2a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2b04      	cmp	r3, #4
 8003c30:	d00a      	beq.n	8003c48 <I2C_MasterReceive_BTF+0x86>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d007      	beq.n	8003c48 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c46:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	691a      	ldr	r2, [r3, #16]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	b2d2      	uxtb	r2, r2
 8003c54:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5a:	1c5a      	adds	r2, r3, #1
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	3b01      	subs	r3, #1
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003c6e:	e08e      	b.n	8003d8e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d176      	bne.n	8003d68 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d002      	beq.n	8003c86 <I2C_MasterReceive_BTF+0xc4>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2b10      	cmp	r3, #16
 8003c84:	d108      	bne.n	8003c98 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c94:	601a      	str	r2, [r3, #0]
 8003c96:	e019      	b.n	8003ccc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2b04      	cmp	r3, #4
 8003c9c:	d002      	beq.n	8003ca4 <I2C_MasterReceive_BTF+0xe2>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d108      	bne.n	8003cb6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	e00a      	b.n	8003ccc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2b10      	cmp	r3, #16
 8003cba:	d007      	beq.n	8003ccc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cca:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	691a      	ldr	r2, [r3, #16]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd6:	b2d2      	uxtb	r2, r2
 8003cd8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	1c5a      	adds	r2, r3, #1
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	3b01      	subs	r3, #1
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	691a      	ldr	r2, [r3, #16]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	b2d2      	uxtb	r2, r2
 8003cfe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	1c5a      	adds	r2, r3, #1
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	3b01      	subs	r3, #1
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003d26:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b40      	cmp	r3, #64	; 0x40
 8003d3a:	d10a      	bne.n	8003d52 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7ff fcba 	bl	80036c4 <HAL_I2C_MemRxCpltCallback>
}
 8003d50:	e01d      	b.n	8003d8e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2212      	movs	r2, #18
 8003d5e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7ff fc6f 	bl	8003644 <HAL_I2C_MasterRxCpltCallback>
}
 8003d66:	e012      	b.n	8003d8e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	691a      	ldr	r2, [r3, #16]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d72:	b2d2      	uxtb	r2, r2
 8003d74:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7a:	1c5a      	adds	r2, r3, #1
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	3b01      	subs	r3, #1
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003d8e:	bf00      	nop
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b40      	cmp	r3, #64	; 0x40
 8003da8:	d117      	bne.n	8003dda <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d109      	bne.n	8003dc6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	461a      	mov	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003dc2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003dc4:	e067      	b.n	8003e96 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	f043 0301 	orr.w	r3, r3, #1
 8003dd0:	b2da      	uxtb	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	611a      	str	r2, [r3, #16]
}
 8003dd8:	e05d      	b.n	8003e96 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003de2:	d133      	bne.n	8003e4c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b21      	cmp	r3, #33	; 0x21
 8003dee:	d109      	bne.n	8003e04 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	461a      	mov	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e00:	611a      	str	r2, [r3, #16]
 8003e02:	e008      	b.n	8003e16 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	f043 0301 	orr.w	r3, r3, #1
 8003e0e:	b2da      	uxtb	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d004      	beq.n	8003e28 <I2C_Master_SB+0x92>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d108      	bne.n	8003e3a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d032      	beq.n	8003e96 <I2C_Master_SB+0x100>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d02d      	beq.n	8003e96 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e48:	605a      	str	r2, [r3, #4]
}
 8003e4a:	e024      	b.n	8003e96 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10e      	bne.n	8003e72 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	11db      	asrs	r3, r3, #7
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	f003 0306 	and.w	r3, r3, #6
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	f063 030f 	orn	r3, r3, #15
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	611a      	str	r2, [r3, #16]
}
 8003e70:	e011      	b.n	8003e96 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d10d      	bne.n	8003e96 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	11db      	asrs	r3, r3, #7
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	f003 0306 	and.w	r3, r3, #6
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	f063 030e 	orn	r3, r3, #14
 8003e8e:	b2da      	uxtb	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	611a      	str	r2, [r3, #16]
}
 8003e96:	bf00      	nop
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	b083      	sub	sp, #12
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eae:	b2da      	uxtb	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d004      	beq.n	8003ec8 <I2C_Master_ADD10+0x26>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d108      	bne.n	8003eda <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00c      	beq.n	8003eea <I2C_Master_ADD10+0x48>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d007      	beq.n	8003eea <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ee8:	605a      	str	r2, [r3, #4]
  }
}
 8003eea:	bf00      	nop
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr

08003ef6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b091      	sub	sp, #68	; 0x44
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f12:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b22      	cmp	r3, #34	; 0x22
 8003f1e:	f040 8169 	bne.w	80041f4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10f      	bne.n	8003f4a <I2C_Master_ADDR+0x54>
 8003f2a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003f2e:	2b40      	cmp	r3, #64	; 0x40
 8003f30:	d10b      	bne.n	8003f4a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f32:	2300      	movs	r3, #0
 8003f34:	633b      	str	r3, [r7, #48]	; 0x30
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	633b      	str	r3, [r7, #48]	; 0x30
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	633b      	str	r3, [r7, #48]	; 0x30
 8003f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f48:	e160      	b.n	800420c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d11d      	bne.n	8003f8e <I2C_Master_ADDR+0x98>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003f5a:	d118      	bne.n	8003f8e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f80:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f86:	1c5a      	adds	r2, r3, #1
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	651a      	str	r2, [r3, #80]	; 0x50
 8003f8c:	e13e      	b.n	800420c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d113      	bne.n	8003fc0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f98:	2300      	movs	r3, #0
 8003f9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fac:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	e115      	b.n	80041ec <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	f040 808a 	bne.w	80040e0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fd2:	d137      	bne.n	8004044 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fe2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ff2:	d113      	bne.n	800401c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004002:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004004:	2300      	movs	r3, #0
 8004006:	627b      	str	r3, [r7, #36]	; 0x24
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	627b      	str	r3, [r7, #36]	; 0x24
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	627b      	str	r3, [r7, #36]	; 0x24
 8004018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401a:	e0e7      	b.n	80041ec <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800401c:	2300      	movs	r3, #0
 800401e:	623b      	str	r3, [r7, #32]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	623b      	str	r3, [r7, #32]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	623b      	str	r3, [r7, #32]
 8004030:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004040:	601a      	str	r2, [r3, #0]
 8004042:	e0d3      	b.n	80041ec <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004046:	2b08      	cmp	r3, #8
 8004048:	d02e      	beq.n	80040a8 <I2C_Master_ADDR+0x1b2>
 800404a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800404c:	2b20      	cmp	r3, #32
 800404e:	d02b      	beq.n	80040a8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004052:	2b12      	cmp	r3, #18
 8004054:	d102      	bne.n	800405c <I2C_Master_ADDR+0x166>
 8004056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004058:	2b01      	cmp	r3, #1
 800405a:	d125      	bne.n	80040a8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800405c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405e:	2b04      	cmp	r3, #4
 8004060:	d00e      	beq.n	8004080 <I2C_Master_ADDR+0x18a>
 8004062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004064:	2b02      	cmp	r3, #2
 8004066:	d00b      	beq.n	8004080 <I2C_Master_ADDR+0x18a>
 8004068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800406a:	2b10      	cmp	r3, #16
 800406c:	d008      	beq.n	8004080 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800407c:	601a      	str	r2, [r3, #0]
 800407e:	e007      	b.n	8004090 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800408e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004090:	2300      	movs	r3, #0
 8004092:	61fb      	str	r3, [r7, #28]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	61fb      	str	r3, [r7, #28]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	61fb      	str	r3, [r7, #28]
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	e0a1      	b.n	80041ec <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040b6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040b8:	2300      	movs	r3, #0
 80040ba:	61bb      	str	r3, [r7, #24]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	61bb      	str	r3, [r7, #24]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	61bb      	str	r3, [r7, #24]
 80040cc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	e085      	b.n	80041ec <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d14d      	bne.n	8004186 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80040ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ec:	2b04      	cmp	r3, #4
 80040ee:	d016      	beq.n	800411e <I2C_Master_ADDR+0x228>
 80040f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d013      	beq.n	800411e <I2C_Master_ADDR+0x228>
 80040f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f8:	2b10      	cmp	r3, #16
 80040fa:	d010      	beq.n	800411e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800410a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	e007      	b.n	800412e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800412c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004138:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800413c:	d117      	bne.n	800416e <I2C_Master_ADDR+0x278>
 800413e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004140:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004144:	d00b      	beq.n	800415e <I2C_Master_ADDR+0x268>
 8004146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004148:	2b01      	cmp	r3, #1
 800414a:	d008      	beq.n	800415e <I2C_Master_ADDR+0x268>
 800414c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414e:	2b08      	cmp	r3, #8
 8004150:	d005      	beq.n	800415e <I2C_Master_ADDR+0x268>
 8004152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004154:	2b10      	cmp	r3, #16
 8004156:	d002      	beq.n	800415e <I2C_Master_ADDR+0x268>
 8004158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800415a:	2b20      	cmp	r3, #32
 800415c:	d107      	bne.n	800416e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800416c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800416e:	2300      	movs	r3, #0
 8004170:	617b      	str	r3, [r7, #20]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	617b      	str	r3, [r7, #20]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	617b      	str	r3, [r7, #20]
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	e032      	b.n	80041ec <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004194:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041a4:	d117      	bne.n	80041d6 <I2C_Master_ADDR+0x2e0>
 80041a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041ac:	d00b      	beq.n	80041c6 <I2C_Master_ADDR+0x2d0>
 80041ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d008      	beq.n	80041c6 <I2C_Master_ADDR+0x2d0>
 80041b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b6:	2b08      	cmp	r3, #8
 80041b8:	d005      	beq.n	80041c6 <I2C_Master_ADDR+0x2d0>
 80041ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041bc:	2b10      	cmp	r3, #16
 80041be:	d002      	beq.n	80041c6 <I2C_Master_ADDR+0x2d0>
 80041c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c2:	2b20      	cmp	r3, #32
 80041c4:	d107      	bne.n	80041d6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	685a      	ldr	r2, [r3, #4]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041d4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041d6:	2300      	movs	r3, #0
 80041d8:	613b      	str	r3, [r7, #16]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	613b      	str	r3, [r7, #16]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	613b      	str	r3, [r7, #16]
 80041ea:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80041f2:	e00b      	b.n	800420c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041f4:	2300      	movs	r3, #0
 80041f6:	60fb      	str	r3, [r7, #12]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	60fb      	str	r3, [r7, #12]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	60fb      	str	r3, [r7, #12]
 8004208:	68fb      	ldr	r3, [r7, #12]
}
 800420a:	e7ff      	b.n	800420c <I2C_Master_ADDR+0x316>
 800420c:	bf00      	nop
 800420e:	3744      	adds	r7, #68	; 0x44
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004226:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800422c:	b29b      	uxth	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d02b      	beq.n	800428a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	781a      	ldrb	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004242:	1c5a      	adds	r2, r3, #1
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800424c:	b29b      	uxth	r3, r3
 800424e:	3b01      	subs	r3, #1
 8004250:	b29a      	uxth	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425a:	b29b      	uxth	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	d114      	bne.n	800428a <I2C_SlaveTransmit_TXE+0x72>
 8004260:	7bfb      	ldrb	r3, [r7, #15]
 8004262:	2b29      	cmp	r3, #41	; 0x29
 8004264:	d111      	bne.n	800428a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004274:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2221      	movs	r2, #33	; 0x21
 800427a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2228      	movs	r2, #40	; 0x28
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f7ff f9e7 	bl	8003658 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800428a:	bf00      	nop
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004292:	b480      	push	{r7}
 8004294:	b083      	sub	sp, #12
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800429e:	b29b      	uxth	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d011      	beq.n	80042c8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a8:	781a      	ldrb	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	1c5a      	adds	r2, r3, #1
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042be:	b29b      	uxth	r3, r3
 80042c0:	3b01      	subs	r3, #1
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042e2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d02c      	beq.n	8004348 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	691a      	ldr	r2, [r3, #16]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	b2d2      	uxtb	r2, r2
 80042fa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	1c5a      	adds	r2, r3, #1
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800430a:	b29b      	uxth	r3, r3
 800430c:	3b01      	subs	r3, #1
 800430e:	b29a      	uxth	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004318:	b29b      	uxth	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d114      	bne.n	8004348 <I2C_SlaveReceive_RXNE+0x74>
 800431e:	7bfb      	ldrb	r3, [r7, #15]
 8004320:	2b2a      	cmp	r3, #42	; 0x2a
 8004322:	d111      	bne.n	8004348 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004332:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2222      	movs	r2, #34	; 0x22
 8004338:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2228      	movs	r2, #40	; 0x28
 800433e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7ff f992 	bl	800366c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004348:	bf00      	nop
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800435c:	b29b      	uxth	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d012      	beq.n	8004388 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	691a      	ldr	r2, [r3, #16]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436c:	b2d2      	uxtb	r2, r2
 800436e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004374:	1c5a      	adds	r2, r3, #1
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800437e:	b29b      	uxth	r3, r3
 8004380:	3b01      	subs	r3, #1
 8004382:	b29a      	uxth	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800439e:	2300      	movs	r3, #0
 80043a0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80043ae:	2b28      	cmp	r3, #40	; 0x28
 80043b0:	d127      	bne.n	8004402 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043c0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	089b      	lsrs	r3, r3, #2
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80043ce:	2301      	movs	r3, #1
 80043d0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	09db      	lsrs	r3, r3, #7
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d103      	bne.n	80043e6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	81bb      	strh	r3, [r7, #12]
 80043e4:	e002      	b.n	80043ec <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80043f4:	89ba      	ldrh	r2, [r7, #12]
 80043f6:	7bfb      	ldrb	r3, [r7, #15]
 80043f8:	4619      	mov	r1, r3
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7ff f940 	bl	8003680 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004400:	e00e      	b.n	8004420 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004402:	2300      	movs	r3, #0
 8004404:	60bb      	str	r3, [r7, #8]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	695b      	ldr	r3, [r3, #20]
 800440c:	60bb      	str	r3, [r7, #8]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	60bb      	str	r3, [r7, #8]
 8004416:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004420:	bf00      	nop
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004436:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004446:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004448:	2300      	movs	r3, #0
 800444a:	60bb      	str	r3, [r7, #8]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	60bb      	str	r3, [r7, #8]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f042 0201 	orr.w	r2, r2, #1
 8004462:	601a      	str	r2, [r3, #0]
 8004464:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004474:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004480:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004484:	d172      	bne.n	800456c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004486:	7bfb      	ldrb	r3, [r7, #15]
 8004488:	2b22      	cmp	r3, #34	; 0x22
 800448a:	d002      	beq.n	8004492 <I2C_Slave_STOPF+0x6a>
 800448c:	7bfb      	ldrb	r3, [r7, #15]
 800448e:	2b2a      	cmp	r3, #42	; 0x2a
 8004490:	d135      	bne.n	80044fe <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	b29a      	uxth	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d005      	beq.n	80044b6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ae:	f043 0204 	orr.w	r2, r3, #4
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044c4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7fd ff5e 	bl	800238c <HAL_DMA_GetState>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d049      	beq.n	800456a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044da:	4a69      	ldr	r2, [pc, #420]	; (8004680 <I2C_Slave_STOPF+0x258>)
 80044dc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7fd fda6 	bl	8002034 <HAL_DMA_Abort_IT>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d03d      	beq.n	800456a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044f8:	4610      	mov	r0, r2
 80044fa:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80044fc:	e035      	b.n	800456a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	b29a      	uxth	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004510:	b29b      	uxth	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d005      	beq.n	8004522 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	f043 0204 	orr.w	r2, r3, #4
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004530:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004536:	4618      	mov	r0, r3
 8004538:	f7fd ff28 	bl	800238c <HAL_DMA_GetState>
 800453c:	4603      	mov	r3, r0
 800453e:	2b01      	cmp	r3, #1
 8004540:	d014      	beq.n	800456c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004546:	4a4e      	ldr	r2, [pc, #312]	; (8004680 <I2C_Slave_STOPF+0x258>)
 8004548:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800454e:	4618      	mov	r0, r3
 8004550:	f7fd fd70 	bl	8002034 <HAL_DMA_Abort_IT>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d008      	beq.n	800456c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800455e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004564:	4610      	mov	r0, r2
 8004566:	4798      	blx	r3
 8004568:	e000      	b.n	800456c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800456a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004570:	b29b      	uxth	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d03e      	beq.n	80045f4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	695b      	ldr	r3, [r3, #20]
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b04      	cmp	r3, #4
 8004582:	d112      	bne.n	80045aa <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	691a      	ldr	r2, [r3, #16]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458e:	b2d2      	uxtb	r2, r2
 8004590:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004596:	1c5a      	adds	r2, r3, #1
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	3b01      	subs	r3, #1
 80045a4:	b29a      	uxth	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b4:	2b40      	cmp	r3, #64	; 0x40
 80045b6:	d112      	bne.n	80045de <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	691a      	ldr	r2, [r3, #16]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c2:	b2d2      	uxtb	r2, r2
 80045c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ca:	1c5a      	adds	r2, r3, #1
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	3b01      	subs	r3, #1
 80045d8:	b29a      	uxth	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d005      	beq.n	80045f4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ec:	f043 0204 	orr.w	r2, r3, #4
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d003      	beq.n	8004604 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 f8b3 	bl	8004768 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004602:	e039      	b.n	8004678 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004604:	7bfb      	ldrb	r3, [r7, #15]
 8004606:	2b2a      	cmp	r3, #42	; 0x2a
 8004608:	d109      	bne.n	800461e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2228      	movs	r2, #40	; 0x28
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f7ff f827 	bl	800366c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b28      	cmp	r3, #40	; 0x28
 8004628:	d111      	bne.n	800464e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a15      	ldr	r2, [pc, #84]	; (8004684 <I2C_Slave_STOPF+0x25c>)
 800462e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2220      	movs	r2, #32
 800463a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7ff f828 	bl	800369c <HAL_I2C_ListenCpltCallback>
}
 800464c:	e014      	b.n	8004678 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004652:	2b22      	cmp	r3, #34	; 0x22
 8004654:	d002      	beq.n	800465c <I2C_Slave_STOPF+0x234>
 8004656:	7bfb      	ldrb	r3, [r7, #15]
 8004658:	2b22      	cmp	r3, #34	; 0x22
 800465a:	d10d      	bne.n	8004678 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2220      	movs	r2, #32
 8004666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f7fe fffa 	bl	800366c <HAL_I2C_SlaveRxCpltCallback>
}
 8004678:	bf00      	nop
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	08004cc9 	.word	0x08004cc9
 8004684:	ffff0000 	.word	0xffff0000

08004688 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004696:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	2b08      	cmp	r3, #8
 80046a2:	d002      	beq.n	80046aa <I2C_Slave_AF+0x22>
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2b20      	cmp	r3, #32
 80046a8:	d129      	bne.n	80046fe <I2C_Slave_AF+0x76>
 80046aa:	7bfb      	ldrb	r3, [r7, #15]
 80046ac:	2b28      	cmp	r3, #40	; 0x28
 80046ae:	d126      	bne.n	80046fe <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a2c      	ldr	r2, [pc, #176]	; (8004764 <I2C_Slave_AF+0xdc>)
 80046b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046c4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046ce:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046de:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2220      	movs	r2, #32
 80046ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f7fe ffd0 	bl	800369c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80046fc:	e02e      	b.n	800475c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80046fe:	7bfb      	ldrb	r3, [r7, #15]
 8004700:	2b21      	cmp	r3, #33	; 0x21
 8004702:	d126      	bne.n	8004752 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a17      	ldr	r2, [pc, #92]	; (8004764 <I2C_Slave_AF+0xdc>)
 8004708:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2221      	movs	r2, #33	; 0x21
 800470e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2220      	movs	r2, #32
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800472e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004738:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004748:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f7fe ff84 	bl	8003658 <HAL_I2C_SlaveTxCpltCallback>
}
 8004750:	e004      	b.n	800475c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800475a:	615a      	str	r2, [r3, #20]
}
 800475c:	bf00      	nop
 800475e:	3710      	adds	r7, #16
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	ffff0000 	.word	0xffff0000

08004768 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004776:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800477e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004780:	7bbb      	ldrb	r3, [r7, #14]
 8004782:	2b10      	cmp	r3, #16
 8004784:	d002      	beq.n	800478c <I2C_ITError+0x24>
 8004786:	7bbb      	ldrb	r3, [r7, #14]
 8004788:	2b40      	cmp	r3, #64	; 0x40
 800478a:	d10a      	bne.n	80047a2 <I2C_ITError+0x3a>
 800478c:	7bfb      	ldrb	r3, [r7, #15]
 800478e:	2b22      	cmp	r3, #34	; 0x22
 8004790:	d107      	bne.n	80047a2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047a0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80047a2:	7bfb      	ldrb	r3, [r7, #15]
 80047a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80047a8:	2b28      	cmp	r3, #40	; 0x28
 80047aa:	d107      	bne.n	80047bc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2228      	movs	r2, #40	; 0x28
 80047b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80047ba:	e015      	b.n	80047e8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047ca:	d00a      	beq.n	80047e2 <I2C_ITError+0x7a>
 80047cc:	7bfb      	ldrb	r3, [r7, #15]
 80047ce:	2b60      	cmp	r3, #96	; 0x60
 80047d0:	d007      	beq.n	80047e2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2220      	movs	r2, #32
 80047d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047f6:	d162      	bne.n	80048be <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685a      	ldr	r2, [r3, #4]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004806:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800480c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b01      	cmp	r3, #1
 8004814:	d020      	beq.n	8004858 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800481a:	4a6a      	ldr	r2, [pc, #424]	; (80049c4 <I2C_ITError+0x25c>)
 800481c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004822:	4618      	mov	r0, r3
 8004824:	f7fd fc06 	bl	8002034 <HAL_DMA_Abort_IT>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	f000 8089 	beq.w	8004942 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f022 0201 	bic.w	r2, r2, #1
 800483e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2220      	movs	r2, #32
 8004844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800484c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004852:	4610      	mov	r0, r2
 8004854:	4798      	blx	r3
 8004856:	e074      	b.n	8004942 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485c:	4a59      	ldr	r2, [pc, #356]	; (80049c4 <I2C_ITError+0x25c>)
 800485e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004864:	4618      	mov	r0, r3
 8004866:	f7fd fbe5 	bl	8002034 <HAL_DMA_Abort_IT>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d068      	beq.n	8004942 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800487a:	2b40      	cmp	r3, #64	; 0x40
 800487c:	d10b      	bne.n	8004896 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	691a      	ldr	r2, [r3, #16]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004888:	b2d2      	uxtb	r2, r2
 800488a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004890:	1c5a      	adds	r2, r3, #1
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f022 0201 	bic.w	r2, r2, #1
 80048a4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2220      	movs	r2, #32
 80048aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048b8:	4610      	mov	r0, r2
 80048ba:	4798      	blx	r3
 80048bc:	e041      	b.n	8004942 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b60      	cmp	r3, #96	; 0x60
 80048c8:	d125      	bne.n	8004916 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2220      	movs	r2, #32
 80048ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e2:	2b40      	cmp	r3, #64	; 0x40
 80048e4:	d10b      	bne.n	80048fe <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	691a      	ldr	r2, [r3, #16]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f0:	b2d2      	uxtb	r2, r2
 80048f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f8:	1c5a      	adds	r2, r3, #1
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f022 0201 	bic.w	r2, r2, #1
 800490c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7fe feec 	bl	80036ec <HAL_I2C_AbortCpltCallback>
 8004914:	e015      	b.n	8004942 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	695b      	ldr	r3, [r3, #20]
 800491c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004920:	2b40      	cmp	r3, #64	; 0x40
 8004922:	d10b      	bne.n	800493c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	691a      	ldr	r2, [r3, #16]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	b2d2      	uxtb	r2, r2
 8004930:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004936:	1c5a      	adds	r2, r3, #1
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f7fe fecb 	bl	80036d8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004946:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10e      	bne.n	8004970 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004958:	2b00      	cmp	r3, #0
 800495a:	d109      	bne.n	8004970 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004962:	2b00      	cmp	r3, #0
 8004964:	d104      	bne.n	8004970 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800496c:	2b00      	cmp	r3, #0
 800496e:	d007      	beq.n	8004980 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800497e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004986:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498c:	f003 0304 	and.w	r3, r3, #4
 8004990:	2b04      	cmp	r3, #4
 8004992:	d113      	bne.n	80049bc <I2C_ITError+0x254>
 8004994:	7bfb      	ldrb	r3, [r7, #15]
 8004996:	2b28      	cmp	r3, #40	; 0x28
 8004998:	d110      	bne.n	80049bc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a0a      	ldr	r2, [pc, #40]	; (80049c8 <I2C_ITError+0x260>)
 800499e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2220      	movs	r2, #32
 80049aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f7fe fe70 	bl	800369c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80049bc:	bf00      	nop
 80049be:	3710      	adds	r7, #16
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	08004cc9 	.word	0x08004cc9
 80049c8:	ffff0000 	.word	0xffff0000

080049cc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b088      	sub	sp, #32
 80049d0:	af02      	add	r7, sp, #8
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	4608      	mov	r0, r1
 80049d6:	4611      	mov	r1, r2
 80049d8:	461a      	mov	r2, r3
 80049da:	4603      	mov	r3, r0
 80049dc:	817b      	strh	r3, [r7, #10]
 80049de:	460b      	mov	r3, r1
 80049e0:	813b      	strh	r3, [r7, #8]
 80049e2:	4613      	mov	r3, r2
 80049e4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f8:	9300      	str	r3, [sp, #0]
 80049fa:	6a3b      	ldr	r3, [r7, #32]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f000 fa08 	bl	8004e18 <I2C_WaitOnFlagUntilTimeout>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00d      	beq.n	8004a2a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a1c:	d103      	bne.n	8004a26 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a24:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e05f      	b.n	8004aea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a2a:	897b      	ldrh	r3, [r7, #10]
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	461a      	mov	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3c:	6a3a      	ldr	r2, [r7, #32]
 8004a3e:	492d      	ldr	r1, [pc, #180]	; (8004af4 <I2C_RequestMemoryWrite+0x128>)
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f000 fa40 	bl	8004ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d001      	beq.n	8004a50 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e04c      	b.n	8004aea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a50:	2300      	movs	r3, #0
 8004a52:	617b      	str	r3, [r7, #20]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	617b      	str	r3, [r7, #20]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	617b      	str	r3, [r7, #20]
 8004a64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a68:	6a39      	ldr	r1, [r7, #32]
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f000 faaa 	bl	8004fc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00d      	beq.n	8004a92 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7a:	2b04      	cmp	r3, #4
 8004a7c:	d107      	bne.n	8004a8e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e02b      	b.n	8004aea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a92:	88fb      	ldrh	r3, [r7, #6]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d105      	bne.n	8004aa4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a98:	893b      	ldrh	r3, [r7, #8]
 8004a9a:	b2da      	uxtb	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	611a      	str	r2, [r3, #16]
 8004aa2:	e021      	b.n	8004ae8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004aa4:	893b      	ldrh	r3, [r7, #8]
 8004aa6:	0a1b      	lsrs	r3, r3, #8
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	b2da      	uxtb	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab4:	6a39      	ldr	r1, [r7, #32]
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	f000 fa84 	bl	8004fc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00d      	beq.n	8004ade <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	2b04      	cmp	r3, #4
 8004ac8:	d107      	bne.n	8004ada <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ad8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e005      	b.n	8004aea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ade:	893b      	ldrh	r3, [r7, #8]
 8004ae0:	b2da      	uxtb	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3718      	adds	r7, #24
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	00010002 	.word	0x00010002

08004af8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b088      	sub	sp, #32
 8004afc:	af02      	add	r7, sp, #8
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	4608      	mov	r0, r1
 8004b02:	4611      	mov	r1, r2
 8004b04:	461a      	mov	r2, r3
 8004b06:	4603      	mov	r3, r0
 8004b08:	817b      	strh	r3, [r7, #10]
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	813b      	strh	r3, [r7, #8]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b20:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	6a3b      	ldr	r3, [r7, #32]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b3e:	68f8      	ldr	r0, [r7, #12]
 8004b40:	f000 f96a 	bl	8004e18 <I2C_WaitOnFlagUntilTimeout>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00d      	beq.n	8004b66 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b58:	d103      	bne.n	8004b62 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b60:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e0aa      	b.n	8004cbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b66:	897b      	ldrh	r3, [r7, #10]
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b78:	6a3a      	ldr	r2, [r7, #32]
 8004b7a:	4952      	ldr	r1, [pc, #328]	; (8004cc4 <I2C_RequestMemoryRead+0x1cc>)
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	f000 f9a2 	bl	8004ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d001      	beq.n	8004b8c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e097      	b.n	8004cbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	617b      	str	r3, [r7, #20]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	617b      	str	r3, [r7, #20]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	617b      	str	r3, [r7, #20]
 8004ba0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ba4:	6a39      	ldr	r1, [r7, #32]
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f000 fa0c 	bl	8004fc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00d      	beq.n	8004bce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb6:	2b04      	cmp	r3, #4
 8004bb8:	d107      	bne.n	8004bca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bc8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e076      	b.n	8004cbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004bce:	88fb      	ldrh	r3, [r7, #6]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d105      	bne.n	8004be0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004bd4:	893b      	ldrh	r3, [r7, #8]
 8004bd6:	b2da      	uxtb	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	611a      	str	r2, [r3, #16]
 8004bde:	e021      	b.n	8004c24 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004be0:	893b      	ldrh	r3, [r7, #8]
 8004be2:	0a1b      	lsrs	r3, r3, #8
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bf0:	6a39      	ldr	r1, [r7, #32]
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f000 f9e6 	bl	8004fc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00d      	beq.n	8004c1a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c02:	2b04      	cmp	r3, #4
 8004c04:	d107      	bne.n	8004c16 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e050      	b.n	8004cbc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c1a:	893b      	ldrh	r3, [r7, #8]
 8004c1c:	b2da      	uxtb	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c26:	6a39      	ldr	r1, [r7, #32]
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f000 f9cb 	bl	8004fc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d00d      	beq.n	8004c50 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c38:	2b04      	cmp	r3, #4
 8004c3a:	d107      	bne.n	8004c4c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c4a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e035      	b.n	8004cbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c5e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	9300      	str	r3, [sp, #0]
 8004c64:	6a3b      	ldr	r3, [r7, #32]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f000 f8d3 	bl	8004e18 <I2C_WaitOnFlagUntilTimeout>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00d      	beq.n	8004c94 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c86:	d103      	bne.n	8004c90 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e013      	b.n	8004cbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c94:	897b      	ldrh	r3, [r7, #10]
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	f043 0301 	orr.w	r3, r3, #1
 8004c9c:	b2da      	uxtb	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	6a3a      	ldr	r2, [r7, #32]
 8004ca8:	4906      	ldr	r1, [pc, #24]	; (8004cc4 <I2C_RequestMemoryRead+0x1cc>)
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f000 f90b 	bl	8004ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e000      	b.n	8004cbc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3718      	adds	r7, #24
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	00010002 	.word	0x00010002

08004cc8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b086      	sub	sp, #24
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004ce2:	4b4b      	ldr	r3, [pc, #300]	; (8004e10 <I2C_DMAAbort+0x148>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	08db      	lsrs	r3, r3, #3
 8004ce8:	4a4a      	ldr	r2, [pc, #296]	; (8004e14 <I2C_DMAAbort+0x14c>)
 8004cea:	fba2 2303 	umull	r2, r3, r2, r3
 8004cee:	0a1a      	lsrs	r2, r3, #8
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	00da      	lsls	r2, r3, #3
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d106      	bne.n	8004d10 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	f043 0220 	orr.w	r2, r3, #32
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004d0e:	e00a      	b.n	8004d26 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	3b01      	subs	r3, #1
 8004d14:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d24:	d0ea      	beq.n	8004cfc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d003      	beq.n	8004d36 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d32:	2200      	movs	r2, #0
 8004d34:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d003      	beq.n	8004d46 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d42:	2200      	movs	r2, #0
 8004d44:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d54:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d003      	beq.n	8004d6c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d68:	2200      	movs	r2, #0
 8004d6a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d003      	beq.n	8004d7c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d78:	2200      	movs	r2, #0
 8004d7a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f022 0201 	bic.w	r2, r2, #1
 8004d8a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2b60      	cmp	r3, #96	; 0x60
 8004d96:	d10e      	bne.n	8004db6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	2200      	movs	r2, #0
 8004dac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004dae:	6978      	ldr	r0, [r7, #20]
 8004db0:	f7fe fc9c 	bl	80036ec <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004db4:	e027      	b.n	8004e06 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004db6:	7cfb      	ldrb	r3, [r7, #19]
 8004db8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004dbc:	2b28      	cmp	r3, #40	; 0x28
 8004dbe:	d117      	bne.n	8004df0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f042 0201 	orr.w	r2, r2, #1
 8004dce:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004dde:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	2200      	movs	r2, #0
 8004de4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	2228      	movs	r2, #40	; 0x28
 8004dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004dee:	e007      	b.n	8004e00 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	2220      	movs	r2, #32
 8004df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004e00:	6978      	ldr	r0, [r7, #20]
 8004e02:	f7fe fc69 	bl	80036d8 <HAL_I2C_ErrorCallback>
}
 8004e06:	bf00      	nop
 8004e08:	3718      	adds	r7, #24
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	2000001c 	.word	0x2000001c
 8004e14:	14f8b589 	.word	0x14f8b589

08004e18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	603b      	str	r3, [r7, #0]
 8004e24:	4613      	mov	r3, r2
 8004e26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e28:	e025      	b.n	8004e76 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e30:	d021      	beq.n	8004e76 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e32:	f7fc feb7 	bl	8001ba4 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	683a      	ldr	r2, [r7, #0]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d302      	bcc.n	8004e48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d116      	bne.n	8004e76 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2220      	movs	r2, #32
 8004e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e62:	f043 0220 	orr.w	r2, r3, #32
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e023      	b.n	8004ebe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	0c1b      	lsrs	r3, r3, #16
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d10d      	bne.n	8004e9c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	43da      	mvns	r2, r3
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	bf0c      	ite	eq
 8004e92:	2301      	moveq	r3, #1
 8004e94:	2300      	movne	r3, #0
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	461a      	mov	r2, r3
 8004e9a:	e00c      	b.n	8004eb6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	43da      	mvns	r2, r3
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	bf0c      	ite	eq
 8004eae:	2301      	moveq	r3, #1
 8004eb0:	2300      	movne	r3, #0
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	79fb      	ldrb	r3, [r7, #7]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d0b6      	beq.n	8004e2a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b084      	sub	sp, #16
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	60f8      	str	r0, [r7, #12]
 8004ece:	60b9      	str	r1, [r7, #8]
 8004ed0:	607a      	str	r2, [r7, #4]
 8004ed2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ed4:	e051      	b.n	8004f7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	695b      	ldr	r3, [r3, #20]
 8004edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ee4:	d123      	bne.n	8004f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ef4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004efe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2220      	movs	r2, #32
 8004f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1a:	f043 0204 	orr.w	r2, r3, #4
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e046      	b.n	8004fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f34:	d021      	beq.n	8004f7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f36:	f7fc fe35 	bl	8001ba4 <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d302      	bcc.n	8004f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d116      	bne.n	8004f7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2220      	movs	r2, #32
 8004f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f66:	f043 0220 	orr.w	r2, r3, #32
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e020      	b.n	8004fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	0c1b      	lsrs	r3, r3, #16
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d10c      	bne.n	8004f9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	43da      	mvns	r2, r3
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	4013      	ands	r3, r2
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	bf14      	ite	ne
 8004f96:	2301      	movne	r3, #1
 8004f98:	2300      	moveq	r3, #0
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	e00b      	b.n	8004fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	43da      	mvns	r2, r3
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	4013      	ands	r3, r2
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	bf14      	ite	ne
 8004fb0:	2301      	movne	r3, #1
 8004fb2:	2300      	moveq	r3, #0
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d18d      	bne.n	8004ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3710      	adds	r7, #16
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fd0:	e02d      	b.n	800502e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f000 f900 	bl	80051d8 <I2C_IsAcknowledgeFailed>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d001      	beq.n	8004fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e02d      	b.n	800503e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe8:	d021      	beq.n	800502e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fea:	f7fc fddb 	bl	8001ba4 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	68ba      	ldr	r2, [r7, #8]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d302      	bcc.n	8005000 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d116      	bne.n	800502e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2220      	movs	r2, #32
 800500a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501a:	f043 0220 	orr.w	r2, r3, #32
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e007      	b.n	800503e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005038:	2b80      	cmp	r3, #128	; 0x80
 800503a:	d1ca      	bne.n	8004fd2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3710      	adds	r7, #16
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b084      	sub	sp, #16
 800504a:	af00      	add	r7, sp, #0
 800504c:	60f8      	str	r0, [r7, #12]
 800504e:	60b9      	str	r1, [r7, #8]
 8005050:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005052:	e02d      	b.n	80050b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005054:	68f8      	ldr	r0, [r7, #12]
 8005056:	f000 f8bf 	bl	80051d8 <I2C_IsAcknowledgeFailed>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d001      	beq.n	8005064 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e02d      	b.n	80050c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800506a:	d021      	beq.n	80050b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800506c:	f7fc fd9a 	bl	8001ba4 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	429a      	cmp	r2, r3
 800507a:	d302      	bcc.n	8005082 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d116      	bne.n	80050b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2220      	movs	r2, #32
 800508c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509c:	f043 0220 	orr.w	r2, r3, #32
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e007      	b.n	80050c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	f003 0304 	and.w	r3, r3, #4
 80050ba:	2b04      	cmp	r3, #4
 80050bc:	d1ca      	bne.n	8005054 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3710      	adds	r7, #16
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050d0:	2300      	movs	r3, #0
 80050d2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80050d4:	4b13      	ldr	r3, [pc, #76]	; (8005124 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	08db      	lsrs	r3, r3, #3
 80050da:	4a13      	ldr	r2, [pc, #76]	; (8005128 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80050dc:	fba2 2303 	umull	r2, r3, r2, r3
 80050e0:	0a1a      	lsrs	r2, r3, #8
 80050e2:	4613      	mov	r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4413      	add	r3, r2
 80050e8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	3b01      	subs	r3, #1
 80050ee:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d107      	bne.n	8005106 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fa:	f043 0220 	orr.w	r2, r3, #32
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e008      	b.n	8005118 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005114:	d0e9      	beq.n	80050ea <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3714      	adds	r7, #20
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr
 8005124:	2000001c 	.word	0x2000001c
 8005128:	14f8b589 	.word	0x14f8b589

0800512c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005138:	e042      	b.n	80051c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	695b      	ldr	r3, [r3, #20]
 8005140:	f003 0310 	and.w	r3, r3, #16
 8005144:	2b10      	cmp	r3, #16
 8005146:	d119      	bne.n	800517c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f06f 0210 	mvn.w	r2, #16
 8005150:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2220      	movs	r2, #32
 800515c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e029      	b.n	80051d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800517c:	f7fc fd12 	bl	8001ba4 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	68ba      	ldr	r2, [r7, #8]
 8005188:	429a      	cmp	r2, r3
 800518a:	d302      	bcc.n	8005192 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d116      	bne.n	80051c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2200      	movs	r2, #0
 8005196:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2220      	movs	r2, #32
 800519c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ac:	f043 0220 	orr.w	r2, r3, #32
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e007      	b.n	80051d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ca:	2b40      	cmp	r3, #64	; 0x40
 80051cc:	d1b5      	bne.n	800513a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3710      	adds	r7, #16
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051ee:	d11b      	bne.n	8005228 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80051f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2220      	movs	r2, #32
 8005204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005214:	f043 0204 	orr.w	r2, r3, #4
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e000      	b.n	800522a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr

08005236 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005236:	b480      	push	{r7}
 8005238:	b083      	sub	sp, #12
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005242:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005246:	d103      	bne.n	8005250 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800524e:	e007      	b.n	8005260 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005254:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005258:	d102      	bne.n	8005260 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2208      	movs	r2, #8
 800525e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d101      	bne.n	800527e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e267      	b.n	800574e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0301 	and.w	r3, r3, #1
 8005286:	2b00      	cmp	r3, #0
 8005288:	d075      	beq.n	8005376 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800528a:	4b88      	ldr	r3, [pc, #544]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f003 030c 	and.w	r3, r3, #12
 8005292:	2b04      	cmp	r3, #4
 8005294:	d00c      	beq.n	80052b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005296:	4b85      	ldr	r3, [pc, #532]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800529e:	2b08      	cmp	r3, #8
 80052a0:	d112      	bne.n	80052c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052a2:	4b82      	ldr	r3, [pc, #520]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052ae:	d10b      	bne.n	80052c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052b0:	4b7e      	ldr	r3, [pc, #504]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d05b      	beq.n	8005374 <HAL_RCC_OscConfig+0x108>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d157      	bne.n	8005374 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e242      	b.n	800574e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052d0:	d106      	bne.n	80052e0 <HAL_RCC_OscConfig+0x74>
 80052d2:	4b76      	ldr	r3, [pc, #472]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a75      	ldr	r2, [pc, #468]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 80052d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052dc:	6013      	str	r3, [r2, #0]
 80052de:	e01d      	b.n	800531c <HAL_RCC_OscConfig+0xb0>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052e8:	d10c      	bne.n	8005304 <HAL_RCC_OscConfig+0x98>
 80052ea:	4b70      	ldr	r3, [pc, #448]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a6f      	ldr	r2, [pc, #444]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 80052f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052f4:	6013      	str	r3, [r2, #0]
 80052f6:	4b6d      	ldr	r3, [pc, #436]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a6c      	ldr	r2, [pc, #432]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 80052fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005300:	6013      	str	r3, [r2, #0]
 8005302:	e00b      	b.n	800531c <HAL_RCC_OscConfig+0xb0>
 8005304:	4b69      	ldr	r3, [pc, #420]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a68      	ldr	r2, [pc, #416]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 800530a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800530e:	6013      	str	r3, [r2, #0]
 8005310:	4b66      	ldr	r3, [pc, #408]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a65      	ldr	r2, [pc, #404]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 8005316:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800531a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d013      	beq.n	800534c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005324:	f7fc fc3e 	bl	8001ba4 <HAL_GetTick>
 8005328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800532a:	e008      	b.n	800533e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800532c:	f7fc fc3a 	bl	8001ba4 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	2b64      	cmp	r3, #100	; 0x64
 8005338:	d901      	bls.n	800533e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e207      	b.n	800574e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800533e:	4b5b      	ldr	r3, [pc, #364]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d0f0      	beq.n	800532c <HAL_RCC_OscConfig+0xc0>
 800534a:	e014      	b.n	8005376 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800534c:	f7fc fc2a 	bl	8001ba4 <HAL_GetTick>
 8005350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005352:	e008      	b.n	8005366 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005354:	f7fc fc26 	bl	8001ba4 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	2b64      	cmp	r3, #100	; 0x64
 8005360:	d901      	bls.n	8005366 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e1f3      	b.n	800574e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005366:	4b51      	ldr	r3, [pc, #324]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1f0      	bne.n	8005354 <HAL_RCC_OscConfig+0xe8>
 8005372:	e000      	b.n	8005376 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005374:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0302 	and.w	r3, r3, #2
 800537e:	2b00      	cmp	r3, #0
 8005380:	d063      	beq.n	800544a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005382:	4b4a      	ldr	r3, [pc, #296]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f003 030c 	and.w	r3, r3, #12
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00b      	beq.n	80053a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800538e:	4b47      	ldr	r3, [pc, #284]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005396:	2b08      	cmp	r3, #8
 8005398:	d11c      	bne.n	80053d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800539a:	4b44      	ldr	r3, [pc, #272]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d116      	bne.n	80053d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053a6:	4b41      	ldr	r3, [pc, #260]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d005      	beq.n	80053be <HAL_RCC_OscConfig+0x152>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d001      	beq.n	80053be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e1c7      	b.n	800574e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053be:	4b3b      	ldr	r3, [pc, #236]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	00db      	lsls	r3, r3, #3
 80053cc:	4937      	ldr	r1, [pc, #220]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053d2:	e03a      	b.n	800544a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d020      	beq.n	800541e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053dc:	4b34      	ldr	r3, [pc, #208]	; (80054b0 <HAL_RCC_OscConfig+0x244>)
 80053de:	2201      	movs	r2, #1
 80053e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e2:	f7fc fbdf 	bl	8001ba4 <HAL_GetTick>
 80053e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053e8:	e008      	b.n	80053fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053ea:	f7fc fbdb 	bl	8001ba4 <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d901      	bls.n	80053fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e1a8      	b.n	800574e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053fc:	4b2b      	ldr	r3, [pc, #172]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0302 	and.w	r3, r3, #2
 8005404:	2b00      	cmp	r3, #0
 8005406:	d0f0      	beq.n	80053ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005408:	4b28      	ldr	r3, [pc, #160]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	00db      	lsls	r3, r3, #3
 8005416:	4925      	ldr	r1, [pc, #148]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 8005418:	4313      	orrs	r3, r2
 800541a:	600b      	str	r3, [r1, #0]
 800541c:	e015      	b.n	800544a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800541e:	4b24      	ldr	r3, [pc, #144]	; (80054b0 <HAL_RCC_OscConfig+0x244>)
 8005420:	2200      	movs	r2, #0
 8005422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005424:	f7fc fbbe 	bl	8001ba4 <HAL_GetTick>
 8005428:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800542a:	e008      	b.n	800543e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800542c:	f7fc fbba 	bl	8001ba4 <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	2b02      	cmp	r3, #2
 8005438:	d901      	bls.n	800543e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e187      	b.n	800574e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800543e:	4b1b      	ldr	r3, [pc, #108]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1f0      	bne.n	800542c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0308 	and.w	r3, r3, #8
 8005452:	2b00      	cmp	r3, #0
 8005454:	d036      	beq.n	80054c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d016      	beq.n	800548c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800545e:	4b15      	ldr	r3, [pc, #84]	; (80054b4 <HAL_RCC_OscConfig+0x248>)
 8005460:	2201      	movs	r2, #1
 8005462:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005464:	f7fc fb9e 	bl	8001ba4 <HAL_GetTick>
 8005468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800546a:	e008      	b.n	800547e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800546c:	f7fc fb9a 	bl	8001ba4 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	2b02      	cmp	r3, #2
 8005478:	d901      	bls.n	800547e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e167      	b.n	800574e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800547e:	4b0b      	ldr	r3, [pc, #44]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 8005480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	2b00      	cmp	r3, #0
 8005488:	d0f0      	beq.n	800546c <HAL_RCC_OscConfig+0x200>
 800548a:	e01b      	b.n	80054c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800548c:	4b09      	ldr	r3, [pc, #36]	; (80054b4 <HAL_RCC_OscConfig+0x248>)
 800548e:	2200      	movs	r2, #0
 8005490:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005492:	f7fc fb87 	bl	8001ba4 <HAL_GetTick>
 8005496:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005498:	e00e      	b.n	80054b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800549a:	f7fc fb83 	bl	8001ba4 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d907      	bls.n	80054b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e150      	b.n	800574e <HAL_RCC_OscConfig+0x4e2>
 80054ac:	40023800 	.word	0x40023800
 80054b0:	42470000 	.word	0x42470000
 80054b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054b8:	4b88      	ldr	r3, [pc, #544]	; (80056dc <HAL_RCC_OscConfig+0x470>)
 80054ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054bc:	f003 0302 	and.w	r3, r3, #2
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1ea      	bne.n	800549a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0304 	and.w	r3, r3, #4
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f000 8097 	beq.w	8005600 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054d2:	2300      	movs	r3, #0
 80054d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054d6:	4b81      	ldr	r3, [pc, #516]	; (80056dc <HAL_RCC_OscConfig+0x470>)
 80054d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10f      	bne.n	8005502 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054e2:	2300      	movs	r3, #0
 80054e4:	60bb      	str	r3, [r7, #8]
 80054e6:	4b7d      	ldr	r3, [pc, #500]	; (80056dc <HAL_RCC_OscConfig+0x470>)
 80054e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ea:	4a7c      	ldr	r2, [pc, #496]	; (80056dc <HAL_RCC_OscConfig+0x470>)
 80054ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054f0:	6413      	str	r3, [r2, #64]	; 0x40
 80054f2:	4b7a      	ldr	r3, [pc, #488]	; (80056dc <HAL_RCC_OscConfig+0x470>)
 80054f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054fa:	60bb      	str	r3, [r7, #8]
 80054fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054fe:	2301      	movs	r3, #1
 8005500:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005502:	4b77      	ldr	r3, [pc, #476]	; (80056e0 <HAL_RCC_OscConfig+0x474>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800550a:	2b00      	cmp	r3, #0
 800550c:	d118      	bne.n	8005540 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800550e:	4b74      	ldr	r3, [pc, #464]	; (80056e0 <HAL_RCC_OscConfig+0x474>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a73      	ldr	r2, [pc, #460]	; (80056e0 <HAL_RCC_OscConfig+0x474>)
 8005514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005518:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800551a:	f7fc fb43 	bl	8001ba4 <HAL_GetTick>
 800551e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005520:	e008      	b.n	8005534 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005522:	f7fc fb3f 	bl	8001ba4 <HAL_GetTick>
 8005526:	4602      	mov	r2, r0
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	2b02      	cmp	r3, #2
 800552e:	d901      	bls.n	8005534 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e10c      	b.n	800574e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005534:	4b6a      	ldr	r3, [pc, #424]	; (80056e0 <HAL_RCC_OscConfig+0x474>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800553c:	2b00      	cmp	r3, #0
 800553e:	d0f0      	beq.n	8005522 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	2b01      	cmp	r3, #1
 8005546:	d106      	bne.n	8005556 <HAL_RCC_OscConfig+0x2ea>
 8005548:	4b64      	ldr	r3, [pc, #400]	; (80056dc <HAL_RCC_OscConfig+0x470>)
 800554a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800554c:	4a63      	ldr	r2, [pc, #396]	; (80056dc <HAL_RCC_OscConfig+0x470>)
 800554e:	f043 0301 	orr.w	r3, r3, #1
 8005552:	6713      	str	r3, [r2, #112]	; 0x70
 8005554:	e01c      	b.n	8005590 <HAL_RCC_OscConfig+0x324>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	2b05      	cmp	r3, #5
 800555c:	d10c      	bne.n	8005578 <HAL_RCC_OscConfig+0x30c>
 800555e:	4b5f      	ldr	r3, [pc, #380]	; (80056dc <HAL_RCC_OscConfig+0x470>)
 8005560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005562:	4a5e      	ldr	r2, [pc, #376]	; (80056dc <HAL_RCC_OscConfig+0x470>)
 8005564:	f043 0304 	orr.w	r3, r3, #4
 8005568:	6713      	str	r3, [r2, #112]	; 0x70
 800556a:	4b5c      	ldr	r3, [pc, #368]	; (80056dc <HAL_RCC_OscConfig+0x470>)
 800556c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800556e:	4a5b      	ldr	r2, [pc, #364]	; (80056dc <HAL_RCC_OscConfig+0x470>)
 8005570:	f043 0301 	orr.w	r3, r3, #1
 8005574:	6713      	str	r3, [r2, #112]	; 0x70
 8005576:	e00b      	b.n	8005590 <HAL_RCC_OscConfig+0x324>
 8005578:	4b58      	ldr	r3, [pc, #352]	; (80056dc <HAL_RCC_OscConfig+0x470>)
 800557a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800557c:	4a57      	ldr	r2, [pc, #348]	; (80056dc <HAL_RCC_OscConfig+0x470>)
 800557e:	f023 0301 	bic.w	r3, r3, #1
 8005582:	6713      	str	r3, [r2, #112]	; 0x70
 8005584:	4b55      	ldr	r3, [pc, #340]	; (80056dc <HAL_RCC_OscConfig+0x470>)
 8005586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005588:	4a54      	ldr	r2, [pc, #336]	; (80056dc <HAL_RCC_OscConfig+0x470>)
 800558a:	f023 0304 	bic.w	r3, r3, #4
 800558e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d015      	beq.n	80055c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005598:	f7fc fb04 	bl	8001ba4 <HAL_GetTick>
 800559c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800559e:	e00a      	b.n	80055b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055a0:	f7fc fb00 	bl	8001ba4 <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d901      	bls.n	80055b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e0cb      	b.n	800574e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055b6:	4b49      	ldr	r3, [pc, #292]	; (80056dc <HAL_RCC_OscConfig+0x470>)
 80055b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d0ee      	beq.n	80055a0 <HAL_RCC_OscConfig+0x334>
 80055c2:	e014      	b.n	80055ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055c4:	f7fc faee 	bl	8001ba4 <HAL_GetTick>
 80055c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055ca:	e00a      	b.n	80055e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055cc:	f7fc faea 	bl	8001ba4 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055da:	4293      	cmp	r3, r2
 80055dc:	d901      	bls.n	80055e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e0b5      	b.n	800574e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055e2:	4b3e      	ldr	r3, [pc, #248]	; (80056dc <HAL_RCC_OscConfig+0x470>)
 80055e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1ee      	bne.n	80055cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055ee:	7dfb      	ldrb	r3, [r7, #23]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d105      	bne.n	8005600 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055f4:	4b39      	ldr	r3, [pc, #228]	; (80056dc <HAL_RCC_OscConfig+0x470>)
 80055f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f8:	4a38      	ldr	r2, [pc, #224]	; (80056dc <HAL_RCC_OscConfig+0x470>)
 80055fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	2b00      	cmp	r3, #0
 8005606:	f000 80a1 	beq.w	800574c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800560a:	4b34      	ldr	r3, [pc, #208]	; (80056dc <HAL_RCC_OscConfig+0x470>)
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f003 030c 	and.w	r3, r3, #12
 8005612:	2b08      	cmp	r3, #8
 8005614:	d05c      	beq.n	80056d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	2b02      	cmp	r3, #2
 800561c:	d141      	bne.n	80056a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800561e:	4b31      	ldr	r3, [pc, #196]	; (80056e4 <HAL_RCC_OscConfig+0x478>)
 8005620:	2200      	movs	r2, #0
 8005622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005624:	f7fc fabe 	bl	8001ba4 <HAL_GetTick>
 8005628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800562a:	e008      	b.n	800563e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800562c:	f7fc faba 	bl	8001ba4 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	2b02      	cmp	r3, #2
 8005638:	d901      	bls.n	800563e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e087      	b.n	800574e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800563e:	4b27      	ldr	r3, [pc, #156]	; (80056dc <HAL_RCC_OscConfig+0x470>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1f0      	bne.n	800562c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	69da      	ldr	r2, [r3, #28]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	431a      	orrs	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005658:	019b      	lsls	r3, r3, #6
 800565a:	431a      	orrs	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005660:	085b      	lsrs	r3, r3, #1
 8005662:	3b01      	subs	r3, #1
 8005664:	041b      	lsls	r3, r3, #16
 8005666:	431a      	orrs	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566c:	061b      	lsls	r3, r3, #24
 800566e:	491b      	ldr	r1, [pc, #108]	; (80056dc <HAL_RCC_OscConfig+0x470>)
 8005670:	4313      	orrs	r3, r2
 8005672:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005674:	4b1b      	ldr	r3, [pc, #108]	; (80056e4 <HAL_RCC_OscConfig+0x478>)
 8005676:	2201      	movs	r2, #1
 8005678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800567a:	f7fc fa93 	bl	8001ba4 <HAL_GetTick>
 800567e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005680:	e008      	b.n	8005694 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005682:	f7fc fa8f 	bl	8001ba4 <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	2b02      	cmp	r3, #2
 800568e:	d901      	bls.n	8005694 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e05c      	b.n	800574e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005694:	4b11      	ldr	r3, [pc, #68]	; (80056dc <HAL_RCC_OscConfig+0x470>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d0f0      	beq.n	8005682 <HAL_RCC_OscConfig+0x416>
 80056a0:	e054      	b.n	800574c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056a2:	4b10      	ldr	r3, [pc, #64]	; (80056e4 <HAL_RCC_OscConfig+0x478>)
 80056a4:	2200      	movs	r2, #0
 80056a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056a8:	f7fc fa7c 	bl	8001ba4 <HAL_GetTick>
 80056ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056ae:	e008      	b.n	80056c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056b0:	f7fc fa78 	bl	8001ba4 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d901      	bls.n	80056c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e045      	b.n	800574e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056c2:	4b06      	ldr	r3, [pc, #24]	; (80056dc <HAL_RCC_OscConfig+0x470>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1f0      	bne.n	80056b0 <HAL_RCC_OscConfig+0x444>
 80056ce:	e03d      	b.n	800574c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d107      	bne.n	80056e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e038      	b.n	800574e <HAL_RCC_OscConfig+0x4e2>
 80056dc:	40023800 	.word	0x40023800
 80056e0:	40007000 	.word	0x40007000
 80056e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80056e8:	4b1b      	ldr	r3, [pc, #108]	; (8005758 <HAL_RCC_OscConfig+0x4ec>)
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d028      	beq.n	8005748 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005700:	429a      	cmp	r2, r3
 8005702:	d121      	bne.n	8005748 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800570e:	429a      	cmp	r2, r3
 8005710:	d11a      	bne.n	8005748 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005718:	4013      	ands	r3, r2
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800571e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005720:	4293      	cmp	r3, r2
 8005722:	d111      	bne.n	8005748 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800572e:	085b      	lsrs	r3, r3, #1
 8005730:	3b01      	subs	r3, #1
 8005732:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005734:	429a      	cmp	r2, r3
 8005736:	d107      	bne.n	8005748 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005742:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005744:	429a      	cmp	r2, r3
 8005746:	d001      	beq.n	800574c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e000      	b.n	800574e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3718      	adds	r7, #24
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	40023800 	.word	0x40023800

0800575c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d101      	bne.n	8005770 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e0cc      	b.n	800590a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005770:	4b68      	ldr	r3, [pc, #416]	; (8005914 <HAL_RCC_ClockConfig+0x1b8>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0307 	and.w	r3, r3, #7
 8005778:	683a      	ldr	r2, [r7, #0]
 800577a:	429a      	cmp	r2, r3
 800577c:	d90c      	bls.n	8005798 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800577e:	4b65      	ldr	r3, [pc, #404]	; (8005914 <HAL_RCC_ClockConfig+0x1b8>)
 8005780:	683a      	ldr	r2, [r7, #0]
 8005782:	b2d2      	uxtb	r2, r2
 8005784:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005786:	4b63      	ldr	r3, [pc, #396]	; (8005914 <HAL_RCC_ClockConfig+0x1b8>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0307 	and.w	r3, r3, #7
 800578e:	683a      	ldr	r2, [r7, #0]
 8005790:	429a      	cmp	r2, r3
 8005792:	d001      	beq.n	8005798 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e0b8      	b.n	800590a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0302 	and.w	r3, r3, #2
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d020      	beq.n	80057e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0304 	and.w	r3, r3, #4
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d005      	beq.n	80057bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057b0:	4b59      	ldr	r3, [pc, #356]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	4a58      	ldr	r2, [pc, #352]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 80057b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80057ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0308 	and.w	r3, r3, #8
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d005      	beq.n	80057d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057c8:	4b53      	ldr	r3, [pc, #332]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	4a52      	ldr	r2, [pc, #328]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 80057ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80057d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057d4:	4b50      	ldr	r3, [pc, #320]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	494d      	ldr	r1, [pc, #308]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0301 	and.w	r3, r3, #1
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d044      	beq.n	800587c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d107      	bne.n	800580a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057fa:	4b47      	ldr	r3, [pc, #284]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d119      	bne.n	800583a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e07f      	b.n	800590a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	2b02      	cmp	r3, #2
 8005810:	d003      	beq.n	800581a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005816:	2b03      	cmp	r3, #3
 8005818:	d107      	bne.n	800582a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800581a:	4b3f      	ldr	r3, [pc, #252]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d109      	bne.n	800583a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e06f      	b.n	800590a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800582a:	4b3b      	ldr	r3, [pc, #236]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0302 	and.w	r3, r3, #2
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e067      	b.n	800590a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800583a:	4b37      	ldr	r3, [pc, #220]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f023 0203 	bic.w	r2, r3, #3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	4934      	ldr	r1, [pc, #208]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 8005848:	4313      	orrs	r3, r2
 800584a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800584c:	f7fc f9aa 	bl	8001ba4 <HAL_GetTick>
 8005850:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005852:	e00a      	b.n	800586a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005854:	f7fc f9a6 	bl	8001ba4 <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005862:	4293      	cmp	r3, r2
 8005864:	d901      	bls.n	800586a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e04f      	b.n	800590a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800586a:	4b2b      	ldr	r3, [pc, #172]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f003 020c 	and.w	r2, r3, #12
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	429a      	cmp	r2, r3
 800587a:	d1eb      	bne.n	8005854 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800587c:	4b25      	ldr	r3, [pc, #148]	; (8005914 <HAL_RCC_ClockConfig+0x1b8>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0307 	and.w	r3, r3, #7
 8005884:	683a      	ldr	r2, [r7, #0]
 8005886:	429a      	cmp	r2, r3
 8005888:	d20c      	bcs.n	80058a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800588a:	4b22      	ldr	r3, [pc, #136]	; (8005914 <HAL_RCC_ClockConfig+0x1b8>)
 800588c:	683a      	ldr	r2, [r7, #0]
 800588e:	b2d2      	uxtb	r2, r2
 8005890:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005892:	4b20      	ldr	r3, [pc, #128]	; (8005914 <HAL_RCC_ClockConfig+0x1b8>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0307 	and.w	r3, r3, #7
 800589a:	683a      	ldr	r2, [r7, #0]
 800589c:	429a      	cmp	r2, r3
 800589e:	d001      	beq.n	80058a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e032      	b.n	800590a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0304 	and.w	r3, r3, #4
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d008      	beq.n	80058c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058b0:	4b19      	ldr	r3, [pc, #100]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	4916      	ldr	r1, [pc, #88]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0308 	and.w	r3, r3, #8
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d009      	beq.n	80058e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058ce:	4b12      	ldr	r3, [pc, #72]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	00db      	lsls	r3, r3, #3
 80058dc:	490e      	ldr	r1, [pc, #56]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80058e2:	f000 f821 	bl	8005928 <HAL_RCC_GetSysClockFreq>
 80058e6:	4602      	mov	r2, r0
 80058e8:	4b0b      	ldr	r3, [pc, #44]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	091b      	lsrs	r3, r3, #4
 80058ee:	f003 030f 	and.w	r3, r3, #15
 80058f2:	490a      	ldr	r1, [pc, #40]	; (800591c <HAL_RCC_ClockConfig+0x1c0>)
 80058f4:	5ccb      	ldrb	r3, [r1, r3]
 80058f6:	fa22 f303 	lsr.w	r3, r2, r3
 80058fa:	4a09      	ldr	r2, [pc, #36]	; (8005920 <HAL_RCC_ClockConfig+0x1c4>)
 80058fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80058fe:	4b09      	ldr	r3, [pc, #36]	; (8005924 <HAL_RCC_ClockConfig+0x1c8>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4618      	mov	r0, r3
 8005904:	f7fc f90a 	bl	8001b1c <HAL_InitTick>

  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	40023c00 	.word	0x40023c00
 8005918:	40023800 	.word	0x40023800
 800591c:	080078a0 	.word	0x080078a0
 8005920:	2000001c 	.word	0x2000001c
 8005924:	20000020 	.word	0x20000020

08005928 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005928:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800592c:	b094      	sub	sp, #80	; 0x50
 800592e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005930:	2300      	movs	r3, #0
 8005932:	647b      	str	r3, [r7, #68]	; 0x44
 8005934:	2300      	movs	r3, #0
 8005936:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005938:	2300      	movs	r3, #0
 800593a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800593c:	2300      	movs	r3, #0
 800593e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005940:	4b79      	ldr	r3, [pc, #484]	; (8005b28 <HAL_RCC_GetSysClockFreq+0x200>)
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f003 030c 	and.w	r3, r3, #12
 8005948:	2b08      	cmp	r3, #8
 800594a:	d00d      	beq.n	8005968 <HAL_RCC_GetSysClockFreq+0x40>
 800594c:	2b08      	cmp	r3, #8
 800594e:	f200 80e1 	bhi.w	8005b14 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005952:	2b00      	cmp	r3, #0
 8005954:	d002      	beq.n	800595c <HAL_RCC_GetSysClockFreq+0x34>
 8005956:	2b04      	cmp	r3, #4
 8005958:	d003      	beq.n	8005962 <HAL_RCC_GetSysClockFreq+0x3a>
 800595a:	e0db      	b.n	8005b14 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800595c:	4b73      	ldr	r3, [pc, #460]	; (8005b2c <HAL_RCC_GetSysClockFreq+0x204>)
 800595e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005960:	e0db      	b.n	8005b1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005962:	4b73      	ldr	r3, [pc, #460]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x208>)
 8005964:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005966:	e0d8      	b.n	8005b1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005968:	4b6f      	ldr	r3, [pc, #444]	; (8005b28 <HAL_RCC_GetSysClockFreq+0x200>)
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005970:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005972:	4b6d      	ldr	r3, [pc, #436]	; (8005b28 <HAL_RCC_GetSysClockFreq+0x200>)
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800597a:	2b00      	cmp	r3, #0
 800597c:	d063      	beq.n	8005a46 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800597e:	4b6a      	ldr	r3, [pc, #424]	; (8005b28 <HAL_RCC_GetSysClockFreq+0x200>)
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	099b      	lsrs	r3, r3, #6
 8005984:	2200      	movs	r2, #0
 8005986:	63bb      	str	r3, [r7, #56]	; 0x38
 8005988:	63fa      	str	r2, [r7, #60]	; 0x3c
 800598a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800598c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005990:	633b      	str	r3, [r7, #48]	; 0x30
 8005992:	2300      	movs	r3, #0
 8005994:	637b      	str	r3, [r7, #52]	; 0x34
 8005996:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800599a:	4622      	mov	r2, r4
 800599c:	462b      	mov	r3, r5
 800599e:	f04f 0000 	mov.w	r0, #0
 80059a2:	f04f 0100 	mov.w	r1, #0
 80059a6:	0159      	lsls	r1, r3, #5
 80059a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059ac:	0150      	lsls	r0, r2, #5
 80059ae:	4602      	mov	r2, r0
 80059b0:	460b      	mov	r3, r1
 80059b2:	4621      	mov	r1, r4
 80059b4:	1a51      	subs	r1, r2, r1
 80059b6:	6139      	str	r1, [r7, #16]
 80059b8:	4629      	mov	r1, r5
 80059ba:	eb63 0301 	sbc.w	r3, r3, r1
 80059be:	617b      	str	r3, [r7, #20]
 80059c0:	f04f 0200 	mov.w	r2, #0
 80059c4:	f04f 0300 	mov.w	r3, #0
 80059c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059cc:	4659      	mov	r1, fp
 80059ce:	018b      	lsls	r3, r1, #6
 80059d0:	4651      	mov	r1, sl
 80059d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80059d6:	4651      	mov	r1, sl
 80059d8:	018a      	lsls	r2, r1, #6
 80059da:	4651      	mov	r1, sl
 80059dc:	ebb2 0801 	subs.w	r8, r2, r1
 80059e0:	4659      	mov	r1, fp
 80059e2:	eb63 0901 	sbc.w	r9, r3, r1
 80059e6:	f04f 0200 	mov.w	r2, #0
 80059ea:	f04f 0300 	mov.w	r3, #0
 80059ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059fa:	4690      	mov	r8, r2
 80059fc:	4699      	mov	r9, r3
 80059fe:	4623      	mov	r3, r4
 8005a00:	eb18 0303 	adds.w	r3, r8, r3
 8005a04:	60bb      	str	r3, [r7, #8]
 8005a06:	462b      	mov	r3, r5
 8005a08:	eb49 0303 	adc.w	r3, r9, r3
 8005a0c:	60fb      	str	r3, [r7, #12]
 8005a0e:	f04f 0200 	mov.w	r2, #0
 8005a12:	f04f 0300 	mov.w	r3, #0
 8005a16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005a1a:	4629      	mov	r1, r5
 8005a1c:	024b      	lsls	r3, r1, #9
 8005a1e:	4621      	mov	r1, r4
 8005a20:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005a24:	4621      	mov	r1, r4
 8005a26:	024a      	lsls	r2, r1, #9
 8005a28:	4610      	mov	r0, r2
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a2e:	2200      	movs	r2, #0
 8005a30:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a38:	f7fa ffec 	bl	8000a14 <__aeabi_uldivmod>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	460b      	mov	r3, r1
 8005a40:	4613      	mov	r3, r2
 8005a42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a44:	e058      	b.n	8005af8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a46:	4b38      	ldr	r3, [pc, #224]	; (8005b28 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	099b      	lsrs	r3, r3, #6
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	4618      	mov	r0, r3
 8005a50:	4611      	mov	r1, r2
 8005a52:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005a56:	623b      	str	r3, [r7, #32]
 8005a58:	2300      	movs	r3, #0
 8005a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8005a5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005a60:	4642      	mov	r2, r8
 8005a62:	464b      	mov	r3, r9
 8005a64:	f04f 0000 	mov.w	r0, #0
 8005a68:	f04f 0100 	mov.w	r1, #0
 8005a6c:	0159      	lsls	r1, r3, #5
 8005a6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a72:	0150      	lsls	r0, r2, #5
 8005a74:	4602      	mov	r2, r0
 8005a76:	460b      	mov	r3, r1
 8005a78:	4641      	mov	r1, r8
 8005a7a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a7e:	4649      	mov	r1, r9
 8005a80:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a84:	f04f 0200 	mov.w	r2, #0
 8005a88:	f04f 0300 	mov.w	r3, #0
 8005a8c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a90:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a94:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a98:	ebb2 040a 	subs.w	r4, r2, sl
 8005a9c:	eb63 050b 	sbc.w	r5, r3, fp
 8005aa0:	f04f 0200 	mov.w	r2, #0
 8005aa4:	f04f 0300 	mov.w	r3, #0
 8005aa8:	00eb      	lsls	r3, r5, #3
 8005aaa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005aae:	00e2      	lsls	r2, r4, #3
 8005ab0:	4614      	mov	r4, r2
 8005ab2:	461d      	mov	r5, r3
 8005ab4:	4643      	mov	r3, r8
 8005ab6:	18e3      	adds	r3, r4, r3
 8005ab8:	603b      	str	r3, [r7, #0]
 8005aba:	464b      	mov	r3, r9
 8005abc:	eb45 0303 	adc.w	r3, r5, r3
 8005ac0:	607b      	str	r3, [r7, #4]
 8005ac2:	f04f 0200 	mov.w	r2, #0
 8005ac6:	f04f 0300 	mov.w	r3, #0
 8005aca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005ace:	4629      	mov	r1, r5
 8005ad0:	028b      	lsls	r3, r1, #10
 8005ad2:	4621      	mov	r1, r4
 8005ad4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ad8:	4621      	mov	r1, r4
 8005ada:	028a      	lsls	r2, r1, #10
 8005adc:	4610      	mov	r0, r2
 8005ade:	4619      	mov	r1, r3
 8005ae0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	61bb      	str	r3, [r7, #24]
 8005ae6:	61fa      	str	r2, [r7, #28]
 8005ae8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005aec:	f7fa ff92 	bl	8000a14 <__aeabi_uldivmod>
 8005af0:	4602      	mov	r2, r0
 8005af2:	460b      	mov	r3, r1
 8005af4:	4613      	mov	r3, r2
 8005af6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005af8:	4b0b      	ldr	r3, [pc, #44]	; (8005b28 <HAL_RCC_GetSysClockFreq+0x200>)
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	0c1b      	lsrs	r3, r3, #16
 8005afe:	f003 0303 	and.w	r3, r3, #3
 8005b02:	3301      	adds	r3, #1
 8005b04:	005b      	lsls	r3, r3, #1
 8005b06:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005b08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b12:	e002      	b.n	8005b1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b14:	4b05      	ldr	r3, [pc, #20]	; (8005b2c <HAL_RCC_GetSysClockFreq+0x204>)
 8005b16:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3750      	adds	r7, #80	; 0x50
 8005b20:	46bd      	mov	sp, r7
 8005b22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b26:	bf00      	nop
 8005b28:	40023800 	.word	0x40023800
 8005b2c:	00f42400 	.word	0x00f42400
 8005b30:	007a1200 	.word	0x007a1200

08005b34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b34:	b480      	push	{r7}
 8005b36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b38:	4b03      	ldr	r3, [pc, #12]	; (8005b48 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop
 8005b48:	2000001c 	.word	0x2000001c

08005b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b50:	f7ff fff0 	bl	8005b34 <HAL_RCC_GetHCLKFreq>
 8005b54:	4602      	mov	r2, r0
 8005b56:	4b05      	ldr	r3, [pc, #20]	; (8005b6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	0a9b      	lsrs	r3, r3, #10
 8005b5c:	f003 0307 	and.w	r3, r3, #7
 8005b60:	4903      	ldr	r1, [pc, #12]	; (8005b70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b62:	5ccb      	ldrb	r3, [r1, r3]
 8005b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	40023800 	.word	0x40023800
 8005b70:	080078b0 	.word	0x080078b0

08005b74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005b78:	f7ff ffdc 	bl	8005b34 <HAL_RCC_GetHCLKFreq>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	4b05      	ldr	r3, [pc, #20]	; (8005b94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	0b5b      	lsrs	r3, r3, #13
 8005b84:	f003 0307 	and.w	r3, r3, #7
 8005b88:	4903      	ldr	r1, [pc, #12]	; (8005b98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b8a:	5ccb      	ldrb	r3, [r1, r3]
 8005b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	40023800 	.word	0x40023800
 8005b98:	080078b0 	.word	0x080078b0

08005b9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e041      	b.n	8005c32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d106      	bne.n	8005bc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f7fb fdd0 	bl	8001768 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2202      	movs	r2, #2
 8005bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	3304      	adds	r3, #4
 8005bd8:	4619      	mov	r1, r3
 8005bda:	4610      	mov	r0, r2
 8005bdc:	f000 ff0e 	bl	80069fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3708      	adds	r7, #8
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
	...

08005c3c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d001      	beq.n	8005c54 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e03c      	b.n	8005cce <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2202      	movs	r2, #2
 8005c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a1e      	ldr	r2, [pc, #120]	; (8005cdc <HAL_TIM_Base_Start+0xa0>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d018      	beq.n	8005c98 <HAL_TIM_Base_Start+0x5c>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c6e:	d013      	beq.n	8005c98 <HAL_TIM_Base_Start+0x5c>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a1a      	ldr	r2, [pc, #104]	; (8005ce0 <HAL_TIM_Base_Start+0xa4>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d00e      	beq.n	8005c98 <HAL_TIM_Base_Start+0x5c>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a19      	ldr	r2, [pc, #100]	; (8005ce4 <HAL_TIM_Base_Start+0xa8>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d009      	beq.n	8005c98 <HAL_TIM_Base_Start+0x5c>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a17      	ldr	r2, [pc, #92]	; (8005ce8 <HAL_TIM_Base_Start+0xac>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d004      	beq.n	8005c98 <HAL_TIM_Base_Start+0x5c>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a16      	ldr	r2, [pc, #88]	; (8005cec <HAL_TIM_Base_Start+0xb0>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d111      	bne.n	8005cbc <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	f003 0307 	and.w	r3, r3, #7
 8005ca2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2b06      	cmp	r3, #6
 8005ca8:	d010      	beq.n	8005ccc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f042 0201 	orr.w	r2, r2, #1
 8005cb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cba:	e007      	b.n	8005ccc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f042 0201 	orr.w	r2, r2, #1
 8005cca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3714      	adds	r7, #20
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	40010000 	.word	0x40010000
 8005ce0:	40000400 	.word	0x40000400
 8005ce4:	40000800 	.word	0x40000800
 8005ce8:	40000c00 	.word	0x40000c00
 8005cec:	40014000 	.word	0x40014000

08005cf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d001      	beq.n	8005d08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e044      	b.n	8005d92 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68da      	ldr	r2, [r3, #12]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f042 0201 	orr.w	r2, r2, #1
 8005d1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a1e      	ldr	r2, [pc, #120]	; (8005da0 <HAL_TIM_Base_Start_IT+0xb0>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d018      	beq.n	8005d5c <HAL_TIM_Base_Start_IT+0x6c>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d32:	d013      	beq.n	8005d5c <HAL_TIM_Base_Start_IT+0x6c>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a1a      	ldr	r2, [pc, #104]	; (8005da4 <HAL_TIM_Base_Start_IT+0xb4>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d00e      	beq.n	8005d5c <HAL_TIM_Base_Start_IT+0x6c>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a19      	ldr	r2, [pc, #100]	; (8005da8 <HAL_TIM_Base_Start_IT+0xb8>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d009      	beq.n	8005d5c <HAL_TIM_Base_Start_IT+0x6c>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a17      	ldr	r2, [pc, #92]	; (8005dac <HAL_TIM_Base_Start_IT+0xbc>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d004      	beq.n	8005d5c <HAL_TIM_Base_Start_IT+0x6c>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a16      	ldr	r2, [pc, #88]	; (8005db0 <HAL_TIM_Base_Start_IT+0xc0>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d111      	bne.n	8005d80 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	f003 0307 	and.w	r3, r3, #7
 8005d66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2b06      	cmp	r3, #6
 8005d6c:	d010      	beq.n	8005d90 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f042 0201 	orr.w	r2, r2, #1
 8005d7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d7e:	e007      	b.n	8005d90 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f042 0201 	orr.w	r2, r2, #1
 8005d8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3714      	adds	r7, #20
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	40010000 	.word	0x40010000
 8005da4:	40000400 	.word	0x40000400
 8005da8:	40000800 	.word	0x40000800
 8005dac:	40000c00 	.word	0x40000c00
 8005db0:	40014000 	.word	0x40014000

08005db4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d101      	bne.n	8005dc6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e041      	b.n	8005e4a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d106      	bne.n	8005de0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f839 	bl	8005e52 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2202      	movs	r2, #2
 8005de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	3304      	adds	r3, #4
 8005df0:	4619      	mov	r1, r3
 8005df2:	4610      	mov	r0, r2
 8005df4:	f000 fe02 	bl	80069fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3708      	adds	r7, #8
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005e52:	b480      	push	{r7}
 8005e54:	b083      	sub	sp, #12
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005e5a:	bf00      	nop
 8005e5c:	370c      	adds	r7, #12
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
	...

08005e68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d109      	bne.n	8005e8c <HAL_TIM_PWM_Start+0x24>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	bf14      	ite	ne
 8005e84:	2301      	movne	r3, #1
 8005e86:	2300      	moveq	r3, #0
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	e022      	b.n	8005ed2 <HAL_TIM_PWM_Start+0x6a>
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	2b04      	cmp	r3, #4
 8005e90:	d109      	bne.n	8005ea6 <HAL_TIM_PWM_Start+0x3e>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	bf14      	ite	ne
 8005e9e:	2301      	movne	r3, #1
 8005ea0:	2300      	moveq	r3, #0
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	e015      	b.n	8005ed2 <HAL_TIM_PWM_Start+0x6a>
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	2b08      	cmp	r3, #8
 8005eaa:	d109      	bne.n	8005ec0 <HAL_TIM_PWM_Start+0x58>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	bf14      	ite	ne
 8005eb8:	2301      	movne	r3, #1
 8005eba:	2300      	moveq	r3, #0
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	e008      	b.n	8005ed2 <HAL_TIM_PWM_Start+0x6a>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	bf14      	ite	ne
 8005ecc:	2301      	movne	r3, #1
 8005ece:	2300      	moveq	r3, #0
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d001      	beq.n	8005eda <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e068      	b.n	8005fac <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d104      	bne.n	8005eea <HAL_TIM_PWM_Start+0x82>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ee8:	e013      	b.n	8005f12 <HAL_TIM_PWM_Start+0xaa>
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	2b04      	cmp	r3, #4
 8005eee:	d104      	bne.n	8005efa <HAL_TIM_PWM_Start+0x92>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ef8:	e00b      	b.n	8005f12 <HAL_TIM_PWM_Start+0xaa>
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	2b08      	cmp	r3, #8
 8005efe:	d104      	bne.n	8005f0a <HAL_TIM_PWM_Start+0xa2>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2202      	movs	r2, #2
 8005f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f08:	e003      	b.n	8005f12 <HAL_TIM_PWM_Start+0xaa>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2202      	movs	r2, #2
 8005f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2201      	movs	r2, #1
 8005f18:	6839      	ldr	r1, [r7, #0]
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f001 f932 	bl	8007184 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a23      	ldr	r2, [pc, #140]	; (8005fb4 <HAL_TIM_PWM_Start+0x14c>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d107      	bne.n	8005f3a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a1d      	ldr	r2, [pc, #116]	; (8005fb4 <HAL_TIM_PWM_Start+0x14c>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d018      	beq.n	8005f76 <HAL_TIM_PWM_Start+0x10e>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f4c:	d013      	beq.n	8005f76 <HAL_TIM_PWM_Start+0x10e>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a19      	ldr	r2, [pc, #100]	; (8005fb8 <HAL_TIM_PWM_Start+0x150>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d00e      	beq.n	8005f76 <HAL_TIM_PWM_Start+0x10e>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a17      	ldr	r2, [pc, #92]	; (8005fbc <HAL_TIM_PWM_Start+0x154>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d009      	beq.n	8005f76 <HAL_TIM_PWM_Start+0x10e>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a16      	ldr	r2, [pc, #88]	; (8005fc0 <HAL_TIM_PWM_Start+0x158>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d004      	beq.n	8005f76 <HAL_TIM_PWM_Start+0x10e>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a14      	ldr	r2, [pc, #80]	; (8005fc4 <HAL_TIM_PWM_Start+0x15c>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d111      	bne.n	8005f9a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	f003 0307 	and.w	r3, r3, #7
 8005f80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2b06      	cmp	r3, #6
 8005f86:	d010      	beq.n	8005faa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f042 0201 	orr.w	r2, r2, #1
 8005f96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f98:	e007      	b.n	8005faa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f042 0201 	orr.w	r2, r2, #1
 8005fa8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	40010000 	.word	0x40010000
 8005fb8:	40000400 	.word	0x40000400
 8005fbc:	40000800 	.word	0x40000800
 8005fc0:	40000c00 	.word	0x40000c00
 8005fc4:	40014000 	.word	0x40014000

08005fc8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d101      	bne.n	8005fda <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e041      	b.n	800605e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d106      	bne.n	8005ff4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f839 	bl	8006066 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2202      	movs	r2, #2
 8005ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	3304      	adds	r3, #4
 8006004:	4619      	mov	r1, r3
 8006006:	4610      	mov	r0, r2
 8006008:	f000 fcf8 	bl	80069fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3708      	adds	r7, #8
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006066:	b480      	push	{r7}
 8006068:	b083      	sub	sp, #12
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800606e:	bf00      	nop
 8006070:	370c      	adds	r7, #12
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr
	...

0800607c <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b086      	sub	sp, #24
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	607a      	str	r2, [r7, #4]
 8006088:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800608a:	2300      	movs	r3, #0
 800608c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d104      	bne.n	800609e <HAL_TIM_IC_Start_DMA+0x22>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800609a:	b2db      	uxtb	r3, r3
 800609c:	e013      	b.n	80060c6 <HAL_TIM_IC_Start_DMA+0x4a>
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	2b04      	cmp	r3, #4
 80060a2:	d104      	bne.n	80060ae <HAL_TIM_IC_Start_DMA+0x32>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	e00b      	b.n	80060c6 <HAL_TIM_IC_Start_DMA+0x4a>
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	2b08      	cmp	r3, #8
 80060b2:	d104      	bne.n	80060be <HAL_TIM_IC_Start_DMA+0x42>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	e003      	b.n	80060c6 <HAL_TIM_IC_Start_DMA+0x4a>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d104      	bne.n	80060d8 <HAL_TIM_IC_Start_DMA+0x5c>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	e013      	b.n	8006100 <HAL_TIM_IC_Start_DMA+0x84>
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	2b04      	cmp	r3, #4
 80060dc:	d104      	bne.n	80060e8 <HAL_TIM_IC_Start_DMA+0x6c>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	e00b      	b.n	8006100 <HAL_TIM_IC_Start_DMA+0x84>
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	2b08      	cmp	r3, #8
 80060ec:	d104      	bne.n	80060f8 <HAL_TIM_IC_Start_DMA+0x7c>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	e003      	b.n	8006100 <HAL_TIM_IC_Start_DMA+0x84>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8006102:	7dbb      	ldrb	r3, [r7, #22]
 8006104:	2b02      	cmp	r3, #2
 8006106:	d002      	beq.n	800610e <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8006108:	7d7b      	ldrb	r3, [r7, #21]
 800610a:	2b02      	cmp	r3, #2
 800610c:	d101      	bne.n	8006112 <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 800610e:	2302      	movs	r3, #2
 8006110:	e13c      	b.n	800638c <HAL_TIM_IC_Start_DMA+0x310>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8006112:	7dbb      	ldrb	r3, [r7, #22]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d143      	bne.n	80061a0 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8006118:	7d7b      	ldrb	r3, [r7, #21]
 800611a:	2b01      	cmp	r3, #1
 800611c:	d140      	bne.n	80061a0 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d104      	bne.n	800612e <HAL_TIM_IC_Start_DMA+0xb2>
 8006124:	887b      	ldrh	r3, [r7, #2]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d001      	beq.n	800612e <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e12e      	b.n	800638c <HAL_TIM_IC_Start_DMA+0x310>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d104      	bne.n	800613e <HAL_TIM_IC_Start_DMA+0xc2>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2202      	movs	r2, #2
 8006138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800613c:	e013      	b.n	8006166 <HAL_TIM_IC_Start_DMA+0xea>
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	2b04      	cmp	r3, #4
 8006142:	d104      	bne.n	800614e <HAL_TIM_IC_Start_DMA+0xd2>
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2202      	movs	r2, #2
 8006148:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800614c:	e00b      	b.n	8006166 <HAL_TIM_IC_Start_DMA+0xea>
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	2b08      	cmp	r3, #8
 8006152:	d104      	bne.n	800615e <HAL_TIM_IC_Start_DMA+0xe2>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2202      	movs	r2, #2
 8006158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800615c:	e003      	b.n	8006166 <HAL_TIM_IC_Start_DMA+0xea>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2202      	movs	r2, #2
 8006162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d104      	bne.n	8006176 <HAL_TIM_IC_Start_DMA+0xfa>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2202      	movs	r2, #2
 8006170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 8006174:	e016      	b.n	80061a4 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	2b04      	cmp	r3, #4
 800617a:	d104      	bne.n	8006186 <HAL_TIM_IC_Start_DMA+0x10a>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2202      	movs	r2, #2
 8006180:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 8006184:	e00e      	b.n	80061a4 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	2b08      	cmp	r3, #8
 800618a:	d104      	bne.n	8006196 <HAL_TIM_IC_Start_DMA+0x11a>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2202      	movs	r2, #2
 8006190:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 8006194:	e006      	b.n	80061a4 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2202      	movs	r2, #2
 800619a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 800619e:	e001      	b.n	80061a4 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e0f3      	b.n	800638c <HAL_TIM_IC_Start_DMA+0x310>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2201      	movs	r2, #1
 80061aa:	68b9      	ldr	r1, [r7, #8]
 80061ac:	4618      	mov	r0, r3
 80061ae:	f000 ffe9 	bl	8007184 <TIM_CCxChannelCmd>

  switch (Channel)
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	2b0c      	cmp	r3, #12
 80061b6:	f200 80ad 	bhi.w	8006314 <HAL_TIM_IC_Start_DMA+0x298>
 80061ba:	a201      	add	r2, pc, #4	; (adr r2, 80061c0 <HAL_TIM_IC_Start_DMA+0x144>)
 80061bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c0:	080061f5 	.word	0x080061f5
 80061c4:	08006315 	.word	0x08006315
 80061c8:	08006315 	.word	0x08006315
 80061cc:	08006315 	.word	0x08006315
 80061d0:	0800623d 	.word	0x0800623d
 80061d4:	08006315 	.word	0x08006315
 80061d8:	08006315 	.word	0x08006315
 80061dc:	08006315 	.word	0x08006315
 80061e0:	08006285 	.word	0x08006285
 80061e4:	08006315 	.word	0x08006315
 80061e8:	08006315 	.word	0x08006315
 80061ec:	08006315 	.word	0x08006315
 80061f0:	080062cd 	.word	0x080062cd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f8:	4a66      	ldr	r2, [pc, #408]	; (8006394 <HAL_TIM_IC_Start_DMA+0x318>)
 80061fa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006200:	4a65      	ldr	r2, [pc, #404]	; (8006398 <HAL_TIM_IC_Start_DMA+0x31c>)
 8006202:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006208:	4a64      	ldr	r2, [pc, #400]	; (800639c <HAL_TIM_IC_Start_DMA+0x320>)
 800620a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	3334      	adds	r3, #52	; 0x34
 8006216:	4619      	mov	r1, r3
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	887b      	ldrh	r3, [r7, #2]
 800621c:	f7fb feb2 	bl	8001f84 <HAL_DMA_Start_IT>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d001      	beq.n	800622a <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e0b0      	b.n	800638c <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68da      	ldr	r2, [r3, #12]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006238:	60da      	str	r2, [r3, #12]
      break;
 800623a:	e06e      	b.n	800631a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006240:	4a54      	ldr	r2, [pc, #336]	; (8006394 <HAL_TIM_IC_Start_DMA+0x318>)
 8006242:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006248:	4a53      	ldr	r2, [pc, #332]	; (8006398 <HAL_TIM_IC_Start_DMA+0x31c>)
 800624a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006250:	4a52      	ldr	r2, [pc, #328]	; (800639c <HAL_TIM_IC_Start_DMA+0x320>)
 8006252:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	3338      	adds	r3, #56	; 0x38
 800625e:	4619      	mov	r1, r3
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	887b      	ldrh	r3, [r7, #2]
 8006264:	f7fb fe8e 	bl	8001f84 <HAL_DMA_Start_IT>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d001      	beq.n	8006272 <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e08c      	b.n	800638c <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68da      	ldr	r2, [r3, #12]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006280:	60da      	str	r2, [r3, #12]
      break;
 8006282:	e04a      	b.n	800631a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006288:	4a42      	ldr	r2, [pc, #264]	; (8006394 <HAL_TIM_IC_Start_DMA+0x318>)
 800628a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006290:	4a41      	ldr	r2, [pc, #260]	; (8006398 <HAL_TIM_IC_Start_DMA+0x31c>)
 8006292:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006298:	4a40      	ldr	r2, [pc, #256]	; (800639c <HAL_TIM_IC_Start_DMA+0x320>)
 800629a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	333c      	adds	r3, #60	; 0x3c
 80062a6:	4619      	mov	r1, r3
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	887b      	ldrh	r3, [r7, #2]
 80062ac:	f7fb fe6a 	bl	8001f84 <HAL_DMA_Start_IT>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d001      	beq.n	80062ba <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e068      	b.n	800638c <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68da      	ldr	r2, [r3, #12]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062c8:	60da      	str	r2, [r3, #12]
      break;
 80062ca:	e026      	b.n	800631a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d0:	4a30      	ldr	r2, [pc, #192]	; (8006394 <HAL_TIM_IC_Start_DMA+0x318>)
 80062d2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d8:	4a2f      	ldr	r2, [pc, #188]	; (8006398 <HAL_TIM_IC_Start_DMA+0x31c>)
 80062da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e0:	4a2e      	ldr	r2, [pc, #184]	; (800639c <HAL_TIM_IC_Start_DMA+0x320>)
 80062e2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	3340      	adds	r3, #64	; 0x40
 80062ee:	4619      	mov	r1, r3
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	887b      	ldrh	r3, [r7, #2]
 80062f4:	f7fb fe46 	bl	8001f84 <HAL_DMA_Start_IT>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d001      	beq.n	8006302 <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e044      	b.n	800638c <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68da      	ldr	r2, [r3, #12]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006310:	60da      	str	r2, [r3, #12]
      break;
 8006312:	e002      	b.n	800631a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	75fb      	strb	r3, [r7, #23]
      break;
 8006318:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a20      	ldr	r2, [pc, #128]	; (80063a0 <HAL_TIM_IC_Start_DMA+0x324>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d018      	beq.n	8006356 <HAL_TIM_IC_Start_DMA+0x2da>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800632c:	d013      	beq.n	8006356 <HAL_TIM_IC_Start_DMA+0x2da>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a1c      	ldr	r2, [pc, #112]	; (80063a4 <HAL_TIM_IC_Start_DMA+0x328>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d00e      	beq.n	8006356 <HAL_TIM_IC_Start_DMA+0x2da>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a1a      	ldr	r2, [pc, #104]	; (80063a8 <HAL_TIM_IC_Start_DMA+0x32c>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d009      	beq.n	8006356 <HAL_TIM_IC_Start_DMA+0x2da>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a19      	ldr	r2, [pc, #100]	; (80063ac <HAL_TIM_IC_Start_DMA+0x330>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d004      	beq.n	8006356 <HAL_TIM_IC_Start_DMA+0x2da>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a17      	ldr	r2, [pc, #92]	; (80063b0 <HAL_TIM_IC_Start_DMA+0x334>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d111      	bne.n	800637a <HAL_TIM_IC_Start_DMA+0x2fe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	f003 0307 	and.w	r3, r3, #7
 8006360:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	2b06      	cmp	r3, #6
 8006366:	d010      	beq.n	800638a <HAL_TIM_IC_Start_DMA+0x30e>
    {
      __HAL_TIM_ENABLE(htim);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f042 0201 	orr.w	r2, r2, #1
 8006376:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006378:	e007      	b.n	800638a <HAL_TIM_IC_Start_DMA+0x30e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f042 0201 	orr.w	r2, r2, #1
 8006388:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800638a:	7dfb      	ldrb	r3, [r7, #23]
}
 800638c:	4618      	mov	r0, r3
 800638e:	3718      	adds	r7, #24
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}
 8006394:	080068cd 	.word	0x080068cd
 8006398:	08006995 	.word	0x08006995
 800639c:	0800683b 	.word	0x0800683b
 80063a0:	40010000 	.word	0x40010000
 80063a4:	40000400 	.word	0x40000400
 80063a8:	40000800 	.word	0x40000800
 80063ac:	40000c00 	.word	0x40000c00
 80063b0:	40014000 	.word	0x40014000

080063b4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b086      	sub	sp, #24
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063c0:	2300      	movs	r3, #0
 80063c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d101      	bne.n	80063d2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80063ce:	2302      	movs	r3, #2
 80063d0:	e088      	b.n	80064e4 <HAL_TIM_IC_ConfigChannel+0x130>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2201      	movs	r2, #1
 80063d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d11b      	bne.n	8006418 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6818      	ldr	r0, [r3, #0]
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	6819      	ldr	r1, [r3, #0]
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	685a      	ldr	r2, [r3, #4]
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	f000 fd10 	bl	8006e14 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	699a      	ldr	r2, [r3, #24]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f022 020c 	bic.w	r2, r2, #12
 8006402:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	6999      	ldr	r1, [r3, #24]
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	689a      	ldr	r2, [r3, #8]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	430a      	orrs	r2, r1
 8006414:	619a      	str	r2, [r3, #24]
 8006416:	e060      	b.n	80064da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2b04      	cmp	r3, #4
 800641c:	d11c      	bne.n	8006458 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6818      	ldr	r0, [r3, #0]
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	6819      	ldr	r1, [r3, #0]
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	685a      	ldr	r2, [r3, #4]
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	f000 fd88 	bl	8006f42 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	699a      	ldr	r2, [r3, #24]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006440:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	6999      	ldr	r1, [r3, #24]
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	021a      	lsls	r2, r3, #8
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	430a      	orrs	r2, r1
 8006454:	619a      	str	r2, [r3, #24]
 8006456:	e040      	b.n	80064da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2b08      	cmp	r3, #8
 800645c:	d11b      	bne.n	8006496 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6818      	ldr	r0, [r3, #0]
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	6819      	ldr	r1, [r3, #0]
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	685a      	ldr	r2, [r3, #4]
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	f000 fdd5 	bl	800701c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	69da      	ldr	r2, [r3, #28]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f022 020c 	bic.w	r2, r2, #12
 8006480:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	69d9      	ldr	r1, [r3, #28]
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	689a      	ldr	r2, [r3, #8]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	430a      	orrs	r2, r1
 8006492:	61da      	str	r2, [r3, #28]
 8006494:	e021      	b.n	80064da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2b0c      	cmp	r3, #12
 800649a:	d11c      	bne.n	80064d6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6818      	ldr	r0, [r3, #0]
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	6819      	ldr	r1, [r3, #0]
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	685a      	ldr	r2, [r3, #4]
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	f000 fdf2 	bl	8007094 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	69da      	ldr	r2, [r3, #28]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80064be:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	69d9      	ldr	r1, [r3, #28]
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	021a      	lsls	r2, r3, #8
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	430a      	orrs	r2, r1
 80064d2:	61da      	str	r2, [r3, #28]
 80064d4:	e001      	b.n	80064da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80064e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3718      	adds	r7, #24
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b086      	sub	sp, #24
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064f8:	2300      	movs	r3, #0
 80064fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006502:	2b01      	cmp	r3, #1
 8006504:	d101      	bne.n	800650a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006506:	2302      	movs	r3, #2
 8006508:	e0ae      	b.n	8006668 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2201      	movs	r2, #1
 800650e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2b0c      	cmp	r3, #12
 8006516:	f200 809f 	bhi.w	8006658 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800651a:	a201      	add	r2, pc, #4	; (adr r2, 8006520 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800651c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006520:	08006555 	.word	0x08006555
 8006524:	08006659 	.word	0x08006659
 8006528:	08006659 	.word	0x08006659
 800652c:	08006659 	.word	0x08006659
 8006530:	08006595 	.word	0x08006595
 8006534:	08006659 	.word	0x08006659
 8006538:	08006659 	.word	0x08006659
 800653c:	08006659 	.word	0x08006659
 8006540:	080065d7 	.word	0x080065d7
 8006544:	08006659 	.word	0x08006659
 8006548:	08006659 	.word	0x08006659
 800654c:	08006659 	.word	0x08006659
 8006550:	08006617 	.word	0x08006617
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68b9      	ldr	r1, [r7, #8]
 800655a:	4618      	mov	r0, r3
 800655c:	f000 face 	bl	8006afc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	699a      	ldr	r2, [r3, #24]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f042 0208 	orr.w	r2, r2, #8
 800656e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	699a      	ldr	r2, [r3, #24]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f022 0204 	bic.w	r2, r2, #4
 800657e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	6999      	ldr	r1, [r3, #24]
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	691a      	ldr	r2, [r3, #16]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	430a      	orrs	r2, r1
 8006590:	619a      	str	r2, [r3, #24]
      break;
 8006592:	e064      	b.n	800665e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68b9      	ldr	r1, [r7, #8]
 800659a:	4618      	mov	r0, r3
 800659c:	f000 fb14 	bl	8006bc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	699a      	ldr	r2, [r3, #24]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	699a      	ldr	r2, [r3, #24]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	6999      	ldr	r1, [r3, #24]
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	021a      	lsls	r2, r3, #8
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	430a      	orrs	r2, r1
 80065d2:	619a      	str	r2, [r3, #24]
      break;
 80065d4:	e043      	b.n	800665e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68b9      	ldr	r1, [r7, #8]
 80065dc:	4618      	mov	r0, r3
 80065de:	f000 fb5f 	bl	8006ca0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	69da      	ldr	r2, [r3, #28]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f042 0208 	orr.w	r2, r2, #8
 80065f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	69da      	ldr	r2, [r3, #28]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f022 0204 	bic.w	r2, r2, #4
 8006600:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	69d9      	ldr	r1, [r3, #28]
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	691a      	ldr	r2, [r3, #16]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	430a      	orrs	r2, r1
 8006612:	61da      	str	r2, [r3, #28]
      break;
 8006614:	e023      	b.n	800665e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68b9      	ldr	r1, [r7, #8]
 800661c:	4618      	mov	r0, r3
 800661e:	f000 fba9 	bl	8006d74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	69da      	ldr	r2, [r3, #28]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006630:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	69da      	ldr	r2, [r3, #28]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006640:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	69d9      	ldr	r1, [r3, #28]
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	021a      	lsls	r2, r3, #8
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	430a      	orrs	r2, r1
 8006654:	61da      	str	r2, [r3, #28]
      break;
 8006656:	e002      	b.n	800665e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	75fb      	strb	r3, [r7, #23]
      break;
 800665c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006666:	7dfb      	ldrb	r3, [r7, #23]
}
 8006668:	4618      	mov	r0, r3
 800666a:	3718      	adds	r7, #24
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800667a:	2300      	movs	r3, #0
 800667c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006684:	2b01      	cmp	r3, #1
 8006686:	d101      	bne.n	800668c <HAL_TIM_ConfigClockSource+0x1c>
 8006688:	2302      	movs	r3, #2
 800668a:	e0b4      	b.n	80067f6 <HAL_TIM_ConfigClockSource+0x186>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2202      	movs	r2, #2
 8006698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80066aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68ba      	ldr	r2, [r7, #8]
 80066ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066c4:	d03e      	beq.n	8006744 <HAL_TIM_ConfigClockSource+0xd4>
 80066c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066ca:	f200 8087 	bhi.w	80067dc <HAL_TIM_ConfigClockSource+0x16c>
 80066ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066d2:	f000 8086 	beq.w	80067e2 <HAL_TIM_ConfigClockSource+0x172>
 80066d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066da:	d87f      	bhi.n	80067dc <HAL_TIM_ConfigClockSource+0x16c>
 80066dc:	2b70      	cmp	r3, #112	; 0x70
 80066de:	d01a      	beq.n	8006716 <HAL_TIM_ConfigClockSource+0xa6>
 80066e0:	2b70      	cmp	r3, #112	; 0x70
 80066e2:	d87b      	bhi.n	80067dc <HAL_TIM_ConfigClockSource+0x16c>
 80066e4:	2b60      	cmp	r3, #96	; 0x60
 80066e6:	d050      	beq.n	800678a <HAL_TIM_ConfigClockSource+0x11a>
 80066e8:	2b60      	cmp	r3, #96	; 0x60
 80066ea:	d877      	bhi.n	80067dc <HAL_TIM_ConfigClockSource+0x16c>
 80066ec:	2b50      	cmp	r3, #80	; 0x50
 80066ee:	d03c      	beq.n	800676a <HAL_TIM_ConfigClockSource+0xfa>
 80066f0:	2b50      	cmp	r3, #80	; 0x50
 80066f2:	d873      	bhi.n	80067dc <HAL_TIM_ConfigClockSource+0x16c>
 80066f4:	2b40      	cmp	r3, #64	; 0x40
 80066f6:	d058      	beq.n	80067aa <HAL_TIM_ConfigClockSource+0x13a>
 80066f8:	2b40      	cmp	r3, #64	; 0x40
 80066fa:	d86f      	bhi.n	80067dc <HAL_TIM_ConfigClockSource+0x16c>
 80066fc:	2b30      	cmp	r3, #48	; 0x30
 80066fe:	d064      	beq.n	80067ca <HAL_TIM_ConfigClockSource+0x15a>
 8006700:	2b30      	cmp	r3, #48	; 0x30
 8006702:	d86b      	bhi.n	80067dc <HAL_TIM_ConfigClockSource+0x16c>
 8006704:	2b20      	cmp	r3, #32
 8006706:	d060      	beq.n	80067ca <HAL_TIM_ConfigClockSource+0x15a>
 8006708:	2b20      	cmp	r3, #32
 800670a:	d867      	bhi.n	80067dc <HAL_TIM_ConfigClockSource+0x16c>
 800670c:	2b00      	cmp	r3, #0
 800670e:	d05c      	beq.n	80067ca <HAL_TIM_ConfigClockSource+0x15a>
 8006710:	2b10      	cmp	r3, #16
 8006712:	d05a      	beq.n	80067ca <HAL_TIM_ConfigClockSource+0x15a>
 8006714:	e062      	b.n	80067dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6818      	ldr	r0, [r3, #0]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	6899      	ldr	r1, [r3, #8]
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	685a      	ldr	r2, [r3, #4]
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	f000 fd0d 	bl	8007144 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006738:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68ba      	ldr	r2, [r7, #8]
 8006740:	609a      	str	r2, [r3, #8]
      break;
 8006742:	e04f      	b.n	80067e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6818      	ldr	r0, [r3, #0]
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	6899      	ldr	r1, [r3, #8]
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	685a      	ldr	r2, [r3, #4]
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	f000 fcf6 	bl	8007144 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	689a      	ldr	r2, [r3, #8]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006766:	609a      	str	r2, [r3, #8]
      break;
 8006768:	e03c      	b.n	80067e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6818      	ldr	r0, [r3, #0]
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	6859      	ldr	r1, [r3, #4]
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	461a      	mov	r2, r3
 8006778:	f000 fbb4 	bl	8006ee4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2150      	movs	r1, #80	; 0x50
 8006782:	4618      	mov	r0, r3
 8006784:	f000 fcc3 	bl	800710e <TIM_ITRx_SetConfig>
      break;
 8006788:	e02c      	b.n	80067e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6818      	ldr	r0, [r3, #0]
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	6859      	ldr	r1, [r3, #4]
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	461a      	mov	r2, r3
 8006798:	f000 fc10 	bl	8006fbc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2160      	movs	r1, #96	; 0x60
 80067a2:	4618      	mov	r0, r3
 80067a4:	f000 fcb3 	bl	800710e <TIM_ITRx_SetConfig>
      break;
 80067a8:	e01c      	b.n	80067e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6818      	ldr	r0, [r3, #0]
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	6859      	ldr	r1, [r3, #4]
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	461a      	mov	r2, r3
 80067b8:	f000 fb94 	bl	8006ee4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2140      	movs	r1, #64	; 0x40
 80067c2:	4618      	mov	r0, r3
 80067c4:	f000 fca3 	bl	800710e <TIM_ITRx_SetConfig>
      break;
 80067c8:	e00c      	b.n	80067e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4619      	mov	r1, r3
 80067d4:	4610      	mov	r0, r2
 80067d6:	f000 fc9a 	bl	800710e <TIM_ITRx_SetConfig>
      break;
 80067da:	e003      	b.n	80067e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	73fb      	strb	r3, [r7, #15]
      break;
 80067e0:	e000      	b.n	80067e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80067e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}

080067fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067fe:	b480      	push	{r7}
 8006800:	b083      	sub	sp, #12
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006806:	bf00      	nop
 8006808:	370c      	adds	r7, #12
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr

08006812 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006812:	b480      	push	{r7}
 8006814:	b083      	sub	sp, #12
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800681a:	bf00      	nop
 800681c:	370c      	adds	r7, #12
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr

08006826 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006826:	b480      	push	{r7}
 8006828:	b083      	sub	sp, #12
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800682e:	bf00      	nop
 8006830:	370c      	adds	r7, #12
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr

0800683a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b084      	sub	sp, #16
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006846:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	429a      	cmp	r2, r3
 8006850:	d107      	bne.n	8006862 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2201      	movs	r2, #1
 8006856:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006860:	e02a      	b.n	80068b8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	429a      	cmp	r2, r3
 800686a:	d107      	bne.n	800687c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2202      	movs	r2, #2
 8006870:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2201      	movs	r2, #1
 8006876:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800687a:	e01d      	b.n	80068b8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	429a      	cmp	r2, r3
 8006884:	d107      	bne.n	8006896 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2204      	movs	r2, #4
 800688a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006894:	e010      	b.n	80068b8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	429a      	cmp	r2, r3
 800689e:	d107      	bne.n	80068b0 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2208      	movs	r2, #8
 80068a4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80068ae:	e003      	b.n	80068b8 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80068b8:	68f8      	ldr	r0, [r7, #12]
 80068ba:	f7ff ffb4 	bl	8006826 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	771a      	strb	r2, [r3, #28]
}
 80068c4:	bf00      	nop
 80068c6:	3710      	adds	r7, #16
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d10f      	bne.n	8006904 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2201      	movs	r2, #1
 80068e8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	69db      	ldr	r3, [r3, #28]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d146      	bne.n	8006980 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2201      	movs	r2, #1
 80068f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2201      	movs	r2, #1
 80068fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006902:	e03d      	b.n	8006980 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	429a      	cmp	r2, r3
 800690c:	d10f      	bne.n	800692e <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2202      	movs	r2, #2
 8006912:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	69db      	ldr	r3, [r3, #28]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d131      	bne.n	8006980 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800692c:	e028      	b.n	8006980 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	429a      	cmp	r2, r3
 8006936:	d10f      	bne.n	8006958 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2204      	movs	r2, #4
 800693c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	69db      	ldr	r3, [r3, #28]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d11c      	bne.n	8006980 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2201      	movs	r2, #1
 800694a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2201      	movs	r2, #1
 8006952:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006956:	e013      	b.n	8006980 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	429a      	cmp	r2, r3
 8006960:	d10e      	bne.n	8006980 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2208      	movs	r2, #8
 8006966:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	69db      	ldr	r3, [r3, #28]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d107      	bne.n	8006980 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8006980:	68f8      	ldr	r0, [r7, #12]
 8006982:	f7ff ff3c 	bl	80067fe <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2200      	movs	r2, #0
 800698a:	771a      	strb	r2, [r3, #28]
}
 800698c:	bf00      	nop
 800698e:	3710      	adds	r7, #16
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d103      	bne.n	80069b4 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2201      	movs	r2, #1
 80069b0:	771a      	strb	r2, [r3, #28]
 80069b2:	e019      	b.n	80069e8 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d103      	bne.n	80069c6 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2202      	movs	r2, #2
 80069c2:	771a      	strb	r2, [r3, #28]
 80069c4:	e010      	b.n	80069e8 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d103      	bne.n	80069d8 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2204      	movs	r2, #4
 80069d4:	771a      	strb	r2, [r3, #28]
 80069d6:	e007      	b.n	80069e8 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d102      	bne.n	80069e8 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2208      	movs	r2, #8
 80069e6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f7ff ff12 	bl	8006812 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	771a      	strb	r2, [r3, #28]
}
 80069f4:	bf00      	nop
 80069f6:	3710      	adds	r7, #16
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b085      	sub	sp, #20
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a34      	ldr	r2, [pc, #208]	; (8006ae0 <TIM_Base_SetConfig+0xe4>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d00f      	beq.n	8006a34 <TIM_Base_SetConfig+0x38>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a1a:	d00b      	beq.n	8006a34 <TIM_Base_SetConfig+0x38>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a31      	ldr	r2, [pc, #196]	; (8006ae4 <TIM_Base_SetConfig+0xe8>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d007      	beq.n	8006a34 <TIM_Base_SetConfig+0x38>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a30      	ldr	r2, [pc, #192]	; (8006ae8 <TIM_Base_SetConfig+0xec>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d003      	beq.n	8006a34 <TIM_Base_SetConfig+0x38>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a2f      	ldr	r2, [pc, #188]	; (8006aec <TIM_Base_SetConfig+0xf0>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d108      	bne.n	8006a46 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a25      	ldr	r2, [pc, #148]	; (8006ae0 <TIM_Base_SetConfig+0xe4>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d01b      	beq.n	8006a86 <TIM_Base_SetConfig+0x8a>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a54:	d017      	beq.n	8006a86 <TIM_Base_SetConfig+0x8a>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a22      	ldr	r2, [pc, #136]	; (8006ae4 <TIM_Base_SetConfig+0xe8>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d013      	beq.n	8006a86 <TIM_Base_SetConfig+0x8a>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a21      	ldr	r2, [pc, #132]	; (8006ae8 <TIM_Base_SetConfig+0xec>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d00f      	beq.n	8006a86 <TIM_Base_SetConfig+0x8a>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a20      	ldr	r2, [pc, #128]	; (8006aec <TIM_Base_SetConfig+0xf0>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d00b      	beq.n	8006a86 <TIM_Base_SetConfig+0x8a>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a1f      	ldr	r2, [pc, #124]	; (8006af0 <TIM_Base_SetConfig+0xf4>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d007      	beq.n	8006a86 <TIM_Base_SetConfig+0x8a>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a1e      	ldr	r2, [pc, #120]	; (8006af4 <TIM_Base_SetConfig+0xf8>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d003      	beq.n	8006a86 <TIM_Base_SetConfig+0x8a>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4a1d      	ldr	r2, [pc, #116]	; (8006af8 <TIM_Base_SetConfig+0xfc>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d108      	bne.n	8006a98 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	695b      	ldr	r3, [r3, #20]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	689a      	ldr	r2, [r3, #8]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a08      	ldr	r2, [pc, #32]	; (8006ae0 <TIM_Base_SetConfig+0xe4>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d103      	bne.n	8006acc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	691a      	ldr	r2, [r3, #16]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	615a      	str	r2, [r3, #20]
}
 8006ad2:	bf00      	nop
 8006ad4:	3714      	adds	r7, #20
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	40010000 	.word	0x40010000
 8006ae4:	40000400 	.word	0x40000400
 8006ae8:	40000800 	.word	0x40000800
 8006aec:	40000c00 	.word	0x40000c00
 8006af0:	40014000 	.word	0x40014000
 8006af4:	40014400 	.word	0x40014400
 8006af8:	40014800 	.word	0x40014800

08006afc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b087      	sub	sp, #28
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a1b      	ldr	r3, [r3, #32]
 8006b0a:	f023 0201 	bic.w	r2, r3, #1
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	699b      	ldr	r3, [r3, #24]
 8006b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f023 0303 	bic.w	r3, r3, #3
 8006b32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	f023 0302 	bic.w	r3, r3, #2
 8006b44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	697a      	ldr	r2, [r7, #20]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a1c      	ldr	r2, [pc, #112]	; (8006bc4 <TIM_OC1_SetConfig+0xc8>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d10c      	bne.n	8006b72 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	f023 0308 	bic.w	r3, r3, #8
 8006b5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	f023 0304 	bic.w	r3, r3, #4
 8006b70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a13      	ldr	r2, [pc, #76]	; (8006bc4 <TIM_OC1_SetConfig+0xc8>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d111      	bne.n	8006b9e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	695b      	ldr	r3, [r3, #20]
 8006b8e:	693a      	ldr	r2, [r7, #16]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	699b      	ldr	r3, [r3, #24]
 8006b98:	693a      	ldr	r2, [r7, #16]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	693a      	ldr	r2, [r7, #16]
 8006ba2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	685a      	ldr	r2, [r3, #4]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	697a      	ldr	r2, [r7, #20]
 8006bb6:	621a      	str	r2, [r3, #32]
}
 8006bb8:	bf00      	nop
 8006bba:	371c      	adds	r7, #28
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr
 8006bc4:	40010000 	.word	0x40010000

08006bc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b087      	sub	sp, #28
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a1b      	ldr	r3, [r3, #32]
 8006bd6:	f023 0210 	bic.w	r2, r3, #16
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a1b      	ldr	r3, [r3, #32]
 8006be2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	699b      	ldr	r3, [r3, #24]
 8006bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	021b      	lsls	r3, r3, #8
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	f023 0320 	bic.w	r3, r3, #32
 8006c12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	011b      	lsls	r3, r3, #4
 8006c1a:	697a      	ldr	r2, [r7, #20]
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4a1e      	ldr	r2, [pc, #120]	; (8006c9c <TIM_OC2_SetConfig+0xd4>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d10d      	bne.n	8006c44 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	011b      	lsls	r3, r3, #4
 8006c36:	697a      	ldr	r2, [r7, #20]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a15      	ldr	r2, [pc, #84]	; (8006c9c <TIM_OC2_SetConfig+0xd4>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d113      	bne.n	8006c74 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	695b      	ldr	r3, [r3, #20]
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	693a      	ldr	r2, [r7, #16]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	699b      	ldr	r3, [r3, #24]
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	693a      	ldr	r2, [r7, #16]
 8006c70:	4313      	orrs	r3, r2
 8006c72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	693a      	ldr	r2, [r7, #16]
 8006c78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	685a      	ldr	r2, [r3, #4]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	697a      	ldr	r2, [r7, #20]
 8006c8c:	621a      	str	r2, [r3, #32]
}
 8006c8e:	bf00      	nop
 8006c90:	371c      	adds	r7, #28
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	40010000 	.word	0x40010000

08006ca0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b087      	sub	sp, #28
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a1b      	ldr	r3, [r3, #32]
 8006cae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	69db      	ldr	r3, [r3, #28]
 8006cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f023 0303 	bic.w	r3, r3, #3
 8006cd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ce8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	021b      	lsls	r3, r3, #8
 8006cf0:	697a      	ldr	r2, [r7, #20]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a1d      	ldr	r2, [pc, #116]	; (8006d70 <TIM_OC3_SetConfig+0xd0>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d10d      	bne.n	8006d1a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	021b      	lsls	r3, r3, #8
 8006d0c:	697a      	ldr	r2, [r7, #20]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a14      	ldr	r2, [pc, #80]	; (8006d70 <TIM_OC3_SetConfig+0xd0>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d113      	bne.n	8006d4a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	695b      	ldr	r3, [r3, #20]
 8006d36:	011b      	lsls	r3, r3, #4
 8006d38:	693a      	ldr	r2, [r7, #16]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	699b      	ldr	r3, [r3, #24]
 8006d42:	011b      	lsls	r3, r3, #4
 8006d44:	693a      	ldr	r2, [r7, #16]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	693a      	ldr	r2, [r7, #16]
 8006d4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	685a      	ldr	r2, [r3, #4]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	697a      	ldr	r2, [r7, #20]
 8006d62:	621a      	str	r2, [r3, #32]
}
 8006d64:	bf00      	nop
 8006d66:	371c      	adds	r7, #28
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr
 8006d70:	40010000 	.word	0x40010000

08006d74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b087      	sub	sp, #28
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a1b      	ldr	r3, [r3, #32]
 8006d82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a1b      	ldr	r3, [r3, #32]
 8006d8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	69db      	ldr	r3, [r3, #28]
 8006d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006daa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	021b      	lsls	r3, r3, #8
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006dbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	031b      	lsls	r3, r3, #12
 8006dc6:	693a      	ldr	r2, [r7, #16]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a10      	ldr	r2, [pc, #64]	; (8006e10 <TIM_OC4_SetConfig+0x9c>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d109      	bne.n	8006de8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	695b      	ldr	r3, [r3, #20]
 8006de0:	019b      	lsls	r3, r3, #6
 8006de2:	697a      	ldr	r2, [r7, #20]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	697a      	ldr	r2, [r7, #20]
 8006dec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	685a      	ldr	r2, [r3, #4]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	693a      	ldr	r2, [r7, #16]
 8006e00:	621a      	str	r2, [r3, #32]
}
 8006e02:	bf00      	nop
 8006e04:	371c      	adds	r7, #28
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	40010000 	.word	0x40010000

08006e14 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b087      	sub	sp, #28
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	607a      	str	r2, [r7, #4]
 8006e20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6a1b      	ldr	r3, [r3, #32]
 8006e26:	f023 0201 	bic.w	r2, r3, #1
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	699b      	ldr	r3, [r3, #24]
 8006e32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6a1b      	ldr	r3, [r3, #32]
 8006e38:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	4a24      	ldr	r2, [pc, #144]	; (8006ed0 <TIM_TI1_SetConfig+0xbc>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d013      	beq.n	8006e6a <TIM_TI1_SetConfig+0x56>
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e48:	d00f      	beq.n	8006e6a <TIM_TI1_SetConfig+0x56>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	4a21      	ldr	r2, [pc, #132]	; (8006ed4 <TIM_TI1_SetConfig+0xc0>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d00b      	beq.n	8006e6a <TIM_TI1_SetConfig+0x56>
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	4a20      	ldr	r2, [pc, #128]	; (8006ed8 <TIM_TI1_SetConfig+0xc4>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d007      	beq.n	8006e6a <TIM_TI1_SetConfig+0x56>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	4a1f      	ldr	r2, [pc, #124]	; (8006edc <TIM_TI1_SetConfig+0xc8>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d003      	beq.n	8006e6a <TIM_TI1_SetConfig+0x56>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	4a1e      	ldr	r2, [pc, #120]	; (8006ee0 <TIM_TI1_SetConfig+0xcc>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d101      	bne.n	8006e6e <TIM_TI1_SetConfig+0x5a>
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e000      	b.n	8006e70 <TIM_TI1_SetConfig+0x5c>
 8006e6e:	2300      	movs	r3, #0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d008      	beq.n	8006e86 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	f023 0303 	bic.w	r3, r3, #3
 8006e7a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006e7c:	697a      	ldr	r2, [r7, #20]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	617b      	str	r3, [r7, #20]
 8006e84:	e003      	b.n	8006e8e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	f043 0301 	orr.w	r3, r3, #1
 8006e8c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	011b      	lsls	r3, r3, #4
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	697a      	ldr	r2, [r7, #20]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	f023 030a 	bic.w	r3, r3, #10
 8006ea8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	f003 030a 	and.w	r3, r3, #10
 8006eb0:	693a      	ldr	r2, [r7, #16]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	697a      	ldr	r2, [r7, #20]
 8006eba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	693a      	ldr	r2, [r7, #16]
 8006ec0:	621a      	str	r2, [r3, #32]
}
 8006ec2:	bf00      	nop
 8006ec4:	371c      	adds	r7, #28
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	40010000 	.word	0x40010000
 8006ed4:	40000400 	.word	0x40000400
 8006ed8:	40000800 	.word	0x40000800
 8006edc:	40000c00 	.word	0x40000c00
 8006ee0:	40014000 	.word	0x40014000

08006ee4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b087      	sub	sp, #28
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6a1b      	ldr	r3, [r3, #32]
 8006ef4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
 8006efa:	f023 0201 	bic.w	r2, r3, #1
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	699b      	ldr	r3, [r3, #24]
 8006f06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	011b      	lsls	r3, r3, #4
 8006f14:	693a      	ldr	r2, [r7, #16]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	f023 030a 	bic.w	r3, r3, #10
 8006f20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f22:	697a      	ldr	r2, [r7, #20]
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	693a      	ldr	r2, [r7, #16]
 8006f2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	697a      	ldr	r2, [r7, #20]
 8006f34:	621a      	str	r2, [r3, #32]
}
 8006f36:	bf00      	nop
 8006f38:	371c      	adds	r7, #28
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr

08006f42 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006f42:	b480      	push	{r7}
 8006f44:	b087      	sub	sp, #28
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	60f8      	str	r0, [r7, #12]
 8006f4a:	60b9      	str	r1, [r7, #8]
 8006f4c:	607a      	str	r2, [r7, #4]
 8006f4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6a1b      	ldr	r3, [r3, #32]
 8006f54:	f023 0210 	bic.w	r2, r3, #16
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	699b      	ldr	r3, [r3, #24]
 8006f60:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6a1b      	ldr	r3, [r3, #32]
 8006f66:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f6e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	021b      	lsls	r3, r3, #8
 8006f74:	697a      	ldr	r2, [r7, #20]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	031b      	lsls	r3, r3, #12
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	697a      	ldr	r2, [r7, #20]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f94:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	011b      	lsls	r3, r3, #4
 8006f9a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006f9e:	693a      	ldr	r2, [r7, #16]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	697a      	ldr	r2, [r7, #20]
 8006fa8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	693a      	ldr	r2, [r7, #16]
 8006fae:	621a      	str	r2, [r3, #32]
}
 8006fb0:	bf00      	nop
 8006fb2:	371c      	adds	r7, #28
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b087      	sub	sp, #28
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6a1b      	ldr	r3, [r3, #32]
 8006fcc:	f023 0210 	bic.w	r2, r3, #16
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	699b      	ldr	r3, [r3, #24]
 8006fd8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	6a1b      	ldr	r3, [r3, #32]
 8006fde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006fe6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	031b      	lsls	r3, r3, #12
 8006fec:	697a      	ldr	r2, [r7, #20]
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ff8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	011b      	lsls	r3, r3, #4
 8006ffe:	693a      	ldr	r2, [r7, #16]
 8007000:	4313      	orrs	r3, r2
 8007002:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	697a      	ldr	r2, [r7, #20]
 8007008:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	693a      	ldr	r2, [r7, #16]
 800700e:	621a      	str	r2, [r3, #32]
}
 8007010:	bf00      	nop
 8007012:	371c      	adds	r7, #28
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800701c:	b480      	push	{r7}
 800701e:	b087      	sub	sp, #28
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
 8007028:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6a1b      	ldr	r3, [r3, #32]
 800702e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	69db      	ldr	r3, [r3, #28]
 800703a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6a1b      	ldr	r3, [r3, #32]
 8007040:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	f023 0303 	bic.w	r3, r3, #3
 8007048:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800704a:	697a      	ldr	r2, [r7, #20]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4313      	orrs	r3, r2
 8007050:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007058:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	011b      	lsls	r3, r3, #4
 800705e:	b2db      	uxtb	r3, r3
 8007060:	697a      	ldr	r2, [r7, #20]
 8007062:	4313      	orrs	r3, r2
 8007064:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800706c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	021b      	lsls	r3, r3, #8
 8007072:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007076:	693a      	ldr	r2, [r7, #16]
 8007078:	4313      	orrs	r3, r2
 800707a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	697a      	ldr	r2, [r7, #20]
 8007080:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	693a      	ldr	r2, [r7, #16]
 8007086:	621a      	str	r2, [r3, #32]
}
 8007088:	bf00      	nop
 800708a:	371c      	adds	r7, #28
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007094:	b480      	push	{r7}
 8007096:	b087      	sub	sp, #28
 8007098:	af00      	add	r7, sp, #0
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	60b9      	str	r1, [r7, #8]
 800709e:	607a      	str	r2, [r7, #4]
 80070a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6a1b      	ldr	r3, [r3, #32]
 80070a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	69db      	ldr	r3, [r3, #28]
 80070b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6a1b      	ldr	r3, [r3, #32]
 80070b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	021b      	lsls	r3, r3, #8
 80070c6:	697a      	ldr	r2, [r7, #20]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80070d2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	031b      	lsls	r3, r3, #12
 80070d8:	b29b      	uxth	r3, r3
 80070da:	697a      	ldr	r2, [r7, #20]
 80070dc:	4313      	orrs	r3, r2
 80070de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80070e6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	031b      	lsls	r3, r3, #12
 80070ec:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80070f0:	693a      	ldr	r2, [r7, #16]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	697a      	ldr	r2, [r7, #20]
 80070fa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	693a      	ldr	r2, [r7, #16]
 8007100:	621a      	str	r2, [r3, #32]
}
 8007102:	bf00      	nop
 8007104:	371c      	adds	r7, #28
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr

0800710e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800710e:	b480      	push	{r7}
 8007110:	b085      	sub	sp, #20
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
 8007116:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007124:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007126:	683a      	ldr	r2, [r7, #0]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	4313      	orrs	r3, r2
 800712c:	f043 0307 	orr.w	r3, r3, #7
 8007130:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	609a      	str	r2, [r3, #8]
}
 8007138:	bf00      	nop
 800713a:	3714      	adds	r7, #20
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr

08007144 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007144:	b480      	push	{r7}
 8007146:	b087      	sub	sp, #28
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	607a      	str	r2, [r7, #4]
 8007150:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800715e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	021a      	lsls	r2, r3, #8
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	431a      	orrs	r2, r3
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	4313      	orrs	r3, r2
 800716c:	697a      	ldr	r2, [r7, #20]
 800716e:	4313      	orrs	r3, r2
 8007170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	697a      	ldr	r2, [r7, #20]
 8007176:	609a      	str	r2, [r3, #8]
}
 8007178:	bf00      	nop
 800717a:	371c      	adds	r7, #28
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007184:	b480      	push	{r7}
 8007186:	b087      	sub	sp, #28
 8007188:	af00      	add	r7, sp, #0
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	f003 031f 	and.w	r3, r3, #31
 8007196:	2201      	movs	r2, #1
 8007198:	fa02 f303 	lsl.w	r3, r2, r3
 800719c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6a1a      	ldr	r2, [r3, #32]
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	43db      	mvns	r3, r3
 80071a6:	401a      	ands	r2, r3
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6a1a      	ldr	r2, [r3, #32]
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	f003 031f 	and.w	r3, r3, #31
 80071b6:	6879      	ldr	r1, [r7, #4]
 80071b8:	fa01 f303 	lsl.w	r3, r1, r3
 80071bc:	431a      	orrs	r2, r3
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	621a      	str	r2, [r3, #32]
}
 80071c2:	bf00      	nop
 80071c4:	371c      	adds	r7, #28
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
	...

080071d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d101      	bne.n	80071e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80071e4:	2302      	movs	r3, #2
 80071e6:	e050      	b.n	800728a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2202      	movs	r2, #2
 80071f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800720e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	68fa      	ldr	r2, [r7, #12]
 8007216:	4313      	orrs	r3, r2
 8007218:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a1c      	ldr	r2, [pc, #112]	; (8007298 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d018      	beq.n	800725e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007234:	d013      	beq.n	800725e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a18      	ldr	r2, [pc, #96]	; (800729c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d00e      	beq.n	800725e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a16      	ldr	r2, [pc, #88]	; (80072a0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d009      	beq.n	800725e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a15      	ldr	r2, [pc, #84]	; (80072a4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d004      	beq.n	800725e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a13      	ldr	r2, [pc, #76]	; (80072a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d10c      	bne.n	8007278 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007264:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	68ba      	ldr	r2, [r7, #8]
 800726c:	4313      	orrs	r3, r2
 800726e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	68ba      	ldr	r2, [r7, #8]
 8007276:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3714      	adds	r7, #20
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr
 8007296:	bf00      	nop
 8007298:	40010000 	.word	0x40010000
 800729c:	40000400 	.word	0x40000400
 80072a0:	40000800 	.word	0x40000800
 80072a4:	40000c00 	.word	0x40000c00
 80072a8:	40014000 	.word	0x40014000

080072ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d101      	bne.n	80072be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e03f      	b.n	800733e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d106      	bne.n	80072d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f7fa fb28 	bl	8001928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2224      	movs	r2, #36	; 0x24
 80072dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	68da      	ldr	r2, [r3, #12]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 f829 	bl	8007348 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	691a      	ldr	r2, [r3, #16]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007304:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	695a      	ldr	r2, [r3, #20]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007314:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	68da      	ldr	r2, [r3, #12]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007324:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2220      	movs	r2, #32
 8007330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2220      	movs	r2, #32
 8007338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	3708      	adds	r7, #8
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
	...

08007348 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800734c:	b0c0      	sub	sp, #256	; 0x100
 800734e:	af00      	add	r7, sp, #0
 8007350:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	691b      	ldr	r3, [r3, #16]
 800735c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007364:	68d9      	ldr	r1, [r3, #12]
 8007366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	ea40 0301 	orr.w	r3, r0, r1
 8007370:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007376:	689a      	ldr	r2, [r3, #8]
 8007378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	431a      	orrs	r2, r3
 8007380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007384:	695b      	ldr	r3, [r3, #20]
 8007386:	431a      	orrs	r2, r3
 8007388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800738c:	69db      	ldr	r3, [r3, #28]
 800738e:	4313      	orrs	r3, r2
 8007390:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80073a0:	f021 010c 	bic.w	r1, r1, #12
 80073a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80073ae:	430b      	orrs	r3, r1
 80073b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80073b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	695b      	ldr	r3, [r3, #20]
 80073ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80073be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073c2:	6999      	ldr	r1, [r3, #24]
 80073c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	ea40 0301 	orr.w	r3, r0, r1
 80073ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80073d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	4b8f      	ldr	r3, [pc, #572]	; (8007614 <UART_SetConfig+0x2cc>)
 80073d8:	429a      	cmp	r2, r3
 80073da:	d005      	beq.n	80073e8 <UART_SetConfig+0xa0>
 80073dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	4b8d      	ldr	r3, [pc, #564]	; (8007618 <UART_SetConfig+0x2d0>)
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d104      	bne.n	80073f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80073e8:	f7fe fbc4 	bl	8005b74 <HAL_RCC_GetPCLK2Freq>
 80073ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80073f0:	e003      	b.n	80073fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80073f2:	f7fe fbab 	bl	8005b4c <HAL_RCC_GetPCLK1Freq>
 80073f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073fe:	69db      	ldr	r3, [r3, #28]
 8007400:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007404:	f040 810c 	bne.w	8007620 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007408:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800740c:	2200      	movs	r2, #0
 800740e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007412:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007416:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800741a:	4622      	mov	r2, r4
 800741c:	462b      	mov	r3, r5
 800741e:	1891      	adds	r1, r2, r2
 8007420:	65b9      	str	r1, [r7, #88]	; 0x58
 8007422:	415b      	adcs	r3, r3
 8007424:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007426:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800742a:	4621      	mov	r1, r4
 800742c:	eb12 0801 	adds.w	r8, r2, r1
 8007430:	4629      	mov	r1, r5
 8007432:	eb43 0901 	adc.w	r9, r3, r1
 8007436:	f04f 0200 	mov.w	r2, #0
 800743a:	f04f 0300 	mov.w	r3, #0
 800743e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007442:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007446:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800744a:	4690      	mov	r8, r2
 800744c:	4699      	mov	r9, r3
 800744e:	4623      	mov	r3, r4
 8007450:	eb18 0303 	adds.w	r3, r8, r3
 8007454:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007458:	462b      	mov	r3, r5
 800745a:	eb49 0303 	adc.w	r3, r9, r3
 800745e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800746e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007472:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007476:	460b      	mov	r3, r1
 8007478:	18db      	adds	r3, r3, r3
 800747a:	653b      	str	r3, [r7, #80]	; 0x50
 800747c:	4613      	mov	r3, r2
 800747e:	eb42 0303 	adc.w	r3, r2, r3
 8007482:	657b      	str	r3, [r7, #84]	; 0x54
 8007484:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007488:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800748c:	f7f9 fac2 	bl	8000a14 <__aeabi_uldivmod>
 8007490:	4602      	mov	r2, r0
 8007492:	460b      	mov	r3, r1
 8007494:	4b61      	ldr	r3, [pc, #388]	; (800761c <UART_SetConfig+0x2d4>)
 8007496:	fba3 2302 	umull	r2, r3, r3, r2
 800749a:	095b      	lsrs	r3, r3, #5
 800749c:	011c      	lsls	r4, r3, #4
 800749e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074a2:	2200      	movs	r2, #0
 80074a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80074a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80074ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80074b0:	4642      	mov	r2, r8
 80074b2:	464b      	mov	r3, r9
 80074b4:	1891      	adds	r1, r2, r2
 80074b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80074b8:	415b      	adcs	r3, r3
 80074ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80074c0:	4641      	mov	r1, r8
 80074c2:	eb12 0a01 	adds.w	sl, r2, r1
 80074c6:	4649      	mov	r1, r9
 80074c8:	eb43 0b01 	adc.w	fp, r3, r1
 80074cc:	f04f 0200 	mov.w	r2, #0
 80074d0:	f04f 0300 	mov.w	r3, #0
 80074d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80074d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80074dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80074e0:	4692      	mov	sl, r2
 80074e2:	469b      	mov	fp, r3
 80074e4:	4643      	mov	r3, r8
 80074e6:	eb1a 0303 	adds.w	r3, sl, r3
 80074ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074ee:	464b      	mov	r3, r9
 80074f0:	eb4b 0303 	adc.w	r3, fp, r3
 80074f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80074f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007504:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007508:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800750c:	460b      	mov	r3, r1
 800750e:	18db      	adds	r3, r3, r3
 8007510:	643b      	str	r3, [r7, #64]	; 0x40
 8007512:	4613      	mov	r3, r2
 8007514:	eb42 0303 	adc.w	r3, r2, r3
 8007518:	647b      	str	r3, [r7, #68]	; 0x44
 800751a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800751e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007522:	f7f9 fa77 	bl	8000a14 <__aeabi_uldivmod>
 8007526:	4602      	mov	r2, r0
 8007528:	460b      	mov	r3, r1
 800752a:	4611      	mov	r1, r2
 800752c:	4b3b      	ldr	r3, [pc, #236]	; (800761c <UART_SetConfig+0x2d4>)
 800752e:	fba3 2301 	umull	r2, r3, r3, r1
 8007532:	095b      	lsrs	r3, r3, #5
 8007534:	2264      	movs	r2, #100	; 0x64
 8007536:	fb02 f303 	mul.w	r3, r2, r3
 800753a:	1acb      	subs	r3, r1, r3
 800753c:	00db      	lsls	r3, r3, #3
 800753e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007542:	4b36      	ldr	r3, [pc, #216]	; (800761c <UART_SetConfig+0x2d4>)
 8007544:	fba3 2302 	umull	r2, r3, r3, r2
 8007548:	095b      	lsrs	r3, r3, #5
 800754a:	005b      	lsls	r3, r3, #1
 800754c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007550:	441c      	add	r4, r3
 8007552:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007556:	2200      	movs	r2, #0
 8007558:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800755c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007560:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007564:	4642      	mov	r2, r8
 8007566:	464b      	mov	r3, r9
 8007568:	1891      	adds	r1, r2, r2
 800756a:	63b9      	str	r1, [r7, #56]	; 0x38
 800756c:	415b      	adcs	r3, r3
 800756e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007570:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007574:	4641      	mov	r1, r8
 8007576:	1851      	adds	r1, r2, r1
 8007578:	6339      	str	r1, [r7, #48]	; 0x30
 800757a:	4649      	mov	r1, r9
 800757c:	414b      	adcs	r3, r1
 800757e:	637b      	str	r3, [r7, #52]	; 0x34
 8007580:	f04f 0200 	mov.w	r2, #0
 8007584:	f04f 0300 	mov.w	r3, #0
 8007588:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800758c:	4659      	mov	r1, fp
 800758e:	00cb      	lsls	r3, r1, #3
 8007590:	4651      	mov	r1, sl
 8007592:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007596:	4651      	mov	r1, sl
 8007598:	00ca      	lsls	r2, r1, #3
 800759a:	4610      	mov	r0, r2
 800759c:	4619      	mov	r1, r3
 800759e:	4603      	mov	r3, r0
 80075a0:	4642      	mov	r2, r8
 80075a2:	189b      	adds	r3, r3, r2
 80075a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80075a8:	464b      	mov	r3, r9
 80075aa:	460a      	mov	r2, r1
 80075ac:	eb42 0303 	adc.w	r3, r2, r3
 80075b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80075b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80075c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80075c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80075c8:	460b      	mov	r3, r1
 80075ca:	18db      	adds	r3, r3, r3
 80075cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80075ce:	4613      	mov	r3, r2
 80075d0:	eb42 0303 	adc.w	r3, r2, r3
 80075d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80075da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80075de:	f7f9 fa19 	bl	8000a14 <__aeabi_uldivmod>
 80075e2:	4602      	mov	r2, r0
 80075e4:	460b      	mov	r3, r1
 80075e6:	4b0d      	ldr	r3, [pc, #52]	; (800761c <UART_SetConfig+0x2d4>)
 80075e8:	fba3 1302 	umull	r1, r3, r3, r2
 80075ec:	095b      	lsrs	r3, r3, #5
 80075ee:	2164      	movs	r1, #100	; 0x64
 80075f0:	fb01 f303 	mul.w	r3, r1, r3
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	00db      	lsls	r3, r3, #3
 80075f8:	3332      	adds	r3, #50	; 0x32
 80075fa:	4a08      	ldr	r2, [pc, #32]	; (800761c <UART_SetConfig+0x2d4>)
 80075fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007600:	095b      	lsrs	r3, r3, #5
 8007602:	f003 0207 	and.w	r2, r3, #7
 8007606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4422      	add	r2, r4
 800760e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007610:	e105      	b.n	800781e <UART_SetConfig+0x4d6>
 8007612:	bf00      	nop
 8007614:	40011000 	.word	0x40011000
 8007618:	40011400 	.word	0x40011400
 800761c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007620:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007624:	2200      	movs	r2, #0
 8007626:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800762a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800762e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007632:	4642      	mov	r2, r8
 8007634:	464b      	mov	r3, r9
 8007636:	1891      	adds	r1, r2, r2
 8007638:	6239      	str	r1, [r7, #32]
 800763a:	415b      	adcs	r3, r3
 800763c:	627b      	str	r3, [r7, #36]	; 0x24
 800763e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007642:	4641      	mov	r1, r8
 8007644:	1854      	adds	r4, r2, r1
 8007646:	4649      	mov	r1, r9
 8007648:	eb43 0501 	adc.w	r5, r3, r1
 800764c:	f04f 0200 	mov.w	r2, #0
 8007650:	f04f 0300 	mov.w	r3, #0
 8007654:	00eb      	lsls	r3, r5, #3
 8007656:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800765a:	00e2      	lsls	r2, r4, #3
 800765c:	4614      	mov	r4, r2
 800765e:	461d      	mov	r5, r3
 8007660:	4643      	mov	r3, r8
 8007662:	18e3      	adds	r3, r4, r3
 8007664:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007668:	464b      	mov	r3, r9
 800766a:	eb45 0303 	adc.w	r3, r5, r3
 800766e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800767e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007682:	f04f 0200 	mov.w	r2, #0
 8007686:	f04f 0300 	mov.w	r3, #0
 800768a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800768e:	4629      	mov	r1, r5
 8007690:	008b      	lsls	r3, r1, #2
 8007692:	4621      	mov	r1, r4
 8007694:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007698:	4621      	mov	r1, r4
 800769a:	008a      	lsls	r2, r1, #2
 800769c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80076a0:	f7f9 f9b8 	bl	8000a14 <__aeabi_uldivmod>
 80076a4:	4602      	mov	r2, r0
 80076a6:	460b      	mov	r3, r1
 80076a8:	4b60      	ldr	r3, [pc, #384]	; (800782c <UART_SetConfig+0x4e4>)
 80076aa:	fba3 2302 	umull	r2, r3, r3, r2
 80076ae:	095b      	lsrs	r3, r3, #5
 80076b0:	011c      	lsls	r4, r3, #4
 80076b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076b6:	2200      	movs	r2, #0
 80076b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80076bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80076c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80076c4:	4642      	mov	r2, r8
 80076c6:	464b      	mov	r3, r9
 80076c8:	1891      	adds	r1, r2, r2
 80076ca:	61b9      	str	r1, [r7, #24]
 80076cc:	415b      	adcs	r3, r3
 80076ce:	61fb      	str	r3, [r7, #28]
 80076d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80076d4:	4641      	mov	r1, r8
 80076d6:	1851      	adds	r1, r2, r1
 80076d8:	6139      	str	r1, [r7, #16]
 80076da:	4649      	mov	r1, r9
 80076dc:	414b      	adcs	r3, r1
 80076de:	617b      	str	r3, [r7, #20]
 80076e0:	f04f 0200 	mov.w	r2, #0
 80076e4:	f04f 0300 	mov.w	r3, #0
 80076e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80076ec:	4659      	mov	r1, fp
 80076ee:	00cb      	lsls	r3, r1, #3
 80076f0:	4651      	mov	r1, sl
 80076f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076f6:	4651      	mov	r1, sl
 80076f8:	00ca      	lsls	r2, r1, #3
 80076fa:	4610      	mov	r0, r2
 80076fc:	4619      	mov	r1, r3
 80076fe:	4603      	mov	r3, r0
 8007700:	4642      	mov	r2, r8
 8007702:	189b      	adds	r3, r3, r2
 8007704:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007708:	464b      	mov	r3, r9
 800770a:	460a      	mov	r2, r1
 800770c:	eb42 0303 	adc.w	r3, r2, r3
 8007710:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	67bb      	str	r3, [r7, #120]	; 0x78
 800771e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007720:	f04f 0200 	mov.w	r2, #0
 8007724:	f04f 0300 	mov.w	r3, #0
 8007728:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800772c:	4649      	mov	r1, r9
 800772e:	008b      	lsls	r3, r1, #2
 8007730:	4641      	mov	r1, r8
 8007732:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007736:	4641      	mov	r1, r8
 8007738:	008a      	lsls	r2, r1, #2
 800773a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800773e:	f7f9 f969 	bl	8000a14 <__aeabi_uldivmod>
 8007742:	4602      	mov	r2, r0
 8007744:	460b      	mov	r3, r1
 8007746:	4b39      	ldr	r3, [pc, #228]	; (800782c <UART_SetConfig+0x4e4>)
 8007748:	fba3 1302 	umull	r1, r3, r3, r2
 800774c:	095b      	lsrs	r3, r3, #5
 800774e:	2164      	movs	r1, #100	; 0x64
 8007750:	fb01 f303 	mul.w	r3, r1, r3
 8007754:	1ad3      	subs	r3, r2, r3
 8007756:	011b      	lsls	r3, r3, #4
 8007758:	3332      	adds	r3, #50	; 0x32
 800775a:	4a34      	ldr	r2, [pc, #208]	; (800782c <UART_SetConfig+0x4e4>)
 800775c:	fba2 2303 	umull	r2, r3, r2, r3
 8007760:	095b      	lsrs	r3, r3, #5
 8007762:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007766:	441c      	add	r4, r3
 8007768:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800776c:	2200      	movs	r2, #0
 800776e:	673b      	str	r3, [r7, #112]	; 0x70
 8007770:	677a      	str	r2, [r7, #116]	; 0x74
 8007772:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007776:	4642      	mov	r2, r8
 8007778:	464b      	mov	r3, r9
 800777a:	1891      	adds	r1, r2, r2
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	415b      	adcs	r3, r3
 8007780:	60fb      	str	r3, [r7, #12]
 8007782:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007786:	4641      	mov	r1, r8
 8007788:	1851      	adds	r1, r2, r1
 800778a:	6039      	str	r1, [r7, #0]
 800778c:	4649      	mov	r1, r9
 800778e:	414b      	adcs	r3, r1
 8007790:	607b      	str	r3, [r7, #4]
 8007792:	f04f 0200 	mov.w	r2, #0
 8007796:	f04f 0300 	mov.w	r3, #0
 800779a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800779e:	4659      	mov	r1, fp
 80077a0:	00cb      	lsls	r3, r1, #3
 80077a2:	4651      	mov	r1, sl
 80077a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80077a8:	4651      	mov	r1, sl
 80077aa:	00ca      	lsls	r2, r1, #3
 80077ac:	4610      	mov	r0, r2
 80077ae:	4619      	mov	r1, r3
 80077b0:	4603      	mov	r3, r0
 80077b2:	4642      	mov	r2, r8
 80077b4:	189b      	adds	r3, r3, r2
 80077b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80077b8:	464b      	mov	r3, r9
 80077ba:	460a      	mov	r2, r1
 80077bc:	eb42 0303 	adc.w	r3, r2, r3
 80077c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80077c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	663b      	str	r3, [r7, #96]	; 0x60
 80077cc:	667a      	str	r2, [r7, #100]	; 0x64
 80077ce:	f04f 0200 	mov.w	r2, #0
 80077d2:	f04f 0300 	mov.w	r3, #0
 80077d6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80077da:	4649      	mov	r1, r9
 80077dc:	008b      	lsls	r3, r1, #2
 80077de:	4641      	mov	r1, r8
 80077e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077e4:	4641      	mov	r1, r8
 80077e6:	008a      	lsls	r2, r1, #2
 80077e8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80077ec:	f7f9 f912 	bl	8000a14 <__aeabi_uldivmod>
 80077f0:	4602      	mov	r2, r0
 80077f2:	460b      	mov	r3, r1
 80077f4:	4b0d      	ldr	r3, [pc, #52]	; (800782c <UART_SetConfig+0x4e4>)
 80077f6:	fba3 1302 	umull	r1, r3, r3, r2
 80077fa:	095b      	lsrs	r3, r3, #5
 80077fc:	2164      	movs	r1, #100	; 0x64
 80077fe:	fb01 f303 	mul.w	r3, r1, r3
 8007802:	1ad3      	subs	r3, r2, r3
 8007804:	011b      	lsls	r3, r3, #4
 8007806:	3332      	adds	r3, #50	; 0x32
 8007808:	4a08      	ldr	r2, [pc, #32]	; (800782c <UART_SetConfig+0x4e4>)
 800780a:	fba2 2303 	umull	r2, r3, r2, r3
 800780e:	095b      	lsrs	r3, r3, #5
 8007810:	f003 020f 	and.w	r2, r3, #15
 8007814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4422      	add	r2, r4
 800781c:	609a      	str	r2, [r3, #8]
}
 800781e:	bf00      	nop
 8007820:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007824:	46bd      	mov	sp, r7
 8007826:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800782a:	bf00      	nop
 800782c:	51eb851f 	.word	0x51eb851f

08007830 <__libc_init_array>:
 8007830:	b570      	push	{r4, r5, r6, lr}
 8007832:	4d0d      	ldr	r5, [pc, #52]	; (8007868 <__libc_init_array+0x38>)
 8007834:	4c0d      	ldr	r4, [pc, #52]	; (800786c <__libc_init_array+0x3c>)
 8007836:	1b64      	subs	r4, r4, r5
 8007838:	10a4      	asrs	r4, r4, #2
 800783a:	2600      	movs	r6, #0
 800783c:	42a6      	cmp	r6, r4
 800783e:	d109      	bne.n	8007854 <__libc_init_array+0x24>
 8007840:	4d0b      	ldr	r5, [pc, #44]	; (8007870 <__libc_init_array+0x40>)
 8007842:	4c0c      	ldr	r4, [pc, #48]	; (8007874 <__libc_init_array+0x44>)
 8007844:	f000 f820 	bl	8007888 <_init>
 8007848:	1b64      	subs	r4, r4, r5
 800784a:	10a4      	asrs	r4, r4, #2
 800784c:	2600      	movs	r6, #0
 800784e:	42a6      	cmp	r6, r4
 8007850:	d105      	bne.n	800785e <__libc_init_array+0x2e>
 8007852:	bd70      	pop	{r4, r5, r6, pc}
 8007854:	f855 3b04 	ldr.w	r3, [r5], #4
 8007858:	4798      	blx	r3
 800785a:	3601      	adds	r6, #1
 800785c:	e7ee      	b.n	800783c <__libc_init_array+0xc>
 800785e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007862:	4798      	blx	r3
 8007864:	3601      	adds	r6, #1
 8007866:	e7f2      	b.n	800784e <__libc_init_array+0x1e>
 8007868:	080078c8 	.word	0x080078c8
 800786c:	080078c8 	.word	0x080078c8
 8007870:	080078c8 	.word	0x080078c8
 8007874:	080078cc 	.word	0x080078cc

08007878 <memset>:
 8007878:	4402      	add	r2, r0
 800787a:	4603      	mov	r3, r0
 800787c:	4293      	cmp	r3, r2
 800787e:	d100      	bne.n	8007882 <memset+0xa>
 8007880:	4770      	bx	lr
 8007882:	f803 1b01 	strb.w	r1, [r3], #1
 8007886:	e7f9      	b.n	800787c <memset+0x4>

08007888 <_init>:
 8007888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800788a:	bf00      	nop
 800788c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800788e:	bc08      	pop	{r3}
 8007890:	469e      	mov	lr, r3
 8007892:	4770      	bx	lr

08007894 <_fini>:
 8007894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007896:	bf00      	nop
 8007898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800789a:	bc08      	pop	{r3}
 800789c:	469e      	mov	lr, r3
 800789e:	4770      	bx	lr
